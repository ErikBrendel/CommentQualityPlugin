# id;timestamp;commentText;codeText;commentWords;codeWords
ClassReader -> private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset);1531241461;Parses the header of a JVMS type_annotation structure to extract its target_type, target_info_and target_path (the result is stored in the given context), and returns the start offset of_the rest of the type_annotation structure.__@param context information about the class being parsed. This is where the extracted_target_type and target_path must be stored._@param typeAnnotationOffset the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset) {_    int currentOffset = typeAnnotationOffset__    _    int targetType = readInt(typeAnnotationOffset)__    switch (targetType >>> 24) {_      case TypeReference.CLASS_TYPE_PARAMETER:_      case TypeReference.METHOD_TYPE_PARAMETER:_      case TypeReference.METHOD_FORMAL_PARAMETER:_        targetType &= 0xFFFF0000__        currentOffset += 2__        break__      case TypeReference.FIELD:_      case TypeReference.METHOD_RETURN:_      case TypeReference.METHOD_RECEIVER:_        targetType &= 0xFF000000__        currentOffset += 1__        break__      case TypeReference.LOCAL_VARIABLE:_      case TypeReference.RESOURCE_VARIABLE:_        targetType &= 0xFF000000__        int tableLength = readUnsignedShort(currentOffset + 1)__        currentOffset += 3__        context.currentLocalVariableAnnotationRangeStarts = new Label[tableLength]__        context.currentLocalVariableAnnotationRangeEnds = new Label[tableLength]__        context.currentLocalVariableAnnotationRangeIndices = new int[tableLength]__        for (int i = 0_ i < tableLength_ ++i) {_          int startPc = readUnsignedShort(currentOffset)__          int length = readUnsignedShort(currentOffset + 2)__          int index = readUnsignedShort(currentOffset + 4)__          currentOffset += 6__          context.currentLocalVariableAnnotationRangeStarts[i] =_              createLabel(startPc, context.currentMethodLabels)__          context.currentLocalVariableAnnotationRangeEnds[i] =_              createLabel(startPc + length, context.currentMethodLabels)__          context.currentLocalVariableAnnotationRangeIndices[i] = index__        }_        break__      case TypeReference.CAST:_      case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:_      case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:_      case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:_      case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:_        targetType &= 0xFF0000FF__        currentOffset += 4__        break__      case TypeReference.CLASS_EXTENDS:_      case TypeReference.CLASS_TYPE_PARAMETER_BOUND:_      case TypeReference.METHOD_TYPE_PARAMETER_BOUND:_      case TypeReference.THROWS:_      case TypeReference.EXCEPTION_PARAMETER:_        targetType &= 0xFFFFFF00__        currentOffset += 3__        break__      case TypeReference.INSTANCEOF:_      case TypeReference.NEW:_      case TypeReference.CONSTRUCTOR_REFERENCE:_      case TypeReference.METHOD_REFERENCE:_        targetType &= 0xFF000000__        currentOffset += 3__        break__      default:_        throw new IllegalArgumentException()__    }_    context.currentTypeAnnotationTarget = targetType__    _    int pathLength = readByte(currentOffset)__    context.currentTypeAnnotationTargetPath =_        pathLength == 0 ? null : new TypePath(b, currentOffset)__    _    return currentOffset + 1 + 2 * pathLength__  };parses,the,header,of,a,jvms,structure,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,type,annotation,offset,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,type,annotation,target,final,context,context,final,int,type,annotation,offset,int,current,offset,type,annotation,offset,int,target,type,read,int,type,annotation,offset,switch,target,type,24,case,type,reference,case,type,reference,case,type,reference,target,type,0x,ffff0000,current,offset,2,break,case,type,reference,field,case,type,reference,case,type,reference,target,type,0x,ff000000,current,offset,1,break,case,type,reference,case,type,reference,target,type,0x,ff000000,int,table,length,read,unsigned,short,current,offset,1,current,offset,3,context,current,local,variable,annotation,range,starts,new,label,table,length,context,current,local,variable,annotation,range,ends,new,label,table,length,context,current,local,variable,annotation,range,indices,new,int,table,length,for,int,i,0,i,table,length,i,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,int,index,read,unsigned,short,current,offset,4,current,offset,6,context,current,local,variable,annotation,range,starts,i,create,label,start,pc,context,current,method,labels,context,current,local,variable,annotation,range,ends,i,create,label,start,pc,length,context,current,method,labels,context,current,local,variable,annotation,range,indices,i,index,break,case,type,reference,cast,case,type,reference,case,type,reference,case,type,reference,case,type,reference,target,type,0x,ff0000ff,current,offset,4,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,throws,case,type,reference,target,type,0x,ffffff00,current,offset,3,break,case,type,reference,instanceof,case,type,reference,new,case,type,reference,case,type,reference,target,type,0x,ff000000,current,offset,3,break,default,throw,new,illegal,argument,exception,context,current,type,annotation,target,target,type,int,path,length,read,byte,current,offset,context,current,type,annotation,target,path,path,length,0,null,new,type,path,b,current,offset,return,current,offset,1,2,path,length
ClassReader -> private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset);1536664245;Parses the header of a JVMS type_annotation structure to extract its target_type, target_info_and target_path (the result is stored in the given context), and returns the start offset of_the rest of the type_annotation structure.__@param context information about the class being parsed. This is where the extracted_target_type and target_path must be stored._@param typeAnnotationOffset the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset) {_    int currentOffset = typeAnnotationOffset__    _    int targetType = readInt(typeAnnotationOffset)__    switch (targetType >>> 24) {_      case TypeReference.CLASS_TYPE_PARAMETER:_      case TypeReference.METHOD_TYPE_PARAMETER:_      case TypeReference.METHOD_FORMAL_PARAMETER:_        targetType &= 0xFFFF0000__        currentOffset += 2__        break__      case TypeReference.FIELD:_      case TypeReference.METHOD_RETURN:_      case TypeReference.METHOD_RECEIVER:_        targetType &= 0xFF000000__        currentOffset += 1__        break__      case TypeReference.LOCAL_VARIABLE:_      case TypeReference.RESOURCE_VARIABLE:_        targetType &= 0xFF000000__        int tableLength = readUnsignedShort(currentOffset + 1)__        currentOffset += 3__        context.currentLocalVariableAnnotationRangeStarts = new Label[tableLength]__        context.currentLocalVariableAnnotationRangeEnds = new Label[tableLength]__        context.currentLocalVariableAnnotationRangeIndices = new int[tableLength]__        for (int i = 0_ i < tableLength_ ++i) {_          int startPc = readUnsignedShort(currentOffset)__          int length = readUnsignedShort(currentOffset + 2)__          int index = readUnsignedShort(currentOffset + 4)__          currentOffset += 6__          context.currentLocalVariableAnnotationRangeStarts[i] =_              createLabel(startPc, context.currentMethodLabels)__          context.currentLocalVariableAnnotationRangeEnds[i] =_              createLabel(startPc + length, context.currentMethodLabels)__          context.currentLocalVariableAnnotationRangeIndices[i] = index__        }_        break__      case TypeReference.CAST:_      case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:_      case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:_      case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:_      case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:_        targetType &= 0xFF0000FF__        currentOffset += 4__        break__      case TypeReference.CLASS_EXTENDS:_      case TypeReference.CLASS_TYPE_PARAMETER_BOUND:_      case TypeReference.METHOD_TYPE_PARAMETER_BOUND:_      case TypeReference.THROWS:_      case TypeReference.EXCEPTION_PARAMETER:_        targetType &= 0xFFFFFF00__        currentOffset += 3__        break__      case TypeReference.INSTANCEOF:_      case TypeReference.NEW:_      case TypeReference.CONSTRUCTOR_REFERENCE:_      case TypeReference.METHOD_REFERENCE:_        targetType &= 0xFF000000__        currentOffset += 3__        break__      default:_        throw new IllegalArgumentException()__    }_    context.currentTypeAnnotationTarget = targetType__    _    int pathLength = readByte(currentOffset)__    context.currentTypeAnnotationTargetPath =_        pathLength == 0 ? null : new TypePath(b, currentOffset)__    _    return currentOffset + 1 + 2 * pathLength__  };parses,the,header,of,a,jvms,structure,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,type,annotation,offset,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,type,annotation,target,final,context,context,final,int,type,annotation,offset,int,current,offset,type,annotation,offset,int,target,type,read,int,type,annotation,offset,switch,target,type,24,case,type,reference,case,type,reference,case,type,reference,target,type,0x,ffff0000,current,offset,2,break,case,type,reference,field,case,type,reference,case,type,reference,target,type,0x,ff000000,current,offset,1,break,case,type,reference,case,type,reference,target,type,0x,ff000000,int,table,length,read,unsigned,short,current,offset,1,current,offset,3,context,current,local,variable,annotation,range,starts,new,label,table,length,context,current,local,variable,annotation,range,ends,new,label,table,length,context,current,local,variable,annotation,range,indices,new,int,table,length,for,int,i,0,i,table,length,i,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,int,index,read,unsigned,short,current,offset,4,current,offset,6,context,current,local,variable,annotation,range,starts,i,create,label,start,pc,context,current,method,labels,context,current,local,variable,annotation,range,ends,i,create,label,start,pc,length,context,current,method,labels,context,current,local,variable,annotation,range,indices,i,index,break,case,type,reference,cast,case,type,reference,case,type,reference,case,type,reference,case,type,reference,target,type,0x,ff0000ff,current,offset,4,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,throws,case,type,reference,target,type,0x,ffffff00,current,offset,3,break,case,type,reference,instanceof,case,type,reference,new,case,type,reference,case,type,reference,target,type,0x,ff000000,current,offset,3,break,default,throw,new,illegal,argument,exception,context,current,type,annotation,target,target,type,int,path,length,read,byte,current,offset,context,current,type,annotation,target,path,path,length,0,null,new,type,path,b,current,offset,return,current,offset,1,2,path,length
ClassReader -> private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset);1536747989;Parses the header of a JVMS type_annotation structure to extract its target_type, target_info_and target_path (the result is stored in the given context), and returns the start offset of_the rest of the type_annotation structure.__@param context information about the class being parsed. This is where the extracted_target_type and target_path must be stored._@param typeAnnotationOffset the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset) {_    int currentOffset = typeAnnotationOffset__    _    int targetType = readInt(typeAnnotationOffset)__    switch (targetType >>> 24) {_      case TypeReference.CLASS_TYPE_PARAMETER:_      case TypeReference.METHOD_TYPE_PARAMETER:_      case TypeReference.METHOD_FORMAL_PARAMETER:_        targetType &= 0xFFFF0000__        currentOffset += 2__        break__      case TypeReference.FIELD:_      case TypeReference.METHOD_RETURN:_      case TypeReference.METHOD_RECEIVER:_        targetType &= 0xFF000000__        currentOffset += 1__        break__      case TypeReference.LOCAL_VARIABLE:_      case TypeReference.RESOURCE_VARIABLE:_        targetType &= 0xFF000000__        int tableLength = readUnsignedShort(currentOffset + 1)__        currentOffset += 3__        context.currentLocalVariableAnnotationRangeStarts = new Label[tableLength]__        context.currentLocalVariableAnnotationRangeEnds = new Label[tableLength]__        context.currentLocalVariableAnnotationRangeIndices = new int[tableLength]__        for (int i = 0_ i < tableLength_ ++i) {_          int startPc = readUnsignedShort(currentOffset)__          int length = readUnsignedShort(currentOffset + 2)__          int index = readUnsignedShort(currentOffset + 4)__          currentOffset += 6__          context.currentLocalVariableAnnotationRangeStarts[i] =_              createLabel(startPc, context.currentMethodLabels)__          context.currentLocalVariableAnnotationRangeEnds[i] =_              createLabel(startPc + length, context.currentMethodLabels)__          context.currentLocalVariableAnnotationRangeIndices[i] = index__        }_        break__      case TypeReference.CAST:_      case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:_      case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:_      case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:_      case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:_        targetType &= 0xFF0000FF__        currentOffset += 4__        break__      case TypeReference.CLASS_EXTENDS:_      case TypeReference.CLASS_TYPE_PARAMETER_BOUND:_      case TypeReference.METHOD_TYPE_PARAMETER_BOUND:_      case TypeReference.THROWS:_      case TypeReference.EXCEPTION_PARAMETER:_        targetType &= 0xFFFFFF00__        currentOffset += 3__        break__      case TypeReference.INSTANCEOF:_      case TypeReference.NEW:_      case TypeReference.CONSTRUCTOR_REFERENCE:_      case TypeReference.METHOD_REFERENCE:_        targetType &= 0xFF000000__        currentOffset += 3__        break__      default:_        throw new IllegalArgumentException()__    }_    context.currentTypeAnnotationTarget = targetType__    _    int pathLength = readByte(currentOffset)__    context.currentTypeAnnotationTargetPath =_        pathLength == 0 ? null : new TypePath(b, currentOffset)__    _    return currentOffset + 1 + 2 * pathLength__  };parses,the,header,of,a,jvms,structure,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,type,annotation,offset,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,type,annotation,target,final,context,context,final,int,type,annotation,offset,int,current,offset,type,annotation,offset,int,target,type,read,int,type,annotation,offset,switch,target,type,24,case,type,reference,case,type,reference,case,type,reference,target,type,0x,ffff0000,current,offset,2,break,case,type,reference,field,case,type,reference,case,type,reference,target,type,0x,ff000000,current,offset,1,break,case,type,reference,case,type,reference,target,type,0x,ff000000,int,table,length,read,unsigned,short,current,offset,1,current,offset,3,context,current,local,variable,annotation,range,starts,new,label,table,length,context,current,local,variable,annotation,range,ends,new,label,table,length,context,current,local,variable,annotation,range,indices,new,int,table,length,for,int,i,0,i,table,length,i,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,int,index,read,unsigned,short,current,offset,4,current,offset,6,context,current,local,variable,annotation,range,starts,i,create,label,start,pc,context,current,method,labels,context,current,local,variable,annotation,range,ends,i,create,label,start,pc,length,context,current,method,labels,context,current,local,variable,annotation,range,indices,i,index,break,case,type,reference,cast,case,type,reference,case,type,reference,case,type,reference,case,type,reference,target,type,0x,ff0000ff,current,offset,4,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,throws,case,type,reference,target,type,0x,ffffff00,current,offset,3,break,case,type,reference,instanceof,case,type,reference,new,case,type,reference,case,type,reference,target,type,0x,ff000000,current,offset,3,break,default,throw,new,illegal,argument,exception,context,current,type,annotation,target,target,type,int,path,length,read,byte,current,offset,context,current,type,annotation,target,path,path,length,0,null,new,type,path,b,current,offset,return,current,offset,1,2,path,length
ClassReader -> private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset);1537204147;Parses the header of a JVMS type_annotation structure to extract its target_type, target_info_and target_path (the result is stored in the given context), and returns the start offset of_the rest of the type_annotation structure.__@param context information about the class being parsed. This is where the extracted_target_type and target_path must be stored._@param typeAnnotationOffset the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset) {_    int currentOffset = typeAnnotationOffset__    _    int targetType = readInt(typeAnnotationOffset)__    switch (targetType >>> 24) {_      case TypeReference.CLASS_TYPE_PARAMETER:_      case TypeReference.METHOD_TYPE_PARAMETER:_      case TypeReference.METHOD_FORMAL_PARAMETER:_        targetType &= 0xFFFF0000__        currentOffset += 2__        break__      case TypeReference.FIELD:_      case TypeReference.METHOD_RETURN:_      case TypeReference.METHOD_RECEIVER:_        targetType &= 0xFF000000__        currentOffset += 1__        break__      case TypeReference.LOCAL_VARIABLE:_      case TypeReference.RESOURCE_VARIABLE:_        targetType &= 0xFF000000__        int tableLength = readUnsignedShort(currentOffset + 1)__        currentOffset += 3__        context.currentLocalVariableAnnotationRangeStarts = new Label[tableLength]__        context.currentLocalVariableAnnotationRangeEnds = new Label[tableLength]__        context.currentLocalVariableAnnotationRangeIndices = new int[tableLength]__        for (int i = 0_ i < tableLength_ ++i) {_          int startPc = readUnsignedShort(currentOffset)__          int length = readUnsignedShort(currentOffset + 2)__          int index = readUnsignedShort(currentOffset + 4)__          currentOffset += 6__          context.currentLocalVariableAnnotationRangeStarts[i] =_              createLabel(startPc, context.currentMethodLabels)__          context.currentLocalVariableAnnotationRangeEnds[i] =_              createLabel(startPc + length, context.currentMethodLabels)__          context.currentLocalVariableAnnotationRangeIndices[i] = index__        }_        break__      case TypeReference.CAST:_      case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:_      case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:_      case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:_      case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:_        targetType &= 0xFF0000FF__        currentOffset += 4__        break__      case TypeReference.CLASS_EXTENDS:_      case TypeReference.CLASS_TYPE_PARAMETER_BOUND:_      case TypeReference.METHOD_TYPE_PARAMETER_BOUND:_      case TypeReference.THROWS:_      case TypeReference.EXCEPTION_PARAMETER:_        targetType &= 0xFFFFFF00__        currentOffset += 3__        break__      case TypeReference.INSTANCEOF:_      case TypeReference.NEW:_      case TypeReference.CONSTRUCTOR_REFERENCE:_      case TypeReference.METHOD_REFERENCE:_        targetType &= 0xFF000000__        currentOffset += 3__        break__      default:_        throw new IllegalArgumentException()__    }_    context.currentTypeAnnotationTarget = targetType__    _    int pathLength = readByte(currentOffset)__    context.currentTypeAnnotationTargetPath =_        pathLength == 0 ? null : new TypePath(b, currentOffset)__    _    return currentOffset + 1 + 2 * pathLength__  };parses,the,header,of,a,jvms,structure,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,type,annotation,offset,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,type,annotation,target,final,context,context,final,int,type,annotation,offset,int,current,offset,type,annotation,offset,int,target,type,read,int,type,annotation,offset,switch,target,type,24,case,type,reference,case,type,reference,case,type,reference,target,type,0x,ffff0000,current,offset,2,break,case,type,reference,field,case,type,reference,case,type,reference,target,type,0x,ff000000,current,offset,1,break,case,type,reference,case,type,reference,target,type,0x,ff000000,int,table,length,read,unsigned,short,current,offset,1,current,offset,3,context,current,local,variable,annotation,range,starts,new,label,table,length,context,current,local,variable,annotation,range,ends,new,label,table,length,context,current,local,variable,annotation,range,indices,new,int,table,length,for,int,i,0,i,table,length,i,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,int,index,read,unsigned,short,current,offset,4,current,offset,6,context,current,local,variable,annotation,range,starts,i,create,label,start,pc,context,current,method,labels,context,current,local,variable,annotation,range,ends,i,create,label,start,pc,length,context,current,method,labels,context,current,local,variable,annotation,range,indices,i,index,break,case,type,reference,cast,case,type,reference,case,type,reference,case,type,reference,case,type,reference,target,type,0x,ff0000ff,current,offset,4,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,throws,case,type,reference,target,type,0x,ffffff00,current,offset,3,break,case,type,reference,instanceof,case,type,reference,new,case,type,reference,case,type,reference,target,type,0x,ff000000,current,offset,3,break,default,throw,new,illegal,argument,exception,context,current,type,annotation,target,target,type,int,path,length,read,byte,current,offset,context,current,type,annotation,target,path,path,length,0,null,new,type,path,b,current,offset,return,current,offset,1,2,path,length
ClassReader -> private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset);1539119582;Parses the header of a JVMS type_annotation structure to extract its target_type, target_info_and target_path (the result is stored in the given context), and returns the start offset of_the rest of the type_annotation structure.__@param context information about the class being parsed. This is where the extracted_target_type and target_path must be stored._@param typeAnnotationOffset the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset) {_    int currentOffset = typeAnnotationOffset__    _    int targetType = readInt(typeAnnotationOffset)__    switch (targetType >>> 24) {_      case TypeReference.CLASS_TYPE_PARAMETER:_      case TypeReference.METHOD_TYPE_PARAMETER:_      case TypeReference.METHOD_FORMAL_PARAMETER:_        targetType &= 0xFFFF0000__        currentOffset += 2__        break__      case TypeReference.FIELD:_      case TypeReference.METHOD_RETURN:_      case TypeReference.METHOD_RECEIVER:_        targetType &= 0xFF000000__        currentOffset += 1__        break__      case TypeReference.LOCAL_VARIABLE:_      case TypeReference.RESOURCE_VARIABLE:_        targetType &= 0xFF000000__        int tableLength = readUnsignedShort(currentOffset + 1)__        currentOffset += 3__        context.currentLocalVariableAnnotationRangeStarts = new Label[tableLength]__        context.currentLocalVariableAnnotationRangeEnds = new Label[tableLength]__        context.currentLocalVariableAnnotationRangeIndices = new int[tableLength]__        for (int i = 0_ i < tableLength_ ++i) {_          int startPc = readUnsignedShort(currentOffset)__          int length = readUnsignedShort(currentOffset + 2)__          int index = readUnsignedShort(currentOffset + 4)__          currentOffset += 6__          context.currentLocalVariableAnnotationRangeStarts[i] =_              createLabel(startPc, context.currentMethodLabels)__          context.currentLocalVariableAnnotationRangeEnds[i] =_              createLabel(startPc + length, context.currentMethodLabels)__          context.currentLocalVariableAnnotationRangeIndices[i] = index__        }_        break__      case TypeReference.CAST:_      case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:_      case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:_      case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:_      case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:_        targetType &= 0xFF0000FF__        currentOffset += 4__        break__      case TypeReference.CLASS_EXTENDS:_      case TypeReference.CLASS_TYPE_PARAMETER_BOUND:_      case TypeReference.METHOD_TYPE_PARAMETER_BOUND:_      case TypeReference.THROWS:_      case TypeReference.EXCEPTION_PARAMETER:_        targetType &= 0xFFFFFF00__        currentOffset += 3__        break__      case TypeReference.INSTANCEOF:_      case TypeReference.NEW:_      case TypeReference.CONSTRUCTOR_REFERENCE:_      case TypeReference.METHOD_REFERENCE:_        targetType &= 0xFF000000__        currentOffset += 3__        break__      default:_        throw new IllegalArgumentException()__    }_    context.currentTypeAnnotationTarget = targetType__    _    int pathLength = readByte(currentOffset)__    context.currentTypeAnnotationTargetPath =_        pathLength == 0 ? null : new TypePath(b, currentOffset)__    _    return currentOffset + 1 + 2 * pathLength__  };parses,the,header,of,a,jvms,structure,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,type,annotation,offset,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,type,annotation,target,final,context,context,final,int,type,annotation,offset,int,current,offset,type,annotation,offset,int,target,type,read,int,type,annotation,offset,switch,target,type,24,case,type,reference,case,type,reference,case,type,reference,target,type,0x,ffff0000,current,offset,2,break,case,type,reference,field,case,type,reference,case,type,reference,target,type,0x,ff000000,current,offset,1,break,case,type,reference,case,type,reference,target,type,0x,ff000000,int,table,length,read,unsigned,short,current,offset,1,current,offset,3,context,current,local,variable,annotation,range,starts,new,label,table,length,context,current,local,variable,annotation,range,ends,new,label,table,length,context,current,local,variable,annotation,range,indices,new,int,table,length,for,int,i,0,i,table,length,i,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,int,index,read,unsigned,short,current,offset,4,current,offset,6,context,current,local,variable,annotation,range,starts,i,create,label,start,pc,context,current,method,labels,context,current,local,variable,annotation,range,ends,i,create,label,start,pc,length,context,current,method,labels,context,current,local,variable,annotation,range,indices,i,index,break,case,type,reference,cast,case,type,reference,case,type,reference,case,type,reference,case,type,reference,target,type,0x,ff0000ff,current,offset,4,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,throws,case,type,reference,target,type,0x,ffffff00,current,offset,3,break,case,type,reference,instanceof,case,type,reference,new,case,type,reference,case,type,reference,target,type,0x,ff000000,current,offset,3,break,default,throw,new,illegal,argument,exception,context,current,type,annotation,target,target,type,int,path,length,read,byte,current,offset,context,current,type,annotation,target,path,path,length,0,null,new,type,path,b,current,offset,return,current,offset,1,2,path,length
ClassReader -> private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset);1541436263;Parses the header of a JVMS type_annotation structure to extract its target_type, target_info_and target_path (the result is stored in the given context), and returns the start offset of_the rest of the type_annotation structure.__@param context information about the class being parsed. This is where the extracted_target_type and target_path must be stored._@param typeAnnotationOffset the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset) {_    int currentOffset = typeAnnotationOffset__    _    int targetType = readInt(typeAnnotationOffset)__    switch (targetType >>> 24) {_      case TypeReference.CLASS_TYPE_PARAMETER:_      case TypeReference.METHOD_TYPE_PARAMETER:_      case TypeReference.METHOD_FORMAL_PARAMETER:_        targetType &= 0xFFFF0000__        currentOffset += 2__        break__      case TypeReference.FIELD:_      case TypeReference.METHOD_RETURN:_      case TypeReference.METHOD_RECEIVER:_        targetType &= 0xFF000000__        currentOffset += 1__        break__      case TypeReference.LOCAL_VARIABLE:_      case TypeReference.RESOURCE_VARIABLE:_        targetType &= 0xFF000000__        int tableLength = readUnsignedShort(currentOffset + 1)__        currentOffset += 3__        context.currentLocalVariableAnnotationRangeStarts = new Label[tableLength]__        context.currentLocalVariableAnnotationRangeEnds = new Label[tableLength]__        context.currentLocalVariableAnnotationRangeIndices = new int[tableLength]__        for (int i = 0_ i < tableLength_ ++i) {_          int startPc = readUnsignedShort(currentOffset)__          int length = readUnsignedShort(currentOffset + 2)__          int index = readUnsignedShort(currentOffset + 4)__          currentOffset += 6__          context.currentLocalVariableAnnotationRangeStarts[i] =_              createLabel(startPc, context.currentMethodLabels)__          context.currentLocalVariableAnnotationRangeEnds[i] =_              createLabel(startPc + length, context.currentMethodLabels)__          context.currentLocalVariableAnnotationRangeIndices[i] = index__        }_        break__      case TypeReference.CAST:_      case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:_      case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:_      case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:_      case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:_        targetType &= 0xFF0000FF__        currentOffset += 4__        break__      case TypeReference.CLASS_EXTENDS:_      case TypeReference.CLASS_TYPE_PARAMETER_BOUND:_      case TypeReference.METHOD_TYPE_PARAMETER_BOUND:_      case TypeReference.THROWS:_      case TypeReference.EXCEPTION_PARAMETER:_        targetType &= 0xFFFFFF00__        currentOffset += 3__        break__      case TypeReference.INSTANCEOF:_      case TypeReference.NEW:_      case TypeReference.CONSTRUCTOR_REFERENCE:_      case TypeReference.METHOD_REFERENCE:_        targetType &= 0xFF000000__        currentOffset += 3__        break__      default:_        throw new IllegalArgumentException()__    }_    context.currentTypeAnnotationTarget = targetType__    _    int pathLength = readByte(currentOffset)__    context.currentTypeAnnotationTargetPath =_        pathLength == 0 ? null : new TypePath(b, currentOffset)__    _    return currentOffset + 1 + 2 * pathLength__  };parses,the,header,of,a,jvms,structure,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,type,annotation,offset,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,type,annotation,target,final,context,context,final,int,type,annotation,offset,int,current,offset,type,annotation,offset,int,target,type,read,int,type,annotation,offset,switch,target,type,24,case,type,reference,case,type,reference,case,type,reference,target,type,0x,ffff0000,current,offset,2,break,case,type,reference,field,case,type,reference,case,type,reference,target,type,0x,ff000000,current,offset,1,break,case,type,reference,case,type,reference,target,type,0x,ff000000,int,table,length,read,unsigned,short,current,offset,1,current,offset,3,context,current,local,variable,annotation,range,starts,new,label,table,length,context,current,local,variable,annotation,range,ends,new,label,table,length,context,current,local,variable,annotation,range,indices,new,int,table,length,for,int,i,0,i,table,length,i,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,int,index,read,unsigned,short,current,offset,4,current,offset,6,context,current,local,variable,annotation,range,starts,i,create,label,start,pc,context,current,method,labels,context,current,local,variable,annotation,range,ends,i,create,label,start,pc,length,context,current,method,labels,context,current,local,variable,annotation,range,indices,i,index,break,case,type,reference,cast,case,type,reference,case,type,reference,case,type,reference,case,type,reference,target,type,0x,ff0000ff,current,offset,4,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,throws,case,type,reference,target,type,0x,ffffff00,current,offset,3,break,case,type,reference,instanceof,case,type,reference,new,case,type,reference,case,type,reference,target,type,0x,ff000000,current,offset,3,break,default,throw,new,illegal,argument,exception,context,current,type,annotation,target,target,type,int,path,length,read,byte,current,offset,context,current,type,annotation,target,path,path,length,0,null,new,type,path,b,current,offset,return,current,offset,1,2,path,length
ClassReader -> private void computeImplicitFrame(final Context context);1531241461;Computes the implicit frame of the method currently being parsed (as defined in the given_{@link Context}) and stores it in the given context.__@param context information about the class being parsed.;private void computeImplicitFrame(final Context context) {_    String methodDescriptor = context.currentMethodDescriptor__    Object[] locals = context.currentFrameLocalTypes__    int nLocal = 0__    if ((context.currentMethodAccessFlags & Opcodes.ACC_STATIC) == 0) {_      if ("<init>".equals(context.currentMethodName)) {_        locals[nLocal++] = Opcodes.UNINITIALIZED_THIS__      } else {_        locals[nLocal++] = readClass(header + 2, context.charBuffer)__      }_    }_    _    _    int currentMethodDescritorOffset = 1__    while (true) {_      int currentArgumentDescriptorStartOffset = currentMethodDescritorOffset__      switch (methodDescriptor.charAt(currentMethodDescritorOffset++)) {_        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_          locals[nLocal++] = Opcodes.INTEGER__          break__        case 'F':_          locals[nLocal++] = Opcodes.FLOAT__          break__        case 'J':_          locals[nLocal++] = Opcodes.LONG__          break__        case 'D':_          locals[nLocal++] = Opcodes.DOUBLE__          break__        case '[':_          while (methodDescriptor.charAt(currentMethodDescritorOffset) == '[') {_            ++currentMethodDescritorOffset__          }_          if (methodDescriptor.charAt(currentMethodDescritorOffset) == 'L') {_            ++currentMethodDescritorOffset__            while (methodDescriptor.charAt(currentMethodDescritorOffset) != '_') {_              ++currentMethodDescritorOffset__            }_          }_          locals[nLocal++] =_              methodDescriptor.substring(_                  currentArgumentDescriptorStartOffset, ++currentMethodDescritorOffset)__          break__        case 'L':_          while (methodDescriptor.charAt(currentMethodDescritorOffset) != '_') {_            ++currentMethodDescritorOffset__          }_          locals[nLocal++] =_              methodDescriptor.substring(_                  currentArgumentDescriptorStartOffset + 1, currentMethodDescritorOffset++)__          break__        default:_          context.currentFrameLocalCount = nLocal__          return__      }_    }_  };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,context,information,about,the,class,being,parsed;private,void,compute,implicit,frame,final,context,context,string,method,descriptor,context,current,method,descriptor,object,locals,context,current,frame,local,types,int,n,local,0,if,context,current,method,access,flags,opcodes,0,if,init,equals,context,current,method,name,locals,n,local,opcodes,else,locals,n,local,read,class,header,2,context,char,buffer,int,current,method,descritor,offset,1,while,true,int,current,argument,descriptor,start,offset,current,method,descritor,offset,switch,method,descriptor,char,at,current,method,descritor,offset,case,z,case,c,case,b,case,s,case,i,locals,n,local,opcodes,integer,break,case,f,locals,n,local,opcodes,float,break,case,j,locals,n,local,opcodes,long,break,case,d,locals,n,local,opcodes,double,break,case,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,if,method,descriptor,char,at,current,method,descritor,offset,l,current,method,descritor,offset,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,locals,n,local,method,descriptor,substring,current,argument,descriptor,start,offset,current,method,descritor,offset,break,case,l,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,locals,n,local,method,descriptor,substring,current,argument,descriptor,start,offset,1,current,method,descritor,offset,break,default,context,current,frame,local,count,n,local,return
ClassReader -> private void computeImplicitFrame(final Context context);1536664245;Computes the implicit frame of the method currently being parsed (as defined in the given_{@link Context}) and stores it in the given context.__@param context information about the class being parsed.;private void computeImplicitFrame(final Context context) {_    String methodDescriptor = context.currentMethodDescriptor__    Object[] locals = context.currentFrameLocalTypes__    int nLocal = 0__    if ((context.currentMethodAccessFlags & Opcodes.ACC_STATIC) == 0) {_      if ("<init>".equals(context.currentMethodName)) {_        locals[nLocal++] = Opcodes.UNINITIALIZED_THIS__      } else {_        locals[nLocal++] = readClass(header + 2, context.charBuffer)__      }_    }_    _    _    int currentMethodDescritorOffset = 1__    while (true) {_      int currentArgumentDescriptorStartOffset = currentMethodDescritorOffset__      switch (methodDescriptor.charAt(currentMethodDescritorOffset++)) {_        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_          locals[nLocal++] = Opcodes.INTEGER__          break__        case 'F':_          locals[nLocal++] = Opcodes.FLOAT__          break__        case 'J':_          locals[nLocal++] = Opcodes.LONG__          break__        case 'D':_          locals[nLocal++] = Opcodes.DOUBLE__          break__        case '[':_          while (methodDescriptor.charAt(currentMethodDescritorOffset) == '[') {_            ++currentMethodDescritorOffset__          }_          if (methodDescriptor.charAt(currentMethodDescritorOffset) == 'L') {_            ++currentMethodDescritorOffset__            while (methodDescriptor.charAt(currentMethodDescritorOffset) != '_') {_              ++currentMethodDescritorOffset__            }_          }_          locals[nLocal++] =_              methodDescriptor.substring(_                  currentArgumentDescriptorStartOffset, ++currentMethodDescritorOffset)__          break__        case 'L':_          while (methodDescriptor.charAt(currentMethodDescritorOffset) != '_') {_            ++currentMethodDescritorOffset__          }_          locals[nLocal++] =_              methodDescriptor.substring(_                  currentArgumentDescriptorStartOffset + 1, currentMethodDescritorOffset++)__          break__        default:_          context.currentFrameLocalCount = nLocal__          return__      }_    }_  };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,context,information,about,the,class,being,parsed;private,void,compute,implicit,frame,final,context,context,string,method,descriptor,context,current,method,descriptor,object,locals,context,current,frame,local,types,int,n,local,0,if,context,current,method,access,flags,opcodes,0,if,init,equals,context,current,method,name,locals,n,local,opcodes,else,locals,n,local,read,class,header,2,context,char,buffer,int,current,method,descritor,offset,1,while,true,int,current,argument,descriptor,start,offset,current,method,descritor,offset,switch,method,descriptor,char,at,current,method,descritor,offset,case,z,case,c,case,b,case,s,case,i,locals,n,local,opcodes,integer,break,case,f,locals,n,local,opcodes,float,break,case,j,locals,n,local,opcodes,long,break,case,d,locals,n,local,opcodes,double,break,case,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,if,method,descriptor,char,at,current,method,descritor,offset,l,current,method,descritor,offset,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,locals,n,local,method,descriptor,substring,current,argument,descriptor,start,offset,current,method,descritor,offset,break,case,l,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,locals,n,local,method,descriptor,substring,current,argument,descriptor,start,offset,1,current,method,descritor,offset,break,default,context,current,frame,local,count,n,local,return
ClassReader -> private void computeImplicitFrame(final Context context);1536747989;Computes the implicit frame of the method currently being parsed (as defined in the given_{@link Context}) and stores it in the given context.__@param context information about the class being parsed.;private void computeImplicitFrame(final Context context) {_    String methodDescriptor = context.currentMethodDescriptor__    Object[] locals = context.currentFrameLocalTypes__    int nLocal = 0__    if ((context.currentMethodAccessFlags & Opcodes.ACC_STATIC) == 0) {_      if ("<init>".equals(context.currentMethodName)) {_        locals[nLocal++] = Opcodes.UNINITIALIZED_THIS__      } else {_        locals[nLocal++] = readClass(header + 2, context.charBuffer)__      }_    }_    _    _    int currentMethodDescritorOffset = 1__    while (true) {_      int currentArgumentDescriptorStartOffset = currentMethodDescritorOffset__      switch (methodDescriptor.charAt(currentMethodDescritorOffset++)) {_        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_          locals[nLocal++] = Opcodes.INTEGER__          break__        case 'F':_          locals[nLocal++] = Opcodes.FLOAT__          break__        case 'J':_          locals[nLocal++] = Opcodes.LONG__          break__        case 'D':_          locals[nLocal++] = Opcodes.DOUBLE__          break__        case '[':_          while (methodDescriptor.charAt(currentMethodDescritorOffset) == '[') {_            ++currentMethodDescritorOffset__          }_          if (methodDescriptor.charAt(currentMethodDescritorOffset) == 'L') {_            ++currentMethodDescritorOffset__            while (methodDescriptor.charAt(currentMethodDescritorOffset) != '_') {_              ++currentMethodDescritorOffset__            }_          }_          locals[nLocal++] =_              methodDescriptor.substring(_                  currentArgumentDescriptorStartOffset, ++currentMethodDescritorOffset)__          break__        case 'L':_          while (methodDescriptor.charAt(currentMethodDescritorOffset) != '_') {_            ++currentMethodDescritorOffset__          }_          locals[nLocal++] =_              methodDescriptor.substring(_                  currentArgumentDescriptorStartOffset + 1, currentMethodDescritorOffset++)__          break__        default:_          context.currentFrameLocalCount = nLocal__          return__      }_    }_  };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,context,information,about,the,class,being,parsed;private,void,compute,implicit,frame,final,context,context,string,method,descriptor,context,current,method,descriptor,object,locals,context,current,frame,local,types,int,n,local,0,if,context,current,method,access,flags,opcodes,0,if,init,equals,context,current,method,name,locals,n,local,opcodes,else,locals,n,local,read,class,header,2,context,char,buffer,int,current,method,descritor,offset,1,while,true,int,current,argument,descriptor,start,offset,current,method,descritor,offset,switch,method,descriptor,char,at,current,method,descritor,offset,case,z,case,c,case,b,case,s,case,i,locals,n,local,opcodes,integer,break,case,f,locals,n,local,opcodes,float,break,case,j,locals,n,local,opcodes,long,break,case,d,locals,n,local,opcodes,double,break,case,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,if,method,descriptor,char,at,current,method,descritor,offset,l,current,method,descritor,offset,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,locals,n,local,method,descriptor,substring,current,argument,descriptor,start,offset,current,method,descritor,offset,break,case,l,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,locals,n,local,method,descriptor,substring,current,argument,descriptor,start,offset,1,current,method,descritor,offset,break,default,context,current,frame,local,count,n,local,return
ClassReader -> private void computeImplicitFrame(final Context context);1537204147;Computes the implicit frame of the method currently being parsed (as defined in the given_{@link Context}) and stores it in the given context.__@param context information about the class being parsed.;private void computeImplicitFrame(final Context context) {_    String methodDescriptor = context.currentMethodDescriptor__    Object[] locals = context.currentFrameLocalTypes__    int numLocal = 0__    if ((context.currentMethodAccessFlags & Opcodes.ACC_STATIC) == 0) {_      if ("<init>".equals(context.currentMethodName)) {_        locals[numLocal++] = Opcodes.UNINITIALIZED_THIS__      } else {_        locals[numLocal++] = readClass(header + 2, context.charBuffer)__      }_    }_    _    _    int currentMethodDescritorOffset = 1__    while (true) {_      int currentArgumentDescriptorStartOffset = currentMethodDescritorOffset__      switch (methodDescriptor.charAt(currentMethodDescritorOffset++)) {_        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_          locals[numLocal++] = Opcodes.INTEGER__          break__        case 'F':_          locals[numLocal++] = Opcodes.FLOAT__          break__        case 'J':_          locals[numLocal++] = Opcodes.LONG__          break__        case 'D':_          locals[numLocal++] = Opcodes.DOUBLE__          break__        case '[':_          while (methodDescriptor.charAt(currentMethodDescritorOffset) == '[') {_            ++currentMethodDescritorOffset__          }_          if (methodDescriptor.charAt(currentMethodDescritorOffset) == 'L') {_            ++currentMethodDescritorOffset__            while (methodDescriptor.charAt(currentMethodDescritorOffset) != '_') {_              ++currentMethodDescritorOffset__            }_          }_          locals[numLocal++] =_              methodDescriptor.substring(_                  currentArgumentDescriptorStartOffset, ++currentMethodDescritorOffset)__          break__        case 'L':_          while (methodDescriptor.charAt(currentMethodDescritorOffset) != '_') {_            ++currentMethodDescritorOffset__          }_          locals[numLocal++] =_              methodDescriptor.substring(_                  currentArgumentDescriptorStartOffset + 1, currentMethodDescritorOffset++)__          break__        default:_          context.currentFrameLocalCount = numLocal__          return__      }_    }_  };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,context,information,about,the,class,being,parsed;private,void,compute,implicit,frame,final,context,context,string,method,descriptor,context,current,method,descriptor,object,locals,context,current,frame,local,types,int,num,local,0,if,context,current,method,access,flags,opcodes,0,if,init,equals,context,current,method,name,locals,num,local,opcodes,else,locals,num,local,read,class,header,2,context,char,buffer,int,current,method,descritor,offset,1,while,true,int,current,argument,descriptor,start,offset,current,method,descritor,offset,switch,method,descriptor,char,at,current,method,descritor,offset,case,z,case,c,case,b,case,s,case,i,locals,num,local,opcodes,integer,break,case,f,locals,num,local,opcodes,float,break,case,j,locals,num,local,opcodes,long,break,case,d,locals,num,local,opcodes,double,break,case,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,if,method,descriptor,char,at,current,method,descritor,offset,l,current,method,descritor,offset,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,locals,num,local,method,descriptor,substring,current,argument,descriptor,start,offset,current,method,descritor,offset,break,case,l,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,locals,num,local,method,descriptor,substring,current,argument,descriptor,start,offset,1,current,method,descritor,offset,break,default,context,current,frame,local,count,num,local,return
ClassReader -> private void computeImplicitFrame(final Context context);1539119582;Computes the implicit frame of the method currently being parsed (as defined in the given_{@link Context}) and stores it in the given context.__@param context information about the class being parsed.;private void computeImplicitFrame(final Context context) {_    String methodDescriptor = context.currentMethodDescriptor__    Object[] locals = context.currentFrameLocalTypes__    int numLocal = 0__    if ((context.currentMethodAccessFlags & Opcodes.ACC_STATIC) == 0) {_      if ("<init>".equals(context.currentMethodName)) {_        locals[numLocal++] = Opcodes.UNINITIALIZED_THIS__      } else {_        locals[numLocal++] = readClass(header + 2, context.charBuffer)__      }_    }_    _    _    int currentMethodDescritorOffset = 1__    while (true) {_      int currentArgumentDescriptorStartOffset = currentMethodDescritorOffset__      switch (methodDescriptor.charAt(currentMethodDescritorOffset++)) {_        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_          locals[numLocal++] = Opcodes.INTEGER__          break__        case 'F':_          locals[numLocal++] = Opcodes.FLOAT__          break__        case 'J':_          locals[numLocal++] = Opcodes.LONG__          break__        case 'D':_          locals[numLocal++] = Opcodes.DOUBLE__          break__        case '[':_          while (methodDescriptor.charAt(currentMethodDescritorOffset) == '[') {_            ++currentMethodDescritorOffset__          }_          if (methodDescriptor.charAt(currentMethodDescritorOffset) == 'L') {_            ++currentMethodDescritorOffset__            while (methodDescriptor.charAt(currentMethodDescritorOffset) != '_') {_              ++currentMethodDescritorOffset__            }_          }_          locals[numLocal++] =_              methodDescriptor.substring(_                  currentArgumentDescriptorStartOffset, ++currentMethodDescritorOffset)__          break__        case 'L':_          while (methodDescriptor.charAt(currentMethodDescritorOffset) != '_') {_            ++currentMethodDescritorOffset__          }_          locals[numLocal++] =_              methodDescriptor.substring(_                  currentArgumentDescriptorStartOffset + 1, currentMethodDescritorOffset++)__          break__        default:_          context.currentFrameLocalCount = numLocal__          return__      }_    }_  };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,context,information,about,the,class,being,parsed;private,void,compute,implicit,frame,final,context,context,string,method,descriptor,context,current,method,descriptor,object,locals,context,current,frame,local,types,int,num,local,0,if,context,current,method,access,flags,opcodes,0,if,init,equals,context,current,method,name,locals,num,local,opcodes,else,locals,num,local,read,class,header,2,context,char,buffer,int,current,method,descritor,offset,1,while,true,int,current,argument,descriptor,start,offset,current,method,descritor,offset,switch,method,descriptor,char,at,current,method,descritor,offset,case,z,case,c,case,b,case,s,case,i,locals,num,local,opcodes,integer,break,case,f,locals,num,local,opcodes,float,break,case,j,locals,num,local,opcodes,long,break,case,d,locals,num,local,opcodes,double,break,case,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,if,method,descriptor,char,at,current,method,descritor,offset,l,current,method,descritor,offset,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,locals,num,local,method,descriptor,substring,current,argument,descriptor,start,offset,current,method,descritor,offset,break,case,l,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,locals,num,local,method,descriptor,substring,current,argument,descriptor,start,offset,1,current,method,descritor,offset,break,default,context,current,frame,local,count,num,local,return
ClassReader -> private void computeImplicitFrame(final Context context);1541436263;Computes the implicit frame of the method currently being parsed (as defined in the given_{@link Context}) and stores it in the given context.__@param context information about the class being parsed.;private void computeImplicitFrame(final Context context) {_    String methodDescriptor = context.currentMethodDescriptor__    Object[] locals = context.currentFrameLocalTypes__    int numLocal = 0__    if ((context.currentMethodAccessFlags & Opcodes.ACC_STATIC) == 0) {_      if ("<init>".equals(context.currentMethodName)) {_        locals[numLocal++] = Opcodes.UNINITIALIZED_THIS__      } else {_        locals[numLocal++] = readClass(header + 2, context.charBuffer)__      }_    }_    _    _    int currentMethodDescritorOffset = 1__    while (true) {_      int currentArgumentDescriptorStartOffset = currentMethodDescritorOffset__      switch (methodDescriptor.charAt(currentMethodDescritorOffset++)) {_        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_          locals[numLocal++] = Opcodes.INTEGER__          break__        case 'F':_          locals[numLocal++] = Opcodes.FLOAT__          break__        case 'J':_          locals[numLocal++] = Opcodes.LONG__          break__        case 'D':_          locals[numLocal++] = Opcodes.DOUBLE__          break__        case '[':_          while (methodDescriptor.charAt(currentMethodDescritorOffset) == '[') {_            ++currentMethodDescritorOffset__          }_          if (methodDescriptor.charAt(currentMethodDescritorOffset) == 'L') {_            ++currentMethodDescritorOffset__            while (methodDescriptor.charAt(currentMethodDescritorOffset) != '_') {_              ++currentMethodDescritorOffset__            }_          }_          locals[numLocal++] =_              methodDescriptor.substring(_                  currentArgumentDescriptorStartOffset, ++currentMethodDescritorOffset)__          break__        case 'L':_          while (methodDescriptor.charAt(currentMethodDescritorOffset) != '_') {_            ++currentMethodDescritorOffset__          }_          locals[numLocal++] =_              methodDescriptor.substring(_                  currentArgumentDescriptorStartOffset + 1, currentMethodDescritorOffset++)__          break__        default:_          context.currentFrameLocalCount = numLocal__          return__      }_    }_  };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,context,information,about,the,class,being,parsed;private,void,compute,implicit,frame,final,context,context,string,method,descriptor,context,current,method,descriptor,object,locals,context,current,frame,local,types,int,num,local,0,if,context,current,method,access,flags,opcodes,0,if,init,equals,context,current,method,name,locals,num,local,opcodes,else,locals,num,local,read,class,header,2,context,char,buffer,int,current,method,descritor,offset,1,while,true,int,current,argument,descriptor,start,offset,current,method,descritor,offset,switch,method,descriptor,char,at,current,method,descritor,offset,case,z,case,c,case,b,case,s,case,i,locals,num,local,opcodes,integer,break,case,f,locals,num,local,opcodes,float,break,case,j,locals,num,local,opcodes,long,break,case,d,locals,num,local,opcodes,double,break,case,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,if,method,descriptor,char,at,current,method,descritor,offset,l,current,method,descritor,offset,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,locals,num,local,method,descriptor,substring,current,argument,descriptor,start,offset,current,method,descritor,offset,break,case,l,while,method,descriptor,char,at,current,method,descritor,offset,current,method,descritor,offset,locals,num,local,method,descriptor,substring,current,argument,descriptor,start,offset,1,current,method,descritor,offset,break,default,context,current,frame,local,count,num,local,return
ClassReader -> public int readByte(final int offset);1531241461;Reads a byte value in {@link #b}. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public int readByte(final int offset) {_    return b[offset] & 0xFF__  };reads,a,byte,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,byte,final,int,offset,return,b,offset,0x,ff
ClassReader -> public int readByte(final int offset);1536664245;Reads a byte value in {@link #b}. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public int readByte(final int offset) {_    return b[offset] & 0xFF__  };reads,a,byte,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,byte,final,int,offset,return,b,offset,0x,ff
ClassReader -> public int readByte(final int offset);1536747989;Reads a byte value in {@link #b}. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public int readByte(final int offset) {_    return b[offset] & 0xFF__  };reads,a,byte,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,byte,final,int,offset,return,b,offset,0x,ff
ClassReader -> public int readByte(final int offset);1537204147;Reads a byte value in {@link #b}. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public int readByte(final int offset) {_    return b[offset] & 0xFF__  };reads,a,byte,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,byte,final,int,offset,return,b,offset,0x,ff
ClassReader -> public int readByte(final int offset);1539119582;Reads a byte value in {@link #b}. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public int readByte(final int offset) {_    return b[offset] & 0xFF__  };reads,a,byte,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,byte,final,int,offset,return,b,offset,0x,ff
ClassReader -> public int readByte(final int offset);1541436263;Reads a byte value in {@link #b}. <i>This method is intended for {@link Attribute} sub classes,_and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public int readByte(final int offset) {_    return b[offset] & 0xFF__  };reads,a,byte,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,byte,final,int,offset,return,b,offset,0x,ff
ClassReader -> public String readUTF8(final int offset, final char[] charBuffer);1531241461;Reads a CONSTANT_Utf8 constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Utf8 entry in the class's constant pool table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Utf8 entry.;public String readUTF8(final int offset, final char[] charBuffer) {_    int constantPoolEntryIndex = readUnsignedShort(offset)__    if (offset == 0 || constantPoolEntryIndex == 0) {_      return null__    }_    return readUTF(constantPoolEntryIndex, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,utf8,final,int,offset,final,char,char,buffer,int,constant,pool,entry,index,read,unsigned,short,offset,if,offset,0,constant,pool,entry,index,0,return,null,return,read,utf,constant,pool,entry,index,char,buffer
ClassReader -> public String readUTF8(final int offset, final char[] charBuffer);1536664245;Reads a CONSTANT_Utf8 constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Utf8 entry in the class's constant pool table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Utf8 entry.;public String readUTF8(final int offset, final char[] charBuffer) {_    int constantPoolEntryIndex = readUnsignedShort(offset)__    if (offset == 0 || constantPoolEntryIndex == 0) {_      return null__    }_    return readUTF(constantPoolEntryIndex, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,utf8,final,int,offset,final,char,char,buffer,int,constant,pool,entry,index,read,unsigned,short,offset,if,offset,0,constant,pool,entry,index,0,return,null,return,read,utf,constant,pool,entry,index,char,buffer
ClassReader -> public String readUTF8(final int offset, final char[] charBuffer);1536747989;Reads a CONSTANT_Utf8 constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Utf8 entry in the class's constant pool table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Utf8 entry.;public String readUTF8(final int offset, final char[] charBuffer) {_    int constantPoolEntryIndex = readUnsignedShort(offset)__    if (offset == 0 || constantPoolEntryIndex == 0) {_      return null__    }_    return readUTF(constantPoolEntryIndex, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,utf8,final,int,offset,final,char,char,buffer,int,constant,pool,entry,index,read,unsigned,short,offset,if,offset,0,constant,pool,entry,index,0,return,null,return,read,utf,constant,pool,entry,index,char,buffer
ClassReader -> public String readUTF8(final int offset, final char[] charBuffer);1537204147;Reads a CONSTANT_Utf8 constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Utf8 entry in the class's constant pool table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Utf8 entry.;public String readUTF8(final int offset, final char[] charBuffer) {_    int constantPoolEntryIndex = readUnsignedShort(offset)__    if (offset == 0 || constantPoolEntryIndex == 0) {_      return null__    }_    return readUtf(constantPoolEntryIndex, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,utf8,final,int,offset,final,char,char,buffer,int,constant,pool,entry,index,read,unsigned,short,offset,if,offset,0,constant,pool,entry,index,0,return,null,return,read,utf,constant,pool,entry,index,char,buffer
ClassReader -> public String readUTF8(final int offset, final char[] charBuffer);1539119582;Reads a CONSTANT_Utf8 constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Utf8 entry in the class's constant pool table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Utf8 entry.;public String readUTF8(final int offset, final char[] charBuffer) {_    int constantPoolEntryIndex = readUnsignedShort(offset)__    if (offset == 0 || constantPoolEntryIndex == 0) {_      return null__    }_    return readUtf(constantPoolEntryIndex, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,utf8,final,int,offset,final,char,char,buffer,int,constant,pool,entry,index,read,unsigned,short,offset,if,offset,0,constant,pool,entry,index,0,return,null,return,read,utf,constant,pool,entry,index,char,buffer
ClassReader -> public String readUTF8(final int offset, final char[] charBuffer);1541436263;Reads a CONSTANT_Utf8 constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Utf8 entry in the class's constant pool table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Utf8 entry.;public String readUTF8(final int offset, final char[] charBuffer) {_    int constantPoolEntryIndex = readUnsignedShort(offset)__    if (offset == 0 || constantPoolEntryIndex == 0) {_      return null__    }_    return readUtf(constantPoolEntryIndex, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,utf8,final,int,offset,final,char,char,buffer,int,constant,pool,entry,index,read,unsigned,short,offset,if,offset,0,constant,pool,entry,index,0,return,null,return,read,utf,constant,pool,entry,index,char,buffer
ClassReader -> public String getSuperName();1366718246;Returns the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For interfaces, the_super class is {@link Object}.__@return the internal name of super class, or <tt>null</tt> for_{@link Object} class.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_        return readClass(header + 4, new char[maxStringLength])__    };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,super,class,or,tt,null,tt,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1395273982;Returns the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For interfaces, the_super class is {@link Object}.__@return the internal name of super class, or <tt>null</tt> for_{@link Object} class.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_        return readClass(header + 4, new char[maxStringLength])__    };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,super,class,or,tt,null,tt,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1414067099;Returns the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For interfaces, the_super class is {@link Object}.__@return the internal name of super class, or <tt>null</tt> for_{@link Object} class.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_        return readClass(header + 4, new char[maxStringLength])__    };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,super,class,or,tt,null,tt,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1414499035;Returns the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For interfaces, the_super class is {@link Object}.__@return the internal name of super class, or <tt>null</tt> for_{@link Object} class.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_        return readClass(header + 4, new char[maxStringLength])__    };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,super,class,or,tt,null,tt,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1416998550;Returns the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For interfaces, the_super class is {@link Object}.__@return the internal name of super class, or <tt>null</tt> for_{@link Object} class.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_        return readClass(header + 4, new char[maxStringLength])__    };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,super,class,or,tt,null,tt,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1457705343;Returns the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For interfaces, the_super class is {@link Object}.__@return the internal name of super class, or <tt>null</tt> for_{@link Object} class.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_        return readClass(header + 4, new char[maxStringLength])__    };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,super,class,or,tt,null,tt,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1459258703;Returns the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For interfaces, the_super class is {@link Object}.__@return the internal name of super class, or <tt>null</tt> for_{@link Object} class.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_        return readClass(header + 4, new char[maxStringLength])__    };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,super,class,or,tt,null,tt,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1478623137;Returns the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For interfaces, the_super class is {@link Object}.__@return the internal name of super class, or <tt>null</tt> for_{@link Object} class.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_        return readClass(header + 4, new char[maxStringLength])__    };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,super,class,or,tt,null,tt,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1483093254;Returns the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For interfaces, the_super class is {@link Object}.__@return the internal name of super class, or <tt>null</tt> for_{@link Object} class.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_        return readClass(header + 4, new char[maxStringLength])__    };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,super,class,or,tt,null,tt,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1505821772;Returns the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For interfaces, the_super class is {@link Object}.__@return the internal name of super class, or <tt>null</tt> for_{@link Object} class.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_        return readClass(header + 4, new char[maxStringLength])__    };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,super,class,or,tt,null,tt,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1531241461;Returns the internal of name of the super class (see {@link Type#getInternalName()}). For_interfaces, the super class is {@link Object}.__@return the internal name of the super class, or <tt>null</tt> for {@link Object} class._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_    _    return readClass(header + 4, new char[maxStringLength])__  };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,the,super,class,or,tt,null,tt,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1536664245;Returns the internal of name of the super class (see {@link Type#getInternalName()}). For_interfaces, the super class is {@link Object}.__@return the internal name of the super class, or {@literal null} for {@link Object} class._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_    _    return readClass(header + 4, new char[maxStringLength])__  };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,the,super,class,or,literal,null,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1536747989;Returns the internal of name of the super class (see {@link Type#getInternalName()}). For_interfaces, the super class is {@link Object}.__@return the internal name of the super class, or {@literal null} for {@link Object} class._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_    _    return readClass(header + 4, new char[maxStringLength])__  };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,the,super,class,or,literal,null,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1537204147;Returns the internal of name of the super class (see {@link Type#getInternalName()}). For_interfaces, the super class is {@link Object}.__@return the internal name of the super class, or {@literal null} for {@link Object} class._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_    _    return readClass(header + 4, new char[maxStringLength])__  };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,the,super,class,or,literal,null,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1539119582;Returns the internal of name of the super class (see {@link Type#getInternalName()}). For_interfaces, the super class is {@link Object}.__@return the internal name of the super class, or {@literal null} for {@link Object} class._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_    _    return readClass(header + 4, new char[maxStringLength])__  };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,the,super,class,or,literal,null,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> public String getSuperName();1541436263;Returns the internal of name of the super class (see {@link Type#getInternalName()}). For_interfaces, the super class is {@link Object}.__@return the internal name of the super class, or {@literal null} for {@link Object} class._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getSuperName() {_    _    return readClass(header + 4, new char[maxStringLength])__  };returns,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,for,interfaces,the,super,class,is,link,object,return,the,internal,name,of,the,super,class,or,literal,null,for,link,object,class,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,super,name,return,read,class,header,4,new,char,max,string,length
ClassReader -> private void createDebugLabel(final int bytecodeOffset, final Label[] labels);1531241461;Creates a label with the {@link Label#FLAG_DEBUG_ONLY} flag set, if there is no already_existing label for the given bytecode offset (otherwise does nothing). The label is created_with a call to {@link #readLabel}.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset.;private void createDebugLabel(final int bytecodeOffset, final Label[] labels) {_    if (labels[bytecodeOffset] == null) {_      readLabel(bytecodeOffset, labels).flags |= Label.FLAG_DEBUG_ONLY__    }_  };creates,a,label,with,the,link,label,flag,set,if,there,is,no,already,existing,label,for,the,given,bytecode,offset,otherwise,does,nothing,the,label,is,created,with,a,call,to,link,read,label,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset;private,void,create,debug,label,final,int,bytecode,offset,final,label,labels,if,labels,bytecode,offset,null,read,label,bytecode,offset,labels,flags,label
ClassReader -> private void createDebugLabel(final int bytecodeOffset, final Label[] labels);1536664245;Creates a label with the {@link Label#FLAG_DEBUG_ONLY} flag set, if there is no already_existing label for the given bytecode offset (otherwise does nothing). The label is created_with a call to {@link #readLabel}.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset.;private void createDebugLabel(final int bytecodeOffset, final Label[] labels) {_    if (labels[bytecodeOffset] == null) {_      readLabel(bytecodeOffset, labels).flags |= Label.FLAG_DEBUG_ONLY__    }_  };creates,a,label,with,the,link,label,flag,set,if,there,is,no,already,existing,label,for,the,given,bytecode,offset,otherwise,does,nothing,the,label,is,created,with,a,call,to,link,read,label,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset;private,void,create,debug,label,final,int,bytecode,offset,final,label,labels,if,labels,bytecode,offset,null,read,label,bytecode,offset,labels,flags,label
ClassReader -> private void createDebugLabel(final int bytecodeOffset, final Label[] labels);1536747989;Creates a label with the {@link Label#FLAG_DEBUG_ONLY} flag set, if there is no already_existing label for the given bytecode offset (otherwise does nothing). The label is created_with a call to {@link #readLabel}.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset.;private void createDebugLabel(final int bytecodeOffset, final Label[] labels) {_    if (labels[bytecodeOffset] == null) {_      readLabel(bytecodeOffset, labels).flags |= Label.FLAG_DEBUG_ONLY__    }_  };creates,a,label,with,the,link,label,flag,set,if,there,is,no,already,existing,label,for,the,given,bytecode,offset,otherwise,does,nothing,the,label,is,created,with,a,call,to,link,read,label,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset;private,void,create,debug,label,final,int,bytecode,offset,final,label,labels,if,labels,bytecode,offset,null,read,label,bytecode,offset,labels,flags,label
ClassReader -> private void createDebugLabel(final int bytecodeOffset, final Label[] labels);1537204147;Creates a label with the {@link Label#FLAG_DEBUG_ONLY} flag set, if there is no already_existing label for the given bytecode offset (otherwise does nothing). The label is created_with a call to {@link #readLabel}.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset.;private void createDebugLabel(final int bytecodeOffset, final Label[] labels) {_    if (labels[bytecodeOffset] == null) {_      readLabel(bytecodeOffset, labels).flags |= Label.FLAG_DEBUG_ONLY__    }_  };creates,a,label,with,the,link,label,flag,set,if,there,is,no,already,existing,label,for,the,given,bytecode,offset,otherwise,does,nothing,the,label,is,created,with,a,call,to,link,read,label,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset;private,void,create,debug,label,final,int,bytecode,offset,final,label,labels,if,labels,bytecode,offset,null,read,label,bytecode,offset,labels,flags,label
ClassReader -> private void createDebugLabel(final int bytecodeOffset, final Label[] labels);1539119582;Creates a label with the {@link Label#FLAG_DEBUG_ONLY} flag set, if there is no already_existing label for the given bytecode offset (otherwise does nothing). The label is created_with a call to {@link #readLabel}.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset.;private void createDebugLabel(final int bytecodeOffset, final Label[] labels) {_    if (labels[bytecodeOffset] == null) {_      readLabel(bytecodeOffset, labels).flags |= Label.FLAG_DEBUG_ONLY__    }_  };creates,a,label,with,the,link,label,flag,set,if,there,is,no,already,existing,label,for,the,given,bytecode,offset,otherwise,does,nothing,the,label,is,created,with,a,call,to,link,read,label,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset;private,void,create,debug,label,final,int,bytecode,offset,final,label,labels,if,labels,bytecode,offset,null,read,label,bytecode,offset,labels,flags,label
ClassReader -> private void createDebugLabel(final int bytecodeOffset, final Label[] labels);1541436263;Creates a label with the {@link Label#FLAG_DEBUG_ONLY} flag set, if there is no already_existing label for the given bytecode offset (otherwise does nothing). The label is created_with a call to {@link #readLabel}.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset.;private void createDebugLabel(final int bytecodeOffset, final Label[] labels) {_    if (labels[bytecodeOffset] == null) {_      readLabel(bytecodeOffset, labels).flags |= Label.FLAG_DEBUG_ONLY__    }_  };creates,a,label,with,the,link,label,flag,set,if,there,is,no,already,existing,label,for,the,given,bytecode,offset,otherwise,does,nothing,the,label,is,created,with,a,call,to,link,read,label,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset;private,void,create,debug,label,final,int,bytecode,offset,final,label,labels,if,labels,bytecode,offset,null,read,label,bytecode,offset,labels,flags,label
ClassReader -> private void readModuleAttributes(       final ClassVisitor classVisitor,       final Context context,       final int moduleOffset,       final int modulePackagesOffset,       final String moduleMainClass);1537204147;Reads the Module, ModulePackages and ModuleMainClass attributes and visit them.__@param classVisitor the current class visitor_@param context information about the class being parsed._@param moduleOffset the offset of the Module attribute (excluding the attribute_info's_attribute_name_index and attribute_length fields)._@param modulePackagesOffset the offset of the ModulePackages attribute (excluding the_attribute_info's attribute_name_index and attribute_length fields), or 0._@param moduleMainClass the string corresponding to the ModuleMainClass attribute, or null.;private void readModuleAttributes(_      final ClassVisitor classVisitor,_      final Context context,_      final int moduleOffset,_      final int modulePackagesOffset,_      final String moduleMainClass) {_    char[] buffer = context.charBuffer___    _    int currentOffset = moduleOffset__    String moduleName = readModule(currentOffset, buffer)__    int moduleFlags = readUnsignedShort(currentOffset + 2)__    String moduleVersion = readUTF8(currentOffset + 4, buffer)__    currentOffset += 6__    ModuleVisitor moduleVisitor = classVisitor.visitModule(moduleName, moduleFlags, moduleVersion)__    if (moduleVisitor == null) {_      return__    }__    _    if (moduleMainClass != null) {_      moduleVisitor.visitMainClass(moduleMainClass)__    }__    _    if (modulePackagesOffset != 0) {_      int packageCount = readUnsignedShort(modulePackagesOffset)__      int currentPackageOffset = modulePackagesOffset + 2__      while (packageCount-- > 0) {_        moduleVisitor.visitPackage(readPackage(currentPackageOffset, buffer))__        currentPackageOffset += 2__      }_    }__    _    int requiresCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (requiresCount-- > 0) {_      _      String requires = readModule(currentOffset, buffer)__      int requiresFlags = readUnsignedShort(currentOffset + 2)__      String requiresVersion = readUTF8(currentOffset + 4, buffer)__      currentOffset += 6__      moduleVisitor.visitRequire(requires, requiresFlags, requiresVersion)__    }__    _    int exportsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (exportsCount-- > 0) {_      _      _      String exports = readPackage(currentOffset, buffer)__      int exportsFlags = readUnsignedShort(currentOffset + 2)__      int exportsToCount = readUnsignedShort(currentOffset + 4)__      currentOffset += 6__      String[] exportsTo = null__      if (exportsToCount != 0) {_        exportsTo = new String[exportsToCount]__        for (int i = 0_ i < exportsToCount_ ++i) {_          exportsTo[i] = readModule(currentOffset, buffer)__          currentOffset += 2__        }_      }_      moduleVisitor.visitExport(exports, exportsFlags, exportsTo)__    }__    _    int opensCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (opensCount-- > 0) {_      _      String opens = readPackage(currentOffset, buffer)__      int opensFlags = readUnsignedShort(currentOffset + 2)__      int opensToCount = readUnsignedShort(currentOffset + 4)__      currentOffset += 6__      String[] opensTo = null__      if (opensToCount != 0) {_        opensTo = new String[opensToCount]__        for (int i = 0_ i < opensToCount_ ++i) {_          opensTo[i] = readModule(currentOffset, buffer)__          currentOffset += 2__        }_      }_      moduleVisitor.visitOpen(opens, opensFlags, opensTo)__    }__    _    int usesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (usesCount-- > 0) {_      moduleVisitor.visitUse(readClass(currentOffset, buffer))__      currentOffset += 2__    }__    _    int providesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (providesCount-- > 0) {_      _      String provides = readClass(currentOffset, buffer)__      int providesWithCount = readUnsignedShort(currentOffset + 2)__      currentOffset += 4__      String[] providesWith = new String[providesWithCount]__      for (int i = 0_ i < providesWithCount_ ++i) {_        providesWith[i] = readClass(currentOffset, buffer)__        currentOffset += 2__      }_      moduleVisitor.visitProvide(provides, providesWith)__    }__    _    moduleVisitor.visitEnd()__  };reads,the,module,module,packages,and,module,main,class,attributes,and,visit,them,param,class,visitor,the,current,class,visitor,param,context,information,about,the,class,being,parsed,param,module,offset,the,offset,of,the,module,attribute,excluding,the,s,and,fields,param,module,packages,offset,the,offset,of,the,module,packages,attribute,excluding,the,s,and,fields,or,0,param,module,main,class,the,string,corresponding,to,the,module,main,class,attribute,or,null;private,void,read,module,attributes,final,class,visitor,class,visitor,final,context,context,final,int,module,offset,final,int,module,packages,offset,final,string,module,main,class,char,buffer,context,char,buffer,int,current,offset,module,offset,string,module,name,read,module,current,offset,buffer,int,module,flags,read,unsigned,short,current,offset,2,string,module,version,read,utf8,current,offset,4,buffer,current,offset,6,module,visitor,module,visitor,class,visitor,visit,module,module,name,module,flags,module,version,if,module,visitor,null,return,if,module,main,class,null,module,visitor,visit,main,class,module,main,class,if,module,packages,offset,0,int,package,count,read,unsigned,short,module,packages,offset,int,current,package,offset,module,packages,offset,2,while,package,count,0,module,visitor,visit,package,read,package,current,package,offset,buffer,current,package,offset,2,int,requires,count,read,unsigned,short,current,offset,current,offset,2,while,requires,count,0,string,requires,read,module,current,offset,buffer,int,requires,flags,read,unsigned,short,current,offset,2,string,requires,version,read,utf8,current,offset,4,buffer,current,offset,6,module,visitor,visit,require,requires,requires,flags,requires,version,int,exports,count,read,unsigned,short,current,offset,current,offset,2,while,exports,count,0,string,exports,read,package,current,offset,buffer,int,exports,flags,read,unsigned,short,current,offset,2,int,exports,to,count,read,unsigned,short,current,offset,4,current,offset,6,string,exports,to,null,if,exports,to,count,0,exports,to,new,string,exports,to,count,for,int,i,0,i,exports,to,count,i,exports,to,i,read,module,current,offset,buffer,current,offset,2,module,visitor,visit,export,exports,exports,flags,exports,to,int,opens,count,read,unsigned,short,current,offset,current,offset,2,while,opens,count,0,string,opens,read,package,current,offset,buffer,int,opens,flags,read,unsigned,short,current,offset,2,int,opens,to,count,read,unsigned,short,current,offset,4,current,offset,6,string,opens,to,null,if,opens,to,count,0,opens,to,new,string,opens,to,count,for,int,i,0,i,opens,to,count,i,opens,to,i,read,module,current,offset,buffer,current,offset,2,module,visitor,visit,open,opens,opens,flags,opens,to,int,uses,count,read,unsigned,short,current,offset,current,offset,2,while,uses,count,0,module,visitor,visit,use,read,class,current,offset,buffer,current,offset,2,int,provides,count,read,unsigned,short,current,offset,current,offset,2,while,provides,count,0,string,provides,read,class,current,offset,buffer,int,provides,with,count,read,unsigned,short,current,offset,2,current,offset,4,string,provides,with,new,string,provides,with,count,for,int,i,0,i,provides,with,count,i,provides,with,i,read,class,current,offset,buffer,current,offset,2,module,visitor,visit,provide,provides,provides,with,module,visitor,visit,end
ClassReader -> private void readModuleAttributes(       final ClassVisitor classVisitor,       final Context context,       final int moduleOffset,       final int modulePackagesOffset,       final String moduleMainClass);1539119582;Reads the Module, ModulePackages and ModuleMainClass attributes and visit them.__@param classVisitor the current class visitor_@param context information about the class being parsed._@param moduleOffset the offset of the Module attribute (excluding the attribute_info's_attribute_name_index and attribute_length fields)._@param modulePackagesOffset the offset of the ModulePackages attribute (excluding the_attribute_info's attribute_name_index and attribute_length fields), or 0._@param moduleMainClass the string corresponding to the ModuleMainClass attribute, or null.;private void readModuleAttributes(_      final ClassVisitor classVisitor,_      final Context context,_      final int moduleOffset,_      final int modulePackagesOffset,_      final String moduleMainClass) {_    char[] buffer = context.charBuffer___    _    int currentOffset = moduleOffset__    String moduleName = readModule(currentOffset, buffer)__    int moduleFlags = readUnsignedShort(currentOffset + 2)__    String moduleVersion = readUTF8(currentOffset + 4, buffer)__    currentOffset += 6__    ModuleVisitor moduleVisitor = classVisitor.visitModule(moduleName, moduleFlags, moduleVersion)__    if (moduleVisitor == null) {_      return__    }__    _    if (moduleMainClass != null) {_      moduleVisitor.visitMainClass(moduleMainClass)__    }__    _    if (modulePackagesOffset != 0) {_      int packageCount = readUnsignedShort(modulePackagesOffset)__      int currentPackageOffset = modulePackagesOffset + 2__      while (packageCount-- > 0) {_        moduleVisitor.visitPackage(readPackage(currentPackageOffset, buffer))__        currentPackageOffset += 2__      }_    }__    _    int requiresCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (requiresCount-- > 0) {_      _      String requires = readModule(currentOffset, buffer)__      int requiresFlags = readUnsignedShort(currentOffset + 2)__      String requiresVersion = readUTF8(currentOffset + 4, buffer)__      currentOffset += 6__      moduleVisitor.visitRequire(requires, requiresFlags, requiresVersion)__    }__    _    int exportsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (exportsCount-- > 0) {_      _      _      String exports = readPackage(currentOffset, buffer)__      int exportsFlags = readUnsignedShort(currentOffset + 2)__      int exportsToCount = readUnsignedShort(currentOffset + 4)__      currentOffset += 6__      String[] exportsTo = null__      if (exportsToCount != 0) {_        exportsTo = new String[exportsToCount]__        for (int i = 0_ i < exportsToCount_ ++i) {_          exportsTo[i] = readModule(currentOffset, buffer)__          currentOffset += 2__        }_      }_      moduleVisitor.visitExport(exports, exportsFlags, exportsTo)__    }__    _    int opensCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (opensCount-- > 0) {_      _      String opens = readPackage(currentOffset, buffer)__      int opensFlags = readUnsignedShort(currentOffset + 2)__      int opensToCount = readUnsignedShort(currentOffset + 4)__      currentOffset += 6__      String[] opensTo = null__      if (opensToCount != 0) {_        opensTo = new String[opensToCount]__        for (int i = 0_ i < opensToCount_ ++i) {_          opensTo[i] = readModule(currentOffset, buffer)__          currentOffset += 2__        }_      }_      moduleVisitor.visitOpen(opens, opensFlags, opensTo)__    }__    _    int usesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (usesCount-- > 0) {_      moduleVisitor.visitUse(readClass(currentOffset, buffer))__      currentOffset += 2__    }__    _    int providesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (providesCount-- > 0) {_      _      String provides = readClass(currentOffset, buffer)__      int providesWithCount = readUnsignedShort(currentOffset + 2)__      currentOffset += 4__      String[] providesWith = new String[providesWithCount]__      for (int i = 0_ i < providesWithCount_ ++i) {_        providesWith[i] = readClass(currentOffset, buffer)__        currentOffset += 2__      }_      moduleVisitor.visitProvide(provides, providesWith)__    }__    _    moduleVisitor.visitEnd()__  };reads,the,module,module,packages,and,module,main,class,attributes,and,visit,them,param,class,visitor,the,current,class,visitor,param,context,information,about,the,class,being,parsed,param,module,offset,the,offset,of,the,module,attribute,excluding,the,s,and,fields,param,module,packages,offset,the,offset,of,the,module,packages,attribute,excluding,the,s,and,fields,or,0,param,module,main,class,the,string,corresponding,to,the,module,main,class,attribute,or,null;private,void,read,module,attributes,final,class,visitor,class,visitor,final,context,context,final,int,module,offset,final,int,module,packages,offset,final,string,module,main,class,char,buffer,context,char,buffer,int,current,offset,module,offset,string,module,name,read,module,current,offset,buffer,int,module,flags,read,unsigned,short,current,offset,2,string,module,version,read,utf8,current,offset,4,buffer,current,offset,6,module,visitor,module,visitor,class,visitor,visit,module,module,name,module,flags,module,version,if,module,visitor,null,return,if,module,main,class,null,module,visitor,visit,main,class,module,main,class,if,module,packages,offset,0,int,package,count,read,unsigned,short,module,packages,offset,int,current,package,offset,module,packages,offset,2,while,package,count,0,module,visitor,visit,package,read,package,current,package,offset,buffer,current,package,offset,2,int,requires,count,read,unsigned,short,current,offset,current,offset,2,while,requires,count,0,string,requires,read,module,current,offset,buffer,int,requires,flags,read,unsigned,short,current,offset,2,string,requires,version,read,utf8,current,offset,4,buffer,current,offset,6,module,visitor,visit,require,requires,requires,flags,requires,version,int,exports,count,read,unsigned,short,current,offset,current,offset,2,while,exports,count,0,string,exports,read,package,current,offset,buffer,int,exports,flags,read,unsigned,short,current,offset,2,int,exports,to,count,read,unsigned,short,current,offset,4,current,offset,6,string,exports,to,null,if,exports,to,count,0,exports,to,new,string,exports,to,count,for,int,i,0,i,exports,to,count,i,exports,to,i,read,module,current,offset,buffer,current,offset,2,module,visitor,visit,export,exports,exports,flags,exports,to,int,opens,count,read,unsigned,short,current,offset,current,offset,2,while,opens,count,0,string,opens,read,package,current,offset,buffer,int,opens,flags,read,unsigned,short,current,offset,2,int,opens,to,count,read,unsigned,short,current,offset,4,current,offset,6,string,opens,to,null,if,opens,to,count,0,opens,to,new,string,opens,to,count,for,int,i,0,i,opens,to,count,i,opens,to,i,read,module,current,offset,buffer,current,offset,2,module,visitor,visit,open,opens,opens,flags,opens,to,int,uses,count,read,unsigned,short,current,offset,current,offset,2,while,uses,count,0,module,visitor,visit,use,read,class,current,offset,buffer,current,offset,2,int,provides,count,read,unsigned,short,current,offset,current,offset,2,while,provides,count,0,string,provides,read,class,current,offset,buffer,int,provides,with,count,read,unsigned,short,current,offset,2,current,offset,4,string,provides,with,new,string,provides,with,count,for,int,i,0,i,provides,with,count,i,provides,with,i,read,class,current,offset,buffer,current,offset,2,module,visitor,visit,provide,provides,provides,with,module,visitor,visit,end
ClassReader -> private void readModuleAttributes(       final ClassVisitor classVisitor,       final Context context,       final int moduleOffset,       final int modulePackagesOffset,       final String moduleMainClass);1541436263;Reads the Module, ModulePackages and ModuleMainClass attributes and visit them.__@param classVisitor the current class visitor_@param context information about the class being parsed._@param moduleOffset the offset of the Module attribute (excluding the attribute_info's_attribute_name_index and attribute_length fields)._@param modulePackagesOffset the offset of the ModulePackages attribute (excluding the_attribute_info's attribute_name_index and attribute_length fields), or 0._@param moduleMainClass the string corresponding to the ModuleMainClass attribute, or null.;private void readModuleAttributes(_      final ClassVisitor classVisitor,_      final Context context,_      final int moduleOffset,_      final int modulePackagesOffset,_      final String moduleMainClass) {_    char[] buffer = context.charBuffer___    _    int currentOffset = moduleOffset__    String moduleName = readModule(currentOffset, buffer)__    int moduleFlags = readUnsignedShort(currentOffset + 2)__    String moduleVersion = readUTF8(currentOffset + 4, buffer)__    currentOffset += 6__    ModuleVisitor moduleVisitor = classVisitor.visitModule(moduleName, moduleFlags, moduleVersion)__    if (moduleVisitor == null) {_      return__    }__    _    if (moduleMainClass != null) {_      moduleVisitor.visitMainClass(moduleMainClass)__    }__    _    if (modulePackagesOffset != 0) {_      int packageCount = readUnsignedShort(modulePackagesOffset)__      int currentPackageOffset = modulePackagesOffset + 2__      while (packageCount-- > 0) {_        moduleVisitor.visitPackage(readPackage(currentPackageOffset, buffer))__        currentPackageOffset += 2__      }_    }__    _    int requiresCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (requiresCount-- > 0) {_      _      String requires = readModule(currentOffset, buffer)__      int requiresFlags = readUnsignedShort(currentOffset + 2)__      String requiresVersion = readUTF8(currentOffset + 4, buffer)__      currentOffset += 6__      moduleVisitor.visitRequire(requires, requiresFlags, requiresVersion)__    }__    _    int exportsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (exportsCount-- > 0) {_      _      _      String exports = readPackage(currentOffset, buffer)__      int exportsFlags = readUnsignedShort(currentOffset + 2)__      int exportsToCount = readUnsignedShort(currentOffset + 4)__      currentOffset += 6__      String[] exportsTo = null__      if (exportsToCount != 0) {_        exportsTo = new String[exportsToCount]__        for (int i = 0_ i < exportsToCount_ ++i) {_          exportsTo[i] = readModule(currentOffset, buffer)__          currentOffset += 2__        }_      }_      moduleVisitor.visitExport(exports, exportsFlags, exportsTo)__    }__    _    int opensCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (opensCount-- > 0) {_      _      String opens = readPackage(currentOffset, buffer)__      int opensFlags = readUnsignedShort(currentOffset + 2)__      int opensToCount = readUnsignedShort(currentOffset + 4)__      currentOffset += 6__      String[] opensTo = null__      if (opensToCount != 0) {_        opensTo = new String[opensToCount]__        for (int i = 0_ i < opensToCount_ ++i) {_          opensTo[i] = readModule(currentOffset, buffer)__          currentOffset += 2__        }_      }_      moduleVisitor.visitOpen(opens, opensFlags, opensTo)__    }__    _    int usesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (usesCount-- > 0) {_      moduleVisitor.visitUse(readClass(currentOffset, buffer))__      currentOffset += 2__    }__    _    int providesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (providesCount-- > 0) {_      _      String provides = readClass(currentOffset, buffer)__      int providesWithCount = readUnsignedShort(currentOffset + 2)__      currentOffset += 4__      String[] providesWith = new String[providesWithCount]__      for (int i = 0_ i < providesWithCount_ ++i) {_        providesWith[i] = readClass(currentOffset, buffer)__        currentOffset += 2__      }_      moduleVisitor.visitProvide(provides, providesWith)__    }__    _    moduleVisitor.visitEnd()__  };reads,the,module,module,packages,and,module,main,class,attributes,and,visit,them,param,class,visitor,the,current,class,visitor,param,context,information,about,the,class,being,parsed,param,module,offset,the,offset,of,the,module,attribute,excluding,the,s,and,fields,param,module,packages,offset,the,offset,of,the,module,packages,attribute,excluding,the,s,and,fields,or,0,param,module,main,class,the,string,corresponding,to,the,module,main,class,attribute,or,null;private,void,read,module,attributes,final,class,visitor,class,visitor,final,context,context,final,int,module,offset,final,int,module,packages,offset,final,string,module,main,class,char,buffer,context,char,buffer,int,current,offset,module,offset,string,module,name,read,module,current,offset,buffer,int,module,flags,read,unsigned,short,current,offset,2,string,module,version,read,utf8,current,offset,4,buffer,current,offset,6,module,visitor,module,visitor,class,visitor,visit,module,module,name,module,flags,module,version,if,module,visitor,null,return,if,module,main,class,null,module,visitor,visit,main,class,module,main,class,if,module,packages,offset,0,int,package,count,read,unsigned,short,module,packages,offset,int,current,package,offset,module,packages,offset,2,while,package,count,0,module,visitor,visit,package,read,package,current,package,offset,buffer,current,package,offset,2,int,requires,count,read,unsigned,short,current,offset,current,offset,2,while,requires,count,0,string,requires,read,module,current,offset,buffer,int,requires,flags,read,unsigned,short,current,offset,2,string,requires,version,read,utf8,current,offset,4,buffer,current,offset,6,module,visitor,visit,require,requires,requires,flags,requires,version,int,exports,count,read,unsigned,short,current,offset,current,offset,2,while,exports,count,0,string,exports,read,package,current,offset,buffer,int,exports,flags,read,unsigned,short,current,offset,2,int,exports,to,count,read,unsigned,short,current,offset,4,current,offset,6,string,exports,to,null,if,exports,to,count,0,exports,to,new,string,exports,to,count,for,int,i,0,i,exports,to,count,i,exports,to,i,read,module,current,offset,buffer,current,offset,2,module,visitor,visit,export,exports,exports,flags,exports,to,int,opens,count,read,unsigned,short,current,offset,current,offset,2,while,opens,count,0,string,opens,read,package,current,offset,buffer,int,opens,flags,read,unsigned,short,current,offset,2,int,opens,to,count,read,unsigned,short,current,offset,4,current,offset,6,string,opens,to,null,if,opens,to,count,0,opens,to,new,string,opens,to,count,for,int,i,0,i,opens,to,count,i,opens,to,i,read,module,current,offset,buffer,current,offset,2,module,visitor,visit,open,opens,opens,flags,opens,to,int,uses,count,read,unsigned,short,current,offset,current,offset,2,while,uses,count,0,module,visitor,visit,use,read,class,current,offset,buffer,current,offset,2,int,provides,count,read,unsigned,short,current,offset,current,offset,2,while,provides,count,0,string,provides,read,class,current,offset,buffer,int,provides,with,count,read,unsigned,short,current,offset,2,current,offset,4,string,provides,with,new,string,provides,with,count,for,int,i,0,i,provides,with,count,i,provides,with,i,read,class,current,offset,buffer,current,offset,2,module,visitor,visit,provide,provides,provides,with,module,visitor,visit,end
ClassReader -> public void accept(final ClassVisitor classVisitor, final int flags);1366718246;Makes the given visitor visit the Java class of this {@link ClassReader}_. This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor, final int flags) {_        accept(classVisitor, new Attribute[0], flags)__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,int,flags,accept,class,visitor,new,attribute,0,flags
ClassReader -> public void accept(final ClassVisitor classVisitor, final int flags);1395273982;Makes the given visitor visit the Java class of this {@link ClassReader}_. This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor, final int flags) {_        accept(classVisitor, new Attribute[0], flags)__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,int,flags,accept,class,visitor,new,attribute,0,flags
ClassReader -> public void accept(final ClassVisitor classVisitor, final int flags);1414067099;Makes the given visitor visit the Java class of this {@link ClassReader}_. This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor, final int flags) {_        accept(classVisitor, new Attribute[0], flags)__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,int,flags,accept,class,visitor,new,attribute,0,flags
ClassReader -> public void accept(final ClassVisitor classVisitor, final int flags);1414499035;Makes the given visitor visit the Java class of this {@link ClassReader}_. This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor, final int flags) {_        accept(classVisitor, new Attribute[0], flags)__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,int,flags,accept,class,visitor,new,attribute,0,flags
ClassReader -> public void accept(final ClassVisitor classVisitor, final int flags);1416998550;Makes the given visitor visit the Java class of this {@link ClassReader}_. This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor, final int flags) {_        accept(classVisitor, new Attribute[0], flags)__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,int,flags,accept,class,visitor,new,attribute,0,flags
ClassReader -> public void accept(final ClassVisitor classVisitor, final int flags);1457705343;Makes the given visitor visit the Java class of this {@link ClassReader}_. This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor, final int flags) {_        accept(classVisitor, new Attribute[0], flags)__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,int,flags,accept,class,visitor,new,attribute,0,flags
ClassReader -> public void accept(final ClassVisitor classVisitor, final int flags);1459258703;Makes the given visitor visit the Java class of this {@link ClassReader}_. This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor, final int flags) {_        accept(classVisitor, new Attribute[0], flags)__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,int,flags,accept,class,visitor,new,attribute,0,flags
ClassReader -> public void accept(final ClassVisitor classVisitor, final int flags);1478623137;Makes the given visitor visit the Java class of this {@link ClassReader}_. This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor, final int flags) {_        accept(classVisitor, new Attribute[0], flags)__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,int,flags,accept,class,visitor,new,attribute,0,flags
ClassReader -> public void accept(final ClassVisitor classVisitor, final int flags);1483093254;Makes the given visitor visit the Java class of this {@link ClassReader}_. This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor, final int flags) {_        accept(classVisitor, new Attribute[0], flags)__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,int,flags,accept,class,visitor,new,attribute,0,flags
ClassReader -> public void accept(final ClassVisitor classVisitor, final int flags);1505821772;Makes the given visitor visit the Java class of this {@link ClassReader}_. This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor, final int flags) {_        accept(classVisitor, new Attribute[0], flags)__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,int,flags,accept,class,visitor,new,attribute,0,flags
ClassReader -> public String readPackage(final int offset, final char[] charBuffer);1531241461;Reads a CONSTANT_Package constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Package entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Package entry.;public String readPackage(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,package,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readPackage(final int offset, final char[] charBuffer);1536664245;Reads a CONSTANT_Package constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Package entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Package entry.;public String readPackage(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,package,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readPackage(final int offset, final char[] charBuffer);1536747989;Reads a CONSTANT_Package constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Package entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Package entry.;public String readPackage(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,package,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readPackage(final int offset, final char[] charBuffer);1537204147;Reads a CONSTANT_Package constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Package entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Package entry.;public String readPackage(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,package,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readPackage(final int offset, final char[] charBuffer);1539119582;Reads a CONSTANT_Package constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Package entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Package entry.;public String readPackage(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,package,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readPackage(final int offset, final char[] charBuffer);1541436263;Reads a CONSTANT_Package constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Package entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Package entry.;public String readPackage(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,package,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> private void readParameterAnnotations(final MethodVisitor mv,             final Context context, int v, final boolean visible);1395273982;Reads parameter annotations and makes the given visitor visit them.__@param mv_the visitor that must visit the annotations._@param context_information about the class being parsed._@param v_start offset in {@link #b b} of the annotations to be read._@param visible_<tt>true</tt> if the annotations to be read are visible at_runtime.;private void readParameterAnnotations(final MethodVisitor mv,_            final Context context, int v, final boolean visible) {_        int i__        int n = b[v++] & 0xFF__        _        _        _        _        _        _        int synthetics = Type.getArgumentTypes(context.desc).length - n__        AnnotationVisitor av__        for (i = 0_ i < synthetics_ ++i) {_            _            av = mv.visitParameterAnnotation(i, "Ljava/lang/Synthetic_", false)__            if (av != null) {_                av.visitEnd()__            }_        }_        char[] c = context.buffer__        for (_ i < n + synthetics_ ++i) {_            int j = readUnsignedShort(v)__            v += 2__            for (_ j > 0_ --j) {_                av = mv.visitParameterAnnotation(i, readUTF8(v, c), visible)__                v = readAnnotationValues(v + 2, c, true, av)__            }_        }_    };reads,parameter,annotations,and,makes,the,given,visitor,visit,them,param,mv,the,visitor,that,must,visit,the,annotations,param,context,information,about,the,class,being,parsed,param,v,start,offset,in,link,b,b,of,the,annotations,to,be,read,param,visible,tt,true,tt,if,the,annotations,to,be,read,are,visible,at,runtime;private,void,read,parameter,annotations,final,method,visitor,mv,final,context,context,int,v,final,boolean,visible,int,i,int,n,b,v,0x,ff,int,synthetics,type,get,argument,types,context,desc,length,n,annotation,visitor,av,for,i,0,i,synthetics,i,av,mv,visit,parameter,annotation,i,ljava,lang,synthetic,false,if,av,null,av,visit,end,char,c,context,buffer,for,i,n,synthetics,i,int,j,read,unsigned,short,v,v,2,for,j,0,j,av,mv,visit,parameter,annotation,i,read,utf8,v,c,visible,v,read,annotation,values,v,2,c,true,av
ClassReader -> private void readParameterAnnotations(final MethodVisitor mv,             final Context context, int v, final boolean visible);1414067099;Reads parameter annotations and makes the given visitor visit them.__@param mv_the visitor that must visit the annotations._@param context_information about the class being parsed._@param v_start offset in {@link #b b} of the annotations to be read._@param visible_<tt>true</tt> if the annotations to be read are visible at_runtime.;private void readParameterAnnotations(final MethodVisitor mv,_            final Context context, int v, final boolean visible) {_        int i__        int n = b[v++] & 0xFF__        _        _        _        _        _        _        int synthetics = Type.getArgumentTypes(context.desc).length - n__        AnnotationVisitor av__        for (i = 0_ i < synthetics_ ++i) {_            _            av = mv.visitParameterAnnotation(i, "Ljava/lang/Synthetic_", false)__            if (av != null) {_                av.visitEnd()__            }_        }_        char[] c = context.buffer__        for (_ i < n + synthetics_ ++i) {_            int j = readUnsignedShort(v)__            v += 2__            for (_ j > 0_ --j) {_                av = mv.visitParameterAnnotation(i, readUTF8(v, c), visible)__                v = readAnnotationValues(v + 2, c, true, av)__            }_        }_    };reads,parameter,annotations,and,makes,the,given,visitor,visit,them,param,mv,the,visitor,that,must,visit,the,annotations,param,context,information,about,the,class,being,parsed,param,v,start,offset,in,link,b,b,of,the,annotations,to,be,read,param,visible,tt,true,tt,if,the,annotations,to,be,read,are,visible,at,runtime;private,void,read,parameter,annotations,final,method,visitor,mv,final,context,context,int,v,final,boolean,visible,int,i,int,n,b,v,0x,ff,int,synthetics,type,get,argument,types,context,desc,length,n,annotation,visitor,av,for,i,0,i,synthetics,i,av,mv,visit,parameter,annotation,i,ljava,lang,synthetic,false,if,av,null,av,visit,end,char,c,context,buffer,for,i,n,synthetics,i,int,j,read,unsigned,short,v,v,2,for,j,0,j,av,mv,visit,parameter,annotation,i,read,utf8,v,c,visible,v,read,annotation,values,v,2,c,true,av
ClassReader -> private void readParameterAnnotations(final MethodVisitor mv,             final Context context, int v, final boolean visible);1414499035;Reads parameter annotations and makes the given visitor visit them.__@param mv_the visitor that must visit the annotations._@param context_information about the class being parsed._@param v_start offset in {@link #b b} of the annotations to be read._@param visible_<tt>true</tt> if the annotations to be read are visible at_runtime.;private void readParameterAnnotations(final MethodVisitor mv,_            final Context context, int v, final boolean visible) {_        int i__        int n = b[v++] & 0xFF__        _        _        _        _        _        _        int synthetics = Type.getArgumentTypes(context.desc).length - n__        AnnotationVisitor av__        for (i = 0_ i < synthetics_ ++i) {_            _            av = mv.visitParameterAnnotation(i, "Ljava/lang/Synthetic_", false)__            if (av != null) {_                av.visitEnd()__            }_        }_        char[] c = context.buffer__        for (_ i < n + synthetics_ ++i) {_            int j = readUnsignedShort(v)__            v += 2__            for (_ j > 0_ --j) {_                av = mv.visitParameterAnnotation(i, readUTF8(v, c), visible)__                v = readAnnotationValues(v + 2, c, true, av)__            }_        }_    };reads,parameter,annotations,and,makes,the,given,visitor,visit,them,param,mv,the,visitor,that,must,visit,the,annotations,param,context,information,about,the,class,being,parsed,param,v,start,offset,in,link,b,b,of,the,annotations,to,be,read,param,visible,tt,true,tt,if,the,annotations,to,be,read,are,visible,at,runtime;private,void,read,parameter,annotations,final,method,visitor,mv,final,context,context,int,v,final,boolean,visible,int,i,int,n,b,v,0x,ff,int,synthetics,type,get,argument,types,context,desc,length,n,annotation,visitor,av,for,i,0,i,synthetics,i,av,mv,visit,parameter,annotation,i,ljava,lang,synthetic,false,if,av,null,av,visit,end,char,c,context,buffer,for,i,n,synthetics,i,int,j,read,unsigned,short,v,v,2,for,j,0,j,av,mv,visit,parameter,annotation,i,read,utf8,v,c,visible,v,read,annotation,values,v,2,c,true,av
ClassReader -> private void readParameterAnnotations(final MethodVisitor mv,             final Context context, int v, final boolean visible);1416998550;Reads parameter annotations and makes the given visitor visit them.__@param mv_the visitor that must visit the annotations._@param context_information about the class being parsed._@param v_start offset in {@link #b b} of the annotations to be read._@param visible_<tt>true</tt> if the annotations to be read are visible at_runtime.;private void readParameterAnnotations(final MethodVisitor mv,_            final Context context, int v, final boolean visible) {_        int i__        int n = b[v++] & 0xFF__        _        _        _        _        _        _        int synthetics = Type.getArgumentTypes(context.desc).length - n__        AnnotationVisitor av__        for (i = 0_ i < synthetics_ ++i) {_            _            av = mv.visitParameterAnnotation(i, "Ljava/lang/Synthetic_", false)__            if (av != null) {_                av.visitEnd()__            }_        }_        char[] c = context.buffer__        for (_ i < n + synthetics_ ++i) {_            int j = readUnsignedShort(v)__            v += 2__            for (_ j > 0_ --j) {_                av = mv.visitParameterAnnotation(i, readUTF8(v, c), visible)__                v = readAnnotationValues(v + 2, c, true, av)__            }_        }_    };reads,parameter,annotations,and,makes,the,given,visitor,visit,them,param,mv,the,visitor,that,must,visit,the,annotations,param,context,information,about,the,class,being,parsed,param,v,start,offset,in,link,b,b,of,the,annotations,to,be,read,param,visible,tt,true,tt,if,the,annotations,to,be,read,are,visible,at,runtime;private,void,read,parameter,annotations,final,method,visitor,mv,final,context,context,int,v,final,boolean,visible,int,i,int,n,b,v,0x,ff,int,synthetics,type,get,argument,types,context,desc,length,n,annotation,visitor,av,for,i,0,i,synthetics,i,av,mv,visit,parameter,annotation,i,ljava,lang,synthetic,false,if,av,null,av,visit,end,char,c,context,buffer,for,i,n,synthetics,i,int,j,read,unsigned,short,v,v,2,for,j,0,j,av,mv,visit,parameter,annotation,i,read,utf8,v,c,visible,v,read,annotation,values,v,2,c,true,av
ClassReader -> private void readParameterAnnotations(final MethodVisitor mv,             final Context context, int v, final boolean visible);1457705343;Reads parameter annotations and makes the given visitor visit them.__@param mv_the visitor that must visit the annotations._@param context_information about the class being parsed._@param v_start offset in {@link #b b} of the annotations to be read._@param visible_<tt>true</tt> if the annotations to be read are visible at_runtime.;private void readParameterAnnotations(final MethodVisitor mv,_            final Context context, int v, final boolean visible) {_        int i__        int n = b[v++] & 0xFF__        _        _        _        _        _        _        int synthetics = Type.getArgumentTypes(context.desc).length - n__        AnnotationVisitor av__        for (i = 0_ i < synthetics_ ++i) {_            _            av = mv.visitParameterAnnotation(i, "Ljava/lang/Synthetic_", false)__            if (av != null) {_                av.visitEnd()__            }_        }_        char[] c = context.buffer__        for (_ i < n + synthetics_ ++i) {_            int j = readUnsignedShort(v)__            v += 2__            for (_ j > 0_ --j) {_                av = mv.visitParameterAnnotation(i, readUTF8(v, c), visible)__                v = readAnnotationValues(v + 2, c, true, av)__            }_        }_    };reads,parameter,annotations,and,makes,the,given,visitor,visit,them,param,mv,the,visitor,that,must,visit,the,annotations,param,context,information,about,the,class,being,parsed,param,v,start,offset,in,link,b,b,of,the,annotations,to,be,read,param,visible,tt,true,tt,if,the,annotations,to,be,read,are,visible,at,runtime;private,void,read,parameter,annotations,final,method,visitor,mv,final,context,context,int,v,final,boolean,visible,int,i,int,n,b,v,0x,ff,int,synthetics,type,get,argument,types,context,desc,length,n,annotation,visitor,av,for,i,0,i,synthetics,i,av,mv,visit,parameter,annotation,i,ljava,lang,synthetic,false,if,av,null,av,visit,end,char,c,context,buffer,for,i,n,synthetics,i,int,j,read,unsigned,short,v,v,2,for,j,0,j,av,mv,visit,parameter,annotation,i,read,utf8,v,c,visible,v,read,annotation,values,v,2,c,true,av
ClassReader -> private void readParameterAnnotations(final MethodVisitor mv,             final Context context, int v, final boolean visible);1459258703;Reads parameter annotations and makes the given visitor visit them.__@param mv_the visitor that must visit the annotations._@param context_information about the class being parsed._@param v_start offset in {@link #b b} of the annotations to be read._@param visible_<tt>true</tt> if the annotations to be read are visible at_runtime.;private void readParameterAnnotations(final MethodVisitor mv,_            final Context context, int v, final boolean visible) {_        int i__        int n = b[v++] & 0xFF__        _        _        _        _        _        _        int synthetics = Type.getArgumentTypes(context.desc).length - n__        AnnotationVisitor av__        for (i = 0_ i < synthetics_ ++i) {_            _            av = mv.visitParameterAnnotation(i, "Ljava/lang/Synthetic_", false)__            if (av != null) {_                av.visitEnd()__            }_        }_        char[] c = context.buffer__        for (_ i < n + synthetics_ ++i) {_            int j = readUnsignedShort(v)__            v += 2__            for (_ j > 0_ --j) {_                av = mv.visitParameterAnnotation(i, readUTF8(v, c), visible)__                v = readAnnotationValues(v + 2, c, true, av)__            }_        }_    };reads,parameter,annotations,and,makes,the,given,visitor,visit,them,param,mv,the,visitor,that,must,visit,the,annotations,param,context,information,about,the,class,being,parsed,param,v,start,offset,in,link,b,b,of,the,annotations,to,be,read,param,visible,tt,true,tt,if,the,annotations,to,be,read,are,visible,at,runtime;private,void,read,parameter,annotations,final,method,visitor,mv,final,context,context,int,v,final,boolean,visible,int,i,int,n,b,v,0x,ff,int,synthetics,type,get,argument,types,context,desc,length,n,annotation,visitor,av,for,i,0,i,synthetics,i,av,mv,visit,parameter,annotation,i,ljava,lang,synthetic,false,if,av,null,av,visit,end,char,c,context,buffer,for,i,n,synthetics,i,int,j,read,unsigned,short,v,v,2,for,j,0,j,av,mv,visit,parameter,annotation,i,read,utf8,v,c,visible,v,read,annotation,values,v,2,c,true,av
ClassReader -> private void readParameterAnnotations(final MethodVisitor mv,             final Context context, int v, final boolean visible);1478623137;Reads parameter annotations and makes the given visitor visit them.__@param mv_the visitor that must visit the annotations._@param context_information about the class being parsed._@param v_start offset in {@link #b b} of the annotations to be read._@param visible_<tt>true</tt> if the annotations to be read are visible at_runtime.;private void readParameterAnnotations(final MethodVisitor mv,_            final Context context, int v, final boolean visible) {_        int i__        int n = b[v++] & 0xFF__        _        _        _        _        _        _        int synthetics = Type.getArgumentTypes(context.desc).length - n__        AnnotationVisitor av__        for (i = 0_ i < synthetics_ ++i) {_            _            av = mv.visitParameterAnnotation(i, "Ljava/lang/Synthetic_", false)__            if (av != null) {_                av.visitEnd()__            }_        }_        char[] c = context.buffer__        for (_ i < n + synthetics_ ++i) {_            int j = readUnsignedShort(v)__            v += 2__            for (_ j > 0_ --j) {_                av = mv.visitParameterAnnotation(i, readUTF8(v, c), visible)__                v = readAnnotationValues(v + 2, c, true, av)__            }_        }_    };reads,parameter,annotations,and,makes,the,given,visitor,visit,them,param,mv,the,visitor,that,must,visit,the,annotations,param,context,information,about,the,class,being,parsed,param,v,start,offset,in,link,b,b,of,the,annotations,to,be,read,param,visible,tt,true,tt,if,the,annotations,to,be,read,are,visible,at,runtime;private,void,read,parameter,annotations,final,method,visitor,mv,final,context,context,int,v,final,boolean,visible,int,i,int,n,b,v,0x,ff,int,synthetics,type,get,argument,types,context,desc,length,n,annotation,visitor,av,for,i,0,i,synthetics,i,av,mv,visit,parameter,annotation,i,ljava,lang,synthetic,false,if,av,null,av,visit,end,char,c,context,buffer,for,i,n,synthetics,i,int,j,read,unsigned,short,v,v,2,for,j,0,j,av,mv,visit,parameter,annotation,i,read,utf8,v,c,visible,v,read,annotation,values,v,2,c,true,av
ClassReader -> private void readParameterAnnotations(final MethodVisitor mv,             final Context context, int v, final boolean visible);1483093254;Reads parameter annotations and makes the given visitor visit them.__@param mv_the visitor that must visit the annotations._@param context_information about the class being parsed._@param v_start offset in {@link #b b} of the annotations to be read._@param visible_<tt>true</tt> if the annotations to be read are visible at_runtime.;private void readParameterAnnotations(final MethodVisitor mv,_            final Context context, int v, final boolean visible) {_        int i__        int n = b[v++] & 0xFF__        _        _        _        _        _        _        int synthetics = Type.getArgumentTypes(context.desc).length - n__        AnnotationVisitor av__        for (i = 0_ i < synthetics_ ++i) {_            _            av = mv.visitParameterAnnotation(i, "Ljava/lang/Synthetic_", false)__            if (av != null) {_                av.visitEnd()__            }_        }_        char[] c = context.buffer__        for (_ i < n + synthetics_ ++i) {_            int j = readUnsignedShort(v)__            v += 2__            for (_ j > 0_ --j) {_                av = mv.visitParameterAnnotation(i, readUTF8(v, c), visible)__                v = readAnnotationValues(v + 2, c, true, av)__            }_        }_    };reads,parameter,annotations,and,makes,the,given,visitor,visit,them,param,mv,the,visitor,that,must,visit,the,annotations,param,context,information,about,the,class,being,parsed,param,v,start,offset,in,link,b,b,of,the,annotations,to,be,read,param,visible,tt,true,tt,if,the,annotations,to,be,read,are,visible,at,runtime;private,void,read,parameter,annotations,final,method,visitor,mv,final,context,context,int,v,final,boolean,visible,int,i,int,n,b,v,0x,ff,int,synthetics,type,get,argument,types,context,desc,length,n,annotation,visitor,av,for,i,0,i,synthetics,i,av,mv,visit,parameter,annotation,i,ljava,lang,synthetic,false,if,av,null,av,visit,end,char,c,context,buffer,for,i,n,synthetics,i,int,j,read,unsigned,short,v,v,2,for,j,0,j,av,mv,visit,parameter,annotation,i,read,utf8,v,c,visible,v,read,annotation,values,v,2,c,true,av
ClassReader -> private void readParameterAnnotations(final MethodVisitor mv,             final Context context, int v, final boolean visible);1505821772;Reads parameter annotations and makes the given visitor visit them.__@param mv_the visitor that must visit the annotations._@param context_information about the class being parsed._@param v_start offset in {@link #b b} of the annotations to be read._@param visible_<tt>true</tt> if the annotations to be read are visible at_runtime.;private void readParameterAnnotations(final MethodVisitor mv,_            final Context context, int v, final boolean visible) {_        int i__        int n = b[v++] & 0xFF__        _        _        _        _        _        _        int synthetics = Type.getArgumentTypes(context.desc).length - n__        AnnotationVisitor av__        for (i = 0_ i < synthetics_ ++i) {_            _            av = mv.visitParameterAnnotation(i, "Ljava/lang/Synthetic_", false)__            if (av != null) {_                av.visitEnd()__            }_        }_        char[] c = context.buffer__        for (_ i < n + synthetics_ ++i) {_            int j = readUnsignedShort(v)__            v += 2__            for (_ j > 0_ --j) {_                av = mv.visitParameterAnnotation(i, readUTF8(v, c), visible)__                v = readAnnotationValues(v + 2, c, true, av)__            }_        }_    };reads,parameter,annotations,and,makes,the,given,visitor,visit,them,param,mv,the,visitor,that,must,visit,the,annotations,param,context,information,about,the,class,being,parsed,param,v,start,offset,in,link,b,b,of,the,annotations,to,be,read,param,visible,tt,true,tt,if,the,annotations,to,be,read,are,visible,at,runtime;private,void,read,parameter,annotations,final,method,visitor,mv,final,context,context,int,v,final,boolean,visible,int,i,int,n,b,v,0x,ff,int,synthetics,type,get,argument,types,context,desc,length,n,annotation,visitor,av,for,i,0,i,synthetics,i,av,mv,visit,parameter,annotation,i,ljava,lang,synthetic,false,if,av,null,av,visit,end,char,c,context,buffer,for,i,n,synthetics,i,int,j,read,unsigned,short,v,v,2,for,j,0,j,av,mv,visit,parameter,annotation,i,read,utf8,v,c,visible,v,read,annotation,values,v,2,c,true,av
ClassReader -> public short readShort(final int offset);1531241461;Reads a signed short value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public short readShort(final int offset) {_    byte[] classFileBuffer = b__    return (short) (((classFileBuffer[offset] & 0xFF) << 8) | (classFileBuffer[offset + 1] & 0xFF))__  };reads,a,signed,short,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,short,read,short,final,int,offset,byte,class,file,buffer,b,return,short,class,file,buffer,offset,0x,ff,8,class,file,buffer,offset,1,0x,ff
ClassReader -> public short readShort(final int offset);1536664245;Reads a signed short value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public short readShort(final int offset) {_    byte[] classFileBuffer = b__    return (short) (((classFileBuffer[offset] & 0xFF) << 8) | (classFileBuffer[offset + 1] & 0xFF))__  };reads,a,signed,short,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,short,read,short,final,int,offset,byte,class,file,buffer,b,return,short,class,file,buffer,offset,0x,ff,8,class,file,buffer,offset,1,0x,ff
ClassReader -> public short readShort(final int offset);1536747989;Reads a signed short value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public short readShort(final int offset) {_    byte[] classFileBuffer = b__    return (short) (((classFileBuffer[offset] & 0xFF) << 8) | (classFileBuffer[offset + 1] & 0xFF))__  };reads,a,signed,short,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,short,read,short,final,int,offset,byte,class,file,buffer,b,return,short,class,file,buffer,offset,0x,ff,8,class,file,buffer,offset,1,0x,ff
ClassReader -> public short readShort(final int offset);1537204147;Reads a signed short value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public short readShort(final int offset) {_    byte[] classFileBuffer = b__    return (short) (((classFileBuffer[offset] & 0xFF) << 8) | (classFileBuffer[offset + 1] & 0xFF))__  };reads,a,signed,short,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,short,read,short,final,int,offset,byte,class,file,buffer,b,return,short,class,file,buffer,offset,0x,ff,8,class,file,buffer,offset,1,0x,ff
ClassReader -> public short readShort(final int offset);1539119582;Reads a signed short value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public short readShort(final int offset) {_    byte[] classFileBuffer = b__    return (short) (((classFileBuffer[offset] & 0xFF) << 8) | (classFileBuffer[offset + 1] & 0xFF))__  };reads,a,signed,short,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,short,read,short,final,int,offset,byte,class,file,buffer,b,return,short,class,file,buffer,offset,0x,ff,8,class,file,buffer,offset,1,0x,ff
ClassReader -> public short readShort(final int offset);1541436263;Reads a signed short value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public short readShort(final int offset) {_    byte[] classFileBuffer = b__    return (short) (((classFileBuffer[offset] & 0xFF) << 8) | (classFileBuffer[offset + 1] & 0xFF))__  };reads,a,signed,short,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,short,read,short,final,int,offset,byte,class,file,buffer,b,return,short,class,file,buffer,offset,0x,ff,8,class,file,buffer,offset,1,0x,ff
ClassReader -> private int readMethod(final ClassVisitor classVisitor,             final Context context, int u);1366718246;Reads a method and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the method._@param context_information about the class being parsed._@param u_the start offset of the method in the class file._@return the offset of the first byte following the method in the class.;private int readMethod(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        int access = readUnsignedShort(u)__        String name = readUTF8(u + 2, c)__        String desc = readUTF8(u + 4, c)__        u += 6___        _        int code = 0__        int exception = 0__        String[] exceptions = null__        String signature = null__        int anns = 0__        int ianns = 0__        int dann = 0__        int mpanns = 0__        int impanns = 0__        int firstAttribute = u__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("Code".equals(attrName)) {_                if ((context.flags & SKIP_CODE) == 0) {_                    code = u + 8__                }_            } else if ("Exceptions".equals(attrName)) {_                exceptions = new String[readUnsignedShort(u + 8)]__                exception = u + 10__                for (int j = 0_ j < exceptions.length_ ++j) {_                    exceptions[j] = readClass(exception, c)__                    exception += 2__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {_                dann = u + 8__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleParameterAnnotations".equals(attrName)) {_                mpanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {_                impanns = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        MethodVisitor mv = classVisitor.visitMethod(access, name, desc,_                signature, exceptions)__        if (mv == null) {_            return u__        }__        _        if (WRITER && mv instanceof MethodWriter) {_            MethodWriter mw = (MethodWriter) mv__            if (mw.cw.cr == this && signature == mw.signature) {_                boolean sameExceptions = false__                if (exceptions == null) {_                    sameExceptions = mw.exceptionCount == 0__                } else if (exceptions.length == mw.exceptionCount) {_                    sameExceptions = true__                    for (int j = exceptions.length - 1_ j >= 0_ --j) {_                        exception -= 2__                        if (mw.exceptions[j] != readUnsignedShort(exception)) {_                            sameExceptions = false__                            break__                        }_                    }_                }_                if (sameExceptions) {_                    _                    mw.classReaderOffset = firstAttribute__                    mw.classReaderLength = u - firstAttribute__                    return u__                }_            }_        }__        _        if (ANNOTATIONS && dann != 0) {_            AnnotationVisitor dv = mv.visitAnnotationDefault()__            readAnnotationValue(dann, c, null, dv)__            if (dv != null) {_                dv.visitEnd()__            }_        }_        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && mpanns != 0) {_            readParameterAnnotations(mpanns, desc, c, true, mv)__        }_        if (ANNOTATIONS && impanns != 0) {_            readParameterAnnotations(impanns, desc, c, false, mv)__        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        if (code != 0) {_            context.access = access__            context.name = name__            context.desc = desc__            mv.visitCode()__            readCode(mv, context, code)__        }__        _        mv.visitEnd()___        return u__    };reads,a,method,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,method,in,the,class,file,return,the,offset,of,the,first,byte,following,the,method,in,the,class;private,int,read,method,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,int,access,read,unsigned,short,u,string,name,read,utf8,u,2,c,string,desc,read,utf8,u,4,c,u,6,int,code,0,int,exception,0,string,exceptions,null,string,signature,null,int,anns,0,int,ianns,0,int,dann,0,int,mpanns,0,int,impanns,0,int,first,attribute,u,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,code,equals,attr,name,if,context,flags,0,code,u,8,else,if,exceptions,equals,attr,name,exceptions,new,string,read,unsigned,short,u,8,exception,u,10,for,int,j,0,j,exceptions,length,j,exceptions,j,read,class,exception,c,exception,2,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,access,opcodes,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,annotation,default,equals,attr,name,dann,u,8,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,visible,parameter,annotations,equals,attr,name,mpanns,u,8,else,if,annotations,runtime,invisible,parameter,annotations,equals,attr,name,impanns,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,method,visitor,mv,class,visitor,visit,method,access,name,desc,signature,exceptions,if,mv,null,return,u,if,writer,mv,instanceof,method,writer,method,writer,mw,method,writer,mv,if,mw,cw,cr,this,signature,mw,signature,boolean,same,exceptions,false,if,exceptions,null,same,exceptions,mw,exception,count,0,else,if,exceptions,length,mw,exception,count,same,exceptions,true,for,int,j,exceptions,length,1,j,0,j,exception,2,if,mw,exceptions,j,read,unsigned,short,exception,same,exceptions,false,break,if,same,exceptions,mw,class,reader,offset,first,attribute,mw,class,reader,length,u,first,attribute,return,u,if,annotations,dann,0,annotation,visitor,dv,mv,visit,annotation,default,read,annotation,value,dann,c,null,dv,if,dv,null,dv,visit,end,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,false,if,annotations,mpanns,0,read,parameter,annotations,mpanns,desc,c,true,mv,if,annotations,impanns,0,read,parameter,annotations,impanns,desc,c,false,mv,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,if,code,0,context,access,access,context,name,name,context,desc,desc,mv,visit,code,read,code,mv,context,code,mv,visit,end,return,u
ClassReader -> private int readMethod(final ClassVisitor classVisitor,             final Context context, int u);1395273982;Reads a method and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the method._@param context_information about the class being parsed._@param u_the start offset of the method in the class file._@return the offset of the first byte following the method in the class.;private int readMethod(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        context.access = readUnsignedShort(u)__        context.name = readUTF8(u + 2, c)__        context.desc = readUTF8(u + 4, c)__        u += 6___        _        int code = 0__        int exception = 0__        String[] exceptions = null__        String signature = null__        int methodParameters = 0__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int dann = 0__        int mpanns = 0__        int impanns = 0__        int firstAttribute = u__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("Code".equals(attrName)) {_                if ((context.flags & SKIP_CODE) == 0) {_                    code = u + 8__                }_            } else if ("Exceptions".equals(attrName)) {_                exceptions = new String[readUnsignedShort(u + 8)]__                exception = u + 10__                for (int j = 0_ j < exceptions.length_ ++j) {_                    exceptions[j] = readClass(exception, c)__                    exception += 2__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                context.access |= Opcodes.ACC_DEPRECATED__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {_                dann = u + 8__            } else if ("Synthetic".equals(attrName)) {_                context.access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleParameterAnnotations".equals(attrName)) {_                mpanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {_                impanns = u + 8__            } else if ("MethodParameters".equals(attrName)) {_                methodParameters = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        MethodVisitor mv = classVisitor.visitMethod(context.access,_                context.name, context.desc, signature, exceptions)__        if (mv == null) {_            return u__        }__        _        if (WRITER && mv instanceof MethodWriter) {_            MethodWriter mw = (MethodWriter) mv__            if (mw.cw.cr == this && signature == mw.signature) {_                boolean sameExceptions = false__                if (exceptions == null) {_                    sameExceptions = mw.exceptionCount == 0__                } else if (exceptions.length == mw.exceptionCount) {_                    sameExceptions = true__                    for (int j = exceptions.length - 1_ j >= 0_ --j) {_                        exception -= 2__                        if (mw.exceptions[j] != readUnsignedShort(exception)) {_                            sameExceptions = false__                            break__                        }_                    }_                }_                if (sameExceptions) {_                    _                    mw.classReaderOffset = firstAttribute__                    mw.classReaderLength = u - firstAttribute__                    return u__                }_            }_        }__        _        if (methodParameters != 0) {_            for (int i = b[methodParameters] & 0xFF, v = methodParameters + 1_ i > 0_ --i, v = v + 4) {_                mv.visitParameter(readUTF8(v, c), readUnsignedShort(v + 2))__            }_        }__        _        if (ANNOTATIONS && dann != 0) {_            AnnotationVisitor dv = mv.visitAnnotationDefault()__            readAnnotationValue(dann, c, null, dv)__            if (dv != null) {_                dv.visitEnd()__            }_        }_        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && mpanns != 0) {_            readParameterAnnotations(mv, context, mpanns, true)__        }_        if (ANNOTATIONS && impanns != 0) {_            readParameterAnnotations(mv, context, impanns, false)__        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        if (code != 0) {_            mv.visitCode()__            readCode(mv, context, code)__        }__        _        mv.visitEnd()___        return u__    };reads,a,method,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,method,in,the,class,file,return,the,offset,of,the,first,byte,following,the,method,in,the,class;private,int,read,method,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,context,access,read,unsigned,short,u,context,name,read,utf8,u,2,c,context,desc,read,utf8,u,4,c,u,6,int,code,0,int,exception,0,string,exceptions,null,string,signature,null,int,method,parameters,0,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,dann,0,int,mpanns,0,int,impanns,0,int,first,attribute,u,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,code,equals,attr,name,if,context,flags,0,code,u,8,else,if,exceptions,equals,attr,name,exceptions,new,string,read,unsigned,short,u,8,exception,u,10,for,int,j,0,j,exceptions,length,j,exceptions,j,read,class,exception,c,exception,2,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,context,access,opcodes,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,annotation,default,equals,attr,name,dann,u,8,else,if,synthetic,equals,attr,name,context,access,opcodes,class,writer,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,annotations,runtime,visible,parameter,annotations,equals,attr,name,mpanns,u,8,else,if,annotations,runtime,invisible,parameter,annotations,equals,attr,name,impanns,u,8,else,if,method,parameters,equals,attr,name,method,parameters,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,method,visitor,mv,class,visitor,visit,method,context,access,context,name,context,desc,signature,exceptions,if,mv,null,return,u,if,writer,mv,instanceof,method,writer,method,writer,mw,method,writer,mv,if,mw,cw,cr,this,signature,mw,signature,boolean,same,exceptions,false,if,exceptions,null,same,exceptions,mw,exception,count,0,else,if,exceptions,length,mw,exception,count,same,exceptions,true,for,int,j,exceptions,length,1,j,0,j,exception,2,if,mw,exceptions,j,read,unsigned,short,exception,same,exceptions,false,break,if,same,exceptions,mw,class,reader,offset,first,attribute,mw,class,reader,length,u,first,attribute,return,u,if,method,parameters,0,for,int,i,b,method,parameters,0x,ff,v,method,parameters,1,i,0,i,v,v,4,mv,visit,parameter,read,utf8,v,c,read,unsigned,short,v,2,if,annotations,dann,0,annotation,visitor,dv,mv,visit,annotation,default,read,annotation,value,dann,c,null,dv,if,dv,null,dv,visit,end,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,if,annotations,mpanns,0,read,parameter,annotations,mv,context,mpanns,true,if,annotations,impanns,0,read,parameter,annotations,mv,context,impanns,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,if,code,0,mv,visit,code,read,code,mv,context,code,mv,visit,end,return,u
ClassReader -> private int readMethod(final ClassVisitor classVisitor,             final Context context, int u);1414067099;Reads a method and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the method._@param context_information about the class being parsed._@param u_the start offset of the method in the class file._@return the offset of the first byte following the method in the class.;private int readMethod(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        context.access = readUnsignedShort(u)__        context.name = readUTF8(u + 2, c)__        context.desc = readUTF8(u + 4, c)__        u += 6___        _        int code = 0__        int exception = 0__        String[] exceptions = null__        String signature = null__        int methodParameters = 0__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int dann = 0__        int mpanns = 0__        int impanns = 0__        int firstAttribute = u__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("Code".equals(attrName)) {_                if ((context.flags & SKIP_CODE) == 0) {_                    code = u + 8__                }_            } else if ("Exceptions".equals(attrName)) {_                exceptions = new String[readUnsignedShort(u + 8)]__                exception = u + 10__                for (int j = 0_ j < exceptions.length_ ++j) {_                    exceptions[j] = readClass(exception, c)__                    exception += 2__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                context.access |= Opcodes.ACC_DEPRECATED__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {_                dann = u + 8__            } else if ("Synthetic".equals(attrName)) {_                context.access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleParameterAnnotations".equals(attrName)) {_                mpanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {_                impanns = u + 8__            } else if ("MethodParameters".equals(attrName)) {_                methodParameters = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        MethodVisitor mv = classVisitor.visitMethod(context.access,_                context.name, context.desc, signature, exceptions)__        if (mv == null) {_            return u__        }__        _        if (WRITER && mv instanceof MethodWriter) {_            MethodWriter mw = (MethodWriter) mv__            if (mw.cw.cr == this && signature == mw.signature) {_                boolean sameExceptions = false__                if (exceptions == null) {_                    sameExceptions = mw.exceptionCount == 0__                } else if (exceptions.length == mw.exceptionCount) {_                    sameExceptions = true__                    for (int j = exceptions.length - 1_ j >= 0_ --j) {_                        exception -= 2__                        if (mw.exceptions[j] != readUnsignedShort(exception)) {_                            sameExceptions = false__                            break__                        }_                    }_                }_                if (sameExceptions) {_                    _                    mw.classReaderOffset = firstAttribute__                    mw.classReaderLength = u - firstAttribute__                    return u__                }_            }_        }__        _        if (methodParameters != 0) {_            for (int i = b[methodParameters] & 0xFF, v = methodParameters + 1_ i > 0_ --i, v = v + 4) {_                mv.visitParameter(readUTF8(v, c), readUnsignedShort(v + 2))__            }_        }__        _        if (ANNOTATIONS && dann != 0) {_            AnnotationVisitor dv = mv.visitAnnotationDefault()__            readAnnotationValue(dann, c, null, dv)__            if (dv != null) {_                dv.visitEnd()__            }_        }_        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && mpanns != 0) {_            readParameterAnnotations(mv, context, mpanns, true)__        }_        if (ANNOTATIONS && impanns != 0) {_            readParameterAnnotations(mv, context, impanns, false)__        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        if (code != 0) {_            mv.visitCode()__            readCode(mv, context, code)__        }__        _        mv.visitEnd()___        return u__    };reads,a,method,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,method,in,the,class,file,return,the,offset,of,the,first,byte,following,the,method,in,the,class;private,int,read,method,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,context,access,read,unsigned,short,u,context,name,read,utf8,u,2,c,context,desc,read,utf8,u,4,c,u,6,int,code,0,int,exception,0,string,exceptions,null,string,signature,null,int,method,parameters,0,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,dann,0,int,mpanns,0,int,impanns,0,int,first,attribute,u,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,code,equals,attr,name,if,context,flags,0,code,u,8,else,if,exceptions,equals,attr,name,exceptions,new,string,read,unsigned,short,u,8,exception,u,10,for,int,j,0,j,exceptions,length,j,exceptions,j,read,class,exception,c,exception,2,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,context,access,opcodes,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,annotation,default,equals,attr,name,dann,u,8,else,if,synthetic,equals,attr,name,context,access,opcodes,class,writer,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,annotations,runtime,visible,parameter,annotations,equals,attr,name,mpanns,u,8,else,if,annotations,runtime,invisible,parameter,annotations,equals,attr,name,impanns,u,8,else,if,method,parameters,equals,attr,name,method,parameters,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,method,visitor,mv,class,visitor,visit,method,context,access,context,name,context,desc,signature,exceptions,if,mv,null,return,u,if,writer,mv,instanceof,method,writer,method,writer,mw,method,writer,mv,if,mw,cw,cr,this,signature,mw,signature,boolean,same,exceptions,false,if,exceptions,null,same,exceptions,mw,exception,count,0,else,if,exceptions,length,mw,exception,count,same,exceptions,true,for,int,j,exceptions,length,1,j,0,j,exception,2,if,mw,exceptions,j,read,unsigned,short,exception,same,exceptions,false,break,if,same,exceptions,mw,class,reader,offset,first,attribute,mw,class,reader,length,u,first,attribute,return,u,if,method,parameters,0,for,int,i,b,method,parameters,0x,ff,v,method,parameters,1,i,0,i,v,v,4,mv,visit,parameter,read,utf8,v,c,read,unsigned,short,v,2,if,annotations,dann,0,annotation,visitor,dv,mv,visit,annotation,default,read,annotation,value,dann,c,null,dv,if,dv,null,dv,visit,end,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,if,annotations,mpanns,0,read,parameter,annotations,mv,context,mpanns,true,if,annotations,impanns,0,read,parameter,annotations,mv,context,impanns,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,if,code,0,mv,visit,code,read,code,mv,context,code,mv,visit,end,return,u
ClassReader -> private int readMethod(final ClassVisitor classVisitor,             final Context context, int u);1414499035;Reads a method and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the method._@param context_information about the class being parsed._@param u_the start offset of the method in the class file._@return the offset of the first byte following the method in the class.;private int readMethod(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        context.access = readUnsignedShort(u)__        context.name = readUTF8(u + 2, c)__        context.desc = readUTF8(u + 4, c)__        u += 6___        _        int code = 0__        int exception = 0__        String[] exceptions = null__        String signature = null__        int methodParameters = 0__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int dann = 0__        int mpanns = 0__        int impanns = 0__        int firstAttribute = u__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("Code".equals(attrName)) {_                if ((context.flags & SKIP_CODE) == 0) {_                    code = u + 8__                }_            } else if ("Exceptions".equals(attrName)) {_                exceptions = new String[readUnsignedShort(u + 8)]__                exception = u + 10__                for (int j = 0_ j < exceptions.length_ ++j) {_                    exceptions[j] = readClass(exception, c)__                    exception += 2__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                context.access |= Opcodes.ACC_DEPRECATED__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {_                dann = u + 8__            } else if ("Synthetic".equals(attrName)) {_                context.access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleParameterAnnotations".equals(attrName)) {_                mpanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {_                impanns = u + 8__            } else if ("MethodParameters".equals(attrName)) {_                methodParameters = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        MethodVisitor mv = classVisitor.visitMethod(context.access,_                context.name, context.desc, signature, exceptions)__        if (mv == null) {_            return u__        }__        _        if (WRITER && mv instanceof MethodWriter) {_            MethodWriter mw = (MethodWriter) mv__            if (mw.cw.cr == this &&_					(signature != null ? signature.equals(mw.signature) : mw.signature == null)) {_                boolean sameExceptions = false__                if (exceptions == null) {_                    sameExceptions = mw.exceptionCount == 0__                } else if (exceptions.length == mw.exceptionCount) {_                    sameExceptions = true__                    for (int j = exceptions.length - 1_ j >= 0_ --j) {_                        exception -= 2__                        if (mw.exceptions[j] != readUnsignedShort(exception)) {_                            sameExceptions = false__                            break__                        }_                    }_                }_                if (sameExceptions) {_                    _                    mw.classReaderOffset = firstAttribute__                    mw.classReaderLength = u - firstAttribute__                    return u__                }_            }_        }__        _        if (methodParameters != 0) {_            for (int i = b[methodParameters] & 0xFF, v = methodParameters + 1_ i > 0_ --i, v = v + 4) {_                mv.visitParameter(readUTF8(v, c), readUnsignedShort(v + 2))__            }_        }__        _        if (ANNOTATIONS && dann != 0) {_            AnnotationVisitor dv = mv.visitAnnotationDefault()__            readAnnotationValue(dann, c, null, dv)__            if (dv != null) {_                dv.visitEnd()__            }_        }_        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && mpanns != 0) {_            readParameterAnnotations(mv, context, mpanns, true)__        }_        if (ANNOTATIONS && impanns != 0) {_            readParameterAnnotations(mv, context, impanns, false)__        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        if (code != 0) {_            mv.visitCode()__            readCode(mv, context, code)__        }__        _        mv.visitEnd()___        return u__    };reads,a,method,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,method,in,the,class,file,return,the,offset,of,the,first,byte,following,the,method,in,the,class;private,int,read,method,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,context,access,read,unsigned,short,u,context,name,read,utf8,u,2,c,context,desc,read,utf8,u,4,c,u,6,int,code,0,int,exception,0,string,exceptions,null,string,signature,null,int,method,parameters,0,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,dann,0,int,mpanns,0,int,impanns,0,int,first,attribute,u,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,code,equals,attr,name,if,context,flags,0,code,u,8,else,if,exceptions,equals,attr,name,exceptions,new,string,read,unsigned,short,u,8,exception,u,10,for,int,j,0,j,exceptions,length,j,exceptions,j,read,class,exception,c,exception,2,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,context,access,opcodes,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,annotation,default,equals,attr,name,dann,u,8,else,if,synthetic,equals,attr,name,context,access,opcodes,class,writer,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,annotations,runtime,visible,parameter,annotations,equals,attr,name,mpanns,u,8,else,if,annotations,runtime,invisible,parameter,annotations,equals,attr,name,impanns,u,8,else,if,method,parameters,equals,attr,name,method,parameters,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,method,visitor,mv,class,visitor,visit,method,context,access,context,name,context,desc,signature,exceptions,if,mv,null,return,u,if,writer,mv,instanceof,method,writer,method,writer,mw,method,writer,mv,if,mw,cw,cr,this,signature,null,signature,equals,mw,signature,mw,signature,null,boolean,same,exceptions,false,if,exceptions,null,same,exceptions,mw,exception,count,0,else,if,exceptions,length,mw,exception,count,same,exceptions,true,for,int,j,exceptions,length,1,j,0,j,exception,2,if,mw,exceptions,j,read,unsigned,short,exception,same,exceptions,false,break,if,same,exceptions,mw,class,reader,offset,first,attribute,mw,class,reader,length,u,first,attribute,return,u,if,method,parameters,0,for,int,i,b,method,parameters,0x,ff,v,method,parameters,1,i,0,i,v,v,4,mv,visit,parameter,read,utf8,v,c,read,unsigned,short,v,2,if,annotations,dann,0,annotation,visitor,dv,mv,visit,annotation,default,read,annotation,value,dann,c,null,dv,if,dv,null,dv,visit,end,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,if,annotations,mpanns,0,read,parameter,annotations,mv,context,mpanns,true,if,annotations,impanns,0,read,parameter,annotations,mv,context,impanns,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,if,code,0,mv,visit,code,read,code,mv,context,code,mv,visit,end,return,u
ClassReader -> private int readMethod(final ClassVisitor classVisitor,             final Context context, int u);1416998550;Reads a method and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the method._@param context_information about the class being parsed._@param u_the start offset of the method in the class file._@return the offset of the first byte following the method in the class.;private int readMethod(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        context.access = readUnsignedShort(u)__        context.name = readUTF8(u + 2, c)__        context.desc = readUTF8(u + 4, c)__        u += 6___        _        int code = 0__        int exception = 0__        String[] exceptions = null__        String signature = null__        int methodParameters = 0__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int dann = 0__        int mpanns = 0__        int impanns = 0__        int firstAttribute = u__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("Code".equals(attrName)) {_                if ((context.flags & SKIP_CODE) == 0) {_                    code = u + 8__                }_            } else if ("Exceptions".equals(attrName)) {_                exceptions = new String[readUnsignedShort(u + 8)]__                exception = u + 10__                for (int j = 0_ j < exceptions.length_ ++j) {_                    exceptions[j] = readClass(exception, c)__                    exception += 2__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                context.access |= Opcodes.ACC_DEPRECATED__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {_                dann = u + 8__            } else if ("Synthetic".equals(attrName)) {_                context.access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleParameterAnnotations".equals(attrName)) {_                mpanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {_                impanns = u + 8__            } else if ("MethodParameters".equals(attrName)) {_                methodParameters = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        MethodVisitor mv = classVisitor.visitMethod(context.access,_                context.name, context.desc, signature, exceptions)__        if (mv == null) {_            return u__        }__        _        if (WRITER && mv instanceof MethodWriter) {_            MethodWriter mw = (MethodWriter) mv__            if (mw.cw.cr == this &&_					(signature != null ? signature.equals(mw.signature) : mw.signature == null)) {_                boolean sameExceptions = false__                if (exceptions == null) {_                    sameExceptions = mw.exceptionCount == 0__                } else if (exceptions.length == mw.exceptionCount) {_                    sameExceptions = true__                    for (int j = exceptions.length - 1_ j >= 0_ --j) {_                        exception -= 2__                        if (mw.exceptions[j] != readUnsignedShort(exception)) {_                            sameExceptions = false__                            break__                        }_                    }_                }_                if (sameExceptions) {_                    _                    mw.classReaderOffset = firstAttribute__                    mw.classReaderLength = u - firstAttribute__                    return u__                }_            }_        }__        _        if (methodParameters != 0) {_            for (int i = b[methodParameters] & 0xFF, v = methodParameters + 1_ i > 0_ --i, v = v + 4) {_                mv.visitParameter(readUTF8(v, c), readUnsignedShort(v + 2))__            }_        }__        _        if (ANNOTATIONS && dann != 0) {_            AnnotationVisitor dv = mv.visitAnnotationDefault()__            readAnnotationValue(dann, c, null, dv)__            if (dv != null) {_                dv.visitEnd()__            }_        }_        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && mpanns != 0) {_            readParameterAnnotations(mv, context, mpanns, true)__        }_        if (ANNOTATIONS && impanns != 0) {_            readParameterAnnotations(mv, context, impanns, false)__        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        if (code != 0) {_            mv.visitCode()__            readCode(mv, context, code)__        }__        _        mv.visitEnd()___        return u__    };reads,a,method,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,method,in,the,class,file,return,the,offset,of,the,first,byte,following,the,method,in,the,class;private,int,read,method,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,context,access,read,unsigned,short,u,context,name,read,utf8,u,2,c,context,desc,read,utf8,u,4,c,u,6,int,code,0,int,exception,0,string,exceptions,null,string,signature,null,int,method,parameters,0,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,dann,0,int,mpanns,0,int,impanns,0,int,first,attribute,u,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,code,equals,attr,name,if,context,flags,0,code,u,8,else,if,exceptions,equals,attr,name,exceptions,new,string,read,unsigned,short,u,8,exception,u,10,for,int,j,0,j,exceptions,length,j,exceptions,j,read,class,exception,c,exception,2,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,context,access,opcodes,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,annotation,default,equals,attr,name,dann,u,8,else,if,synthetic,equals,attr,name,context,access,opcodes,class,writer,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,annotations,runtime,visible,parameter,annotations,equals,attr,name,mpanns,u,8,else,if,annotations,runtime,invisible,parameter,annotations,equals,attr,name,impanns,u,8,else,if,method,parameters,equals,attr,name,method,parameters,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,method,visitor,mv,class,visitor,visit,method,context,access,context,name,context,desc,signature,exceptions,if,mv,null,return,u,if,writer,mv,instanceof,method,writer,method,writer,mw,method,writer,mv,if,mw,cw,cr,this,signature,null,signature,equals,mw,signature,mw,signature,null,boolean,same,exceptions,false,if,exceptions,null,same,exceptions,mw,exception,count,0,else,if,exceptions,length,mw,exception,count,same,exceptions,true,for,int,j,exceptions,length,1,j,0,j,exception,2,if,mw,exceptions,j,read,unsigned,short,exception,same,exceptions,false,break,if,same,exceptions,mw,class,reader,offset,first,attribute,mw,class,reader,length,u,first,attribute,return,u,if,method,parameters,0,for,int,i,b,method,parameters,0x,ff,v,method,parameters,1,i,0,i,v,v,4,mv,visit,parameter,read,utf8,v,c,read,unsigned,short,v,2,if,annotations,dann,0,annotation,visitor,dv,mv,visit,annotation,default,read,annotation,value,dann,c,null,dv,if,dv,null,dv,visit,end,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,if,annotations,mpanns,0,read,parameter,annotations,mv,context,mpanns,true,if,annotations,impanns,0,read,parameter,annotations,mv,context,impanns,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,if,code,0,mv,visit,code,read,code,mv,context,code,mv,visit,end,return,u
ClassReader -> private int readMethod(final ClassVisitor classVisitor,             final Context context, int u);1457705343;Reads a method and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the method._@param context_information about the class being parsed._@param u_the start offset of the method in the class file._@return the offset of the first byte following the method in the class.;private int readMethod(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        context.access = readUnsignedShort(u)__        context.name = readUTF8(u + 2, c)__        context.desc = readUTF8(u + 4, c)__        u += 6___        _        int code = 0__        int exception = 0__        String[] exceptions = null__        String signature = null__        int methodParameters = 0__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int dann = 0__        int mpanns = 0__        int impanns = 0__        int firstAttribute = u__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("Code".equals(attrName)) {_                if ((context.flags & SKIP_CODE) == 0) {_                    code = u + 8__                }_            } else if ("Exceptions".equals(attrName)) {_                exceptions = new String[readUnsignedShort(u + 8)]__                exception = u + 10__                for (int j = 0_ j < exceptions.length_ ++j) {_                    exceptions[j] = readClass(exception, c)__                    exception += 2__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                context.access |= Opcodes.ACC_DEPRECATED__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {_                dann = u + 8__            } else if ("Synthetic".equals(attrName)) {_                context.access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleParameterAnnotations".equals(attrName)) {_                mpanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {_                impanns = u + 8__            } else if ("MethodParameters".equals(attrName)) {_                methodParameters = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        MethodVisitor mv = classVisitor.visitMethod(context.access,_                context.name, context.desc, signature, exceptions)__        if (mv == null) {_            return u__        }__        _        if (WRITER && mv instanceof MethodWriter) {_            MethodWriter mw = (MethodWriter) mv__            if (mw.cw.cr == this &&_					(signature != null ? signature.equals(mw.signature) : mw.signature == null)) {_                boolean sameExceptions = false__                if (exceptions == null) {_                    sameExceptions = mw.exceptionCount == 0__                } else if (exceptions.length == mw.exceptionCount) {_                    sameExceptions = true__                    for (int j = exceptions.length - 1_ j >= 0_ --j) {_                        exception -= 2__                        if (mw.exceptions[j] != readUnsignedShort(exception)) {_                            sameExceptions = false__                            break__                        }_                    }_                }_                if (sameExceptions) {_                    _                    mw.classReaderOffset = firstAttribute__                    mw.classReaderLength = u - firstAttribute__                    return u__                }_            }_        }__        _        if (methodParameters != 0) {_            for (int i = b[methodParameters] & 0xFF, v = methodParameters + 1_ i > 0_ --i, v = v + 4) {_                mv.visitParameter(readUTF8(v, c), readUnsignedShort(v + 2))__            }_        }__        _        if (ANNOTATIONS && dann != 0) {_            AnnotationVisitor dv = mv.visitAnnotationDefault()__            readAnnotationValue(dann, c, null, dv)__            if (dv != null) {_                dv.visitEnd()__            }_        }_        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && mpanns != 0) {_            readParameterAnnotations(mv, context, mpanns, true)__        }_        if (ANNOTATIONS && impanns != 0) {_            readParameterAnnotations(mv, context, impanns, false)__        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        if (code != 0) {_            mv.visitCode()__            readCode(mv, context, code)__        }__        _        mv.visitEnd()___        return u__    };reads,a,method,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,method,in,the,class,file,return,the,offset,of,the,first,byte,following,the,method,in,the,class;private,int,read,method,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,context,access,read,unsigned,short,u,context,name,read,utf8,u,2,c,context,desc,read,utf8,u,4,c,u,6,int,code,0,int,exception,0,string,exceptions,null,string,signature,null,int,method,parameters,0,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,dann,0,int,mpanns,0,int,impanns,0,int,first,attribute,u,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,code,equals,attr,name,if,context,flags,0,code,u,8,else,if,exceptions,equals,attr,name,exceptions,new,string,read,unsigned,short,u,8,exception,u,10,for,int,j,0,j,exceptions,length,j,exceptions,j,read,class,exception,c,exception,2,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,context,access,opcodes,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,annotation,default,equals,attr,name,dann,u,8,else,if,synthetic,equals,attr,name,context,access,opcodes,class,writer,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,annotations,runtime,visible,parameter,annotations,equals,attr,name,mpanns,u,8,else,if,annotations,runtime,invisible,parameter,annotations,equals,attr,name,impanns,u,8,else,if,method,parameters,equals,attr,name,method,parameters,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,method,visitor,mv,class,visitor,visit,method,context,access,context,name,context,desc,signature,exceptions,if,mv,null,return,u,if,writer,mv,instanceof,method,writer,method,writer,mw,method,writer,mv,if,mw,cw,cr,this,signature,null,signature,equals,mw,signature,mw,signature,null,boolean,same,exceptions,false,if,exceptions,null,same,exceptions,mw,exception,count,0,else,if,exceptions,length,mw,exception,count,same,exceptions,true,for,int,j,exceptions,length,1,j,0,j,exception,2,if,mw,exceptions,j,read,unsigned,short,exception,same,exceptions,false,break,if,same,exceptions,mw,class,reader,offset,first,attribute,mw,class,reader,length,u,first,attribute,return,u,if,method,parameters,0,for,int,i,b,method,parameters,0x,ff,v,method,parameters,1,i,0,i,v,v,4,mv,visit,parameter,read,utf8,v,c,read,unsigned,short,v,2,if,annotations,dann,0,annotation,visitor,dv,mv,visit,annotation,default,read,annotation,value,dann,c,null,dv,if,dv,null,dv,visit,end,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,if,annotations,mpanns,0,read,parameter,annotations,mv,context,mpanns,true,if,annotations,impanns,0,read,parameter,annotations,mv,context,impanns,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,if,code,0,mv,visit,code,read,code,mv,context,code,mv,visit,end,return,u
ClassReader -> private int readMethod(final ClassVisitor classVisitor,             final Context context, int u);1459258703;Reads a method and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the method._@param context_information about the class being parsed._@param u_the start offset of the method in the class file._@return the offset of the first byte following the method in the class.;private int readMethod(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        context.access = readUnsignedShort(u)__        context.name = readUTF8(u + 2, c)__        context.desc = readUTF8(u + 4, c)__        u += 6___        _        int code = 0__        int exception = 0__        String[] exceptions = null__        String signature = null__        int methodParameters = 0__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int dann = 0__        int mpanns = 0__        int impanns = 0__        int firstAttribute = u__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("Code".equals(attrName)) {_                if ((context.flags & SKIP_CODE) == 0) {_                    code = u + 8__                }_            } else if ("Exceptions".equals(attrName)) {_                exceptions = new String[readUnsignedShort(u + 8)]__                exception = u + 10__                for (int j = 0_ j < exceptions.length_ ++j) {_                    exceptions[j] = readClass(exception, c)__                    exception += 2__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                context.access |= Opcodes.ACC_DEPRECATED__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {_                dann = u + 8__            } else if ("Synthetic".equals(attrName)) {_                context.access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleParameterAnnotations".equals(attrName)) {_                mpanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {_                impanns = u + 8__            } else if ("MethodParameters".equals(attrName)) {_                methodParameters = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        MethodVisitor mv = classVisitor.visitMethod(context.access,_                context.name, context.desc, signature, exceptions)__        if (mv == null) {_            return u__        }__        _        if (WRITER && mv instanceof MethodWriter) {_            MethodWriter mw = (MethodWriter) mv__            if (mw.cw.cr == this &&_					(signature != null ? signature.equals(mw.signature) : mw.signature == null)) {_                boolean sameExceptions = false__                if (exceptions == null) {_                    sameExceptions = mw.exceptionCount == 0__                } else if (exceptions.length == mw.exceptionCount) {_                    sameExceptions = true__                    for (int j = exceptions.length - 1_ j >= 0_ --j) {_                        exception -= 2__                        if (mw.exceptions[j] != readUnsignedShort(exception)) {_                            sameExceptions = false__                            break__                        }_                    }_                }_                if (sameExceptions) {_                    _                    mw.classReaderOffset = firstAttribute__                    mw.classReaderLength = u - firstAttribute__                    return u__                }_            }_        }__        _        if (methodParameters != 0) {_            for (int i = b[methodParameters] & 0xFF, v = methodParameters + 1_ i > 0_ --i, v = v + 4) {_                mv.visitParameter(readUTF8(v, c), readUnsignedShort(v + 2))__            }_        }__        _        if (ANNOTATIONS && dann != 0) {_            AnnotationVisitor dv = mv.visitAnnotationDefault()__            readAnnotationValue(dann, c, null, dv)__            if (dv != null) {_                dv.visitEnd()__            }_        }_        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && mpanns != 0) {_            readParameterAnnotations(mv, context, mpanns, true)__        }_        if (ANNOTATIONS && impanns != 0) {_            readParameterAnnotations(mv, context, impanns, false)__        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        if (code != 0) {_            mv.visitCode()__            readCode(mv, context, code)__        }__        _        mv.visitEnd()___        return u__    };reads,a,method,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,method,in,the,class,file,return,the,offset,of,the,first,byte,following,the,method,in,the,class;private,int,read,method,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,context,access,read,unsigned,short,u,context,name,read,utf8,u,2,c,context,desc,read,utf8,u,4,c,u,6,int,code,0,int,exception,0,string,exceptions,null,string,signature,null,int,method,parameters,0,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,dann,0,int,mpanns,0,int,impanns,0,int,first,attribute,u,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,code,equals,attr,name,if,context,flags,0,code,u,8,else,if,exceptions,equals,attr,name,exceptions,new,string,read,unsigned,short,u,8,exception,u,10,for,int,j,0,j,exceptions,length,j,exceptions,j,read,class,exception,c,exception,2,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,context,access,opcodes,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,annotation,default,equals,attr,name,dann,u,8,else,if,synthetic,equals,attr,name,context,access,opcodes,class,writer,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,annotations,runtime,visible,parameter,annotations,equals,attr,name,mpanns,u,8,else,if,annotations,runtime,invisible,parameter,annotations,equals,attr,name,impanns,u,8,else,if,method,parameters,equals,attr,name,method,parameters,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,method,visitor,mv,class,visitor,visit,method,context,access,context,name,context,desc,signature,exceptions,if,mv,null,return,u,if,writer,mv,instanceof,method,writer,method,writer,mw,method,writer,mv,if,mw,cw,cr,this,signature,null,signature,equals,mw,signature,mw,signature,null,boolean,same,exceptions,false,if,exceptions,null,same,exceptions,mw,exception,count,0,else,if,exceptions,length,mw,exception,count,same,exceptions,true,for,int,j,exceptions,length,1,j,0,j,exception,2,if,mw,exceptions,j,read,unsigned,short,exception,same,exceptions,false,break,if,same,exceptions,mw,class,reader,offset,first,attribute,mw,class,reader,length,u,first,attribute,return,u,if,method,parameters,0,for,int,i,b,method,parameters,0x,ff,v,method,parameters,1,i,0,i,v,v,4,mv,visit,parameter,read,utf8,v,c,read,unsigned,short,v,2,if,annotations,dann,0,annotation,visitor,dv,mv,visit,annotation,default,read,annotation,value,dann,c,null,dv,if,dv,null,dv,visit,end,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,if,annotations,mpanns,0,read,parameter,annotations,mv,context,mpanns,true,if,annotations,impanns,0,read,parameter,annotations,mv,context,impanns,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,if,code,0,mv,visit,code,read,code,mv,context,code,mv,visit,end,return,u
ClassReader -> private int readMethod(final ClassVisitor classVisitor,             final Context context, int u);1478623137;Reads a method and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the method._@param context_information about the class being parsed._@param u_the start offset of the method in the class file._@return the offset of the first byte following the method in the class.;private int readMethod(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        context.access = readUnsignedShort(u)__        context.name = readUTF8(u + 2, c)__        context.desc = readUTF8(u + 4, c)__        u += 6___        _        int code = 0__        int exception = 0__        String[] exceptions = null__        String signature = null__        int methodParameters = 0__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int dann = 0__        int mpanns = 0__        int impanns = 0__        int firstAttribute = u__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("Code".equals(attrName)) {_                if ((context.flags & SKIP_CODE) == 0) {_                    code = u + 8__                }_            } else if ("Exceptions".equals(attrName)) {_                exceptions = new String[readUnsignedShort(u + 8)]__                exception = u + 10__                for (int j = 0_ j < exceptions.length_ ++j) {_                    exceptions[j] = readClass(exception, c)__                    exception += 2__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                context.access |= Opcodes.ACC_DEPRECATED__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {_                dann = u + 8__            } else if ("Synthetic".equals(attrName)) {_                context.access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleParameterAnnotations".equals(attrName)) {_                mpanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {_                impanns = u + 8__            } else if ("MethodParameters".equals(attrName)) {_                methodParameters = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        MethodVisitor mv = classVisitor.visitMethod(context.access,_                context.name, context.desc, signature, exceptions)__        if (mv == null) {_            return u__        }__        _        if (WRITER && mv instanceof MethodWriter) {_            MethodWriter mw = (MethodWriter) mv__            if (mw.cw.cr == this &&_					(signature != null ? signature.equals(mw.signature) : mw.signature == null)) {_                boolean sameExceptions = false__                if (exceptions == null) {_                    sameExceptions = mw.exceptionCount == 0__                } else if (exceptions.length == mw.exceptionCount) {_                    sameExceptions = true__                    for (int j = exceptions.length - 1_ j >= 0_ --j) {_                        exception -= 2__                        if (mw.exceptions[j] != readUnsignedShort(exception)) {_                            sameExceptions = false__                            break__                        }_                    }_                }_                if (sameExceptions) {_                    _                    mw.classReaderOffset = firstAttribute__                    mw.classReaderLength = u - firstAttribute__                    return u__                }_            }_        }__        _        if (methodParameters != 0) {_            for (int i = b[methodParameters] & 0xFF, v = methodParameters + 1_ i > 0_ --i, v = v + 4) {_                mv.visitParameter(readUTF8(v, c), readUnsignedShort(v + 2))__            }_        }__        _        if (ANNOTATIONS && dann != 0) {_            AnnotationVisitor dv = mv.visitAnnotationDefault()__            readAnnotationValue(dann, c, null, dv)__            if (dv != null) {_                dv.visitEnd()__            }_        }_        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && mpanns != 0) {_            readParameterAnnotations(mv, context, mpanns, true)__        }_        if (ANNOTATIONS && impanns != 0) {_            readParameterAnnotations(mv, context, impanns, false)__        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        if (code != 0) {_            mv.visitCode()__            readCode(mv, context, code)__        }__        _        mv.visitEnd()___        return u__    };reads,a,method,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,method,in,the,class,file,return,the,offset,of,the,first,byte,following,the,method,in,the,class;private,int,read,method,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,context,access,read,unsigned,short,u,context,name,read,utf8,u,2,c,context,desc,read,utf8,u,4,c,u,6,int,code,0,int,exception,0,string,exceptions,null,string,signature,null,int,method,parameters,0,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,dann,0,int,mpanns,0,int,impanns,0,int,first,attribute,u,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,code,equals,attr,name,if,context,flags,0,code,u,8,else,if,exceptions,equals,attr,name,exceptions,new,string,read,unsigned,short,u,8,exception,u,10,for,int,j,0,j,exceptions,length,j,exceptions,j,read,class,exception,c,exception,2,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,context,access,opcodes,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,annotation,default,equals,attr,name,dann,u,8,else,if,synthetic,equals,attr,name,context,access,opcodes,class,writer,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,annotations,runtime,visible,parameter,annotations,equals,attr,name,mpanns,u,8,else,if,annotations,runtime,invisible,parameter,annotations,equals,attr,name,impanns,u,8,else,if,method,parameters,equals,attr,name,method,parameters,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,method,visitor,mv,class,visitor,visit,method,context,access,context,name,context,desc,signature,exceptions,if,mv,null,return,u,if,writer,mv,instanceof,method,writer,method,writer,mw,method,writer,mv,if,mw,cw,cr,this,signature,null,signature,equals,mw,signature,mw,signature,null,boolean,same,exceptions,false,if,exceptions,null,same,exceptions,mw,exception,count,0,else,if,exceptions,length,mw,exception,count,same,exceptions,true,for,int,j,exceptions,length,1,j,0,j,exception,2,if,mw,exceptions,j,read,unsigned,short,exception,same,exceptions,false,break,if,same,exceptions,mw,class,reader,offset,first,attribute,mw,class,reader,length,u,first,attribute,return,u,if,method,parameters,0,for,int,i,b,method,parameters,0x,ff,v,method,parameters,1,i,0,i,v,v,4,mv,visit,parameter,read,utf8,v,c,read,unsigned,short,v,2,if,annotations,dann,0,annotation,visitor,dv,mv,visit,annotation,default,read,annotation,value,dann,c,null,dv,if,dv,null,dv,visit,end,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,if,annotations,mpanns,0,read,parameter,annotations,mv,context,mpanns,true,if,annotations,impanns,0,read,parameter,annotations,mv,context,impanns,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,if,code,0,mv,visit,code,read,code,mv,context,code,mv,visit,end,return,u
ClassReader -> private int readMethod(final ClassVisitor classVisitor,             final Context context, int u);1483093254;Reads a method and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the method._@param context_information about the class being parsed._@param u_the start offset of the method in the class file._@return the offset of the first byte following the method in the class.;private int readMethod(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        context.access = readUnsignedShort(u)__        context.name = readUTF8(u + 2, c)__        context.desc = readUTF8(u + 4, c)__        u += 6___        _        int code = 0__        int exception = 0__        String[] exceptions = null__        String signature = null__        int methodParameters = 0__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int dann = 0__        int mpanns = 0__        int impanns = 0__        int firstAttribute = u__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("Code".equals(attrName)) {_                if ((context.flags & SKIP_CODE) == 0) {_                    code = u + 8__                }_            } else if ("Exceptions".equals(attrName)) {_                exceptions = new String[readUnsignedShort(u + 8)]__                exception = u + 10__                for (int j = 0_ j < exceptions.length_ ++j) {_                    exceptions[j] = readClass(exception, c)__                    exception += 2__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                context.access |= Opcodes.ACC_DEPRECATED__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {_                dann = u + 8__            } else if ("Synthetic".equals(attrName)) {_                context.access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleParameterAnnotations".equals(attrName)) {_                mpanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {_                impanns = u + 8__            } else if ("MethodParameters".equals(attrName)) {_                methodParameters = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        MethodVisitor mv = classVisitor.visitMethod(context.access,_                context.name, context.desc, signature, exceptions)__        if (mv == null) {_            return u__        }__        _        if (WRITER && mv instanceof MethodWriter) {_            MethodWriter mw = (MethodWriter) mv__            if (mw.cw.cr == this &&_					(signature != null ? signature.equals(mw.signature) : mw.signature == null)) {_                boolean sameExceptions = false__                if (exceptions == null) {_                    sameExceptions = mw.exceptionCount == 0__                } else if (exceptions.length == mw.exceptionCount) {_                    sameExceptions = true__                    for (int j = exceptions.length - 1_ j >= 0_ --j) {_                        exception -= 2__                        if (mw.exceptions[j] != readUnsignedShort(exception)) {_                            sameExceptions = false__                            break__                        }_                    }_                }_                if (sameExceptions) {_                    _                    mw.classReaderOffset = firstAttribute__                    mw.classReaderLength = u - firstAttribute__                    return u__                }_            }_        }__        _        if (methodParameters != 0) {_            for (int i = b[methodParameters] & 0xFF, v = methodParameters + 1_ i > 0_ --i, v = v + 4) {_                mv.visitParameter(readUTF8(v, c), readUnsignedShort(v + 2))__            }_        }__        _        if (ANNOTATIONS && dann != 0) {_            AnnotationVisitor dv = mv.visitAnnotationDefault()__            readAnnotationValue(dann, c, null, dv)__            if (dv != null) {_                dv.visitEnd()__            }_        }_        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && mpanns != 0) {_            readParameterAnnotations(mv, context, mpanns, true)__        }_        if (ANNOTATIONS && impanns != 0) {_            readParameterAnnotations(mv, context, impanns, false)__        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        if (code != 0) {_            mv.visitCode()__            readCode(mv, context, code)__        }__        _        mv.visitEnd()___        return u__    };reads,a,method,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,method,in,the,class,file,return,the,offset,of,the,first,byte,following,the,method,in,the,class;private,int,read,method,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,context,access,read,unsigned,short,u,context,name,read,utf8,u,2,c,context,desc,read,utf8,u,4,c,u,6,int,code,0,int,exception,0,string,exceptions,null,string,signature,null,int,method,parameters,0,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,dann,0,int,mpanns,0,int,impanns,0,int,first,attribute,u,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,code,equals,attr,name,if,context,flags,0,code,u,8,else,if,exceptions,equals,attr,name,exceptions,new,string,read,unsigned,short,u,8,exception,u,10,for,int,j,0,j,exceptions,length,j,exceptions,j,read,class,exception,c,exception,2,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,context,access,opcodes,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,annotation,default,equals,attr,name,dann,u,8,else,if,synthetic,equals,attr,name,context,access,opcodes,class,writer,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,annotations,runtime,visible,parameter,annotations,equals,attr,name,mpanns,u,8,else,if,annotations,runtime,invisible,parameter,annotations,equals,attr,name,impanns,u,8,else,if,method,parameters,equals,attr,name,method,parameters,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,method,visitor,mv,class,visitor,visit,method,context,access,context,name,context,desc,signature,exceptions,if,mv,null,return,u,if,writer,mv,instanceof,method,writer,method,writer,mw,method,writer,mv,if,mw,cw,cr,this,signature,null,signature,equals,mw,signature,mw,signature,null,boolean,same,exceptions,false,if,exceptions,null,same,exceptions,mw,exception,count,0,else,if,exceptions,length,mw,exception,count,same,exceptions,true,for,int,j,exceptions,length,1,j,0,j,exception,2,if,mw,exceptions,j,read,unsigned,short,exception,same,exceptions,false,break,if,same,exceptions,mw,class,reader,offset,first,attribute,mw,class,reader,length,u,first,attribute,return,u,if,method,parameters,0,for,int,i,b,method,parameters,0x,ff,v,method,parameters,1,i,0,i,v,v,4,mv,visit,parameter,read,utf8,v,c,read,unsigned,short,v,2,if,annotations,dann,0,annotation,visitor,dv,mv,visit,annotation,default,read,annotation,value,dann,c,null,dv,if,dv,null,dv,visit,end,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,if,annotations,mpanns,0,read,parameter,annotations,mv,context,mpanns,true,if,annotations,impanns,0,read,parameter,annotations,mv,context,impanns,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,if,code,0,mv,visit,code,read,code,mv,context,code,mv,visit,end,return,u
ClassReader -> private int readMethod(final ClassVisitor classVisitor,             final Context context, int u);1505821772;Reads a method and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the method._@param context_information about the class being parsed._@param u_the start offset of the method in the class file._@return the offset of the first byte following the method in the class.;private int readMethod(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        context.access = readUnsignedShort(u)__        context.name = readUTF8(u + 2, c)__        context.desc = readUTF8(u + 4, c)__        u += 6___        _        int code = 0__        int exception = 0__        String[] exceptions = null__        String signature = null__        int methodParameters = 0__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int dann = 0__        int mpanns = 0__        int impanns = 0__        int firstAttribute = u__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("Code".equals(attrName)) {_                if ((context.flags & SKIP_CODE) == 0) {_                    code = u + 8__                }_            } else if ("Exceptions".equals(attrName)) {_                exceptions = new String[readUnsignedShort(u + 8)]__                exception = u + 10__                for (int j = 0_ j < exceptions.length_ ++j) {_                    exceptions[j] = readClass(exception, c)__                    exception += 2__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                context.access |= Opcodes.ACC_DEPRECATED__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {_                dann = u + 8__            } else if ("Synthetic".equals(attrName)) {_                context.access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleParameterAnnotations".equals(attrName)) {_                mpanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {_                impanns = u + 8__            } else if ("MethodParameters".equals(attrName)) {_                methodParameters = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        MethodVisitor mv = classVisitor.visitMethod(context.access,_                context.name, context.desc, signature, exceptions)__        if (mv == null) {_            return u__        }__        _        if (WRITER && mv instanceof MethodWriter) {_            MethodWriter mw = (MethodWriter) mv__            if (mw.cw.cr == this &&_					(signature != null ? signature.equals(mw.signature) : mw.signature == null)) {_                boolean sameExceptions = false__                if (exceptions == null) {_                    sameExceptions = mw.exceptionCount == 0__                } else if (exceptions.length == mw.exceptionCount) {_                    sameExceptions = true__                    for (int j = exceptions.length - 1_ j >= 0_ --j) {_                        exception -= 2__                        if (mw.exceptions[j] != readUnsignedShort(exception)) {_                            sameExceptions = false__                            break__                        }_                    }_                }_                if (sameExceptions) {_                    _                    mw.classReaderOffset = firstAttribute__                    mw.classReaderLength = u - firstAttribute__                    return u__                }_            }_        }__        _        if (methodParameters != 0) {_            for (int i = b[methodParameters] & 0xFF, v = methodParameters + 1_ i > 0_ --i, v = v + 4) {_                mv.visitParameter(readUTF8(v, c), readUnsignedShort(v + 2))__            }_        }__        _        if (ANNOTATIONS && dann != 0) {_            AnnotationVisitor dv = mv.visitAnnotationDefault()__            readAnnotationValue(dann, c, null, dv)__            if (dv != null) {_                dv.visitEnd()__            }_        }_        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        mv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        mv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && mpanns != 0) {_            readParameterAnnotations(mv, context, mpanns, true)__        }_        if (ANNOTATIONS && impanns != 0) {_            readParameterAnnotations(mv, context, impanns, false)__        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        if (code != 0) {_            mv.visitCode()__            readCode(mv, context, code)__        }__        _        mv.visitEnd()___        return u__    };reads,a,method,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,method,in,the,class,file,return,the,offset,of,the,first,byte,following,the,method,in,the,class;private,int,read,method,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,context,access,read,unsigned,short,u,context,name,read,utf8,u,2,c,context,desc,read,utf8,u,4,c,u,6,int,code,0,int,exception,0,string,exceptions,null,string,signature,null,int,method,parameters,0,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,dann,0,int,mpanns,0,int,impanns,0,int,first,attribute,u,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,code,equals,attr,name,if,context,flags,0,code,u,8,else,if,exceptions,equals,attr,name,exceptions,new,string,read,unsigned,short,u,8,exception,u,10,for,int,j,0,j,exceptions,length,j,exceptions,j,read,class,exception,c,exception,2,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,context,access,opcodes,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,annotation,default,equals,attr,name,dann,u,8,else,if,synthetic,equals,attr,name,context,access,opcodes,class,writer,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,annotations,runtime,visible,parameter,annotations,equals,attr,name,mpanns,u,8,else,if,annotations,runtime,invisible,parameter,annotations,equals,attr,name,impanns,u,8,else,if,method,parameters,equals,attr,name,method,parameters,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,method,visitor,mv,class,visitor,visit,method,context,access,context,name,context,desc,signature,exceptions,if,mv,null,return,u,if,writer,mv,instanceof,method,writer,method,writer,mw,method,writer,mv,if,mw,cw,cr,this,signature,null,signature,equals,mw,signature,mw,signature,null,boolean,same,exceptions,false,if,exceptions,null,same,exceptions,mw,exception,count,0,else,if,exceptions,length,mw,exception,count,same,exceptions,true,for,int,j,exceptions,length,1,j,0,j,exception,2,if,mw,exceptions,j,read,unsigned,short,exception,same,exceptions,false,break,if,same,exceptions,mw,class,reader,offset,first,attribute,mw,class,reader,length,u,first,attribute,return,u,if,method,parameters,0,for,int,i,b,method,parameters,0x,ff,v,method,parameters,1,i,0,i,v,v,4,mv,visit,parameter,read,utf8,v,c,read,unsigned,short,v,2,if,annotations,dann,0,annotation,visitor,dv,mv,visit,annotation,default,read,annotation,value,dann,c,null,dv,if,dv,null,dv,visit,end,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,mv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,mv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,if,annotations,mpanns,0,read,parameter,annotations,mv,context,mpanns,true,if,annotations,impanns,0,read,parameter,annotations,mv,context,impanns,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,if,code,0,mv,visit,code,read,code,mv,context,code,mv,visit,end,return,u
ClassReader -> public Object readConst(final int item, final char[] buf);1366718246;Reads a numeric or string constant pool item in {@link #b b}. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param item_the index of a constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double},_{@link String}, {@link Type} or {@link Handle} corresponding to_the given constant pool item.;public Object readConst(final int item, final char[] buf) {_        int index = items[item]__        switch (b[index - 1]) {_        case ClassWriter.INT:_            return new Integer(readInt(index))__        case ClassWriter.FLOAT:_            return new Float(Float.intBitsToFloat(readInt(index)))__        case ClassWriter.LONG:_            return new Long(readLong(index))__        case ClassWriter.DOUBLE:_            return new Double(Double.longBitsToDouble(readLong(index)))__        case ClassWriter.CLASS:_            return Type.getObjectType(readUTF8(index, buf))__        case ClassWriter.STR:_            return readUTF8(index, buf)__        case ClassWriter.MTYPE:_            return Type.getMethodType(readUTF8(index, buf))__        default: _            int tag = readByte(index)__            int[] items = this.items__            int cpIndex = items[readUnsignedShort(index + 1)]__            String owner = readClass(cpIndex, buf)__            cpIndex = items[readUnsignedShort(cpIndex + 2)]__            String name = readUTF8(cpIndex, buf)__            String desc = readUTF8(cpIndex + 2, buf)__            return new Handle(tag, owner, name, desc)__        }_    };reads,a,numeric,or,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,of,a,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,corresponding,to,the,given,constant,pool,item;public,object,read,const,final,int,item,final,char,buf,int,index,items,item,switch,b,index,1,case,class,writer,int,return,new,integer,read,int,index,case,class,writer,float,return,new,float,float,int,bits,to,float,read,int,index,case,class,writer,long,return,new,long,read,long,index,case,class,writer,double,return,new,double,double,long,bits,to,double,read,long,index,case,class,writer,class,return,type,get,object,type,read,utf8,index,buf,case,class,writer,str,return,read,utf8,index,buf,case,class,writer,mtype,return,type,get,method,type,read,utf8,index,buf,default,int,tag,read,byte,index,int,items,this,items,int,cp,index,items,read,unsigned,short,index,1,string,owner,read,class,cp,index,buf,cp,index,items,read,unsigned,short,cp,index,2,string,name,read,utf8,cp,index,buf,string,desc,read,utf8,cp,index,2,buf,return,new,handle,tag,owner,name,desc
ClassReader -> public Object readConst(final int item, final char[] buf);1395273982;Reads a numeric or string constant pool item in {@link #b b}. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param item_the index of a constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double},_{@link String}, {@link Type} or {@link Handle} corresponding to_the given constant pool item.;public Object readConst(final int item, final char[] buf) {_        int index = items[item]__        switch (b[index - 1]) {_        case ClassWriter.INT:_            return new Integer(readInt(index))__        case ClassWriter.FLOAT:_            return new Float(Float.intBitsToFloat(readInt(index)))__        case ClassWriter.LONG:_            return new Long(readLong(index))__        case ClassWriter.DOUBLE:_            return new Double(Double.longBitsToDouble(readLong(index)))__        case ClassWriter.CLASS:_            return Type.getObjectType(readUTF8(index, buf))__        case ClassWriter.STR:_            return readUTF8(index, buf)__        case ClassWriter.MTYPE:_            return Type.getMethodType(readUTF8(index, buf))__        default: _            int tag = readByte(index)__            int[] items = this.items__            int cpIndex = items[readUnsignedShort(index + 1)]__            String owner = readClass(cpIndex, buf)__            cpIndex = items[readUnsignedShort(cpIndex + 2)]__            String name = readUTF8(cpIndex, buf)__            String desc = readUTF8(cpIndex + 2, buf)__            return new Handle(tag, owner, name, desc)__        }_    };reads,a,numeric,or,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,of,a,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,corresponding,to,the,given,constant,pool,item;public,object,read,const,final,int,item,final,char,buf,int,index,items,item,switch,b,index,1,case,class,writer,int,return,new,integer,read,int,index,case,class,writer,float,return,new,float,float,int,bits,to,float,read,int,index,case,class,writer,long,return,new,long,read,long,index,case,class,writer,double,return,new,double,double,long,bits,to,double,read,long,index,case,class,writer,class,return,type,get,object,type,read,utf8,index,buf,case,class,writer,str,return,read,utf8,index,buf,case,class,writer,mtype,return,type,get,method,type,read,utf8,index,buf,default,int,tag,read,byte,index,int,items,this,items,int,cp,index,items,read,unsigned,short,index,1,string,owner,read,class,cp,index,buf,cp,index,items,read,unsigned,short,cp,index,2,string,name,read,utf8,cp,index,buf,string,desc,read,utf8,cp,index,2,buf,return,new,handle,tag,owner,name,desc
ClassReader -> public Object readConst(final int item, final char[] buf);1414067099;Reads a numeric or string constant pool item in {@link #b b}. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param item_the index of a constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double},_{@link String}, {@link Type} or {@link Handle} corresponding to_the given constant pool item.;public Object readConst(final int item, final char[] buf) {_        int index = items[item]__        switch (b[index - 1]) {_        case ClassWriter.INT:_            return readInt(index)__        case ClassWriter.FLOAT:_            return Float.intBitsToFloat(readInt(index))__        case ClassWriter.LONG:_            return readLong(index)__        case ClassWriter.DOUBLE:_            return Double.longBitsToDouble(readLong(index))__        case ClassWriter.CLASS:_            return Type.getObjectType(readUTF8(index, buf))__        case ClassWriter.STR:_            return readUTF8(index, buf)__        case ClassWriter.MTYPE:_            return Type.getMethodType(readUTF8(index, buf))__        default: _            int tag = readByte(index)__            int[] items = this.items__            int cpIndex = items[readUnsignedShort(index + 1)]__            String owner = readClass(cpIndex, buf)__            cpIndex = items[readUnsignedShort(cpIndex + 2)]__            String name = readUTF8(cpIndex, buf)__            String desc = readUTF8(cpIndex + 2, buf)__            return new Handle(tag, owner, name, desc)__        }_    };reads,a,numeric,or,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,of,a,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,corresponding,to,the,given,constant,pool,item;public,object,read,const,final,int,item,final,char,buf,int,index,items,item,switch,b,index,1,case,class,writer,int,return,read,int,index,case,class,writer,float,return,float,int,bits,to,float,read,int,index,case,class,writer,long,return,read,long,index,case,class,writer,double,return,double,long,bits,to,double,read,long,index,case,class,writer,class,return,type,get,object,type,read,utf8,index,buf,case,class,writer,str,return,read,utf8,index,buf,case,class,writer,mtype,return,type,get,method,type,read,utf8,index,buf,default,int,tag,read,byte,index,int,items,this,items,int,cp,index,items,read,unsigned,short,index,1,string,owner,read,class,cp,index,buf,cp,index,items,read,unsigned,short,cp,index,2,string,name,read,utf8,cp,index,buf,string,desc,read,utf8,cp,index,2,buf,return,new,handle,tag,owner,name,desc
ClassReader -> public Object readConst(final int item, final char[] buf);1414499035;Reads a numeric or string constant pool item in {@link #b b}. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param item_the index of a constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double},_{@link String}, {@link Type} or {@link Handle} corresponding to_the given constant pool item.;public Object readConst(final int item, final char[] buf) {_        int index = items[item]__        switch (b[index - 1]) {_        case ClassWriter.INT:_            return readInt(index)__        case ClassWriter.FLOAT:_            return Float.intBitsToFloat(readInt(index))__        case ClassWriter.LONG:_            return readLong(index)__        case ClassWriter.DOUBLE:_            return Double.longBitsToDouble(readLong(index))__        case ClassWriter.CLASS:_            return Type.getObjectType(readUTF8(index, buf))__        case ClassWriter.STR:_            return readUTF8(index, buf)__        case ClassWriter.MTYPE:_            return Type.getMethodType(readUTF8(index, buf))__        default: _            int tag = readByte(index)__            int[] items = this.items__            int cpIndex = items[readUnsignedShort(index + 1)]__            String owner = readClass(cpIndex, buf)__            cpIndex = items[readUnsignedShort(cpIndex + 2)]__            String name = readUTF8(cpIndex, buf)__            String desc = readUTF8(cpIndex + 2, buf)__            return new Handle(tag, owner, name, desc)__        }_    };reads,a,numeric,or,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,of,a,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,corresponding,to,the,given,constant,pool,item;public,object,read,const,final,int,item,final,char,buf,int,index,items,item,switch,b,index,1,case,class,writer,int,return,read,int,index,case,class,writer,float,return,float,int,bits,to,float,read,int,index,case,class,writer,long,return,read,long,index,case,class,writer,double,return,double,long,bits,to,double,read,long,index,case,class,writer,class,return,type,get,object,type,read,utf8,index,buf,case,class,writer,str,return,read,utf8,index,buf,case,class,writer,mtype,return,type,get,method,type,read,utf8,index,buf,default,int,tag,read,byte,index,int,items,this,items,int,cp,index,items,read,unsigned,short,index,1,string,owner,read,class,cp,index,buf,cp,index,items,read,unsigned,short,cp,index,2,string,name,read,utf8,cp,index,buf,string,desc,read,utf8,cp,index,2,buf,return,new,handle,tag,owner,name,desc
ClassReader -> public Object readConst(final int item, final char[] buf);1416998550;Reads a numeric or string constant pool item in {@link #b b}. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param item_the index of a constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double},_{@link String}, {@link Type} or {@link Handle} corresponding to_the given constant pool item.;public Object readConst(final int item, final char[] buf) {_        int index = items[item]__        switch (b[index - 1]) {_        case ClassWriter.INT:_            return readInt(index)__        case ClassWriter.FLOAT:_            return Float.intBitsToFloat(readInt(index))__        case ClassWriter.LONG:_            return readLong(index)__        case ClassWriter.DOUBLE:_            return Double.longBitsToDouble(readLong(index))__        case ClassWriter.CLASS:_            return Type.getObjectType(readUTF8(index, buf))__        case ClassWriter.STR:_            return readUTF8(index, buf)__        case ClassWriter.MTYPE:_            return Type.getMethodType(readUTF8(index, buf))__        default: _            int tag = readByte(index)__            int[] items = this.items__            int cpIndex = items[readUnsignedShort(index + 1)]__            String owner = readClass(cpIndex, buf)__            cpIndex = items[readUnsignedShort(cpIndex + 2)]__            String name = readUTF8(cpIndex, buf)__            String desc = readUTF8(cpIndex + 2, buf)__            return new Handle(tag, owner, name, desc)__        }_    };reads,a,numeric,or,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,of,a,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,corresponding,to,the,given,constant,pool,item;public,object,read,const,final,int,item,final,char,buf,int,index,items,item,switch,b,index,1,case,class,writer,int,return,read,int,index,case,class,writer,float,return,float,int,bits,to,float,read,int,index,case,class,writer,long,return,read,long,index,case,class,writer,double,return,double,long,bits,to,double,read,long,index,case,class,writer,class,return,type,get,object,type,read,utf8,index,buf,case,class,writer,str,return,read,utf8,index,buf,case,class,writer,mtype,return,type,get,method,type,read,utf8,index,buf,default,int,tag,read,byte,index,int,items,this,items,int,cp,index,items,read,unsigned,short,index,1,string,owner,read,class,cp,index,buf,cp,index,items,read,unsigned,short,cp,index,2,string,name,read,utf8,cp,index,buf,string,desc,read,utf8,cp,index,2,buf,return,new,handle,tag,owner,name,desc
ClassReader -> public Object readConst(final int item, final char[] buf);1457705343;Reads a numeric or string constant pool item in {@link #b b}. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param item_the index of a constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double},_{@link String}, {@link Type} or {@link Handle} corresponding to_the given constant pool item.;public Object readConst(final int item, final char[] buf) {_        int index = items[item]__        switch (b[index - 1]) {_        case ClassWriter.INT:_            return readInt(index)__        case ClassWriter.FLOAT:_            return Float.intBitsToFloat(readInt(index))__        case ClassWriter.LONG:_            return readLong(index)__        case ClassWriter.DOUBLE:_            return Double.longBitsToDouble(readLong(index))__        case ClassWriter.CLASS:_            return Type.getObjectType(readUTF8(index, buf))__        case ClassWriter.STR:_            return readUTF8(index, buf)__        case ClassWriter.MTYPE:_            return Type.getMethodType(readUTF8(index, buf))__        default: _            int tag = readByte(index)__            int[] items = this.items__            int cpIndex = items[readUnsignedShort(index + 1)]__            boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__            String owner = readClass(cpIndex, buf)__            cpIndex = items[readUnsignedShort(cpIndex + 2)]__            String name = readUTF8(cpIndex, buf)__            String desc = readUTF8(cpIndex + 2, buf)__            return new Handle(tag, owner, name, desc, itf)__        }_    };reads,a,numeric,or,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,of,a,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,corresponding,to,the,given,constant,pool,item;public,object,read,const,final,int,item,final,char,buf,int,index,items,item,switch,b,index,1,case,class,writer,int,return,read,int,index,case,class,writer,float,return,float,int,bits,to,float,read,int,index,case,class,writer,long,return,read,long,index,case,class,writer,double,return,double,long,bits,to,double,read,long,index,case,class,writer,class,return,type,get,object,type,read,utf8,index,buf,case,class,writer,str,return,read,utf8,index,buf,case,class,writer,mtype,return,type,get,method,type,read,utf8,index,buf,default,int,tag,read,byte,index,int,items,this,items,int,cp,index,items,read,unsigned,short,index,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,owner,read,class,cp,index,buf,cp,index,items,read,unsigned,short,cp,index,2,string,name,read,utf8,cp,index,buf,string,desc,read,utf8,cp,index,2,buf,return,new,handle,tag,owner,name,desc,itf
ClassReader -> public Object readConst(final int item, final char[] buf);1459258703;Reads a numeric or string constant pool item in {@link #b b}. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param item_the index of a constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double},_{@link String}, {@link Type} or {@link Handle} corresponding to_the given constant pool item.;public Object readConst(final int item, final char[] buf) {_        int index = items[item]__        switch (b[index - 1]) {_        case ClassWriter.INT:_            return readInt(index)__        case ClassWriter.FLOAT:_            return Float.intBitsToFloat(readInt(index))__        case ClassWriter.LONG:_            return readLong(index)__        case ClassWriter.DOUBLE:_            return Double.longBitsToDouble(readLong(index))__        case ClassWriter.CLASS:_            return Type.getObjectType(readUTF8(index, buf))__        case ClassWriter.STR:_            return readUTF8(index, buf)__        case ClassWriter.MTYPE:_            return Type.getMethodType(readUTF8(index, buf))__        default: _            int tag = readByte(index)__            int[] items = this.items__            int cpIndex = items[readUnsignedShort(index + 1)]__            boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__            String owner = readClass(cpIndex, buf)__            cpIndex = items[readUnsignedShort(cpIndex + 2)]__            String name = readUTF8(cpIndex, buf)__            String desc = readUTF8(cpIndex + 2, buf)__            return new Handle(tag, owner, name, desc, itf)__        }_    };reads,a,numeric,or,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,of,a,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,corresponding,to,the,given,constant,pool,item;public,object,read,const,final,int,item,final,char,buf,int,index,items,item,switch,b,index,1,case,class,writer,int,return,read,int,index,case,class,writer,float,return,float,int,bits,to,float,read,int,index,case,class,writer,long,return,read,long,index,case,class,writer,double,return,double,long,bits,to,double,read,long,index,case,class,writer,class,return,type,get,object,type,read,utf8,index,buf,case,class,writer,str,return,read,utf8,index,buf,case,class,writer,mtype,return,type,get,method,type,read,utf8,index,buf,default,int,tag,read,byte,index,int,items,this,items,int,cp,index,items,read,unsigned,short,index,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,owner,read,class,cp,index,buf,cp,index,items,read,unsigned,short,cp,index,2,string,name,read,utf8,cp,index,buf,string,desc,read,utf8,cp,index,2,buf,return,new,handle,tag,owner,name,desc,itf
ClassReader -> public Object readConst(final int item, final char[] buf);1478623137;Reads a numeric or string constant pool item in {@link #b b}. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param item_the index of a constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double},_{@link String}, {@link Type} or {@link Handle} corresponding to_the given constant pool item.;public Object readConst(final int item, final char[] buf) {_        int index = items[item]__        switch (b[index - 1]) {_        case ClassWriter.INT:_            return readInt(index)__        case ClassWriter.FLOAT:_            return Float.intBitsToFloat(readInt(index))__        case ClassWriter.LONG:_            return readLong(index)__        case ClassWriter.DOUBLE:_            return Double.longBitsToDouble(readLong(index))__        case ClassWriter.CLASS:_            return Type.getObjectType(readUTF8(index, buf))__        case ClassWriter.STR:_            return readUTF8(index, buf)__        case ClassWriter.MTYPE:_            return Type.getMethodType(readUTF8(index, buf))__        default: _            int tag = readByte(index)__            int[] items = this.items__            int cpIndex = items[readUnsignedShort(index + 1)]__            boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__            String owner = readClass(cpIndex, buf)__            cpIndex = items[readUnsignedShort(cpIndex + 2)]__            String name = readUTF8(cpIndex, buf)__            String desc = readUTF8(cpIndex + 2, buf)__            return new Handle(tag, owner, name, desc, itf)__        }_    };reads,a,numeric,or,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,of,a,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,corresponding,to,the,given,constant,pool,item;public,object,read,const,final,int,item,final,char,buf,int,index,items,item,switch,b,index,1,case,class,writer,int,return,read,int,index,case,class,writer,float,return,float,int,bits,to,float,read,int,index,case,class,writer,long,return,read,long,index,case,class,writer,double,return,double,long,bits,to,double,read,long,index,case,class,writer,class,return,type,get,object,type,read,utf8,index,buf,case,class,writer,str,return,read,utf8,index,buf,case,class,writer,mtype,return,type,get,method,type,read,utf8,index,buf,default,int,tag,read,byte,index,int,items,this,items,int,cp,index,items,read,unsigned,short,index,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,owner,read,class,cp,index,buf,cp,index,items,read,unsigned,short,cp,index,2,string,name,read,utf8,cp,index,buf,string,desc,read,utf8,cp,index,2,buf,return,new,handle,tag,owner,name,desc,itf
ClassReader -> public Object readConst(final int item, final char[] buf);1483093254;Reads a numeric or string constant pool item in {@link #b b}. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param item_the index of a constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double},_{@link String}, {@link Type} or {@link Handle} corresponding to_the given constant pool item.;public Object readConst(final int item, final char[] buf) {_        int index = items[item]__        switch (b[index - 1]) {_        case ClassWriter.INT:_            return readInt(index)__        case ClassWriter.FLOAT:_            return Float.intBitsToFloat(readInt(index))__        case ClassWriter.LONG:_            return readLong(index)__        case ClassWriter.DOUBLE:_            return Double.longBitsToDouble(readLong(index))__        case ClassWriter.CLASS:_            return Type.getObjectType(readUTF8(index, buf))__        case ClassWriter.STR:_            return readUTF8(index, buf)__        case ClassWriter.MTYPE:_            return Type.getMethodType(readUTF8(index, buf))__        default: _            int tag = readByte(index)__            int[] items = this.items__            int cpIndex = items[readUnsignedShort(index + 1)]__            boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__            String owner = readClass(cpIndex, buf)__            cpIndex = items[readUnsignedShort(cpIndex + 2)]__            String name = readUTF8(cpIndex, buf)__            String desc = readUTF8(cpIndex + 2, buf)__            return new Handle(tag, owner, name, desc, itf)__        }_    };reads,a,numeric,or,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,of,a,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,corresponding,to,the,given,constant,pool,item;public,object,read,const,final,int,item,final,char,buf,int,index,items,item,switch,b,index,1,case,class,writer,int,return,read,int,index,case,class,writer,float,return,float,int,bits,to,float,read,int,index,case,class,writer,long,return,read,long,index,case,class,writer,double,return,double,long,bits,to,double,read,long,index,case,class,writer,class,return,type,get,object,type,read,utf8,index,buf,case,class,writer,str,return,read,utf8,index,buf,case,class,writer,mtype,return,type,get,method,type,read,utf8,index,buf,default,int,tag,read,byte,index,int,items,this,items,int,cp,index,items,read,unsigned,short,index,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,owner,read,class,cp,index,buf,cp,index,items,read,unsigned,short,cp,index,2,string,name,read,utf8,cp,index,buf,string,desc,read,utf8,cp,index,2,buf,return,new,handle,tag,owner,name,desc,itf
ClassReader -> public Object readConst(final int item, final char[] buf);1505821772;Reads a numeric or string constant pool item in {@link #b b}. <i>This_method is intended for {@link Attribute} sub classes, and is normally not_needed by class generators or adapters.</i>__@param item_the index of a constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double},_{@link String}, {@link Type} or {@link Handle} corresponding to_the given constant pool item.;public Object readConst(final int item, final char[] buf) {_        int index = items[item]__        switch (b[index - 1]) {_        case ClassWriter.INT:_            return readInt(index)__        case ClassWriter.FLOAT:_            return Float.intBitsToFloat(readInt(index))__        case ClassWriter.LONG:_            return readLong(index)__        case ClassWriter.DOUBLE:_            return Double.longBitsToDouble(readLong(index))__        case ClassWriter.CLASS:_            return Type.getObjectType(readUTF8(index, buf))__        case ClassWriter.STR:_            return readUTF8(index, buf)__        case ClassWriter.MTYPE:_            return Type.getMethodType(readUTF8(index, buf))__        default: _            int tag = readByte(index)__            int[] items = this.items__            int cpIndex = items[readUnsignedShort(index + 1)]__            boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__            String owner = readClass(cpIndex, buf)__            cpIndex = items[readUnsignedShort(cpIndex + 2)]__            String name = readUTF8(cpIndex, buf)__            String desc = readUTF8(cpIndex + 2, buf)__            return new Handle(tag, owner, name, desc, itf)__        }_    };reads,a,numeric,or,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,of,a,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,corresponding,to,the,given,constant,pool,item;public,object,read,const,final,int,item,final,char,buf,int,index,items,item,switch,b,index,1,case,class,writer,int,return,read,int,index,case,class,writer,float,return,float,int,bits,to,float,read,int,index,case,class,writer,long,return,read,long,index,case,class,writer,double,return,double,long,bits,to,double,read,long,index,case,class,writer,class,return,type,get,object,type,read,utf8,index,buf,case,class,writer,str,return,read,utf8,index,buf,case,class,writer,mtype,return,type,get,method,type,read,utf8,index,buf,default,int,tag,read,byte,index,int,items,this,items,int,cp,index,items,read,unsigned,short,index,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,owner,read,class,cp,index,buf,cp,index,items,read,unsigned,short,cp,index,2,string,name,read,utf8,cp,index,buf,string,desc,read,utf8,cp,index,2,buf,return,new,handle,tag,owner,name,desc,itf
ClassReader -> protected Label readLabel(final int bytecodeOffset, final Label[] labels);1531241461;Returns the label corresponding to the given bytecode offset. The default implementation of_this method creates a label for the given offset if it has not been already created.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset. If a label already exists_for bytecodeOffset this method must not create a new one. Otherwise it must store the new_label in this array._@return a non null Label, which must be equal to labels[bytecodeOffset].;protected Label readLabel(final int bytecodeOffset, final Label[] labels) {_    if (labels[bytecodeOffset] == null) {_      labels[bytecodeOffset] = new Label()__    }_    return labels[bytecodeOffset]__  };returns,the,label,corresponding,to,the,given,bytecode,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,bytecode,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,bytecode,offset;protected,label,read,label,final,int,bytecode,offset,final,label,labels,if,labels,bytecode,offset,null,labels,bytecode,offset,new,label,return,labels,bytecode,offset
ClassReader -> protected Label readLabel(final int bytecodeOffset, final Label[] labels);1536664245;Returns the label corresponding to the given bytecode offset. The default implementation of_this method creates a label for the given offset if it has not been already created.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset. If a label already exists_for bytecodeOffset this method must not create a new one. Otherwise it must store the new_label in this array._@return a non null Label, which must be equal to labels[bytecodeOffset].;protected Label readLabel(final int bytecodeOffset, final Label[] labels) {_    if (labels[bytecodeOffset] == null) {_      labels[bytecodeOffset] = new Label()__    }_    return labels[bytecodeOffset]__  };returns,the,label,corresponding,to,the,given,bytecode,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,bytecode,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,bytecode,offset;protected,label,read,label,final,int,bytecode,offset,final,label,labels,if,labels,bytecode,offset,null,labels,bytecode,offset,new,label,return,labels,bytecode,offset
ClassReader -> protected Label readLabel(final int bytecodeOffset, final Label[] labels);1536747989;Returns the label corresponding to the given bytecode offset. The default implementation of_this method creates a label for the given offset if it has not been already created.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset. If a label already exists_for bytecodeOffset this method must not create a new one. Otherwise it must store the new_label in this array._@return a non null Label, which must be equal to labels[bytecodeOffset].;protected Label readLabel(final int bytecodeOffset, final Label[] labels) {_    if (labels[bytecodeOffset] == null) {_      labels[bytecodeOffset] = new Label()__    }_    return labels[bytecodeOffset]__  };returns,the,label,corresponding,to,the,given,bytecode,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,bytecode,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,bytecode,offset;protected,label,read,label,final,int,bytecode,offset,final,label,labels,if,labels,bytecode,offset,null,labels,bytecode,offset,new,label,return,labels,bytecode,offset
ClassReader -> protected Label readLabel(final int bytecodeOffset, final Label[] labels);1537204147;Returns the label corresponding to the given bytecode offset. The default implementation of_this method creates a label for the given offset if it has not been already created.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset. If a label already exists_for bytecodeOffset this method must not create a new one. Otherwise it must store the new_label in this array._@return a non null Label, which must be equal to labels[bytecodeOffset].;protected Label readLabel(final int bytecodeOffset, final Label[] labels) {_    if (labels[bytecodeOffset] == null) {_      labels[bytecodeOffset] = new Label()__    }_    return labels[bytecodeOffset]__  };returns,the,label,corresponding,to,the,given,bytecode,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,bytecode,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,bytecode,offset;protected,label,read,label,final,int,bytecode,offset,final,label,labels,if,labels,bytecode,offset,null,labels,bytecode,offset,new,label,return,labels,bytecode,offset
ClassReader -> protected Label readLabel(final int bytecodeOffset, final Label[] labels);1539119582;Returns the label corresponding to the given bytecode offset. The default implementation of_this method creates a label for the given offset if it has not been already created.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset. If a label already exists_for bytecodeOffset this method must not create a new one. Otherwise it must store the new_label in this array._@return a non null Label, which must be equal to labels[bytecodeOffset].;protected Label readLabel(final int bytecodeOffset, final Label[] labels) {_    if (labels[bytecodeOffset] == null) {_      labels[bytecodeOffset] = new Label()__    }_    return labels[bytecodeOffset]__  };returns,the,label,corresponding,to,the,given,bytecode,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,bytecode,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,bytecode,offset;protected,label,read,label,final,int,bytecode,offset,final,label,labels,if,labels,bytecode,offset,null,labels,bytecode,offset,new,label,return,labels,bytecode,offset
ClassReader -> protected Label readLabel(final int bytecodeOffset, final Label[] labels);1541436263;Returns the label corresponding to the given bytecode offset. The default implementation of_this method creates a label for the given offset if it has not been already created.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset. If a label already exists_for bytecodeOffset this method must not create a new one. Otherwise it must store the new_label in this array._@return a non null Label, which must be equal to labels[bytecodeOffset].;protected Label readLabel(final int bytecodeOffset, final Label[] labels) {_    _    if (bytecodeOffset >= labels.length) {_      return new Label()__    }_    _    if (labels[bytecodeOffset] == null) {_      labels[bytecodeOffset] = new Label()__    }_    return labels[bytecodeOffset]__  };returns,the,label,corresponding,to,the,given,bytecode,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,bytecode,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,bytecode,offset;protected,label,read,label,final,int,bytecode,offset,final,label,labels,if,bytecode,offset,labels,length,return,new,label,if,labels,bytecode,offset,null,labels,bytecode,offset,new,label,return,labels,bytecode,offset
ClassReader -> public String readUTF8(int index, final char[] buf);1366718246;Reads an UTF8 string constant pool item in {@link #b b}. <i>This method_is intended for {@link Attribute} sub classes, and is normally not needed_by class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of an UTF8 constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 item.;public String readUTF8(int index, final char[] buf) {_        int item = readUnsignedShort(index)__        if (index == 0 || item == 0) {_            return null__        }_        String s = strings[item]__        if (s != null) {_            return s__        }_        index = items[item]__        return strings[item] = readUTF(index + 2, readUnsignedShort(index), buf)__    };reads,an,utf8,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,an,utf8,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,item;public,string,read,utf8,int,index,final,char,buf,int,item,read,unsigned,short,index,if,index,0,item,0,return,null,string,s,strings,item,if,s,null,return,s,index,items,item,return,strings,item,read,utf,index,2,read,unsigned,short,index,buf
ClassReader -> public String readUTF8(int index, final char[] buf);1395273982;Reads an UTF8 string constant pool item in {@link #b b}. <i>This method_is intended for {@link Attribute} sub classes, and is normally not needed_by class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of an UTF8 constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 item.;public String readUTF8(int index, final char[] buf) {_        int item = readUnsignedShort(index)__        if (index == 0 || item == 0) {_            return null__        }_        String s = strings[item]__        if (s != null) {_            return s__        }_        index = items[item]__        return strings[item] = readUTF(index + 2, readUnsignedShort(index), buf)__    };reads,an,utf8,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,an,utf8,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,item;public,string,read,utf8,int,index,final,char,buf,int,item,read,unsigned,short,index,if,index,0,item,0,return,null,string,s,strings,item,if,s,null,return,s,index,items,item,return,strings,item,read,utf,index,2,read,unsigned,short,index,buf
ClassReader -> public String readUTF8(int index, final char[] buf);1414067099;Reads an UTF8 string constant pool item in {@link #b b}. <i>This method_is intended for {@link Attribute} sub classes, and is normally not needed_by class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of an UTF8 constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 item.;public String readUTF8(int index, final char[] buf) {_        int item = readUnsignedShort(index)__        if (index == 0 || item == 0) {_            return null__        }_        String s = strings[item]__        if (s != null) {_            return s__        }_        index = items[item]__        return strings[item] = readUTF(index + 2, readUnsignedShort(index), buf)__    };reads,an,utf8,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,an,utf8,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,item;public,string,read,utf8,int,index,final,char,buf,int,item,read,unsigned,short,index,if,index,0,item,0,return,null,string,s,strings,item,if,s,null,return,s,index,items,item,return,strings,item,read,utf,index,2,read,unsigned,short,index,buf
ClassReader -> public String readUTF8(int index, final char[] buf);1414499035;Reads an UTF8 string constant pool item in {@link #b b}. <i>This method_is intended for {@link Attribute} sub classes, and is normally not needed_by class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of an UTF8 constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 item.;public String readUTF8(int index, final char[] buf) {_        int item = readUnsignedShort(index)__        if (index == 0 || item == 0) {_            return null__        }_        String s = strings[item]__        if (s != null) {_            return s__        }_        index = items[item]__        return strings[item] = readUTF(index + 2, readUnsignedShort(index), buf)__    };reads,an,utf8,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,an,utf8,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,item;public,string,read,utf8,int,index,final,char,buf,int,item,read,unsigned,short,index,if,index,0,item,0,return,null,string,s,strings,item,if,s,null,return,s,index,items,item,return,strings,item,read,utf,index,2,read,unsigned,short,index,buf
ClassReader -> public String readUTF8(int index, final char[] buf);1416998550;Reads an UTF8 string constant pool item in {@link #b b}. <i>This method_is intended for {@link Attribute} sub classes, and is normally not needed_by class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of an UTF8 constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 item.;public String readUTF8(int index, final char[] buf) {_        int item = readUnsignedShort(index)__        if (index == 0 || item == 0) {_            return null__        }_        String s = strings[item]__        if (s != null) {_            return s__        }_        index = items[item]__        return strings[item] = readUTF(index + 2, readUnsignedShort(index), buf)__    };reads,an,utf8,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,an,utf8,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,item;public,string,read,utf8,int,index,final,char,buf,int,item,read,unsigned,short,index,if,index,0,item,0,return,null,string,s,strings,item,if,s,null,return,s,index,items,item,return,strings,item,read,utf,index,2,read,unsigned,short,index,buf
ClassReader -> public String readUTF8(int index, final char[] buf);1457705343;Reads an UTF8 string constant pool item in {@link #b b}. <i>This method_is intended for {@link Attribute} sub classes, and is normally not needed_by class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of an UTF8 constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 item.;public String readUTF8(int index, final char[] buf) {_        int item = readUnsignedShort(index)__        if (index == 0 || item == 0) {_            return null__        }_        String s = strings[item]__        if (s != null) {_            return s__        }_        index = items[item]__        return strings[item] = readUTF(index + 2, readUnsignedShort(index), buf)__    };reads,an,utf8,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,an,utf8,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,item;public,string,read,utf8,int,index,final,char,buf,int,item,read,unsigned,short,index,if,index,0,item,0,return,null,string,s,strings,item,if,s,null,return,s,index,items,item,return,strings,item,read,utf,index,2,read,unsigned,short,index,buf
ClassReader -> public String readUTF8(int index, final char[] buf);1459258703;Reads an UTF8 string constant pool item in {@link #b b}. <i>This method_is intended for {@link Attribute} sub classes, and is normally not needed_by class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of an UTF8 constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 item.;public String readUTF8(int index, final char[] buf) {_        int item = readUnsignedShort(index)__        if (index == 0 || item == 0) {_            return null__        }_        String s = strings[item]__        if (s != null) {_            return s__        }_        index = items[item]__        return strings[item] = readUTF(index + 2, readUnsignedShort(index), buf)__    };reads,an,utf8,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,an,utf8,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,item;public,string,read,utf8,int,index,final,char,buf,int,item,read,unsigned,short,index,if,index,0,item,0,return,null,string,s,strings,item,if,s,null,return,s,index,items,item,return,strings,item,read,utf,index,2,read,unsigned,short,index,buf
ClassReader -> public String readUTF8(int index, final char[] buf);1478623137;Reads an UTF8 string constant pool item in {@link #b b}. <i>This method_is intended for {@link Attribute} sub classes, and is normally not needed_by class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of an UTF8 constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 item.;public String readUTF8(int index, final char[] buf) {_        int item = readUnsignedShort(index)__        if (index == 0 || item == 0) {_            return null__        }_        String s = strings[item]__        if (s != null) {_            return s__        }_        index = items[item]__        return strings[item] = readUTF(index + 2, readUnsignedShort(index), buf)__    };reads,an,utf8,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,an,utf8,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,item;public,string,read,utf8,int,index,final,char,buf,int,item,read,unsigned,short,index,if,index,0,item,0,return,null,string,s,strings,item,if,s,null,return,s,index,items,item,return,strings,item,read,utf,index,2,read,unsigned,short,index,buf
ClassReader -> public String readUTF8(int index, final char[] buf);1483093254;Reads an UTF8 string constant pool item in {@link #b b}. <i>This method_is intended for {@link Attribute} sub classes, and is normally not needed_by class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of an UTF8 constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 item.;public String readUTF8(int index, final char[] buf) {_        int item = readUnsignedShort(index)__        if (index == 0 || item == 0) {_            return null__        }_        String s = strings[item]__        if (s != null) {_            return s__        }_        index = items[item]__        return strings[item] = readUTF(index + 2, readUnsignedShort(index), buf)__    };reads,an,utf8,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,an,utf8,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,item;public,string,read,utf8,int,index,final,char,buf,int,item,read,unsigned,short,index,if,index,0,item,0,return,null,string,s,strings,item,if,s,null,return,s,index,items,item,return,strings,item,read,utf,index,2,read,unsigned,short,index,buf
ClassReader -> public String readUTF8(int index, final char[] buf);1505821772;Reads an UTF8 string constant pool item in {@link #b b}. <i>This method_is intended for {@link Attribute} sub classes, and is normally not needed_by class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of an UTF8 constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 item.;public String readUTF8(int index, final char[] buf) {_        int item = readUnsignedShort(index)__        if (index == 0 || item == 0) {_            return null__        }_        String s = strings[item]__        if (s != null) {_            return s__        }_        index = items[item]__        return strings[item] = readUTF(index + 2, readUnsignedShort(index), buf)__    };reads,an,utf8,string,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,an,utf8,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,item;public,string,read,utf8,int,index,final,char,buf,int,item,read,unsigned,short,index,if,index,0,item,0,return,null,string,s,strings,item,if,s,null,return,s,index,items,item,return,strings,item,read,utf,index,2,read,unsigned,short,index,buf
ClassReader -> public int getItem(final int constantPoolEntryIndex);1531241461;Returns the start offset in {@link #b} of a JVMS 'cp_info' structure (i.e. a constant pool_entry), plus one. <i>This method is intended for {@link Attribute} sub classes, and is normally_not needed by class generators or adapters.</i>__@param constantPoolEntryIndex the index a constant pool entry in the class's constant pool_table._@return the start offset in {@link #b} of the corresponding JVMS 'cp_info' structure, plus one.;public int getItem(final int constantPoolEntryIndex) {_    return cpInfoOffsets[constantPoolEntryIndex]__  };returns,the,start,offset,in,link,b,of,a,jvms,structure,i,e,a,constant,pool,entry,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,constant,pool,entry,index,the,index,a,constant,pool,entry,in,the,class,s,constant,pool,table,return,the,start,offset,in,link,b,of,the,corresponding,jvms,structure,plus,one;public,int,get,item,final,int,constant,pool,entry,index,return,cp,info,offsets,constant,pool,entry,index
ClassReader -> public int getItem(final int constantPoolEntryIndex);1536664245;Returns the start offset in {@link #b} of a JVMS 'cp_info' structure (i.e. a constant pool_entry), plus one. <i>This method is intended for {@link Attribute} sub classes, and is normally_not needed by class generators or adapters.</i>__@param constantPoolEntryIndex the index a constant pool entry in the class's constant pool_table._@return the start offset in {@link #b} of the corresponding JVMS 'cp_info' structure, plus one.;public int getItem(final int constantPoolEntryIndex) {_    return cpInfoOffsets[constantPoolEntryIndex]__  };returns,the,start,offset,in,link,b,of,a,jvms,structure,i,e,a,constant,pool,entry,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,constant,pool,entry,index,the,index,a,constant,pool,entry,in,the,class,s,constant,pool,table,return,the,start,offset,in,link,b,of,the,corresponding,jvms,structure,plus,one;public,int,get,item,final,int,constant,pool,entry,index,return,cp,info,offsets,constant,pool,entry,index
ClassReader -> public int getItem(final int constantPoolEntryIndex);1536747989;Returns the start offset in {@link #b} of a JVMS 'cp_info' structure (i.e. a constant pool_entry), plus one. <i>This method is intended for {@link Attribute} sub classes, and is normally_not needed by class generators or adapters.</i>__@param constantPoolEntryIndex the index a constant pool entry in the class's constant pool_table._@return the start offset in {@link #b} of the corresponding JVMS 'cp_info' structure, plus one.;public int getItem(final int constantPoolEntryIndex) {_    return cpInfoOffsets[constantPoolEntryIndex]__  };returns,the,start,offset,in,link,b,of,a,jvms,structure,i,e,a,constant,pool,entry,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,constant,pool,entry,index,the,index,a,constant,pool,entry,in,the,class,s,constant,pool,table,return,the,start,offset,in,link,b,of,the,corresponding,jvms,structure,plus,one;public,int,get,item,final,int,constant,pool,entry,index,return,cp,info,offsets,constant,pool,entry,index
ClassReader -> public int getItem(final int constantPoolEntryIndex);1537204147;Returns the start offset in {@link #b} of a JVMS 'cp_info' structure (i.e. a constant pool_entry), plus one. <i>This method is intended for {@link Attribute} sub classes, and is normally_not needed by class generators or adapters.</i>__@param constantPoolEntryIndex the index a constant pool entry in the class's constant pool_table._@return the start offset in {@link #b} of the corresponding JVMS 'cp_info' structure, plus one.;public int getItem(final int constantPoolEntryIndex) {_    return cpInfoOffsets[constantPoolEntryIndex]__  };returns,the,start,offset,in,link,b,of,a,jvms,structure,i,e,a,constant,pool,entry,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,constant,pool,entry,index,the,index,a,constant,pool,entry,in,the,class,s,constant,pool,table,return,the,start,offset,in,link,b,of,the,corresponding,jvms,structure,plus,one;public,int,get,item,final,int,constant,pool,entry,index,return,cp,info,offsets,constant,pool,entry,index
ClassReader -> public int getItem(final int constantPoolEntryIndex);1539119582;Returns the start offset in {@link #b} of a JVMS 'cp_info' structure (i.e. a constant pool_entry), plus one. <i>This method is intended for {@link Attribute} sub classes, and is normally_not needed by class generators or adapters.</i>__@param constantPoolEntryIndex the index a constant pool entry in the class's constant pool_table._@return the start offset in {@link #b} of the corresponding JVMS 'cp_info' structure, plus one.;public int getItem(final int constantPoolEntryIndex) {_    return cpInfoOffsets[constantPoolEntryIndex]__  };returns,the,start,offset,in,link,b,of,a,jvms,structure,i,e,a,constant,pool,entry,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,constant,pool,entry,index,the,index,a,constant,pool,entry,in,the,class,s,constant,pool,table,return,the,start,offset,in,link,b,of,the,corresponding,jvms,structure,plus,one;public,int,get,item,final,int,constant,pool,entry,index,return,cp,info,offsets,constant,pool,entry,index
ClassReader -> public int getItem(final int constantPoolEntryIndex);1541436263;Returns the start offset in {@link #b} of a JVMS 'cp_info' structure (i.e. a constant pool_entry), plus one. <i>This method is intended for {@link Attribute} sub classes, and is normally_not needed by class generators or adapters.</i>__@param constantPoolEntryIndex the index a constant pool entry in the class's constant pool_table._@return the start offset in {@link #b} of the corresponding JVMS 'cp_info' structure, plus one.;public int getItem(final int constantPoolEntryIndex) {_    return cpInfoOffsets[constantPoolEntryIndex]__  };returns,the,start,offset,in,link,b,of,a,jvms,structure,i,e,a,constant,pool,entry,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,constant,pool,entry,index,the,index,a,constant,pool,entry,in,the,class,s,constant,pool,table,return,the,start,offset,in,link,b,of,the,corresponding,jvms,structure,plus,one;public,int,get,item,final,int,constant,pool,entry,index,return,cp,info,offsets,constant,pool,entry,index
ClassReader -> public ClassReader(final String name) throws IOException;1366718246;Constructs a new {@link ClassReader} object.__@param name_the binary qualified name of the class to be read._@throws IOException_if an exception occurs during reading.;public ClassReader(final String name) throws IOException {_        this(readClass(_                ClassLoader.getSystemResourceAsStream(name.replace('.', '/')_                        + ".class"), true))__    };constructs,a,new,link,class,reader,object,param,name,the,binary,qualified,name,of,the,class,to,be,read,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,name,throws,ioexception,this,read,class,class,loader,get,system,resource,as,stream,name,replace,class,true
ClassReader -> public ClassReader(final String name) throws IOException;1395273982;Constructs a new {@link ClassReader} object.__@param name_the binary qualified name of the class to be read._@throws IOException_if an exception occurs during reading.;public ClassReader(final String name) throws IOException {_        this(readClass(_                ClassLoader.getSystemResourceAsStream(name.replace('.', '/')_                        + ".class"), true))__    };constructs,a,new,link,class,reader,object,param,name,the,binary,qualified,name,of,the,class,to,be,read,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,name,throws,ioexception,this,read,class,class,loader,get,system,resource,as,stream,name,replace,class,true
ClassReader -> public ClassReader(final String name) throws IOException;1414067099;Constructs a new {@link ClassReader} object.__@param name_the binary qualified name of the class to be read._@throws IOException_if an exception occurs during reading.;public ClassReader(final String name) throws IOException {_        this(readClass(_                ClassLoader.getSystemResourceAsStream(name.replace('.', '/')_                        + ".class"), true))__    };constructs,a,new,link,class,reader,object,param,name,the,binary,qualified,name,of,the,class,to,be,read,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,name,throws,ioexception,this,read,class,class,loader,get,system,resource,as,stream,name,replace,class,true
ClassReader -> public ClassReader(final String name) throws IOException;1414499035;Constructs a new {@link ClassReader} object.__@param name_the binary qualified name of the class to be read._@throws IOException_if an exception occurs during reading.;public ClassReader(final String name) throws IOException {_        this(readClass(_                ClassLoader.getSystemResourceAsStream(name.replace('.', '/')_                        + ".class"), true))__    };constructs,a,new,link,class,reader,object,param,name,the,binary,qualified,name,of,the,class,to,be,read,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,name,throws,ioexception,this,read,class,class,loader,get,system,resource,as,stream,name,replace,class,true
ClassReader -> public ClassReader(final String name) throws IOException;1416998550;Constructs a new {@link ClassReader} object.__@param name_the binary qualified name of the class to be read._@throws IOException_if an exception occurs during reading.;public ClassReader(final String name) throws IOException {_        this(readClass(_                ClassLoader.getSystemResourceAsStream(name.replace('.', '/')_                        + ".class"), true))__    };constructs,a,new,link,class,reader,object,param,name,the,binary,qualified,name,of,the,class,to,be,read,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,name,throws,ioexception,this,read,class,class,loader,get,system,resource,as,stream,name,replace,class,true
ClassReader -> public ClassReader(final String name) throws IOException;1457705343;Constructs a new {@link ClassReader} object.__@param name_the binary qualified name of the class to be read._@throws IOException_if an exception occurs during reading.;public ClassReader(final String name) throws IOException {_        this(readClass(_                ClassLoader.getSystemResourceAsStream(name.replace('.', '/')_                        + ".class"), true))__    };constructs,a,new,link,class,reader,object,param,name,the,binary,qualified,name,of,the,class,to,be,read,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,name,throws,ioexception,this,read,class,class,loader,get,system,resource,as,stream,name,replace,class,true
ClassReader -> public ClassReader(final String name) throws IOException;1459258703;Constructs a new {@link ClassReader} object.__@param name_the binary qualified name of the class to be read._@throws IOException_if an exception occurs during reading.;public ClassReader(final String name) throws IOException {_        this(readClass(_                ClassLoader.getSystemResourceAsStream(name.replace('.', '/')_                        + ".class"), true))__    };constructs,a,new,link,class,reader,object,param,name,the,binary,qualified,name,of,the,class,to,be,read,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,name,throws,ioexception,this,read,class,class,loader,get,system,resource,as,stream,name,replace,class,true
ClassReader -> public ClassReader(final String name) throws IOException;1478623137;Constructs a new {@link ClassReader} object.__@param name_the binary qualified name of the class to be read._@throws IOException_if an exception occurs during reading.;public ClassReader(final String name) throws IOException {_        this(readClass(_                ClassLoader.getSystemResourceAsStream(name.replace('.', '/')_                        + ".class"), true))__    };constructs,a,new,link,class,reader,object,param,name,the,binary,qualified,name,of,the,class,to,be,read,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,name,throws,ioexception,this,read,class,class,loader,get,system,resource,as,stream,name,replace,class,true
ClassReader -> public ClassReader(final String name) throws IOException;1483093254;Constructs a new {@link ClassReader} object.__@param name_the binary qualified name of the class to be read._@throws IOException_if an exception occurs during reading.;public ClassReader(final String name) throws IOException {_        this(readClass(_                ClassLoader.getSystemResourceAsStream(name.replace('.', '/')_                        + ".class"), true))__    };constructs,a,new,link,class,reader,object,param,name,the,binary,qualified,name,of,the,class,to,be,read,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,name,throws,ioexception,this,read,class,class,loader,get,system,resource,as,stream,name,replace,class,true
ClassReader -> public ClassReader(final String name) throws IOException;1505821772;Constructs a new {@link ClassReader} object.__@param name_the binary qualified name of the class to be read._@throws IOException_if an exception occurs during reading.;public ClassReader(final String name) throws IOException {_        this(readClass(_                ClassLoader.getSystemResourceAsStream(name.replace('.', '/')_                        + ".class"), true))__    };constructs,a,new,link,class,reader,object,param,name,the,binary,qualified,name,of,the,class,to,be,read,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,name,throws,ioexception,this,read,class,class,loader,get,system,resource,as,stream,name,replace,class,true
ClassReader -> public int readUnsignedShort(final int offset);1531241461;Reads an unsigned short value in {@link #b}. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start index of the value to be read in {@link #b}._@return the read value.;public int readUnsignedShort(final int offset) {_    byte[] classFileBuffer = b__    return ((classFileBuffer[offset] & 0xFF) << 8) | (classFileBuffer[offset + 1] & 0xFF)__  };reads,an,unsigned,short,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,index,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,unsigned,short,final,int,offset,byte,class,file,buffer,b,return,class,file,buffer,offset,0x,ff,8,class,file,buffer,offset,1,0x,ff
ClassReader -> public int readUnsignedShort(final int offset);1536664245;Reads an unsigned short value in {@link #b}. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start index of the value to be read in {@link #b}._@return the read value.;public int readUnsignedShort(final int offset) {_    byte[] classFileBuffer = b__    return ((classFileBuffer[offset] & 0xFF) << 8) | (classFileBuffer[offset + 1] & 0xFF)__  };reads,an,unsigned,short,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,index,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,unsigned,short,final,int,offset,byte,class,file,buffer,b,return,class,file,buffer,offset,0x,ff,8,class,file,buffer,offset,1,0x,ff
ClassReader -> public int readUnsignedShort(final int offset);1536747989;Reads an unsigned short value in {@link #b}. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start index of the value to be read in {@link #b}._@return the read value.;public int readUnsignedShort(final int offset) {_    byte[] classFileBuffer = b__    return ((classFileBuffer[offset] & 0xFF) << 8) | (classFileBuffer[offset + 1] & 0xFF)__  };reads,an,unsigned,short,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,index,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,unsigned,short,final,int,offset,byte,class,file,buffer,b,return,class,file,buffer,offset,0x,ff,8,class,file,buffer,offset,1,0x,ff
ClassReader -> public int readUnsignedShort(final int offset);1537204147;Reads an unsigned short value in {@link #b}. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start index of the value to be read in {@link #b}._@return the read value.;public int readUnsignedShort(final int offset) {_    byte[] classFileBuffer = b__    return ((classFileBuffer[offset] & 0xFF) << 8) | (classFileBuffer[offset + 1] & 0xFF)__  };reads,an,unsigned,short,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,index,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,unsigned,short,final,int,offset,byte,class,file,buffer,b,return,class,file,buffer,offset,0x,ff,8,class,file,buffer,offset,1,0x,ff
ClassReader -> public int readUnsignedShort(final int offset);1539119582;Reads an unsigned short value in {@link #b}. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start index of the value to be read in {@link #b}._@return the read value.;public int readUnsignedShort(final int offset) {_    byte[] classFileBuffer = b__    return ((classFileBuffer[offset] & 0xFF) << 8) | (classFileBuffer[offset + 1] & 0xFF)__  };reads,an,unsigned,short,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,index,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,unsigned,short,final,int,offset,byte,class,file,buffer,b,return,class,file,buffer,offset,0x,ff,8,class,file,buffer,offset,1,0x,ff
ClassReader -> public int readUnsignedShort(final int offset);1541436263;Reads an unsigned short value in {@link #b}. <i>This method is intended for {@link Attribute}_sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start index of the value to be read in {@link #b}._@return the read value.;public int readUnsignedShort(final int offset) {_    byte[] classFileBuffer = b__    return ((classFileBuffer[offset] & 0xFF) << 8) | (classFileBuffer[offset + 1] & 0xFF)__  };reads,an,unsigned,short,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,index,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,unsigned,short,final,int,offset,byte,class,file,buffer,b,return,class,file,buffer,offset,0x,ff,8,class,file,buffer,offset,1,0x,ff
ClassReader -> public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer);1531241461;Reads a numeric or string constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param constantPoolEntryIndex the index of a CONSTANT_Integer, CONSTANT_Float, CONSTANT_Long,_CONSTANT_Double, CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType,_CONSTANT_MethodHandle or CONSTANT_Dynamic entry in the class's constant pool._@param charBuffer the buffer to be used to read strings. This buffer must be sufficiently_large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String},_{@link Type}, {@link Handle} or {@link ConstantDynamic} corresponding to the specified_constant pool entry.;public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer) {_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    switch (b[cpInfoOffset - 1]) {_      case Symbol.CONSTANT_INTEGER_TAG:_        return readInt(cpInfoOffset)__      case Symbol.CONSTANT_FLOAT_TAG:_        return Float.intBitsToFloat(readInt(cpInfoOffset))__      case Symbol.CONSTANT_LONG_TAG:_        return readLong(cpInfoOffset)__      case Symbol.CONSTANT_DOUBLE_TAG:_        return Double.longBitsToDouble(readLong(cpInfoOffset))__      case Symbol.CONSTANT_CLASS_TAG:_        return Type.getObjectType(readUTF8(cpInfoOffset, charBuffer))__      case Symbol.CONSTANT_STRING_TAG:_        return readUTF8(cpInfoOffset, charBuffer)__      case Symbol.CONSTANT_METHOD_TYPE_TAG:_        return Type.getMethodType(readUTF8(cpInfoOffset, charBuffer))__      case Symbol.CONSTANT_METHOD_HANDLE_TAG:_        int referenceKind = readByte(cpInfoOffset)__        int referenceCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 1)]__        int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(referenceCpInfoOffset + 2)]__        String owner = readClass(referenceCpInfoOffset, charBuffer)__        String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__        String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__        boolean isInterface =_            b[referenceCpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG__        return new Handle(referenceKind, owner, name, descriptor, isInterface)__      case Symbol.CONSTANT_DYNAMIC_TAG:_        return readConstantDynamic(constantPoolEntryIndex, charBuffer)__      default:_        throw new IllegalArgumentException()__    }_  };reads,a,numeric,or,string,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,constant,pool,entry,index,the,index,of,a,or,entry,in,the,class,s,constant,pool,param,char,buffer,the,buffer,to,be,used,to,read,strings,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,link,handle,or,link,constant,dynamic,corresponding,to,the,specified,constant,pool,entry;public,object,read,const,final,int,constant,pool,entry,index,final,char,char,buffer,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,switch,b,cp,info,offset,1,case,symbol,return,read,int,cp,info,offset,case,symbol,return,float,int,bits,to,float,read,int,cp,info,offset,case,symbol,return,read,long,cp,info,offset,case,symbol,return,double,long,bits,to,double,read,long,cp,info,offset,case,symbol,return,type,get,object,type,read,utf8,cp,info,offset,char,buffer,case,symbol,return,read,utf8,cp,info,offset,char,buffer,case,symbol,return,type,get,method,type,read,utf8,cp,info,offset,char,buffer,case,symbol,int,reference,kind,read,byte,cp,info,offset,int,reference,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,reference,cp,info,offset,2,string,owner,read,class,reference,cp,info,offset,char,buffer,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,boolean,is,interface,b,reference,cp,info,offset,1,symbol,return,new,handle,reference,kind,owner,name,descriptor,is,interface,case,symbol,return,read,constant,dynamic,constant,pool,entry,index,char,buffer,default,throw,new,illegal,argument,exception
ClassReader -> public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer);1536664245;Reads a numeric or string constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param constantPoolEntryIndex the index of a CONSTANT_Integer, CONSTANT_Float, CONSTANT_Long,_CONSTANT_Double, CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType,_CONSTANT_MethodHandle or CONSTANT_Dynamic entry in the class's constant pool._@param charBuffer the buffer to be used to read strings. This buffer must be sufficiently_large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String},_{@link Type}, {@link Handle} or {@link ConstantDynamic} corresponding to the specified_constant pool entry.;public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer) {_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    switch (b[cpInfoOffset - 1]) {_      case Symbol.CONSTANT_INTEGER_TAG:_        return readInt(cpInfoOffset)__      case Symbol.CONSTANT_FLOAT_TAG:_        return Float.intBitsToFloat(readInt(cpInfoOffset))__      case Symbol.CONSTANT_LONG_TAG:_        return readLong(cpInfoOffset)__      case Symbol.CONSTANT_DOUBLE_TAG:_        return Double.longBitsToDouble(readLong(cpInfoOffset))__      case Symbol.CONSTANT_CLASS_TAG:_        return Type.getObjectType(readUTF8(cpInfoOffset, charBuffer))__      case Symbol.CONSTANT_STRING_TAG:_        return readUTF8(cpInfoOffset, charBuffer)__      case Symbol.CONSTANT_METHOD_TYPE_TAG:_        return Type.getMethodType(readUTF8(cpInfoOffset, charBuffer))__      case Symbol.CONSTANT_METHOD_HANDLE_TAG:_        int referenceKind = readByte(cpInfoOffset)__        int referenceCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 1)]__        int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(referenceCpInfoOffset + 2)]__        String owner = readClass(referenceCpInfoOffset, charBuffer)__        String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__        String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__        boolean isInterface =_            b[referenceCpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG__        return new Handle(referenceKind, owner, name, descriptor, isInterface)__      case Symbol.CONSTANT_DYNAMIC_TAG:_        return readConstantDynamic(constantPoolEntryIndex, charBuffer)__      default:_        throw new IllegalArgumentException()__    }_  };reads,a,numeric,or,string,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,constant,pool,entry,index,the,index,of,a,or,entry,in,the,class,s,constant,pool,param,char,buffer,the,buffer,to,be,used,to,read,strings,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,link,handle,or,link,constant,dynamic,corresponding,to,the,specified,constant,pool,entry;public,object,read,const,final,int,constant,pool,entry,index,final,char,char,buffer,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,switch,b,cp,info,offset,1,case,symbol,return,read,int,cp,info,offset,case,symbol,return,float,int,bits,to,float,read,int,cp,info,offset,case,symbol,return,read,long,cp,info,offset,case,symbol,return,double,long,bits,to,double,read,long,cp,info,offset,case,symbol,return,type,get,object,type,read,utf8,cp,info,offset,char,buffer,case,symbol,return,read,utf8,cp,info,offset,char,buffer,case,symbol,return,type,get,method,type,read,utf8,cp,info,offset,char,buffer,case,symbol,int,reference,kind,read,byte,cp,info,offset,int,reference,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,reference,cp,info,offset,2,string,owner,read,class,reference,cp,info,offset,char,buffer,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,boolean,is,interface,b,reference,cp,info,offset,1,symbol,return,new,handle,reference,kind,owner,name,descriptor,is,interface,case,symbol,return,read,constant,dynamic,constant,pool,entry,index,char,buffer,default,throw,new,illegal,argument,exception
ClassReader -> public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer);1536747989;Reads a numeric or string constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param constantPoolEntryIndex the index of a CONSTANT_Integer, CONSTANT_Float, CONSTANT_Long,_CONSTANT_Double, CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType,_CONSTANT_MethodHandle or CONSTANT_Dynamic entry in the class's constant pool._@param charBuffer the buffer to be used to read strings. This buffer must be sufficiently_large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String},_{@link Type}, {@link Handle} or {@link ConstantDynamic} corresponding to the specified_constant pool entry.;public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer) {_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    switch (b[cpInfoOffset - 1]) {_      case Symbol.CONSTANT_INTEGER_TAG:_        return readInt(cpInfoOffset)__      case Symbol.CONSTANT_FLOAT_TAG:_        return Float.intBitsToFloat(readInt(cpInfoOffset))__      case Symbol.CONSTANT_LONG_TAG:_        return readLong(cpInfoOffset)__      case Symbol.CONSTANT_DOUBLE_TAG:_        return Double.longBitsToDouble(readLong(cpInfoOffset))__      case Symbol.CONSTANT_CLASS_TAG:_        return Type.getObjectType(readUTF8(cpInfoOffset, charBuffer))__      case Symbol.CONSTANT_STRING_TAG:_        return readUTF8(cpInfoOffset, charBuffer)__      case Symbol.CONSTANT_METHOD_TYPE_TAG:_        return Type.getMethodType(readUTF8(cpInfoOffset, charBuffer))__      case Symbol.CONSTANT_METHOD_HANDLE_TAG:_        int referenceKind = readByte(cpInfoOffset)__        int referenceCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 1)]__        int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(referenceCpInfoOffset + 2)]__        String owner = readClass(referenceCpInfoOffset, charBuffer)__        String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__        String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__        boolean isInterface =_            b[referenceCpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG__        return new Handle(referenceKind, owner, name, descriptor, isInterface)__      case Symbol.CONSTANT_DYNAMIC_TAG:_        return readConstantDynamic(constantPoolEntryIndex, charBuffer)__      default:_        throw new IllegalArgumentException()__    }_  };reads,a,numeric,or,string,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,constant,pool,entry,index,the,index,of,a,or,entry,in,the,class,s,constant,pool,param,char,buffer,the,buffer,to,be,used,to,read,strings,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,link,handle,or,link,constant,dynamic,corresponding,to,the,specified,constant,pool,entry;public,object,read,const,final,int,constant,pool,entry,index,final,char,char,buffer,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,switch,b,cp,info,offset,1,case,symbol,return,read,int,cp,info,offset,case,symbol,return,float,int,bits,to,float,read,int,cp,info,offset,case,symbol,return,read,long,cp,info,offset,case,symbol,return,double,long,bits,to,double,read,long,cp,info,offset,case,symbol,return,type,get,object,type,read,utf8,cp,info,offset,char,buffer,case,symbol,return,read,utf8,cp,info,offset,char,buffer,case,symbol,return,type,get,method,type,read,utf8,cp,info,offset,char,buffer,case,symbol,int,reference,kind,read,byte,cp,info,offset,int,reference,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,reference,cp,info,offset,2,string,owner,read,class,reference,cp,info,offset,char,buffer,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,boolean,is,interface,b,reference,cp,info,offset,1,symbol,return,new,handle,reference,kind,owner,name,descriptor,is,interface,case,symbol,return,read,constant,dynamic,constant,pool,entry,index,char,buffer,default,throw,new,illegal,argument,exception
ClassReader -> public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer);1537204147;Reads a numeric or string constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param constantPoolEntryIndex the index of a CONSTANT_Integer, CONSTANT_Float, CONSTANT_Long,_CONSTANT_Double, CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType,_CONSTANT_MethodHandle or CONSTANT_Dynamic entry in the class's constant pool._@param charBuffer the buffer to be used to read strings. This buffer must be sufficiently_large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String},_{@link Type}, {@link Handle} or {@link ConstantDynamic} corresponding to the specified_constant pool entry.;public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer) {_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    switch (b[cpInfoOffset - 1]) {_      case Symbol.CONSTANT_INTEGER_TAG:_        return readInt(cpInfoOffset)__      case Symbol.CONSTANT_FLOAT_TAG:_        return Float.intBitsToFloat(readInt(cpInfoOffset))__      case Symbol.CONSTANT_LONG_TAG:_        return readLong(cpInfoOffset)__      case Symbol.CONSTANT_DOUBLE_TAG:_        return Double.longBitsToDouble(readLong(cpInfoOffset))__      case Symbol.CONSTANT_CLASS_TAG:_        return Type.getObjectType(readUTF8(cpInfoOffset, charBuffer))__      case Symbol.CONSTANT_STRING_TAG:_        return readUTF8(cpInfoOffset, charBuffer)__      case Symbol.CONSTANT_METHOD_TYPE_TAG:_        return Type.getMethodType(readUTF8(cpInfoOffset, charBuffer))__      case Symbol.CONSTANT_METHOD_HANDLE_TAG:_        int referenceKind = readByte(cpInfoOffset)__        int referenceCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 1)]__        int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(referenceCpInfoOffset + 2)]__        String owner = readClass(referenceCpInfoOffset, charBuffer)__        String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__        String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__        boolean isInterface =_            b[referenceCpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG__        return new Handle(referenceKind, owner, name, descriptor, isInterface)__      case Symbol.CONSTANT_DYNAMIC_TAG:_        return readConstantDynamic(constantPoolEntryIndex, charBuffer)__      default:_        throw new IllegalArgumentException()__    }_  };reads,a,numeric,or,string,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,constant,pool,entry,index,the,index,of,a,or,entry,in,the,class,s,constant,pool,param,char,buffer,the,buffer,to,be,used,to,read,strings,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,link,handle,or,link,constant,dynamic,corresponding,to,the,specified,constant,pool,entry;public,object,read,const,final,int,constant,pool,entry,index,final,char,char,buffer,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,switch,b,cp,info,offset,1,case,symbol,return,read,int,cp,info,offset,case,symbol,return,float,int,bits,to,float,read,int,cp,info,offset,case,symbol,return,read,long,cp,info,offset,case,symbol,return,double,long,bits,to,double,read,long,cp,info,offset,case,symbol,return,type,get,object,type,read,utf8,cp,info,offset,char,buffer,case,symbol,return,read,utf8,cp,info,offset,char,buffer,case,symbol,return,type,get,method,type,read,utf8,cp,info,offset,char,buffer,case,symbol,int,reference,kind,read,byte,cp,info,offset,int,reference,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,reference,cp,info,offset,2,string,owner,read,class,reference,cp,info,offset,char,buffer,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,boolean,is,interface,b,reference,cp,info,offset,1,symbol,return,new,handle,reference,kind,owner,name,descriptor,is,interface,case,symbol,return,read,constant,dynamic,constant,pool,entry,index,char,buffer,default,throw,new,illegal,argument,exception
ClassReader -> public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer);1539119582;Reads a numeric or string constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param constantPoolEntryIndex the index of a CONSTANT_Integer, CONSTANT_Float, CONSTANT_Long,_CONSTANT_Double, CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType,_CONSTANT_MethodHandle or CONSTANT_Dynamic entry in the class's constant pool._@param charBuffer the buffer to be used to read strings. This buffer must be sufficiently_large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String},_{@link Type}, {@link Handle} or {@link ConstantDynamic} corresponding to the specified_constant pool entry.;public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer) {_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    switch (b[cpInfoOffset - 1]) {_      case Symbol.CONSTANT_INTEGER_TAG:_        return readInt(cpInfoOffset)__      case Symbol.CONSTANT_FLOAT_TAG:_        return Float.intBitsToFloat(readInt(cpInfoOffset))__      case Symbol.CONSTANT_LONG_TAG:_        return readLong(cpInfoOffset)__      case Symbol.CONSTANT_DOUBLE_TAG:_        return Double.longBitsToDouble(readLong(cpInfoOffset))__      case Symbol.CONSTANT_CLASS_TAG:_        return Type.getObjectType(readUTF8(cpInfoOffset, charBuffer))__      case Symbol.CONSTANT_STRING_TAG:_        return readUTF8(cpInfoOffset, charBuffer)__      case Symbol.CONSTANT_METHOD_TYPE_TAG:_        return Type.getMethodType(readUTF8(cpInfoOffset, charBuffer))__      case Symbol.CONSTANT_METHOD_HANDLE_TAG:_        int referenceKind = readByte(cpInfoOffset)__        int referenceCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 1)]__        int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(referenceCpInfoOffset + 2)]__        String owner = readClass(referenceCpInfoOffset, charBuffer)__        String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__        String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__        boolean isInterface =_            b[referenceCpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG__        return new Handle(referenceKind, owner, name, descriptor, isInterface)__      case Symbol.CONSTANT_DYNAMIC_TAG:_        return readConstantDynamic(constantPoolEntryIndex, charBuffer)__      default:_        throw new IllegalArgumentException()__    }_  };reads,a,numeric,or,string,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,constant,pool,entry,index,the,index,of,a,or,entry,in,the,class,s,constant,pool,param,char,buffer,the,buffer,to,be,used,to,read,strings,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,link,handle,or,link,constant,dynamic,corresponding,to,the,specified,constant,pool,entry;public,object,read,const,final,int,constant,pool,entry,index,final,char,char,buffer,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,switch,b,cp,info,offset,1,case,symbol,return,read,int,cp,info,offset,case,symbol,return,float,int,bits,to,float,read,int,cp,info,offset,case,symbol,return,read,long,cp,info,offset,case,symbol,return,double,long,bits,to,double,read,long,cp,info,offset,case,symbol,return,type,get,object,type,read,utf8,cp,info,offset,char,buffer,case,symbol,return,read,utf8,cp,info,offset,char,buffer,case,symbol,return,type,get,method,type,read,utf8,cp,info,offset,char,buffer,case,symbol,int,reference,kind,read,byte,cp,info,offset,int,reference,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,reference,cp,info,offset,2,string,owner,read,class,reference,cp,info,offset,char,buffer,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,boolean,is,interface,b,reference,cp,info,offset,1,symbol,return,new,handle,reference,kind,owner,name,descriptor,is,interface,case,symbol,return,read,constant,dynamic,constant,pool,entry,index,char,buffer,default,throw,new,illegal,argument,exception
ClassReader -> public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer);1541436263;Reads a numeric or string constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param constantPoolEntryIndex the index of a CONSTANT_Integer, CONSTANT_Float, CONSTANT_Long,_CONSTANT_Double, CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType,_CONSTANT_MethodHandle or CONSTANT_Dynamic entry in the class's constant pool._@param charBuffer the buffer to be used to read strings. This buffer must be sufficiently_large. It is not automatically resized._@return the {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String},_{@link Type}, {@link Handle} or {@link ConstantDynamic} corresponding to the specified_constant pool entry.;public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer) {_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    switch (b[cpInfoOffset - 1]) {_      case Symbol.CONSTANT_INTEGER_TAG:_        return readInt(cpInfoOffset)__      case Symbol.CONSTANT_FLOAT_TAG:_        return Float.intBitsToFloat(readInt(cpInfoOffset))__      case Symbol.CONSTANT_LONG_TAG:_        return readLong(cpInfoOffset)__      case Symbol.CONSTANT_DOUBLE_TAG:_        return Double.longBitsToDouble(readLong(cpInfoOffset))__      case Symbol.CONSTANT_CLASS_TAG:_        return Type.getObjectType(readUTF8(cpInfoOffset, charBuffer))__      case Symbol.CONSTANT_STRING_TAG:_        return readUTF8(cpInfoOffset, charBuffer)__      case Symbol.CONSTANT_METHOD_TYPE_TAG:_        return Type.getMethodType(readUTF8(cpInfoOffset, charBuffer))__      case Symbol.CONSTANT_METHOD_HANDLE_TAG:_        int referenceKind = readByte(cpInfoOffset)__        int referenceCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 1)]__        int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(referenceCpInfoOffset + 2)]__        String owner = readClass(referenceCpInfoOffset, charBuffer)__        String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__        String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__        boolean isInterface =_            b[referenceCpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG__        return new Handle(referenceKind, owner, name, descriptor, isInterface)__      case Symbol.CONSTANT_DYNAMIC_TAG:_        return readConstantDynamic(constantPoolEntryIndex, charBuffer)__      default:_        throw new IllegalArgumentException()__    }_  };reads,a,numeric,or,string,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,constant,pool,entry,index,the,index,of,a,or,entry,in,the,class,s,constant,pool,param,char,buffer,the,buffer,to,be,used,to,read,strings,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,link,integer,link,float,link,long,link,double,link,string,link,type,link,handle,or,link,constant,dynamic,corresponding,to,the,specified,constant,pool,entry;public,object,read,const,final,int,constant,pool,entry,index,final,char,char,buffer,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,switch,b,cp,info,offset,1,case,symbol,return,read,int,cp,info,offset,case,symbol,return,float,int,bits,to,float,read,int,cp,info,offset,case,symbol,return,read,long,cp,info,offset,case,symbol,return,double,long,bits,to,double,read,long,cp,info,offset,case,symbol,return,type,get,object,type,read,utf8,cp,info,offset,char,buffer,case,symbol,return,read,utf8,cp,info,offset,char,buffer,case,symbol,return,type,get,method,type,read,utf8,cp,info,offset,char,buffer,case,symbol,int,reference,kind,read,byte,cp,info,offset,int,reference,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,reference,cp,info,offset,2,string,owner,read,class,reference,cp,info,offset,char,buffer,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,boolean,is,interface,b,reference,cp,info,offset,1,symbol,return,new,handle,reference,kind,owner,name,descriptor,is,interface,case,symbol,return,read,constant,dynamic,constant,pool,entry,index,char,buffer,default,throw,new,illegal,argument,exception
ClassReader -> public long readLong(final int offset);1531241461;Reads a signed long value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public long readLong(final int offset) {_    long l1 = readInt(offset)__    long l0 = readInt(offset + 4) & 0xFFFFFFFFL__    return (l1 << 32) | l0__  };reads,a,signed,long,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,long,read,long,final,int,offset,long,l1,read,int,offset,long,l0,read,int,offset,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int offset);1536664245;Reads a signed long value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public long readLong(final int offset) {_    long l1 = readInt(offset)__    long l0 = readInt(offset + 4) & 0xFFFFFFFFL__    return (l1 << 32) | l0__  };reads,a,signed,long,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,long,read,long,final,int,offset,long,l1,read,int,offset,long,l0,read,int,offset,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int offset);1536747989;Reads a signed long value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public long readLong(final int offset) {_    long l1 = readInt(offset)__    long l0 = readInt(offset + 4) & 0xFFFFFFFFL__    return (l1 << 32) | l0__  };reads,a,signed,long,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,long,read,long,final,int,offset,long,l1,read,int,offset,long,l0,read,int,offset,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int offset);1537204147;Reads a signed long value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public long readLong(final int offset) {_    long l1 = readInt(offset)__    long l0 = readInt(offset + 4) & 0xFFFFFFFFL__    return (l1 << 32) | l0__  };reads,a,signed,long,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,long,read,long,final,int,offset,long,l1,read,int,offset,long,l0,read,int,offset,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int offset);1539119582;Reads a signed long value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public long readLong(final int offset) {_    long l1 = readInt(offset)__    long l0 = readInt(offset + 4) & 0xFFFFFFFFL__    return (l1 << 32) | l0__  };reads,a,signed,long,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,long,read,long,final,int,offset,long,l1,read,int,offset,long,l0,read,int,offset,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int offset);1541436263;Reads a signed long value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public long readLong(final int offset) {_    long l1 = readInt(offset)__    long l0 = readInt(offset + 4) & 0xFFFFFFFFL__    return (l1 << 32) | l0__  };reads,a,signed,long,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,long,read,long,final,int,offset,long,l1,read,int,offset,long,l0,read,int,offset,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> private String readUTF(int index, final int utfLen, final char[] buf);1366718246;Reads UTF8 string in {@link #b b}.__@param index_start offset of the UTF8 string to be read._@param utfLen_length of the UTF8 string to be read._@param buf_buffer to be used to read the string. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(int index, final int utfLen, final char[] buf) {_        int endIndex = index + utfLen__        byte[] b = this.b__        int strLen = 0__        int c__        int st = 0__        char cc = 0__        while (index < endIndex) {_            c = b[index++]__            switch (st) {_            case 0:_                c = c & 0xFF__                if (c < 0x80) { _                    buf[strLen++] = (char) c__                } else if (c < 0xE0 && c > 0xBF) { _                    cc = (char) (c & 0x1F)__                    st = 1__                } else { _                    cc = (char) (c & 0x0F)__                    st = 2__                }_                break___            case 1: _                buf[strLen++] = (char) ((cc << 6) | (c & 0x3F))__                st = 0__                break___            case 2: _                cc = (char) ((cc << 6) | (c & 0x3F))__                st = 1__                break__            }_        }_        return new String(buf, 0, strLen)__    };reads,utf8,string,in,link,b,b,param,index,start,offset,of,the,utf8,string,to,be,read,param,utf,len,length,of,the,utf8,string,to,be,read,param,buf,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,int,index,final,int,utf,len,final,char,buf,int,end,index,index,utf,len,byte,b,this,b,int,str,len,0,int,c,int,st,0,char,cc,0,while,index,end,index,c,b,index,switch,st,case,0,c,c,0x,ff,if,c,0x80,buf,str,len,char,c,else,if,c,0x,e0,c,0x,bf,cc,char,c,0x1f,st,1,else,cc,char,c,0x0f,st,2,break,case,1,buf,str,len,char,cc,6,c,0x3f,st,0,break,case,2,cc,char,cc,6,c,0x3f,st,1,break,return,new,string,buf,0,str,len
ClassReader -> private String readUTF(int index, final int utfLen, final char[] buf);1395273982;Reads UTF8 string in {@link #b b}.__@param index_start offset of the UTF8 string to be read._@param utfLen_length of the UTF8 string to be read._@param buf_buffer to be used to read the string. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(int index, final int utfLen, final char[] buf) {_        int endIndex = index + utfLen__        byte[] b = this.b__        int strLen = 0__        int c__        int st = 0__        char cc = 0__        while (index < endIndex) {_            c = b[index++]__            switch (st) {_            case 0:_                c = c & 0xFF__                if (c < 0x80) { _                    buf[strLen++] = (char) c__                } else if (c < 0xE0 && c > 0xBF) { _                    cc = (char) (c & 0x1F)__                    st = 1__                } else { _                    cc = (char) (c & 0x0F)__                    st = 2__                }_                break___            case 1: _                buf[strLen++] = (char) ((cc << 6) | (c & 0x3F))__                st = 0__                break___            case 2: _                cc = (char) ((cc << 6) | (c & 0x3F))__                st = 1__                break__            }_        }_        return new String(buf, 0, strLen)__    };reads,utf8,string,in,link,b,b,param,index,start,offset,of,the,utf8,string,to,be,read,param,utf,len,length,of,the,utf8,string,to,be,read,param,buf,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,int,index,final,int,utf,len,final,char,buf,int,end,index,index,utf,len,byte,b,this,b,int,str,len,0,int,c,int,st,0,char,cc,0,while,index,end,index,c,b,index,switch,st,case,0,c,c,0x,ff,if,c,0x80,buf,str,len,char,c,else,if,c,0x,e0,c,0x,bf,cc,char,c,0x1f,st,1,else,cc,char,c,0x0f,st,2,break,case,1,buf,str,len,char,cc,6,c,0x3f,st,0,break,case,2,cc,char,cc,6,c,0x3f,st,1,break,return,new,string,buf,0,str,len
ClassReader -> private String readUTF(int index, final int utfLen, final char[] buf);1414067099;Reads UTF8 string in {@link #b b}.__@param index_start offset of the UTF8 string to be read._@param utfLen_length of the UTF8 string to be read._@param buf_buffer to be used to read the string. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(int index, final int utfLen, final char[] buf) {_        int endIndex = index + utfLen__        byte[] b = this.b__        int strLen = 0__        int c__        int st = 0__        char cc = 0__        while (index < endIndex) {_            c = b[index++]__            switch (st) {_            case 0:_                c = c & 0xFF__                if (c < 0x80) { _                    buf[strLen++] = (char) c__                } else if (c < 0xE0 && c > 0xBF) { _                    cc = (char) (c & 0x1F)__                    st = 1__                } else { _                    cc = (char) (c & 0x0F)__                    st = 2__                }_                break___            case 1: _                buf[strLen++] = (char) ((cc << 6) | (c & 0x3F))__                st = 0__                break___            case 2: _                cc = (char) ((cc << 6) | (c & 0x3F))__                st = 1__                break__            }_        }_        return new String(buf, 0, strLen)__    };reads,utf8,string,in,link,b,b,param,index,start,offset,of,the,utf8,string,to,be,read,param,utf,len,length,of,the,utf8,string,to,be,read,param,buf,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,int,index,final,int,utf,len,final,char,buf,int,end,index,index,utf,len,byte,b,this,b,int,str,len,0,int,c,int,st,0,char,cc,0,while,index,end,index,c,b,index,switch,st,case,0,c,c,0x,ff,if,c,0x80,buf,str,len,char,c,else,if,c,0x,e0,c,0x,bf,cc,char,c,0x1f,st,1,else,cc,char,c,0x0f,st,2,break,case,1,buf,str,len,char,cc,6,c,0x3f,st,0,break,case,2,cc,char,cc,6,c,0x3f,st,1,break,return,new,string,buf,0,str,len
ClassReader -> private String readUTF(int index, final int utfLen, final char[] buf);1414499035;Reads UTF8 string in {@link #b b}.__@param index_start offset of the UTF8 string to be read._@param utfLen_length of the UTF8 string to be read._@param buf_buffer to be used to read the string. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(int index, final int utfLen, final char[] buf) {_        int endIndex = index + utfLen__        byte[] b = this.b__        int strLen = 0__        int c__        int st = 0__        char cc = 0__        while (index < endIndex) {_            c = b[index++]__            switch (st) {_            case 0:_                c = c & 0xFF__                if (c < 0x80) { _                    buf[strLen++] = (char) c__                } else if (c < 0xE0 && c > 0xBF) { _                    cc = (char) (c & 0x1F)__                    st = 1__                } else { _                    cc = (char) (c & 0x0F)__                    st = 2__                }_                break___            case 1: _                buf[strLen++] = (char) ((cc << 6) | (c & 0x3F))__                st = 0__                break___            case 2: _                cc = (char) ((cc << 6) | (c & 0x3F))__                st = 1__                break__            }_        }_        return new String(buf, 0, strLen)__    };reads,utf8,string,in,link,b,b,param,index,start,offset,of,the,utf8,string,to,be,read,param,utf,len,length,of,the,utf8,string,to,be,read,param,buf,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,int,index,final,int,utf,len,final,char,buf,int,end,index,index,utf,len,byte,b,this,b,int,str,len,0,int,c,int,st,0,char,cc,0,while,index,end,index,c,b,index,switch,st,case,0,c,c,0x,ff,if,c,0x80,buf,str,len,char,c,else,if,c,0x,e0,c,0x,bf,cc,char,c,0x1f,st,1,else,cc,char,c,0x0f,st,2,break,case,1,buf,str,len,char,cc,6,c,0x3f,st,0,break,case,2,cc,char,cc,6,c,0x3f,st,1,break,return,new,string,buf,0,str,len
ClassReader -> private String readUTF(int index, final int utfLen, final char[] buf);1416998550;Reads UTF8 string in {@link #b b}.__@param index_start offset of the UTF8 string to be read._@param utfLen_length of the UTF8 string to be read._@param buf_buffer to be used to read the string. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(int index, final int utfLen, final char[] buf) {_        int endIndex = index + utfLen__        byte[] b = this.b__        int strLen = 0__        int c__        int st = 0__        char cc = 0__        while (index < endIndex) {_            c = b[index++]__            switch (st) {_            case 0:_                c = c & 0xFF__                if (c < 0x80) { _                    buf[strLen++] = (char) c__                } else if (c < 0xE0 && c > 0xBF) { _                    cc = (char) (c & 0x1F)__                    st = 1__                } else { _                    cc = (char) (c & 0x0F)__                    st = 2__                }_                break___            case 1: _                buf[strLen++] = (char) ((cc << 6) | (c & 0x3F))__                st = 0__                break___            case 2: _                cc = (char) ((cc << 6) | (c & 0x3F))__                st = 1__                break__            }_        }_        return new String(buf, 0, strLen)__    };reads,utf8,string,in,link,b,b,param,index,start,offset,of,the,utf8,string,to,be,read,param,utf,len,length,of,the,utf8,string,to,be,read,param,buf,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,int,index,final,int,utf,len,final,char,buf,int,end,index,index,utf,len,byte,b,this,b,int,str,len,0,int,c,int,st,0,char,cc,0,while,index,end,index,c,b,index,switch,st,case,0,c,c,0x,ff,if,c,0x80,buf,str,len,char,c,else,if,c,0x,e0,c,0x,bf,cc,char,c,0x1f,st,1,else,cc,char,c,0x0f,st,2,break,case,1,buf,str,len,char,cc,6,c,0x3f,st,0,break,case,2,cc,char,cc,6,c,0x3f,st,1,break,return,new,string,buf,0,str,len
ClassReader -> private String readUTF(int index, final int utfLen, final char[] buf);1457705343;Reads UTF8 string in {@link #b b}.__@param index_start offset of the UTF8 string to be read._@param utfLen_length of the UTF8 string to be read._@param buf_buffer to be used to read the string. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(int index, final int utfLen, final char[] buf) {_        int endIndex = index + utfLen__        byte[] b = this.b__        int strLen = 0__        int c__        int st = 0__        char cc = 0__        while (index < endIndex) {_            c = b[index++]__            switch (st) {_            case 0:_                c = c & 0xFF__                if (c < 0x80) { _                    buf[strLen++] = (char) c__                } else if (c < 0xE0 && c > 0xBF) { _                    cc = (char) (c & 0x1F)__                    st = 1__                } else { _                    cc = (char) (c & 0x0F)__                    st = 2__                }_                break___            case 1: _                buf[strLen++] = (char) ((cc << 6) | (c & 0x3F))__                st = 0__                break___            case 2: _                cc = (char) ((cc << 6) | (c & 0x3F))__                st = 1__                break__            }_        }_        return new String(buf, 0, strLen)__    };reads,utf8,string,in,link,b,b,param,index,start,offset,of,the,utf8,string,to,be,read,param,utf,len,length,of,the,utf8,string,to,be,read,param,buf,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,int,index,final,int,utf,len,final,char,buf,int,end,index,index,utf,len,byte,b,this,b,int,str,len,0,int,c,int,st,0,char,cc,0,while,index,end,index,c,b,index,switch,st,case,0,c,c,0x,ff,if,c,0x80,buf,str,len,char,c,else,if,c,0x,e0,c,0x,bf,cc,char,c,0x1f,st,1,else,cc,char,c,0x0f,st,2,break,case,1,buf,str,len,char,cc,6,c,0x3f,st,0,break,case,2,cc,char,cc,6,c,0x3f,st,1,break,return,new,string,buf,0,str,len
ClassReader -> private String readUTF(int index, final int utfLen, final char[] buf);1459258703;Reads UTF8 string in {@link #b b}.__@param index_start offset of the UTF8 string to be read._@param utfLen_length of the UTF8 string to be read._@param buf_buffer to be used to read the string. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(int index, final int utfLen, final char[] buf) {_        int endIndex = index + utfLen__        byte[] b = this.b__        int strLen = 0__        int c__        int st = 0__        char cc = 0__        while (index < endIndex) {_            c = b[index++]__            switch (st) {_            case 0:_                c = c & 0xFF__                if (c < 0x80) { _                    buf[strLen++] = (char) c__                } else if (c < 0xE0 && c > 0xBF) { _                    cc = (char) (c & 0x1F)__                    st = 1__                } else { _                    cc = (char) (c & 0x0F)__                    st = 2__                }_                break___            case 1: _                buf[strLen++] = (char) ((cc << 6) | (c & 0x3F))__                st = 0__                break___            case 2: _                cc = (char) ((cc << 6) | (c & 0x3F))__                st = 1__                break__            }_        }_        return new String(buf, 0, strLen)__    };reads,utf8,string,in,link,b,b,param,index,start,offset,of,the,utf8,string,to,be,read,param,utf,len,length,of,the,utf8,string,to,be,read,param,buf,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,int,index,final,int,utf,len,final,char,buf,int,end,index,index,utf,len,byte,b,this,b,int,str,len,0,int,c,int,st,0,char,cc,0,while,index,end,index,c,b,index,switch,st,case,0,c,c,0x,ff,if,c,0x80,buf,str,len,char,c,else,if,c,0x,e0,c,0x,bf,cc,char,c,0x1f,st,1,else,cc,char,c,0x0f,st,2,break,case,1,buf,str,len,char,cc,6,c,0x3f,st,0,break,case,2,cc,char,cc,6,c,0x3f,st,1,break,return,new,string,buf,0,str,len
ClassReader -> private String readUTF(int index, final int utfLen, final char[] buf);1478623137;Reads UTF8 string in {@link #b b}.__@param index_start offset of the UTF8 string to be read._@param utfLen_length of the UTF8 string to be read._@param buf_buffer to be used to read the string. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(int index, final int utfLen, final char[] buf) {_        int endIndex = index + utfLen__        byte[] b = this.b__        int strLen = 0__        int c__        int st = 0__        char cc = 0__        while (index < endIndex) {_            c = b[index++]__            switch (st) {_            case 0:_                c = c & 0xFF__                if (c < 0x80) { _                    buf[strLen++] = (char) c__                } else if (c < 0xE0 && c > 0xBF) { _                    cc = (char) (c & 0x1F)__                    st = 1__                } else { _                    cc = (char) (c & 0x0F)__                    st = 2__                }_                break___            case 1: _                buf[strLen++] = (char) ((cc << 6) | (c & 0x3F))__                st = 0__                break___            case 2: _                cc = (char) ((cc << 6) | (c & 0x3F))__                st = 1__                break__            }_        }_        return new String(buf, 0, strLen)__    };reads,utf8,string,in,link,b,b,param,index,start,offset,of,the,utf8,string,to,be,read,param,utf,len,length,of,the,utf8,string,to,be,read,param,buf,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,int,index,final,int,utf,len,final,char,buf,int,end,index,index,utf,len,byte,b,this,b,int,str,len,0,int,c,int,st,0,char,cc,0,while,index,end,index,c,b,index,switch,st,case,0,c,c,0x,ff,if,c,0x80,buf,str,len,char,c,else,if,c,0x,e0,c,0x,bf,cc,char,c,0x1f,st,1,else,cc,char,c,0x0f,st,2,break,case,1,buf,str,len,char,cc,6,c,0x3f,st,0,break,case,2,cc,char,cc,6,c,0x3f,st,1,break,return,new,string,buf,0,str,len
ClassReader -> private String readUTF(int index, final int utfLen, final char[] buf);1483093254;Reads UTF8 string in {@link #b b}.__@param index_start offset of the UTF8 string to be read._@param utfLen_length of the UTF8 string to be read._@param buf_buffer to be used to read the string. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(int index, final int utfLen, final char[] buf) {_        int endIndex = index + utfLen__        byte[] b = this.b__        int strLen = 0__        int c__        int st = 0__        char cc = 0__        while (index < endIndex) {_            c = b[index++]__            switch (st) {_            case 0:_                c = c & 0xFF__                if (c < 0x80) { _                    buf[strLen++] = (char) c__                } else if (c < 0xE0 && c > 0xBF) { _                    cc = (char) (c & 0x1F)__                    st = 1__                } else { _                    cc = (char) (c & 0x0F)__                    st = 2__                }_                break___            case 1: _                buf[strLen++] = (char) ((cc << 6) | (c & 0x3F))__                st = 0__                break___            case 2: _                cc = (char) ((cc << 6) | (c & 0x3F))__                st = 1__                break__            }_        }_        return new String(buf, 0, strLen)__    };reads,utf8,string,in,link,b,b,param,index,start,offset,of,the,utf8,string,to,be,read,param,utf,len,length,of,the,utf8,string,to,be,read,param,buf,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,int,index,final,int,utf,len,final,char,buf,int,end,index,index,utf,len,byte,b,this,b,int,str,len,0,int,c,int,st,0,char,cc,0,while,index,end,index,c,b,index,switch,st,case,0,c,c,0x,ff,if,c,0x80,buf,str,len,char,c,else,if,c,0x,e0,c,0x,bf,cc,char,c,0x1f,st,1,else,cc,char,c,0x0f,st,2,break,case,1,buf,str,len,char,cc,6,c,0x3f,st,0,break,case,2,cc,char,cc,6,c,0x3f,st,1,break,return,new,string,buf,0,str,len
ClassReader -> private String readUTF(int index, final int utfLen, final char[] buf);1505821772;Reads UTF8 string in {@link #b b}.__@param index_start offset of the UTF8 string to be read._@param utfLen_length of the UTF8 string to be read._@param buf_buffer to be used to read the string. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(int index, final int utfLen, final char[] buf) {_        int endIndex = index + utfLen__        byte[] b = this.b__        int strLen = 0__        int c__        int st = 0__        char cc = 0__        while (index < endIndex) {_            c = b[index++]__            switch (st) {_            case 0:_                c = c & 0xFF__                if (c < 0x80) { _                    buf[strLen++] = (char) c__                } else if (c < 0xE0 && c > 0xBF) { _                    cc = (char) (c & 0x1F)__                    st = 1__                } else { _                    cc = (char) (c & 0x0F)__                    st = 2__                }_                break___            case 1: _                buf[strLen++] = (char) ((cc << 6) | (c & 0x3F))__                st = 0__                break___            case 2: _                cc = (char) ((cc << 6) | (c & 0x3F))__                st = 1__                break__            }_        }_        return new String(buf, 0, strLen)__    };reads,utf8,string,in,link,b,b,param,index,start,offset,of,the,utf8,string,to,be,read,param,utf,len,length,of,the,utf8,string,to,be,read,param,buf,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,int,index,final,int,utf,len,final,char,buf,int,end,index,index,utf,len,byte,b,this,b,int,str,len,0,int,c,int,st,0,char,cc,0,while,index,end,index,c,b,index,switch,st,case,0,c,c,0x,ff,if,c,0x80,buf,str,len,char,c,else,if,c,0x,e0,c,0x,bf,cc,char,c,0x1f,st,1,else,cc,char,c,0x0f,st,2,break,case,1,buf,str,len,char,cc,6,c,0x3f,st,0,break,case,2,cc,char,cc,6,c,0x3f,st,1,break,return,new,string,buf,0,str,len
ClassReader -> private void readParameterAnnotations(       final MethodVisitor methodVisitor,       final Context context,       final int runtimeParameterAnnotationsOffset,       final boolean visible);1531241461;Reads a Runtime[In]VisibleParameterAnnotations attribute and makes the given visitor visit it.__@param methodVisitor the visitor that must visit the parameter annotations._@param context information about the class being parsed._@param runtimeParameterAnnotationsOffset the start offset of a_Runtime[In]VisibleParameterAnnotations attribute, excluding the attribute_info's_attribute_name_index and attribute_length fields._@param visible true if the attribute to parse is a RuntimeVisibleParameterAnnotations_attribute, false it is a RuntimeInvisibleParameterAnnotations attribute.;private void readParameterAnnotations(_      final MethodVisitor methodVisitor,_      final Context context,_      final int runtimeParameterAnnotationsOffset,_      final boolean visible) {_    int currentOffset = runtimeParameterAnnotationsOffset__    int numParameters = b[currentOffset++] & 0xFF__    methodVisitor.visitAnnotableParameterCount(numParameters, visible)__    char[] charBuffer = context.charBuffer__    for (int i = 0_ i < numParameters_ ++i) {_      int numAnnotations = readUnsignedShort(currentOffset)__      currentOffset += 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentOffset, charBuffer)__        currentOffset += 2__        _        currentOffset =_            readElementValues(_                methodVisitor.visitParameterAnnotation(i, annotationDescriptor, visible),_                currentOffset,_                 true,_                charBuffer)__      }_    }_  };reads,a,runtime,in,visible,parameter,annotations,attribute,and,makes,the,given,visitor,visit,it,param,method,visitor,the,visitor,that,must,visit,the,parameter,annotations,param,context,information,about,the,class,being,parsed,param,runtime,parameter,annotations,offset,the,start,offset,of,a,runtime,in,visible,parameter,annotations,attribute,excluding,the,s,and,fields,param,visible,true,if,the,attribute,to,parse,is,a,runtime,visible,parameter,annotations,attribute,false,it,is,a,runtime,invisible,parameter,annotations,attribute;private,void,read,parameter,annotations,final,method,visitor,method,visitor,final,context,context,final,int,runtime,parameter,annotations,offset,final,boolean,visible,int,current,offset,runtime,parameter,annotations,offset,int,num,parameters,b,current,offset,0x,ff,method,visitor,visit,annotable,parameter,count,num,parameters,visible,char,char,buffer,context,char,buffer,for,int,i,0,i,num,parameters,i,int,num,annotations,read,unsigned,short,current,offset,current,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,current,offset,read,element,values,method,visitor,visit,parameter,annotation,i,annotation,descriptor,visible,current,offset,true,char,buffer
ClassReader -> private void readParameterAnnotations(       final MethodVisitor methodVisitor,       final Context context,       final int runtimeParameterAnnotationsOffset,       final boolean visible);1536664245;Reads a Runtime[In]VisibleParameterAnnotations attribute and makes the given visitor visit it.__@param methodVisitor the visitor that must visit the parameter annotations._@param context information about the class being parsed._@param runtimeParameterAnnotationsOffset the start offset of a_Runtime[In]VisibleParameterAnnotations attribute, excluding the attribute_info's_attribute_name_index and attribute_length fields._@param visible true if the attribute to parse is a RuntimeVisibleParameterAnnotations_attribute, false it is a RuntimeInvisibleParameterAnnotations attribute.;private void readParameterAnnotations(_      final MethodVisitor methodVisitor,_      final Context context,_      final int runtimeParameterAnnotationsOffset,_      final boolean visible) {_    int currentOffset = runtimeParameterAnnotationsOffset__    int numParameters = b[currentOffset++] & 0xFF__    methodVisitor.visitAnnotableParameterCount(numParameters, visible)__    char[] charBuffer = context.charBuffer__    for (int i = 0_ i < numParameters_ ++i) {_      int numAnnotations = readUnsignedShort(currentOffset)__      currentOffset += 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentOffset, charBuffer)__        currentOffset += 2__        _        currentOffset =_            readElementValues(_                methodVisitor.visitParameterAnnotation(i, annotationDescriptor, visible),_                currentOffset,_                 true,_                charBuffer)__      }_    }_  };reads,a,runtime,in,visible,parameter,annotations,attribute,and,makes,the,given,visitor,visit,it,param,method,visitor,the,visitor,that,must,visit,the,parameter,annotations,param,context,information,about,the,class,being,parsed,param,runtime,parameter,annotations,offset,the,start,offset,of,a,runtime,in,visible,parameter,annotations,attribute,excluding,the,s,and,fields,param,visible,true,if,the,attribute,to,parse,is,a,runtime,visible,parameter,annotations,attribute,false,it,is,a,runtime,invisible,parameter,annotations,attribute;private,void,read,parameter,annotations,final,method,visitor,method,visitor,final,context,context,final,int,runtime,parameter,annotations,offset,final,boolean,visible,int,current,offset,runtime,parameter,annotations,offset,int,num,parameters,b,current,offset,0x,ff,method,visitor,visit,annotable,parameter,count,num,parameters,visible,char,char,buffer,context,char,buffer,for,int,i,0,i,num,parameters,i,int,num,annotations,read,unsigned,short,current,offset,current,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,current,offset,read,element,values,method,visitor,visit,parameter,annotation,i,annotation,descriptor,visible,current,offset,true,char,buffer
ClassReader -> private void readParameterAnnotations(       final MethodVisitor methodVisitor,       final Context context,       final int runtimeParameterAnnotationsOffset,       final boolean visible);1536747989;Reads a Runtime[In]VisibleParameterAnnotations attribute and makes the given visitor visit it.__@param methodVisitor the visitor that must visit the parameter annotations._@param context information about the class being parsed._@param runtimeParameterAnnotationsOffset the start offset of a_Runtime[In]VisibleParameterAnnotations attribute, excluding the attribute_info's_attribute_name_index and attribute_length fields._@param visible true if the attribute to parse is a RuntimeVisibleParameterAnnotations_attribute, false it is a RuntimeInvisibleParameterAnnotations attribute.;private void readParameterAnnotations(_      final MethodVisitor methodVisitor,_      final Context context,_      final int runtimeParameterAnnotationsOffset,_      final boolean visible) {_    int currentOffset = runtimeParameterAnnotationsOffset__    int numParameters = b[currentOffset++] & 0xFF__    methodVisitor.visitAnnotableParameterCount(numParameters, visible)__    char[] charBuffer = context.charBuffer__    for (int i = 0_ i < numParameters_ ++i) {_      int numAnnotations = readUnsignedShort(currentOffset)__      currentOffset += 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentOffset, charBuffer)__        currentOffset += 2__        _        currentOffset =_            readElementValues(_                methodVisitor.visitParameterAnnotation(i, annotationDescriptor, visible),_                currentOffset,_                 true,_                charBuffer)__      }_    }_  };reads,a,runtime,in,visible,parameter,annotations,attribute,and,makes,the,given,visitor,visit,it,param,method,visitor,the,visitor,that,must,visit,the,parameter,annotations,param,context,information,about,the,class,being,parsed,param,runtime,parameter,annotations,offset,the,start,offset,of,a,runtime,in,visible,parameter,annotations,attribute,excluding,the,s,and,fields,param,visible,true,if,the,attribute,to,parse,is,a,runtime,visible,parameter,annotations,attribute,false,it,is,a,runtime,invisible,parameter,annotations,attribute;private,void,read,parameter,annotations,final,method,visitor,method,visitor,final,context,context,final,int,runtime,parameter,annotations,offset,final,boolean,visible,int,current,offset,runtime,parameter,annotations,offset,int,num,parameters,b,current,offset,0x,ff,method,visitor,visit,annotable,parameter,count,num,parameters,visible,char,char,buffer,context,char,buffer,for,int,i,0,i,num,parameters,i,int,num,annotations,read,unsigned,short,current,offset,current,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,current,offset,read,element,values,method,visitor,visit,parameter,annotation,i,annotation,descriptor,visible,current,offset,true,char,buffer
ClassReader -> private void readParameterAnnotations(       final MethodVisitor methodVisitor,       final Context context,       final int runtimeParameterAnnotationsOffset,       final boolean visible);1537204147;Reads a Runtime[In]VisibleParameterAnnotations attribute and makes the given visitor visit it.__@param methodVisitor the visitor that must visit the parameter annotations._@param context information about the class being parsed._@param runtimeParameterAnnotationsOffset the start offset of a_Runtime[In]VisibleParameterAnnotations attribute, excluding the attribute_info's_attribute_name_index and attribute_length fields._@param visible true if the attribute to parse is a RuntimeVisibleParameterAnnotations_attribute, false it is a RuntimeInvisibleParameterAnnotations attribute.;private void readParameterAnnotations(_      final MethodVisitor methodVisitor,_      final Context context,_      final int runtimeParameterAnnotationsOffset,_      final boolean visible) {_    int currentOffset = runtimeParameterAnnotationsOffset__    int numParameters = b[currentOffset++] & 0xFF__    methodVisitor.visitAnnotableParameterCount(numParameters, visible)__    char[] charBuffer = context.charBuffer__    for (int i = 0_ i < numParameters_ ++i) {_      int numAnnotations = readUnsignedShort(currentOffset)__      currentOffset += 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentOffset, charBuffer)__        currentOffset += 2__        _        currentOffset =_            readElementValues(_                methodVisitor.visitParameterAnnotation(i, annotationDescriptor, visible),_                currentOffset,_                 true,_                charBuffer)__      }_    }_  };reads,a,runtime,in,visible,parameter,annotations,attribute,and,makes,the,given,visitor,visit,it,param,method,visitor,the,visitor,that,must,visit,the,parameter,annotations,param,context,information,about,the,class,being,parsed,param,runtime,parameter,annotations,offset,the,start,offset,of,a,runtime,in,visible,parameter,annotations,attribute,excluding,the,s,and,fields,param,visible,true,if,the,attribute,to,parse,is,a,runtime,visible,parameter,annotations,attribute,false,it,is,a,runtime,invisible,parameter,annotations,attribute;private,void,read,parameter,annotations,final,method,visitor,method,visitor,final,context,context,final,int,runtime,parameter,annotations,offset,final,boolean,visible,int,current,offset,runtime,parameter,annotations,offset,int,num,parameters,b,current,offset,0x,ff,method,visitor,visit,annotable,parameter,count,num,parameters,visible,char,char,buffer,context,char,buffer,for,int,i,0,i,num,parameters,i,int,num,annotations,read,unsigned,short,current,offset,current,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,current,offset,read,element,values,method,visitor,visit,parameter,annotation,i,annotation,descriptor,visible,current,offset,true,char,buffer
ClassReader -> private void readParameterAnnotations(       final MethodVisitor methodVisitor,       final Context context,       final int runtimeParameterAnnotationsOffset,       final boolean visible);1539119582;Reads a Runtime[In]VisibleParameterAnnotations attribute and makes the given visitor visit it.__@param methodVisitor the visitor that must visit the parameter annotations._@param context information about the class being parsed._@param runtimeParameterAnnotationsOffset the start offset of a_Runtime[In]VisibleParameterAnnotations attribute, excluding the attribute_info's_attribute_name_index and attribute_length fields._@param visible true if the attribute to parse is a RuntimeVisibleParameterAnnotations_attribute, false it is a RuntimeInvisibleParameterAnnotations attribute.;private void readParameterAnnotations(_      final MethodVisitor methodVisitor,_      final Context context,_      final int runtimeParameterAnnotationsOffset,_      final boolean visible) {_    int currentOffset = runtimeParameterAnnotationsOffset__    int numParameters = b[currentOffset++] & 0xFF__    methodVisitor.visitAnnotableParameterCount(numParameters, visible)__    char[] charBuffer = context.charBuffer__    for (int i = 0_ i < numParameters_ ++i) {_      int numAnnotations = readUnsignedShort(currentOffset)__      currentOffset += 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentOffset, charBuffer)__        currentOffset += 2__        _        currentOffset =_            readElementValues(_                methodVisitor.visitParameterAnnotation(i, annotationDescriptor, visible),_                currentOffset,_                 true,_                charBuffer)__      }_    }_  };reads,a,runtime,in,visible,parameter,annotations,attribute,and,makes,the,given,visitor,visit,it,param,method,visitor,the,visitor,that,must,visit,the,parameter,annotations,param,context,information,about,the,class,being,parsed,param,runtime,parameter,annotations,offset,the,start,offset,of,a,runtime,in,visible,parameter,annotations,attribute,excluding,the,s,and,fields,param,visible,true,if,the,attribute,to,parse,is,a,runtime,visible,parameter,annotations,attribute,false,it,is,a,runtime,invisible,parameter,annotations,attribute;private,void,read,parameter,annotations,final,method,visitor,method,visitor,final,context,context,final,int,runtime,parameter,annotations,offset,final,boolean,visible,int,current,offset,runtime,parameter,annotations,offset,int,num,parameters,b,current,offset,0x,ff,method,visitor,visit,annotable,parameter,count,num,parameters,visible,char,char,buffer,context,char,buffer,for,int,i,0,i,num,parameters,i,int,num,annotations,read,unsigned,short,current,offset,current,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,current,offset,read,element,values,method,visitor,visit,parameter,annotation,i,annotation,descriptor,visible,current,offset,true,char,buffer
ClassReader -> private void readParameterAnnotations(       final MethodVisitor methodVisitor,       final Context context,       final int runtimeParameterAnnotationsOffset,       final boolean visible);1541436263;Reads a Runtime[In]VisibleParameterAnnotations attribute and makes the given visitor visit it.__@param methodVisitor the visitor that must visit the parameter annotations._@param context information about the class being parsed._@param runtimeParameterAnnotationsOffset the start offset of a_Runtime[In]VisibleParameterAnnotations attribute, excluding the attribute_info's_attribute_name_index and attribute_length fields._@param visible true if the attribute to parse is a RuntimeVisibleParameterAnnotations_attribute, false it is a RuntimeInvisibleParameterAnnotations attribute.;private void readParameterAnnotations(_      final MethodVisitor methodVisitor,_      final Context context,_      final int runtimeParameterAnnotationsOffset,_      final boolean visible) {_    int currentOffset = runtimeParameterAnnotationsOffset__    int numParameters = b[currentOffset++] & 0xFF__    methodVisitor.visitAnnotableParameterCount(numParameters, visible)__    char[] charBuffer = context.charBuffer__    for (int i = 0_ i < numParameters_ ++i) {_      int numAnnotations = readUnsignedShort(currentOffset)__      currentOffset += 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentOffset, charBuffer)__        currentOffset += 2__        _        currentOffset =_            readElementValues(_                methodVisitor.visitParameterAnnotation(i, annotationDescriptor, visible),_                currentOffset,_                 true,_                charBuffer)__      }_    }_  };reads,a,runtime,in,visible,parameter,annotations,attribute,and,makes,the,given,visitor,visit,it,param,method,visitor,the,visitor,that,must,visit,the,parameter,annotations,param,context,information,about,the,class,being,parsed,param,runtime,parameter,annotations,offset,the,start,offset,of,a,runtime,in,visible,parameter,annotations,attribute,excluding,the,s,and,fields,param,visible,true,if,the,attribute,to,parse,is,a,runtime,visible,parameter,annotations,attribute,false,it,is,a,runtime,invisible,parameter,annotations,attribute;private,void,read,parameter,annotations,final,method,visitor,method,visitor,final,context,context,final,int,runtime,parameter,annotations,offset,final,boolean,visible,int,current,offset,runtime,parameter,annotations,offset,int,num,parameters,b,current,offset,0x,ff,method,visitor,visit,annotable,parameter,count,num,parameters,visible,char,char,buffer,context,char,buffer,for,int,i,0,i,num,parameters,i,int,num,annotations,read,unsigned,short,current,offset,current,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,current,offset,read,element,values,method,visitor,visit,parameter,annotation,i,annotation,descriptor,visible,current,offset,true,char,buffer
ClassReader -> public int getItem(final int item);1366718246;Returns the start index of the constant pool item in {@link #b b}, plus_one. <i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param item_the index a constant pool item._@return the start index of the constant pool item in {@link #b b}, plus_one.;public int getItem(final int item) {_        return items[item]__    };returns,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,a,constant,pool,item,return,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one;public,int,get,item,final,int,item,return,items,item
ClassReader -> public int getItem(final int item);1395273982;Returns the start index of the constant pool item in {@link #b b}, plus_one. <i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param item_the index a constant pool item._@return the start index of the constant pool item in {@link #b b}, plus_one.;public int getItem(final int item) {_        return items[item]__    };returns,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,a,constant,pool,item,return,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one;public,int,get,item,final,int,item,return,items,item
ClassReader -> public int getItem(final int item);1414067099;Returns the start index of the constant pool item in {@link #b b}, plus_one. <i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param item_the index a constant pool item._@return the start index of the constant pool item in {@link #b b}, plus_one.;public int getItem(final int item) {_        return items[item]__    };returns,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,a,constant,pool,item,return,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one;public,int,get,item,final,int,item,return,items,item
ClassReader -> public int getItem(final int item);1414499035;Returns the start index of the constant pool item in {@link #b b}, plus_one. <i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param item_the index a constant pool item._@return the start index of the constant pool item in {@link #b b}, plus_one.;public int getItem(final int item) {_        return items[item]__    };returns,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,a,constant,pool,item,return,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one;public,int,get,item,final,int,item,return,items,item
ClassReader -> public int getItem(final int item);1416998550;Returns the start index of the constant pool item in {@link #b b}, plus_one. <i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param item_the index a constant pool item._@return the start index of the constant pool item in {@link #b b}, plus_one.;public int getItem(final int item) {_        return items[item]__    };returns,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,a,constant,pool,item,return,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one;public,int,get,item,final,int,item,return,items,item
ClassReader -> public int getItem(final int item);1457705343;Returns the start index of the constant pool item in {@link #b b}, plus_one. <i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param item_the index a constant pool item._@return the start index of the constant pool item in {@link #b b}, plus_one.;public int getItem(final int item) {_        return items[item]__    };returns,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,a,constant,pool,item,return,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one;public,int,get,item,final,int,item,return,items,item
ClassReader -> public int getItem(final int item);1459258703;Returns the start index of the constant pool item in {@link #b b}, plus_one. <i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param item_the index a constant pool item._@return the start index of the constant pool item in {@link #b b}, plus_one.;public int getItem(final int item) {_        return items[item]__    };returns,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,a,constant,pool,item,return,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one;public,int,get,item,final,int,item,return,items,item
ClassReader -> public int getItem(final int item);1478623137;Returns the start index of the constant pool item in {@link #b b}, plus_one. <i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param item_the index a constant pool item._@return the start index of the constant pool item in {@link #b b}, plus_one.;public int getItem(final int item) {_        return items[item]__    };returns,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,a,constant,pool,item,return,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one;public,int,get,item,final,int,item,return,items,item
ClassReader -> public int getItem(final int item);1483093254;Returns the start index of the constant pool item in {@link #b b}, plus_one. <i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param item_the index a constant pool item._@return the start index of the constant pool item in {@link #b b}, plus_one.;public int getItem(final int item) {_        return items[item]__    };returns,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,a,constant,pool,item,return,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one;public,int,get,item,final,int,item,return,items,item
ClassReader -> public int getItem(final int item);1505821772;Returns the start index of the constant pool item in {@link #b b}, plus_one. <i>This method is intended for {@link Attribute} sub classes, and is_normally not needed by class generators or adapters.</i>__@param item_the index a constant pool item._@return the start index of the constant pool item in {@link #b b}, plus_one.;public int getItem(final int item) {_        return items[item]__    };returns,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,item,the,index,a,constant,pool,item,return,the,start,index,of,the,constant,pool,item,in,link,b,b,plus,one;public,int,get,item,final,int,item,return,items,item
ClassReader -> public int readUnsignedShort(final int index);1366718246;Reads an unsigned short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readUnsignedShort(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,unsigned,short,final,int,index,byte,b,this,b,return,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public int readUnsignedShort(final int index);1395273982;Reads an unsigned short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readUnsignedShort(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,unsigned,short,final,int,index,byte,b,this,b,return,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public int readUnsignedShort(final int index);1414067099;Reads an unsigned short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readUnsignedShort(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,unsigned,short,final,int,index,byte,b,this,b,return,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public int readUnsignedShort(final int index);1414499035;Reads an unsigned short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readUnsignedShort(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,unsigned,short,final,int,index,byte,b,this,b,return,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public int readUnsignedShort(final int index);1416998550;Reads an unsigned short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readUnsignedShort(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,unsigned,short,final,int,index,byte,b,this,b,return,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public int readUnsignedShort(final int index);1457705343;Reads an unsigned short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readUnsignedShort(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,unsigned,short,final,int,index,byte,b,this,b,return,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public int readUnsignedShort(final int index);1459258703;Reads an unsigned short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readUnsignedShort(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,unsigned,short,final,int,index,byte,b,this,b,return,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public int readUnsignedShort(final int index);1478623137;Reads an unsigned short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readUnsignedShort(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,unsigned,short,final,int,index,byte,b,this,b,return,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public int readUnsignedShort(final int index);1483093254;Reads an unsigned short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readUnsignedShort(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,unsigned,short,final,int,index,byte,b,this,b,return,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public int readUnsignedShort(final int index);1505821772;Reads an unsigned short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readUnsignedShort(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,unsigned,short,final,int,index,byte,b,this,b,return,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> private Attribute readAttribute(final Attribute[] attrs, final String type,             final int off, final int len, final char[] buf, final int codeOff,             final Label[] labels);1366718246;Reads an attribute in {@link #b b}.__@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes is ignored (i.e. an empty_{@link Attribute} instance is returned)._@param type_the type of the attribute._@param off_index of the first byte of the attribute's content in_{@link #b b}. The 6 attribute header bytes, containing the_type and the length of the attribute, are not taken into_account here (they have already been read)._@param len_the length of the attribute's content._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param codeOff_index of the first byte of code's attribute content in_{@link #b b}, or -1 if the attribute to be read is not a code_attribute. The 6 attribute header bytes, containing the type_and the length of the attribute, are not taken into account_here._@param labels_the labels of the method's code, or <tt>null</tt> if the_attribute to be read is not a code attribute._@return the attribute that has been read, or <tt>null</tt> to skip this_attribute.;private Attribute readAttribute(final Attribute[] attrs, final String type,_            final int off, final int len, final char[] buf, final int codeOff,_            final Label[] labels) {_        for (int i = 0_ i < attrs.length_ ++i) {_            if (attrs[i].type.equals(type)) {_                return attrs[i].read(this, off, len, buf, codeOff, labels)__            }_        }_        return new Attribute(type).read(this, off, len, null, -1, null)__    };reads,an,attribute,in,link,b,b,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,is,ignored,i,e,an,empty,link,attribute,instance,is,returned,param,type,the,type,of,the,attribute,param,off,index,of,the,first,byte,of,the,attribute,s,content,in,link,b,b,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,they,have,already,been,read,param,len,the,length,of,the,attribute,s,content,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,code,off,index,of,the,first,byte,of,code,s,attribute,content,in,link,b,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,tt,null,tt,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read,or,tt,null,tt,to,skip,this,attribute;private,attribute,read,attribute,final,attribute,attrs,final,string,type,final,int,off,final,int,len,final,char,buf,final,int,code,off,final,label,labels,for,int,i,0,i,attrs,length,i,if,attrs,i,type,equals,type,return,attrs,i,read,this,off,len,buf,code,off,labels,return,new,attribute,type,read,this,off,len,null,1,null
ClassReader -> private Attribute readAttribute(final Attribute[] attrs, final String type,             final int off, final int len, final char[] buf, final int codeOff,             final Label[] labels);1395273982;Reads an attribute in {@link #b b}.__@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes is ignored (i.e. an empty_{@link Attribute} instance is returned)._@param type_the type of the attribute._@param off_index of the first byte of the attribute's content in_{@link #b b}. The 6 attribute header bytes, containing the_type and the length of the attribute, are not taken into_account here (they have already been read)._@param len_the length of the attribute's content._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param codeOff_index of the first byte of code's attribute content in_{@link #b b}, or -1 if the attribute to be read is not a code_attribute. The 6 attribute header bytes, containing the type_and the length of the attribute, are not taken into account_here._@param labels_the labels of the method's code, or <tt>null</tt> if the_attribute to be read is not a code attribute._@return the attribute that has been read, or <tt>null</tt> to skip this_attribute.;private Attribute readAttribute(final Attribute[] attrs, final String type,_            final int off, final int len, final char[] buf, final int codeOff,_            final Label[] labels) {_        for (int i = 0_ i < attrs.length_ ++i) {_            if (attrs[i].type.equals(type)) {_                return attrs[i].read(this, off, len, buf, codeOff, labels)__            }_        }_        return new Attribute(type).read(this, off, len, null, -1, null)__    };reads,an,attribute,in,link,b,b,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,is,ignored,i,e,an,empty,link,attribute,instance,is,returned,param,type,the,type,of,the,attribute,param,off,index,of,the,first,byte,of,the,attribute,s,content,in,link,b,b,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,they,have,already,been,read,param,len,the,length,of,the,attribute,s,content,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,code,off,index,of,the,first,byte,of,code,s,attribute,content,in,link,b,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,tt,null,tt,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read,or,tt,null,tt,to,skip,this,attribute;private,attribute,read,attribute,final,attribute,attrs,final,string,type,final,int,off,final,int,len,final,char,buf,final,int,code,off,final,label,labels,for,int,i,0,i,attrs,length,i,if,attrs,i,type,equals,type,return,attrs,i,read,this,off,len,buf,code,off,labels,return,new,attribute,type,read,this,off,len,null,1,null
ClassReader -> private Attribute readAttribute(final Attribute[] attrs, final String type,             final int off, final int len, final char[] buf, final int codeOff,             final Label[] labels);1414067099;Reads an attribute in {@link #b b}.__@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes is ignored (i.e. an empty_{@link Attribute} instance is returned)._@param type_the type of the attribute._@param off_index of the first byte of the attribute's content in_{@link #b b}. The 6 attribute header bytes, containing the_type and the length of the attribute, are not taken into_account here (they have already been read)._@param len_the length of the attribute's content._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param codeOff_index of the first byte of code's attribute content in_{@link #b b}, or -1 if the attribute to be read is not a code_attribute. The 6 attribute header bytes, containing the type_and the length of the attribute, are not taken into account_here._@param labels_the labels of the method's code, or <tt>null</tt> if the_attribute to be read is not a code attribute._@return the attribute that has been read, or <tt>null</tt> to skip this_attribute.;private Attribute readAttribute(final Attribute[] attrs, final String type,_            final int off, final int len, final char[] buf, final int codeOff,_            final Label[] labels) {_        for (int i = 0_ i < attrs.length_ ++i) {_            if (attrs[i].type.equals(type)) {_                return attrs[i].read(this, off, len, buf, codeOff, labels)__            }_        }_        return new Attribute(type).read(this, off, len, null, -1, null)__    };reads,an,attribute,in,link,b,b,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,is,ignored,i,e,an,empty,link,attribute,instance,is,returned,param,type,the,type,of,the,attribute,param,off,index,of,the,first,byte,of,the,attribute,s,content,in,link,b,b,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,they,have,already,been,read,param,len,the,length,of,the,attribute,s,content,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,code,off,index,of,the,first,byte,of,code,s,attribute,content,in,link,b,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,tt,null,tt,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read,or,tt,null,tt,to,skip,this,attribute;private,attribute,read,attribute,final,attribute,attrs,final,string,type,final,int,off,final,int,len,final,char,buf,final,int,code,off,final,label,labels,for,int,i,0,i,attrs,length,i,if,attrs,i,type,equals,type,return,attrs,i,read,this,off,len,buf,code,off,labels,return,new,attribute,type,read,this,off,len,null,1,null
ClassReader -> private Attribute readAttribute(final Attribute[] attrs, final String type,             final int off, final int len, final char[] buf, final int codeOff,             final Label[] labels);1414499035;Reads an attribute in {@link #b b}.__@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes is ignored (i.e. an empty_{@link Attribute} instance is returned)._@param type_the type of the attribute._@param off_index of the first byte of the attribute's content in_{@link #b b}. The 6 attribute header bytes, containing the_type and the length of the attribute, are not taken into_account here (they have already been read)._@param len_the length of the attribute's content._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param codeOff_index of the first byte of code's attribute content in_{@link #b b}, or -1 if the attribute to be read is not a code_attribute. The 6 attribute header bytes, containing the type_and the length of the attribute, are not taken into account_here._@param labels_the labels of the method's code, or <tt>null</tt> if the_attribute to be read is not a code attribute._@return the attribute that has been read, or <tt>null</tt> to skip this_attribute.;private Attribute readAttribute(final Attribute[] attrs, final String type,_            final int off, final int len, final char[] buf, final int codeOff,_            final Label[] labels) {_        for (int i = 0_ i < attrs.length_ ++i) {_            if (attrs[i].type.equals(type)) {_                return attrs[i].read(this, off, len, buf, codeOff, labels)__            }_        }_        return new Attribute(type).read(this, off, len, null, -1, null)__    };reads,an,attribute,in,link,b,b,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,is,ignored,i,e,an,empty,link,attribute,instance,is,returned,param,type,the,type,of,the,attribute,param,off,index,of,the,first,byte,of,the,attribute,s,content,in,link,b,b,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,they,have,already,been,read,param,len,the,length,of,the,attribute,s,content,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,code,off,index,of,the,first,byte,of,code,s,attribute,content,in,link,b,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,tt,null,tt,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read,or,tt,null,tt,to,skip,this,attribute;private,attribute,read,attribute,final,attribute,attrs,final,string,type,final,int,off,final,int,len,final,char,buf,final,int,code,off,final,label,labels,for,int,i,0,i,attrs,length,i,if,attrs,i,type,equals,type,return,attrs,i,read,this,off,len,buf,code,off,labels,return,new,attribute,type,read,this,off,len,null,1,null
ClassReader -> private Attribute readAttribute(final Attribute[] attrs, final String type,             final int off, final int len, final char[] buf, final int codeOff,             final Label[] labels);1416998550;Reads an attribute in {@link #b b}.__@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes is ignored (i.e. an empty_{@link Attribute} instance is returned)._@param type_the type of the attribute._@param off_index of the first byte of the attribute's content in_{@link #b b}. The 6 attribute header bytes, containing the_type and the length of the attribute, are not taken into_account here (they have already been read)._@param len_the length of the attribute's content._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param codeOff_index of the first byte of code's attribute content in_{@link #b b}, or -1 if the attribute to be read is not a code_attribute. The 6 attribute header bytes, containing the type_and the length of the attribute, are not taken into account_here._@param labels_the labels of the method's code, or <tt>null</tt> if the_attribute to be read is not a code attribute._@return the attribute that has been read, or <tt>null</tt> to skip this_attribute.;private Attribute readAttribute(final Attribute[] attrs, final String type,_            final int off, final int len, final char[] buf, final int codeOff,_            final Label[] labels) {_        for (int i = 0_ i < attrs.length_ ++i) {_            if (attrs[i].type.equals(type)) {_                return attrs[i].read(this, off, len, buf, codeOff, labels)__            }_        }_        return new Attribute(type).read(this, off, len, null, -1, null)__    };reads,an,attribute,in,link,b,b,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,is,ignored,i,e,an,empty,link,attribute,instance,is,returned,param,type,the,type,of,the,attribute,param,off,index,of,the,first,byte,of,the,attribute,s,content,in,link,b,b,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,they,have,already,been,read,param,len,the,length,of,the,attribute,s,content,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,code,off,index,of,the,first,byte,of,code,s,attribute,content,in,link,b,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,tt,null,tt,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read,or,tt,null,tt,to,skip,this,attribute;private,attribute,read,attribute,final,attribute,attrs,final,string,type,final,int,off,final,int,len,final,char,buf,final,int,code,off,final,label,labels,for,int,i,0,i,attrs,length,i,if,attrs,i,type,equals,type,return,attrs,i,read,this,off,len,buf,code,off,labels,return,new,attribute,type,read,this,off,len,null,1,null
ClassReader -> private Attribute readAttribute(final Attribute[] attrs, final String type,             final int off, final int len, final char[] buf, final int codeOff,             final Label[] labels);1457705343;Reads an attribute in {@link #b b}.__@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes is ignored (i.e. an empty_{@link Attribute} instance is returned)._@param type_the type of the attribute._@param off_index of the first byte of the attribute's content in_{@link #b b}. The 6 attribute header bytes, containing the_type and the length of the attribute, are not taken into_account here (they have already been read)._@param len_the length of the attribute's content._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param codeOff_index of the first byte of code's attribute content in_{@link #b b}, or -1 if the attribute to be read is not a code_attribute. The 6 attribute header bytes, containing the type_and the length of the attribute, are not taken into account_here._@param labels_the labels of the method's code, or <tt>null</tt> if the_attribute to be read is not a code attribute._@return the attribute that has been read, or <tt>null</tt> to skip this_attribute.;private Attribute readAttribute(final Attribute[] attrs, final String type,_            final int off, final int len, final char[] buf, final int codeOff,_            final Label[] labels) {_        for (int i = 0_ i < attrs.length_ ++i) {_            if (attrs[i].type.equals(type)) {_                return attrs[i].read(this, off, len, buf, codeOff, labels)__            }_        }_        return new Attribute(type).read(this, off, len, null, -1, null)__    };reads,an,attribute,in,link,b,b,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,is,ignored,i,e,an,empty,link,attribute,instance,is,returned,param,type,the,type,of,the,attribute,param,off,index,of,the,first,byte,of,the,attribute,s,content,in,link,b,b,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,they,have,already,been,read,param,len,the,length,of,the,attribute,s,content,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,code,off,index,of,the,first,byte,of,code,s,attribute,content,in,link,b,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,tt,null,tt,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read,or,tt,null,tt,to,skip,this,attribute;private,attribute,read,attribute,final,attribute,attrs,final,string,type,final,int,off,final,int,len,final,char,buf,final,int,code,off,final,label,labels,for,int,i,0,i,attrs,length,i,if,attrs,i,type,equals,type,return,attrs,i,read,this,off,len,buf,code,off,labels,return,new,attribute,type,read,this,off,len,null,1,null
ClassReader -> private Attribute readAttribute(final Attribute[] attrs, final String type,             final int off, final int len, final char[] buf, final int codeOff,             final Label[] labels);1459258703;Reads an attribute in {@link #b b}.__@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes is ignored (i.e. an empty_{@link Attribute} instance is returned)._@param type_the type of the attribute._@param off_index of the first byte of the attribute's content in_{@link #b b}. The 6 attribute header bytes, containing the_type and the length of the attribute, are not taken into_account here (they have already been read)._@param len_the length of the attribute's content._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param codeOff_index of the first byte of code's attribute content in_{@link #b b}, or -1 if the attribute to be read is not a code_attribute. The 6 attribute header bytes, containing the type_and the length of the attribute, are not taken into account_here._@param labels_the labels of the method's code, or <tt>null</tt> if the_attribute to be read is not a code attribute._@return the attribute that has been read, or <tt>null</tt> to skip this_attribute.;private Attribute readAttribute(final Attribute[] attrs, final String type,_            final int off, final int len, final char[] buf, final int codeOff,_            final Label[] labels) {_        for (int i = 0_ i < attrs.length_ ++i) {_            if (attrs[i].type.equals(type)) {_                return attrs[i].read(this, off, len, buf, codeOff, labels)__            }_        }_        return new Attribute(type).read(this, off, len, null, -1, null)__    };reads,an,attribute,in,link,b,b,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,is,ignored,i,e,an,empty,link,attribute,instance,is,returned,param,type,the,type,of,the,attribute,param,off,index,of,the,first,byte,of,the,attribute,s,content,in,link,b,b,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,they,have,already,been,read,param,len,the,length,of,the,attribute,s,content,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,code,off,index,of,the,first,byte,of,code,s,attribute,content,in,link,b,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,tt,null,tt,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read,or,tt,null,tt,to,skip,this,attribute;private,attribute,read,attribute,final,attribute,attrs,final,string,type,final,int,off,final,int,len,final,char,buf,final,int,code,off,final,label,labels,for,int,i,0,i,attrs,length,i,if,attrs,i,type,equals,type,return,attrs,i,read,this,off,len,buf,code,off,labels,return,new,attribute,type,read,this,off,len,null,1,null
ClassReader -> private Attribute readAttribute(final Attribute[] attrs, final String type,             final int off, final int len, final char[] buf, final int codeOff,             final Label[] labels);1478623137;Reads an attribute in {@link #b b}.__@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes is ignored (i.e. an empty_{@link Attribute} instance is returned)._@param type_the type of the attribute._@param off_index of the first byte of the attribute's content in_{@link #b b}. The 6 attribute header bytes, containing the_type and the length of the attribute, are not taken into_account here (they have already been read)._@param len_the length of the attribute's content._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param codeOff_index of the first byte of code's attribute content in_{@link #b b}, or -1 if the attribute to be read is not a code_attribute. The 6 attribute header bytes, containing the type_and the length of the attribute, are not taken into account_here._@param labels_the labels of the method's code, or <tt>null</tt> if the_attribute to be read is not a code attribute._@return the attribute that has been read, or <tt>null</tt> to skip this_attribute.;private Attribute readAttribute(final Attribute[] attrs, final String type,_            final int off, final int len, final char[] buf, final int codeOff,_            final Label[] labels) {_        for (int i = 0_ i < attrs.length_ ++i) {_            if (attrs[i].type.equals(type)) {_                return attrs[i].read(this, off, len, buf, codeOff, labels)__            }_        }_        return new Attribute(type).read(this, off, len, null, -1, null)__    };reads,an,attribute,in,link,b,b,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,is,ignored,i,e,an,empty,link,attribute,instance,is,returned,param,type,the,type,of,the,attribute,param,off,index,of,the,first,byte,of,the,attribute,s,content,in,link,b,b,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,they,have,already,been,read,param,len,the,length,of,the,attribute,s,content,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,code,off,index,of,the,first,byte,of,code,s,attribute,content,in,link,b,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,tt,null,tt,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read,or,tt,null,tt,to,skip,this,attribute;private,attribute,read,attribute,final,attribute,attrs,final,string,type,final,int,off,final,int,len,final,char,buf,final,int,code,off,final,label,labels,for,int,i,0,i,attrs,length,i,if,attrs,i,type,equals,type,return,attrs,i,read,this,off,len,buf,code,off,labels,return,new,attribute,type,read,this,off,len,null,1,null
ClassReader -> private Attribute readAttribute(final Attribute[] attrs, final String type,             final int off, final int len, final char[] buf, final int codeOff,             final Label[] labels);1483093254;Reads an attribute in {@link #b b}.__@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes is ignored (i.e. an empty_{@link Attribute} instance is returned)._@param type_the type of the attribute._@param off_index of the first byte of the attribute's content in_{@link #b b}. The 6 attribute header bytes, containing the_type and the length of the attribute, are not taken into_account here (they have already been read)._@param len_the length of the attribute's content._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param codeOff_index of the first byte of code's attribute content in_{@link #b b}, or -1 if the attribute to be read is not a code_attribute. The 6 attribute header bytes, containing the type_and the length of the attribute, are not taken into account_here._@param labels_the labels of the method's code, or <tt>null</tt> if the_attribute to be read is not a code attribute._@return the attribute that has been read, or <tt>null</tt> to skip this_attribute.;private Attribute readAttribute(final Attribute[] attrs, final String type,_            final int off, final int len, final char[] buf, final int codeOff,_            final Label[] labels) {_        for (int i = 0_ i < attrs.length_ ++i) {_            if (attrs[i].type.equals(type)) {_                return attrs[i].read(this, off, len, buf, codeOff, labels)__            }_        }_        return new Attribute(type).read(this, off, len, null, -1, null)__    };reads,an,attribute,in,link,b,b,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,is,ignored,i,e,an,empty,link,attribute,instance,is,returned,param,type,the,type,of,the,attribute,param,off,index,of,the,first,byte,of,the,attribute,s,content,in,link,b,b,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,they,have,already,been,read,param,len,the,length,of,the,attribute,s,content,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,code,off,index,of,the,first,byte,of,code,s,attribute,content,in,link,b,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,tt,null,tt,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read,or,tt,null,tt,to,skip,this,attribute;private,attribute,read,attribute,final,attribute,attrs,final,string,type,final,int,off,final,int,len,final,char,buf,final,int,code,off,final,label,labels,for,int,i,0,i,attrs,length,i,if,attrs,i,type,equals,type,return,attrs,i,read,this,off,len,buf,code,off,labels,return,new,attribute,type,read,this,off,len,null,1,null
ClassReader -> private Attribute readAttribute(final Attribute[] attrs, final String type,             final int off, final int len, final char[] buf, final int codeOff,             final Label[] labels);1505821772;Reads an attribute in {@link #b b}.__@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes is ignored (i.e. an empty_{@link Attribute} instance is returned)._@param type_the type of the attribute._@param off_index of the first byte of the attribute's content in_{@link #b b}. The 6 attribute header bytes, containing the_type and the length of the attribute, are not taken into_account here (they have already been read)._@param len_the length of the attribute's content._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param codeOff_index of the first byte of code's attribute content in_{@link #b b}, or -1 if the attribute to be read is not a code_attribute. The 6 attribute header bytes, containing the type_and the length of the attribute, are not taken into account_here._@param labels_the labels of the method's code, or <tt>null</tt> if the_attribute to be read is not a code attribute._@return the attribute that has been read, or <tt>null</tt> to skip this_attribute.;private Attribute readAttribute(final Attribute[] attrs, final String type,_            final int off, final int len, final char[] buf, final int codeOff,_            final Label[] labels) {_        for (int i = 0_ i < attrs.length_ ++i) {_            if (attrs[i].type.equals(type)) {_                return attrs[i].read(this, off, len, buf, codeOff, labels)__            }_        }_        return new Attribute(type).read(this, off, len, null, -1, null)__    };reads,an,attribute,in,link,b,b,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,is,ignored,i,e,an,empty,link,attribute,instance,is,returned,param,type,the,type,of,the,attribute,param,off,index,of,the,first,byte,of,the,attribute,s,content,in,link,b,b,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,they,have,already,been,read,param,len,the,length,of,the,attribute,s,content,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,code,off,index,of,the,first,byte,of,code,s,attribute,content,in,link,b,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,containing,the,type,and,the,length,of,the,attribute,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,tt,null,tt,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read,or,tt,null,tt,to,skip,this,attribute;private,attribute,read,attribute,final,attribute,attrs,final,string,type,final,int,off,final,int,len,final,char,buf,final,int,code,off,final,label,labels,for,int,i,0,i,attrs,length,i,if,attrs,i,type,equals,type,return,attrs,i,read,this,off,len,buf,code,off,labels,return,new,attribute,type,read,this,off,len,null,1,null
ClassReader -> private int readMethod(       final ClassVisitor classVisitor, final Context context, final int methodInfoOffset);1531241461;Reads a JVMS method_info structure and makes the given visitor visit it.__@param classVisitor the visitor that must visit the method._@param context information about the class being parsed._@param methodInfoOffset the start offset of the method_info structure._@return the offset of the first byte following the method_info structure.;private int readMethod(_      final ClassVisitor classVisitor, final Context context, final int methodInfoOffset) {_    char[] charBuffer = context.charBuffer___    _    int currentOffset = methodInfoOffset__    context.currentMethodAccessFlags = readUnsignedShort(currentOffset)__    context.currentMethodName = readUTF8(currentOffset + 2, charBuffer)__    context.currentMethodDescriptor = readUTF8(currentOffset + 4, charBuffer)__    currentOffset += 6___    _    _    _    int codeOffset = 0__    _    int exceptionsOffset = 0__    _    String[] exceptions = null__    _    boolean synthetic = false__    _    int signatureIndex = 0__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleParameterAnnotationsOffset = 0__    _    int runtimeInvisibleParameterAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    int annotationDefaultOffset = 0__    _    int methodParametersOffset = 0__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      _      _      if (Constants.CODE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_CODE) == 0) {_          codeOffset = currentOffset__        }_      } else if (Constants.EXCEPTIONS.equals(attributeName)) {_        exceptionsOffset = currentOffset__        exceptions = new String[readUnsignedShort(exceptionsOffset)]__        int currentExceptionOffset = exceptionsOffset + 2__        for (int i = 0_ i < exceptions.length_ ++i) {_          exceptions[i] = readClass(currentExceptionOffset, charBuffer)__          currentExceptionOffset += 2__        }_      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signatureIndex = readUnsignedShort(currentOffset)__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        context.currentMethodAccessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.ANNOTATION_DEFAULT.equals(attributeName)) {_        annotationDefaultOffset = currentOffset__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        synthetic = true__        context.currentMethodAccessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleParameterAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleParameterAnnotationsOffset = currentOffset__      } else if (Constants.METHOD_PARAMETERS.equals(attributeName)) {_        methodParametersOffset = currentOffset__      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    MethodVisitor methodVisitor =_        classVisitor.visitMethod(_            context.currentMethodAccessFlags,_            context.currentMethodName,_            context.currentMethodDescriptor,_            signatureIndex == 0 ? null : readUTF(signatureIndex, charBuffer),_            exceptions)__    if (methodVisitor == null) {_      return currentOffset__    }__    _    _    _    _    if (methodVisitor instanceof MethodWriter) {_      MethodWriter methodWriter = (MethodWriter) methodVisitor__      if (methodWriter.canCopyMethodAttributes(_          this,_          methodInfoOffset,_          currentOffset - methodInfoOffset,_          synthetic,_          (context.currentMethodAccessFlags & Opcodes.ACC_DEPRECATED) != 0,_          readUnsignedShort(methodInfoOffset + 4),_          signatureIndex,_          exceptionsOffset)) {_        return currentOffset__      }_    }__    _    if (methodParametersOffset != 0) {_      int parametersCount = readByte(methodParametersOffset)__      int currentParameterOffset = methodParametersOffset + 1__      while (parametersCount-- > 0) {_        _        methodVisitor.visitParameter(_            readUTF8(currentParameterOffset, charBuffer),_            readUnsignedShort(currentParameterOffset + 2))__        currentParameterOffset += 4__      }_    }__    _    if (annotationDefaultOffset != 0) {_      AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotationDefault()__      readElementValue(annotationVisitor, annotationDefaultOffset, null, charBuffer)__      if (annotationVisitor != null) {_        annotationVisitor.visitEnd()__      }_    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleParameterAnnotationsOffset != 0) {_      readParameterAnnotations(_          methodVisitor, context, runtimeVisibleParameterAnnotationsOffset,  true)__    }__    _    if (runtimeInvisibleParameterAnnotationsOffset != 0) {_      readParameterAnnotations(_          methodVisitor,_          context,_          runtimeInvisibleParameterAnnotationsOffset,_           false)__    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      methodVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    if (codeOffset != 0) {_      methodVisitor.visitCode()__      readCode(methodVisitor, context, codeOffset)__    }__    _    methodVisitor.visitEnd()__    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,method,info,offset,the,start,offset,of,the,structure,return,the,offset,of,the,first,byte,following,the,structure;private,int,read,method,final,class,visitor,class,visitor,final,context,context,final,int,method,info,offset,char,char,buffer,context,char,buffer,int,current,offset,method,info,offset,context,current,method,access,flags,read,unsigned,short,current,offset,context,current,method,name,read,utf8,current,offset,2,char,buffer,context,current,method,descriptor,read,utf8,current,offset,4,char,buffer,current,offset,6,int,code,offset,0,int,exceptions,offset,0,string,exceptions,null,boolean,synthetic,false,int,signature,index,0,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,parameter,annotations,offset,0,int,runtime,invisible,parameter,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,int,annotation,default,offset,0,int,method,parameters,offset,0,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,code,equals,attribute,name,if,context,parsing,options,0,code,offset,current,offset,else,if,constants,exceptions,equals,attribute,name,exceptions,offset,current,offset,exceptions,new,string,read,unsigned,short,exceptions,offset,int,current,exception,offset,exceptions,offset,2,for,int,i,0,i,exceptions,length,i,exceptions,i,read,class,current,exception,offset,char,buffer,current,exception,offset,2,else,if,constants,signature,equals,attribute,name,signature,index,read,unsigned,short,current,offset,else,if,constants,deprecated,equals,attribute,name,context,current,method,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,annotation,default,offset,current,offset,else,if,constants,synthetic,equals,attribute,name,synthetic,true,context,current,method,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,parameter,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,parameter,annotations,offset,current,offset,else,if,constants,equals,attribute,name,method,parameters,offset,current,offset,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,method,visitor,method,visitor,class,visitor,visit,method,context,current,method,access,flags,context,current,method,name,context,current,method,descriptor,signature,index,0,null,read,utf,signature,index,char,buffer,exceptions,if,method,visitor,null,return,current,offset,if,method,visitor,instanceof,method,writer,method,writer,method,writer,method,writer,method,visitor,if,method,writer,can,copy,method,attributes,this,method,info,offset,current,offset,method,info,offset,synthetic,context,current,method,access,flags,opcodes,0,read,unsigned,short,method,info,offset,4,signature,index,exceptions,offset,return,current,offset,if,method,parameters,offset,0,int,parameters,count,read,byte,method,parameters,offset,int,current,parameter,offset,method,parameters,offset,1,while,parameters,count,0,method,visitor,visit,parameter,read,utf8,current,parameter,offset,char,buffer,read,unsigned,short,current,parameter,offset,2,current,parameter,offset,4,if,annotation,default,offset,0,annotation,visitor,annotation,visitor,method,visitor,visit,annotation,default,read,element,value,annotation,visitor,annotation,default,offset,null,char,buffer,if,annotation,visitor,null,annotation,visitor,visit,end,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,parameter,annotations,offset,0,read,parameter,annotations,method,visitor,context,runtime,visible,parameter,annotations,offset,true,if,runtime,invisible,parameter,annotations,offset,0,read,parameter,annotations,method,visitor,context,runtime,invisible,parameter,annotations,offset,false,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,method,visitor,visit,attribute,attributes,attributes,next,attribute,if,code,offset,0,method,visitor,visit,code,read,code,method,visitor,context,code,offset,method,visitor,visit,end,return,current,offset
ClassReader -> private int readMethod(       final ClassVisitor classVisitor, final Context context, final int methodInfoOffset);1536664245;Reads a JVMS method_info structure and makes the given visitor visit it.__@param classVisitor the visitor that must visit the method._@param context information about the class being parsed._@param methodInfoOffset the start offset of the method_info structure._@return the offset of the first byte following the method_info structure.;private int readMethod(_      final ClassVisitor classVisitor, final Context context, final int methodInfoOffset) {_    char[] charBuffer = context.charBuffer___    _    int currentOffset = methodInfoOffset__    context.currentMethodAccessFlags = readUnsignedShort(currentOffset)__    context.currentMethodName = readUTF8(currentOffset + 2, charBuffer)__    context.currentMethodDescriptor = readUTF8(currentOffset + 4, charBuffer)__    currentOffset += 6___    _    _    _    int codeOffset = 0__    _    int exceptionsOffset = 0__    _    String[] exceptions = null__    _    boolean synthetic = false__    _    int signatureIndex = 0__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleParameterAnnotationsOffset = 0__    _    int runtimeInvisibleParameterAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    int annotationDefaultOffset = 0__    _    int methodParametersOffset = 0__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      _      _      if (Constants.CODE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_CODE) == 0) {_          codeOffset = currentOffset__        }_      } else if (Constants.EXCEPTIONS.equals(attributeName)) {_        exceptionsOffset = currentOffset__        exceptions = new String[readUnsignedShort(exceptionsOffset)]__        int currentExceptionOffset = exceptionsOffset + 2__        for (int i = 0_ i < exceptions.length_ ++i) {_          exceptions[i] = readClass(currentExceptionOffset, charBuffer)__          currentExceptionOffset += 2__        }_      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signatureIndex = readUnsignedShort(currentOffset)__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        context.currentMethodAccessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.ANNOTATION_DEFAULT.equals(attributeName)) {_        annotationDefaultOffset = currentOffset__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        synthetic = true__        context.currentMethodAccessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleParameterAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleParameterAnnotationsOffset = currentOffset__      } else if (Constants.METHOD_PARAMETERS.equals(attributeName)) {_        methodParametersOffset = currentOffset__      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    MethodVisitor methodVisitor =_        classVisitor.visitMethod(_            context.currentMethodAccessFlags,_            context.currentMethodName,_            context.currentMethodDescriptor,_            signatureIndex == 0 ? null : readUTF(signatureIndex, charBuffer),_            exceptions)__    if (methodVisitor == null) {_      return currentOffset__    }__    _    _    _    _    if (methodVisitor instanceof MethodWriter) {_      MethodWriter methodWriter = (MethodWriter) methodVisitor__      if (methodWriter.canCopyMethodAttributes(_          this,_          methodInfoOffset,_          currentOffset - methodInfoOffset,_          synthetic,_          (context.currentMethodAccessFlags & Opcodes.ACC_DEPRECATED) != 0,_          readUnsignedShort(methodInfoOffset + 4),_          signatureIndex,_          exceptionsOffset)) {_        return currentOffset__      }_    }__    _    if (methodParametersOffset != 0) {_      int parametersCount = readByte(methodParametersOffset)__      int currentParameterOffset = methodParametersOffset + 1__      while (parametersCount-- > 0) {_        _        methodVisitor.visitParameter(_            readUTF8(currentParameterOffset, charBuffer),_            readUnsignedShort(currentParameterOffset + 2))__        currentParameterOffset += 4__      }_    }__    _    if (annotationDefaultOffset != 0) {_      AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotationDefault()__      readElementValue(annotationVisitor, annotationDefaultOffset, null, charBuffer)__      if (annotationVisitor != null) {_        annotationVisitor.visitEnd()__      }_    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleParameterAnnotationsOffset != 0) {_      readParameterAnnotations(_          methodVisitor, context, runtimeVisibleParameterAnnotationsOffset,  true)__    }__    _    if (runtimeInvisibleParameterAnnotationsOffset != 0) {_      readParameterAnnotations(_          methodVisitor,_          context,_          runtimeInvisibleParameterAnnotationsOffset,_           false)__    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      methodVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    if (codeOffset != 0) {_      methodVisitor.visitCode()__      readCode(methodVisitor, context, codeOffset)__    }__    _    methodVisitor.visitEnd()__    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,method,info,offset,the,start,offset,of,the,structure,return,the,offset,of,the,first,byte,following,the,structure;private,int,read,method,final,class,visitor,class,visitor,final,context,context,final,int,method,info,offset,char,char,buffer,context,char,buffer,int,current,offset,method,info,offset,context,current,method,access,flags,read,unsigned,short,current,offset,context,current,method,name,read,utf8,current,offset,2,char,buffer,context,current,method,descriptor,read,utf8,current,offset,4,char,buffer,current,offset,6,int,code,offset,0,int,exceptions,offset,0,string,exceptions,null,boolean,synthetic,false,int,signature,index,0,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,parameter,annotations,offset,0,int,runtime,invisible,parameter,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,int,annotation,default,offset,0,int,method,parameters,offset,0,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,code,equals,attribute,name,if,context,parsing,options,0,code,offset,current,offset,else,if,constants,exceptions,equals,attribute,name,exceptions,offset,current,offset,exceptions,new,string,read,unsigned,short,exceptions,offset,int,current,exception,offset,exceptions,offset,2,for,int,i,0,i,exceptions,length,i,exceptions,i,read,class,current,exception,offset,char,buffer,current,exception,offset,2,else,if,constants,signature,equals,attribute,name,signature,index,read,unsigned,short,current,offset,else,if,constants,deprecated,equals,attribute,name,context,current,method,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,annotation,default,offset,current,offset,else,if,constants,synthetic,equals,attribute,name,synthetic,true,context,current,method,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,parameter,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,parameter,annotations,offset,current,offset,else,if,constants,equals,attribute,name,method,parameters,offset,current,offset,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,method,visitor,method,visitor,class,visitor,visit,method,context,current,method,access,flags,context,current,method,name,context,current,method,descriptor,signature,index,0,null,read,utf,signature,index,char,buffer,exceptions,if,method,visitor,null,return,current,offset,if,method,visitor,instanceof,method,writer,method,writer,method,writer,method,writer,method,visitor,if,method,writer,can,copy,method,attributes,this,method,info,offset,current,offset,method,info,offset,synthetic,context,current,method,access,flags,opcodes,0,read,unsigned,short,method,info,offset,4,signature,index,exceptions,offset,return,current,offset,if,method,parameters,offset,0,int,parameters,count,read,byte,method,parameters,offset,int,current,parameter,offset,method,parameters,offset,1,while,parameters,count,0,method,visitor,visit,parameter,read,utf8,current,parameter,offset,char,buffer,read,unsigned,short,current,parameter,offset,2,current,parameter,offset,4,if,annotation,default,offset,0,annotation,visitor,annotation,visitor,method,visitor,visit,annotation,default,read,element,value,annotation,visitor,annotation,default,offset,null,char,buffer,if,annotation,visitor,null,annotation,visitor,visit,end,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,parameter,annotations,offset,0,read,parameter,annotations,method,visitor,context,runtime,visible,parameter,annotations,offset,true,if,runtime,invisible,parameter,annotations,offset,0,read,parameter,annotations,method,visitor,context,runtime,invisible,parameter,annotations,offset,false,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,method,visitor,visit,attribute,attributes,attributes,next,attribute,if,code,offset,0,method,visitor,visit,code,read,code,method,visitor,context,code,offset,method,visitor,visit,end,return,current,offset
ClassReader -> private int readMethod(       final ClassVisitor classVisitor, final Context context, final int methodInfoOffset);1536747989;Reads a JVMS method_info structure and makes the given visitor visit it.__@param classVisitor the visitor that must visit the method._@param context information about the class being parsed._@param methodInfoOffset the start offset of the method_info structure._@return the offset of the first byte following the method_info structure.;private int readMethod(_      final ClassVisitor classVisitor, final Context context, final int methodInfoOffset) {_    char[] charBuffer = context.charBuffer___    _    int currentOffset = methodInfoOffset__    context.currentMethodAccessFlags = readUnsignedShort(currentOffset)__    context.currentMethodName = readUTF8(currentOffset + 2, charBuffer)__    context.currentMethodDescriptor = readUTF8(currentOffset + 4, charBuffer)__    currentOffset += 6___    _    _    _    int codeOffset = 0__    _    int exceptionsOffset = 0__    _    String[] exceptions = null__    _    boolean synthetic = false__    _    int signatureIndex = 0__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleParameterAnnotationsOffset = 0__    _    int runtimeInvisibleParameterAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    int annotationDefaultOffset = 0__    _    int methodParametersOffset = 0__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      _      _      if (Constants.CODE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_CODE) == 0) {_          codeOffset = currentOffset__        }_      } else if (Constants.EXCEPTIONS.equals(attributeName)) {_        exceptionsOffset = currentOffset__        exceptions = new String[readUnsignedShort(exceptionsOffset)]__        int currentExceptionOffset = exceptionsOffset + 2__        for (int i = 0_ i < exceptions.length_ ++i) {_          exceptions[i] = readClass(currentExceptionOffset, charBuffer)__          currentExceptionOffset += 2__        }_      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signatureIndex = readUnsignedShort(currentOffset)__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        context.currentMethodAccessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.ANNOTATION_DEFAULT.equals(attributeName)) {_        annotationDefaultOffset = currentOffset__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        synthetic = true__        context.currentMethodAccessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleParameterAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleParameterAnnotationsOffset = currentOffset__      } else if (Constants.METHOD_PARAMETERS.equals(attributeName)) {_        methodParametersOffset = currentOffset__      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    MethodVisitor methodVisitor =_        classVisitor.visitMethod(_            context.currentMethodAccessFlags,_            context.currentMethodName,_            context.currentMethodDescriptor,_            signatureIndex == 0 ? null : readUTF(signatureIndex, charBuffer),_            exceptions)__    if (methodVisitor == null) {_      return currentOffset__    }__    _    _    _    _    if (methodVisitor instanceof MethodWriter) {_      MethodWriter methodWriter = (MethodWriter) methodVisitor__      if (methodWriter.canCopyMethodAttributes(_          this,_          methodInfoOffset,_          currentOffset - methodInfoOffset,_          synthetic,_          (context.currentMethodAccessFlags & Opcodes.ACC_DEPRECATED) != 0,_          readUnsignedShort(methodInfoOffset + 4),_          signatureIndex,_          exceptionsOffset)) {_        return currentOffset__      }_    }__    _    if (methodParametersOffset != 0) {_      int parametersCount = readByte(methodParametersOffset)__      int currentParameterOffset = methodParametersOffset + 1__      while (parametersCount-- > 0) {_        _        methodVisitor.visitParameter(_            readUTF8(currentParameterOffset, charBuffer),_            readUnsignedShort(currentParameterOffset + 2))__        currentParameterOffset += 4__      }_    }__    _    if (annotationDefaultOffset != 0) {_      AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotationDefault()__      readElementValue(annotationVisitor, annotationDefaultOffset, null, charBuffer)__      if (annotationVisitor != null) {_        annotationVisitor.visitEnd()__      }_    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleParameterAnnotationsOffset != 0) {_      readParameterAnnotations(_          methodVisitor, context, runtimeVisibleParameterAnnotationsOffset,  true)__    }__    _    if (runtimeInvisibleParameterAnnotationsOffset != 0) {_      readParameterAnnotations(_          methodVisitor,_          context,_          runtimeInvisibleParameterAnnotationsOffset,_           false)__    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      methodVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    if (codeOffset != 0) {_      methodVisitor.visitCode()__      readCode(methodVisitor, context, codeOffset)__    }__    _    methodVisitor.visitEnd()__    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,method,info,offset,the,start,offset,of,the,structure,return,the,offset,of,the,first,byte,following,the,structure;private,int,read,method,final,class,visitor,class,visitor,final,context,context,final,int,method,info,offset,char,char,buffer,context,char,buffer,int,current,offset,method,info,offset,context,current,method,access,flags,read,unsigned,short,current,offset,context,current,method,name,read,utf8,current,offset,2,char,buffer,context,current,method,descriptor,read,utf8,current,offset,4,char,buffer,current,offset,6,int,code,offset,0,int,exceptions,offset,0,string,exceptions,null,boolean,synthetic,false,int,signature,index,0,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,parameter,annotations,offset,0,int,runtime,invisible,parameter,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,int,annotation,default,offset,0,int,method,parameters,offset,0,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,code,equals,attribute,name,if,context,parsing,options,0,code,offset,current,offset,else,if,constants,exceptions,equals,attribute,name,exceptions,offset,current,offset,exceptions,new,string,read,unsigned,short,exceptions,offset,int,current,exception,offset,exceptions,offset,2,for,int,i,0,i,exceptions,length,i,exceptions,i,read,class,current,exception,offset,char,buffer,current,exception,offset,2,else,if,constants,signature,equals,attribute,name,signature,index,read,unsigned,short,current,offset,else,if,constants,deprecated,equals,attribute,name,context,current,method,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,annotation,default,offset,current,offset,else,if,constants,synthetic,equals,attribute,name,synthetic,true,context,current,method,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,parameter,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,parameter,annotations,offset,current,offset,else,if,constants,equals,attribute,name,method,parameters,offset,current,offset,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,method,visitor,method,visitor,class,visitor,visit,method,context,current,method,access,flags,context,current,method,name,context,current,method,descriptor,signature,index,0,null,read,utf,signature,index,char,buffer,exceptions,if,method,visitor,null,return,current,offset,if,method,visitor,instanceof,method,writer,method,writer,method,writer,method,writer,method,visitor,if,method,writer,can,copy,method,attributes,this,method,info,offset,current,offset,method,info,offset,synthetic,context,current,method,access,flags,opcodes,0,read,unsigned,short,method,info,offset,4,signature,index,exceptions,offset,return,current,offset,if,method,parameters,offset,0,int,parameters,count,read,byte,method,parameters,offset,int,current,parameter,offset,method,parameters,offset,1,while,parameters,count,0,method,visitor,visit,parameter,read,utf8,current,parameter,offset,char,buffer,read,unsigned,short,current,parameter,offset,2,current,parameter,offset,4,if,annotation,default,offset,0,annotation,visitor,annotation,visitor,method,visitor,visit,annotation,default,read,element,value,annotation,visitor,annotation,default,offset,null,char,buffer,if,annotation,visitor,null,annotation,visitor,visit,end,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,parameter,annotations,offset,0,read,parameter,annotations,method,visitor,context,runtime,visible,parameter,annotations,offset,true,if,runtime,invisible,parameter,annotations,offset,0,read,parameter,annotations,method,visitor,context,runtime,invisible,parameter,annotations,offset,false,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,method,visitor,visit,attribute,attributes,attributes,next,attribute,if,code,offset,0,method,visitor,visit,code,read,code,method,visitor,context,code,offset,method,visitor,visit,end,return,current,offset
ClassReader -> private int readMethod(       final ClassVisitor classVisitor, final Context context, final int methodInfoOffset);1537204147;Reads a JVMS method_info structure and makes the given visitor visit it.__@param classVisitor the visitor that must visit the method._@param context information about the class being parsed._@param methodInfoOffset the start offset of the method_info structure._@return the offset of the first byte following the method_info structure.;private int readMethod(_      final ClassVisitor classVisitor, final Context context, final int methodInfoOffset) {_    char[] charBuffer = context.charBuffer___    _    int currentOffset = methodInfoOffset__    context.currentMethodAccessFlags = readUnsignedShort(currentOffset)__    context.currentMethodName = readUTF8(currentOffset + 2, charBuffer)__    context.currentMethodDescriptor = readUTF8(currentOffset + 4, charBuffer)__    currentOffset += 6___    _    _    _    int codeOffset = 0__    _    int exceptionsOffset = 0__    _    String[] exceptions = null__    _    boolean synthetic = false__    _    int signatureIndex = 0__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleParameterAnnotationsOffset = 0__    _    int runtimeInvisibleParameterAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    int annotationDefaultOffset = 0__    _    int methodParametersOffset = 0__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      _      _      if (Constants.CODE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_CODE) == 0) {_          codeOffset = currentOffset__        }_      } else if (Constants.EXCEPTIONS.equals(attributeName)) {_        exceptionsOffset = currentOffset__        exceptions = new String[readUnsignedShort(exceptionsOffset)]__        int currentExceptionOffset = exceptionsOffset + 2__        for (int i = 0_ i < exceptions.length_ ++i) {_          exceptions[i] = readClass(currentExceptionOffset, charBuffer)__          currentExceptionOffset += 2__        }_      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signatureIndex = readUnsignedShort(currentOffset)__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        context.currentMethodAccessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.ANNOTATION_DEFAULT.equals(attributeName)) {_        annotationDefaultOffset = currentOffset__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        synthetic = true__        context.currentMethodAccessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleParameterAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleParameterAnnotationsOffset = currentOffset__      } else if (Constants.METHOD_PARAMETERS.equals(attributeName)) {_        methodParametersOffset = currentOffset__      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    MethodVisitor methodVisitor =_        classVisitor.visitMethod(_            context.currentMethodAccessFlags,_            context.currentMethodName,_            context.currentMethodDescriptor,_            signatureIndex == 0 ? null : readUtf(signatureIndex, charBuffer),_            exceptions)__    if (methodVisitor == null) {_      return currentOffset__    }__    _    _    _    _    if (methodVisitor instanceof MethodWriter) {_      MethodWriter methodWriter = (MethodWriter) methodVisitor__      if (methodWriter.canCopyMethodAttributes(_          this,_          methodInfoOffset,_          currentOffset - methodInfoOffset,_          synthetic,_          (context.currentMethodAccessFlags & Opcodes.ACC_DEPRECATED) != 0,_          readUnsignedShort(methodInfoOffset + 4),_          signatureIndex,_          exceptionsOffset)) {_        return currentOffset__      }_    }__    _    if (methodParametersOffset != 0) {_      int parametersCount = readByte(methodParametersOffset)__      int currentParameterOffset = methodParametersOffset + 1__      while (parametersCount-- > 0) {_        _        methodVisitor.visitParameter(_            readUTF8(currentParameterOffset, charBuffer),_            readUnsignedShort(currentParameterOffset + 2))__        currentParameterOffset += 4__      }_    }__    _    if (annotationDefaultOffset != 0) {_      AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotationDefault()__      readElementValue(annotationVisitor, annotationDefaultOffset, null, charBuffer)__      if (annotationVisitor != null) {_        annotationVisitor.visitEnd()__      }_    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleParameterAnnotationsOffset != 0) {_      readParameterAnnotations(_          methodVisitor, context, runtimeVisibleParameterAnnotationsOffset,  true)__    }__    _    if (runtimeInvisibleParameterAnnotationsOffset != 0) {_      readParameterAnnotations(_          methodVisitor,_          context,_          runtimeInvisibleParameterAnnotationsOffset,_           false)__    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      methodVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    if (codeOffset != 0) {_      methodVisitor.visitCode()__      readCode(methodVisitor, context, codeOffset)__    }__    _    methodVisitor.visitEnd()__    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,method,info,offset,the,start,offset,of,the,structure,return,the,offset,of,the,first,byte,following,the,structure;private,int,read,method,final,class,visitor,class,visitor,final,context,context,final,int,method,info,offset,char,char,buffer,context,char,buffer,int,current,offset,method,info,offset,context,current,method,access,flags,read,unsigned,short,current,offset,context,current,method,name,read,utf8,current,offset,2,char,buffer,context,current,method,descriptor,read,utf8,current,offset,4,char,buffer,current,offset,6,int,code,offset,0,int,exceptions,offset,0,string,exceptions,null,boolean,synthetic,false,int,signature,index,0,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,parameter,annotations,offset,0,int,runtime,invisible,parameter,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,int,annotation,default,offset,0,int,method,parameters,offset,0,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,code,equals,attribute,name,if,context,parsing,options,0,code,offset,current,offset,else,if,constants,exceptions,equals,attribute,name,exceptions,offset,current,offset,exceptions,new,string,read,unsigned,short,exceptions,offset,int,current,exception,offset,exceptions,offset,2,for,int,i,0,i,exceptions,length,i,exceptions,i,read,class,current,exception,offset,char,buffer,current,exception,offset,2,else,if,constants,signature,equals,attribute,name,signature,index,read,unsigned,short,current,offset,else,if,constants,deprecated,equals,attribute,name,context,current,method,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,annotation,default,offset,current,offset,else,if,constants,synthetic,equals,attribute,name,synthetic,true,context,current,method,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,parameter,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,parameter,annotations,offset,current,offset,else,if,constants,equals,attribute,name,method,parameters,offset,current,offset,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,method,visitor,method,visitor,class,visitor,visit,method,context,current,method,access,flags,context,current,method,name,context,current,method,descriptor,signature,index,0,null,read,utf,signature,index,char,buffer,exceptions,if,method,visitor,null,return,current,offset,if,method,visitor,instanceof,method,writer,method,writer,method,writer,method,writer,method,visitor,if,method,writer,can,copy,method,attributes,this,method,info,offset,current,offset,method,info,offset,synthetic,context,current,method,access,flags,opcodes,0,read,unsigned,short,method,info,offset,4,signature,index,exceptions,offset,return,current,offset,if,method,parameters,offset,0,int,parameters,count,read,byte,method,parameters,offset,int,current,parameter,offset,method,parameters,offset,1,while,parameters,count,0,method,visitor,visit,parameter,read,utf8,current,parameter,offset,char,buffer,read,unsigned,short,current,parameter,offset,2,current,parameter,offset,4,if,annotation,default,offset,0,annotation,visitor,annotation,visitor,method,visitor,visit,annotation,default,read,element,value,annotation,visitor,annotation,default,offset,null,char,buffer,if,annotation,visitor,null,annotation,visitor,visit,end,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,parameter,annotations,offset,0,read,parameter,annotations,method,visitor,context,runtime,visible,parameter,annotations,offset,true,if,runtime,invisible,parameter,annotations,offset,0,read,parameter,annotations,method,visitor,context,runtime,invisible,parameter,annotations,offset,false,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,method,visitor,visit,attribute,attributes,attributes,next,attribute,if,code,offset,0,method,visitor,visit,code,read,code,method,visitor,context,code,offset,method,visitor,visit,end,return,current,offset
ClassReader -> private int readMethod(       final ClassVisitor classVisitor, final Context context, final int methodInfoOffset);1539119582;Reads a JVMS method_info structure and makes the given visitor visit it.__@param classVisitor the visitor that must visit the method._@param context information about the class being parsed._@param methodInfoOffset the start offset of the method_info structure._@return the offset of the first byte following the method_info structure.;private int readMethod(_      final ClassVisitor classVisitor, final Context context, final int methodInfoOffset) {_    char[] charBuffer = context.charBuffer___    _    int currentOffset = methodInfoOffset__    context.currentMethodAccessFlags = readUnsignedShort(currentOffset)__    context.currentMethodName = readUTF8(currentOffset + 2, charBuffer)__    context.currentMethodDescriptor = readUTF8(currentOffset + 4, charBuffer)__    currentOffset += 6___    _    _    _    int codeOffset = 0__    _    int exceptionsOffset = 0__    _    String[] exceptions = null__    _    boolean synthetic = false__    _    int signatureIndex = 0__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleParameterAnnotationsOffset = 0__    _    int runtimeInvisibleParameterAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    int annotationDefaultOffset = 0__    _    int methodParametersOffset = 0__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      _      _      if (Constants.CODE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_CODE) == 0) {_          codeOffset = currentOffset__        }_      } else if (Constants.EXCEPTIONS.equals(attributeName)) {_        exceptionsOffset = currentOffset__        exceptions = new String[readUnsignedShort(exceptionsOffset)]__        int currentExceptionOffset = exceptionsOffset + 2__        for (int i = 0_ i < exceptions.length_ ++i) {_          exceptions[i] = readClass(currentExceptionOffset, charBuffer)__          currentExceptionOffset += 2__        }_      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signatureIndex = readUnsignedShort(currentOffset)__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        context.currentMethodAccessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.ANNOTATION_DEFAULT.equals(attributeName)) {_        annotationDefaultOffset = currentOffset__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        synthetic = true__        context.currentMethodAccessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleParameterAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleParameterAnnotationsOffset = currentOffset__      } else if (Constants.METHOD_PARAMETERS.equals(attributeName)) {_        methodParametersOffset = currentOffset__      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    MethodVisitor methodVisitor =_        classVisitor.visitMethod(_            context.currentMethodAccessFlags,_            context.currentMethodName,_            context.currentMethodDescriptor,_            signatureIndex == 0 ? null : readUtf(signatureIndex, charBuffer),_            exceptions)__    if (methodVisitor == null) {_      return currentOffset__    }__    _    _    _    _    if (methodVisitor instanceof MethodWriter) {_      MethodWriter methodWriter = (MethodWriter) methodVisitor__      if (methodWriter.canCopyMethodAttributes(_          this,_          methodInfoOffset,_          currentOffset - methodInfoOffset,_          synthetic,_          (context.currentMethodAccessFlags & Opcodes.ACC_DEPRECATED) != 0,_          readUnsignedShort(methodInfoOffset + 4),_          signatureIndex,_          exceptionsOffset)) {_        return currentOffset__      }_    }__    _    if (methodParametersOffset != 0) {_      int parametersCount = readByte(methodParametersOffset)__      int currentParameterOffset = methodParametersOffset + 1__      while (parametersCount-- > 0) {_        _        methodVisitor.visitParameter(_            readUTF8(currentParameterOffset, charBuffer),_            readUnsignedShort(currentParameterOffset + 2))__        currentParameterOffset += 4__      }_    }__    _    if (annotationDefaultOffset != 0) {_      AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotationDefault()__      readElementValue(annotationVisitor, annotationDefaultOffset, null, charBuffer)__      if (annotationVisitor != null) {_        annotationVisitor.visitEnd()__      }_    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleParameterAnnotationsOffset != 0) {_      readParameterAnnotations(_          methodVisitor, context, runtimeVisibleParameterAnnotationsOffset,  true)__    }__    _    if (runtimeInvisibleParameterAnnotationsOffset != 0) {_      readParameterAnnotations(_          methodVisitor,_          context,_          runtimeInvisibleParameterAnnotationsOffset,_           false)__    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      methodVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    if (codeOffset != 0) {_      methodVisitor.visitCode()__      readCode(methodVisitor, context, codeOffset)__    }__    _    methodVisitor.visitEnd()__    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,method,info,offset,the,start,offset,of,the,structure,return,the,offset,of,the,first,byte,following,the,structure;private,int,read,method,final,class,visitor,class,visitor,final,context,context,final,int,method,info,offset,char,char,buffer,context,char,buffer,int,current,offset,method,info,offset,context,current,method,access,flags,read,unsigned,short,current,offset,context,current,method,name,read,utf8,current,offset,2,char,buffer,context,current,method,descriptor,read,utf8,current,offset,4,char,buffer,current,offset,6,int,code,offset,0,int,exceptions,offset,0,string,exceptions,null,boolean,synthetic,false,int,signature,index,0,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,parameter,annotations,offset,0,int,runtime,invisible,parameter,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,int,annotation,default,offset,0,int,method,parameters,offset,0,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,code,equals,attribute,name,if,context,parsing,options,0,code,offset,current,offset,else,if,constants,exceptions,equals,attribute,name,exceptions,offset,current,offset,exceptions,new,string,read,unsigned,short,exceptions,offset,int,current,exception,offset,exceptions,offset,2,for,int,i,0,i,exceptions,length,i,exceptions,i,read,class,current,exception,offset,char,buffer,current,exception,offset,2,else,if,constants,signature,equals,attribute,name,signature,index,read,unsigned,short,current,offset,else,if,constants,deprecated,equals,attribute,name,context,current,method,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,annotation,default,offset,current,offset,else,if,constants,synthetic,equals,attribute,name,synthetic,true,context,current,method,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,parameter,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,parameter,annotations,offset,current,offset,else,if,constants,equals,attribute,name,method,parameters,offset,current,offset,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,method,visitor,method,visitor,class,visitor,visit,method,context,current,method,access,flags,context,current,method,name,context,current,method,descriptor,signature,index,0,null,read,utf,signature,index,char,buffer,exceptions,if,method,visitor,null,return,current,offset,if,method,visitor,instanceof,method,writer,method,writer,method,writer,method,writer,method,visitor,if,method,writer,can,copy,method,attributes,this,method,info,offset,current,offset,method,info,offset,synthetic,context,current,method,access,flags,opcodes,0,read,unsigned,short,method,info,offset,4,signature,index,exceptions,offset,return,current,offset,if,method,parameters,offset,0,int,parameters,count,read,byte,method,parameters,offset,int,current,parameter,offset,method,parameters,offset,1,while,parameters,count,0,method,visitor,visit,parameter,read,utf8,current,parameter,offset,char,buffer,read,unsigned,short,current,parameter,offset,2,current,parameter,offset,4,if,annotation,default,offset,0,annotation,visitor,annotation,visitor,method,visitor,visit,annotation,default,read,element,value,annotation,visitor,annotation,default,offset,null,char,buffer,if,annotation,visitor,null,annotation,visitor,visit,end,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,parameter,annotations,offset,0,read,parameter,annotations,method,visitor,context,runtime,visible,parameter,annotations,offset,true,if,runtime,invisible,parameter,annotations,offset,0,read,parameter,annotations,method,visitor,context,runtime,invisible,parameter,annotations,offset,false,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,method,visitor,visit,attribute,attributes,attributes,next,attribute,if,code,offset,0,method,visitor,visit,code,read,code,method,visitor,context,code,offset,method,visitor,visit,end,return,current,offset
ClassReader -> private int readMethod(       final ClassVisitor classVisitor, final Context context, final int methodInfoOffset);1541436263;Reads a JVMS method_info structure and makes the given visitor visit it.__@param classVisitor the visitor that must visit the method._@param context information about the class being parsed._@param methodInfoOffset the start offset of the method_info structure._@return the offset of the first byte following the method_info structure.;private int readMethod(_      final ClassVisitor classVisitor, final Context context, final int methodInfoOffset) {_    char[] charBuffer = context.charBuffer___    _    int currentOffset = methodInfoOffset__    context.currentMethodAccessFlags = readUnsignedShort(currentOffset)__    context.currentMethodName = readUTF8(currentOffset + 2, charBuffer)__    context.currentMethodDescriptor = readUTF8(currentOffset + 4, charBuffer)__    currentOffset += 6___    _    _    _    int codeOffset = 0__    _    int exceptionsOffset = 0__    _    String[] exceptions = null__    _    boolean synthetic = false__    _    int signatureIndex = 0__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleParameterAnnotationsOffset = 0__    _    int runtimeInvisibleParameterAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    int annotationDefaultOffset = 0__    _    int methodParametersOffset = 0__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      _      _      if (Constants.CODE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_CODE) == 0) {_          codeOffset = currentOffset__        }_      } else if (Constants.EXCEPTIONS.equals(attributeName)) {_        exceptionsOffset = currentOffset__        exceptions = new String[readUnsignedShort(exceptionsOffset)]__        int currentExceptionOffset = exceptionsOffset + 2__        for (int i = 0_ i < exceptions.length_ ++i) {_          exceptions[i] = readClass(currentExceptionOffset, charBuffer)__          currentExceptionOffset += 2__        }_      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signatureIndex = readUnsignedShort(currentOffset)__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        context.currentMethodAccessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.ANNOTATION_DEFAULT.equals(attributeName)) {_        annotationDefaultOffset = currentOffset__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        synthetic = true__        context.currentMethodAccessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleParameterAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleParameterAnnotationsOffset = currentOffset__      } else if (Constants.METHOD_PARAMETERS.equals(attributeName)) {_        methodParametersOffset = currentOffset__      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    MethodVisitor methodVisitor =_        classVisitor.visitMethod(_            context.currentMethodAccessFlags,_            context.currentMethodName,_            context.currentMethodDescriptor,_            signatureIndex == 0 ? null : readUtf(signatureIndex, charBuffer),_            exceptions)__    if (methodVisitor == null) {_      return currentOffset__    }__    _    _    _    _    if (methodVisitor instanceof MethodWriter) {_      MethodWriter methodWriter = (MethodWriter) methodVisitor__      if (methodWriter.canCopyMethodAttributes(_          this,_          methodInfoOffset,_          currentOffset - methodInfoOffset,_          synthetic,_          (context.currentMethodAccessFlags & Opcodes.ACC_DEPRECATED) != 0,_          readUnsignedShort(methodInfoOffset + 4),_          signatureIndex,_          exceptionsOffset)) {_        return currentOffset__      }_    }__    _    if (methodParametersOffset != 0) {_      int parametersCount = readByte(methodParametersOffset)__      int currentParameterOffset = methodParametersOffset + 1__      while (parametersCount-- > 0) {_        _        methodVisitor.visitParameter(_            readUTF8(currentParameterOffset, charBuffer),_            readUnsignedShort(currentParameterOffset + 2))__        currentParameterOffset += 4__      }_    }__    _    if (annotationDefaultOffset != 0) {_      AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotationDefault()__      readElementValue(annotationVisitor, annotationDefaultOffset, null, charBuffer)__      if (annotationVisitor != null) {_        annotationVisitor.visitEnd()__      }_    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                methodVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleParameterAnnotationsOffset != 0) {_      readParameterAnnotations(_          methodVisitor, context, runtimeVisibleParameterAnnotationsOffset,  true)__    }__    _    if (runtimeInvisibleParameterAnnotationsOffset != 0) {_      readParameterAnnotations(_          methodVisitor,_          context,_          runtimeInvisibleParameterAnnotationsOffset,_           false)__    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      methodVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    if (codeOffset != 0) {_      methodVisitor.visitCode()__      readCode(methodVisitor, context, codeOffset)__    }__    _    methodVisitor.visitEnd()__    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,method,param,context,information,about,the,class,being,parsed,param,method,info,offset,the,start,offset,of,the,structure,return,the,offset,of,the,first,byte,following,the,structure;private,int,read,method,final,class,visitor,class,visitor,final,context,context,final,int,method,info,offset,char,char,buffer,context,char,buffer,int,current,offset,method,info,offset,context,current,method,access,flags,read,unsigned,short,current,offset,context,current,method,name,read,utf8,current,offset,2,char,buffer,context,current,method,descriptor,read,utf8,current,offset,4,char,buffer,current,offset,6,int,code,offset,0,int,exceptions,offset,0,string,exceptions,null,boolean,synthetic,false,int,signature,index,0,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,parameter,annotations,offset,0,int,runtime,invisible,parameter,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,int,annotation,default,offset,0,int,method,parameters,offset,0,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,code,equals,attribute,name,if,context,parsing,options,0,code,offset,current,offset,else,if,constants,exceptions,equals,attribute,name,exceptions,offset,current,offset,exceptions,new,string,read,unsigned,short,exceptions,offset,int,current,exception,offset,exceptions,offset,2,for,int,i,0,i,exceptions,length,i,exceptions,i,read,class,current,exception,offset,char,buffer,current,exception,offset,2,else,if,constants,signature,equals,attribute,name,signature,index,read,unsigned,short,current,offset,else,if,constants,deprecated,equals,attribute,name,context,current,method,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,annotation,default,offset,current,offset,else,if,constants,synthetic,equals,attribute,name,synthetic,true,context,current,method,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,parameter,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,parameter,annotations,offset,current,offset,else,if,constants,equals,attribute,name,method,parameters,offset,current,offset,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,method,visitor,method,visitor,class,visitor,visit,method,context,current,method,access,flags,context,current,method,name,context,current,method,descriptor,signature,index,0,null,read,utf,signature,index,char,buffer,exceptions,if,method,visitor,null,return,current,offset,if,method,visitor,instanceof,method,writer,method,writer,method,writer,method,writer,method,visitor,if,method,writer,can,copy,method,attributes,this,method,info,offset,current,offset,method,info,offset,synthetic,context,current,method,access,flags,opcodes,0,read,unsigned,short,method,info,offset,4,signature,index,exceptions,offset,return,current,offset,if,method,parameters,offset,0,int,parameters,count,read,byte,method,parameters,offset,int,current,parameter,offset,method,parameters,offset,1,while,parameters,count,0,method,visitor,visit,parameter,read,utf8,current,parameter,offset,char,buffer,read,unsigned,short,current,parameter,offset,2,current,parameter,offset,4,if,annotation,default,offset,0,annotation,visitor,annotation,visitor,method,visitor,visit,annotation,default,read,element,value,annotation,visitor,annotation,default,offset,null,char,buffer,if,annotation,visitor,null,annotation,visitor,visit,end,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,method,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,parameter,annotations,offset,0,read,parameter,annotations,method,visitor,context,runtime,visible,parameter,annotations,offset,true,if,runtime,invisible,parameter,annotations,offset,0,read,parameter,annotations,method,visitor,context,runtime,invisible,parameter,annotations,offset,false,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,method,visitor,visit,attribute,attributes,attributes,next,attribute,if,code,offset,0,method,visitor,visit,code,read,code,method,visitor,context,code,offset,method,visitor,visit,end,return,current,offset
ClassReader -> private int readField(       final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset);1531241461;Reads a JVMS field_info structure and makes the given visitor visit it.__@param classVisitor the visitor that must visit the field._@param context information about the class being parsed._@param fieldInfoOffset the start offset of the field_info structure._@return the offset of the first byte following the field_info structure.;private int readField(_      final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset) {_    char[] charBuffer = context.charBuffer___    _    int currentOffset = fieldInfoOffset__    int accessFlags = readUnsignedShort(currentOffset)__    String name = readUTF8(currentOffset + 2, charBuffer)__    String descriptor = readUTF8(currentOffset + 4, charBuffer)__    currentOffset += 6___    _    _    _    Object constantValue = null__    _    String signature = null__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      _      _      if (Constants.CONSTANT_VALUE.equals(attributeName)) {_        int constantvalueIndex = readUnsignedShort(currentOffset)__        constantValue = constantvalueIndex == 0 ? null : readConst(constantvalueIndex, charBuffer)__      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signature = readUTF8(currentOffset, charBuffer)__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentOffset__      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    FieldVisitor fieldVisitor =_        classVisitor.visitField(accessFlags, name, descriptor, signature, constantValue)__    if (fieldVisitor == null) {_      return currentOffset__    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      fieldVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    fieldVisitor.visitEnd()__    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,field,info,offset,the,start,offset,of,the,structure,return,the,offset,of,the,first,byte,following,the,structure;private,int,read,field,final,class,visitor,class,visitor,final,context,context,final,int,field,info,offset,char,char,buffer,context,char,buffer,int,current,offset,field,info,offset,int,access,flags,read,unsigned,short,current,offset,string,name,read,utf8,current,offset,2,char,buffer,string,descriptor,read,utf8,current,offset,4,char,buffer,current,offset,6,object,constant,value,null,string,signature,null,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,equals,attribute,name,int,constantvalue,index,read,unsigned,short,current,offset,constant,value,constantvalue,index,0,null,read,const,constantvalue,index,char,buffer,else,if,constants,signature,equals,attribute,name,signature,read,utf8,current,offset,char,buffer,else,if,constants,deprecated,equals,attribute,name,access,flags,opcodes,else,if,constants,synthetic,equals,attribute,name,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,offset,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,field,visitor,field,visitor,class,visitor,visit,field,access,flags,name,descriptor,signature,constant,value,if,field,visitor,null,return,current,offset,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,field,visitor,visit,attribute,attributes,attributes,next,attribute,field,visitor,visit,end,return,current,offset
ClassReader -> private int readField(       final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset);1536664245;Reads a JVMS field_info structure and makes the given visitor visit it.__@param classVisitor the visitor that must visit the field._@param context information about the class being parsed._@param fieldInfoOffset the start offset of the field_info structure._@return the offset of the first byte following the field_info structure.;private int readField(_      final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset) {_    char[] charBuffer = context.charBuffer___    _    int currentOffset = fieldInfoOffset__    int accessFlags = readUnsignedShort(currentOffset)__    String name = readUTF8(currentOffset + 2, charBuffer)__    String descriptor = readUTF8(currentOffset + 4, charBuffer)__    currentOffset += 6___    _    _    _    Object constantValue = null__    _    String signature = null__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      _      _      if (Constants.CONSTANT_VALUE.equals(attributeName)) {_        int constantvalueIndex = readUnsignedShort(currentOffset)__        constantValue = constantvalueIndex == 0 ? null : readConst(constantvalueIndex, charBuffer)__      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signature = readUTF8(currentOffset, charBuffer)__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentOffset__      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    FieldVisitor fieldVisitor =_        classVisitor.visitField(accessFlags, name, descriptor, signature, constantValue)__    if (fieldVisitor == null) {_      return currentOffset__    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      fieldVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    fieldVisitor.visitEnd()__    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,field,info,offset,the,start,offset,of,the,structure,return,the,offset,of,the,first,byte,following,the,structure;private,int,read,field,final,class,visitor,class,visitor,final,context,context,final,int,field,info,offset,char,char,buffer,context,char,buffer,int,current,offset,field,info,offset,int,access,flags,read,unsigned,short,current,offset,string,name,read,utf8,current,offset,2,char,buffer,string,descriptor,read,utf8,current,offset,4,char,buffer,current,offset,6,object,constant,value,null,string,signature,null,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,equals,attribute,name,int,constantvalue,index,read,unsigned,short,current,offset,constant,value,constantvalue,index,0,null,read,const,constantvalue,index,char,buffer,else,if,constants,signature,equals,attribute,name,signature,read,utf8,current,offset,char,buffer,else,if,constants,deprecated,equals,attribute,name,access,flags,opcodes,else,if,constants,synthetic,equals,attribute,name,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,offset,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,field,visitor,field,visitor,class,visitor,visit,field,access,flags,name,descriptor,signature,constant,value,if,field,visitor,null,return,current,offset,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,field,visitor,visit,attribute,attributes,attributes,next,attribute,field,visitor,visit,end,return,current,offset
ClassReader -> private int readField(       final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset);1536747989;Reads a JVMS field_info structure and makes the given visitor visit it.__@param classVisitor the visitor that must visit the field._@param context information about the class being parsed._@param fieldInfoOffset the start offset of the field_info structure._@return the offset of the first byte following the field_info structure.;private int readField(_      final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset) {_    char[] charBuffer = context.charBuffer___    _    int currentOffset = fieldInfoOffset__    int accessFlags = readUnsignedShort(currentOffset)__    String name = readUTF8(currentOffset + 2, charBuffer)__    String descriptor = readUTF8(currentOffset + 4, charBuffer)__    currentOffset += 6___    _    _    _    Object constantValue = null__    _    String signature = null__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      _      _      if (Constants.CONSTANT_VALUE.equals(attributeName)) {_        int constantvalueIndex = readUnsignedShort(currentOffset)__        constantValue = constantvalueIndex == 0 ? null : readConst(constantvalueIndex, charBuffer)__      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signature = readUTF8(currentOffset, charBuffer)__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentOffset__      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    FieldVisitor fieldVisitor =_        classVisitor.visitField(accessFlags, name, descriptor, signature, constantValue)__    if (fieldVisitor == null) {_      return currentOffset__    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      fieldVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    fieldVisitor.visitEnd()__    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,field,info,offset,the,start,offset,of,the,structure,return,the,offset,of,the,first,byte,following,the,structure;private,int,read,field,final,class,visitor,class,visitor,final,context,context,final,int,field,info,offset,char,char,buffer,context,char,buffer,int,current,offset,field,info,offset,int,access,flags,read,unsigned,short,current,offset,string,name,read,utf8,current,offset,2,char,buffer,string,descriptor,read,utf8,current,offset,4,char,buffer,current,offset,6,object,constant,value,null,string,signature,null,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,equals,attribute,name,int,constantvalue,index,read,unsigned,short,current,offset,constant,value,constantvalue,index,0,null,read,const,constantvalue,index,char,buffer,else,if,constants,signature,equals,attribute,name,signature,read,utf8,current,offset,char,buffer,else,if,constants,deprecated,equals,attribute,name,access,flags,opcodes,else,if,constants,synthetic,equals,attribute,name,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,offset,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,field,visitor,field,visitor,class,visitor,visit,field,access,flags,name,descriptor,signature,constant,value,if,field,visitor,null,return,current,offset,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,field,visitor,visit,attribute,attributes,attributes,next,attribute,field,visitor,visit,end,return,current,offset
ClassReader -> private int readField(       final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset);1537204147;Reads a JVMS field_info structure and makes the given visitor visit it.__@param classVisitor the visitor that must visit the field._@param context information about the class being parsed._@param fieldInfoOffset the start offset of the field_info structure._@return the offset of the first byte following the field_info structure.;private int readField(_      final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset) {_    char[] charBuffer = context.charBuffer___    _    int currentOffset = fieldInfoOffset__    int accessFlags = readUnsignedShort(currentOffset)__    String name = readUTF8(currentOffset + 2, charBuffer)__    String descriptor = readUTF8(currentOffset + 4, charBuffer)__    currentOffset += 6___    _    _    _    Object constantValue = null__    _    String signature = null__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      _      _      if (Constants.CONSTANT_VALUE.equals(attributeName)) {_        int constantvalueIndex = readUnsignedShort(currentOffset)__        constantValue = constantvalueIndex == 0 ? null : readConst(constantvalueIndex, charBuffer)__      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signature = readUTF8(currentOffset, charBuffer)__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentOffset__      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    FieldVisitor fieldVisitor =_        classVisitor.visitField(accessFlags, name, descriptor, signature, constantValue)__    if (fieldVisitor == null) {_      return currentOffset__    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      fieldVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    fieldVisitor.visitEnd()__    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,field,info,offset,the,start,offset,of,the,structure,return,the,offset,of,the,first,byte,following,the,structure;private,int,read,field,final,class,visitor,class,visitor,final,context,context,final,int,field,info,offset,char,char,buffer,context,char,buffer,int,current,offset,field,info,offset,int,access,flags,read,unsigned,short,current,offset,string,name,read,utf8,current,offset,2,char,buffer,string,descriptor,read,utf8,current,offset,4,char,buffer,current,offset,6,object,constant,value,null,string,signature,null,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,equals,attribute,name,int,constantvalue,index,read,unsigned,short,current,offset,constant,value,constantvalue,index,0,null,read,const,constantvalue,index,char,buffer,else,if,constants,signature,equals,attribute,name,signature,read,utf8,current,offset,char,buffer,else,if,constants,deprecated,equals,attribute,name,access,flags,opcodes,else,if,constants,synthetic,equals,attribute,name,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,offset,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,field,visitor,field,visitor,class,visitor,visit,field,access,flags,name,descriptor,signature,constant,value,if,field,visitor,null,return,current,offset,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,field,visitor,visit,attribute,attributes,attributes,next,attribute,field,visitor,visit,end,return,current,offset
ClassReader -> private int readField(       final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset);1539119582;Reads a JVMS field_info structure and makes the given visitor visit it.__@param classVisitor the visitor that must visit the field._@param context information about the class being parsed._@param fieldInfoOffset the start offset of the field_info structure._@return the offset of the first byte following the field_info structure.;private int readField(_      final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset) {_    char[] charBuffer = context.charBuffer___    _    int currentOffset = fieldInfoOffset__    int accessFlags = readUnsignedShort(currentOffset)__    String name = readUTF8(currentOffset + 2, charBuffer)__    String descriptor = readUTF8(currentOffset + 4, charBuffer)__    currentOffset += 6___    _    _    _    Object constantValue = null__    _    String signature = null__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      _      _      if (Constants.CONSTANT_VALUE.equals(attributeName)) {_        int constantvalueIndex = readUnsignedShort(currentOffset)__        constantValue = constantvalueIndex == 0 ? null : readConst(constantvalueIndex, charBuffer)__      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signature = readUTF8(currentOffset, charBuffer)__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentOffset__      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    FieldVisitor fieldVisitor =_        classVisitor.visitField(accessFlags, name, descriptor, signature, constantValue)__    if (fieldVisitor == null) {_      return currentOffset__    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      fieldVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    fieldVisitor.visitEnd()__    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,field,info,offset,the,start,offset,of,the,structure,return,the,offset,of,the,first,byte,following,the,structure;private,int,read,field,final,class,visitor,class,visitor,final,context,context,final,int,field,info,offset,char,char,buffer,context,char,buffer,int,current,offset,field,info,offset,int,access,flags,read,unsigned,short,current,offset,string,name,read,utf8,current,offset,2,char,buffer,string,descriptor,read,utf8,current,offset,4,char,buffer,current,offset,6,object,constant,value,null,string,signature,null,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,equals,attribute,name,int,constantvalue,index,read,unsigned,short,current,offset,constant,value,constantvalue,index,0,null,read,const,constantvalue,index,char,buffer,else,if,constants,signature,equals,attribute,name,signature,read,utf8,current,offset,char,buffer,else,if,constants,deprecated,equals,attribute,name,access,flags,opcodes,else,if,constants,synthetic,equals,attribute,name,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,offset,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,field,visitor,field,visitor,class,visitor,visit,field,access,flags,name,descriptor,signature,constant,value,if,field,visitor,null,return,current,offset,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,field,visitor,visit,attribute,attributes,attributes,next,attribute,field,visitor,visit,end,return,current,offset
ClassReader -> private int readField(       final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset);1541436263;Reads a JVMS field_info structure and makes the given visitor visit it.__@param classVisitor the visitor that must visit the field._@param context information about the class being parsed._@param fieldInfoOffset the start offset of the field_info structure._@return the offset of the first byte following the field_info structure.;private int readField(_      final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset) {_    char[] charBuffer = context.charBuffer___    _    int currentOffset = fieldInfoOffset__    int accessFlags = readUnsignedShort(currentOffset)__    String name = readUTF8(currentOffset + 2, charBuffer)__    String descriptor = readUTF8(currentOffset + 4, charBuffer)__    currentOffset += 6___    _    _    _    Object constantValue = null__    _    String signature = null__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      _      _      if (Constants.CONSTANT_VALUE.equals(attributeName)) {_        int constantvalueIndex = readUnsignedShort(currentOffset)__        constantValue = constantvalueIndex == 0 ? null : readConst(constantvalueIndex, charBuffer)__      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signature = readUTF8(currentOffset, charBuffer)__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentOffset__      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    FieldVisitor fieldVisitor =_        classVisitor.visitField(accessFlags, name, descriptor, signature, constantValue)__    if (fieldVisitor == null) {_      return currentOffset__    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                fieldVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      fieldVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    fieldVisitor.visitEnd()__    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,field,info,offset,the,start,offset,of,the,structure,return,the,offset,of,the,first,byte,following,the,structure;private,int,read,field,final,class,visitor,class,visitor,final,context,context,final,int,field,info,offset,char,char,buffer,context,char,buffer,int,current,offset,field,info,offset,int,access,flags,read,unsigned,short,current,offset,string,name,read,utf8,current,offset,2,char,buffer,string,descriptor,read,utf8,current,offset,4,char,buffer,current,offset,6,object,constant,value,null,string,signature,null,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,equals,attribute,name,int,constantvalue,index,read,unsigned,short,current,offset,constant,value,constantvalue,index,0,null,read,const,constantvalue,index,char,buffer,else,if,constants,signature,equals,attribute,name,signature,read,utf8,current,offset,char,buffer,else,if,constants,deprecated,equals,attribute,name,access,flags,opcodes,else,if,constants,synthetic,equals,attribute,name,access,flags,opcodes,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,offset,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,field,visitor,field,visitor,class,visitor,visit,field,access,flags,name,descriptor,signature,constant,value,if,field,visitor,null,return,current,offset,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,field,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,field,visitor,visit,attribute,attributes,attributes,next,attribute,field,visitor,visit,end,return,current,offset
ClassReader -> public void accept(       final ClassVisitor classVisitor,       final Attribute[] attributePrototypes,       final int parsingOptions);1531241461;Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this_{@link ClassReader}.__@param classVisitor the visitor that must visit this class._@param attributePrototypes prototypes of the attributes that must be parsed during the visit of_the class. Any attribute whose type is not equal to the type of one the prototypes will not_be parsed: its byte array value will be passed unchanged to the ClassWriter. <i>This may_corrupt it if this value contains references to the constant pool, or has syntactic or_semantic links with a class element that has been transformed by a class adapter between_the reader and the writer</i>._@param parsingOptions the options to use to parse this class. One or more of {@link_#SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.;public void accept(_      final ClassVisitor classVisitor,_      final Attribute[] attributePrototypes,_      final int parsingOptions) {_    Context context = new Context()__    context.attributePrototypes = attributePrototypes__    context.parsingOptions = parsingOptions__    context.charBuffer = new char[maxStringLength]___    _    char[] charBuffer = context.charBuffer__    int currentOffset = header__    int accessFlags = readUnsignedShort(currentOffset)__    String thisClass = readClass(currentOffset + 2, charBuffer)__    String superClass = readClass(currentOffset + 4, charBuffer)__    String[] interfaces = new String[readUnsignedShort(currentOffset + 6)]__    currentOffset += 8__    for (int i = 0_ i < interfaces.length_ ++i) {_      interfaces[i] = readClass(currentOffset, charBuffer)__      currentOffset += 2__    }__    _    _    _    int innerClassesOffset = 0__    _    int enclosingMethodOffset = 0__    _    String signature = null__    _    String sourceFile = null__    _    String sourceDebugExtension = null__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    int moduleOffset = 0__    _    int modulePackagesOffset = 0__    _    String moduleMainClass = null__    _    String nestHostClass = null__    _    int nestMembersOffset = 0__    _    _    Attribute attributes = null___    int currentAttributeOffset = getFirstAttributeOffset()__    for (int i = readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      _      String attributeName = readUTF8(currentAttributeOffset, charBuffer)__      int attributeLength = readInt(currentAttributeOffset + 2)__      currentAttributeOffset += 6__      _      _      if (Constants.SOURCE_FILE.equals(attributeName)) {_        sourceFile = readUTF8(currentAttributeOffset, charBuffer)__      } else if (Constants.INNER_CLASSES.equals(attributeName)) {_        innerClassesOffset = currentAttributeOffset__      } else if (Constants.ENCLOSING_METHOD.equals(attributeName)) {_        enclosingMethodOffset = currentAttributeOffset__      } else if (Constants.NEST_HOST.equals(attributeName)) {_        nestHostClass = readClass(currentAttributeOffset, charBuffer)__      } else if (Constants.NEST_MEMBERS.equals(attributeName)) {_        nestMembersOffset = currentAttributeOffset__      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signature = readUTF8(currentAttributeOffset, charBuffer)__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentAttributeOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentAttributeOffset__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.SOURCE_DEBUG_EXTENSION.equals(attributeName)) {_        sourceDebugExtension =_            readUTF(currentAttributeOffset, attributeLength, new char[attributeLength])__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentAttributeOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentAttributeOffset__      } else if (Constants.MODULE.equals(attributeName)) {_        moduleOffset = currentAttributeOffset__      } else if (Constants.MODULE_MAIN_CLASS.equals(attributeName)) {_        moduleMainClass = readClass(currentAttributeOffset, charBuffer)__      } else if (Constants.MODULE_PACKAGES.equals(attributeName)) {_        modulePackagesOffset = currentAttributeOffset__      } else if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        _      } else {_        Attribute attribute =_            readAttribute(_                attributePrototypes,_                attributeName,_                currentAttributeOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentAttributeOffset += attributeLength__    }__    _    _    classVisitor.visit(_        readInt(cpInfoOffsets[1] - 7), accessFlags, thisClass, signature, superClass, interfaces)___    _    if ((parsingOptions & SKIP_DEBUG) == 0_        && (sourceFile != null || sourceDebugExtension != null)) {_      classVisitor.visitSource(sourceFile, sourceDebugExtension)__    }__    _    if (moduleOffset != 0) {_      readModule(classVisitor, context, moduleOffset, modulePackagesOffset, moduleMainClass)__    }__    _    if (nestHostClass != null) {_      classVisitor.visitNestHostExperimental(nestHostClass)__    }__    _    if (enclosingMethodOffset != 0) {_      String className = readClass(enclosingMethodOffset, charBuffer)__      int methodIndex = readUnsignedShort(enclosingMethodOffset + 2)__      String name = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex], charBuffer)__      String type = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex] + 2, charBuffer)__      classVisitor.visitOuterClass(className, name, type)__    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      classVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    if (nestMembersOffset != 0) {_      int numberOfNestMembers = readUnsignedShort(nestMembersOffset)__      int currentNestMemberOffset = nestMembersOffset + 2__      while (numberOfNestMembers-- > 0) {_        classVisitor.visitNestMemberExperimental(readClass(currentNestMemberOffset, charBuffer))__        currentNestMemberOffset += 2__      }_    }__    _    if (innerClassesOffset != 0) {_      int numberOfClasses = readUnsignedShort(innerClassesOffset)__      int currentClassesOffset = innerClassesOffset + 2__      while (numberOfClasses-- > 0) {_        classVisitor.visitInnerClass(_            readClass(currentClassesOffset, charBuffer),_            readClass(currentClassesOffset + 2, charBuffer),_            readUTF8(currentClassesOffset + 4, charBuffer),_            readUnsignedShort(currentClassesOffset + 6))__        currentClassesOffset += 8__      }_    }__    _    int fieldsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (fieldsCount-- > 0) {_      currentOffset = readField(classVisitor, context, currentOffset)__    }_    int methodsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (methodsCount-- > 0) {_      currentOffset = readMethod(classVisitor, context, currentOffset)__    }__    _    classVisitor.visitEnd()__  };makes,the,given,visitor,visit,the,jvms,class,file,structure,passed,to,the,constructor,of,this,link,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attribute,prototypes,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,parsing,options,the,options,to,use,to,parse,this,class,one,or,more,of,link,link,link,or,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attribute,prototypes,final,int,parsing,options,context,context,new,context,context,attribute,prototypes,attribute,prototypes,context,parsing,options,parsing,options,context,char,buffer,new,char,max,string,length,char,char,buffer,context,char,buffer,int,current,offset,header,int,access,flags,read,unsigned,short,current,offset,string,this,class,read,class,current,offset,2,char,buffer,string,super,class,read,class,current,offset,4,char,buffer,string,interfaces,new,string,read,unsigned,short,current,offset,6,current,offset,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,current,offset,char,buffer,current,offset,2,int,inner,classes,offset,0,int,enclosing,method,offset,0,string,signature,null,string,source,file,null,string,source,debug,extension,null,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,int,module,offset,0,int,module,packages,offset,0,string,module,main,class,null,string,nest,host,class,null,int,nest,members,offset,0,attribute,attributes,null,int,current,attribute,offset,get,first,attribute,offset,for,int,i,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,read,utf8,current,attribute,offset,char,buffer,int,attribute,length,read,int,current,attribute,offset,2,current,attribute,offset,6,if,constants,equals,attribute,name,source,file,read,utf8,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,inner,classes,offset,current,attribute,offset,else,if,constants,equals,attribute,name,enclosing,method,offset,current,attribute,offset,else,if,constants,equals,attribute,name,nest,host,class,read,class,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,nest,members,offset,current,attribute,offset,else,if,constants,signature,equals,attribute,name,signature,read,utf8,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,attribute,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,attribute,offset,else,if,constants,deprecated,equals,attribute,name,access,flags,opcodes,else,if,constants,synthetic,equals,attribute,name,access,flags,opcodes,else,if,constants,equals,attribute,name,source,debug,extension,read,utf,current,attribute,offset,attribute,length,new,char,attribute,length,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,attribute,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,attribute,offset,else,if,constants,module,equals,attribute,name,module,offset,current,attribute,offset,else,if,constants,equals,attribute,name,module,main,class,read,class,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,module,packages,offset,current,attribute,offset,else,if,constants,equals,attribute,name,else,attribute,attribute,read,attribute,attribute,prototypes,attribute,name,current,attribute,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,attribute,offset,attribute,length,class,visitor,visit,read,int,cp,info,offsets,1,7,access,flags,this,class,signature,super,class,interfaces,if,parsing,options,0,source,file,null,source,debug,extension,null,class,visitor,visit,source,source,file,source,debug,extension,if,module,offset,0,read,module,class,visitor,context,module,offset,module,packages,offset,module,main,class,if,nest,host,class,null,class,visitor,visit,nest,host,experimental,nest,host,class,if,enclosing,method,offset,0,string,class,name,read,class,enclosing,method,offset,char,buffer,int,method,index,read,unsigned,short,enclosing,method,offset,2,string,name,method,index,0,null,read,utf8,cp,info,offsets,method,index,char,buffer,string,type,method,index,0,null,read,utf8,cp,info,offsets,method,index,2,char,buffer,class,visitor,visit,outer,class,class,name,name,type,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,class,visitor,visit,attribute,attributes,attributes,next,attribute,if,nest,members,offset,0,int,number,of,nest,members,read,unsigned,short,nest,members,offset,int,current,nest,member,offset,nest,members,offset,2,while,number,of,nest,members,0,class,visitor,visit,nest,member,experimental,read,class,current,nest,member,offset,char,buffer,current,nest,member,offset,2,if,inner,classes,offset,0,int,number,of,classes,read,unsigned,short,inner,classes,offset,int,current,classes,offset,inner,classes,offset,2,while,number,of,classes,0,class,visitor,visit,inner,class,read,class,current,classes,offset,char,buffer,read,class,current,classes,offset,2,char,buffer,read,utf8,current,classes,offset,4,char,buffer,read,unsigned,short,current,classes,offset,6,current,classes,offset,8,int,fields,count,read,unsigned,short,current,offset,current,offset,2,while,fields,count,0,current,offset,read,field,class,visitor,context,current,offset,int,methods,count,read,unsigned,short,current,offset,current,offset,2,while,methods,count,0,current,offset,read,method,class,visitor,context,current,offset,class,visitor,visit,end
ClassReader -> public void accept(       final ClassVisitor classVisitor,       final Attribute[] attributePrototypes,       final int parsingOptions);1536664245;Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this_{@link ClassReader}.__@param classVisitor the visitor that must visit this class._@param attributePrototypes prototypes of the attributes that must be parsed during the visit of_the class. Any attribute whose type is not equal to the type of one the prototypes will not_be parsed: its byte array value will be passed unchanged to the ClassWriter. <i>This may_corrupt it if this value contains references to the constant pool, or has syntactic or_semantic links with a class element that has been transformed by a class adapter between_the reader and the writer</i>._@param parsingOptions the options to use to parse this class. One or more of {@link_#SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.;public void accept(_      final ClassVisitor classVisitor,_      final Attribute[] attributePrototypes,_      final int parsingOptions) {_    Context context = new Context()__    context.attributePrototypes = attributePrototypes__    context.parsingOptions = parsingOptions__    context.charBuffer = new char[maxStringLength]___    _    char[] charBuffer = context.charBuffer__    int currentOffset = header__    int accessFlags = readUnsignedShort(currentOffset)__    String thisClass = readClass(currentOffset + 2, charBuffer)__    String superClass = readClass(currentOffset + 4, charBuffer)__    String[] interfaces = new String[readUnsignedShort(currentOffset + 6)]__    currentOffset += 8__    for (int i = 0_ i < interfaces.length_ ++i) {_      interfaces[i] = readClass(currentOffset, charBuffer)__      currentOffset += 2__    }__    _    _    _    int innerClassesOffset = 0__    _    int enclosingMethodOffset = 0__    _    String signature = null__    _    String sourceFile = null__    _    String sourceDebugExtension = null__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    int moduleOffset = 0__    _    int modulePackagesOffset = 0__    _    String moduleMainClass = null__    _    String nestHostClass = null__    _    int nestMembersOffset = 0__    _    _    Attribute attributes = null___    int currentAttributeOffset = getFirstAttributeOffset()__    for (int i = readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      _      String attributeName = readUTF8(currentAttributeOffset, charBuffer)__      int attributeLength = readInt(currentAttributeOffset + 2)__      currentAttributeOffset += 6__      _      _      if (Constants.SOURCE_FILE.equals(attributeName)) {_        sourceFile = readUTF8(currentAttributeOffset, charBuffer)__      } else if (Constants.INNER_CLASSES.equals(attributeName)) {_        innerClassesOffset = currentAttributeOffset__      } else if (Constants.ENCLOSING_METHOD.equals(attributeName)) {_        enclosingMethodOffset = currentAttributeOffset__      } else if (Constants.NEST_HOST.equals(attributeName)) {_        nestHostClass = readClass(currentAttributeOffset, charBuffer)__      } else if (Constants.NEST_MEMBERS.equals(attributeName)) {_        nestMembersOffset = currentAttributeOffset__      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signature = readUTF8(currentAttributeOffset, charBuffer)__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentAttributeOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentAttributeOffset__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.SOURCE_DEBUG_EXTENSION.equals(attributeName)) {_        sourceDebugExtension =_            readUTF(currentAttributeOffset, attributeLength, new char[attributeLength])__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentAttributeOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentAttributeOffset__      } else if (Constants.MODULE.equals(attributeName)) {_        moduleOffset = currentAttributeOffset__      } else if (Constants.MODULE_MAIN_CLASS.equals(attributeName)) {_        moduleMainClass = readClass(currentAttributeOffset, charBuffer)__      } else if (Constants.MODULE_PACKAGES.equals(attributeName)) {_        modulePackagesOffset = currentAttributeOffset__      } else if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        _      } else {_        Attribute attribute =_            readAttribute(_                attributePrototypes,_                attributeName,_                currentAttributeOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentAttributeOffset += attributeLength__    }__    _    _    classVisitor.visit(_        readInt(cpInfoOffsets[1] - 7), accessFlags, thisClass, signature, superClass, interfaces)___    _    if ((parsingOptions & SKIP_DEBUG) == 0_        && (sourceFile != null || sourceDebugExtension != null)) {_      classVisitor.visitSource(sourceFile, sourceDebugExtension)__    }__    _    if (moduleOffset != 0) {_      readModule(classVisitor, context, moduleOffset, modulePackagesOffset, moduleMainClass)__    }__    _    if (nestHostClass != null) {_      classVisitor.visitNestHost(nestHostClass)__    }__    _    if (enclosingMethodOffset != 0) {_      String className = readClass(enclosingMethodOffset, charBuffer)__      int methodIndex = readUnsignedShort(enclosingMethodOffset + 2)__      String name = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex], charBuffer)__      String type = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex] + 2, charBuffer)__      classVisitor.visitOuterClass(className, name, type)__    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      classVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    if (nestMembersOffset != 0) {_      int numberOfNestMembers = readUnsignedShort(nestMembersOffset)__      int currentNestMemberOffset = nestMembersOffset + 2__      while (numberOfNestMembers-- > 0) {_        classVisitor.visitNestMember(readClass(currentNestMemberOffset, charBuffer))__        currentNestMemberOffset += 2__      }_    }__    _    if (innerClassesOffset != 0) {_      int numberOfClasses = readUnsignedShort(innerClassesOffset)__      int currentClassesOffset = innerClassesOffset + 2__      while (numberOfClasses-- > 0) {_        classVisitor.visitInnerClass(_            readClass(currentClassesOffset, charBuffer),_            readClass(currentClassesOffset + 2, charBuffer),_            readUTF8(currentClassesOffset + 4, charBuffer),_            readUnsignedShort(currentClassesOffset + 6))__        currentClassesOffset += 8__      }_    }__    _    int fieldsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (fieldsCount-- > 0) {_      currentOffset = readField(classVisitor, context, currentOffset)__    }_    int methodsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (methodsCount-- > 0) {_      currentOffset = readMethod(classVisitor, context, currentOffset)__    }__    _    classVisitor.visitEnd()__  };makes,the,given,visitor,visit,the,jvms,class,file,structure,passed,to,the,constructor,of,this,link,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attribute,prototypes,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,parsing,options,the,options,to,use,to,parse,this,class,one,or,more,of,link,link,link,or,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attribute,prototypes,final,int,parsing,options,context,context,new,context,context,attribute,prototypes,attribute,prototypes,context,parsing,options,parsing,options,context,char,buffer,new,char,max,string,length,char,char,buffer,context,char,buffer,int,current,offset,header,int,access,flags,read,unsigned,short,current,offset,string,this,class,read,class,current,offset,2,char,buffer,string,super,class,read,class,current,offset,4,char,buffer,string,interfaces,new,string,read,unsigned,short,current,offset,6,current,offset,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,current,offset,char,buffer,current,offset,2,int,inner,classes,offset,0,int,enclosing,method,offset,0,string,signature,null,string,source,file,null,string,source,debug,extension,null,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,int,module,offset,0,int,module,packages,offset,0,string,module,main,class,null,string,nest,host,class,null,int,nest,members,offset,0,attribute,attributes,null,int,current,attribute,offset,get,first,attribute,offset,for,int,i,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,read,utf8,current,attribute,offset,char,buffer,int,attribute,length,read,int,current,attribute,offset,2,current,attribute,offset,6,if,constants,equals,attribute,name,source,file,read,utf8,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,inner,classes,offset,current,attribute,offset,else,if,constants,equals,attribute,name,enclosing,method,offset,current,attribute,offset,else,if,constants,equals,attribute,name,nest,host,class,read,class,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,nest,members,offset,current,attribute,offset,else,if,constants,signature,equals,attribute,name,signature,read,utf8,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,attribute,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,attribute,offset,else,if,constants,deprecated,equals,attribute,name,access,flags,opcodes,else,if,constants,synthetic,equals,attribute,name,access,flags,opcodes,else,if,constants,equals,attribute,name,source,debug,extension,read,utf,current,attribute,offset,attribute,length,new,char,attribute,length,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,attribute,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,attribute,offset,else,if,constants,module,equals,attribute,name,module,offset,current,attribute,offset,else,if,constants,equals,attribute,name,module,main,class,read,class,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,module,packages,offset,current,attribute,offset,else,if,constants,equals,attribute,name,else,attribute,attribute,read,attribute,attribute,prototypes,attribute,name,current,attribute,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,attribute,offset,attribute,length,class,visitor,visit,read,int,cp,info,offsets,1,7,access,flags,this,class,signature,super,class,interfaces,if,parsing,options,0,source,file,null,source,debug,extension,null,class,visitor,visit,source,source,file,source,debug,extension,if,module,offset,0,read,module,class,visitor,context,module,offset,module,packages,offset,module,main,class,if,nest,host,class,null,class,visitor,visit,nest,host,nest,host,class,if,enclosing,method,offset,0,string,class,name,read,class,enclosing,method,offset,char,buffer,int,method,index,read,unsigned,short,enclosing,method,offset,2,string,name,method,index,0,null,read,utf8,cp,info,offsets,method,index,char,buffer,string,type,method,index,0,null,read,utf8,cp,info,offsets,method,index,2,char,buffer,class,visitor,visit,outer,class,class,name,name,type,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,class,visitor,visit,attribute,attributes,attributes,next,attribute,if,nest,members,offset,0,int,number,of,nest,members,read,unsigned,short,nest,members,offset,int,current,nest,member,offset,nest,members,offset,2,while,number,of,nest,members,0,class,visitor,visit,nest,member,read,class,current,nest,member,offset,char,buffer,current,nest,member,offset,2,if,inner,classes,offset,0,int,number,of,classes,read,unsigned,short,inner,classes,offset,int,current,classes,offset,inner,classes,offset,2,while,number,of,classes,0,class,visitor,visit,inner,class,read,class,current,classes,offset,char,buffer,read,class,current,classes,offset,2,char,buffer,read,utf8,current,classes,offset,4,char,buffer,read,unsigned,short,current,classes,offset,6,current,classes,offset,8,int,fields,count,read,unsigned,short,current,offset,current,offset,2,while,fields,count,0,current,offset,read,field,class,visitor,context,current,offset,int,methods,count,read,unsigned,short,current,offset,current,offset,2,while,methods,count,0,current,offset,read,method,class,visitor,context,current,offset,class,visitor,visit,end
ClassReader -> public void accept(       final ClassVisitor classVisitor,       final Attribute[] attributePrototypes,       final int parsingOptions);1536747989;Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this_{@link ClassReader}.__@param classVisitor the visitor that must visit this class._@param attributePrototypes prototypes of the attributes that must be parsed during the visit of_the class. Any attribute whose type is not equal to the type of one the prototypes will not_be parsed: its byte array value will be passed unchanged to the ClassWriter. <i>This may_corrupt it if this value contains references to the constant pool, or has syntactic or_semantic links with a class element that has been transformed by a class adapter between_the reader and the writer</i>._@param parsingOptions the options to use to parse this class. One or more of {@link_#SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.;public void accept(_      final ClassVisitor classVisitor,_      final Attribute[] attributePrototypes,_      final int parsingOptions) {_    Context context = new Context()__    context.attributePrototypes = attributePrototypes__    context.parsingOptions = parsingOptions__    context.charBuffer = new char[maxStringLength]___    _    char[] charBuffer = context.charBuffer__    int currentOffset = header__    int accessFlags = readUnsignedShort(currentOffset)__    String thisClass = readClass(currentOffset + 2, charBuffer)__    String superClass = readClass(currentOffset + 4, charBuffer)__    String[] interfaces = new String[readUnsignedShort(currentOffset + 6)]__    currentOffset += 8__    for (int i = 0_ i < interfaces.length_ ++i) {_      interfaces[i] = readClass(currentOffset, charBuffer)__      currentOffset += 2__    }__    _    _    _    int innerClassesOffset = 0__    _    int enclosingMethodOffset = 0__    _    String signature = null__    _    String sourceFile = null__    _    String sourceDebugExtension = null__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    int moduleOffset = 0__    _    int modulePackagesOffset = 0__    _    String moduleMainClass = null__    _    String nestHostClass = null__    _    int nestMembersOffset = 0__    _    _    Attribute attributes = null___    int currentAttributeOffset = getFirstAttributeOffset()__    for (int i = readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      _      String attributeName = readUTF8(currentAttributeOffset, charBuffer)__      int attributeLength = readInt(currentAttributeOffset + 2)__      currentAttributeOffset += 6__      _      _      if (Constants.SOURCE_FILE.equals(attributeName)) {_        sourceFile = readUTF8(currentAttributeOffset, charBuffer)__      } else if (Constants.INNER_CLASSES.equals(attributeName)) {_        innerClassesOffset = currentAttributeOffset__      } else if (Constants.ENCLOSING_METHOD.equals(attributeName)) {_        enclosingMethodOffset = currentAttributeOffset__      } else if (Constants.NEST_HOST.equals(attributeName)) {_        nestHostClass = readClass(currentAttributeOffset, charBuffer)__      } else if (Constants.NEST_MEMBERS.equals(attributeName)) {_        nestMembersOffset = currentAttributeOffset__      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signature = readUTF8(currentAttributeOffset, charBuffer)__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentAttributeOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentAttributeOffset__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.SOURCE_DEBUG_EXTENSION.equals(attributeName)) {_        sourceDebugExtension =_            readUTF(currentAttributeOffset, attributeLength, new char[attributeLength])__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentAttributeOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentAttributeOffset__      } else if (Constants.MODULE.equals(attributeName)) {_        moduleOffset = currentAttributeOffset__      } else if (Constants.MODULE_MAIN_CLASS.equals(attributeName)) {_        moduleMainClass = readClass(currentAttributeOffset, charBuffer)__      } else if (Constants.MODULE_PACKAGES.equals(attributeName)) {_        modulePackagesOffset = currentAttributeOffset__      } else if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        _      } else {_        Attribute attribute =_            readAttribute(_                attributePrototypes,_                attributeName,_                currentAttributeOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentAttributeOffset += attributeLength__    }__    _    _    classVisitor.visit(_        readInt(cpInfoOffsets[1] - 7), accessFlags, thisClass, signature, superClass, interfaces)___    _    if ((parsingOptions & SKIP_DEBUG) == 0_        && (sourceFile != null || sourceDebugExtension != null)) {_      classVisitor.visitSource(sourceFile, sourceDebugExtension)__    }__    _    if (moduleOffset != 0) {_      readModule(classVisitor, context, moduleOffset, modulePackagesOffset, moduleMainClass)__    }__    _    if (nestHostClass != null) {_      classVisitor.visitNestHost(nestHostClass)__    }__    _    if (enclosingMethodOffset != 0) {_      String className = readClass(enclosingMethodOffset, charBuffer)__      int methodIndex = readUnsignedShort(enclosingMethodOffset + 2)__      String name = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex], charBuffer)__      String type = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex] + 2, charBuffer)__      classVisitor.visitOuterClass(className, name, type)__    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      classVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    if (nestMembersOffset != 0) {_      int numberOfNestMembers = readUnsignedShort(nestMembersOffset)__      int currentNestMemberOffset = nestMembersOffset + 2__      while (numberOfNestMembers-- > 0) {_        classVisitor.visitNestMember(readClass(currentNestMemberOffset, charBuffer))__        currentNestMemberOffset += 2__      }_    }__    _    if (innerClassesOffset != 0) {_      int numberOfClasses = readUnsignedShort(innerClassesOffset)__      int currentClassesOffset = innerClassesOffset + 2__      while (numberOfClasses-- > 0) {_        classVisitor.visitInnerClass(_            readClass(currentClassesOffset, charBuffer),_            readClass(currentClassesOffset + 2, charBuffer),_            readUTF8(currentClassesOffset + 4, charBuffer),_            readUnsignedShort(currentClassesOffset + 6))__        currentClassesOffset += 8__      }_    }__    _    int fieldsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (fieldsCount-- > 0) {_      currentOffset = readField(classVisitor, context, currentOffset)__    }_    int methodsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (methodsCount-- > 0) {_      currentOffset = readMethod(classVisitor, context, currentOffset)__    }__    _    classVisitor.visitEnd()__  };makes,the,given,visitor,visit,the,jvms,class,file,structure,passed,to,the,constructor,of,this,link,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attribute,prototypes,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,parsing,options,the,options,to,use,to,parse,this,class,one,or,more,of,link,link,link,or,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attribute,prototypes,final,int,parsing,options,context,context,new,context,context,attribute,prototypes,attribute,prototypes,context,parsing,options,parsing,options,context,char,buffer,new,char,max,string,length,char,char,buffer,context,char,buffer,int,current,offset,header,int,access,flags,read,unsigned,short,current,offset,string,this,class,read,class,current,offset,2,char,buffer,string,super,class,read,class,current,offset,4,char,buffer,string,interfaces,new,string,read,unsigned,short,current,offset,6,current,offset,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,current,offset,char,buffer,current,offset,2,int,inner,classes,offset,0,int,enclosing,method,offset,0,string,signature,null,string,source,file,null,string,source,debug,extension,null,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,int,module,offset,0,int,module,packages,offset,0,string,module,main,class,null,string,nest,host,class,null,int,nest,members,offset,0,attribute,attributes,null,int,current,attribute,offset,get,first,attribute,offset,for,int,i,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,read,utf8,current,attribute,offset,char,buffer,int,attribute,length,read,int,current,attribute,offset,2,current,attribute,offset,6,if,constants,equals,attribute,name,source,file,read,utf8,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,inner,classes,offset,current,attribute,offset,else,if,constants,equals,attribute,name,enclosing,method,offset,current,attribute,offset,else,if,constants,equals,attribute,name,nest,host,class,read,class,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,nest,members,offset,current,attribute,offset,else,if,constants,signature,equals,attribute,name,signature,read,utf8,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,attribute,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,attribute,offset,else,if,constants,deprecated,equals,attribute,name,access,flags,opcodes,else,if,constants,synthetic,equals,attribute,name,access,flags,opcodes,else,if,constants,equals,attribute,name,source,debug,extension,read,utf,current,attribute,offset,attribute,length,new,char,attribute,length,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,attribute,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,attribute,offset,else,if,constants,module,equals,attribute,name,module,offset,current,attribute,offset,else,if,constants,equals,attribute,name,module,main,class,read,class,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,module,packages,offset,current,attribute,offset,else,if,constants,equals,attribute,name,else,attribute,attribute,read,attribute,attribute,prototypes,attribute,name,current,attribute,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,attribute,offset,attribute,length,class,visitor,visit,read,int,cp,info,offsets,1,7,access,flags,this,class,signature,super,class,interfaces,if,parsing,options,0,source,file,null,source,debug,extension,null,class,visitor,visit,source,source,file,source,debug,extension,if,module,offset,0,read,module,class,visitor,context,module,offset,module,packages,offset,module,main,class,if,nest,host,class,null,class,visitor,visit,nest,host,nest,host,class,if,enclosing,method,offset,0,string,class,name,read,class,enclosing,method,offset,char,buffer,int,method,index,read,unsigned,short,enclosing,method,offset,2,string,name,method,index,0,null,read,utf8,cp,info,offsets,method,index,char,buffer,string,type,method,index,0,null,read,utf8,cp,info,offsets,method,index,2,char,buffer,class,visitor,visit,outer,class,class,name,name,type,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,class,visitor,visit,attribute,attributes,attributes,next,attribute,if,nest,members,offset,0,int,number,of,nest,members,read,unsigned,short,nest,members,offset,int,current,nest,member,offset,nest,members,offset,2,while,number,of,nest,members,0,class,visitor,visit,nest,member,read,class,current,nest,member,offset,char,buffer,current,nest,member,offset,2,if,inner,classes,offset,0,int,number,of,classes,read,unsigned,short,inner,classes,offset,int,current,classes,offset,inner,classes,offset,2,while,number,of,classes,0,class,visitor,visit,inner,class,read,class,current,classes,offset,char,buffer,read,class,current,classes,offset,2,char,buffer,read,utf8,current,classes,offset,4,char,buffer,read,unsigned,short,current,classes,offset,6,current,classes,offset,8,int,fields,count,read,unsigned,short,current,offset,current,offset,2,while,fields,count,0,current,offset,read,field,class,visitor,context,current,offset,int,methods,count,read,unsigned,short,current,offset,current,offset,2,while,methods,count,0,current,offset,read,method,class,visitor,context,current,offset,class,visitor,visit,end
ClassReader -> public void accept(       final ClassVisitor classVisitor,       final Attribute[] attributePrototypes,       final int parsingOptions);1537204147;Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this_{@link ClassReader}.__@param classVisitor the visitor that must visit this class._@param attributePrototypes prototypes of the attributes that must be parsed during the visit of_the class. Any attribute whose type is not equal to the type of one the prototypes will not_be parsed: its byte array value will be passed unchanged to the ClassWriter. <i>This may_corrupt it if this value contains references to the constant pool, or has syntactic or_semantic links with a class element that has been transformed by a class adapter between_the reader and the writer</i>._@param parsingOptions the options to use to parse this class. One or more of {@link_#SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.;public void accept(_      final ClassVisitor classVisitor,_      final Attribute[] attributePrototypes,_      final int parsingOptions) {_    Context context = new Context()__    context.attributePrototypes = attributePrototypes__    context.parsingOptions = parsingOptions__    context.charBuffer = new char[maxStringLength]___    _    char[] charBuffer = context.charBuffer__    int currentOffset = header__    int accessFlags = readUnsignedShort(currentOffset)__    String thisClass = readClass(currentOffset + 2, charBuffer)__    String superClass = readClass(currentOffset + 4, charBuffer)__    String[] interfaces = new String[readUnsignedShort(currentOffset + 6)]__    currentOffset += 8__    for (int i = 0_ i < interfaces.length_ ++i) {_      interfaces[i] = readClass(currentOffset, charBuffer)__      currentOffset += 2__    }__    _    _    _    int innerClassesOffset = 0__    _    int enclosingMethodOffset = 0__    _    String signature = null__    _    String sourceFile = null__    _    String sourceDebugExtension = null__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    int moduleOffset = 0__    _    int modulePackagesOffset = 0__    _    String moduleMainClass = null__    _    String nestHostClass = null__    _    int nestMembersOffset = 0__    _    _    Attribute attributes = null___    int currentAttributeOffset = getFirstAttributeOffset()__    for (int i = readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      _      String attributeName = readUTF8(currentAttributeOffset, charBuffer)__      int attributeLength = readInt(currentAttributeOffset + 2)__      currentAttributeOffset += 6__      _      _      if (Constants.SOURCE_FILE.equals(attributeName)) {_        sourceFile = readUTF8(currentAttributeOffset, charBuffer)__      } else if (Constants.INNER_CLASSES.equals(attributeName)) {_        innerClassesOffset = currentAttributeOffset__      } else if (Constants.ENCLOSING_METHOD.equals(attributeName)) {_        enclosingMethodOffset = currentAttributeOffset__      } else if (Constants.NEST_HOST.equals(attributeName)) {_        nestHostClass = readClass(currentAttributeOffset, charBuffer)__      } else if (Constants.NEST_MEMBERS.equals(attributeName)) {_        nestMembersOffset = currentAttributeOffset__      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signature = readUTF8(currentAttributeOffset, charBuffer)__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentAttributeOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentAttributeOffset__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.SOURCE_DEBUG_EXTENSION.equals(attributeName)) {_        sourceDebugExtension =_            readUtf(currentAttributeOffset, attributeLength, new char[attributeLength])__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentAttributeOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentAttributeOffset__      } else if (Constants.MODULE.equals(attributeName)) {_        moduleOffset = currentAttributeOffset__      } else if (Constants.MODULE_MAIN_CLASS.equals(attributeName)) {_        moduleMainClass = readClass(currentAttributeOffset, charBuffer)__      } else if (Constants.MODULE_PACKAGES.equals(attributeName)) {_        modulePackagesOffset = currentAttributeOffset__      } else if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        _      } else {_        Attribute attribute =_            readAttribute(_                attributePrototypes,_                attributeName,_                currentAttributeOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentAttributeOffset += attributeLength__    }__    _    _    classVisitor.visit(_        readInt(cpInfoOffsets[1] - 7), accessFlags, thisClass, signature, superClass, interfaces)___    _    if ((parsingOptions & SKIP_DEBUG) == 0_        && (sourceFile != null || sourceDebugExtension != null)) {_      classVisitor.visitSource(sourceFile, sourceDebugExtension)__    }__    _    if (moduleOffset != 0) {_      readModuleAttributes(_          classVisitor, context, moduleOffset, modulePackagesOffset, moduleMainClass)__    }__    _    if (nestHostClass != null) {_      classVisitor.visitNestHost(nestHostClass)__    }__    _    if (enclosingMethodOffset != 0) {_      String className = readClass(enclosingMethodOffset, charBuffer)__      int methodIndex = readUnsignedShort(enclosingMethodOffset + 2)__      String name = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex], charBuffer)__      String type = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex] + 2, charBuffer)__      classVisitor.visitOuterClass(className, name, type)__    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      classVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    if (nestMembersOffset != 0) {_      int numberOfNestMembers = readUnsignedShort(nestMembersOffset)__      int currentNestMemberOffset = nestMembersOffset + 2__      while (numberOfNestMembers-- > 0) {_        classVisitor.visitNestMember(readClass(currentNestMemberOffset, charBuffer))__        currentNestMemberOffset += 2__      }_    }__    _    if (innerClassesOffset != 0) {_      int numberOfClasses = readUnsignedShort(innerClassesOffset)__      int currentClassesOffset = innerClassesOffset + 2__      while (numberOfClasses-- > 0) {_        classVisitor.visitInnerClass(_            readClass(currentClassesOffset, charBuffer),_            readClass(currentClassesOffset + 2, charBuffer),_            readUTF8(currentClassesOffset + 4, charBuffer),_            readUnsignedShort(currentClassesOffset + 6))__        currentClassesOffset += 8__      }_    }__    _    int fieldsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (fieldsCount-- > 0) {_      currentOffset = readField(classVisitor, context, currentOffset)__    }_    int methodsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (methodsCount-- > 0) {_      currentOffset = readMethod(classVisitor, context, currentOffset)__    }__    _    classVisitor.visitEnd()__  };makes,the,given,visitor,visit,the,jvms,class,file,structure,passed,to,the,constructor,of,this,link,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attribute,prototypes,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,parsing,options,the,options,to,use,to,parse,this,class,one,or,more,of,link,link,link,or,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attribute,prototypes,final,int,parsing,options,context,context,new,context,context,attribute,prototypes,attribute,prototypes,context,parsing,options,parsing,options,context,char,buffer,new,char,max,string,length,char,char,buffer,context,char,buffer,int,current,offset,header,int,access,flags,read,unsigned,short,current,offset,string,this,class,read,class,current,offset,2,char,buffer,string,super,class,read,class,current,offset,4,char,buffer,string,interfaces,new,string,read,unsigned,short,current,offset,6,current,offset,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,current,offset,char,buffer,current,offset,2,int,inner,classes,offset,0,int,enclosing,method,offset,0,string,signature,null,string,source,file,null,string,source,debug,extension,null,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,int,module,offset,0,int,module,packages,offset,0,string,module,main,class,null,string,nest,host,class,null,int,nest,members,offset,0,attribute,attributes,null,int,current,attribute,offset,get,first,attribute,offset,for,int,i,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,read,utf8,current,attribute,offset,char,buffer,int,attribute,length,read,int,current,attribute,offset,2,current,attribute,offset,6,if,constants,equals,attribute,name,source,file,read,utf8,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,inner,classes,offset,current,attribute,offset,else,if,constants,equals,attribute,name,enclosing,method,offset,current,attribute,offset,else,if,constants,equals,attribute,name,nest,host,class,read,class,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,nest,members,offset,current,attribute,offset,else,if,constants,signature,equals,attribute,name,signature,read,utf8,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,attribute,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,attribute,offset,else,if,constants,deprecated,equals,attribute,name,access,flags,opcodes,else,if,constants,synthetic,equals,attribute,name,access,flags,opcodes,else,if,constants,equals,attribute,name,source,debug,extension,read,utf,current,attribute,offset,attribute,length,new,char,attribute,length,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,attribute,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,attribute,offset,else,if,constants,module,equals,attribute,name,module,offset,current,attribute,offset,else,if,constants,equals,attribute,name,module,main,class,read,class,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,module,packages,offset,current,attribute,offset,else,if,constants,equals,attribute,name,else,attribute,attribute,read,attribute,attribute,prototypes,attribute,name,current,attribute,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,attribute,offset,attribute,length,class,visitor,visit,read,int,cp,info,offsets,1,7,access,flags,this,class,signature,super,class,interfaces,if,parsing,options,0,source,file,null,source,debug,extension,null,class,visitor,visit,source,source,file,source,debug,extension,if,module,offset,0,read,module,attributes,class,visitor,context,module,offset,module,packages,offset,module,main,class,if,nest,host,class,null,class,visitor,visit,nest,host,nest,host,class,if,enclosing,method,offset,0,string,class,name,read,class,enclosing,method,offset,char,buffer,int,method,index,read,unsigned,short,enclosing,method,offset,2,string,name,method,index,0,null,read,utf8,cp,info,offsets,method,index,char,buffer,string,type,method,index,0,null,read,utf8,cp,info,offsets,method,index,2,char,buffer,class,visitor,visit,outer,class,class,name,name,type,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,class,visitor,visit,attribute,attributes,attributes,next,attribute,if,nest,members,offset,0,int,number,of,nest,members,read,unsigned,short,nest,members,offset,int,current,nest,member,offset,nest,members,offset,2,while,number,of,nest,members,0,class,visitor,visit,nest,member,read,class,current,nest,member,offset,char,buffer,current,nest,member,offset,2,if,inner,classes,offset,0,int,number,of,classes,read,unsigned,short,inner,classes,offset,int,current,classes,offset,inner,classes,offset,2,while,number,of,classes,0,class,visitor,visit,inner,class,read,class,current,classes,offset,char,buffer,read,class,current,classes,offset,2,char,buffer,read,utf8,current,classes,offset,4,char,buffer,read,unsigned,short,current,classes,offset,6,current,classes,offset,8,int,fields,count,read,unsigned,short,current,offset,current,offset,2,while,fields,count,0,current,offset,read,field,class,visitor,context,current,offset,int,methods,count,read,unsigned,short,current,offset,current,offset,2,while,methods,count,0,current,offset,read,method,class,visitor,context,current,offset,class,visitor,visit,end
ClassReader -> public void accept(       final ClassVisitor classVisitor,       final Attribute[] attributePrototypes,       final int parsingOptions);1539119582;Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this_{@link ClassReader}.__@param classVisitor the visitor that must visit this class._@param attributePrototypes prototypes of the attributes that must be parsed during the visit of_the class. Any attribute whose type is not equal to the type of one the prototypes will not_be parsed: its byte array value will be passed unchanged to the ClassWriter. <i>This may_corrupt it if this value contains references to the constant pool, or has syntactic or_semantic links with a class element that has been transformed by a class adapter between_the reader and the writer</i>._@param parsingOptions the options to use to parse this class. One or more of {@link_#SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.;public void accept(_      final ClassVisitor classVisitor,_      final Attribute[] attributePrototypes,_      final int parsingOptions) {_    Context context = new Context()__    context.attributePrototypes = attributePrototypes__    context.parsingOptions = parsingOptions__    context.charBuffer = new char[maxStringLength]___    _    char[] charBuffer = context.charBuffer__    int currentOffset = header__    int accessFlags = readUnsignedShort(currentOffset)__    String thisClass = readClass(currentOffset + 2, charBuffer)__    String superClass = readClass(currentOffset + 4, charBuffer)__    String[] interfaces = new String[readUnsignedShort(currentOffset + 6)]__    currentOffset += 8__    for (int i = 0_ i < interfaces.length_ ++i) {_      interfaces[i] = readClass(currentOffset, charBuffer)__      currentOffset += 2__    }__    _    _    _    int innerClassesOffset = 0__    _    int enclosingMethodOffset = 0__    _    String signature = null__    _    String sourceFile = null__    _    String sourceDebugExtension = null__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    int moduleOffset = 0__    _    int modulePackagesOffset = 0__    _    String moduleMainClass = null__    _    String nestHostClass = null__    _    int nestMembersOffset = 0__    _    _    Attribute attributes = null___    int currentAttributeOffset = getFirstAttributeOffset()__    for (int i = readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      _      String attributeName = readUTF8(currentAttributeOffset, charBuffer)__      int attributeLength = readInt(currentAttributeOffset + 2)__      currentAttributeOffset += 6__      _      _      if (Constants.SOURCE_FILE.equals(attributeName)) {_        sourceFile = readUTF8(currentAttributeOffset, charBuffer)__      } else if (Constants.INNER_CLASSES.equals(attributeName)) {_        innerClassesOffset = currentAttributeOffset__      } else if (Constants.ENCLOSING_METHOD.equals(attributeName)) {_        enclosingMethodOffset = currentAttributeOffset__      } else if (Constants.NEST_HOST.equals(attributeName)) {_        nestHostClass = readClass(currentAttributeOffset, charBuffer)__      } else if (Constants.NEST_MEMBERS.equals(attributeName)) {_        nestMembersOffset = currentAttributeOffset__      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signature = readUTF8(currentAttributeOffset, charBuffer)__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentAttributeOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentAttributeOffset__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.SOURCE_DEBUG_EXTENSION.equals(attributeName)) {_        sourceDebugExtension =_            readUtf(currentAttributeOffset, attributeLength, new char[attributeLength])__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentAttributeOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentAttributeOffset__      } else if (Constants.MODULE.equals(attributeName)) {_        moduleOffset = currentAttributeOffset__      } else if (Constants.MODULE_MAIN_CLASS.equals(attributeName)) {_        moduleMainClass = readClass(currentAttributeOffset, charBuffer)__      } else if (Constants.MODULE_PACKAGES.equals(attributeName)) {_        modulePackagesOffset = currentAttributeOffset__      } else if (!Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        _        Attribute attribute =_            readAttribute(_                attributePrototypes,_                attributeName,_                currentAttributeOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentAttributeOffset += attributeLength__    }__    _    _    classVisitor.visit(_        readInt(cpInfoOffsets[1] - 7), accessFlags, thisClass, signature, superClass, interfaces)___    _    if ((parsingOptions & SKIP_DEBUG) == 0_        && (sourceFile != null || sourceDebugExtension != null)) {_      classVisitor.visitSource(sourceFile, sourceDebugExtension)__    }__    _    if (moduleOffset != 0) {_      readModuleAttributes(_          classVisitor, context, moduleOffset, modulePackagesOffset, moduleMainClass)__    }__    _    if (nestHostClass != null) {_      classVisitor.visitNestHost(nestHostClass)__    }__    _    if (enclosingMethodOffset != 0) {_      String className = readClass(enclosingMethodOffset, charBuffer)__      int methodIndex = readUnsignedShort(enclosingMethodOffset + 2)__      String name = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex], charBuffer)__      String type = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex] + 2, charBuffer)__      classVisitor.visitOuterClass(className, name, type)__    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      classVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    if (nestMembersOffset != 0) {_      int numberOfNestMembers = readUnsignedShort(nestMembersOffset)__      int currentNestMemberOffset = nestMembersOffset + 2__      while (numberOfNestMembers-- > 0) {_        classVisitor.visitNestMember(readClass(currentNestMemberOffset, charBuffer))__        currentNestMemberOffset += 2__      }_    }__    _    if (innerClassesOffset != 0) {_      int numberOfClasses = readUnsignedShort(innerClassesOffset)__      int currentClassesOffset = innerClassesOffset + 2__      while (numberOfClasses-- > 0) {_        classVisitor.visitInnerClass(_            readClass(currentClassesOffset, charBuffer),_            readClass(currentClassesOffset + 2, charBuffer),_            readUTF8(currentClassesOffset + 4, charBuffer),_            readUnsignedShort(currentClassesOffset + 6))__        currentClassesOffset += 8__      }_    }__    _    int fieldsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (fieldsCount-- > 0) {_      currentOffset = readField(classVisitor, context, currentOffset)__    }_    int methodsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (methodsCount-- > 0) {_      currentOffset = readMethod(classVisitor, context, currentOffset)__    }__    _    classVisitor.visitEnd()__  };makes,the,given,visitor,visit,the,jvms,class,file,structure,passed,to,the,constructor,of,this,link,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attribute,prototypes,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,parsing,options,the,options,to,use,to,parse,this,class,one,or,more,of,link,link,link,or,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attribute,prototypes,final,int,parsing,options,context,context,new,context,context,attribute,prototypes,attribute,prototypes,context,parsing,options,parsing,options,context,char,buffer,new,char,max,string,length,char,char,buffer,context,char,buffer,int,current,offset,header,int,access,flags,read,unsigned,short,current,offset,string,this,class,read,class,current,offset,2,char,buffer,string,super,class,read,class,current,offset,4,char,buffer,string,interfaces,new,string,read,unsigned,short,current,offset,6,current,offset,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,current,offset,char,buffer,current,offset,2,int,inner,classes,offset,0,int,enclosing,method,offset,0,string,signature,null,string,source,file,null,string,source,debug,extension,null,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,int,module,offset,0,int,module,packages,offset,0,string,module,main,class,null,string,nest,host,class,null,int,nest,members,offset,0,attribute,attributes,null,int,current,attribute,offset,get,first,attribute,offset,for,int,i,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,read,utf8,current,attribute,offset,char,buffer,int,attribute,length,read,int,current,attribute,offset,2,current,attribute,offset,6,if,constants,equals,attribute,name,source,file,read,utf8,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,inner,classes,offset,current,attribute,offset,else,if,constants,equals,attribute,name,enclosing,method,offset,current,attribute,offset,else,if,constants,equals,attribute,name,nest,host,class,read,class,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,nest,members,offset,current,attribute,offset,else,if,constants,signature,equals,attribute,name,signature,read,utf8,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,attribute,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,attribute,offset,else,if,constants,deprecated,equals,attribute,name,access,flags,opcodes,else,if,constants,synthetic,equals,attribute,name,access,flags,opcodes,else,if,constants,equals,attribute,name,source,debug,extension,read,utf,current,attribute,offset,attribute,length,new,char,attribute,length,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,attribute,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,attribute,offset,else,if,constants,module,equals,attribute,name,module,offset,current,attribute,offset,else,if,constants,equals,attribute,name,module,main,class,read,class,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,module,packages,offset,current,attribute,offset,else,if,constants,equals,attribute,name,attribute,attribute,read,attribute,attribute,prototypes,attribute,name,current,attribute,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,attribute,offset,attribute,length,class,visitor,visit,read,int,cp,info,offsets,1,7,access,flags,this,class,signature,super,class,interfaces,if,parsing,options,0,source,file,null,source,debug,extension,null,class,visitor,visit,source,source,file,source,debug,extension,if,module,offset,0,read,module,attributes,class,visitor,context,module,offset,module,packages,offset,module,main,class,if,nest,host,class,null,class,visitor,visit,nest,host,nest,host,class,if,enclosing,method,offset,0,string,class,name,read,class,enclosing,method,offset,char,buffer,int,method,index,read,unsigned,short,enclosing,method,offset,2,string,name,method,index,0,null,read,utf8,cp,info,offsets,method,index,char,buffer,string,type,method,index,0,null,read,utf8,cp,info,offsets,method,index,2,char,buffer,class,visitor,visit,outer,class,class,name,name,type,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,class,visitor,visit,attribute,attributes,attributes,next,attribute,if,nest,members,offset,0,int,number,of,nest,members,read,unsigned,short,nest,members,offset,int,current,nest,member,offset,nest,members,offset,2,while,number,of,nest,members,0,class,visitor,visit,nest,member,read,class,current,nest,member,offset,char,buffer,current,nest,member,offset,2,if,inner,classes,offset,0,int,number,of,classes,read,unsigned,short,inner,classes,offset,int,current,classes,offset,inner,classes,offset,2,while,number,of,classes,0,class,visitor,visit,inner,class,read,class,current,classes,offset,char,buffer,read,class,current,classes,offset,2,char,buffer,read,utf8,current,classes,offset,4,char,buffer,read,unsigned,short,current,classes,offset,6,current,classes,offset,8,int,fields,count,read,unsigned,short,current,offset,current,offset,2,while,fields,count,0,current,offset,read,field,class,visitor,context,current,offset,int,methods,count,read,unsigned,short,current,offset,current,offset,2,while,methods,count,0,current,offset,read,method,class,visitor,context,current,offset,class,visitor,visit,end
ClassReader -> public void accept(       final ClassVisitor classVisitor,       final Attribute[] attributePrototypes,       final int parsingOptions);1541436263;Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this_{@link ClassReader}.__@param classVisitor the visitor that must visit this class._@param attributePrototypes prototypes of the attributes that must be parsed during the visit of_the class. Any attribute whose type is not equal to the type of one the prototypes will not_be parsed: its byte array value will be passed unchanged to the ClassWriter. <i>This may_corrupt it if this value contains references to the constant pool, or has syntactic or_semantic links with a class element that has been transformed by a class adapter between_the reader and the writer</i>._@param parsingOptions the options to use to parse this class. One or more of {@link_#SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.;public void accept(_      final ClassVisitor classVisitor,_      final Attribute[] attributePrototypes,_      final int parsingOptions) {_    Context context = new Context()__    context.attributePrototypes = attributePrototypes__    context.parsingOptions = parsingOptions__    context.charBuffer = new char[maxStringLength]___    _    char[] charBuffer = context.charBuffer__    int currentOffset = header__    int accessFlags = readUnsignedShort(currentOffset)__    String thisClass = readClass(currentOffset + 2, charBuffer)__    String superClass = readClass(currentOffset + 4, charBuffer)__    String[] interfaces = new String[readUnsignedShort(currentOffset + 6)]__    currentOffset += 8__    for (int i = 0_ i < interfaces.length_ ++i) {_      interfaces[i] = readClass(currentOffset, charBuffer)__      currentOffset += 2__    }__    _    _    _    int innerClassesOffset = 0__    _    int enclosingMethodOffset = 0__    _    String signature = null__    _    String sourceFile = null__    _    String sourceDebugExtension = null__    _    int runtimeVisibleAnnotationsOffset = 0__    _    int runtimeInvisibleAnnotationsOffset = 0__    _    int runtimeVisibleTypeAnnotationsOffset = 0__    _    int runtimeInvisibleTypeAnnotationsOffset = 0__    _    int moduleOffset = 0__    _    int modulePackagesOffset = 0__    _    String moduleMainClass = null__    _    String nestHostClass = null__    _    int nestMembersOffset = 0__    _    _    Attribute attributes = null___    int currentAttributeOffset = getFirstAttributeOffset()__    for (int i = readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      _      String attributeName = readUTF8(currentAttributeOffset, charBuffer)__      int attributeLength = readInt(currentAttributeOffset + 2)__      currentAttributeOffset += 6__      _      _      if (Constants.SOURCE_FILE.equals(attributeName)) {_        sourceFile = readUTF8(currentAttributeOffset, charBuffer)__      } else if (Constants.INNER_CLASSES.equals(attributeName)) {_        innerClassesOffset = currentAttributeOffset__      } else if (Constants.ENCLOSING_METHOD.equals(attributeName)) {_        enclosingMethodOffset = currentAttributeOffset__      } else if (Constants.NEST_HOST.equals(attributeName)) {_        nestHostClass = readClass(currentAttributeOffset, charBuffer)__      } else if (Constants.NEST_MEMBERS.equals(attributeName)) {_        nestMembersOffset = currentAttributeOffset__      } else if (Constants.SIGNATURE.equals(attributeName)) {_        signature = readUTF8(currentAttributeOffset, charBuffer)__      } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleAnnotationsOffset = currentAttributeOffset__      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeVisibleTypeAnnotationsOffset = currentAttributeOffset__      } else if (Constants.DEPRECATED.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_DEPRECATED__      } else if (Constants.SYNTHETIC.equals(attributeName)) {_        accessFlags |= Opcodes.ACC_SYNTHETIC__      } else if (Constants.SOURCE_DEBUG_EXTENSION.equals(attributeName)) {_        sourceDebugExtension =_            readUtf(currentAttributeOffset, attributeLength, new char[attributeLength])__      } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleAnnotationsOffset = currentAttributeOffset__      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        runtimeInvisibleTypeAnnotationsOffset = currentAttributeOffset__      } else if (Constants.MODULE.equals(attributeName)) {_        moduleOffset = currentAttributeOffset__      } else if (Constants.MODULE_MAIN_CLASS.equals(attributeName)) {_        moduleMainClass = readClass(currentAttributeOffset, charBuffer)__      } else if (Constants.MODULE_PACKAGES.equals(attributeName)) {_        modulePackagesOffset = currentAttributeOffset__      } else if (!Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        _        Attribute attribute =_            readAttribute(_                attributePrototypes,_                attributeName,_                currentAttributeOffset,_                attributeLength,_                charBuffer,_                -1,_                null)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentAttributeOffset += attributeLength__    }__    _    _    classVisitor.visit(_        readInt(cpInfoOffsets[1] - 7), accessFlags, thisClass, signature, superClass, interfaces)___    _    if ((parsingOptions & SKIP_DEBUG) == 0_        && (sourceFile != null || sourceDebugExtension != null)) {_      classVisitor.visitSource(sourceFile, sourceDebugExtension)__    }__    _    if (moduleOffset != 0) {_      readModuleAttributes(_          classVisitor, context, moduleOffset, modulePackagesOffset, moduleMainClass)__    }__    _    if (nestHostClass != null) {_      classVisitor.visitNestHost(nestHostClass)__    }__    _    if (enclosingMethodOffset != 0) {_      String className = readClass(enclosingMethodOffset, charBuffer)__      int methodIndex = readUnsignedShort(enclosingMethodOffset + 2)__      String name = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex], charBuffer)__      String type = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex] + 2, charBuffer)__      classVisitor.visitOuterClass(className, name, type)__    }__    _    if (runtimeVisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitAnnotation(annotationDescriptor,  true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitAnnotation(annotationDescriptor,  false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeVisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     true),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    if (runtimeInvisibleTypeAnnotationsOffset != 0) {_      int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset)__      int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2__      while (numAnnotations-- > 0) {_        _        currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset)__        _        String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__        currentAnnotationOffset += 2__        _        currentAnnotationOffset =_            readElementValues(_                classVisitor.visitTypeAnnotation(_                    context.currentTypeAnnotationTarget,_                    context.currentTypeAnnotationTargetPath,_                    annotationDescriptor,_                     false),_                currentAnnotationOffset,_                 true,_                charBuffer)__      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      classVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    if (nestMembersOffset != 0) {_      int numberOfNestMembers = readUnsignedShort(nestMembersOffset)__      int currentNestMemberOffset = nestMembersOffset + 2__      while (numberOfNestMembers-- > 0) {_        classVisitor.visitNestMember(readClass(currentNestMemberOffset, charBuffer))__        currentNestMemberOffset += 2__      }_    }__    _    if (innerClassesOffset != 0) {_      int numberOfClasses = readUnsignedShort(innerClassesOffset)__      int currentClassesOffset = innerClassesOffset + 2__      while (numberOfClasses-- > 0) {_        classVisitor.visitInnerClass(_            readClass(currentClassesOffset, charBuffer),_            readClass(currentClassesOffset + 2, charBuffer),_            readUTF8(currentClassesOffset + 4, charBuffer),_            readUnsignedShort(currentClassesOffset + 6))__        currentClassesOffset += 8__      }_    }__    _    int fieldsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (fieldsCount-- > 0) {_      currentOffset = readField(classVisitor, context, currentOffset)__    }_    int methodsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (methodsCount-- > 0) {_      currentOffset = readMethod(classVisitor, context, currentOffset)__    }__    _    classVisitor.visitEnd()__  };makes,the,given,visitor,visit,the,jvms,class,file,structure,passed,to,the,constructor,of,this,link,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attribute,prototypes,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,parsing,options,the,options,to,use,to,parse,this,class,one,or,more,of,link,link,link,or,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attribute,prototypes,final,int,parsing,options,context,context,new,context,context,attribute,prototypes,attribute,prototypes,context,parsing,options,parsing,options,context,char,buffer,new,char,max,string,length,char,char,buffer,context,char,buffer,int,current,offset,header,int,access,flags,read,unsigned,short,current,offset,string,this,class,read,class,current,offset,2,char,buffer,string,super,class,read,class,current,offset,4,char,buffer,string,interfaces,new,string,read,unsigned,short,current,offset,6,current,offset,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,current,offset,char,buffer,current,offset,2,int,inner,classes,offset,0,int,enclosing,method,offset,0,string,signature,null,string,source,file,null,string,source,debug,extension,null,int,runtime,visible,annotations,offset,0,int,runtime,invisible,annotations,offset,0,int,runtime,visible,type,annotations,offset,0,int,runtime,invisible,type,annotations,offset,0,int,module,offset,0,int,module,packages,offset,0,string,module,main,class,null,string,nest,host,class,null,int,nest,members,offset,0,attribute,attributes,null,int,current,attribute,offset,get,first,attribute,offset,for,int,i,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,read,utf8,current,attribute,offset,char,buffer,int,attribute,length,read,int,current,attribute,offset,2,current,attribute,offset,6,if,constants,equals,attribute,name,source,file,read,utf8,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,inner,classes,offset,current,attribute,offset,else,if,constants,equals,attribute,name,enclosing,method,offset,current,attribute,offset,else,if,constants,equals,attribute,name,nest,host,class,read,class,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,nest,members,offset,current,attribute,offset,else,if,constants,signature,equals,attribute,name,signature,read,utf8,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,runtime,visible,annotations,offset,current,attribute,offset,else,if,constants,equals,attribute,name,runtime,visible,type,annotations,offset,current,attribute,offset,else,if,constants,deprecated,equals,attribute,name,access,flags,opcodes,else,if,constants,synthetic,equals,attribute,name,access,flags,opcodes,else,if,constants,equals,attribute,name,source,debug,extension,read,utf,current,attribute,offset,attribute,length,new,char,attribute,length,else,if,constants,equals,attribute,name,runtime,invisible,annotations,offset,current,attribute,offset,else,if,constants,equals,attribute,name,runtime,invisible,type,annotations,offset,current,attribute,offset,else,if,constants,module,equals,attribute,name,module,offset,current,attribute,offset,else,if,constants,equals,attribute,name,module,main,class,read,class,current,attribute,offset,char,buffer,else,if,constants,equals,attribute,name,module,packages,offset,current,attribute,offset,else,if,constants,equals,attribute,name,attribute,attribute,read,attribute,attribute,prototypes,attribute,name,current,attribute,offset,attribute,length,char,buffer,1,null,attribute,next,attribute,attributes,attributes,attribute,current,attribute,offset,attribute,length,class,visitor,visit,read,int,cp,info,offsets,1,7,access,flags,this,class,signature,super,class,interfaces,if,parsing,options,0,source,file,null,source,debug,extension,null,class,visitor,visit,source,source,file,source,debug,extension,if,module,offset,0,read,module,attributes,class,visitor,context,module,offset,module,packages,offset,module,main,class,if,nest,host,class,null,class,visitor,visit,nest,host,nest,host,class,if,enclosing,method,offset,0,string,class,name,read,class,enclosing,method,offset,char,buffer,int,method,index,read,unsigned,short,enclosing,method,offset,2,string,name,method,index,0,null,read,utf8,cp,info,offsets,method,index,char,buffer,string,type,method,index,0,null,read,utf8,cp,info,offsets,method,index,2,char,buffer,class,visitor,visit,outer,class,class,name,name,type,if,runtime,visible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,annotations,offset,int,current,annotation,offset,runtime,visible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,annotation,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,annotations,offset,int,current,annotation,offset,runtime,invisible,annotations,offset,2,while,num,annotations,0,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,annotation,annotation,descriptor,false,current,annotation,offset,true,char,buffer,if,runtime,visible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,visible,type,annotations,offset,int,current,annotation,offset,runtime,visible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,if,runtime,invisible,type,annotations,offset,0,int,num,annotations,read,unsigned,short,runtime,invisible,type,annotations,offset,int,current,annotation,offset,runtime,invisible,type,annotations,offset,2,while,num,annotations,0,current,annotation,offset,read,type,annotation,target,context,current,annotation,offset,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,current,annotation,offset,read,element,values,class,visitor,visit,type,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,class,visitor,visit,attribute,attributes,attributes,next,attribute,if,nest,members,offset,0,int,number,of,nest,members,read,unsigned,short,nest,members,offset,int,current,nest,member,offset,nest,members,offset,2,while,number,of,nest,members,0,class,visitor,visit,nest,member,read,class,current,nest,member,offset,char,buffer,current,nest,member,offset,2,if,inner,classes,offset,0,int,number,of,classes,read,unsigned,short,inner,classes,offset,int,current,classes,offset,inner,classes,offset,2,while,number,of,classes,0,class,visitor,visit,inner,class,read,class,current,classes,offset,char,buffer,read,class,current,classes,offset,2,char,buffer,read,utf8,current,classes,offset,4,char,buffer,read,unsigned,short,current,classes,offset,6,current,classes,offset,8,int,fields,count,read,unsigned,short,current,offset,current,offset,2,while,fields,count,0,current,offset,read,field,class,visitor,context,current,offset,int,methods,count,read,unsigned,short,current,offset,current,offset,2,while,methods,count,0,current,offset,read,method,class,visitor,context,current,offset,class,visitor,visit,end
ClassReader -> public String readClass(final int offset, final char[] charBuffer);1531241461;Reads a CONSTANT_Class constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Class entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Class entry.;public String readClass(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,class,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readClass(final int offset, final char[] charBuffer);1536664245;Reads a CONSTANT_Class constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Class entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Class entry.;public String readClass(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,class,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readClass(final int offset, final char[] charBuffer);1536747989;Reads a CONSTANT_Class constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Class entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Class entry.;public String readClass(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,class,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readClass(final int offset, final char[] charBuffer);1537204147;Reads a CONSTANT_Class constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Class entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Class entry.;public String readClass(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,class,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readClass(final int offset, final char[] charBuffer);1539119582;Reads a CONSTANT_Class constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Class entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Class entry.;public String readClass(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,class,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readClass(final int offset, final char[] charBuffer);1541436263;Reads a CONSTANT_Class constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Class entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Class entry.;public String readClass(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,class,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public int readByte(final int index);1366718246;Reads a byte value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readByte(final int index) {_        return b[index] & 0xFF__    };reads,a,byte,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,byte,final,int,index,return,b,index,0x,ff
ClassReader -> public int readByte(final int index);1395273982;Reads a byte value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readByte(final int index) {_        return b[index] & 0xFF__    };reads,a,byte,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,byte,final,int,index,return,b,index,0x,ff
ClassReader -> public int readByte(final int index);1414067099;Reads a byte value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readByte(final int index) {_        return b[index] & 0xFF__    };reads,a,byte,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,byte,final,int,index,return,b,index,0x,ff
ClassReader -> public int readByte(final int index);1414499035;Reads a byte value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readByte(final int index) {_        return b[index] & 0xFF__    };reads,a,byte,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,byte,final,int,index,return,b,index,0x,ff
ClassReader -> public int readByte(final int index);1416998550;Reads a byte value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readByte(final int index) {_        return b[index] & 0xFF__    };reads,a,byte,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,byte,final,int,index,return,b,index,0x,ff
ClassReader -> public int readByte(final int index);1457705343;Reads a byte value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readByte(final int index) {_        return b[index] & 0xFF__    };reads,a,byte,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,byte,final,int,index,return,b,index,0x,ff
ClassReader -> public int readByte(final int index);1459258703;Reads a byte value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readByte(final int index) {_        return b[index] & 0xFF__    };reads,a,byte,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,byte,final,int,index,return,b,index,0x,ff
ClassReader -> public int readByte(final int index);1478623137;Reads a byte value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readByte(final int index) {_        return b[index] & 0xFF__    };reads,a,byte,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,byte,final,int,index,return,b,index,0x,ff
ClassReader -> public int readByte(final int index);1483093254;Reads a byte value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readByte(final int index) {_        return b[index] & 0xFF__    };reads,a,byte,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,byte,final,int,index,return,b,index,0x,ff
ClassReader -> public int readByte(final int index);1505821772;Reads a byte value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readByte(final int index) {_        return b[index] & 0xFF__    };reads,a,byte,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,byte,final,int,index,return,b,index,0x,ff
ClassReader -> public String readClass(final int index, final char[] buf);1366718246;Reads a class constant pool item in {@link #b b}. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of a class constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified class item.;public String readClass(final int index, final char[] buf) {_        _        _        _        return readUTF8(items[readUnsignedShort(index)], buf)__    };reads,a,class,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,a,class,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,class,item;public,string,read,class,final,int,index,final,char,buf,return,read,utf8,items,read,unsigned,short,index,buf
ClassReader -> public String readClass(final int index, final char[] buf);1395273982;Reads a class constant pool item in {@link #b b}. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of a class constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified class item.;public String readClass(final int index, final char[] buf) {_        _        _        _        return readUTF8(items[readUnsignedShort(index)], buf)__    };reads,a,class,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,a,class,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,class,item;public,string,read,class,final,int,index,final,char,buf,return,read,utf8,items,read,unsigned,short,index,buf
ClassReader -> public String readClass(final int index, final char[] buf);1414067099;Reads a class constant pool item in {@link #b b}. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of a class constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified class item.;public String readClass(final int index, final char[] buf) {_        _        _        _        return readUTF8(items[readUnsignedShort(index)], buf)__    };reads,a,class,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,a,class,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,class,item;public,string,read,class,final,int,index,final,char,buf,return,read,utf8,items,read,unsigned,short,index,buf
ClassReader -> public String readClass(final int index, final char[] buf);1414499035;Reads a class constant pool item in {@link #b b}. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of a class constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified class item.;public String readClass(final int index, final char[] buf) {_        _        _        _        return readUTF8(items[readUnsignedShort(index)], buf)__    };reads,a,class,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,a,class,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,class,item;public,string,read,class,final,int,index,final,char,buf,return,read,utf8,items,read,unsigned,short,index,buf
ClassReader -> public String readClass(final int index, final char[] buf);1416998550;Reads a class constant pool item in {@link #b b}. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of a class constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified class item.;public String readClass(final int index, final char[] buf) {_        _        _        _        return readUTF8(items[readUnsignedShort(index)], buf)__    };reads,a,class,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,a,class,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,class,item;public,string,read,class,final,int,index,final,char,buf,return,read,utf8,items,read,unsigned,short,index,buf
ClassReader -> public String readClass(final int index, final char[] buf);1457705343;Reads a class constant pool item in {@link #b b}. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of a class constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified class item.;public String readClass(final int index, final char[] buf) {_        _        _        _        return readUTF8(items[readUnsignedShort(index)], buf)__    };reads,a,class,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,a,class,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,class,item;public,string,read,class,final,int,index,final,char,buf,return,read,utf8,items,read,unsigned,short,index,buf
ClassReader -> public String readClass(final int index, final char[] buf);1459258703;Reads a class constant pool item in {@link #b b}. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of a class constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified class item.;public String readClass(final int index, final char[] buf) {_        _        _        _        return readUTF8(items[readUnsignedShort(index)], buf)__    };reads,a,class,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,a,class,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,class,item;public,string,read,class,final,int,index,final,char,buf,return,read,utf8,items,read,unsigned,short,index,buf
ClassReader -> public String readClass(final int index, final char[] buf);1478623137;Reads a class constant pool item in {@link #b b}. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of a class constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified class item.;public String readClass(final int index, final char[] buf) {_        _        _        _        String name = readUTF8(items[readUnsignedShort(index)], buf)__        return (name != null ? name.intern() : null)__    };reads,a,class,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,a,class,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,class,item;public,string,read,class,final,int,index,final,char,buf,string,name,read,utf8,items,read,unsigned,short,index,buf,return,name,null,name,intern,null
ClassReader -> public String readClass(final int index, final char[] buf);1483093254;Reads a class constant pool item in {@link #b b}. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of a class constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified class item.;public String readClass(final int index, final char[] buf) {_        _        _        _        String name = readUTF8(items[readUnsignedShort(index)], buf)__        return (name != null ? name.intern() : null)__    };reads,a,class,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,a,class,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,class,item;public,string,read,class,final,int,index,final,char,buf,string,name,read,utf8,items,read,unsigned,short,index,buf,return,name,null,name,intern,null
ClassReader -> public String readClass(final int index, final char[] buf);1505821772;Reads a class constant pool item in {@link #b b}. <i>This method is_intended for {@link Attribute} sub classes, and is normally not needed by_class generators or adapters.</i>__@param index_the start index of an unsigned short value in {@link #b b},_whose value is the index of a class constant pool item._@param buf_buffer to be used to read the item. This buffer must be_sufficiently large. It is not automatically resized._@return the String corresponding to the specified class item.;public String readClass(final int index, final char[] buf) {_        return readStringish(index, buf)__    };reads,a,class,constant,pool,item,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,an,unsigned,short,value,in,link,b,b,whose,value,is,the,index,of,a,class,constant,pool,item,param,buf,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,class,item;public,string,read,class,final,int,index,final,char,buf,return,read,stringish,index,buf
ClassReader -> private int readElementValue(       final AnnotationVisitor annotationVisitor,       final int elementValueOffset,       final String elementName,       final char[] charBuffer);1531241461;Reads a JVMS 'element_value' structure and makes the given visitor visit it.__@param annotationVisitor the visitor that must visit the element_value structure._@param elementValueOffset the start offset in {@link #b} of the element_value structure to be_read._@param elementName the name of the element_value structure to be read, or <tt>null</tt>._@param charBuffer the buffer used to read strings in the constant pool._@return the end offset of the JVMS 'element_value' structure.;private int readElementValue(_      final AnnotationVisitor annotationVisitor,_      final int elementValueOffset,_      final String elementName,_      final char[] charBuffer) {_    int currentOffset = elementValueOffset__    if (annotationVisitor == null) {_      switch (b[currentOffset] & 0xFF) {_        case 'e': _          return currentOffset + 5__        case '@': _          return readElementValues(null, currentOffset + 3,  true, charBuffer)__        case '[': _          return readElementValues(null, currentOffset + 1,  false, charBuffer)__        default:_          return currentOffset + 3__      }_    }_    switch (b[currentOffset++] & 0xFF) {_      case 'B': _        annotationVisitor.visit(_            elementName, (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break__      case 'C': _        annotationVisitor.visit(_            elementName, (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break__      case 'D': _      case 'F': _      case 'I': _      case 'J': _        annotationVisitor.visit(_            elementName, readConst(readUnsignedShort(currentOffset), charBuffer))__        currentOffset += 2__        break__      case 'S': _        annotationVisitor.visit(_            elementName, (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break___      case 'Z': _        annotationVisitor.visit(_            elementName,_            readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]) == 0_                ? Boolean.FALSE_                : Boolean.TRUE)__        currentOffset += 2__        break__      case 's': _        annotationVisitor.visit(elementName, readUTF8(currentOffset, charBuffer))__        currentOffset += 2__        break__      case 'e': _        annotationVisitor.visitEnum(_            elementName,_            readUTF8(currentOffset, charBuffer),_            readUTF8(currentOffset + 2, charBuffer))__        currentOffset += 4__        break__      case 'c': _        annotationVisitor.visit(elementName, Type.getType(readUTF8(currentOffset, charBuffer)))__        currentOffset += 2__        break__      case '@': _        currentOffset =_            readElementValues(_                annotationVisitor.visitAnnotation(elementName, readUTF8(currentOffset, charBuffer)),_                currentOffset + 2,_                true,_                charBuffer)__        break__      case '[': _        int numValues = readUnsignedShort(currentOffset)__        currentOffset += 2__        if (numValues == 0) {_          return readElementValues(_              annotationVisitor.visitArray(elementName),_              currentOffset - 2,_               false,_              charBuffer)__        }_        switch (b[currentOffset] & 0xFF) {_          case 'B':_            byte[] byteValues = new byte[numValues]__            for (int i = 0_ i < numValues_ i++) {_              byteValues[i] = (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, byteValues)__            break__          case 'Z':_            boolean[] booleanValues = new boolean[numValues]__            for (int i = 0_ i < numValues_ i++) {_              booleanValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]) != 0__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, booleanValues)__            break__          case 'S':_            short[] shortValues = new short[numValues]__            for (int i = 0_ i < numValues_ i++) {_              shortValues[i] = (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, shortValues)__            break__          case 'C':_            char[] charValues = new char[numValues]__            for (int i = 0_ i < numValues_ i++) {_              charValues[i] = (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, charValues)__            break__          case 'I':_            int[] intValues = new int[numValues]__            for (int i = 0_ i < numValues_ i++) {_              intValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, intValues)__            break__          case 'J':_            long[] longValues = new long[numValues]__            for (int i = 0_ i < numValues_ i++) {_              longValues[i] = readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, longValues)__            break__          case 'F':_            float[] floatValues = new float[numValues]__            for (int i = 0_ i < numValues_ i++) {_              floatValues[i] =_                  Float.intBitsToFloat(_                      readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]))__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, floatValues)__            break__          case 'D':_            double[] doubleValues = new double[numValues]__            for (int i = 0_ i < numValues_ i++) {_              doubleValues[i] =_                  Double.longBitsToDouble(_                      readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]))__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, doubleValues)__            break__          default:_            currentOffset =_                readElementValues(_                    annotationVisitor.visitArray(elementName),_                    currentOffset - 2,_                     false,_                    charBuffer)__            break__        }_        break__      default:_        throw new IllegalArgumentException()__    }_    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,annotation,visitor,the,visitor,that,must,visit,the,structure,param,element,value,offset,the,start,offset,in,link,b,of,the,structure,to,be,read,param,element,name,the,name,of,the,structure,to,be,read,or,tt,null,tt,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,return,the,end,offset,of,the,jvms,structure;private,int,read,element,value,final,annotation,visitor,annotation,visitor,final,int,element,value,offset,final,string,element,name,final,char,char,buffer,int,current,offset,element,value,offset,if,annotation,visitor,null,switch,b,current,offset,0x,ff,case,e,return,current,offset,5,case,return,read,element,values,null,current,offset,3,true,char,buffer,case,return,read,element,values,null,current,offset,1,false,char,buffer,default,return,current,offset,3,switch,b,current,offset,0x,ff,case,b,annotation,visitor,visit,element,name,byte,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,c,annotation,visitor,visit,element,name,char,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,d,case,f,case,i,case,j,annotation,visitor,visit,element,name,read,const,read,unsigned,short,current,offset,char,buffer,current,offset,2,break,case,s,annotation,visitor,visit,element,name,short,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,z,annotation,visitor,visit,element,name,read,int,cp,info,offsets,read,unsigned,short,current,offset,0,boolean,false,boolean,true,current,offset,2,break,case,s,annotation,visitor,visit,element,name,read,utf8,current,offset,char,buffer,current,offset,2,break,case,e,annotation,visitor,visit,enum,element,name,read,utf8,current,offset,char,buffer,read,utf8,current,offset,2,char,buffer,current,offset,4,break,case,c,annotation,visitor,visit,element,name,type,get,type,read,utf8,current,offset,char,buffer,current,offset,2,break,case,current,offset,read,element,values,annotation,visitor,visit,annotation,element,name,read,utf8,current,offset,char,buffer,current,offset,2,true,char,buffer,break,case,int,num,values,read,unsigned,short,current,offset,current,offset,2,if,num,values,0,return,read,element,values,annotation,visitor,visit,array,element,name,current,offset,2,false,char,buffer,switch,b,current,offset,0x,ff,case,b,byte,byte,values,new,byte,num,values,for,int,i,0,i,num,values,i,byte,values,i,byte,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,byte,values,break,case,z,boolean,boolean,values,new,boolean,num,values,for,int,i,0,i,num,values,i,boolean,values,i,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,0,current,offset,3,annotation,visitor,visit,element,name,boolean,values,break,case,s,short,short,values,new,short,num,values,for,int,i,0,i,num,values,i,short,values,i,short,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,short,values,break,case,c,char,char,values,new,char,num,values,for,int,i,0,i,num,values,i,char,values,i,char,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,char,values,break,case,i,int,int,values,new,int,num,values,for,int,i,0,i,num,values,i,int,values,i,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,int,values,break,case,j,long,long,values,new,long,num,values,for,int,i,0,i,num,values,i,long,values,i,read,long,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,long,values,break,case,f,float,float,values,new,float,num,values,for,int,i,0,i,num,values,i,float,values,i,float,int,bits,to,float,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,float,values,break,case,d,double,double,values,new,double,num,values,for,int,i,0,i,num,values,i,double,values,i,double,long,bits,to,double,read,long,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,double,values,break,default,current,offset,read,element,values,annotation,visitor,visit,array,element,name,current,offset,2,false,char,buffer,break,break,default,throw,new,illegal,argument,exception,return,current,offset
ClassReader -> private int readElementValue(       final AnnotationVisitor annotationVisitor,       final int elementValueOffset,       final String elementName,       final char[] charBuffer);1536664245;Reads a JVMS 'element_value' structure and makes the given visitor visit it.__@param annotationVisitor the visitor that must visit the element_value structure._@param elementValueOffset the start offset in {@link #b} of the element_value structure to be_read._@param elementName the name of the element_value structure to be read, or {@literal null}._@param charBuffer the buffer used to read strings in the constant pool._@return the end offset of the JVMS 'element_value' structure.;private int readElementValue(_      final AnnotationVisitor annotationVisitor,_      final int elementValueOffset,_      final String elementName,_      final char[] charBuffer) {_    int currentOffset = elementValueOffset__    if (annotationVisitor == null) {_      switch (b[currentOffset] & 0xFF) {_        case 'e': _          return currentOffset + 5__        case '@': _          return readElementValues(null, currentOffset + 3,  true, charBuffer)__        case '[': _          return readElementValues(null, currentOffset + 1,  false, charBuffer)__        default:_          return currentOffset + 3__      }_    }_    switch (b[currentOffset++] & 0xFF) {_      case 'B': _        annotationVisitor.visit(_            elementName, (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break__      case 'C': _        annotationVisitor.visit(_            elementName, (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break__      case 'D': _      case 'F': _      case 'I': _      case 'J': _        annotationVisitor.visit(_            elementName, readConst(readUnsignedShort(currentOffset), charBuffer))__        currentOffset += 2__        break__      case 'S': _        annotationVisitor.visit(_            elementName, (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break___      case 'Z': _        annotationVisitor.visit(_            elementName,_            readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]) == 0_                ? Boolean.FALSE_                : Boolean.TRUE)__        currentOffset += 2__        break__      case 's': _        annotationVisitor.visit(elementName, readUTF8(currentOffset, charBuffer))__        currentOffset += 2__        break__      case 'e': _        annotationVisitor.visitEnum(_            elementName,_            readUTF8(currentOffset, charBuffer),_            readUTF8(currentOffset + 2, charBuffer))__        currentOffset += 4__        break__      case 'c': _        annotationVisitor.visit(elementName, Type.getType(readUTF8(currentOffset, charBuffer)))__        currentOffset += 2__        break__      case '@': _        currentOffset =_            readElementValues(_                annotationVisitor.visitAnnotation(elementName, readUTF8(currentOffset, charBuffer)),_                currentOffset + 2,_                true,_                charBuffer)__        break__      case '[': _        int numValues = readUnsignedShort(currentOffset)__        currentOffset += 2__        if (numValues == 0) {_          return readElementValues(_              annotationVisitor.visitArray(elementName),_              currentOffset - 2,_               false,_              charBuffer)__        }_        switch (b[currentOffset] & 0xFF) {_          case 'B':_            byte[] byteValues = new byte[numValues]__            for (int i = 0_ i < numValues_ i++) {_              byteValues[i] = (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, byteValues)__            break__          case 'Z':_            boolean[] booleanValues = new boolean[numValues]__            for (int i = 0_ i < numValues_ i++) {_              booleanValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]) != 0__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, booleanValues)__            break__          case 'S':_            short[] shortValues = new short[numValues]__            for (int i = 0_ i < numValues_ i++) {_              shortValues[i] = (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, shortValues)__            break__          case 'C':_            char[] charValues = new char[numValues]__            for (int i = 0_ i < numValues_ i++) {_              charValues[i] = (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, charValues)__            break__          case 'I':_            int[] intValues = new int[numValues]__            for (int i = 0_ i < numValues_ i++) {_              intValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, intValues)__            break__          case 'J':_            long[] longValues = new long[numValues]__            for (int i = 0_ i < numValues_ i++) {_              longValues[i] = readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, longValues)__            break__          case 'F':_            float[] floatValues = new float[numValues]__            for (int i = 0_ i < numValues_ i++) {_              floatValues[i] =_                  Float.intBitsToFloat(_                      readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]))__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, floatValues)__            break__          case 'D':_            double[] doubleValues = new double[numValues]__            for (int i = 0_ i < numValues_ i++) {_              doubleValues[i] =_                  Double.longBitsToDouble(_                      readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]))__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, doubleValues)__            break__          default:_            currentOffset =_                readElementValues(_                    annotationVisitor.visitArray(elementName),_                    currentOffset - 2,_                     false,_                    charBuffer)__            break__        }_        break__      default:_        throw new IllegalArgumentException()__    }_    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,annotation,visitor,the,visitor,that,must,visit,the,structure,param,element,value,offset,the,start,offset,in,link,b,of,the,structure,to,be,read,param,element,name,the,name,of,the,structure,to,be,read,or,literal,null,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,return,the,end,offset,of,the,jvms,structure;private,int,read,element,value,final,annotation,visitor,annotation,visitor,final,int,element,value,offset,final,string,element,name,final,char,char,buffer,int,current,offset,element,value,offset,if,annotation,visitor,null,switch,b,current,offset,0x,ff,case,e,return,current,offset,5,case,return,read,element,values,null,current,offset,3,true,char,buffer,case,return,read,element,values,null,current,offset,1,false,char,buffer,default,return,current,offset,3,switch,b,current,offset,0x,ff,case,b,annotation,visitor,visit,element,name,byte,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,c,annotation,visitor,visit,element,name,char,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,d,case,f,case,i,case,j,annotation,visitor,visit,element,name,read,const,read,unsigned,short,current,offset,char,buffer,current,offset,2,break,case,s,annotation,visitor,visit,element,name,short,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,z,annotation,visitor,visit,element,name,read,int,cp,info,offsets,read,unsigned,short,current,offset,0,boolean,false,boolean,true,current,offset,2,break,case,s,annotation,visitor,visit,element,name,read,utf8,current,offset,char,buffer,current,offset,2,break,case,e,annotation,visitor,visit,enum,element,name,read,utf8,current,offset,char,buffer,read,utf8,current,offset,2,char,buffer,current,offset,4,break,case,c,annotation,visitor,visit,element,name,type,get,type,read,utf8,current,offset,char,buffer,current,offset,2,break,case,current,offset,read,element,values,annotation,visitor,visit,annotation,element,name,read,utf8,current,offset,char,buffer,current,offset,2,true,char,buffer,break,case,int,num,values,read,unsigned,short,current,offset,current,offset,2,if,num,values,0,return,read,element,values,annotation,visitor,visit,array,element,name,current,offset,2,false,char,buffer,switch,b,current,offset,0x,ff,case,b,byte,byte,values,new,byte,num,values,for,int,i,0,i,num,values,i,byte,values,i,byte,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,byte,values,break,case,z,boolean,boolean,values,new,boolean,num,values,for,int,i,0,i,num,values,i,boolean,values,i,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,0,current,offset,3,annotation,visitor,visit,element,name,boolean,values,break,case,s,short,short,values,new,short,num,values,for,int,i,0,i,num,values,i,short,values,i,short,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,short,values,break,case,c,char,char,values,new,char,num,values,for,int,i,0,i,num,values,i,char,values,i,char,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,char,values,break,case,i,int,int,values,new,int,num,values,for,int,i,0,i,num,values,i,int,values,i,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,int,values,break,case,j,long,long,values,new,long,num,values,for,int,i,0,i,num,values,i,long,values,i,read,long,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,long,values,break,case,f,float,float,values,new,float,num,values,for,int,i,0,i,num,values,i,float,values,i,float,int,bits,to,float,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,float,values,break,case,d,double,double,values,new,double,num,values,for,int,i,0,i,num,values,i,double,values,i,double,long,bits,to,double,read,long,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,double,values,break,default,current,offset,read,element,values,annotation,visitor,visit,array,element,name,current,offset,2,false,char,buffer,break,break,default,throw,new,illegal,argument,exception,return,current,offset
ClassReader -> private int readElementValue(       final AnnotationVisitor annotationVisitor,       final int elementValueOffset,       final String elementName,       final char[] charBuffer);1536747989;Reads a JVMS 'element_value' structure and makes the given visitor visit it.__@param annotationVisitor the visitor that must visit the element_value structure._@param elementValueOffset the start offset in {@link #b} of the element_value structure to be_read._@param elementName the name of the element_value structure to be read, or {@literal null}._@param charBuffer the buffer used to read strings in the constant pool._@return the end offset of the JVMS 'element_value' structure.;private int readElementValue(_      final AnnotationVisitor annotationVisitor,_      final int elementValueOffset,_      final String elementName,_      final char[] charBuffer) {_    int currentOffset = elementValueOffset__    if (annotationVisitor == null) {_      switch (b[currentOffset] & 0xFF) {_        case 'e': _          return currentOffset + 5__        case '@': _          return readElementValues(null, currentOffset + 3,  true, charBuffer)__        case '[': _          return readElementValues(null, currentOffset + 1,  false, charBuffer)__        default:_          return currentOffset + 3__      }_    }_    switch (b[currentOffset++] & 0xFF) {_      case 'B': _        annotationVisitor.visit(_            elementName, (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break__      case 'C': _        annotationVisitor.visit(_            elementName, (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break__      case 'D': _      case 'F': _      case 'I': _      case 'J': _        annotationVisitor.visit(_            elementName, readConst(readUnsignedShort(currentOffset), charBuffer))__        currentOffset += 2__        break__      case 'S': _        annotationVisitor.visit(_            elementName, (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break___      case 'Z': _        annotationVisitor.visit(_            elementName,_            readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]) == 0_                ? Boolean.FALSE_                : Boolean.TRUE)__        currentOffset += 2__        break__      case 's': _        annotationVisitor.visit(elementName, readUTF8(currentOffset, charBuffer))__        currentOffset += 2__        break__      case 'e': _        annotationVisitor.visitEnum(_            elementName,_            readUTF8(currentOffset, charBuffer),_            readUTF8(currentOffset + 2, charBuffer))__        currentOffset += 4__        break__      case 'c': _        annotationVisitor.visit(elementName, Type.getType(readUTF8(currentOffset, charBuffer)))__        currentOffset += 2__        break__      case '@': _        currentOffset =_            readElementValues(_                annotationVisitor.visitAnnotation(elementName, readUTF8(currentOffset, charBuffer)),_                currentOffset + 2,_                true,_                charBuffer)__        break__      case '[': _        int numValues = readUnsignedShort(currentOffset)__        currentOffset += 2__        if (numValues == 0) {_          return readElementValues(_              annotationVisitor.visitArray(elementName),_              currentOffset - 2,_               false,_              charBuffer)__        }_        switch (b[currentOffset] & 0xFF) {_          case 'B':_            byte[] byteValues = new byte[numValues]__            for (int i = 0_ i < numValues_ i++) {_              byteValues[i] = (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, byteValues)__            break__          case 'Z':_            boolean[] booleanValues = new boolean[numValues]__            for (int i = 0_ i < numValues_ i++) {_              booleanValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]) != 0__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, booleanValues)__            break__          case 'S':_            short[] shortValues = new short[numValues]__            for (int i = 0_ i < numValues_ i++) {_              shortValues[i] = (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, shortValues)__            break__          case 'C':_            char[] charValues = new char[numValues]__            for (int i = 0_ i < numValues_ i++) {_              charValues[i] = (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, charValues)__            break__          case 'I':_            int[] intValues = new int[numValues]__            for (int i = 0_ i < numValues_ i++) {_              intValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, intValues)__            break__          case 'J':_            long[] longValues = new long[numValues]__            for (int i = 0_ i < numValues_ i++) {_              longValues[i] = readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, longValues)__            break__          case 'F':_            float[] floatValues = new float[numValues]__            for (int i = 0_ i < numValues_ i++) {_              floatValues[i] =_                  Float.intBitsToFloat(_                      readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]))__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, floatValues)__            break__          case 'D':_            double[] doubleValues = new double[numValues]__            for (int i = 0_ i < numValues_ i++) {_              doubleValues[i] =_                  Double.longBitsToDouble(_                      readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]))__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, doubleValues)__            break__          default:_            currentOffset =_                readElementValues(_                    annotationVisitor.visitArray(elementName),_                    currentOffset - 2,_                     false,_                    charBuffer)__            break__        }_        break__      default:_        throw new IllegalArgumentException()__    }_    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,annotation,visitor,the,visitor,that,must,visit,the,structure,param,element,value,offset,the,start,offset,in,link,b,of,the,structure,to,be,read,param,element,name,the,name,of,the,structure,to,be,read,or,literal,null,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,return,the,end,offset,of,the,jvms,structure;private,int,read,element,value,final,annotation,visitor,annotation,visitor,final,int,element,value,offset,final,string,element,name,final,char,char,buffer,int,current,offset,element,value,offset,if,annotation,visitor,null,switch,b,current,offset,0x,ff,case,e,return,current,offset,5,case,return,read,element,values,null,current,offset,3,true,char,buffer,case,return,read,element,values,null,current,offset,1,false,char,buffer,default,return,current,offset,3,switch,b,current,offset,0x,ff,case,b,annotation,visitor,visit,element,name,byte,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,c,annotation,visitor,visit,element,name,char,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,d,case,f,case,i,case,j,annotation,visitor,visit,element,name,read,const,read,unsigned,short,current,offset,char,buffer,current,offset,2,break,case,s,annotation,visitor,visit,element,name,short,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,z,annotation,visitor,visit,element,name,read,int,cp,info,offsets,read,unsigned,short,current,offset,0,boolean,false,boolean,true,current,offset,2,break,case,s,annotation,visitor,visit,element,name,read,utf8,current,offset,char,buffer,current,offset,2,break,case,e,annotation,visitor,visit,enum,element,name,read,utf8,current,offset,char,buffer,read,utf8,current,offset,2,char,buffer,current,offset,4,break,case,c,annotation,visitor,visit,element,name,type,get,type,read,utf8,current,offset,char,buffer,current,offset,2,break,case,current,offset,read,element,values,annotation,visitor,visit,annotation,element,name,read,utf8,current,offset,char,buffer,current,offset,2,true,char,buffer,break,case,int,num,values,read,unsigned,short,current,offset,current,offset,2,if,num,values,0,return,read,element,values,annotation,visitor,visit,array,element,name,current,offset,2,false,char,buffer,switch,b,current,offset,0x,ff,case,b,byte,byte,values,new,byte,num,values,for,int,i,0,i,num,values,i,byte,values,i,byte,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,byte,values,break,case,z,boolean,boolean,values,new,boolean,num,values,for,int,i,0,i,num,values,i,boolean,values,i,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,0,current,offset,3,annotation,visitor,visit,element,name,boolean,values,break,case,s,short,short,values,new,short,num,values,for,int,i,0,i,num,values,i,short,values,i,short,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,short,values,break,case,c,char,char,values,new,char,num,values,for,int,i,0,i,num,values,i,char,values,i,char,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,char,values,break,case,i,int,int,values,new,int,num,values,for,int,i,0,i,num,values,i,int,values,i,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,int,values,break,case,j,long,long,values,new,long,num,values,for,int,i,0,i,num,values,i,long,values,i,read,long,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,long,values,break,case,f,float,float,values,new,float,num,values,for,int,i,0,i,num,values,i,float,values,i,float,int,bits,to,float,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,float,values,break,case,d,double,double,values,new,double,num,values,for,int,i,0,i,num,values,i,double,values,i,double,long,bits,to,double,read,long,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,double,values,break,default,current,offset,read,element,values,annotation,visitor,visit,array,element,name,current,offset,2,false,char,buffer,break,break,default,throw,new,illegal,argument,exception,return,current,offset
ClassReader -> private int readElementValue(       final AnnotationVisitor annotationVisitor,       final int elementValueOffset,       final String elementName,       final char[] charBuffer);1537204147;Reads a JVMS 'element_value' structure and makes the given visitor visit it.__@param annotationVisitor the visitor that must visit the element_value structure._@param elementValueOffset the start offset in {@link #b} of the element_value structure to be_read._@param elementName the name of the element_value structure to be read, or {@literal null}._@param charBuffer the buffer used to read strings in the constant pool._@return the end offset of the JVMS 'element_value' structure.;private int readElementValue(_      final AnnotationVisitor annotationVisitor,_      final int elementValueOffset,_      final String elementName,_      final char[] charBuffer) {_    int currentOffset = elementValueOffset__    if (annotationVisitor == null) {_      switch (b[currentOffset] & 0xFF) {_        case 'e': _          return currentOffset + 5__        case '@': _          return readElementValues(null, currentOffset + 3,  true, charBuffer)__        case '[': _          return readElementValues(null, currentOffset + 1,  false, charBuffer)__        default:_          return currentOffset + 3__      }_    }_    switch (b[currentOffset++] & 0xFF) {_      case 'B': _        annotationVisitor.visit(_            elementName, (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break__      case 'C': _        annotationVisitor.visit(_            elementName, (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break__      case 'D': _      case 'F': _      case 'I': _      case 'J': _        annotationVisitor.visit(_            elementName, readConst(readUnsignedShort(currentOffset), charBuffer))__        currentOffset += 2__        break__      case 'S': _        annotationVisitor.visit(_            elementName, (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break___      case 'Z': _        annotationVisitor.visit(_            elementName,_            readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]) == 0_                ? Boolean.FALSE_                : Boolean.TRUE)__        currentOffset += 2__        break__      case 's': _        annotationVisitor.visit(elementName, readUTF8(currentOffset, charBuffer))__        currentOffset += 2__        break__      case 'e': _        annotationVisitor.visitEnum(_            elementName,_            readUTF8(currentOffset, charBuffer),_            readUTF8(currentOffset + 2, charBuffer))__        currentOffset += 4__        break__      case 'c': _        annotationVisitor.visit(elementName, Type.getType(readUTF8(currentOffset, charBuffer)))__        currentOffset += 2__        break__      case '@': _        currentOffset =_            readElementValues(_                annotationVisitor.visitAnnotation(elementName, readUTF8(currentOffset, charBuffer)),_                currentOffset + 2,_                true,_                charBuffer)__        break__      case '[': _        int numValues = readUnsignedShort(currentOffset)__        currentOffset += 2__        if (numValues == 0) {_          return readElementValues(_              annotationVisitor.visitArray(elementName),_              currentOffset - 2,_               false,_              charBuffer)__        }_        switch (b[currentOffset] & 0xFF) {_          case 'B':_            byte[] byteValues = new byte[numValues]__            for (int i = 0_ i < numValues_ i++) {_              byteValues[i] = (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, byteValues)__            break__          case 'Z':_            boolean[] booleanValues = new boolean[numValues]__            for (int i = 0_ i < numValues_ i++) {_              booleanValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]) != 0__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, booleanValues)__            break__          case 'S':_            short[] shortValues = new short[numValues]__            for (int i = 0_ i < numValues_ i++) {_              shortValues[i] = (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, shortValues)__            break__          case 'C':_            char[] charValues = new char[numValues]__            for (int i = 0_ i < numValues_ i++) {_              charValues[i] = (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, charValues)__            break__          case 'I':_            int[] intValues = new int[numValues]__            for (int i = 0_ i < numValues_ i++) {_              intValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, intValues)__            break__          case 'J':_            long[] longValues = new long[numValues]__            for (int i = 0_ i < numValues_ i++) {_              longValues[i] = readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, longValues)__            break__          case 'F':_            float[] floatValues = new float[numValues]__            for (int i = 0_ i < numValues_ i++) {_              floatValues[i] =_                  Float.intBitsToFloat(_                      readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]))__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, floatValues)__            break__          case 'D':_            double[] doubleValues = new double[numValues]__            for (int i = 0_ i < numValues_ i++) {_              doubleValues[i] =_                  Double.longBitsToDouble(_                      readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]))__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, doubleValues)__            break__          default:_            currentOffset =_                readElementValues(_                    annotationVisitor.visitArray(elementName),_                    currentOffset - 2,_                     false,_                    charBuffer)__            break__        }_        break__      default:_        throw new IllegalArgumentException()__    }_    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,annotation,visitor,the,visitor,that,must,visit,the,structure,param,element,value,offset,the,start,offset,in,link,b,of,the,structure,to,be,read,param,element,name,the,name,of,the,structure,to,be,read,or,literal,null,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,return,the,end,offset,of,the,jvms,structure;private,int,read,element,value,final,annotation,visitor,annotation,visitor,final,int,element,value,offset,final,string,element,name,final,char,char,buffer,int,current,offset,element,value,offset,if,annotation,visitor,null,switch,b,current,offset,0x,ff,case,e,return,current,offset,5,case,return,read,element,values,null,current,offset,3,true,char,buffer,case,return,read,element,values,null,current,offset,1,false,char,buffer,default,return,current,offset,3,switch,b,current,offset,0x,ff,case,b,annotation,visitor,visit,element,name,byte,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,c,annotation,visitor,visit,element,name,char,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,d,case,f,case,i,case,j,annotation,visitor,visit,element,name,read,const,read,unsigned,short,current,offset,char,buffer,current,offset,2,break,case,s,annotation,visitor,visit,element,name,short,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,z,annotation,visitor,visit,element,name,read,int,cp,info,offsets,read,unsigned,short,current,offset,0,boolean,false,boolean,true,current,offset,2,break,case,s,annotation,visitor,visit,element,name,read,utf8,current,offset,char,buffer,current,offset,2,break,case,e,annotation,visitor,visit,enum,element,name,read,utf8,current,offset,char,buffer,read,utf8,current,offset,2,char,buffer,current,offset,4,break,case,c,annotation,visitor,visit,element,name,type,get,type,read,utf8,current,offset,char,buffer,current,offset,2,break,case,current,offset,read,element,values,annotation,visitor,visit,annotation,element,name,read,utf8,current,offset,char,buffer,current,offset,2,true,char,buffer,break,case,int,num,values,read,unsigned,short,current,offset,current,offset,2,if,num,values,0,return,read,element,values,annotation,visitor,visit,array,element,name,current,offset,2,false,char,buffer,switch,b,current,offset,0x,ff,case,b,byte,byte,values,new,byte,num,values,for,int,i,0,i,num,values,i,byte,values,i,byte,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,byte,values,break,case,z,boolean,boolean,values,new,boolean,num,values,for,int,i,0,i,num,values,i,boolean,values,i,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,0,current,offset,3,annotation,visitor,visit,element,name,boolean,values,break,case,s,short,short,values,new,short,num,values,for,int,i,0,i,num,values,i,short,values,i,short,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,short,values,break,case,c,char,char,values,new,char,num,values,for,int,i,0,i,num,values,i,char,values,i,char,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,char,values,break,case,i,int,int,values,new,int,num,values,for,int,i,0,i,num,values,i,int,values,i,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,int,values,break,case,j,long,long,values,new,long,num,values,for,int,i,0,i,num,values,i,long,values,i,read,long,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,long,values,break,case,f,float,float,values,new,float,num,values,for,int,i,0,i,num,values,i,float,values,i,float,int,bits,to,float,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,float,values,break,case,d,double,double,values,new,double,num,values,for,int,i,0,i,num,values,i,double,values,i,double,long,bits,to,double,read,long,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,double,values,break,default,current,offset,read,element,values,annotation,visitor,visit,array,element,name,current,offset,2,false,char,buffer,break,break,default,throw,new,illegal,argument,exception,return,current,offset
ClassReader -> private int readElementValue(       final AnnotationVisitor annotationVisitor,       final int elementValueOffset,       final String elementName,       final char[] charBuffer);1539119582;Reads a JVMS 'element_value' structure and makes the given visitor visit it.__@param annotationVisitor the visitor that must visit the element_value structure._@param elementValueOffset the start offset in {@link #b} of the element_value structure to be_read._@param elementName the name of the element_value structure to be read, or {@literal null}._@param charBuffer the buffer used to read strings in the constant pool._@return the end offset of the JVMS 'element_value' structure.;private int readElementValue(_      final AnnotationVisitor annotationVisitor,_      final int elementValueOffset,_      final String elementName,_      final char[] charBuffer) {_    int currentOffset = elementValueOffset__    if (annotationVisitor == null) {_      switch (b[currentOffset] & 0xFF) {_        case 'e': _          return currentOffset + 5__        case '@': _          return readElementValues(null, currentOffset + 3,  true, charBuffer)__        case '[': _          return readElementValues(null, currentOffset + 1,  false, charBuffer)__        default:_          return currentOffset + 3__      }_    }_    switch (b[currentOffset++] & 0xFF) {_      case 'B': _        annotationVisitor.visit(_            elementName, (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break__      case 'C': _        annotationVisitor.visit(_            elementName, (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break__      case 'D': _      case 'F': _      case 'I': _      case 'J': _        annotationVisitor.visit(_            elementName, readConst(readUnsignedShort(currentOffset), charBuffer))__        currentOffset += 2__        break__      case 'S': _        annotationVisitor.visit(_            elementName, (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break___      case 'Z': _        annotationVisitor.visit(_            elementName,_            readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]) == 0_                ? Boolean.FALSE_                : Boolean.TRUE)__        currentOffset += 2__        break__      case 's': _        annotationVisitor.visit(elementName, readUTF8(currentOffset, charBuffer))__        currentOffset += 2__        break__      case 'e': _        annotationVisitor.visitEnum(_            elementName,_            readUTF8(currentOffset, charBuffer),_            readUTF8(currentOffset + 2, charBuffer))__        currentOffset += 4__        break__      case 'c': _        annotationVisitor.visit(elementName, Type.getType(readUTF8(currentOffset, charBuffer)))__        currentOffset += 2__        break__      case '@': _        currentOffset =_            readElementValues(_                annotationVisitor.visitAnnotation(elementName, readUTF8(currentOffset, charBuffer)),_                currentOffset + 2,_                true,_                charBuffer)__        break__      case '[': _        int numValues = readUnsignedShort(currentOffset)__        currentOffset += 2__        if (numValues == 0) {_          return readElementValues(_              annotationVisitor.visitArray(elementName),_              currentOffset - 2,_               false,_              charBuffer)__        }_        switch (b[currentOffset] & 0xFF) {_          case 'B':_            byte[] byteValues = new byte[numValues]__            for (int i = 0_ i < numValues_ i++) {_              byteValues[i] = (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, byteValues)__            break__          case 'Z':_            boolean[] booleanValues = new boolean[numValues]__            for (int i = 0_ i < numValues_ i++) {_              booleanValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]) != 0__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, booleanValues)__            break__          case 'S':_            short[] shortValues = new short[numValues]__            for (int i = 0_ i < numValues_ i++) {_              shortValues[i] = (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, shortValues)__            break__          case 'C':_            char[] charValues = new char[numValues]__            for (int i = 0_ i < numValues_ i++) {_              charValues[i] = (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, charValues)__            break__          case 'I':_            int[] intValues = new int[numValues]__            for (int i = 0_ i < numValues_ i++) {_              intValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, intValues)__            break__          case 'J':_            long[] longValues = new long[numValues]__            for (int i = 0_ i < numValues_ i++) {_              longValues[i] = readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, longValues)__            break__          case 'F':_            float[] floatValues = new float[numValues]__            for (int i = 0_ i < numValues_ i++) {_              floatValues[i] =_                  Float.intBitsToFloat(_                      readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]))__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, floatValues)__            break__          case 'D':_            double[] doubleValues = new double[numValues]__            for (int i = 0_ i < numValues_ i++) {_              doubleValues[i] =_                  Double.longBitsToDouble(_                      readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]))__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, doubleValues)__            break__          default:_            currentOffset =_                readElementValues(_                    annotationVisitor.visitArray(elementName),_                    currentOffset - 2,_                     false,_                    charBuffer)__            break__        }_        break__      default:_        throw new IllegalArgumentException()__    }_    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,annotation,visitor,the,visitor,that,must,visit,the,structure,param,element,value,offset,the,start,offset,in,link,b,of,the,structure,to,be,read,param,element,name,the,name,of,the,structure,to,be,read,or,literal,null,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,return,the,end,offset,of,the,jvms,structure;private,int,read,element,value,final,annotation,visitor,annotation,visitor,final,int,element,value,offset,final,string,element,name,final,char,char,buffer,int,current,offset,element,value,offset,if,annotation,visitor,null,switch,b,current,offset,0x,ff,case,e,return,current,offset,5,case,return,read,element,values,null,current,offset,3,true,char,buffer,case,return,read,element,values,null,current,offset,1,false,char,buffer,default,return,current,offset,3,switch,b,current,offset,0x,ff,case,b,annotation,visitor,visit,element,name,byte,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,c,annotation,visitor,visit,element,name,char,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,d,case,f,case,i,case,j,annotation,visitor,visit,element,name,read,const,read,unsigned,short,current,offset,char,buffer,current,offset,2,break,case,s,annotation,visitor,visit,element,name,short,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,z,annotation,visitor,visit,element,name,read,int,cp,info,offsets,read,unsigned,short,current,offset,0,boolean,false,boolean,true,current,offset,2,break,case,s,annotation,visitor,visit,element,name,read,utf8,current,offset,char,buffer,current,offset,2,break,case,e,annotation,visitor,visit,enum,element,name,read,utf8,current,offset,char,buffer,read,utf8,current,offset,2,char,buffer,current,offset,4,break,case,c,annotation,visitor,visit,element,name,type,get,type,read,utf8,current,offset,char,buffer,current,offset,2,break,case,current,offset,read,element,values,annotation,visitor,visit,annotation,element,name,read,utf8,current,offset,char,buffer,current,offset,2,true,char,buffer,break,case,int,num,values,read,unsigned,short,current,offset,current,offset,2,if,num,values,0,return,read,element,values,annotation,visitor,visit,array,element,name,current,offset,2,false,char,buffer,switch,b,current,offset,0x,ff,case,b,byte,byte,values,new,byte,num,values,for,int,i,0,i,num,values,i,byte,values,i,byte,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,byte,values,break,case,z,boolean,boolean,values,new,boolean,num,values,for,int,i,0,i,num,values,i,boolean,values,i,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,0,current,offset,3,annotation,visitor,visit,element,name,boolean,values,break,case,s,short,short,values,new,short,num,values,for,int,i,0,i,num,values,i,short,values,i,short,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,short,values,break,case,c,char,char,values,new,char,num,values,for,int,i,0,i,num,values,i,char,values,i,char,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,char,values,break,case,i,int,int,values,new,int,num,values,for,int,i,0,i,num,values,i,int,values,i,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,int,values,break,case,j,long,long,values,new,long,num,values,for,int,i,0,i,num,values,i,long,values,i,read,long,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,long,values,break,case,f,float,float,values,new,float,num,values,for,int,i,0,i,num,values,i,float,values,i,float,int,bits,to,float,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,float,values,break,case,d,double,double,values,new,double,num,values,for,int,i,0,i,num,values,i,double,values,i,double,long,bits,to,double,read,long,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,double,values,break,default,current,offset,read,element,values,annotation,visitor,visit,array,element,name,current,offset,2,false,char,buffer,break,break,default,throw,new,illegal,argument,exception,return,current,offset
ClassReader -> private int readElementValue(       final AnnotationVisitor annotationVisitor,       final int elementValueOffset,       final String elementName,       final char[] charBuffer);1541436263;Reads a JVMS 'element_value' structure and makes the given visitor visit it.__@param annotationVisitor the visitor that must visit the element_value structure._@param elementValueOffset the start offset in {@link #b} of the element_value structure to be_read._@param elementName the name of the element_value structure to be read, or {@literal null}._@param charBuffer the buffer used to read strings in the constant pool._@return the end offset of the JVMS 'element_value' structure.;private int readElementValue(_      final AnnotationVisitor annotationVisitor,_      final int elementValueOffset,_      final String elementName,_      final char[] charBuffer) {_    int currentOffset = elementValueOffset__    if (annotationVisitor == null) {_      switch (b[currentOffset] & 0xFF) {_        case 'e': _          return currentOffset + 5__        case '@': _          return readElementValues(null, currentOffset + 3,  true, charBuffer)__        case '[': _          return readElementValues(null, currentOffset + 1,  false, charBuffer)__        default:_          return currentOffset + 3__      }_    }_    switch (b[currentOffset++] & 0xFF) {_      case 'B': _        annotationVisitor.visit(_            elementName, (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break__      case 'C': _        annotationVisitor.visit(_            elementName, (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break__      case 'D': _      case 'F': _      case 'I': _      case 'J': _        annotationVisitor.visit(_            elementName, readConst(readUnsignedShort(currentOffset), charBuffer))__        currentOffset += 2__        break__      case 'S': _        annotationVisitor.visit(_            elementName, (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]))__        currentOffset += 2__        break___      case 'Z': _        annotationVisitor.visit(_            elementName,_            readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]) == 0_                ? Boolean.FALSE_                : Boolean.TRUE)__        currentOffset += 2__        break__      case 's': _        annotationVisitor.visit(elementName, readUTF8(currentOffset, charBuffer))__        currentOffset += 2__        break__      case 'e': _        annotationVisitor.visitEnum(_            elementName,_            readUTF8(currentOffset, charBuffer),_            readUTF8(currentOffset + 2, charBuffer))__        currentOffset += 4__        break__      case 'c': _        annotationVisitor.visit(elementName, Type.getType(readUTF8(currentOffset, charBuffer)))__        currentOffset += 2__        break__      case '@': _        currentOffset =_            readElementValues(_                annotationVisitor.visitAnnotation(elementName, readUTF8(currentOffset, charBuffer)),_                currentOffset + 2,_                true,_                charBuffer)__        break__      case '[': _        int numValues = readUnsignedShort(currentOffset)__        currentOffset += 2__        if (numValues == 0) {_          return readElementValues(_              annotationVisitor.visitArray(elementName),_              currentOffset - 2,_               false,_              charBuffer)__        }_        switch (b[currentOffset] & 0xFF) {_          case 'B':_            byte[] byteValues = new byte[numValues]__            for (int i = 0_ i < numValues_ i++) {_              byteValues[i] = (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, byteValues)__            break__          case 'Z':_            boolean[] booleanValues = new boolean[numValues]__            for (int i = 0_ i < numValues_ i++) {_              booleanValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]) != 0__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, booleanValues)__            break__          case 'S':_            short[] shortValues = new short[numValues]__            for (int i = 0_ i < numValues_ i++) {_              shortValues[i] = (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, shortValues)__            break__          case 'C':_            char[] charValues = new char[numValues]__            for (int i = 0_ i < numValues_ i++) {_              charValues[i] = (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, charValues)__            break__          case 'I':_            int[] intValues = new int[numValues]__            for (int i = 0_ i < numValues_ i++) {_              intValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, intValues)__            break__          case 'J':_            long[] longValues = new long[numValues]__            for (int i = 0_ i < numValues_ i++) {_              longValues[i] = readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)])__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, longValues)__            break__          case 'F':_            float[] floatValues = new float[numValues]__            for (int i = 0_ i < numValues_ i++) {_              floatValues[i] =_                  Float.intBitsToFloat(_                      readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]))__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, floatValues)__            break__          case 'D':_            double[] doubleValues = new double[numValues]__            for (int i = 0_ i < numValues_ i++) {_              doubleValues[i] =_                  Double.longBitsToDouble(_                      readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]))__              currentOffset += 3__            }_            annotationVisitor.visit(elementName, doubleValues)__            break__          default:_            currentOffset =_                readElementValues(_                    annotationVisitor.visitArray(elementName),_                    currentOffset - 2,_                     false,_                    charBuffer)__            break__        }_        break__      default:_        throw new IllegalArgumentException()__    }_    return currentOffset__  };reads,a,jvms,structure,and,makes,the,given,visitor,visit,it,param,annotation,visitor,the,visitor,that,must,visit,the,structure,param,element,value,offset,the,start,offset,in,link,b,of,the,structure,to,be,read,param,element,name,the,name,of,the,structure,to,be,read,or,literal,null,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,return,the,end,offset,of,the,jvms,structure;private,int,read,element,value,final,annotation,visitor,annotation,visitor,final,int,element,value,offset,final,string,element,name,final,char,char,buffer,int,current,offset,element,value,offset,if,annotation,visitor,null,switch,b,current,offset,0x,ff,case,e,return,current,offset,5,case,return,read,element,values,null,current,offset,3,true,char,buffer,case,return,read,element,values,null,current,offset,1,false,char,buffer,default,return,current,offset,3,switch,b,current,offset,0x,ff,case,b,annotation,visitor,visit,element,name,byte,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,c,annotation,visitor,visit,element,name,char,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,d,case,f,case,i,case,j,annotation,visitor,visit,element,name,read,const,read,unsigned,short,current,offset,char,buffer,current,offset,2,break,case,s,annotation,visitor,visit,element,name,short,read,int,cp,info,offsets,read,unsigned,short,current,offset,current,offset,2,break,case,z,annotation,visitor,visit,element,name,read,int,cp,info,offsets,read,unsigned,short,current,offset,0,boolean,false,boolean,true,current,offset,2,break,case,s,annotation,visitor,visit,element,name,read,utf8,current,offset,char,buffer,current,offset,2,break,case,e,annotation,visitor,visit,enum,element,name,read,utf8,current,offset,char,buffer,read,utf8,current,offset,2,char,buffer,current,offset,4,break,case,c,annotation,visitor,visit,element,name,type,get,type,read,utf8,current,offset,char,buffer,current,offset,2,break,case,current,offset,read,element,values,annotation,visitor,visit,annotation,element,name,read,utf8,current,offset,char,buffer,current,offset,2,true,char,buffer,break,case,int,num,values,read,unsigned,short,current,offset,current,offset,2,if,num,values,0,return,read,element,values,annotation,visitor,visit,array,element,name,current,offset,2,false,char,buffer,switch,b,current,offset,0x,ff,case,b,byte,byte,values,new,byte,num,values,for,int,i,0,i,num,values,i,byte,values,i,byte,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,byte,values,break,case,z,boolean,boolean,values,new,boolean,num,values,for,int,i,0,i,num,values,i,boolean,values,i,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,0,current,offset,3,annotation,visitor,visit,element,name,boolean,values,break,case,s,short,short,values,new,short,num,values,for,int,i,0,i,num,values,i,short,values,i,short,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,short,values,break,case,c,char,char,values,new,char,num,values,for,int,i,0,i,num,values,i,char,values,i,char,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,char,values,break,case,i,int,int,values,new,int,num,values,for,int,i,0,i,num,values,i,int,values,i,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,int,values,break,case,j,long,long,values,new,long,num,values,for,int,i,0,i,num,values,i,long,values,i,read,long,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,long,values,break,case,f,float,float,values,new,float,num,values,for,int,i,0,i,num,values,i,float,values,i,float,int,bits,to,float,read,int,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,float,values,break,case,d,double,double,values,new,double,num,values,for,int,i,0,i,num,values,i,double,values,i,double,long,bits,to,double,read,long,cp,info,offsets,read,unsigned,short,current,offset,1,current,offset,3,annotation,visitor,visit,element,name,double,values,break,default,current,offset,read,element,values,annotation,visitor,visit,array,element,name,current,offset,2,false,char,buffer,break,break,default,throw,new,illegal,argument,exception,return,current,offset
ClassReader -> final int getFirstAttributeOffset();1531241461;@return the offset in {@link #b} of the first ClassFile's 'attributes' array field entry.;final int getFirstAttributeOffset() {_    _    _    int currentOffset = header + 8 + readUnsignedShort(header + 6) * 2___    _    int fieldsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    _    while (fieldsCount-- > 0) {_      _      _      _      int attributesCount = readUnsignedShort(currentOffset + 6)__      currentOffset += 8__      _      while (attributesCount-- > 0) {_        _        _        _        _        currentOffset += 6 + readInt(currentOffset + 2)__      }_    }__    _    int methodsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (methodsCount-- > 0) {_      int attributesCount = readUnsignedShort(currentOffset + 6)__      currentOffset += 8__      while (attributesCount-- > 0) {_        currentOffset += 6 + readInt(currentOffset + 2)__      }_    }__    _    return currentOffset + 2__  };return,the,offset,in,link,b,of,the,first,class,file,s,attributes,array,field,entry;final,int,get,first,attribute,offset,int,current,offset,header,8,read,unsigned,short,header,6,2,int,fields,count,read,unsigned,short,current,offset,current,offset,2,while,fields,count,0,int,attributes,count,read,unsigned,short,current,offset,6,current,offset,8,while,attributes,count,0,current,offset,6,read,int,current,offset,2,int,methods,count,read,unsigned,short,current,offset,current,offset,2,while,methods,count,0,int,attributes,count,read,unsigned,short,current,offset,6,current,offset,8,while,attributes,count,0,current,offset,6,read,int,current,offset,2,return,current,offset,2
ClassReader -> final int getFirstAttributeOffset();1536664245;@return the offset in {@link #b} of the first ClassFile's 'attributes' array field entry.;final int getFirstAttributeOffset() {_    _    _    int currentOffset = header + 8 + readUnsignedShort(header + 6) * 2___    _    int fieldsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    _    while (fieldsCount-- > 0) {_      _      _      _      int attributesCount = readUnsignedShort(currentOffset + 6)__      currentOffset += 8__      _      while (attributesCount-- > 0) {_        _        _        _        _        currentOffset += 6 + readInt(currentOffset + 2)__      }_    }__    _    int methodsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (methodsCount-- > 0) {_      int attributesCount = readUnsignedShort(currentOffset + 6)__      currentOffset += 8__      while (attributesCount-- > 0) {_        currentOffset += 6 + readInt(currentOffset + 2)__      }_    }__    _    return currentOffset + 2__  };return,the,offset,in,link,b,of,the,first,class,file,s,attributes,array,field,entry;final,int,get,first,attribute,offset,int,current,offset,header,8,read,unsigned,short,header,6,2,int,fields,count,read,unsigned,short,current,offset,current,offset,2,while,fields,count,0,int,attributes,count,read,unsigned,short,current,offset,6,current,offset,8,while,attributes,count,0,current,offset,6,read,int,current,offset,2,int,methods,count,read,unsigned,short,current,offset,current,offset,2,while,methods,count,0,int,attributes,count,read,unsigned,short,current,offset,6,current,offset,8,while,attributes,count,0,current,offset,6,read,int,current,offset,2,return,current,offset,2
ClassReader -> final int getFirstAttributeOffset();1536747989;@return the offset in {@link #b} of the first ClassFile's 'attributes' array field entry.;final int getFirstAttributeOffset() {_    _    _    int currentOffset = header + 8 + readUnsignedShort(header + 6) * 2___    _    int fieldsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    _    while (fieldsCount-- > 0) {_      _      _      _      int attributesCount = readUnsignedShort(currentOffset + 6)__      currentOffset += 8__      _      while (attributesCount-- > 0) {_        _        _        _        _        currentOffset += 6 + readInt(currentOffset + 2)__      }_    }__    _    int methodsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (methodsCount-- > 0) {_      int attributesCount = readUnsignedShort(currentOffset + 6)__      currentOffset += 8__      while (attributesCount-- > 0) {_        currentOffset += 6 + readInt(currentOffset + 2)__      }_    }__    _    return currentOffset + 2__  };return,the,offset,in,link,b,of,the,first,class,file,s,attributes,array,field,entry;final,int,get,first,attribute,offset,int,current,offset,header,8,read,unsigned,short,header,6,2,int,fields,count,read,unsigned,short,current,offset,current,offset,2,while,fields,count,0,int,attributes,count,read,unsigned,short,current,offset,6,current,offset,8,while,attributes,count,0,current,offset,6,read,int,current,offset,2,int,methods,count,read,unsigned,short,current,offset,current,offset,2,while,methods,count,0,int,attributes,count,read,unsigned,short,current,offset,6,current,offset,8,while,attributes,count,0,current,offset,6,read,int,current,offset,2,return,current,offset,2
ClassReader -> final int getFirstAttributeOffset();1537204147;Returns the offset in {@link #b} of the first ClassFile's 'attributes' array field entry.__@return the offset in {@link #b} of the first ClassFile's 'attributes' array field entry.;final int getFirstAttributeOffset() {_    _    _    int currentOffset = header + 8 + readUnsignedShort(header + 6) * 2___    _    int fieldsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    _    while (fieldsCount-- > 0) {_      _      _      _      int attributesCount = readUnsignedShort(currentOffset + 6)__      currentOffset += 8__      _      while (attributesCount-- > 0) {_        _        _        _        _        currentOffset += 6 + readInt(currentOffset + 2)__      }_    }__    _    int methodsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (methodsCount-- > 0) {_      int attributesCount = readUnsignedShort(currentOffset + 6)__      currentOffset += 8__      while (attributesCount-- > 0) {_        currentOffset += 6 + readInt(currentOffset + 2)__      }_    }__    _    return currentOffset + 2__  };returns,the,offset,in,link,b,of,the,first,class,file,s,attributes,array,field,entry,return,the,offset,in,link,b,of,the,first,class,file,s,attributes,array,field,entry;final,int,get,first,attribute,offset,int,current,offset,header,8,read,unsigned,short,header,6,2,int,fields,count,read,unsigned,short,current,offset,current,offset,2,while,fields,count,0,int,attributes,count,read,unsigned,short,current,offset,6,current,offset,8,while,attributes,count,0,current,offset,6,read,int,current,offset,2,int,methods,count,read,unsigned,short,current,offset,current,offset,2,while,methods,count,0,int,attributes,count,read,unsigned,short,current,offset,6,current,offset,8,while,attributes,count,0,current,offset,6,read,int,current,offset,2,return,current,offset,2
ClassReader -> final int getFirstAttributeOffset();1539119582;Returns the offset in {@link #b} of the first ClassFile's 'attributes' array field entry.__@return the offset in {@link #b} of the first ClassFile's 'attributes' array field entry.;final int getFirstAttributeOffset() {_    _    _    int currentOffset = header + 8 + readUnsignedShort(header + 6) * 2___    _    int fieldsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    _    while (fieldsCount-- > 0) {_      _      _      _      int attributesCount = readUnsignedShort(currentOffset + 6)__      currentOffset += 8__      _      while (attributesCount-- > 0) {_        _        _        _        _        currentOffset += 6 + readInt(currentOffset + 2)__      }_    }__    _    int methodsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (methodsCount-- > 0) {_      int attributesCount = readUnsignedShort(currentOffset + 6)__      currentOffset += 8__      while (attributesCount-- > 0) {_        currentOffset += 6 + readInt(currentOffset + 2)__      }_    }__    _    return currentOffset + 2__  };returns,the,offset,in,link,b,of,the,first,class,file,s,attributes,array,field,entry,return,the,offset,in,link,b,of,the,first,class,file,s,attributes,array,field,entry;final,int,get,first,attribute,offset,int,current,offset,header,8,read,unsigned,short,header,6,2,int,fields,count,read,unsigned,short,current,offset,current,offset,2,while,fields,count,0,int,attributes,count,read,unsigned,short,current,offset,6,current,offset,8,while,attributes,count,0,current,offset,6,read,int,current,offset,2,int,methods,count,read,unsigned,short,current,offset,current,offset,2,while,methods,count,0,int,attributes,count,read,unsigned,short,current,offset,6,current,offset,8,while,attributes,count,0,current,offset,6,read,int,current,offset,2,return,current,offset,2
ClassReader -> final int getFirstAttributeOffset();1541436263;Returns the offset in {@link #b} of the first ClassFile's 'attributes' array field entry.__@return the offset in {@link #b} of the first ClassFile's 'attributes' array field entry.;final int getFirstAttributeOffset() {_    _    _    int currentOffset = header + 8 + readUnsignedShort(header + 6) * 2___    _    int fieldsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    _    while (fieldsCount-- > 0) {_      _      _      _      int attributesCount = readUnsignedShort(currentOffset + 6)__      currentOffset += 8__      _      while (attributesCount-- > 0) {_        _        _        _        _        currentOffset += 6 + readInt(currentOffset + 2)__      }_    }__    _    int methodsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (methodsCount-- > 0) {_      int attributesCount = readUnsignedShort(currentOffset + 6)__      currentOffset += 8__      while (attributesCount-- > 0) {_        currentOffset += 6 + readInt(currentOffset + 2)__      }_    }__    _    return currentOffset + 2__  };returns,the,offset,in,link,b,of,the,first,class,file,s,attributes,array,field,entry,return,the,offset,in,link,b,of,the,first,class,file,s,attributes,array,field,entry;final,int,get,first,attribute,offset,int,current,offset,header,8,read,unsigned,short,header,6,2,int,fields,count,read,unsigned,short,current,offset,current,offset,2,while,fields,count,0,int,attributes,count,read,unsigned,short,current,offset,6,current,offset,8,while,attributes,count,0,current,offset,6,read,int,current,offset,2,int,methods,count,read,unsigned,short,current,offset,current,offset,2,while,methods,count,0,int,attributes,count,read,unsigned,short,current,offset,6,current,offset,8,while,attributes,count,0,current,offset,6,read,int,current,offset,2,return,current,offset,2
ClassReader -> public int getMaxStringLength();1366718246;Returns the maximum length of the strings contained in the constant pool_of the class.__@return the maximum length of the strings contained in the constant pool_of the class.;public int getMaxStringLength() {_        return maxStringLength__    };returns,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1395273982;Returns the maximum length of the strings contained in the constant pool_of the class.__@return the maximum length of the strings contained in the constant pool_of the class.;public int getMaxStringLength() {_        return maxStringLength__    };returns,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1414067099;Returns the maximum length of the strings contained in the constant pool_of the class.__@return the maximum length of the strings contained in the constant pool_of the class.;public int getMaxStringLength() {_        return maxStringLength__    };returns,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1414499035;Returns the maximum length of the strings contained in the constant pool_of the class.__@return the maximum length of the strings contained in the constant pool_of the class.;public int getMaxStringLength() {_        return maxStringLength__    };returns,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1416998550;Returns the maximum length of the strings contained in the constant pool_of the class.__@return the maximum length of the strings contained in the constant pool_of the class.;public int getMaxStringLength() {_        return maxStringLength__    };returns,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1457705343;Returns the maximum length of the strings contained in the constant pool_of the class.__@return the maximum length of the strings contained in the constant pool_of the class.;public int getMaxStringLength() {_        return maxStringLength__    };returns,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1459258703;Returns the maximum length of the strings contained in the constant pool_of the class.__@return the maximum length of the strings contained in the constant pool_of the class.;public int getMaxStringLength() {_        return maxStringLength__    };returns,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1478623137;Returns the maximum length of the strings contained in the constant pool_of the class.__@return the maximum length of the strings contained in the constant pool_of the class.;public int getMaxStringLength() {_        return maxStringLength__    };returns,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1483093254;Returns the maximum length of the strings contained in the constant pool_of the class.__@return the maximum length of the strings contained in the constant pool_of the class.;public int getMaxStringLength() {_        return maxStringLength__    };returns,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1505821772;Returns the maximum length of the strings contained in the constant pool_of the class.__@return the maximum length of the strings contained in the constant pool_of the class.;public int getMaxStringLength() {_        return maxStringLength__    };returns,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1531241461;Returns a conservative estimate of the maximum length of the strings contained in the class's_constant pool table.__@return a conservative estimate of the maximum length of the strings contained in the class's_constant pool table.;public int getMaxStringLength() {_    return maxStringLength__  };returns,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,class,s,constant,pool,table,return,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,class,s,constant,pool,table;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1536664245;Returns a conservative estimate of the maximum length of the strings contained in the class's_constant pool table.__@return a conservative estimate of the maximum length of the strings contained in the class's_constant pool table.;public int getMaxStringLength() {_    return maxStringLength__  };returns,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,class,s,constant,pool,table,return,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,class,s,constant,pool,table;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1536747989;Returns a conservative estimate of the maximum length of the strings contained in the class's_constant pool table.__@return a conservative estimate of the maximum length of the strings contained in the class's_constant pool table.;public int getMaxStringLength() {_    return maxStringLength__  };returns,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,class,s,constant,pool,table,return,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,class,s,constant,pool,table;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1537204147;Returns a conservative estimate of the maximum length of the strings contained in the class's_constant pool table.__@return a conservative estimate of the maximum length of the strings contained in the class's_constant pool table.;public int getMaxStringLength() {_    return maxStringLength__  };returns,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,class,s,constant,pool,table,return,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,class,s,constant,pool,table;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1539119582;Returns a conservative estimate of the maximum length of the strings contained in the class's_constant pool table.__@return a conservative estimate of the maximum length of the strings contained in the class's_constant pool table.;public int getMaxStringLength() {_    return maxStringLength__  };returns,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,class,s,constant,pool,table,return,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,class,s,constant,pool,table;public,int,get,max,string,length,return,max,string,length
ClassReader -> public int getMaxStringLength();1541436263;Returns a conservative estimate of the maximum length of the strings contained in the class's_constant pool table.__@return a conservative estimate of the maximum length of the strings contained in the class's_constant pool table.;public int getMaxStringLength() {_    return maxStringLength__  };returns,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,class,s,constant,pool,table,return,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,class,s,constant,pool,table;public,int,get,max,string,length,return,max,string,length
ClassReader -> private void readCode(final MethodVisitor mv, final Context context, int u);1366718246;Reads the bytecode of a method and makes the given visitor visit it.__@param mv_the visitor that must visit the method's code._@param context_information about the class being parsed._@param u_the start offset of the code attribute in the class file.;private void readCode(final MethodVisitor mv, final Context context, int u) {_        _        byte[] b = this.b__        char[] c = context.buffer__        int maxStack = readUnsignedShort(u)__        int maxLocals = readUnsignedShort(u + 2)__        int codeLength = readInt(u + 4)__        u += 8___        _        int codeStart = u__        int codeEnd = u + codeLength__        Label[] labels = new Label[codeLength + 2]__        readLabel(codeLength + 1, labels)__        while (u < codeEnd) {_            int offset = u - codeStart__            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                readLabel(offset + readShort(u + 1), labels)__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                readLabel(offset + readInt(u + 1), labels)__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    u += 6__                } else {_                    u += 4__                }_                break__            case ClassWriter.TABL_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 8) - readInt(u + 4) + 1_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 4__                }_                u += 12__                break__            case ClassWriter.LOOK_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 4)_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 8__                }_                u += 8__                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                u += 5__                break__            _            default:_                u += 4__                break__            }_        }__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            Label start = readLabel(readUnsignedShort(u + 2), labels)__            Label end = readLabel(readUnsignedShort(u + 4), labels)__            Label handler = readLabel(readUnsignedShort(u + 6), labels)__            String type = readUTF8(items[readUnsignedShort(u + 8)], c)__            mv.visitTryCatchBlock(start, end, handler, type)__            u += 8__        }_        u += 2___        _        int varTable = 0__        int varTypeTable = 0__        boolean zip = true__        boolean unzip = (context.flags & EXPAND_FRAMES) != 0__        int stackMap = 0__        int stackMapSize = 0__        int frameCount = 0__        Context frame = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("LocalVariableTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    varTable = u + 8__                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        label += readUnsignedShort(v + 12)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        v += 10__                    }_                }_            } else if ("LocalVariableTypeTable".equals(attrName)) {_                varTypeTable = u + 8__            } else if ("LineNumberTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        labels[label].line = readUnsignedShort(v + 12)__                        v += 4__                    }_                }_            } else if (FRAMES && "StackMapTable".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _                _            } else if (FRAMES && "StackMap".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    zip = false__                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _            } else {_                for (int j = 0_ j < context.attrs.length_ ++j) {_                    if (context.attrs[j].type.equals(attrName)) {_                        Attribute attr = context.attrs[j].read(this, u + 8,_                                readInt(u + 4), c, codeStart - 8, labels)__                        if (attr != null) {_                            attr.next = attributes__                            attributes = attr__                        }_                    }_                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        if (FRAMES && stackMap != 0) {_            _            frame = context__            frame.offset = -1__            frame.mode = 0__            frame.localCount = 0__            frame.localDiff = 0__            frame.stackCount = 0__            frame.local = new Object[maxLocals]__            frame.stack = new Object[maxStack]__            if (unzip) {_                getImplicitFrame(context)__            }_            _            for (int i = stackMap_ i < stackMap + stackMapSize - 2_ ++i) {_                if (b[i] == 8) { _                    int v = readUnsignedShort(i + 1)__                    if (v >= 0 && v < codeLength) {_                        if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {_                            readLabel(v, labels)__                        }_                    }_                }_            }_        }__        _        u = codeStart__        while (u < codeEnd) {_            int offset = u - codeStart___            _            Label l = labels[offset]__            if (l != null) {_                mv.visitLabel(l)__                if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {_                    mv.visitLineNumber(l.line, l)__                }_            }__            _            while (FRAMES && frame != null_                    && (frame.offset == offset || frame.offset == -1)) {_                _                _                if (frame.offset != -1) {_                    if (!zip || unzip) {_                        mv.visitFrame(Opcodes.F_NEW, frame.localCount,_                                frame.local, frame.stackCount, frame.stack)__                    } else {_                        mv.visitFrame(frame.mode, frame.localDiff, frame.local,_                                frame.stackCount, frame.stack)__                    }_                }_                if (frameCount > 0) {_                    stackMap = readFrame(stackMap, zip, unzip, labels, frame)__                    --frameCount__                } else {_                    frame = null__                }_            }__            _            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_                mv.visitInsn(opcode)__                u += 1__                break__            case ClassWriter.IMPLVAR_INSN:_                if (opcode > Opcodes.ISTORE) {_                    opcode -= 59_ _                    mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),_                            opcode & 0x3)__                } else {_                    opcode -= 26_ _                    mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__                }_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                mv.visitJumpInsn(opcode, labels[offset + readShort(u + 1)])__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                mv.visitJumpInsn(opcode - 33, labels[offset + readInt(u + 1)])__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    mv.visitIincInsn(readUnsignedShort(u + 2), readShort(u + 4))__                    u += 6__                } else {_                    mv.visitVarInsn(opcode, readUnsignedShort(u + 2))__                    u += 4__                }_                break__            case ClassWriter.TABL_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int min = readInt(u + 4)__                int max = readInt(u + 8)__                Label[] table = new Label[max - min + 1]__                u += 12__                for (int i = 0_ i < table.length_ ++i) {_                    table[i] = labels[offset + readInt(u)]__                    u += 4__                }_                mv.visitTableSwitchInsn(min, max, labels[label], table)__                break__            }_            case ClassWriter.LOOK_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int len = readInt(u + 4)__                int[] keys = new int[len]__                Label[] values = new Label[len]__                u += 8__                for (int i = 0_ i < len_ ++i) {_                    keys[i] = readInt(u)__                    values[i] = labels[offset + readInt(u + 4)]__                    u += 8__                }_                mv.visitLookupSwitchInsn(labels[label], keys, values)__                break__            }_            case ClassWriter.VAR_INSN:_                mv.visitVarInsn(opcode, b[u + 1] & 0xFF)__                u += 2__                break__            case ClassWriter.SBYTE_INSN:_                mv.visitIntInsn(opcode, b[u + 1])__                u += 2__                break__            case ClassWriter.SHORT_INSN:_                mv.visitIntInsn(opcode, readShort(u + 1))__                u += 3__                break__            case ClassWriter.LDC_INSN:_                mv.visitLdcInsn(readConst(b[u + 1] & 0xFF, c))__                u += 2__                break__            case ClassWriter.LDCW_INSN:_                mv.visitLdcInsn(readConst(readUnsignedShort(u + 1), c))__                u += 3__                break__            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.ITFMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                String iowner = readClass(cpIndex, c)__                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                if (opcode < Opcodes.INVOKEVIRTUAL) {_                    mv.visitFieldInsn(opcode, iowner, iname, idesc)__                } else {_                    mv.visitMethodInsn(opcode, iowner, iname, idesc)__                }_                if (opcode == Opcodes.INVOKEINTERFACE) {_                    u += 5__                } else {_                    u += 3__                }_                break__            }_            case ClassWriter.INDYMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                int bsmIndex = context.bootstrapMethods[readUnsignedShort(cpIndex)]__                Handle bsm = (Handle) readConst(readUnsignedShort(bsmIndex), c)__                int bsmArgCount = readUnsignedShort(bsmIndex + 2)__                Object[] bsmArgs = new Object[bsmArgCount]__                bsmIndex += 4__                for (int i = 0_ i < bsmArgCount_ i++) {_                    bsmArgs[i] = readConst(readUnsignedShort(bsmIndex), c)__                    bsmIndex += 2__                }_                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                mv.visitInvokeDynamicInsn(iname, idesc, bsm, bsmArgs)__                u += 5__                break__            }_            case ClassWriter.TYPE_INSN:_                mv.visitTypeInsn(opcode, readClass(u + 1, c))__                u += 3__                break__            case ClassWriter.IINC_INSN:_                mv.visitIincInsn(b[u + 1] & 0xFF, b[u + 2])__                u += 3__                break__            _            default:_                mv.visitMultiANewArrayInsn(readClass(u + 1, c), b[u + 3] & 0xFF)__                u += 4__                break__            }_        }_        if (labels[codeLength] != null) {_            mv.visitLabel(labels[codeLength])__        }__        _        if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {_            int[] typeTable = null__            if (varTypeTable != 0) {_                u = varTypeTable + 2__                typeTable = new int[readUnsignedShort(varTypeTable) * 3]__                for (int i = typeTable.length_ i > 0_) {_                    typeTable[--i] = u + 6_ _                    typeTable[--i] = readUnsignedShort(u + 8)_ _                    typeTable[--i] = readUnsignedShort(u)_ _                    u += 10__                }_            }_            u = varTable + 2__            for (int i = readUnsignedShort(varTable)_ i > 0_ --i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                int index = readUnsignedShort(u + 8)__                String vsignature = null__                if (typeTable != null) {_                    for (int j = 0_ j < typeTable.length_ j += 3) {_                        if (typeTable[j] == start && typeTable[j + 1] == index) {_                            vsignature = readUTF8(typeTable[j + 2], c)__                            break__                        }_                    }_                }_                mv.visitLocalVariable(readUTF8(u + 4, c), readUTF8(u + 6, c),_                        vsignature, labels[start], labels[start + length],_                        index)__                u += 10__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        mv.visitMaxs(maxStack, maxLocals)__    };reads,the,bytecode,of,a,method,and,makes,the,given,visitor,visit,it,param,mv,the,visitor,that,must,visit,the,method,s,code,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,code,attribute,in,the,class,file;private,void,read,code,final,method,visitor,mv,final,context,context,int,u,byte,b,this,b,char,c,context,buffer,int,max,stack,read,unsigned,short,u,int,max,locals,read,unsigned,short,u,2,int,code,length,read,int,u,4,u,8,int,code,start,u,int,code,end,u,code,length,label,labels,new,label,code,length,2,read,label,code,length,1,labels,while,u,code,end,int,offset,u,code,start,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,read,label,offset,read,short,u,1,labels,u,3,break,case,class,writer,read,label,offset,read,int,u,1,labels,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,8,read,int,u,4,1,i,0,i,read,label,offset,read,int,u,12,labels,u,4,u,12,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,4,i,0,i,read,label,offset,read,int,u,12,labels,u,8,u,8,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,for,int,i,read,unsigned,short,u,i,0,i,label,start,read,label,read,unsigned,short,u,2,labels,label,end,read,label,read,unsigned,short,u,4,labels,label,handler,read,label,read,unsigned,short,u,6,labels,string,type,read,utf8,items,read,unsigned,short,u,8,c,mv,visit,try,catch,block,start,end,handler,type,u,8,u,2,int,var,table,0,int,var,type,table,0,boolean,zip,true,boolean,unzip,context,flags,0,int,stack,map,0,int,stack,map,size,0,int,frame,count,0,context,frame,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,local,variable,table,equals,attr,name,if,context,flags,0,var,table,u,8,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,read,unsigned,short,v,12,if,labels,label,null,read,label,label,labels,status,label,debug,v,10,else,if,local,variable,type,table,equals,attr,name,var,type,table,u,8,else,if,line,number,table,equals,attr,name,if,context,flags,0,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,labels,label,line,read,unsigned,short,v,12,v,4,else,if,frames,stack,map,table,equals,attr,name,if,context,flags,0,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,if,frames,stack,map,equals,attr,name,if,context,flags,0,zip,false,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,for,int,j,0,j,context,attrs,length,j,if,context,attrs,j,type,equals,attr,name,attribute,attr,context,attrs,j,read,this,u,8,read,int,u,4,c,code,start,8,labels,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,if,frames,stack,map,0,frame,context,frame,offset,1,frame,mode,0,frame,local,count,0,frame,local,diff,0,frame,stack,count,0,frame,local,new,object,max,locals,frame,stack,new,object,max,stack,if,unzip,get,implicit,frame,context,for,int,i,stack,map,i,stack,map,stack,map,size,2,i,if,b,i,8,int,v,read,unsigned,short,i,1,if,v,0,v,code,length,if,b,code,start,v,0x,ff,opcodes,new,read,label,v,labels,u,code,start,while,u,code,end,int,offset,u,code,start,label,l,labels,offset,if,l,null,mv,visit,label,l,if,context,flags,0,l,line,0,mv,visit,line,number,l,line,l,while,frames,frame,null,frame,offset,offset,frame,offset,1,if,frame,offset,1,if,zip,unzip,mv,visit,frame,opcodes,frame,local,count,frame,local,frame,stack,count,frame,stack,else,mv,visit,frame,frame,mode,frame,local,diff,frame,local,frame,stack,count,frame,stack,if,frame,count,0,stack,map,read,frame,stack,map,zip,unzip,labels,frame,frame,count,else,frame,null,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,mv,visit,insn,opcode,u,1,break,case,class,writer,if,opcode,opcodes,istore,opcode,59,mv,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,else,opcode,26,mv,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,u,1,break,case,class,writer,mv,visit,jump,insn,opcode,labels,offset,read,short,u,1,u,3,break,case,class,writer,mv,visit,jump,insn,opcode,33,labels,offset,read,int,u,1,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,mv,visit,iinc,insn,read,unsigned,short,u,2,read,short,u,4,u,6,else,mv,visit,var,insn,opcode,read,unsigned,short,u,2,u,4,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,min,read,int,u,4,int,max,read,int,u,8,label,table,new,label,max,min,1,u,12,for,int,i,0,i,table,length,i,table,i,labels,offset,read,int,u,u,4,mv,visit,table,switch,insn,min,max,labels,label,table,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,len,read,int,u,4,int,keys,new,int,len,label,values,new,label,len,u,8,for,int,i,0,i,len,i,keys,i,read,int,u,values,i,labels,offset,read,int,u,4,u,8,mv,visit,lookup,switch,insn,labels,label,keys,values,break,case,class,writer,mv,visit,var,insn,opcode,b,u,1,0x,ff,u,2,break,case,class,writer,mv,visit,int,insn,opcode,b,u,1,u,2,break,case,class,writer,mv,visit,int,insn,opcode,read,short,u,1,u,3,break,case,class,writer,mv,visit,ldc,insn,read,const,b,u,1,0x,ff,c,u,2,break,case,class,writer,mv,visit,ldc,insn,read,const,read,unsigned,short,u,1,c,u,3,break,case,class,writer,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,string,iowner,read,class,cp,index,c,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,if,opcode,opcodes,invokevirtual,mv,visit,field,insn,opcode,iowner,iname,idesc,else,mv,visit,method,insn,opcode,iowner,iname,idesc,if,opcode,opcodes,invokeinterface,u,5,else,u,3,break,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,int,bsm,index,context,bootstrap,methods,read,unsigned,short,cp,index,handle,bsm,handle,read,const,read,unsigned,short,bsm,index,c,int,bsm,arg,count,read,unsigned,short,bsm,index,2,object,bsm,args,new,object,bsm,arg,count,bsm,index,4,for,int,i,0,i,bsm,arg,count,i,bsm,args,i,read,const,read,unsigned,short,bsm,index,c,bsm,index,2,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,mv,visit,invoke,dynamic,insn,iname,idesc,bsm,bsm,args,u,5,break,case,class,writer,mv,visit,type,insn,opcode,read,class,u,1,c,u,3,break,case,class,writer,mv,visit,iinc,insn,b,u,1,0x,ff,b,u,2,u,3,break,default,mv,visit,multi,anew,array,insn,read,class,u,1,c,b,u,3,0x,ff,u,4,break,if,labels,code,length,null,mv,visit,label,labels,code,length,if,context,flags,0,var,table,0,int,type,table,null,if,var,type,table,0,u,var,type,table,2,type,table,new,int,read,unsigned,short,var,type,table,3,for,int,i,type,table,length,i,0,type,table,i,u,6,type,table,i,read,unsigned,short,u,8,type,table,i,read,unsigned,short,u,u,10,u,var,table,2,for,int,i,read,unsigned,short,var,table,i,0,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,int,index,read,unsigned,short,u,8,string,vsignature,null,if,type,table,null,for,int,j,0,j,type,table,length,j,3,if,type,table,j,start,type,table,j,1,index,vsignature,read,utf8,type,table,j,2,c,break,mv,visit,local,variable,read,utf8,u,4,c,read,utf8,u,6,c,vsignature,labels,start,labels,start,length,index,u,10,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,mv,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(final MethodVisitor mv, final Context context, int u);1395273982;Reads the bytecode of a method and makes the given visitor visit it.__@param mv_the visitor that must visit the method's code._@param context_information about the class being parsed._@param u_the start offset of the code attribute in the class file.;private void readCode(final MethodVisitor mv, final Context context, int u) {_        _        byte[] b = this.b__        char[] c = context.buffer__        int maxStack = readUnsignedShort(u)__        int maxLocals = readUnsignedShort(u + 2)__        int codeLength = readInt(u + 4)__        u += 8___        _        int codeStart = u__        int codeEnd = u + codeLength__        Label[] labels = context.labels = new Label[codeLength + 2]__        readLabel(codeLength + 1, labels)__        while (u < codeEnd) {_            int offset = u - codeStart__            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                readLabel(offset + readShort(u + 1), labels)__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                readLabel(offset + readInt(u + 1), labels)__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    u += 6__                } else {_                    u += 4__                }_                break__            case ClassWriter.TABL_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 8) - readInt(u + 4) + 1_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 4__                }_                u += 12__                break__            case ClassWriter.LOOK_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 4)_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 8__                }_                u += 8__                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                u += 5__                break__            _            default:_                u += 4__                break__            }_        }__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            Label start = readLabel(readUnsignedShort(u + 2), labels)__            Label end = readLabel(readUnsignedShort(u + 4), labels)__            Label handler = readLabel(readUnsignedShort(u + 6), labels)__            String type = readUTF8(items[readUnsignedShort(u + 8)], c)__            mv.visitTryCatchBlock(start, end, handler, type)__            u += 8__        }_        u += 2___        _        int[] tanns = null_ _        int[] itanns = null_ _        int tann = 0_ _        int itann = 0_ _        int ntoff = -1_ _        int nitoff = -1_ _        int varTable = 0__        int varTypeTable = 0__        boolean zip = true__        boolean unzip = (context.flags & EXPAND_FRAMES) != 0__        int stackMap = 0__        int stackMapSize = 0__        int frameCount = 0__        Context frame = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("LocalVariableTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    varTable = u + 8__                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        label += readUnsignedShort(v + 12)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        v += 10__                    }_                }_            } else if ("LocalVariableTypeTable".equals(attrName)) {_                varTypeTable = u + 8__            } else if ("LineNumberTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        labels[label].line = readUnsignedShort(v + 12)__                        v += 4__                    }_                }_            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = readTypeAnnotations(mv, context, u + 8, true)__                ntoff = tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1_                        : readUnsignedShort(tanns[0] + 1)__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = readTypeAnnotations(mv, context, u + 8, false)__                nitoff = itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1_                        : readUnsignedShort(itanns[0] + 1)__            } else if (FRAMES && "StackMapTable".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _                _            } else if (FRAMES && "StackMap".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    zip = false__                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _            } else {_                for (int j = 0_ j < context.attrs.length_ ++j) {_                    if (context.attrs[j].type.equals(attrName)) {_                        Attribute attr = context.attrs[j].read(this, u + 8,_                                readInt(u + 4), c, codeStart - 8, labels)__                        if (attr != null) {_                            attr.next = attributes__                            attributes = attr__                        }_                    }_                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        if (FRAMES && stackMap != 0) {_            _            frame = context__            frame.offset = -1__            frame.mode = 0__            frame.localCount = 0__            frame.localDiff = 0__            frame.stackCount = 0__            frame.local = new Object[maxLocals]__            frame.stack = new Object[maxStack]__            if (unzip) {_                getImplicitFrame(context)__            }_            _            for (int i = stackMap_ i < stackMap + stackMapSize - 2_ ++i) {_                if (b[i] == 8) { _                    int v = readUnsignedShort(i + 1)__                    if (v >= 0 && v < codeLength) {_                        if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {_                            readLabel(v, labels)__                        }_                    }_                }_            }_        }__        _        u = codeStart__        while (u < codeEnd) {_            int offset = u - codeStart___            _            Label l = labels[offset]__            if (l != null) {_                mv.visitLabel(l)__                if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {_                    mv.visitLineNumber(l.line, l)__                }_            }__            _            while (FRAMES && frame != null_                    && (frame.offset == offset || frame.offset == -1)) {_                _                _                if (frame.offset != -1) {_                    if (!zip || unzip) {_                        mv.visitFrame(Opcodes.F_NEW, frame.localCount,_                                frame.local, frame.stackCount, frame.stack)__                    } else {_                        mv.visitFrame(frame.mode, frame.localDiff, frame.local,_                                frame.stackCount, frame.stack)__                    }_                }_                if (frameCount > 0) {_                    stackMap = readFrame(stackMap, zip, unzip, frame)__                    --frameCount__                } else {_                    frame = null__                }_            }__            _            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_                mv.visitInsn(opcode)__                u += 1__                break__            case ClassWriter.IMPLVAR_INSN:_                if (opcode > Opcodes.ISTORE) {_                    opcode -= 59_ _                    mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),_                            opcode & 0x3)__                } else {_                    opcode -= 26_ _                    mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__                }_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                mv.visitJumpInsn(opcode, labels[offset + readShort(u + 1)])__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                mv.visitJumpInsn(opcode - 33, labels[offset + readInt(u + 1)])__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    mv.visitIincInsn(readUnsignedShort(u + 2), readShort(u + 4))__                    u += 6__                } else {_                    mv.visitVarInsn(opcode, readUnsignedShort(u + 2))__                    u += 4__                }_                break__            case ClassWriter.TABL_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int min = readInt(u + 4)__                int max = readInt(u + 8)__                Label[] table = new Label[max - min + 1]__                u += 12__                for (int i = 0_ i < table.length_ ++i) {_                    table[i] = labels[offset + readInt(u)]__                    u += 4__                }_                mv.visitTableSwitchInsn(min, max, labels[label], table)__                break__            }_            case ClassWriter.LOOK_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int len = readInt(u + 4)__                int[] keys = new int[len]__                Label[] values = new Label[len]__                u += 8__                for (int i = 0_ i < len_ ++i) {_                    keys[i] = readInt(u)__                    values[i] = labels[offset + readInt(u + 4)]__                    u += 8__                }_                mv.visitLookupSwitchInsn(labels[label], keys, values)__                break__            }_            case ClassWriter.VAR_INSN:_                mv.visitVarInsn(opcode, b[u + 1] & 0xFF)__                u += 2__                break__            case ClassWriter.SBYTE_INSN:_                mv.visitIntInsn(opcode, b[u + 1])__                u += 2__                break__            case ClassWriter.SHORT_INSN:_                mv.visitIntInsn(opcode, readShort(u + 1))__                u += 3__                break__            case ClassWriter.LDC_INSN:_                mv.visitLdcInsn(readConst(b[u + 1] & 0xFF, c))__                u += 2__                break__            case ClassWriter.LDCW_INSN:_                mv.visitLdcInsn(readConst(readUnsignedShort(u + 1), c))__                u += 3__                break__            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.ITFMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__                String iowner = readClass(cpIndex, c)__                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                if (opcode < Opcodes.INVOKEVIRTUAL) {_                    mv.visitFieldInsn(opcode, iowner, iname, idesc)__                } else {_                    mv.visitMethodInsn(opcode, iowner, iname, idesc, itf)__                }_                if (opcode == Opcodes.INVOKEINTERFACE) {_                    u += 5__                } else {_                    u += 3__                }_                break__            }_            case ClassWriter.INDYMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                int bsmIndex = context.bootstrapMethods[readUnsignedShort(cpIndex)]__                Handle bsm = (Handle) readConst(readUnsignedShort(bsmIndex), c)__                int bsmArgCount = readUnsignedShort(bsmIndex + 2)__                Object[] bsmArgs = new Object[bsmArgCount]__                bsmIndex += 4__                for (int i = 0_ i < bsmArgCount_ i++) {_                    bsmArgs[i] = readConst(readUnsignedShort(bsmIndex), c)__                    bsmIndex += 2__                }_                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                mv.visitInvokeDynamicInsn(iname, idesc, bsm, bsmArgs)__                u += 5__                break__            }_            case ClassWriter.TYPE_INSN:_                mv.visitTypeInsn(opcode, readClass(u + 1, c))__                u += 3__                break__            case ClassWriter.IINC_INSN:_                mv.visitIincInsn(b[u + 1] & 0xFF, b[u + 2])__                u += 3__                break__            _            default:_                mv.visitMultiANewArrayInsn(readClass(u + 1, c), b[u + 3] & 0xFF)__                u += 4__                break__            }__            _            while (tanns != null && tann < tanns.length && ntoff <= offset) {_                if (ntoff == offset) {_                    int v = readAnnotationTarget(context, tanns[tann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), true))__                }_                ntoff = ++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1_                        : readUnsignedShort(tanns[tann] + 1)__            }_            while (itanns != null && itann < itanns.length && nitoff <= offset) {_                if (nitoff == offset) {_                    int v = readAnnotationTarget(context, itanns[itann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), false))__                }_                nitoff = ++itann >= itanns.length_                        || readByte(itanns[itann]) < 0x43 ? -1_                        : readUnsignedShort(itanns[itann] + 1)__            }_        }_        if (labels[codeLength] != null) {_            mv.visitLabel(labels[codeLength])__        }__        _        if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {_            int[] typeTable = null__            if (varTypeTable != 0) {_                u = varTypeTable + 2__                typeTable = new int[readUnsignedShort(varTypeTable) * 3]__                for (int i = typeTable.length_ i > 0_) {_                    typeTable[--i] = u + 6_ _                    typeTable[--i] = readUnsignedShort(u + 8)_ _                    typeTable[--i] = readUnsignedShort(u)_ _                    u += 10__                }_            }_            u = varTable + 2__            for (int i = readUnsignedShort(varTable)_ i > 0_ --i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                int index = readUnsignedShort(u + 8)__                String vsignature = null__                if (typeTable != null) {_                    for (int j = 0_ j < typeTable.length_ j += 3) {_                        if (typeTable[j] == start && typeTable[j + 1] == index) {_                            vsignature = readUTF8(typeTable[j + 2], c)__                            break__                        }_                    }_                }_                mv.visitLocalVariable(readUTF8(u + 4, c), readUTF8(u + 6, c),_                        vsignature, labels[start], labels[start + length],_                        index)__                u += 10__            }_        }__        _        if (tanns != null) {_            for (int i = 0_ i < tanns.length_ ++i) {_                if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, tanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    true))__                }_            }_        }_        if (itanns != null) {_            for (int i = 0_ i < itanns.length_ ++i) {_                if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, itanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    false))__                }_            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        mv.visitMaxs(maxStack, maxLocals)__    };reads,the,bytecode,of,a,method,and,makes,the,given,visitor,visit,it,param,mv,the,visitor,that,must,visit,the,method,s,code,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,code,attribute,in,the,class,file;private,void,read,code,final,method,visitor,mv,final,context,context,int,u,byte,b,this,b,char,c,context,buffer,int,max,stack,read,unsigned,short,u,int,max,locals,read,unsigned,short,u,2,int,code,length,read,int,u,4,u,8,int,code,start,u,int,code,end,u,code,length,label,labels,context,labels,new,label,code,length,2,read,label,code,length,1,labels,while,u,code,end,int,offset,u,code,start,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,read,label,offset,read,short,u,1,labels,u,3,break,case,class,writer,read,label,offset,read,int,u,1,labels,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,8,read,int,u,4,1,i,0,i,read,label,offset,read,int,u,12,labels,u,4,u,12,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,4,i,0,i,read,label,offset,read,int,u,12,labels,u,8,u,8,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,for,int,i,read,unsigned,short,u,i,0,i,label,start,read,label,read,unsigned,short,u,2,labels,label,end,read,label,read,unsigned,short,u,4,labels,label,handler,read,label,read,unsigned,short,u,6,labels,string,type,read,utf8,items,read,unsigned,short,u,8,c,mv,visit,try,catch,block,start,end,handler,type,u,8,u,2,int,tanns,null,int,itanns,null,int,tann,0,int,itann,0,int,ntoff,1,int,nitoff,1,int,var,table,0,int,var,type,table,0,boolean,zip,true,boolean,unzip,context,flags,0,int,stack,map,0,int,stack,map,size,0,int,frame,count,0,context,frame,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,local,variable,table,equals,attr,name,if,context,flags,0,var,table,u,8,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,read,unsigned,short,v,12,if,labels,label,null,read,label,label,labels,status,label,debug,v,10,else,if,local,variable,type,table,equals,attr,name,var,type,table,u,8,else,if,line,number,table,equals,attr,name,if,context,flags,0,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,labels,label,line,read,unsigned,short,v,12,v,4,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,read,type,annotations,mv,context,u,8,true,ntoff,tanns,length,0,read,byte,tanns,0,0x43,1,read,unsigned,short,tanns,0,1,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,read,type,annotations,mv,context,u,8,false,nitoff,itanns,length,0,read,byte,itanns,0,0x43,1,read,unsigned,short,itanns,0,1,else,if,frames,stack,map,table,equals,attr,name,if,context,flags,0,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,if,frames,stack,map,equals,attr,name,if,context,flags,0,zip,false,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,for,int,j,0,j,context,attrs,length,j,if,context,attrs,j,type,equals,attr,name,attribute,attr,context,attrs,j,read,this,u,8,read,int,u,4,c,code,start,8,labels,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,if,frames,stack,map,0,frame,context,frame,offset,1,frame,mode,0,frame,local,count,0,frame,local,diff,0,frame,stack,count,0,frame,local,new,object,max,locals,frame,stack,new,object,max,stack,if,unzip,get,implicit,frame,context,for,int,i,stack,map,i,stack,map,stack,map,size,2,i,if,b,i,8,int,v,read,unsigned,short,i,1,if,v,0,v,code,length,if,b,code,start,v,0x,ff,opcodes,new,read,label,v,labels,u,code,start,while,u,code,end,int,offset,u,code,start,label,l,labels,offset,if,l,null,mv,visit,label,l,if,context,flags,0,l,line,0,mv,visit,line,number,l,line,l,while,frames,frame,null,frame,offset,offset,frame,offset,1,if,frame,offset,1,if,zip,unzip,mv,visit,frame,opcodes,frame,local,count,frame,local,frame,stack,count,frame,stack,else,mv,visit,frame,frame,mode,frame,local,diff,frame,local,frame,stack,count,frame,stack,if,frame,count,0,stack,map,read,frame,stack,map,zip,unzip,frame,frame,count,else,frame,null,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,mv,visit,insn,opcode,u,1,break,case,class,writer,if,opcode,opcodes,istore,opcode,59,mv,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,else,opcode,26,mv,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,u,1,break,case,class,writer,mv,visit,jump,insn,opcode,labels,offset,read,short,u,1,u,3,break,case,class,writer,mv,visit,jump,insn,opcode,33,labels,offset,read,int,u,1,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,mv,visit,iinc,insn,read,unsigned,short,u,2,read,short,u,4,u,6,else,mv,visit,var,insn,opcode,read,unsigned,short,u,2,u,4,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,min,read,int,u,4,int,max,read,int,u,8,label,table,new,label,max,min,1,u,12,for,int,i,0,i,table,length,i,table,i,labels,offset,read,int,u,u,4,mv,visit,table,switch,insn,min,max,labels,label,table,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,len,read,int,u,4,int,keys,new,int,len,label,values,new,label,len,u,8,for,int,i,0,i,len,i,keys,i,read,int,u,values,i,labels,offset,read,int,u,4,u,8,mv,visit,lookup,switch,insn,labels,label,keys,values,break,case,class,writer,mv,visit,var,insn,opcode,b,u,1,0x,ff,u,2,break,case,class,writer,mv,visit,int,insn,opcode,b,u,1,u,2,break,case,class,writer,mv,visit,int,insn,opcode,read,short,u,1,u,3,break,case,class,writer,mv,visit,ldc,insn,read,const,b,u,1,0x,ff,c,u,2,break,case,class,writer,mv,visit,ldc,insn,read,const,read,unsigned,short,u,1,c,u,3,break,case,class,writer,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,iowner,read,class,cp,index,c,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,if,opcode,opcodes,invokevirtual,mv,visit,field,insn,opcode,iowner,iname,idesc,else,mv,visit,method,insn,opcode,iowner,iname,idesc,itf,if,opcode,opcodes,invokeinterface,u,5,else,u,3,break,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,int,bsm,index,context,bootstrap,methods,read,unsigned,short,cp,index,handle,bsm,handle,read,const,read,unsigned,short,bsm,index,c,int,bsm,arg,count,read,unsigned,short,bsm,index,2,object,bsm,args,new,object,bsm,arg,count,bsm,index,4,for,int,i,0,i,bsm,arg,count,i,bsm,args,i,read,const,read,unsigned,short,bsm,index,c,bsm,index,2,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,mv,visit,invoke,dynamic,insn,iname,idesc,bsm,bsm,args,u,5,break,case,class,writer,mv,visit,type,insn,opcode,read,class,u,1,c,u,3,break,case,class,writer,mv,visit,iinc,insn,b,u,1,0x,ff,b,u,2,u,3,break,default,mv,visit,multi,anew,array,insn,read,class,u,1,c,b,u,3,0x,ff,u,4,break,while,tanns,null,tann,tanns,length,ntoff,offset,if,ntoff,offset,int,v,read,annotation,target,context,tanns,tann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,ntoff,tann,tanns,length,read,byte,tanns,tann,0x43,1,read,unsigned,short,tanns,tann,1,while,itanns,null,itann,itanns,length,nitoff,offset,if,nitoff,offset,int,v,read,annotation,target,context,itanns,itann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,nitoff,itann,itanns,length,read,byte,itanns,itann,0x43,1,read,unsigned,short,itanns,itann,1,if,labels,code,length,null,mv,visit,label,labels,code,length,if,context,flags,0,var,table,0,int,type,table,null,if,var,type,table,0,u,var,type,table,2,type,table,new,int,read,unsigned,short,var,type,table,3,for,int,i,type,table,length,i,0,type,table,i,u,6,type,table,i,read,unsigned,short,u,8,type,table,i,read,unsigned,short,u,u,10,u,var,table,2,for,int,i,read,unsigned,short,var,table,i,0,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,int,index,read,unsigned,short,u,8,string,vsignature,null,if,type,table,null,for,int,j,0,j,type,table,length,j,3,if,type,table,j,start,type,table,j,1,index,vsignature,read,utf8,type,table,j,2,c,break,mv,visit,local,variable,read,utf8,u,4,c,read,utf8,u,6,c,vsignature,labels,start,labels,start,length,index,u,10,if,tanns,null,for,int,i,0,i,tanns,length,i,if,read,byte,tanns,i,1,0x40,1,int,v,read,annotation,target,context,tanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,true,if,itanns,null,for,int,i,0,i,itanns,length,i,if,read,byte,itanns,i,1,0x40,1,int,v,read,annotation,target,context,itanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,mv,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(final MethodVisitor mv, final Context context, int u);1414067099;Reads the bytecode of a method and makes the given visitor visit it.__@param mv_the visitor that must visit the method's code._@param context_information about the class being parsed._@param u_the start offset of the code attribute in the class file.;private void readCode(final MethodVisitor mv, final Context context, int u) {_        _        byte[] b = this.b__        char[] c = context.buffer__        int maxStack = readUnsignedShort(u)__        int maxLocals = readUnsignedShort(u + 2)__        int codeLength = readInt(u + 4)__        u += 8___        _        int codeStart = u__        int codeEnd = u + codeLength__        Label[] labels = context.labels = new Label[codeLength + 2]__        readLabel(codeLength + 1, labels)__        while (u < codeEnd) {_            int offset = u - codeStart__            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                readLabel(offset + readShort(u + 1), labels)__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                readLabel(offset + readInt(u + 1), labels)__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    u += 6__                } else {_                    u += 4__                }_                break__            case ClassWriter.TABL_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 8) - readInt(u + 4) + 1_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 4__                }_                u += 12__                break__            case ClassWriter.LOOK_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 4)_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 8__                }_                u += 8__                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                u += 5__                break__            _            default:_                u += 4__                break__            }_        }__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            Label start = readLabel(readUnsignedShort(u + 2), labels)__            Label end = readLabel(readUnsignedShort(u + 4), labels)__            Label handler = readLabel(readUnsignedShort(u + 6), labels)__            String type = readUTF8(items[readUnsignedShort(u + 8)], c)__            mv.visitTryCatchBlock(start, end, handler, type)__            u += 8__        }_        u += 2___        _        int[] tanns = null_ _        int[] itanns = null_ _        int tann = 0_ _        int itann = 0_ _        int ntoff = -1_ _        int nitoff = -1_ _        int varTable = 0__        int varTypeTable = 0__        boolean zip = true__        boolean unzip = (context.flags & EXPAND_FRAMES) != 0__        int stackMap = 0__        int stackMapSize = 0__        int frameCount = 0__        Context frame = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("LocalVariableTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    varTable = u + 8__                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        label += readUnsignedShort(v + 12)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        v += 10__                    }_                }_            } else if ("LocalVariableTypeTable".equals(attrName)) {_                varTypeTable = u + 8__            } else if ("LineNumberTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        labels[label].line = readUnsignedShort(v + 12)__                        v += 4__                    }_                }_            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = readTypeAnnotations(mv, context, u + 8, true)__                ntoff = tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1_                        : readUnsignedShort(tanns[0] + 1)__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = readTypeAnnotations(mv, context, u + 8, false)__                nitoff = itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1_                        : readUnsignedShort(itanns[0] + 1)__            } else if (FRAMES && "StackMapTable".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _                _            } else if (FRAMES && "StackMap".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    zip = false__                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _            } else {_                for (int j = 0_ j < context.attrs.length_ ++j) {_                    if (context.attrs[j].type.equals(attrName)) {_                        Attribute attr = context.attrs[j].read(this, u + 8,_                                readInt(u + 4), c, codeStart - 8, labels)__                        if (attr != null) {_                            attr.next = attributes__                            attributes = attr__                        }_                    }_                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        if (FRAMES && stackMap != 0) {_            _            frame = context__            frame.offset = -1__            frame.mode = 0__            frame.localCount = 0__            frame.localDiff = 0__            frame.stackCount = 0__            frame.local = new Object[maxLocals]__            frame.stack = new Object[maxStack]__            if (unzip) {_                getImplicitFrame(context)__            }_            _            for (int i = stackMap_ i < stackMap + stackMapSize - 2_ ++i) {_                if (b[i] == 8) { _                    int v = readUnsignedShort(i + 1)__                    if (v >= 0 && v < codeLength) {_                        if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {_                            readLabel(v, labels)__                        }_                    }_                }_            }_        }__        _        u = codeStart__        while (u < codeEnd) {_            int offset = u - codeStart___            _            Label l = labels[offset]__            if (l != null) {_                mv.visitLabel(l)__                if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {_                    mv.visitLineNumber(l.line, l)__                }_            }__            _            while (FRAMES && frame != null_                    && (frame.offset == offset || frame.offset == -1)) {_                _                _                if (frame.offset != -1) {_                    if (!zip || unzip) {_                        mv.visitFrame(Opcodes.F_NEW, frame.localCount,_                                frame.local, frame.stackCount, frame.stack)__                    } else {_                        mv.visitFrame(frame.mode, frame.localDiff, frame.local,_                                frame.stackCount, frame.stack)__                    }_                }_                if (frameCount > 0) {_                    stackMap = readFrame(stackMap, zip, unzip, frame)__                    --frameCount__                } else {_                    frame = null__                }_            }__            _            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_                mv.visitInsn(opcode)__                u += 1__                break__            case ClassWriter.IMPLVAR_INSN:_                if (opcode > Opcodes.ISTORE) {_                    opcode -= 59_ _                    mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),_                            opcode & 0x3)__                } else {_                    opcode -= 26_ _                    mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__                }_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                mv.visitJumpInsn(opcode, labels[offset + readShort(u + 1)])__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                mv.visitJumpInsn(opcode - 33, labels[offset + readInt(u + 1)])__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    mv.visitIincInsn(readUnsignedShort(u + 2), readShort(u + 4))__                    u += 6__                } else {_                    mv.visitVarInsn(opcode, readUnsignedShort(u + 2))__                    u += 4__                }_                break__            case ClassWriter.TABL_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int min = readInt(u + 4)__                int max = readInt(u + 8)__                Label[] table = new Label[max - min + 1]__                u += 12__                for (int i = 0_ i < table.length_ ++i) {_                    table[i] = labels[offset + readInt(u)]__                    u += 4__                }_                mv.visitTableSwitchInsn(min, max, labels[label], table)__                break__            }_            case ClassWriter.LOOK_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int len = readInt(u + 4)__                int[] keys = new int[len]__                Label[] values = new Label[len]__                u += 8__                for (int i = 0_ i < len_ ++i) {_                    keys[i] = readInt(u)__                    values[i] = labels[offset + readInt(u + 4)]__                    u += 8__                }_                mv.visitLookupSwitchInsn(labels[label], keys, values)__                break__            }_            case ClassWriter.VAR_INSN:_                mv.visitVarInsn(opcode, b[u + 1] & 0xFF)__                u += 2__                break__            case ClassWriter.SBYTE_INSN:_                mv.visitIntInsn(opcode, b[u + 1])__                u += 2__                break__            case ClassWriter.SHORT_INSN:_                mv.visitIntInsn(opcode, readShort(u + 1))__                u += 3__                break__            case ClassWriter.LDC_INSN:_                mv.visitLdcInsn(readConst(b[u + 1] & 0xFF, c))__                u += 2__                break__            case ClassWriter.LDCW_INSN:_                mv.visitLdcInsn(readConst(readUnsignedShort(u + 1), c))__                u += 3__                break__            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.ITFMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__                String iowner = readClass(cpIndex, c)__                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                if (opcode < Opcodes.INVOKEVIRTUAL) {_                    mv.visitFieldInsn(opcode, iowner, iname, idesc)__                } else {_                    mv.visitMethodInsn(opcode, iowner, iname, idesc, itf)__                }_                if (opcode == Opcodes.INVOKEINTERFACE) {_                    u += 5__                } else {_                    u += 3__                }_                break__            }_            case ClassWriter.INDYMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                int bsmIndex = context.bootstrapMethods[readUnsignedShort(cpIndex)]__                Handle bsm = (Handle) readConst(readUnsignedShort(bsmIndex), c)__                int bsmArgCount = readUnsignedShort(bsmIndex + 2)__                Object[] bsmArgs = new Object[bsmArgCount]__                bsmIndex += 4__                for (int i = 0_ i < bsmArgCount_ i++) {_                    bsmArgs[i] = readConst(readUnsignedShort(bsmIndex), c)__                    bsmIndex += 2__                }_                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                mv.visitInvokeDynamicInsn(iname, idesc, bsm, bsmArgs)__                u += 5__                break__            }_            case ClassWriter.TYPE_INSN:_                mv.visitTypeInsn(opcode, readClass(u + 1, c))__                u += 3__                break__            case ClassWriter.IINC_INSN:_                mv.visitIincInsn(b[u + 1] & 0xFF, b[u + 2])__                u += 3__                break__            _            default:_                mv.visitMultiANewArrayInsn(readClass(u + 1, c), b[u + 3] & 0xFF)__                u += 4__                break__            }__            _            while (tanns != null && tann < tanns.length && ntoff <= offset) {_                if (ntoff == offset) {_                    int v = readAnnotationTarget(context, tanns[tann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), true))__                }_                ntoff = ++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1_                        : readUnsignedShort(tanns[tann] + 1)__            }_            while (itanns != null && itann < itanns.length && nitoff <= offset) {_                if (nitoff == offset) {_                    int v = readAnnotationTarget(context, itanns[itann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), false))__                }_                nitoff = ++itann >= itanns.length_                        || readByte(itanns[itann]) < 0x43 ? -1_                        : readUnsignedShort(itanns[itann] + 1)__            }_        }_        if (labels[codeLength] != null) {_            mv.visitLabel(labels[codeLength])__        }__        _        if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {_            int[] typeTable = null__            if (varTypeTable != 0) {_                u = varTypeTable + 2__                typeTable = new int[readUnsignedShort(varTypeTable) * 3]__                for (int i = typeTable.length_ i > 0_) {_                    typeTable[--i] = u + 6_ _                    typeTable[--i] = readUnsignedShort(u + 8)_ _                    typeTable[--i] = readUnsignedShort(u)_ _                    u += 10__                }_            }_            u = varTable + 2__            for (int i = readUnsignedShort(varTable)_ i > 0_ --i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                int index = readUnsignedShort(u + 8)__                String vsignature = null__                if (typeTable != null) {_                    for (int j = 0_ j < typeTable.length_ j += 3) {_                        if (typeTable[j] == start && typeTable[j + 1] == index) {_                            vsignature = readUTF8(typeTable[j + 2], c)__                            break__                        }_                    }_                }_                mv.visitLocalVariable(readUTF8(u + 4, c), readUTF8(u + 6, c),_                        vsignature, labels[start], labels[start + length],_                        index)__                u += 10__            }_        }__        _        if (tanns != null) {_            for (int i = 0_ i < tanns.length_ ++i) {_                if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, tanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    true))__                }_            }_        }_        if (itanns != null) {_            for (int i = 0_ i < itanns.length_ ++i) {_                if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, itanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    false))__                }_            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        mv.visitMaxs(maxStack, maxLocals)__    };reads,the,bytecode,of,a,method,and,makes,the,given,visitor,visit,it,param,mv,the,visitor,that,must,visit,the,method,s,code,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,code,attribute,in,the,class,file;private,void,read,code,final,method,visitor,mv,final,context,context,int,u,byte,b,this,b,char,c,context,buffer,int,max,stack,read,unsigned,short,u,int,max,locals,read,unsigned,short,u,2,int,code,length,read,int,u,4,u,8,int,code,start,u,int,code,end,u,code,length,label,labels,context,labels,new,label,code,length,2,read,label,code,length,1,labels,while,u,code,end,int,offset,u,code,start,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,read,label,offset,read,short,u,1,labels,u,3,break,case,class,writer,read,label,offset,read,int,u,1,labels,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,8,read,int,u,4,1,i,0,i,read,label,offset,read,int,u,12,labels,u,4,u,12,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,4,i,0,i,read,label,offset,read,int,u,12,labels,u,8,u,8,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,for,int,i,read,unsigned,short,u,i,0,i,label,start,read,label,read,unsigned,short,u,2,labels,label,end,read,label,read,unsigned,short,u,4,labels,label,handler,read,label,read,unsigned,short,u,6,labels,string,type,read,utf8,items,read,unsigned,short,u,8,c,mv,visit,try,catch,block,start,end,handler,type,u,8,u,2,int,tanns,null,int,itanns,null,int,tann,0,int,itann,0,int,ntoff,1,int,nitoff,1,int,var,table,0,int,var,type,table,0,boolean,zip,true,boolean,unzip,context,flags,0,int,stack,map,0,int,stack,map,size,0,int,frame,count,0,context,frame,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,local,variable,table,equals,attr,name,if,context,flags,0,var,table,u,8,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,read,unsigned,short,v,12,if,labels,label,null,read,label,label,labels,status,label,debug,v,10,else,if,local,variable,type,table,equals,attr,name,var,type,table,u,8,else,if,line,number,table,equals,attr,name,if,context,flags,0,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,labels,label,line,read,unsigned,short,v,12,v,4,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,read,type,annotations,mv,context,u,8,true,ntoff,tanns,length,0,read,byte,tanns,0,0x43,1,read,unsigned,short,tanns,0,1,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,read,type,annotations,mv,context,u,8,false,nitoff,itanns,length,0,read,byte,itanns,0,0x43,1,read,unsigned,short,itanns,0,1,else,if,frames,stack,map,table,equals,attr,name,if,context,flags,0,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,if,frames,stack,map,equals,attr,name,if,context,flags,0,zip,false,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,for,int,j,0,j,context,attrs,length,j,if,context,attrs,j,type,equals,attr,name,attribute,attr,context,attrs,j,read,this,u,8,read,int,u,4,c,code,start,8,labels,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,if,frames,stack,map,0,frame,context,frame,offset,1,frame,mode,0,frame,local,count,0,frame,local,diff,0,frame,stack,count,0,frame,local,new,object,max,locals,frame,stack,new,object,max,stack,if,unzip,get,implicit,frame,context,for,int,i,stack,map,i,stack,map,stack,map,size,2,i,if,b,i,8,int,v,read,unsigned,short,i,1,if,v,0,v,code,length,if,b,code,start,v,0x,ff,opcodes,new,read,label,v,labels,u,code,start,while,u,code,end,int,offset,u,code,start,label,l,labels,offset,if,l,null,mv,visit,label,l,if,context,flags,0,l,line,0,mv,visit,line,number,l,line,l,while,frames,frame,null,frame,offset,offset,frame,offset,1,if,frame,offset,1,if,zip,unzip,mv,visit,frame,opcodes,frame,local,count,frame,local,frame,stack,count,frame,stack,else,mv,visit,frame,frame,mode,frame,local,diff,frame,local,frame,stack,count,frame,stack,if,frame,count,0,stack,map,read,frame,stack,map,zip,unzip,frame,frame,count,else,frame,null,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,mv,visit,insn,opcode,u,1,break,case,class,writer,if,opcode,opcodes,istore,opcode,59,mv,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,else,opcode,26,mv,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,u,1,break,case,class,writer,mv,visit,jump,insn,opcode,labels,offset,read,short,u,1,u,3,break,case,class,writer,mv,visit,jump,insn,opcode,33,labels,offset,read,int,u,1,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,mv,visit,iinc,insn,read,unsigned,short,u,2,read,short,u,4,u,6,else,mv,visit,var,insn,opcode,read,unsigned,short,u,2,u,4,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,min,read,int,u,4,int,max,read,int,u,8,label,table,new,label,max,min,1,u,12,for,int,i,0,i,table,length,i,table,i,labels,offset,read,int,u,u,4,mv,visit,table,switch,insn,min,max,labels,label,table,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,len,read,int,u,4,int,keys,new,int,len,label,values,new,label,len,u,8,for,int,i,0,i,len,i,keys,i,read,int,u,values,i,labels,offset,read,int,u,4,u,8,mv,visit,lookup,switch,insn,labels,label,keys,values,break,case,class,writer,mv,visit,var,insn,opcode,b,u,1,0x,ff,u,2,break,case,class,writer,mv,visit,int,insn,opcode,b,u,1,u,2,break,case,class,writer,mv,visit,int,insn,opcode,read,short,u,1,u,3,break,case,class,writer,mv,visit,ldc,insn,read,const,b,u,1,0x,ff,c,u,2,break,case,class,writer,mv,visit,ldc,insn,read,const,read,unsigned,short,u,1,c,u,3,break,case,class,writer,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,iowner,read,class,cp,index,c,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,if,opcode,opcodes,invokevirtual,mv,visit,field,insn,opcode,iowner,iname,idesc,else,mv,visit,method,insn,opcode,iowner,iname,idesc,itf,if,opcode,opcodes,invokeinterface,u,5,else,u,3,break,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,int,bsm,index,context,bootstrap,methods,read,unsigned,short,cp,index,handle,bsm,handle,read,const,read,unsigned,short,bsm,index,c,int,bsm,arg,count,read,unsigned,short,bsm,index,2,object,bsm,args,new,object,bsm,arg,count,bsm,index,4,for,int,i,0,i,bsm,arg,count,i,bsm,args,i,read,const,read,unsigned,short,bsm,index,c,bsm,index,2,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,mv,visit,invoke,dynamic,insn,iname,idesc,bsm,bsm,args,u,5,break,case,class,writer,mv,visit,type,insn,opcode,read,class,u,1,c,u,3,break,case,class,writer,mv,visit,iinc,insn,b,u,1,0x,ff,b,u,2,u,3,break,default,mv,visit,multi,anew,array,insn,read,class,u,1,c,b,u,3,0x,ff,u,4,break,while,tanns,null,tann,tanns,length,ntoff,offset,if,ntoff,offset,int,v,read,annotation,target,context,tanns,tann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,ntoff,tann,tanns,length,read,byte,tanns,tann,0x43,1,read,unsigned,short,tanns,tann,1,while,itanns,null,itann,itanns,length,nitoff,offset,if,nitoff,offset,int,v,read,annotation,target,context,itanns,itann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,nitoff,itann,itanns,length,read,byte,itanns,itann,0x43,1,read,unsigned,short,itanns,itann,1,if,labels,code,length,null,mv,visit,label,labels,code,length,if,context,flags,0,var,table,0,int,type,table,null,if,var,type,table,0,u,var,type,table,2,type,table,new,int,read,unsigned,short,var,type,table,3,for,int,i,type,table,length,i,0,type,table,i,u,6,type,table,i,read,unsigned,short,u,8,type,table,i,read,unsigned,short,u,u,10,u,var,table,2,for,int,i,read,unsigned,short,var,table,i,0,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,int,index,read,unsigned,short,u,8,string,vsignature,null,if,type,table,null,for,int,j,0,j,type,table,length,j,3,if,type,table,j,start,type,table,j,1,index,vsignature,read,utf8,type,table,j,2,c,break,mv,visit,local,variable,read,utf8,u,4,c,read,utf8,u,6,c,vsignature,labels,start,labels,start,length,index,u,10,if,tanns,null,for,int,i,0,i,tanns,length,i,if,read,byte,tanns,i,1,0x40,1,int,v,read,annotation,target,context,tanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,true,if,itanns,null,for,int,i,0,i,itanns,length,i,if,read,byte,itanns,i,1,0x40,1,int,v,read,annotation,target,context,itanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,mv,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(final MethodVisitor mv, final Context context, int u);1414499035;Reads the bytecode of a method and makes the given visitor visit it.__@param mv_the visitor that must visit the method's code._@param context_information about the class being parsed._@param u_the start offset of the code attribute in the class file.;private void readCode(final MethodVisitor mv, final Context context, int u) {_        _        byte[] b = this.b__        char[] c = context.buffer__        int maxStack = readUnsignedShort(u)__        int maxLocals = readUnsignedShort(u + 2)__        int codeLength = readInt(u + 4)__        u += 8___        _        int codeStart = u__        int codeEnd = u + codeLength__        Label[] labels = context.labels = new Label[codeLength + 2]__        readLabel(codeLength + 1, labels)__        while (u < codeEnd) {_            int offset = u - codeStart__            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                readLabel(offset + readShort(u + 1), labels)__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                readLabel(offset + readInt(u + 1), labels)__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    u += 6__                } else {_                    u += 4__                }_                break__            case ClassWriter.TABL_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 8) - readInt(u + 4) + 1_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 4__                }_                u += 12__                break__            case ClassWriter.LOOK_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 4)_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 8__                }_                u += 8__                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                u += 5__                break__            _            default:_                u += 4__                break__            }_        }__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            Label start = readLabel(readUnsignedShort(u + 2), labels)__            Label end = readLabel(readUnsignedShort(u + 4), labels)__            Label handler = readLabel(readUnsignedShort(u + 6), labels)__            String type = readUTF8(items[readUnsignedShort(u + 8)], c)__            mv.visitTryCatchBlock(start, end, handler, type)__            u += 8__        }_        u += 2___        _        int[] tanns = null_ _        int[] itanns = null_ _        int tann = 0_ _        int itann = 0_ _        int ntoff = -1_ _        int nitoff = -1_ _        int varTable = 0__        int varTypeTable = 0__        boolean zip = true__        boolean unzip = (context.flags & EXPAND_FRAMES) != 0__        int stackMap = 0__        int stackMapSize = 0__        int frameCount = 0__        Context frame = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("LocalVariableTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    varTable = u + 8__                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        label += readUnsignedShort(v + 12)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        v += 10__                    }_                }_            } else if ("LocalVariableTypeTable".equals(attrName)) {_                varTypeTable = u + 8__            } else if ("LineNumberTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        labels[label].line = readUnsignedShort(v + 12)__                        v += 4__                    }_                }_            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = readTypeAnnotations(mv, context, u + 8, true)__                ntoff = tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1_                        : readUnsignedShort(tanns[0] + 1)__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = readTypeAnnotations(mv, context, u + 8, false)__                nitoff = itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1_                        : readUnsignedShort(itanns[0] + 1)__            } else if (FRAMES && "StackMapTable".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _                _            } else if (FRAMES && "StackMap".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    zip = false__                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _            } else {_                for (int j = 0_ j < context.attrs.length_ ++j) {_                    if (context.attrs[j].type.equals(attrName)) {_                        Attribute attr = context.attrs[j].read(this, u + 8,_                                readInt(u + 4), c, codeStart - 8, labels)__                        if (attr != null) {_                            attr.next = attributes__                            attributes = attr__                        }_                    }_                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        if (FRAMES && stackMap != 0) {_            _            frame = context__            frame.offset = -1__            frame.mode = 0__            frame.localCount = 0__            frame.localDiff = 0__            frame.stackCount = 0__            frame.local = new Object[maxLocals]__            frame.stack = new Object[maxStack]__            if (unzip) {_                getImplicitFrame(context)__            }_            _            for (int i = stackMap_ i < stackMap + stackMapSize - 2_ ++i) {_                if (b[i] == 8) { _                    int v = readUnsignedShort(i + 1)__                    if (v >= 0 && v < codeLength) {_                        if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {_                            readLabel(v, labels)__                        }_                    }_                }_            }_        }__        _        u = codeStart__        while (u < codeEnd) {_            int offset = u - codeStart___            _            Label l = labels[offset]__            if (l != null) {_                mv.visitLabel(l)__                if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {_                    mv.visitLineNumber(l.line, l)__                }_            }__            _            while (FRAMES && frame != null_                    && (frame.offset == offset || frame.offset == -1)) {_                _                _                if (frame.offset != -1) {_                    if (!zip || unzip) {_                        mv.visitFrame(Opcodes.F_NEW, frame.localCount,_                                frame.local, frame.stackCount, frame.stack)__                    } else {_                        mv.visitFrame(frame.mode, frame.localDiff, frame.local,_                                frame.stackCount, frame.stack)__                    }_                }_                if (frameCount > 0) {_                    stackMap = readFrame(stackMap, zip, unzip, frame)__                    --frameCount__                } else {_                    frame = null__                }_            }__            _            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_                mv.visitInsn(opcode)__                u += 1__                break__            case ClassWriter.IMPLVAR_INSN:_                if (opcode > Opcodes.ISTORE) {_                    opcode -= 59_ _                    mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),_                            opcode & 0x3)__                } else {_                    opcode -= 26_ _                    mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__                }_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                mv.visitJumpInsn(opcode, labels[offset + readShort(u + 1)])__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                mv.visitJumpInsn(opcode - 33, labels[offset + readInt(u + 1)])__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    mv.visitIincInsn(readUnsignedShort(u + 2), readShort(u + 4))__                    u += 6__                } else {_                    mv.visitVarInsn(opcode, readUnsignedShort(u + 2))__                    u += 4__                }_                break__            case ClassWriter.TABL_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int min = readInt(u + 4)__                int max = readInt(u + 8)__                Label[] table = new Label[max - min + 1]__                u += 12__                for (int i = 0_ i < table.length_ ++i) {_                    table[i] = labels[offset + readInt(u)]__                    u += 4__                }_                mv.visitTableSwitchInsn(min, max, labels[label], table)__                break__            }_            case ClassWriter.LOOK_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int len = readInt(u + 4)__                int[] keys = new int[len]__                Label[] values = new Label[len]__                u += 8__                for (int i = 0_ i < len_ ++i) {_                    keys[i] = readInt(u)__                    values[i] = labels[offset + readInt(u + 4)]__                    u += 8__                }_                mv.visitLookupSwitchInsn(labels[label], keys, values)__                break__            }_            case ClassWriter.VAR_INSN:_                mv.visitVarInsn(opcode, b[u + 1] & 0xFF)__                u += 2__                break__            case ClassWriter.SBYTE_INSN:_                mv.visitIntInsn(opcode, b[u + 1])__                u += 2__                break__            case ClassWriter.SHORT_INSN:_                mv.visitIntInsn(opcode, readShort(u + 1))__                u += 3__                break__            case ClassWriter.LDC_INSN:_                mv.visitLdcInsn(readConst(b[u + 1] & 0xFF, c))__                u += 2__                break__            case ClassWriter.LDCW_INSN:_                mv.visitLdcInsn(readConst(readUnsignedShort(u + 1), c))__                u += 3__                break__            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.ITFMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__                String iowner = readClass(cpIndex, c)__                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                if (opcode < Opcodes.INVOKEVIRTUAL) {_                    mv.visitFieldInsn(opcode, iowner, iname, idesc)__                } else {_                    mv.visitMethodInsn(opcode, iowner, iname, idesc, itf)__                }_                if (opcode == Opcodes.INVOKEINTERFACE) {_                    u += 5__                } else {_                    u += 3__                }_                break__            }_            case ClassWriter.INDYMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                int bsmIndex = context.bootstrapMethods[readUnsignedShort(cpIndex)]__                Handle bsm = (Handle) readConst(readUnsignedShort(bsmIndex), c)__                int bsmArgCount = readUnsignedShort(bsmIndex + 2)__                Object[] bsmArgs = new Object[bsmArgCount]__                bsmIndex += 4__                for (int i = 0_ i < bsmArgCount_ i++) {_                    bsmArgs[i] = readConst(readUnsignedShort(bsmIndex), c)__                    bsmIndex += 2__                }_                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                mv.visitInvokeDynamicInsn(iname, idesc, bsm, bsmArgs)__                u += 5__                break__            }_            case ClassWriter.TYPE_INSN:_                mv.visitTypeInsn(opcode, readClass(u + 1, c))__                u += 3__                break__            case ClassWriter.IINC_INSN:_                mv.visitIincInsn(b[u + 1] & 0xFF, b[u + 2])__                u += 3__                break__            _            default:_                mv.visitMultiANewArrayInsn(readClass(u + 1, c), b[u + 3] & 0xFF)__                u += 4__                break__            }__            _            while (tanns != null && tann < tanns.length && ntoff <= offset) {_                if (ntoff == offset) {_                    int v = readAnnotationTarget(context, tanns[tann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), true))__                }_                ntoff = ++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1_                        : readUnsignedShort(tanns[tann] + 1)__            }_            while (itanns != null && itann < itanns.length && nitoff <= offset) {_                if (nitoff == offset) {_                    int v = readAnnotationTarget(context, itanns[itann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), false))__                }_                nitoff = ++itann >= itanns.length_                        || readByte(itanns[itann]) < 0x43 ? -1_                        : readUnsignedShort(itanns[itann] + 1)__            }_        }_        if (labels[codeLength] != null) {_            mv.visitLabel(labels[codeLength])__        }__        _        if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {_            int[] typeTable = null__            if (varTypeTable != 0) {_                u = varTypeTable + 2__                typeTable = new int[readUnsignedShort(varTypeTable) * 3]__                for (int i = typeTable.length_ i > 0_) {_                    typeTable[--i] = u + 6_ _                    typeTable[--i] = readUnsignedShort(u + 8)_ _                    typeTable[--i] = readUnsignedShort(u)_ _                    u += 10__                }_            }_            u = varTable + 2__            for (int i = readUnsignedShort(varTable)_ i > 0_ --i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                int index = readUnsignedShort(u + 8)__                String vsignature = null__                if (typeTable != null) {_                    for (int j = 0_ j < typeTable.length_ j += 3) {_                        if (typeTable[j] == start && typeTable[j + 1] == index) {_                            vsignature = readUTF8(typeTable[j + 2], c)__                            break__                        }_                    }_                }_                mv.visitLocalVariable(readUTF8(u + 4, c), readUTF8(u + 6, c),_                        vsignature, labels[start], labels[start + length],_                        index)__                u += 10__            }_        }__        _        if (tanns != null) {_            for (int i = 0_ i < tanns.length_ ++i) {_                if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, tanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    true))__                }_            }_        }_        if (itanns != null) {_            for (int i = 0_ i < itanns.length_ ++i) {_                if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, itanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    false))__                }_            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        mv.visitMaxs(maxStack, maxLocals)__    };reads,the,bytecode,of,a,method,and,makes,the,given,visitor,visit,it,param,mv,the,visitor,that,must,visit,the,method,s,code,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,code,attribute,in,the,class,file;private,void,read,code,final,method,visitor,mv,final,context,context,int,u,byte,b,this,b,char,c,context,buffer,int,max,stack,read,unsigned,short,u,int,max,locals,read,unsigned,short,u,2,int,code,length,read,int,u,4,u,8,int,code,start,u,int,code,end,u,code,length,label,labels,context,labels,new,label,code,length,2,read,label,code,length,1,labels,while,u,code,end,int,offset,u,code,start,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,read,label,offset,read,short,u,1,labels,u,3,break,case,class,writer,read,label,offset,read,int,u,1,labels,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,8,read,int,u,4,1,i,0,i,read,label,offset,read,int,u,12,labels,u,4,u,12,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,4,i,0,i,read,label,offset,read,int,u,12,labels,u,8,u,8,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,for,int,i,read,unsigned,short,u,i,0,i,label,start,read,label,read,unsigned,short,u,2,labels,label,end,read,label,read,unsigned,short,u,4,labels,label,handler,read,label,read,unsigned,short,u,6,labels,string,type,read,utf8,items,read,unsigned,short,u,8,c,mv,visit,try,catch,block,start,end,handler,type,u,8,u,2,int,tanns,null,int,itanns,null,int,tann,0,int,itann,0,int,ntoff,1,int,nitoff,1,int,var,table,0,int,var,type,table,0,boolean,zip,true,boolean,unzip,context,flags,0,int,stack,map,0,int,stack,map,size,0,int,frame,count,0,context,frame,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,local,variable,table,equals,attr,name,if,context,flags,0,var,table,u,8,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,read,unsigned,short,v,12,if,labels,label,null,read,label,label,labels,status,label,debug,v,10,else,if,local,variable,type,table,equals,attr,name,var,type,table,u,8,else,if,line,number,table,equals,attr,name,if,context,flags,0,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,labels,label,line,read,unsigned,short,v,12,v,4,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,read,type,annotations,mv,context,u,8,true,ntoff,tanns,length,0,read,byte,tanns,0,0x43,1,read,unsigned,short,tanns,0,1,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,read,type,annotations,mv,context,u,8,false,nitoff,itanns,length,0,read,byte,itanns,0,0x43,1,read,unsigned,short,itanns,0,1,else,if,frames,stack,map,table,equals,attr,name,if,context,flags,0,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,if,frames,stack,map,equals,attr,name,if,context,flags,0,zip,false,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,for,int,j,0,j,context,attrs,length,j,if,context,attrs,j,type,equals,attr,name,attribute,attr,context,attrs,j,read,this,u,8,read,int,u,4,c,code,start,8,labels,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,if,frames,stack,map,0,frame,context,frame,offset,1,frame,mode,0,frame,local,count,0,frame,local,diff,0,frame,stack,count,0,frame,local,new,object,max,locals,frame,stack,new,object,max,stack,if,unzip,get,implicit,frame,context,for,int,i,stack,map,i,stack,map,stack,map,size,2,i,if,b,i,8,int,v,read,unsigned,short,i,1,if,v,0,v,code,length,if,b,code,start,v,0x,ff,opcodes,new,read,label,v,labels,u,code,start,while,u,code,end,int,offset,u,code,start,label,l,labels,offset,if,l,null,mv,visit,label,l,if,context,flags,0,l,line,0,mv,visit,line,number,l,line,l,while,frames,frame,null,frame,offset,offset,frame,offset,1,if,frame,offset,1,if,zip,unzip,mv,visit,frame,opcodes,frame,local,count,frame,local,frame,stack,count,frame,stack,else,mv,visit,frame,frame,mode,frame,local,diff,frame,local,frame,stack,count,frame,stack,if,frame,count,0,stack,map,read,frame,stack,map,zip,unzip,frame,frame,count,else,frame,null,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,mv,visit,insn,opcode,u,1,break,case,class,writer,if,opcode,opcodes,istore,opcode,59,mv,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,else,opcode,26,mv,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,u,1,break,case,class,writer,mv,visit,jump,insn,opcode,labels,offset,read,short,u,1,u,3,break,case,class,writer,mv,visit,jump,insn,opcode,33,labels,offset,read,int,u,1,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,mv,visit,iinc,insn,read,unsigned,short,u,2,read,short,u,4,u,6,else,mv,visit,var,insn,opcode,read,unsigned,short,u,2,u,4,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,min,read,int,u,4,int,max,read,int,u,8,label,table,new,label,max,min,1,u,12,for,int,i,0,i,table,length,i,table,i,labels,offset,read,int,u,u,4,mv,visit,table,switch,insn,min,max,labels,label,table,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,len,read,int,u,4,int,keys,new,int,len,label,values,new,label,len,u,8,for,int,i,0,i,len,i,keys,i,read,int,u,values,i,labels,offset,read,int,u,4,u,8,mv,visit,lookup,switch,insn,labels,label,keys,values,break,case,class,writer,mv,visit,var,insn,opcode,b,u,1,0x,ff,u,2,break,case,class,writer,mv,visit,int,insn,opcode,b,u,1,u,2,break,case,class,writer,mv,visit,int,insn,opcode,read,short,u,1,u,3,break,case,class,writer,mv,visit,ldc,insn,read,const,b,u,1,0x,ff,c,u,2,break,case,class,writer,mv,visit,ldc,insn,read,const,read,unsigned,short,u,1,c,u,3,break,case,class,writer,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,iowner,read,class,cp,index,c,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,if,opcode,opcodes,invokevirtual,mv,visit,field,insn,opcode,iowner,iname,idesc,else,mv,visit,method,insn,opcode,iowner,iname,idesc,itf,if,opcode,opcodes,invokeinterface,u,5,else,u,3,break,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,int,bsm,index,context,bootstrap,methods,read,unsigned,short,cp,index,handle,bsm,handle,read,const,read,unsigned,short,bsm,index,c,int,bsm,arg,count,read,unsigned,short,bsm,index,2,object,bsm,args,new,object,bsm,arg,count,bsm,index,4,for,int,i,0,i,bsm,arg,count,i,bsm,args,i,read,const,read,unsigned,short,bsm,index,c,bsm,index,2,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,mv,visit,invoke,dynamic,insn,iname,idesc,bsm,bsm,args,u,5,break,case,class,writer,mv,visit,type,insn,opcode,read,class,u,1,c,u,3,break,case,class,writer,mv,visit,iinc,insn,b,u,1,0x,ff,b,u,2,u,3,break,default,mv,visit,multi,anew,array,insn,read,class,u,1,c,b,u,3,0x,ff,u,4,break,while,tanns,null,tann,tanns,length,ntoff,offset,if,ntoff,offset,int,v,read,annotation,target,context,tanns,tann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,ntoff,tann,tanns,length,read,byte,tanns,tann,0x43,1,read,unsigned,short,tanns,tann,1,while,itanns,null,itann,itanns,length,nitoff,offset,if,nitoff,offset,int,v,read,annotation,target,context,itanns,itann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,nitoff,itann,itanns,length,read,byte,itanns,itann,0x43,1,read,unsigned,short,itanns,itann,1,if,labels,code,length,null,mv,visit,label,labels,code,length,if,context,flags,0,var,table,0,int,type,table,null,if,var,type,table,0,u,var,type,table,2,type,table,new,int,read,unsigned,short,var,type,table,3,for,int,i,type,table,length,i,0,type,table,i,u,6,type,table,i,read,unsigned,short,u,8,type,table,i,read,unsigned,short,u,u,10,u,var,table,2,for,int,i,read,unsigned,short,var,table,i,0,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,int,index,read,unsigned,short,u,8,string,vsignature,null,if,type,table,null,for,int,j,0,j,type,table,length,j,3,if,type,table,j,start,type,table,j,1,index,vsignature,read,utf8,type,table,j,2,c,break,mv,visit,local,variable,read,utf8,u,4,c,read,utf8,u,6,c,vsignature,labels,start,labels,start,length,index,u,10,if,tanns,null,for,int,i,0,i,tanns,length,i,if,read,byte,tanns,i,1,0x40,1,int,v,read,annotation,target,context,tanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,true,if,itanns,null,for,int,i,0,i,itanns,length,i,if,read,byte,itanns,i,1,0x40,1,int,v,read,annotation,target,context,itanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,mv,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(final MethodVisitor mv, final Context context, int u);1416998550;Reads the bytecode of a method and makes the given visitor visit it.__@param mv_the visitor that must visit the method's code._@param context_information about the class being parsed._@param u_the start offset of the code attribute in the class file.;private void readCode(final MethodVisitor mv, final Context context, int u) {_        _        byte[] b = this.b__        char[] c = context.buffer__        int maxStack = readUnsignedShort(u)__        int maxLocals = readUnsignedShort(u + 2)__        int codeLength = readInt(u + 4)__        u += 8___        _        int codeStart = u__        int codeEnd = u + codeLength__        Label[] labels = context.labels = new Label[codeLength + 2]__        readLabel(codeLength + 1, labels)__        while (u < codeEnd) {_            int offset = u - codeStart__            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                readLabel(offset + readShort(u + 1), labels)__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                readLabel(offset + readInt(u + 1), labels)__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    u += 6__                } else {_                    u += 4__                }_                break__            case ClassWriter.TABL_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 8) - readInt(u + 4) + 1_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 4__                }_                u += 12__                break__            case ClassWriter.LOOK_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 4)_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 8__                }_                u += 8__                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                u += 5__                break__            _            default:_                u += 4__                break__            }_        }__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            Label start = readLabel(readUnsignedShort(u + 2), labels)__            Label end = readLabel(readUnsignedShort(u + 4), labels)__            Label handler = readLabel(readUnsignedShort(u + 6), labels)__            String type = readUTF8(items[readUnsignedShort(u + 8)], c)__            mv.visitTryCatchBlock(start, end, handler, type)__            u += 8__        }_        u += 2___        _        int[] tanns = null_ _        int[] itanns = null_ _        int tann = 0_ _        int itann = 0_ _        int ntoff = -1_ _        int nitoff = -1_ _        int varTable = 0__        int varTypeTable = 0__        boolean zip = true__        boolean unzip = (context.flags & EXPAND_FRAMES) != 0__        int stackMap = 0__        int stackMapSize = 0__        int frameCount = 0__        Context frame = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("LocalVariableTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    varTable = u + 8__                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        label += readUnsignedShort(v + 12)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        v += 10__                    }_                }_            } else if ("LocalVariableTypeTable".equals(attrName)) {_                varTypeTable = u + 8__            } else if ("LineNumberTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        Label l = labels[label]__                        while (l.line > 0) {_                            if (l.next == null) {_                                l.next = new Label()__                            }_                            l = l.next__                        }_                        l.line = readUnsignedShort(v + 12)__                        v += 4__                    }_                }_            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = readTypeAnnotations(mv, context, u + 8, true)__                ntoff = tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1_                        : readUnsignedShort(tanns[0] + 1)__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = readTypeAnnotations(mv, context, u + 8, false)__                nitoff = itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1_                        : readUnsignedShort(itanns[0] + 1)__            } else if (FRAMES && "StackMapTable".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _                _            } else if (FRAMES && "StackMap".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    zip = false__                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _            } else {_                for (int j = 0_ j < context.attrs.length_ ++j) {_                    if (context.attrs[j].type.equals(attrName)) {_                        Attribute attr = context.attrs[j].read(this, u + 8,_                                readInt(u + 4), c, codeStart - 8, labels)__                        if (attr != null) {_                            attr.next = attributes__                            attributes = attr__                        }_                    }_                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        if (FRAMES && stackMap != 0) {_            _            frame = context__            frame.offset = -1__            frame.mode = 0__            frame.localCount = 0__            frame.localDiff = 0__            frame.stackCount = 0__            frame.local = new Object[maxLocals]__            frame.stack = new Object[maxStack]__            if (unzip) {_                getImplicitFrame(context)__            }_            _            for (int i = stackMap_ i < stackMap + stackMapSize - 2_ ++i) {_                if (b[i] == 8) { _                    int v = readUnsignedShort(i + 1)__                    if (v >= 0 && v < codeLength) {_                        if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {_                            readLabel(v, labels)__                        }_                    }_                }_            }_        }__        _        u = codeStart__        while (u < codeEnd) {_            int offset = u - codeStart___            _            Label l = labels[offset]__            if (l != null) {_                Label next = l.next__                l.next = null__                mv.visitLabel(l)__                if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {_                    mv.visitLineNumber(l.line, l)__                    while (next != null) {_                        mv.visitLineNumber(next.line, l)__                        next = next.next__                    }_                }_            }__            _            while (FRAMES && frame != null_                    && (frame.offset == offset || frame.offset == -1)) {_                _                _                if (frame.offset != -1) {_                    if (!zip || unzip) {_                        mv.visitFrame(Opcodes.F_NEW, frame.localCount,_                                frame.local, frame.stackCount, frame.stack)__                    } else {_                        mv.visitFrame(frame.mode, frame.localDiff, frame.local,_                                frame.stackCount, frame.stack)__                    }_                }_                if (frameCount > 0) {_                    stackMap = readFrame(stackMap, zip, unzip, frame)__                    --frameCount__                } else {_                    frame = null__                }_            }__            _            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_                mv.visitInsn(opcode)__                u += 1__                break__            case ClassWriter.IMPLVAR_INSN:_                if (opcode > Opcodes.ISTORE) {_                    opcode -= 59_ _                    mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),_                            opcode & 0x3)__                } else {_                    opcode -= 26_ _                    mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__                }_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                mv.visitJumpInsn(opcode, labels[offset + readShort(u + 1)])__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                mv.visitJumpInsn(opcode - 33, labels[offset + readInt(u + 1)])__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    mv.visitIincInsn(readUnsignedShort(u + 2), readShort(u + 4))__                    u += 6__                } else {_                    mv.visitVarInsn(opcode, readUnsignedShort(u + 2))__                    u += 4__                }_                break__            case ClassWriter.TABL_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int min = readInt(u + 4)__                int max = readInt(u + 8)__                Label[] table = new Label[max - min + 1]__                u += 12__                for (int i = 0_ i < table.length_ ++i) {_                    table[i] = labels[offset + readInt(u)]__                    u += 4__                }_                mv.visitTableSwitchInsn(min, max, labels[label], table)__                break__            }_            case ClassWriter.LOOK_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int len = readInt(u + 4)__                int[] keys = new int[len]__                Label[] values = new Label[len]__                u += 8__                for (int i = 0_ i < len_ ++i) {_                    keys[i] = readInt(u)__                    values[i] = labels[offset + readInt(u + 4)]__                    u += 8__                }_                mv.visitLookupSwitchInsn(labels[label], keys, values)__                break__            }_            case ClassWriter.VAR_INSN:_                mv.visitVarInsn(opcode, b[u + 1] & 0xFF)__                u += 2__                break__            case ClassWriter.SBYTE_INSN:_                mv.visitIntInsn(opcode, b[u + 1])__                u += 2__                break__            case ClassWriter.SHORT_INSN:_                mv.visitIntInsn(opcode, readShort(u + 1))__                u += 3__                break__            case ClassWriter.LDC_INSN:_                mv.visitLdcInsn(readConst(b[u + 1] & 0xFF, c))__                u += 2__                break__            case ClassWriter.LDCW_INSN:_                mv.visitLdcInsn(readConst(readUnsignedShort(u + 1), c))__                u += 3__                break__            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.ITFMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__                String iowner = readClass(cpIndex, c)__                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                if (opcode < Opcodes.INVOKEVIRTUAL) {_                    mv.visitFieldInsn(opcode, iowner, iname, idesc)__                } else {_                    mv.visitMethodInsn(opcode, iowner, iname, idesc, itf)__                }_                if (opcode == Opcodes.INVOKEINTERFACE) {_                    u += 5__                } else {_                    u += 3__                }_                break__            }_            case ClassWriter.INDYMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                int bsmIndex = context.bootstrapMethods[readUnsignedShort(cpIndex)]__                Handle bsm = (Handle) readConst(readUnsignedShort(bsmIndex), c)__                int bsmArgCount = readUnsignedShort(bsmIndex + 2)__                Object[] bsmArgs = new Object[bsmArgCount]__                bsmIndex += 4__                for (int i = 0_ i < bsmArgCount_ i++) {_                    bsmArgs[i] = readConst(readUnsignedShort(bsmIndex), c)__                    bsmIndex += 2__                }_                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                mv.visitInvokeDynamicInsn(iname, idesc, bsm, bsmArgs)__                u += 5__                break__            }_            case ClassWriter.TYPE_INSN:_                mv.visitTypeInsn(opcode, readClass(u + 1, c))__                u += 3__                break__            case ClassWriter.IINC_INSN:_                mv.visitIincInsn(b[u + 1] & 0xFF, b[u + 2])__                u += 3__                break__            _            default:_                mv.visitMultiANewArrayInsn(readClass(u + 1, c), b[u + 3] & 0xFF)__                u += 4__                break__            }__            _            while (tanns != null && tann < tanns.length && ntoff <= offset) {_                if (ntoff == offset) {_                    int v = readAnnotationTarget(context, tanns[tann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), true))__                }_                ntoff = ++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1_                        : readUnsignedShort(tanns[tann] + 1)__            }_            while (itanns != null && itann < itanns.length && nitoff <= offset) {_                if (nitoff == offset) {_                    int v = readAnnotationTarget(context, itanns[itann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), false))__                }_                nitoff = ++itann >= itanns.length_                        || readByte(itanns[itann]) < 0x43 ? -1_                        : readUnsignedShort(itanns[itann] + 1)__            }_        }_        if (labels[codeLength] != null) {_            mv.visitLabel(labels[codeLength])__        }__        _        if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {_            int[] typeTable = null__            if (varTypeTable != 0) {_                u = varTypeTable + 2__                typeTable = new int[readUnsignedShort(varTypeTable) * 3]__                for (int i = typeTable.length_ i > 0_) {_                    typeTable[--i] = u + 6_ _                    typeTable[--i] = readUnsignedShort(u + 8)_ _                    typeTable[--i] = readUnsignedShort(u)_ _                    u += 10__                }_            }_            u = varTable + 2__            for (int i = readUnsignedShort(varTable)_ i > 0_ --i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                int index = readUnsignedShort(u + 8)__                String vsignature = null__                if (typeTable != null) {_                    for (int j = 0_ j < typeTable.length_ j += 3) {_                        if (typeTable[j] == start && typeTable[j + 1] == index) {_                            vsignature = readUTF8(typeTable[j + 2], c)__                            break__                        }_                    }_                }_                mv.visitLocalVariable(readUTF8(u + 4, c), readUTF8(u + 6, c),_                        vsignature, labels[start], labels[start + length],_                        index)__                u += 10__            }_        }__        _        if (tanns != null) {_            for (int i = 0_ i < tanns.length_ ++i) {_                if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, tanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    true))__                }_            }_        }_        if (itanns != null) {_            for (int i = 0_ i < itanns.length_ ++i) {_                if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, itanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    false))__                }_            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        mv.visitMaxs(maxStack, maxLocals)__    };reads,the,bytecode,of,a,method,and,makes,the,given,visitor,visit,it,param,mv,the,visitor,that,must,visit,the,method,s,code,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,code,attribute,in,the,class,file;private,void,read,code,final,method,visitor,mv,final,context,context,int,u,byte,b,this,b,char,c,context,buffer,int,max,stack,read,unsigned,short,u,int,max,locals,read,unsigned,short,u,2,int,code,length,read,int,u,4,u,8,int,code,start,u,int,code,end,u,code,length,label,labels,context,labels,new,label,code,length,2,read,label,code,length,1,labels,while,u,code,end,int,offset,u,code,start,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,read,label,offset,read,short,u,1,labels,u,3,break,case,class,writer,read,label,offset,read,int,u,1,labels,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,8,read,int,u,4,1,i,0,i,read,label,offset,read,int,u,12,labels,u,4,u,12,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,4,i,0,i,read,label,offset,read,int,u,12,labels,u,8,u,8,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,for,int,i,read,unsigned,short,u,i,0,i,label,start,read,label,read,unsigned,short,u,2,labels,label,end,read,label,read,unsigned,short,u,4,labels,label,handler,read,label,read,unsigned,short,u,6,labels,string,type,read,utf8,items,read,unsigned,short,u,8,c,mv,visit,try,catch,block,start,end,handler,type,u,8,u,2,int,tanns,null,int,itanns,null,int,tann,0,int,itann,0,int,ntoff,1,int,nitoff,1,int,var,table,0,int,var,type,table,0,boolean,zip,true,boolean,unzip,context,flags,0,int,stack,map,0,int,stack,map,size,0,int,frame,count,0,context,frame,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,local,variable,table,equals,attr,name,if,context,flags,0,var,table,u,8,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,read,unsigned,short,v,12,if,labels,label,null,read,label,label,labels,status,label,debug,v,10,else,if,local,variable,type,table,equals,attr,name,var,type,table,u,8,else,if,line,number,table,equals,attr,name,if,context,flags,0,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,l,labels,label,while,l,line,0,if,l,next,null,l,next,new,label,l,l,next,l,line,read,unsigned,short,v,12,v,4,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,read,type,annotations,mv,context,u,8,true,ntoff,tanns,length,0,read,byte,tanns,0,0x43,1,read,unsigned,short,tanns,0,1,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,read,type,annotations,mv,context,u,8,false,nitoff,itanns,length,0,read,byte,itanns,0,0x43,1,read,unsigned,short,itanns,0,1,else,if,frames,stack,map,table,equals,attr,name,if,context,flags,0,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,if,frames,stack,map,equals,attr,name,if,context,flags,0,zip,false,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,for,int,j,0,j,context,attrs,length,j,if,context,attrs,j,type,equals,attr,name,attribute,attr,context,attrs,j,read,this,u,8,read,int,u,4,c,code,start,8,labels,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,if,frames,stack,map,0,frame,context,frame,offset,1,frame,mode,0,frame,local,count,0,frame,local,diff,0,frame,stack,count,0,frame,local,new,object,max,locals,frame,stack,new,object,max,stack,if,unzip,get,implicit,frame,context,for,int,i,stack,map,i,stack,map,stack,map,size,2,i,if,b,i,8,int,v,read,unsigned,short,i,1,if,v,0,v,code,length,if,b,code,start,v,0x,ff,opcodes,new,read,label,v,labels,u,code,start,while,u,code,end,int,offset,u,code,start,label,l,labels,offset,if,l,null,label,next,l,next,l,next,null,mv,visit,label,l,if,context,flags,0,l,line,0,mv,visit,line,number,l,line,l,while,next,null,mv,visit,line,number,next,line,l,next,next,next,while,frames,frame,null,frame,offset,offset,frame,offset,1,if,frame,offset,1,if,zip,unzip,mv,visit,frame,opcodes,frame,local,count,frame,local,frame,stack,count,frame,stack,else,mv,visit,frame,frame,mode,frame,local,diff,frame,local,frame,stack,count,frame,stack,if,frame,count,0,stack,map,read,frame,stack,map,zip,unzip,frame,frame,count,else,frame,null,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,mv,visit,insn,opcode,u,1,break,case,class,writer,if,opcode,opcodes,istore,opcode,59,mv,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,else,opcode,26,mv,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,u,1,break,case,class,writer,mv,visit,jump,insn,opcode,labels,offset,read,short,u,1,u,3,break,case,class,writer,mv,visit,jump,insn,opcode,33,labels,offset,read,int,u,1,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,mv,visit,iinc,insn,read,unsigned,short,u,2,read,short,u,4,u,6,else,mv,visit,var,insn,opcode,read,unsigned,short,u,2,u,4,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,min,read,int,u,4,int,max,read,int,u,8,label,table,new,label,max,min,1,u,12,for,int,i,0,i,table,length,i,table,i,labels,offset,read,int,u,u,4,mv,visit,table,switch,insn,min,max,labels,label,table,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,len,read,int,u,4,int,keys,new,int,len,label,values,new,label,len,u,8,for,int,i,0,i,len,i,keys,i,read,int,u,values,i,labels,offset,read,int,u,4,u,8,mv,visit,lookup,switch,insn,labels,label,keys,values,break,case,class,writer,mv,visit,var,insn,opcode,b,u,1,0x,ff,u,2,break,case,class,writer,mv,visit,int,insn,opcode,b,u,1,u,2,break,case,class,writer,mv,visit,int,insn,opcode,read,short,u,1,u,3,break,case,class,writer,mv,visit,ldc,insn,read,const,b,u,1,0x,ff,c,u,2,break,case,class,writer,mv,visit,ldc,insn,read,const,read,unsigned,short,u,1,c,u,3,break,case,class,writer,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,iowner,read,class,cp,index,c,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,if,opcode,opcodes,invokevirtual,mv,visit,field,insn,opcode,iowner,iname,idesc,else,mv,visit,method,insn,opcode,iowner,iname,idesc,itf,if,opcode,opcodes,invokeinterface,u,5,else,u,3,break,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,int,bsm,index,context,bootstrap,methods,read,unsigned,short,cp,index,handle,bsm,handle,read,const,read,unsigned,short,bsm,index,c,int,bsm,arg,count,read,unsigned,short,bsm,index,2,object,bsm,args,new,object,bsm,arg,count,bsm,index,4,for,int,i,0,i,bsm,arg,count,i,bsm,args,i,read,const,read,unsigned,short,bsm,index,c,bsm,index,2,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,mv,visit,invoke,dynamic,insn,iname,idesc,bsm,bsm,args,u,5,break,case,class,writer,mv,visit,type,insn,opcode,read,class,u,1,c,u,3,break,case,class,writer,mv,visit,iinc,insn,b,u,1,0x,ff,b,u,2,u,3,break,default,mv,visit,multi,anew,array,insn,read,class,u,1,c,b,u,3,0x,ff,u,4,break,while,tanns,null,tann,tanns,length,ntoff,offset,if,ntoff,offset,int,v,read,annotation,target,context,tanns,tann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,ntoff,tann,tanns,length,read,byte,tanns,tann,0x43,1,read,unsigned,short,tanns,tann,1,while,itanns,null,itann,itanns,length,nitoff,offset,if,nitoff,offset,int,v,read,annotation,target,context,itanns,itann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,nitoff,itann,itanns,length,read,byte,itanns,itann,0x43,1,read,unsigned,short,itanns,itann,1,if,labels,code,length,null,mv,visit,label,labels,code,length,if,context,flags,0,var,table,0,int,type,table,null,if,var,type,table,0,u,var,type,table,2,type,table,new,int,read,unsigned,short,var,type,table,3,for,int,i,type,table,length,i,0,type,table,i,u,6,type,table,i,read,unsigned,short,u,8,type,table,i,read,unsigned,short,u,u,10,u,var,table,2,for,int,i,read,unsigned,short,var,table,i,0,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,int,index,read,unsigned,short,u,8,string,vsignature,null,if,type,table,null,for,int,j,0,j,type,table,length,j,3,if,type,table,j,start,type,table,j,1,index,vsignature,read,utf8,type,table,j,2,c,break,mv,visit,local,variable,read,utf8,u,4,c,read,utf8,u,6,c,vsignature,labels,start,labels,start,length,index,u,10,if,tanns,null,for,int,i,0,i,tanns,length,i,if,read,byte,tanns,i,1,0x40,1,int,v,read,annotation,target,context,tanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,true,if,itanns,null,for,int,i,0,i,itanns,length,i,if,read,byte,itanns,i,1,0x40,1,int,v,read,annotation,target,context,itanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,mv,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(final MethodVisitor mv, final Context context, int u);1457705343;Reads the bytecode of a method and makes the given visitor visit it.__@param mv_the visitor that must visit the method's code._@param context_information about the class being parsed._@param u_the start offset of the code attribute in the class file.;private void readCode(final MethodVisitor mv, final Context context, int u) {_        _        byte[] b = this.b__        char[] c = context.buffer__        int maxStack = readUnsignedShort(u)__        int maxLocals = readUnsignedShort(u + 2)__        int codeLength = readInt(u + 4)__        u += 8___        _        int codeStart = u__        int codeEnd = u + codeLength__        Label[] labels = context.labels = new Label[codeLength + 2]__        readLabel(codeLength + 1, labels)__        while (u < codeEnd) {_            int offset = u - codeStart__            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                readLabel(offset + readShort(u + 1), labels)__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                readLabel(offset + readInt(u + 1), labels)__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    u += 6__                } else {_                    u += 4__                }_                break__            case ClassWriter.TABL_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 8) - readInt(u + 4) + 1_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 4__                }_                u += 12__                break__            case ClassWriter.LOOK_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 4)_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 8__                }_                u += 8__                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                u += 5__                break__            _            default:_                u += 4__                break__            }_        }__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            Label start = readLabel(readUnsignedShort(u + 2), labels)__            Label end = readLabel(readUnsignedShort(u + 4), labels)__            Label handler = readLabel(readUnsignedShort(u + 6), labels)__            String type = readUTF8(items[readUnsignedShort(u + 8)], c)__            mv.visitTryCatchBlock(start, end, handler, type)__            u += 8__        }_        u += 2___        _        int[] tanns = null_ _        int[] itanns = null_ _        int tann = 0_ _        int itann = 0_ _        int ntoff = -1_ _        int nitoff = -1_ _        int varTable = 0__        int varTypeTable = 0__        boolean zip = true__        boolean unzip = (context.flags & EXPAND_FRAMES) != 0__        int stackMap = 0__        int stackMapSize = 0__        int frameCount = 0__        Context frame = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("LocalVariableTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    varTable = u + 8__                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        label += readUnsignedShort(v + 12)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        v += 10__                    }_                }_            } else if ("LocalVariableTypeTable".equals(attrName)) {_                varTypeTable = u + 8__            } else if ("LineNumberTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        Label l = labels[label]__                        while (l.line > 0) {_                            if (l.next == null) {_                                l.next = new Label()__                            }_                            l = l.next__                        }_                        l.line = readUnsignedShort(v + 12)__                        v += 4__                    }_                }_            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = readTypeAnnotations(mv, context, u + 8, true)__                ntoff = tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1_                        : readUnsignedShort(tanns[0] + 1)__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = readTypeAnnotations(mv, context, u + 8, false)__                nitoff = itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1_                        : readUnsignedShort(itanns[0] + 1)__            } else if (FRAMES && "StackMapTable".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _                _            } else if (FRAMES && "StackMap".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    zip = false__                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _            } else {_                for (int j = 0_ j < context.attrs.length_ ++j) {_                    if (context.attrs[j].type.equals(attrName)) {_                        Attribute attr = context.attrs[j].read(this, u + 8,_                                readInt(u + 4), c, codeStart - 8, labels)__                        if (attr != null) {_                            attr.next = attributes__                            attributes = attr__                        }_                    }_                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        if (FRAMES && stackMap != 0) {_            _            frame = context__            frame.offset = -1__            frame.mode = 0__            frame.localCount = 0__            frame.localDiff = 0__            frame.stackCount = 0__            frame.local = new Object[maxLocals]__            frame.stack = new Object[maxStack]__            if (unzip) {_                getImplicitFrame(context)__            }_            _            for (int i = stackMap_ i < stackMap + stackMapSize - 2_ ++i) {_                if (b[i] == 8) { _                    int v = readUnsignedShort(i + 1)__                    if (v >= 0 && v < codeLength) {_                        if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {_                            readLabel(v, labels)__                        }_                    }_                }_            }_        }__        _        u = codeStart__        while (u < codeEnd) {_            int offset = u - codeStart___            _            Label l = labels[offset]__            if (l != null) {_                Label next = l.next__                l.next = null__                mv.visitLabel(l)__                if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {_                    mv.visitLineNumber(l.line, l)__                    while (next != null) {_                        mv.visitLineNumber(next.line, l)__                        next = next.next__                    }_                }_            }__            _            while (FRAMES && frame != null_                    && (frame.offset == offset || frame.offset == -1)) {_                _                _                if (frame.offset != -1) {_                    if (!zip || unzip) {_                        mv.visitFrame(Opcodes.F_NEW, frame.localCount,_                                frame.local, frame.stackCount, frame.stack)__                    } else {_                        mv.visitFrame(frame.mode, frame.localDiff, frame.local,_                                frame.stackCount, frame.stack)__                    }_                }_                if (frameCount > 0) {_                    stackMap = readFrame(stackMap, zip, unzip, frame)__                    --frameCount__                } else {_                    frame = null__                }_            }__            _            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_                mv.visitInsn(opcode)__                u += 1__                break__            case ClassWriter.IMPLVAR_INSN:_                if (opcode > Opcodes.ISTORE) {_                    opcode -= 59_ _                    mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),_                            opcode & 0x3)__                } else {_                    opcode -= 26_ _                    mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__                }_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                mv.visitJumpInsn(opcode, labels[offset + readShort(u + 1)])__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                mv.visitJumpInsn(opcode - 33, labels[offset + readInt(u + 1)])__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    mv.visitIincInsn(readUnsignedShort(u + 2), readShort(u + 4))__                    u += 6__                } else {_                    mv.visitVarInsn(opcode, readUnsignedShort(u + 2))__                    u += 4__                }_                break__            case ClassWriter.TABL_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int min = readInt(u + 4)__                int max = readInt(u + 8)__                Label[] table = new Label[max - min + 1]__                u += 12__                for (int i = 0_ i < table.length_ ++i) {_                    table[i] = labels[offset + readInt(u)]__                    u += 4__                }_                mv.visitTableSwitchInsn(min, max, labels[label], table)__                break__            }_            case ClassWriter.LOOK_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int len = readInt(u + 4)__                int[] keys = new int[len]__                Label[] values = new Label[len]__                u += 8__                for (int i = 0_ i < len_ ++i) {_                    keys[i] = readInt(u)__                    values[i] = labels[offset + readInt(u + 4)]__                    u += 8__                }_                mv.visitLookupSwitchInsn(labels[label], keys, values)__                break__            }_            case ClassWriter.VAR_INSN:_                mv.visitVarInsn(opcode, b[u + 1] & 0xFF)__                u += 2__                break__            case ClassWriter.SBYTE_INSN:_                mv.visitIntInsn(opcode, b[u + 1])__                u += 2__                break__            case ClassWriter.SHORT_INSN:_                mv.visitIntInsn(opcode, readShort(u + 1))__                u += 3__                break__            case ClassWriter.LDC_INSN:_                mv.visitLdcInsn(readConst(b[u + 1] & 0xFF, c))__                u += 2__                break__            case ClassWriter.LDCW_INSN:_                mv.visitLdcInsn(readConst(readUnsignedShort(u + 1), c))__                u += 3__                break__            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.ITFMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__                String iowner = readClass(cpIndex, c)__                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                if (opcode < Opcodes.INVOKEVIRTUAL) {_                    mv.visitFieldInsn(opcode, iowner, iname, idesc)__                } else {_                    mv.visitMethodInsn(opcode, iowner, iname, idesc, itf)__                }_                if (opcode == Opcodes.INVOKEINTERFACE) {_                    u += 5__                } else {_                    u += 3__                }_                break__            }_            case ClassWriter.INDYMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                int bsmIndex = context.bootstrapMethods[readUnsignedShort(cpIndex)]__                Handle bsm = (Handle) readConst(readUnsignedShort(bsmIndex), c)__                int bsmArgCount = readUnsignedShort(bsmIndex + 2)__                Object[] bsmArgs = new Object[bsmArgCount]__                bsmIndex += 4__                for (int i = 0_ i < bsmArgCount_ i++) {_                    bsmArgs[i] = readConst(readUnsignedShort(bsmIndex), c)__                    bsmIndex += 2__                }_                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                mv.visitInvokeDynamicInsn(iname, idesc, bsm, bsmArgs)__                u += 5__                break__            }_            case ClassWriter.TYPE_INSN:_                mv.visitTypeInsn(opcode, readClass(u + 1, c))__                u += 3__                break__            case ClassWriter.IINC_INSN:_                mv.visitIincInsn(b[u + 1] & 0xFF, b[u + 2])__                u += 3__                break__            _            default:_                mv.visitMultiANewArrayInsn(readClass(u + 1, c), b[u + 3] & 0xFF)__                u += 4__                break__            }__            _            while (tanns != null && tann < tanns.length && ntoff <= offset) {_                if (ntoff == offset) {_                    int v = readAnnotationTarget(context, tanns[tann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), true))__                }_                ntoff = ++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1_                        : readUnsignedShort(tanns[tann] + 1)__            }_            while (itanns != null && itann < itanns.length && nitoff <= offset) {_                if (nitoff == offset) {_                    int v = readAnnotationTarget(context, itanns[itann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), false))__                }_                nitoff = ++itann >= itanns.length_                        || readByte(itanns[itann]) < 0x43 ? -1_                        : readUnsignedShort(itanns[itann] + 1)__            }_        }_        if (labels[codeLength] != null) {_            mv.visitLabel(labels[codeLength])__        }__        _        if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {_            int[] typeTable = null__            if (varTypeTable != 0) {_                u = varTypeTable + 2__                typeTable = new int[readUnsignedShort(varTypeTable) * 3]__                for (int i = typeTable.length_ i > 0_) {_                    typeTable[--i] = u + 6_ _                    typeTable[--i] = readUnsignedShort(u + 8)_ _                    typeTable[--i] = readUnsignedShort(u)_ _                    u += 10__                }_            }_            u = varTable + 2__            for (int i = readUnsignedShort(varTable)_ i > 0_ --i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                int index = readUnsignedShort(u + 8)__                String vsignature = null__                if (typeTable != null) {_                    for (int j = 0_ j < typeTable.length_ j += 3) {_                        if (typeTable[j] == start && typeTable[j + 1] == index) {_                            vsignature = readUTF8(typeTable[j + 2], c)__                            break__                        }_                    }_                }_                mv.visitLocalVariable(readUTF8(u + 4, c), readUTF8(u + 6, c),_                        vsignature, labels[start], labels[start + length],_                        index)__                u += 10__            }_        }__        _        if (tanns != null) {_            for (int i = 0_ i < tanns.length_ ++i) {_                if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, tanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    true))__                }_            }_        }_        if (itanns != null) {_            for (int i = 0_ i < itanns.length_ ++i) {_                if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, itanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    false))__                }_            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        mv.visitMaxs(maxStack, maxLocals)__    };reads,the,bytecode,of,a,method,and,makes,the,given,visitor,visit,it,param,mv,the,visitor,that,must,visit,the,method,s,code,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,code,attribute,in,the,class,file;private,void,read,code,final,method,visitor,mv,final,context,context,int,u,byte,b,this,b,char,c,context,buffer,int,max,stack,read,unsigned,short,u,int,max,locals,read,unsigned,short,u,2,int,code,length,read,int,u,4,u,8,int,code,start,u,int,code,end,u,code,length,label,labels,context,labels,new,label,code,length,2,read,label,code,length,1,labels,while,u,code,end,int,offset,u,code,start,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,read,label,offset,read,short,u,1,labels,u,3,break,case,class,writer,read,label,offset,read,int,u,1,labels,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,8,read,int,u,4,1,i,0,i,read,label,offset,read,int,u,12,labels,u,4,u,12,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,4,i,0,i,read,label,offset,read,int,u,12,labels,u,8,u,8,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,for,int,i,read,unsigned,short,u,i,0,i,label,start,read,label,read,unsigned,short,u,2,labels,label,end,read,label,read,unsigned,short,u,4,labels,label,handler,read,label,read,unsigned,short,u,6,labels,string,type,read,utf8,items,read,unsigned,short,u,8,c,mv,visit,try,catch,block,start,end,handler,type,u,8,u,2,int,tanns,null,int,itanns,null,int,tann,0,int,itann,0,int,ntoff,1,int,nitoff,1,int,var,table,0,int,var,type,table,0,boolean,zip,true,boolean,unzip,context,flags,0,int,stack,map,0,int,stack,map,size,0,int,frame,count,0,context,frame,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,local,variable,table,equals,attr,name,if,context,flags,0,var,table,u,8,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,read,unsigned,short,v,12,if,labels,label,null,read,label,label,labels,status,label,debug,v,10,else,if,local,variable,type,table,equals,attr,name,var,type,table,u,8,else,if,line,number,table,equals,attr,name,if,context,flags,0,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,l,labels,label,while,l,line,0,if,l,next,null,l,next,new,label,l,l,next,l,line,read,unsigned,short,v,12,v,4,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,read,type,annotations,mv,context,u,8,true,ntoff,tanns,length,0,read,byte,tanns,0,0x43,1,read,unsigned,short,tanns,0,1,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,read,type,annotations,mv,context,u,8,false,nitoff,itanns,length,0,read,byte,itanns,0,0x43,1,read,unsigned,short,itanns,0,1,else,if,frames,stack,map,table,equals,attr,name,if,context,flags,0,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,if,frames,stack,map,equals,attr,name,if,context,flags,0,zip,false,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,for,int,j,0,j,context,attrs,length,j,if,context,attrs,j,type,equals,attr,name,attribute,attr,context,attrs,j,read,this,u,8,read,int,u,4,c,code,start,8,labels,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,if,frames,stack,map,0,frame,context,frame,offset,1,frame,mode,0,frame,local,count,0,frame,local,diff,0,frame,stack,count,0,frame,local,new,object,max,locals,frame,stack,new,object,max,stack,if,unzip,get,implicit,frame,context,for,int,i,stack,map,i,stack,map,stack,map,size,2,i,if,b,i,8,int,v,read,unsigned,short,i,1,if,v,0,v,code,length,if,b,code,start,v,0x,ff,opcodes,new,read,label,v,labels,u,code,start,while,u,code,end,int,offset,u,code,start,label,l,labels,offset,if,l,null,label,next,l,next,l,next,null,mv,visit,label,l,if,context,flags,0,l,line,0,mv,visit,line,number,l,line,l,while,next,null,mv,visit,line,number,next,line,l,next,next,next,while,frames,frame,null,frame,offset,offset,frame,offset,1,if,frame,offset,1,if,zip,unzip,mv,visit,frame,opcodes,frame,local,count,frame,local,frame,stack,count,frame,stack,else,mv,visit,frame,frame,mode,frame,local,diff,frame,local,frame,stack,count,frame,stack,if,frame,count,0,stack,map,read,frame,stack,map,zip,unzip,frame,frame,count,else,frame,null,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,mv,visit,insn,opcode,u,1,break,case,class,writer,if,opcode,opcodes,istore,opcode,59,mv,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,else,opcode,26,mv,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,u,1,break,case,class,writer,mv,visit,jump,insn,opcode,labels,offset,read,short,u,1,u,3,break,case,class,writer,mv,visit,jump,insn,opcode,33,labels,offset,read,int,u,1,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,mv,visit,iinc,insn,read,unsigned,short,u,2,read,short,u,4,u,6,else,mv,visit,var,insn,opcode,read,unsigned,short,u,2,u,4,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,min,read,int,u,4,int,max,read,int,u,8,label,table,new,label,max,min,1,u,12,for,int,i,0,i,table,length,i,table,i,labels,offset,read,int,u,u,4,mv,visit,table,switch,insn,min,max,labels,label,table,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,len,read,int,u,4,int,keys,new,int,len,label,values,new,label,len,u,8,for,int,i,0,i,len,i,keys,i,read,int,u,values,i,labels,offset,read,int,u,4,u,8,mv,visit,lookup,switch,insn,labels,label,keys,values,break,case,class,writer,mv,visit,var,insn,opcode,b,u,1,0x,ff,u,2,break,case,class,writer,mv,visit,int,insn,opcode,b,u,1,u,2,break,case,class,writer,mv,visit,int,insn,opcode,read,short,u,1,u,3,break,case,class,writer,mv,visit,ldc,insn,read,const,b,u,1,0x,ff,c,u,2,break,case,class,writer,mv,visit,ldc,insn,read,const,read,unsigned,short,u,1,c,u,3,break,case,class,writer,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,iowner,read,class,cp,index,c,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,if,opcode,opcodes,invokevirtual,mv,visit,field,insn,opcode,iowner,iname,idesc,else,mv,visit,method,insn,opcode,iowner,iname,idesc,itf,if,opcode,opcodes,invokeinterface,u,5,else,u,3,break,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,int,bsm,index,context,bootstrap,methods,read,unsigned,short,cp,index,handle,bsm,handle,read,const,read,unsigned,short,bsm,index,c,int,bsm,arg,count,read,unsigned,short,bsm,index,2,object,bsm,args,new,object,bsm,arg,count,bsm,index,4,for,int,i,0,i,bsm,arg,count,i,bsm,args,i,read,const,read,unsigned,short,bsm,index,c,bsm,index,2,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,mv,visit,invoke,dynamic,insn,iname,idesc,bsm,bsm,args,u,5,break,case,class,writer,mv,visit,type,insn,opcode,read,class,u,1,c,u,3,break,case,class,writer,mv,visit,iinc,insn,b,u,1,0x,ff,b,u,2,u,3,break,default,mv,visit,multi,anew,array,insn,read,class,u,1,c,b,u,3,0x,ff,u,4,break,while,tanns,null,tann,tanns,length,ntoff,offset,if,ntoff,offset,int,v,read,annotation,target,context,tanns,tann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,ntoff,tann,tanns,length,read,byte,tanns,tann,0x43,1,read,unsigned,short,tanns,tann,1,while,itanns,null,itann,itanns,length,nitoff,offset,if,nitoff,offset,int,v,read,annotation,target,context,itanns,itann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,nitoff,itann,itanns,length,read,byte,itanns,itann,0x43,1,read,unsigned,short,itanns,itann,1,if,labels,code,length,null,mv,visit,label,labels,code,length,if,context,flags,0,var,table,0,int,type,table,null,if,var,type,table,0,u,var,type,table,2,type,table,new,int,read,unsigned,short,var,type,table,3,for,int,i,type,table,length,i,0,type,table,i,u,6,type,table,i,read,unsigned,short,u,8,type,table,i,read,unsigned,short,u,u,10,u,var,table,2,for,int,i,read,unsigned,short,var,table,i,0,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,int,index,read,unsigned,short,u,8,string,vsignature,null,if,type,table,null,for,int,j,0,j,type,table,length,j,3,if,type,table,j,start,type,table,j,1,index,vsignature,read,utf8,type,table,j,2,c,break,mv,visit,local,variable,read,utf8,u,4,c,read,utf8,u,6,c,vsignature,labels,start,labels,start,length,index,u,10,if,tanns,null,for,int,i,0,i,tanns,length,i,if,read,byte,tanns,i,1,0x40,1,int,v,read,annotation,target,context,tanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,true,if,itanns,null,for,int,i,0,i,itanns,length,i,if,read,byte,itanns,i,1,0x40,1,int,v,read,annotation,target,context,itanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,mv,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(final MethodVisitor mv, final Context context, int u);1459258703;Reads the bytecode of a method and makes the given visitor visit it.__@param mv_the visitor that must visit the method's code._@param context_information about the class being parsed._@param u_the start offset of the code attribute in the class file.;private void readCode(final MethodVisitor mv, final Context context, int u) {_        _        byte[] b = this.b__        char[] c = context.buffer__        int maxStack = readUnsignedShort(u)__        int maxLocals = readUnsignedShort(u + 2)__        int codeLength = readInt(u + 4)__        u += 8___        _        int codeStart = u__        int codeEnd = u + codeLength__        Label[] labels = context.labels = new Label[codeLength + 2]__        readLabel(codeLength + 1, labels)__        while (u < codeEnd) {_            int offset = u - codeStart__            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                readLabel(offset + readShort(u + 1), labels)__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                readLabel(offset + readInt(u + 1), labels)__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    u += 6__                } else {_                    u += 4__                }_                break__            case ClassWriter.TABL_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 8) - readInt(u + 4) + 1_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 4__                }_                u += 12__                break__            case ClassWriter.LOOK_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 4)_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 8__                }_                u += 8__                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                u += 5__                break__            _            default:_                u += 4__                break__            }_        }__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            Label start = readLabel(readUnsignedShort(u + 2), labels)__            Label end = readLabel(readUnsignedShort(u + 4), labels)__            Label handler = readLabel(readUnsignedShort(u + 6), labels)__            String type = readUTF8(items[readUnsignedShort(u + 8)], c)__            mv.visitTryCatchBlock(start, end, handler, type)__            u += 8__        }_        u += 2___        _        int[] tanns = null_ _        int[] itanns = null_ _        int tann = 0_ _        int itann = 0_ _        int ntoff = -1_ _        int nitoff = -1_ _        int varTable = 0__        int varTypeTable = 0__        boolean zip = true__        boolean unzip = (context.flags & EXPAND_FRAMES) != 0__        int stackMap = 0__        int stackMapSize = 0__        int frameCount = 0__        Context frame = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("LocalVariableTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    varTable = u + 8__                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        label += readUnsignedShort(v + 12)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        v += 10__                    }_                }_            } else if ("LocalVariableTypeTable".equals(attrName)) {_                varTypeTable = u + 8__            } else if ("LineNumberTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        Label l = labels[label]__                        while (l.line > 0) {_                            if (l.next == null) {_                                l.next = new Label()__                            }_                            l = l.next__                        }_                        l.line = readUnsignedShort(v + 12)__                        v += 4__                    }_                }_            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = readTypeAnnotations(mv, context, u + 8, true)__                ntoff = tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1_                        : readUnsignedShort(tanns[0] + 1)__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = readTypeAnnotations(mv, context, u + 8, false)__                nitoff = itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1_                        : readUnsignedShort(itanns[0] + 1)__            } else if (FRAMES && "StackMapTable".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _                _            } else if (FRAMES && "StackMap".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    zip = false__                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _            } else {_                for (int j = 0_ j < context.attrs.length_ ++j) {_                    if (context.attrs[j].type.equals(attrName)) {_                        Attribute attr = context.attrs[j].read(this, u + 8,_                                readInt(u + 4), c, codeStart - 8, labels)__                        if (attr != null) {_                            attr.next = attributes__                            attributes = attr__                        }_                    }_                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        if (FRAMES && stackMap != 0) {_            _            frame = context__            frame.offset = -1__            frame.mode = 0__            frame.localCount = 0__            frame.localDiff = 0__            frame.stackCount = 0__            frame.local = new Object[maxLocals]__            frame.stack = new Object[maxStack]__            if (unzip) {_                getImplicitFrame(context)__            }_            _            for (int i = stackMap_ i < stackMap + stackMapSize - 2_ ++i) {_                if (b[i] == 8) { _                    int v = readUnsignedShort(i + 1)__                    if (v >= 0 && v < codeLength) {_                        if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {_                            readLabel(v, labels)__                        }_                    }_                }_            }_        }__        _        u = codeStart__        while (u < codeEnd) {_            int offset = u - codeStart___            _            Label l = labels[offset]__            if (l != null) {_                Label next = l.next__                l.next = null__                mv.visitLabel(l)__                if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {_                    mv.visitLineNumber(l.line, l)__                    while (next != null) {_                        mv.visitLineNumber(next.line, l)__                        next = next.next__                    }_                }_            }__            _            while (FRAMES && frame != null_                    && (frame.offset == offset || frame.offset == -1)) {_                _                _                if (frame.offset != -1) {_                    if (!zip || unzip) {_                        mv.visitFrame(Opcodes.F_NEW, frame.localCount,_                                frame.local, frame.stackCount, frame.stack)__                    } else {_                        mv.visitFrame(frame.mode, frame.localDiff, frame.local,_                                frame.stackCount, frame.stack)__                    }_                }_                if (frameCount > 0) {_                    stackMap = readFrame(stackMap, zip, unzip, frame)__                    --frameCount__                } else {_                    frame = null__                }_            }__            _            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_                mv.visitInsn(opcode)__                u += 1__                break__            case ClassWriter.IMPLVAR_INSN:_                if (opcode > Opcodes.ISTORE) {_                    opcode -= 59_ _                    mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),_                            opcode & 0x3)__                } else {_                    opcode -= 26_ _                    mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__                }_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                mv.visitJumpInsn(opcode, labels[offset + readShort(u + 1)])__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                mv.visitJumpInsn(opcode - 33, labels[offset + readInt(u + 1)])__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    mv.visitIincInsn(readUnsignedShort(u + 2), readShort(u + 4))__                    u += 6__                } else {_                    mv.visitVarInsn(opcode, readUnsignedShort(u + 2))__                    u += 4__                }_                break__            case ClassWriter.TABL_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int min = readInt(u + 4)__                int max = readInt(u + 8)__                Label[] table = new Label[max - min + 1]__                u += 12__                for (int i = 0_ i < table.length_ ++i) {_                    table[i] = labels[offset + readInt(u)]__                    u += 4__                }_                mv.visitTableSwitchInsn(min, max, labels[label], table)__                break__            }_            case ClassWriter.LOOK_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int len = readInt(u + 4)__                int[] keys = new int[len]__                Label[] values = new Label[len]__                u += 8__                for (int i = 0_ i < len_ ++i) {_                    keys[i] = readInt(u)__                    values[i] = labels[offset + readInt(u + 4)]__                    u += 8__                }_                mv.visitLookupSwitchInsn(labels[label], keys, values)__                break__            }_            case ClassWriter.VAR_INSN:_                mv.visitVarInsn(opcode, b[u + 1] & 0xFF)__                u += 2__                break__            case ClassWriter.SBYTE_INSN:_                mv.visitIntInsn(opcode, b[u + 1])__                u += 2__                break__            case ClassWriter.SHORT_INSN:_                mv.visitIntInsn(opcode, readShort(u + 1))__                u += 3__                break__            case ClassWriter.LDC_INSN:_                mv.visitLdcInsn(readConst(b[u + 1] & 0xFF, c))__                u += 2__                break__            case ClassWriter.LDCW_INSN:_                mv.visitLdcInsn(readConst(readUnsignedShort(u + 1), c))__                u += 3__                break__            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.ITFMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__                String iowner = readClass(cpIndex, c)__                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                if (opcode < Opcodes.INVOKEVIRTUAL) {_                    mv.visitFieldInsn(opcode, iowner, iname, idesc)__                } else {_                    mv.visitMethodInsn(opcode, iowner, iname, idesc, itf)__                }_                if (opcode == Opcodes.INVOKEINTERFACE) {_                    u += 5__                } else {_                    u += 3__                }_                break__            }_            case ClassWriter.INDYMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                int bsmIndex = context.bootstrapMethods[readUnsignedShort(cpIndex)]__                Handle bsm = (Handle) readConst(readUnsignedShort(bsmIndex), c)__                int bsmArgCount = readUnsignedShort(bsmIndex + 2)__                Object[] bsmArgs = new Object[bsmArgCount]__                bsmIndex += 4__                for (int i = 0_ i < bsmArgCount_ i++) {_                    bsmArgs[i] = readConst(readUnsignedShort(bsmIndex), c)__                    bsmIndex += 2__                }_                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                mv.visitInvokeDynamicInsn(iname, idesc, bsm, bsmArgs)__                u += 5__                break__            }_            case ClassWriter.TYPE_INSN:_                mv.visitTypeInsn(opcode, readClass(u + 1, c))__                u += 3__                break__            case ClassWriter.IINC_INSN:_                mv.visitIincInsn(b[u + 1] & 0xFF, b[u + 2])__                u += 3__                break__            _            default:_                mv.visitMultiANewArrayInsn(readClass(u + 1, c), b[u + 3] & 0xFF)__                u += 4__                break__            }__            _            while (tanns != null && tann < tanns.length && ntoff <= offset) {_                if (ntoff == offset) {_                    int v = readAnnotationTarget(context, tanns[tann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), true))__                }_                ntoff = ++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1_                        : readUnsignedShort(tanns[tann] + 1)__            }_            while (itanns != null && itann < itanns.length && nitoff <= offset) {_                if (nitoff == offset) {_                    int v = readAnnotationTarget(context, itanns[itann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), false))__                }_                nitoff = ++itann >= itanns.length_                        || readByte(itanns[itann]) < 0x43 ? -1_                        : readUnsignedShort(itanns[itann] + 1)__            }_        }_        if (labels[codeLength] != null) {_            mv.visitLabel(labels[codeLength])__        }__        _        if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {_            int[] typeTable = null__            if (varTypeTable != 0) {_                u = varTypeTable + 2__                typeTable = new int[readUnsignedShort(varTypeTable) * 3]__                for (int i = typeTable.length_ i > 0_) {_                    typeTable[--i] = u + 6_ _                    typeTable[--i] = readUnsignedShort(u + 8)_ _                    typeTable[--i] = readUnsignedShort(u)_ _                    u += 10__                }_            }_            u = varTable + 2__            for (int i = readUnsignedShort(varTable)_ i > 0_ --i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                int index = readUnsignedShort(u + 8)__                String vsignature = null__                if (typeTable != null) {_                    for (int j = 0_ j < typeTable.length_ j += 3) {_                        if (typeTable[j] == start && typeTable[j + 1] == index) {_                            vsignature = readUTF8(typeTable[j + 2], c)__                            break__                        }_                    }_                }_                mv.visitLocalVariable(readUTF8(u + 4, c), readUTF8(u + 6, c),_                        vsignature, labels[start], labels[start + length],_                        index)__                u += 10__            }_        }__        _        if (tanns != null) {_            for (int i = 0_ i < tanns.length_ ++i) {_                if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, tanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    true))__                }_            }_        }_        if (itanns != null) {_            for (int i = 0_ i < itanns.length_ ++i) {_                if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, itanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    false))__                }_            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        mv.visitMaxs(maxStack, maxLocals)__    };reads,the,bytecode,of,a,method,and,makes,the,given,visitor,visit,it,param,mv,the,visitor,that,must,visit,the,method,s,code,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,code,attribute,in,the,class,file;private,void,read,code,final,method,visitor,mv,final,context,context,int,u,byte,b,this,b,char,c,context,buffer,int,max,stack,read,unsigned,short,u,int,max,locals,read,unsigned,short,u,2,int,code,length,read,int,u,4,u,8,int,code,start,u,int,code,end,u,code,length,label,labels,context,labels,new,label,code,length,2,read,label,code,length,1,labels,while,u,code,end,int,offset,u,code,start,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,read,label,offset,read,short,u,1,labels,u,3,break,case,class,writer,read,label,offset,read,int,u,1,labels,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,8,read,int,u,4,1,i,0,i,read,label,offset,read,int,u,12,labels,u,4,u,12,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,4,i,0,i,read,label,offset,read,int,u,12,labels,u,8,u,8,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,for,int,i,read,unsigned,short,u,i,0,i,label,start,read,label,read,unsigned,short,u,2,labels,label,end,read,label,read,unsigned,short,u,4,labels,label,handler,read,label,read,unsigned,short,u,6,labels,string,type,read,utf8,items,read,unsigned,short,u,8,c,mv,visit,try,catch,block,start,end,handler,type,u,8,u,2,int,tanns,null,int,itanns,null,int,tann,0,int,itann,0,int,ntoff,1,int,nitoff,1,int,var,table,0,int,var,type,table,0,boolean,zip,true,boolean,unzip,context,flags,0,int,stack,map,0,int,stack,map,size,0,int,frame,count,0,context,frame,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,local,variable,table,equals,attr,name,if,context,flags,0,var,table,u,8,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,read,unsigned,short,v,12,if,labels,label,null,read,label,label,labels,status,label,debug,v,10,else,if,local,variable,type,table,equals,attr,name,var,type,table,u,8,else,if,line,number,table,equals,attr,name,if,context,flags,0,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,l,labels,label,while,l,line,0,if,l,next,null,l,next,new,label,l,l,next,l,line,read,unsigned,short,v,12,v,4,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,read,type,annotations,mv,context,u,8,true,ntoff,tanns,length,0,read,byte,tanns,0,0x43,1,read,unsigned,short,tanns,0,1,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,read,type,annotations,mv,context,u,8,false,nitoff,itanns,length,0,read,byte,itanns,0,0x43,1,read,unsigned,short,itanns,0,1,else,if,frames,stack,map,table,equals,attr,name,if,context,flags,0,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,if,frames,stack,map,equals,attr,name,if,context,flags,0,zip,false,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,for,int,j,0,j,context,attrs,length,j,if,context,attrs,j,type,equals,attr,name,attribute,attr,context,attrs,j,read,this,u,8,read,int,u,4,c,code,start,8,labels,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,if,frames,stack,map,0,frame,context,frame,offset,1,frame,mode,0,frame,local,count,0,frame,local,diff,0,frame,stack,count,0,frame,local,new,object,max,locals,frame,stack,new,object,max,stack,if,unzip,get,implicit,frame,context,for,int,i,stack,map,i,stack,map,stack,map,size,2,i,if,b,i,8,int,v,read,unsigned,short,i,1,if,v,0,v,code,length,if,b,code,start,v,0x,ff,opcodes,new,read,label,v,labels,u,code,start,while,u,code,end,int,offset,u,code,start,label,l,labels,offset,if,l,null,label,next,l,next,l,next,null,mv,visit,label,l,if,context,flags,0,l,line,0,mv,visit,line,number,l,line,l,while,next,null,mv,visit,line,number,next,line,l,next,next,next,while,frames,frame,null,frame,offset,offset,frame,offset,1,if,frame,offset,1,if,zip,unzip,mv,visit,frame,opcodes,frame,local,count,frame,local,frame,stack,count,frame,stack,else,mv,visit,frame,frame,mode,frame,local,diff,frame,local,frame,stack,count,frame,stack,if,frame,count,0,stack,map,read,frame,stack,map,zip,unzip,frame,frame,count,else,frame,null,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,mv,visit,insn,opcode,u,1,break,case,class,writer,if,opcode,opcodes,istore,opcode,59,mv,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,else,opcode,26,mv,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,u,1,break,case,class,writer,mv,visit,jump,insn,opcode,labels,offset,read,short,u,1,u,3,break,case,class,writer,mv,visit,jump,insn,opcode,33,labels,offset,read,int,u,1,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,mv,visit,iinc,insn,read,unsigned,short,u,2,read,short,u,4,u,6,else,mv,visit,var,insn,opcode,read,unsigned,short,u,2,u,4,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,min,read,int,u,4,int,max,read,int,u,8,label,table,new,label,max,min,1,u,12,for,int,i,0,i,table,length,i,table,i,labels,offset,read,int,u,u,4,mv,visit,table,switch,insn,min,max,labels,label,table,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,len,read,int,u,4,int,keys,new,int,len,label,values,new,label,len,u,8,for,int,i,0,i,len,i,keys,i,read,int,u,values,i,labels,offset,read,int,u,4,u,8,mv,visit,lookup,switch,insn,labels,label,keys,values,break,case,class,writer,mv,visit,var,insn,opcode,b,u,1,0x,ff,u,2,break,case,class,writer,mv,visit,int,insn,opcode,b,u,1,u,2,break,case,class,writer,mv,visit,int,insn,opcode,read,short,u,1,u,3,break,case,class,writer,mv,visit,ldc,insn,read,const,b,u,1,0x,ff,c,u,2,break,case,class,writer,mv,visit,ldc,insn,read,const,read,unsigned,short,u,1,c,u,3,break,case,class,writer,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,iowner,read,class,cp,index,c,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,if,opcode,opcodes,invokevirtual,mv,visit,field,insn,opcode,iowner,iname,idesc,else,mv,visit,method,insn,opcode,iowner,iname,idesc,itf,if,opcode,opcodes,invokeinterface,u,5,else,u,3,break,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,int,bsm,index,context,bootstrap,methods,read,unsigned,short,cp,index,handle,bsm,handle,read,const,read,unsigned,short,bsm,index,c,int,bsm,arg,count,read,unsigned,short,bsm,index,2,object,bsm,args,new,object,bsm,arg,count,bsm,index,4,for,int,i,0,i,bsm,arg,count,i,bsm,args,i,read,const,read,unsigned,short,bsm,index,c,bsm,index,2,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,mv,visit,invoke,dynamic,insn,iname,idesc,bsm,bsm,args,u,5,break,case,class,writer,mv,visit,type,insn,opcode,read,class,u,1,c,u,3,break,case,class,writer,mv,visit,iinc,insn,b,u,1,0x,ff,b,u,2,u,3,break,default,mv,visit,multi,anew,array,insn,read,class,u,1,c,b,u,3,0x,ff,u,4,break,while,tanns,null,tann,tanns,length,ntoff,offset,if,ntoff,offset,int,v,read,annotation,target,context,tanns,tann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,ntoff,tann,tanns,length,read,byte,tanns,tann,0x43,1,read,unsigned,short,tanns,tann,1,while,itanns,null,itann,itanns,length,nitoff,offset,if,nitoff,offset,int,v,read,annotation,target,context,itanns,itann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,nitoff,itann,itanns,length,read,byte,itanns,itann,0x43,1,read,unsigned,short,itanns,itann,1,if,labels,code,length,null,mv,visit,label,labels,code,length,if,context,flags,0,var,table,0,int,type,table,null,if,var,type,table,0,u,var,type,table,2,type,table,new,int,read,unsigned,short,var,type,table,3,for,int,i,type,table,length,i,0,type,table,i,u,6,type,table,i,read,unsigned,short,u,8,type,table,i,read,unsigned,short,u,u,10,u,var,table,2,for,int,i,read,unsigned,short,var,table,i,0,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,int,index,read,unsigned,short,u,8,string,vsignature,null,if,type,table,null,for,int,j,0,j,type,table,length,j,3,if,type,table,j,start,type,table,j,1,index,vsignature,read,utf8,type,table,j,2,c,break,mv,visit,local,variable,read,utf8,u,4,c,read,utf8,u,6,c,vsignature,labels,start,labels,start,length,index,u,10,if,tanns,null,for,int,i,0,i,tanns,length,i,if,read,byte,tanns,i,1,0x40,1,int,v,read,annotation,target,context,tanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,true,if,itanns,null,for,int,i,0,i,itanns,length,i,if,read,byte,itanns,i,1,0x40,1,int,v,read,annotation,target,context,itanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,mv,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(final MethodVisitor mv, final Context context, int u);1478623137;Reads the bytecode of a method and makes the given visitor visit it.__@param mv_the visitor that must visit the method's code._@param context_information about the class being parsed._@param u_the start offset of the code attribute in the class file.;private void readCode(final MethodVisitor mv, final Context context, int u) {_        _        byte[] b = this.b__        char[] c = context.buffer__        int maxStack = readUnsignedShort(u)__        int maxLocals = readUnsignedShort(u + 2)__        int codeLength = readInt(u + 4)__        u += 8___        _        int codeStart = u__        int codeEnd = u + codeLength__        Label[] labels = context.labels = new Label[codeLength + 2]__        readLabel(codeLength + 1, labels)__        while (u < codeEnd) {_            int offset = u - codeStart__            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                readLabel(offset + readShort(u + 1), labels)__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                readLabel(offset + readInt(u + 1), labels)__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    u += 6__                } else {_                    u += 4__                }_                break__            case ClassWriter.TABL_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 8) - readInt(u + 4) + 1_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 4__                }_                u += 12__                break__            case ClassWriter.LOOK_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 4)_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 8__                }_                u += 8__                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                u += 5__                break__            _            default:_                u += 4__                break__            }_        }__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            Label start = readLabel(readUnsignedShort(u + 2), labels)__            Label end = readLabel(readUnsignedShort(u + 4), labels)__            Label handler = readLabel(readUnsignedShort(u + 6), labels)__            String type = readUTF8(items[readUnsignedShort(u + 8)], c)__            mv.visitTryCatchBlock(start, end, handler, type)__            u += 8__        }_        u += 2___        _        int[] tanns = null_ _        int[] itanns = null_ _        int tann = 0_ _        int itann = 0_ _        int ntoff = -1_ _        int nitoff = -1_ _        int varTable = 0__        int varTypeTable = 0__        boolean zip = true__        boolean unzip = (context.flags & EXPAND_FRAMES) != 0__        int stackMap = 0__        int stackMapSize = 0__        int frameCount = 0__        Context frame = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("LocalVariableTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    varTable = u + 8__                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        label += readUnsignedShort(v + 12)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        v += 10__                    }_                }_            } else if ("LocalVariableTypeTable".equals(attrName)) {_                varTypeTable = u + 8__            } else if ("LineNumberTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        Label l = labels[label]__                        while (l.line > 0) {_                            if (l.next == null) {_                                l.next = new Label()__                            }_                            l = l.next__                        }_                        l.line = readUnsignedShort(v + 12)__                        v += 4__                    }_                }_            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = readTypeAnnotations(mv, context, u + 8, true)__                ntoff = tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1_                        : readUnsignedShort(tanns[0] + 1)__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = readTypeAnnotations(mv, context, u + 8, false)__                nitoff = itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1_                        : readUnsignedShort(itanns[0] + 1)__            } else if (FRAMES && "StackMapTable".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _                _            } else if (FRAMES && "StackMap".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    zip = false__                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _            } else {_                for (int j = 0_ j < context.attrs.length_ ++j) {_                    if (context.attrs[j].type.equals(attrName)) {_                        Attribute attr = context.attrs[j].read(this, u + 8,_                                readInt(u + 4), c, codeStart - 8, labels)__                        if (attr != null) {_                            attr.next = attributes__                            attributes = attr__                        }_                    }_                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        if (FRAMES && stackMap != 0) {_            _            frame = context__            frame.offset = -1__            frame.mode = 0__            frame.localCount = 0__            frame.localDiff = 0__            frame.stackCount = 0__            frame.local = new Object[maxLocals]__            frame.stack = new Object[maxStack]__            if (unzip) {_                getImplicitFrame(context)__            }_            _            for (int i = stackMap_ i < stackMap + stackMapSize - 2_ ++i) {_                if (b[i] == 8) { _                    int v = readUnsignedShort(i + 1)__                    if (v >= 0 && v < codeLength) {_                        if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {_                            readLabel(v, labels)__                        }_                    }_                }_            }_        }__        _        u = codeStart__        while (u < codeEnd) {_            int offset = u - codeStart___            _            Label l = labels[offset]__            if (l != null) {_                Label next = l.next__                l.next = null__                mv.visitLabel(l)__                if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {_                    mv.visitLineNumber(l.line, l)__                    while (next != null) {_                        mv.visitLineNumber(next.line, l)__                        next = next.next__                    }_                }_            }__            _            while (FRAMES && frame != null_                    && (frame.offset == offset || frame.offset == -1)) {_                _                _                if (frame.offset != -1) {_                    if (!zip || unzip) {_                        mv.visitFrame(Opcodes.F_NEW, frame.localCount,_                                frame.local, frame.stackCount, frame.stack)__                    } else {_                        mv.visitFrame(frame.mode, frame.localDiff, frame.local,_                                frame.stackCount, frame.stack)__                    }_                }_                if (frameCount > 0) {_                    stackMap = readFrame(stackMap, zip, unzip, frame)__                    --frameCount__                } else {_                    frame = null__                }_            }__            _            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_                mv.visitInsn(opcode)__                u += 1__                break__            case ClassWriter.IMPLVAR_INSN:_                if (opcode > Opcodes.ISTORE) {_                    opcode -= 59_ _                    mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),_                            opcode & 0x3)__                } else {_                    opcode -= 26_ _                    mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__                }_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                mv.visitJumpInsn(opcode, labels[offset + readShort(u + 1)])__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                mv.visitJumpInsn(opcode - 33, labels[offset + readInt(u + 1)])__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    mv.visitIincInsn(readUnsignedShort(u + 2), readShort(u + 4))__                    u += 6__                } else {_                    mv.visitVarInsn(opcode, readUnsignedShort(u + 2))__                    u += 4__                }_                break__            case ClassWriter.TABL_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int min = readInt(u + 4)__                int max = readInt(u + 8)__                Label[] table = new Label[max - min + 1]__                u += 12__                for (int i = 0_ i < table.length_ ++i) {_                    table[i] = labels[offset + readInt(u)]__                    u += 4__                }_                mv.visitTableSwitchInsn(min, max, labels[label], table)__                break__            }_            case ClassWriter.LOOK_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int len = readInt(u + 4)__                int[] keys = new int[len]__                Label[] values = new Label[len]__                u += 8__                for (int i = 0_ i < len_ ++i) {_                    keys[i] = readInt(u)__                    values[i] = labels[offset + readInt(u + 4)]__                    u += 8__                }_                mv.visitLookupSwitchInsn(labels[label], keys, values)__                break__            }_            case ClassWriter.VAR_INSN:_                mv.visitVarInsn(opcode, b[u + 1] & 0xFF)__                u += 2__                break__            case ClassWriter.SBYTE_INSN:_                mv.visitIntInsn(opcode, b[u + 1])__                u += 2__                break__            case ClassWriter.SHORT_INSN:_                mv.visitIntInsn(opcode, readShort(u + 1))__                u += 3__                break__            case ClassWriter.LDC_INSN:_                mv.visitLdcInsn(readConst(b[u + 1] & 0xFF, c))__                u += 2__                break__            case ClassWriter.LDCW_INSN:_                mv.visitLdcInsn(readConst(readUnsignedShort(u + 1), c))__                u += 3__                break__            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.ITFMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__                String iowner = readClass(cpIndex, c)__                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                if (opcode < Opcodes.INVOKEVIRTUAL) {_                    mv.visitFieldInsn(opcode, iowner, iname, idesc)__                } else {_                    mv.visitMethodInsn(opcode, iowner, iname, idesc, itf)__                }_                if (opcode == Opcodes.INVOKEINTERFACE) {_                    u += 5__                } else {_                    u += 3__                }_                break__            }_            case ClassWriter.INDYMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                int bsmIndex = context.bootstrapMethods[readUnsignedShort(cpIndex)]__                Handle bsm = (Handle) readConst(readUnsignedShort(bsmIndex), c)__                int bsmArgCount = readUnsignedShort(bsmIndex + 2)__                Object[] bsmArgs = new Object[bsmArgCount]__                bsmIndex += 4__                for (int i = 0_ i < bsmArgCount_ i++) {_                    bsmArgs[i] = readConst(readUnsignedShort(bsmIndex), c)__                    bsmIndex += 2__                }_                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                mv.visitInvokeDynamicInsn(iname, idesc, bsm, bsmArgs)__                u += 5__                break__            }_            case ClassWriter.TYPE_INSN:_                mv.visitTypeInsn(opcode, readClass(u + 1, c))__                u += 3__                break__            case ClassWriter.IINC_INSN:_                mv.visitIincInsn(b[u + 1] & 0xFF, b[u + 2])__                u += 3__                break__            _            default:_                mv.visitMultiANewArrayInsn(readClass(u + 1, c), b[u + 3] & 0xFF)__                u += 4__                break__            }__            _            while (tanns != null && tann < tanns.length && ntoff <= offset) {_                if (ntoff == offset) {_                    int v = readAnnotationTarget(context, tanns[tann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), true))__                }_                ntoff = ++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1_                        : readUnsignedShort(tanns[tann] + 1)__            }_            while (itanns != null && itann < itanns.length && nitoff <= offset) {_                if (nitoff == offset) {_                    int v = readAnnotationTarget(context, itanns[itann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), false))__                }_                nitoff = ++itann >= itanns.length_                        || readByte(itanns[itann]) < 0x43 ? -1_                        : readUnsignedShort(itanns[itann] + 1)__            }_        }_        if (labels[codeLength] != null) {_            mv.visitLabel(labels[codeLength])__        }__        _        if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {_            int[] typeTable = null__            if (varTypeTable != 0) {_                u = varTypeTable + 2__                typeTable = new int[readUnsignedShort(varTypeTable) * 3]__                for (int i = typeTable.length_ i > 0_) {_                    typeTable[--i] = u + 6_ _                    typeTable[--i] = readUnsignedShort(u + 8)_ _                    typeTable[--i] = readUnsignedShort(u)_ _                    u += 10__                }_            }_            u = varTable + 2__            for (int i = readUnsignedShort(varTable)_ i > 0_ --i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                int index = readUnsignedShort(u + 8)__                String vsignature = null__                if (typeTable != null) {_                    for (int j = 0_ j < typeTable.length_ j += 3) {_                        if (typeTable[j] == start && typeTable[j + 1] == index) {_                            vsignature = readUTF8(typeTable[j + 2], c)__                            break__                        }_                    }_                }_                mv.visitLocalVariable(readUTF8(u + 4, c), readUTF8(u + 6, c),_                        vsignature, labels[start], labels[start + length],_                        index)__                u += 10__            }_        }__        _        if (tanns != null) {_            for (int i = 0_ i < tanns.length_ ++i) {_                if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, tanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    true))__                }_            }_        }_        if (itanns != null) {_            for (int i = 0_ i < itanns.length_ ++i) {_                if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, itanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    false))__                }_            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        mv.visitMaxs(maxStack, maxLocals)__    };reads,the,bytecode,of,a,method,and,makes,the,given,visitor,visit,it,param,mv,the,visitor,that,must,visit,the,method,s,code,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,code,attribute,in,the,class,file;private,void,read,code,final,method,visitor,mv,final,context,context,int,u,byte,b,this,b,char,c,context,buffer,int,max,stack,read,unsigned,short,u,int,max,locals,read,unsigned,short,u,2,int,code,length,read,int,u,4,u,8,int,code,start,u,int,code,end,u,code,length,label,labels,context,labels,new,label,code,length,2,read,label,code,length,1,labels,while,u,code,end,int,offset,u,code,start,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,read,label,offset,read,short,u,1,labels,u,3,break,case,class,writer,read,label,offset,read,int,u,1,labels,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,8,read,int,u,4,1,i,0,i,read,label,offset,read,int,u,12,labels,u,4,u,12,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,4,i,0,i,read,label,offset,read,int,u,12,labels,u,8,u,8,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,for,int,i,read,unsigned,short,u,i,0,i,label,start,read,label,read,unsigned,short,u,2,labels,label,end,read,label,read,unsigned,short,u,4,labels,label,handler,read,label,read,unsigned,short,u,6,labels,string,type,read,utf8,items,read,unsigned,short,u,8,c,mv,visit,try,catch,block,start,end,handler,type,u,8,u,2,int,tanns,null,int,itanns,null,int,tann,0,int,itann,0,int,ntoff,1,int,nitoff,1,int,var,table,0,int,var,type,table,0,boolean,zip,true,boolean,unzip,context,flags,0,int,stack,map,0,int,stack,map,size,0,int,frame,count,0,context,frame,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,local,variable,table,equals,attr,name,if,context,flags,0,var,table,u,8,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,read,unsigned,short,v,12,if,labels,label,null,read,label,label,labels,status,label,debug,v,10,else,if,local,variable,type,table,equals,attr,name,var,type,table,u,8,else,if,line,number,table,equals,attr,name,if,context,flags,0,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,l,labels,label,while,l,line,0,if,l,next,null,l,next,new,label,l,l,next,l,line,read,unsigned,short,v,12,v,4,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,read,type,annotations,mv,context,u,8,true,ntoff,tanns,length,0,read,byte,tanns,0,0x43,1,read,unsigned,short,tanns,0,1,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,read,type,annotations,mv,context,u,8,false,nitoff,itanns,length,0,read,byte,itanns,0,0x43,1,read,unsigned,short,itanns,0,1,else,if,frames,stack,map,table,equals,attr,name,if,context,flags,0,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,if,frames,stack,map,equals,attr,name,if,context,flags,0,zip,false,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,for,int,j,0,j,context,attrs,length,j,if,context,attrs,j,type,equals,attr,name,attribute,attr,context,attrs,j,read,this,u,8,read,int,u,4,c,code,start,8,labels,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,if,frames,stack,map,0,frame,context,frame,offset,1,frame,mode,0,frame,local,count,0,frame,local,diff,0,frame,stack,count,0,frame,local,new,object,max,locals,frame,stack,new,object,max,stack,if,unzip,get,implicit,frame,context,for,int,i,stack,map,i,stack,map,stack,map,size,2,i,if,b,i,8,int,v,read,unsigned,short,i,1,if,v,0,v,code,length,if,b,code,start,v,0x,ff,opcodes,new,read,label,v,labels,u,code,start,while,u,code,end,int,offset,u,code,start,label,l,labels,offset,if,l,null,label,next,l,next,l,next,null,mv,visit,label,l,if,context,flags,0,l,line,0,mv,visit,line,number,l,line,l,while,next,null,mv,visit,line,number,next,line,l,next,next,next,while,frames,frame,null,frame,offset,offset,frame,offset,1,if,frame,offset,1,if,zip,unzip,mv,visit,frame,opcodes,frame,local,count,frame,local,frame,stack,count,frame,stack,else,mv,visit,frame,frame,mode,frame,local,diff,frame,local,frame,stack,count,frame,stack,if,frame,count,0,stack,map,read,frame,stack,map,zip,unzip,frame,frame,count,else,frame,null,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,mv,visit,insn,opcode,u,1,break,case,class,writer,if,opcode,opcodes,istore,opcode,59,mv,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,else,opcode,26,mv,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,u,1,break,case,class,writer,mv,visit,jump,insn,opcode,labels,offset,read,short,u,1,u,3,break,case,class,writer,mv,visit,jump,insn,opcode,33,labels,offset,read,int,u,1,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,mv,visit,iinc,insn,read,unsigned,short,u,2,read,short,u,4,u,6,else,mv,visit,var,insn,opcode,read,unsigned,short,u,2,u,4,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,min,read,int,u,4,int,max,read,int,u,8,label,table,new,label,max,min,1,u,12,for,int,i,0,i,table,length,i,table,i,labels,offset,read,int,u,u,4,mv,visit,table,switch,insn,min,max,labels,label,table,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,len,read,int,u,4,int,keys,new,int,len,label,values,new,label,len,u,8,for,int,i,0,i,len,i,keys,i,read,int,u,values,i,labels,offset,read,int,u,4,u,8,mv,visit,lookup,switch,insn,labels,label,keys,values,break,case,class,writer,mv,visit,var,insn,opcode,b,u,1,0x,ff,u,2,break,case,class,writer,mv,visit,int,insn,opcode,b,u,1,u,2,break,case,class,writer,mv,visit,int,insn,opcode,read,short,u,1,u,3,break,case,class,writer,mv,visit,ldc,insn,read,const,b,u,1,0x,ff,c,u,2,break,case,class,writer,mv,visit,ldc,insn,read,const,read,unsigned,short,u,1,c,u,3,break,case,class,writer,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,iowner,read,class,cp,index,c,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,if,opcode,opcodes,invokevirtual,mv,visit,field,insn,opcode,iowner,iname,idesc,else,mv,visit,method,insn,opcode,iowner,iname,idesc,itf,if,opcode,opcodes,invokeinterface,u,5,else,u,3,break,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,int,bsm,index,context,bootstrap,methods,read,unsigned,short,cp,index,handle,bsm,handle,read,const,read,unsigned,short,bsm,index,c,int,bsm,arg,count,read,unsigned,short,bsm,index,2,object,bsm,args,new,object,bsm,arg,count,bsm,index,4,for,int,i,0,i,bsm,arg,count,i,bsm,args,i,read,const,read,unsigned,short,bsm,index,c,bsm,index,2,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,mv,visit,invoke,dynamic,insn,iname,idesc,bsm,bsm,args,u,5,break,case,class,writer,mv,visit,type,insn,opcode,read,class,u,1,c,u,3,break,case,class,writer,mv,visit,iinc,insn,b,u,1,0x,ff,b,u,2,u,3,break,default,mv,visit,multi,anew,array,insn,read,class,u,1,c,b,u,3,0x,ff,u,4,break,while,tanns,null,tann,tanns,length,ntoff,offset,if,ntoff,offset,int,v,read,annotation,target,context,tanns,tann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,ntoff,tann,tanns,length,read,byte,tanns,tann,0x43,1,read,unsigned,short,tanns,tann,1,while,itanns,null,itann,itanns,length,nitoff,offset,if,nitoff,offset,int,v,read,annotation,target,context,itanns,itann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,nitoff,itann,itanns,length,read,byte,itanns,itann,0x43,1,read,unsigned,short,itanns,itann,1,if,labels,code,length,null,mv,visit,label,labels,code,length,if,context,flags,0,var,table,0,int,type,table,null,if,var,type,table,0,u,var,type,table,2,type,table,new,int,read,unsigned,short,var,type,table,3,for,int,i,type,table,length,i,0,type,table,i,u,6,type,table,i,read,unsigned,short,u,8,type,table,i,read,unsigned,short,u,u,10,u,var,table,2,for,int,i,read,unsigned,short,var,table,i,0,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,int,index,read,unsigned,short,u,8,string,vsignature,null,if,type,table,null,for,int,j,0,j,type,table,length,j,3,if,type,table,j,start,type,table,j,1,index,vsignature,read,utf8,type,table,j,2,c,break,mv,visit,local,variable,read,utf8,u,4,c,read,utf8,u,6,c,vsignature,labels,start,labels,start,length,index,u,10,if,tanns,null,for,int,i,0,i,tanns,length,i,if,read,byte,tanns,i,1,0x40,1,int,v,read,annotation,target,context,tanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,true,if,itanns,null,for,int,i,0,i,itanns,length,i,if,read,byte,itanns,i,1,0x40,1,int,v,read,annotation,target,context,itanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,mv,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(final MethodVisitor mv, final Context context, int u);1483093254;Reads the bytecode of a method and makes the given visitor visit it.__@param mv_the visitor that must visit the method's code._@param context_information about the class being parsed._@param u_the start offset of the code attribute in the class file.;private void readCode(final MethodVisitor mv, final Context context, int u) {_        _        byte[] b = this.b__        char[] c = context.buffer__        int maxStack = readUnsignedShort(u)__        int maxLocals = readUnsignedShort(u + 2)__        int codeLength = readInt(u + 4)__        u += 8___        _        int codeStart = u__        int codeEnd = u + codeLength__        Label[] labels = context.labels = new Label[codeLength + 2]__        readLabel(codeLength + 1, labels)__        while (u < codeEnd) {_            int offset = u - codeStart__            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                readLabel(offset + readShort(u + 1), labels)__                u += 3__                break__            case ClassWriter.ASM_LABEL_INSN:_                readLabel(offset + readUnsignedShort(u + 1), labels)__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                readLabel(offset + readInt(u + 1), labels)__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    u += 6__                } else {_                    u += 4__                }_                break__            case ClassWriter.TABL_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 8) - readInt(u + 4) + 1_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 4__                }_                u += 12__                break__            case ClassWriter.LOOK_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 4)_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 8__                }_                u += 8__                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                u += 5__                break__            _            default:_                u += 4__                break__            }_        }__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            Label start = readLabel(readUnsignedShort(u + 2), labels)__            Label end = readLabel(readUnsignedShort(u + 4), labels)__            Label handler = readLabel(readUnsignedShort(u + 6), labels)__            String type = readUTF8(items[readUnsignedShort(u + 8)], c)__            mv.visitTryCatchBlock(start, end, handler, type)__            u += 8__        }_        u += 2___        _        int[] tanns = null_ _        int[] itanns = null_ _        int tann = 0_ _        int itann = 0_ _        int ntoff = -1_ _        int nitoff = -1_ _        int varTable = 0__        int varTypeTable = 0__        boolean zip = true__        boolean unzip = (context.flags & EXPAND_FRAMES) != 0__        int stackMap = 0__        int stackMapSize = 0__        int frameCount = 0__        Context frame = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("LocalVariableTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    varTable = u + 8__                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        label += readUnsignedShort(v + 12)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        v += 10__                    }_                }_            } else if ("LocalVariableTypeTable".equals(attrName)) {_                varTypeTable = u + 8__            } else if ("LineNumberTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        Label l = labels[label]__                        while (l.line > 0) {_                            if (l.next == null) {_                                l.next = new Label()__                            }_                            l = l.next__                        }_                        l.line = readUnsignedShort(v + 12)__                        v += 4__                    }_                }_            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = readTypeAnnotations(mv, context, u + 8, true)__                ntoff = tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1_                        : readUnsignedShort(tanns[0] + 1)__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = readTypeAnnotations(mv, context, u + 8, false)__                nitoff = itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1_                        : readUnsignedShort(itanns[0] + 1)__            } else if (FRAMES && "StackMapTable".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _                _            } else if (FRAMES && "StackMap".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    zip = false__                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _            } else {_                for (int j = 0_ j < context.attrs.length_ ++j) {_                    if (context.attrs[j].type.equals(attrName)) {_                        Attribute attr = context.attrs[j].read(this, u + 8,_                                readInt(u + 4), c, codeStart - 8, labels)__                        if (attr != null) {_                            attr.next = attributes__                            attributes = attr__                        }_                    }_                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        if (FRAMES && stackMap != 0) {_            _            frame = context__            frame.offset = -1__            frame.mode = 0__            frame.localCount = 0__            frame.localDiff = 0__            frame.stackCount = 0__            frame.local = new Object[maxLocals]__            frame.stack = new Object[maxStack]__            if (unzip) {_                getImplicitFrame(context)__            }_            _            for (int i = stackMap_ i < stackMap + stackMapSize - 2_ ++i) {_                if (b[i] == 8) { _                    int v = readUnsignedShort(i + 1)__                    if (v >= 0 && v < codeLength) {_                        if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {_                            readLabel(v, labels)__                        }_                    }_                }_            }_        }_        if ((context.flags & EXPAND_ASM_INSNS) != 0) {_            _            _            _            _            _            _            _            _            _            _            _            mv.visitFrame(Opcodes.F_NEW, maxLocals, null, 0, null)__        }__        _        int opcodeDelta = (context.flags & EXPAND_ASM_INSNS) == 0 ? -33 : 0__        u = codeStart__        while (u < codeEnd) {_            int offset = u - codeStart___            _            Label l = labels[offset]__            if (l != null) {_                Label next = l.next__                l.next = null__                mv.visitLabel(l)__                if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {_                    mv.visitLineNumber(l.line, l)__                    while (next != null) {_                        mv.visitLineNumber(next.line, l)__                        next = next.next__                    }_                }_            }__            _            while (FRAMES && frame != null_                    && (frame.offset == offset || frame.offset == -1)) {_                _                _                if (frame.offset != -1) {_                    if (!zip || unzip) {_                        mv.visitFrame(Opcodes.F_NEW, frame.localCount,_                                frame.local, frame.stackCount, frame.stack)__                    } else {_                        mv.visitFrame(frame.mode, frame.localDiff, frame.local,_                                frame.stackCount, frame.stack)__                    }_                }_                if (frameCount > 0) {_                    stackMap = readFrame(stackMap, zip, unzip, frame)__                    --frameCount__                } else {_                    frame = null__                }_            }__            _            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_                mv.visitInsn(opcode)__                u += 1__                break__            case ClassWriter.IMPLVAR_INSN:_                if (opcode > Opcodes.ISTORE) {_                    opcode -= 59_ _                    mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),_                            opcode & 0x3)__                } else {_                    opcode -= 26_ _                    mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__                }_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                mv.visitJumpInsn(opcode, labels[offset + readShort(u + 1)])__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                mv.visitJumpInsn(opcode + opcodeDelta, labels[offset_                        + readInt(u + 1)])__                u += 5__                break__            case ClassWriter.ASM_LABEL_INSN: {_                _                _                _                opcode = opcode < 218 ? opcode - 49 : opcode - 20__                Label target = labels[offset + readUnsignedShort(u + 1)]__                _                _                _                _                _                if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_                    mv.visitJumpInsn(opcode + 33, target)__                } else {_                    opcode = opcode <= 166 ? ((opcode + 1) ^ 1) - 1_                            : opcode ^ 1__                    Label endif = new Label()__                    mv.visitJumpInsn(opcode, endif)__                    mv.visitJumpInsn(200, target)_ _                    mv.visitLabel(endif)__                    _                    _                    _                    _                    if (FRAMES && stackMap != 0_                            && (frame == null || frame.offset != offset + 3)) {_                        mv.visitFrame(ClassWriter.F_INSERT, 0, null, 0, null)__                    }_                }_                u += 3__                break__            }_            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    mv.visitIincInsn(readUnsignedShort(u + 2), readShort(u + 4))__                    u += 6__                } else {_                    mv.visitVarInsn(opcode, readUnsignedShort(u + 2))__                    u += 4__                }_                break__            case ClassWriter.TABL_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int min = readInt(u + 4)__                int max = readInt(u + 8)__                Label[] table = new Label[max - min + 1]__                u += 12__                for (int i = 0_ i < table.length_ ++i) {_                    table[i] = labels[offset + readInt(u)]__                    u += 4__                }_                mv.visitTableSwitchInsn(min, max, labels[label], table)__                break__            }_            case ClassWriter.LOOK_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int len = readInt(u + 4)__                int[] keys = new int[len]__                Label[] values = new Label[len]__                u += 8__                for (int i = 0_ i < len_ ++i) {_                    keys[i] = readInt(u)__                    values[i] = labels[offset + readInt(u + 4)]__                    u += 8__                }_                mv.visitLookupSwitchInsn(labels[label], keys, values)__                break__            }_            case ClassWriter.VAR_INSN:_                mv.visitVarInsn(opcode, b[u + 1] & 0xFF)__                u += 2__                break__            case ClassWriter.SBYTE_INSN:_                mv.visitIntInsn(opcode, b[u + 1])__                u += 2__                break__            case ClassWriter.SHORT_INSN:_                mv.visitIntInsn(opcode, readShort(u + 1))__                u += 3__                break__            case ClassWriter.LDC_INSN:_                mv.visitLdcInsn(readConst(b[u + 1] & 0xFF, c))__                u += 2__                break__            case ClassWriter.LDCW_INSN:_                mv.visitLdcInsn(readConst(readUnsignedShort(u + 1), c))__                u += 3__                break__            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.ITFMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__                String iowner = readClass(cpIndex, c)__                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                if (opcode < Opcodes.INVOKEVIRTUAL) {_                    mv.visitFieldInsn(opcode, iowner, iname, idesc)__                } else {_                    mv.visitMethodInsn(opcode, iowner, iname, idesc, itf)__                }_                if (opcode == Opcodes.INVOKEINTERFACE) {_                    u += 5__                } else {_                    u += 3__                }_                break__            }_            case ClassWriter.INDYMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                int bsmIndex = context.bootstrapMethods[readUnsignedShort(cpIndex)]__                Handle bsm = (Handle) readConst(readUnsignedShort(bsmIndex), c)__                int bsmArgCount = readUnsignedShort(bsmIndex + 2)__                Object[] bsmArgs = new Object[bsmArgCount]__                bsmIndex += 4__                for (int i = 0_ i < bsmArgCount_ i++) {_                    bsmArgs[i] = readConst(readUnsignedShort(bsmIndex), c)__                    bsmIndex += 2__                }_                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                mv.visitInvokeDynamicInsn(iname, idesc, bsm, bsmArgs)__                u += 5__                break__            }_            case ClassWriter.TYPE_INSN:_                mv.visitTypeInsn(opcode, readClass(u + 1, c))__                u += 3__                break__            case ClassWriter.IINC_INSN:_                mv.visitIincInsn(b[u + 1] & 0xFF, b[u + 2])__                u += 3__                break__            _            default:_                mv.visitMultiANewArrayInsn(readClass(u + 1, c), b[u + 3] & 0xFF)__                u += 4__                break__            }__            _            while (tanns != null && tann < tanns.length && ntoff <= offset) {_                if (ntoff == offset) {_                    int v = readAnnotationTarget(context, tanns[tann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), true))__                }_                ntoff = ++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1_                        : readUnsignedShort(tanns[tann] + 1)__            }_            while (itanns != null && itann < itanns.length && nitoff <= offset) {_                if (nitoff == offset) {_                    int v = readAnnotationTarget(context, itanns[itann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), false))__                }_                nitoff = ++itann >= itanns.length_                        || readByte(itanns[itann]) < 0x43 ? -1_                        : readUnsignedShort(itanns[itann] + 1)__            }_        }_        if (labels[codeLength] != null) {_            mv.visitLabel(labels[codeLength])__        }__        _        if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {_            int[] typeTable = null__            if (varTypeTable != 0) {_                u = varTypeTable + 2__                typeTable = new int[readUnsignedShort(varTypeTable) * 3]__                for (int i = typeTable.length_ i > 0_) {_                    typeTable[--i] = u + 6_ _                    typeTable[--i] = readUnsignedShort(u + 8)_ _                    typeTable[--i] = readUnsignedShort(u)_ _                    u += 10__                }_            }_            u = varTable + 2__            for (int i = readUnsignedShort(varTable)_ i > 0_ --i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                int index = readUnsignedShort(u + 8)__                String vsignature = null__                if (typeTable != null) {_                    for (int j = 0_ j < typeTable.length_ j += 3) {_                        if (typeTable[j] == start && typeTable[j + 1] == index) {_                            vsignature = readUTF8(typeTable[j + 2], c)__                            break__                        }_                    }_                }_                mv.visitLocalVariable(readUTF8(u + 4, c), readUTF8(u + 6, c),_                        vsignature, labels[start], labels[start + length],_                        index)__                u += 10__            }_        }__        _        if (tanns != null) {_            for (int i = 0_ i < tanns.length_ ++i) {_                if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, tanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    true))__                }_            }_        }_        if (itanns != null) {_            for (int i = 0_ i < itanns.length_ ++i) {_                if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, itanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    false))__                }_            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        mv.visitMaxs(maxStack, maxLocals)__    };reads,the,bytecode,of,a,method,and,makes,the,given,visitor,visit,it,param,mv,the,visitor,that,must,visit,the,method,s,code,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,code,attribute,in,the,class,file;private,void,read,code,final,method,visitor,mv,final,context,context,int,u,byte,b,this,b,char,c,context,buffer,int,max,stack,read,unsigned,short,u,int,max,locals,read,unsigned,short,u,2,int,code,length,read,int,u,4,u,8,int,code,start,u,int,code,end,u,code,length,label,labels,context,labels,new,label,code,length,2,read,label,code,length,1,labels,while,u,code,end,int,offset,u,code,start,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,read,label,offset,read,short,u,1,labels,u,3,break,case,class,writer,read,label,offset,read,unsigned,short,u,1,labels,u,3,break,case,class,writer,read,label,offset,read,int,u,1,labels,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,8,read,int,u,4,1,i,0,i,read,label,offset,read,int,u,12,labels,u,4,u,12,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,4,i,0,i,read,label,offset,read,int,u,12,labels,u,8,u,8,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,for,int,i,read,unsigned,short,u,i,0,i,label,start,read,label,read,unsigned,short,u,2,labels,label,end,read,label,read,unsigned,short,u,4,labels,label,handler,read,label,read,unsigned,short,u,6,labels,string,type,read,utf8,items,read,unsigned,short,u,8,c,mv,visit,try,catch,block,start,end,handler,type,u,8,u,2,int,tanns,null,int,itanns,null,int,tann,0,int,itann,0,int,ntoff,1,int,nitoff,1,int,var,table,0,int,var,type,table,0,boolean,zip,true,boolean,unzip,context,flags,0,int,stack,map,0,int,stack,map,size,0,int,frame,count,0,context,frame,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,local,variable,table,equals,attr,name,if,context,flags,0,var,table,u,8,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,read,unsigned,short,v,12,if,labels,label,null,read,label,label,labels,status,label,debug,v,10,else,if,local,variable,type,table,equals,attr,name,var,type,table,u,8,else,if,line,number,table,equals,attr,name,if,context,flags,0,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,l,labels,label,while,l,line,0,if,l,next,null,l,next,new,label,l,l,next,l,line,read,unsigned,short,v,12,v,4,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,read,type,annotations,mv,context,u,8,true,ntoff,tanns,length,0,read,byte,tanns,0,0x43,1,read,unsigned,short,tanns,0,1,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,read,type,annotations,mv,context,u,8,false,nitoff,itanns,length,0,read,byte,itanns,0,0x43,1,read,unsigned,short,itanns,0,1,else,if,frames,stack,map,table,equals,attr,name,if,context,flags,0,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,if,frames,stack,map,equals,attr,name,if,context,flags,0,zip,false,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,for,int,j,0,j,context,attrs,length,j,if,context,attrs,j,type,equals,attr,name,attribute,attr,context,attrs,j,read,this,u,8,read,int,u,4,c,code,start,8,labels,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,if,frames,stack,map,0,frame,context,frame,offset,1,frame,mode,0,frame,local,count,0,frame,local,diff,0,frame,stack,count,0,frame,local,new,object,max,locals,frame,stack,new,object,max,stack,if,unzip,get,implicit,frame,context,for,int,i,stack,map,i,stack,map,stack,map,size,2,i,if,b,i,8,int,v,read,unsigned,short,i,1,if,v,0,v,code,length,if,b,code,start,v,0x,ff,opcodes,new,read,label,v,labels,if,context,flags,0,mv,visit,frame,opcodes,max,locals,null,0,null,int,opcode,delta,context,flags,0,33,0,u,code,start,while,u,code,end,int,offset,u,code,start,label,l,labels,offset,if,l,null,label,next,l,next,l,next,null,mv,visit,label,l,if,context,flags,0,l,line,0,mv,visit,line,number,l,line,l,while,next,null,mv,visit,line,number,next,line,l,next,next,next,while,frames,frame,null,frame,offset,offset,frame,offset,1,if,frame,offset,1,if,zip,unzip,mv,visit,frame,opcodes,frame,local,count,frame,local,frame,stack,count,frame,stack,else,mv,visit,frame,frame,mode,frame,local,diff,frame,local,frame,stack,count,frame,stack,if,frame,count,0,stack,map,read,frame,stack,map,zip,unzip,frame,frame,count,else,frame,null,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,mv,visit,insn,opcode,u,1,break,case,class,writer,if,opcode,opcodes,istore,opcode,59,mv,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,else,opcode,26,mv,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,u,1,break,case,class,writer,mv,visit,jump,insn,opcode,labels,offset,read,short,u,1,u,3,break,case,class,writer,mv,visit,jump,insn,opcode,opcode,delta,labels,offset,read,int,u,1,u,5,break,case,class,writer,opcode,opcode,218,opcode,49,opcode,20,label,target,labels,offset,read,unsigned,short,u,1,if,opcode,opcodes,goto,opcode,opcodes,jsr,mv,visit,jump,insn,opcode,33,target,else,opcode,opcode,166,opcode,1,1,1,opcode,1,label,endif,new,label,mv,visit,jump,insn,opcode,endif,mv,visit,jump,insn,200,target,mv,visit,label,endif,if,frames,stack,map,0,frame,null,frame,offset,offset,3,mv,visit,frame,class,writer,0,null,0,null,u,3,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,mv,visit,iinc,insn,read,unsigned,short,u,2,read,short,u,4,u,6,else,mv,visit,var,insn,opcode,read,unsigned,short,u,2,u,4,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,min,read,int,u,4,int,max,read,int,u,8,label,table,new,label,max,min,1,u,12,for,int,i,0,i,table,length,i,table,i,labels,offset,read,int,u,u,4,mv,visit,table,switch,insn,min,max,labels,label,table,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,len,read,int,u,4,int,keys,new,int,len,label,values,new,label,len,u,8,for,int,i,0,i,len,i,keys,i,read,int,u,values,i,labels,offset,read,int,u,4,u,8,mv,visit,lookup,switch,insn,labels,label,keys,values,break,case,class,writer,mv,visit,var,insn,opcode,b,u,1,0x,ff,u,2,break,case,class,writer,mv,visit,int,insn,opcode,b,u,1,u,2,break,case,class,writer,mv,visit,int,insn,opcode,read,short,u,1,u,3,break,case,class,writer,mv,visit,ldc,insn,read,const,b,u,1,0x,ff,c,u,2,break,case,class,writer,mv,visit,ldc,insn,read,const,read,unsigned,short,u,1,c,u,3,break,case,class,writer,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,iowner,read,class,cp,index,c,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,if,opcode,opcodes,invokevirtual,mv,visit,field,insn,opcode,iowner,iname,idesc,else,mv,visit,method,insn,opcode,iowner,iname,idesc,itf,if,opcode,opcodes,invokeinterface,u,5,else,u,3,break,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,int,bsm,index,context,bootstrap,methods,read,unsigned,short,cp,index,handle,bsm,handle,read,const,read,unsigned,short,bsm,index,c,int,bsm,arg,count,read,unsigned,short,bsm,index,2,object,bsm,args,new,object,bsm,arg,count,bsm,index,4,for,int,i,0,i,bsm,arg,count,i,bsm,args,i,read,const,read,unsigned,short,bsm,index,c,bsm,index,2,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,mv,visit,invoke,dynamic,insn,iname,idesc,bsm,bsm,args,u,5,break,case,class,writer,mv,visit,type,insn,opcode,read,class,u,1,c,u,3,break,case,class,writer,mv,visit,iinc,insn,b,u,1,0x,ff,b,u,2,u,3,break,default,mv,visit,multi,anew,array,insn,read,class,u,1,c,b,u,3,0x,ff,u,4,break,while,tanns,null,tann,tanns,length,ntoff,offset,if,ntoff,offset,int,v,read,annotation,target,context,tanns,tann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,ntoff,tann,tanns,length,read,byte,tanns,tann,0x43,1,read,unsigned,short,tanns,tann,1,while,itanns,null,itann,itanns,length,nitoff,offset,if,nitoff,offset,int,v,read,annotation,target,context,itanns,itann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,nitoff,itann,itanns,length,read,byte,itanns,itann,0x43,1,read,unsigned,short,itanns,itann,1,if,labels,code,length,null,mv,visit,label,labels,code,length,if,context,flags,0,var,table,0,int,type,table,null,if,var,type,table,0,u,var,type,table,2,type,table,new,int,read,unsigned,short,var,type,table,3,for,int,i,type,table,length,i,0,type,table,i,u,6,type,table,i,read,unsigned,short,u,8,type,table,i,read,unsigned,short,u,u,10,u,var,table,2,for,int,i,read,unsigned,short,var,table,i,0,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,int,index,read,unsigned,short,u,8,string,vsignature,null,if,type,table,null,for,int,j,0,j,type,table,length,j,3,if,type,table,j,start,type,table,j,1,index,vsignature,read,utf8,type,table,j,2,c,break,mv,visit,local,variable,read,utf8,u,4,c,read,utf8,u,6,c,vsignature,labels,start,labels,start,length,index,u,10,if,tanns,null,for,int,i,0,i,tanns,length,i,if,read,byte,tanns,i,1,0x40,1,int,v,read,annotation,target,context,tanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,true,if,itanns,null,for,int,i,0,i,itanns,length,i,if,read,byte,itanns,i,1,0x40,1,int,v,read,annotation,target,context,itanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,mv,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(final MethodVisitor mv, final Context context, int u);1505821772;Reads the bytecode of a method and makes the given visitor visit it.__@param mv_the visitor that must visit the method's code._@param context_information about the class being parsed._@param u_the start offset of the code attribute in the class file.;private void readCode(final MethodVisitor mv, final Context context, int u) {_        _        byte[] b = this.b__        char[] c = context.buffer__        int maxStack = readUnsignedShort(u)__        int maxLocals = readUnsignedShort(u + 2)__        int codeLength = readInt(u + 4)__        u += 8___        _        int codeStart = u__        int codeEnd = u + codeLength__        Label[] labels = context.labels = new Label[codeLength + 2]__        readLabel(codeLength + 1, labels)__        while (u < codeEnd) {_            int offset = u - codeStart__            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                readLabel(offset + readShort(u + 1), labels)__                u += 3__                break__            case ClassWriter.ASM_LABEL_INSN:_                readLabel(offset + readUnsignedShort(u + 1), labels)__                u += 3__                break__            case ClassWriter.LABELW_INSN:_            case ClassWriter.ASM_LABELW_INSN:_                readLabel(offset + readInt(u + 1), labels)__                u += 5__                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    u += 6__                } else {_                    u += 4__                }_                break__            case ClassWriter.TABL_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 8) - readInt(u + 4) + 1_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 4__                }_                u += 12__                break__            case ClassWriter.LOOK_INSN:_                _                u = u + 4 - (offset & 3)__                _                readLabel(offset + readInt(u), labels)__                for (int i = readInt(u + 4)_ i > 0_ --i) {_                    readLabel(offset + readInt(u + 12), labels)__                    u += 8__                }_                u += 8__                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                u += 5__                break__            _            default:_                u += 4__                break__            }_        }__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            Label start = readLabel(readUnsignedShort(u + 2), labels)__            Label end = readLabel(readUnsignedShort(u + 4), labels)__            Label handler = readLabel(readUnsignedShort(u + 6), labels)__            String type = readUTF8(items[readUnsignedShort(u + 8)], c)__            mv.visitTryCatchBlock(start, end, handler, type)__            u += 8__        }_        u += 2___        _        int[] tanns = null_ _        int[] itanns = null_ _        int tann = 0_ _        int itann = 0_ _        int ntoff = -1_ _        int nitoff = -1_ _        int varTable = 0__        int varTypeTable = 0__        boolean zip = true__        boolean unzip = (context.flags & EXPAND_FRAMES) != 0__        int stackMap = 0__        int stackMapSize = 0__        int frameCount = 0__        Context frame = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("LocalVariableTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    varTable = u + 8__                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        label += readUnsignedShort(v + 12)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        v += 10__                    }_                }_            } else if ("LocalVariableTypeTable".equals(attrName)) {_                varTypeTable = u + 8__            } else if ("LineNumberTable".equals(attrName)) {_                if ((context.flags & SKIP_DEBUG) == 0) {_                    for (int j = readUnsignedShort(u + 8), v = u_ j > 0_ --j) {_                        int label = readUnsignedShort(v + 10)__                        if (labels[label] == null) {_                            readLabel(label, labels).status |= Label.DEBUG__                        }_                        Label l = labels[label]__                        while (l.line > 0) {_                            if (l.next == null) {_                                l.next = new Label()__                            }_                            l = l.next__                        }_                        l.line = readUnsignedShort(v + 12)__                        v += 4__                    }_                }_            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = readTypeAnnotations(mv, context, u + 8, true)__                ntoff = tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1_                        : readUnsignedShort(tanns[0] + 1)__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = readTypeAnnotations(mv, context, u + 8, false)__                nitoff = itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1_                        : readUnsignedShort(itanns[0] + 1)__            } else if (FRAMES && "StackMapTable".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _                _            } else if (FRAMES && "StackMap".equals(attrName)) {_                if ((context.flags & SKIP_FRAMES) == 0) {_                    zip = false__                    stackMap = u + 10__                    stackMapSize = readInt(u + 4)__                    frameCount = readUnsignedShort(u + 8)__                }_                _            } else {_                for (int j = 0_ j < context.attrs.length_ ++j) {_                    if (context.attrs[j].type.equals(attrName)) {_                        Attribute attr = context.attrs[j].read(this, u + 8,_                                readInt(u + 4), c, codeStart - 8, labels)__                        if (attr != null) {_                            attr.next = attributes__                            attributes = attr__                        }_                    }_                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        if (FRAMES && stackMap != 0) {_            _            frame = context__            frame.offset = -1__            frame.mode = 0__            frame.localCount = 0__            frame.localDiff = 0__            frame.stackCount = 0__            frame.local = new Object[maxLocals]__            frame.stack = new Object[maxStack]__            if (unzip) {_                getImplicitFrame(context)__            }_            _            for (int i = stackMap_ i < stackMap + stackMapSize - 2_ ++i) {_                if (b[i] == 8) { _                    int v = readUnsignedShort(i + 1)__                    if (v >= 0 && v < codeLength) {_                        if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {_                            readLabel(v, labels)__                        }_                    }_                }_            }_        }_        if ((context.flags & EXPAND_ASM_INSNS) != 0_            && (context.flags & EXPAND_FRAMES) != 0) {_            _            _            _            _            _            _            _            _            _            _            _            mv.visitFrame(Opcodes.F_NEW, maxLocals, null, 0, null)__        }__        _        int opcodeDelta = (context.flags & EXPAND_ASM_INSNS) == 0 ? -33 : 0__        boolean insertFrame = false__        u = codeStart__        while (u < codeEnd) {_            int offset = u - codeStart___            _            Label l = labels[offset]__            if (l != null) {_                Label next = l.next__                l.next = null__                mv.visitLabel(l)__                if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {_                    mv.visitLineNumber(l.line, l)__                    while (next != null) {_                        mv.visitLineNumber(next.line, l)__                        next = next.next__                    }_                }_            }__            _            while (FRAMES && frame != null_                    && (frame.offset == offset || frame.offset == -1)) {_                _                _                if (frame.offset != -1) {_                    if (!zip || unzip) {_                        mv.visitFrame(Opcodes.F_NEW, frame.localCount,_                                frame.local, frame.stackCount, frame.stack)__                    } else {_                        mv.visitFrame(frame.mode, frame.localDiff, frame.local,_                                frame.stackCount, frame.stack)__                    }_                    _                    _                    insertFrame = false__                }_                if (frameCount > 0) {_                    stackMap = readFrame(stackMap, zip, unzip, frame)__                    --frameCount__                } else {_                    frame = null__                }_            }_            _            _            _            if (FRAMES && insertFrame) {_                mv.visitFrame(ClassWriter.F_INSERT, 0, null, 0, null)__                insertFrame = false__            }__            _            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_                mv.visitInsn(opcode)__                u += 1__                break__            case ClassWriter.IMPLVAR_INSN:_                if (opcode > Opcodes.ISTORE) {_                    opcode -= 59_ _                    mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),_                            opcode & 0x3)__                } else {_                    opcode -= 26_ _                    mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__                }_                u += 1__                break__            case ClassWriter.LABEL_INSN:_                mv.visitJumpInsn(opcode, labels[offset + readShort(u + 1)])__                u += 3__                break__            case ClassWriter.LABELW_INSN:_                mv.visitJumpInsn(opcode + opcodeDelta, labels[offset_                        + readInt(u + 1)])__                u += 5__                break__            case ClassWriter.ASM_LABEL_INSN: {_                _                _                _                opcode = opcode < 218 ? opcode - 49 : opcode - 20__                Label target = labels[offset + readUnsignedShort(u + 1)]__                _                _                _                _                _                if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_                    mv.visitJumpInsn(opcode + 33, target)__                } else {_                    opcode = opcode <= 166 ? ((opcode + 1) ^ 1) - 1_                            : opcode ^ 1__                    Label endif = readLabel(offset + 3, labels)__                    mv.visitJumpInsn(opcode, endif)__                    mv.visitJumpInsn(200, target)_ _                    _                    _                    _                    insertFrame = true__                }_                u += 3__                break__            }_            case ClassWriter.ASM_LABELW_INSN: {_                _                mv.visitJumpInsn(200, labels[offset + readInt(u + 1)])__                _                _                _                insertFrame = true__                u += 5__                break__            }_            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    mv.visitIincInsn(readUnsignedShort(u + 2), readShort(u + 4))__                    u += 6__                } else {_                    mv.visitVarInsn(opcode, readUnsignedShort(u + 2))__                    u += 4__                }_                break__            case ClassWriter.TABL_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int min = readInt(u + 4)__                int max = readInt(u + 8)__                Label[] table = new Label[max - min + 1]__                u += 12__                for (int i = 0_ i < table.length_ ++i) {_                    table[i] = labels[offset + readInt(u)]__                    u += 4__                }_                mv.visitTableSwitchInsn(min, max, labels[label], table)__                break__            }_            case ClassWriter.LOOK_INSN: {_                _                u = u + 4 - (offset & 3)__                _                int label = offset + readInt(u)__                int len = readInt(u + 4)__                int[] keys = new int[len]__                Label[] values = new Label[len]__                u += 8__                for (int i = 0_ i < len_ ++i) {_                    keys[i] = readInt(u)__                    values[i] = labels[offset + readInt(u + 4)]__                    u += 8__                }_                mv.visitLookupSwitchInsn(labels[label], keys, values)__                break__            }_            case ClassWriter.VAR_INSN:_                mv.visitVarInsn(opcode, b[u + 1] & 0xFF)__                u += 2__                break__            case ClassWriter.SBYTE_INSN:_                mv.visitIntInsn(opcode, b[u + 1])__                u += 2__                break__            case ClassWriter.SHORT_INSN:_                mv.visitIntInsn(opcode, readShort(u + 1))__                u += 3__                break__            case ClassWriter.LDC_INSN:_                mv.visitLdcInsn(readConst(b[u + 1] & 0xFF, c))__                u += 2__                break__            case ClassWriter.LDCW_INSN:_                mv.visitLdcInsn(readConst(readUnsignedShort(u + 1), c))__                u += 3__                break__            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.ITFMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                boolean itf = b[cpIndex - 1] == ClassWriter.IMETH__                String iowner = readClass(cpIndex, c)__                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                if (opcode < Opcodes.INVOKEVIRTUAL) {_                    mv.visitFieldInsn(opcode, iowner, iname, idesc)__                } else {_                    mv.visitMethodInsn(opcode, iowner, iname, idesc, itf)__                }_                if (opcode == Opcodes.INVOKEINTERFACE) {_                    u += 5__                } else {_                    u += 3__                }_                break__            }_            case ClassWriter.INDYMETH_INSN: {_                int cpIndex = items[readUnsignedShort(u + 1)]__                int bsmIndex = context.bootstrapMethods[readUnsignedShort(cpIndex)]__                Handle bsm = (Handle) readConst(readUnsignedShort(bsmIndex), c)__                int bsmArgCount = readUnsignedShort(bsmIndex + 2)__                Object[] bsmArgs = new Object[bsmArgCount]__                bsmIndex += 4__                for (int i = 0_ i < bsmArgCount_ i++) {_                    bsmArgs[i] = readConst(readUnsignedShort(bsmIndex), c)__                    bsmIndex += 2__                }_                cpIndex = items[readUnsignedShort(cpIndex + 2)]__                String iname = readUTF8(cpIndex, c)__                String idesc = readUTF8(cpIndex + 2, c)__                mv.visitInvokeDynamicInsn(iname, idesc, bsm, bsmArgs)__                u += 5__                break__            }_            case ClassWriter.TYPE_INSN:_                mv.visitTypeInsn(opcode, readClass(u + 1, c))__                u += 3__                break__            case ClassWriter.IINC_INSN:_                mv.visitIincInsn(b[u + 1] & 0xFF, b[u + 2])__                u += 3__                break__            _            default:_                mv.visitMultiANewArrayInsn(readClass(u + 1, c), b[u + 3] & 0xFF)__                u += 4__                break__            }__            _            while (tanns != null && tann < tanns.length && ntoff <= offset) {_                if (ntoff == offset) {_                    int v = readAnnotationTarget(context, tanns[tann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), true))__                }_                ntoff = ++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1_                        : readUnsignedShort(tanns[tann] + 1)__            }_            while (itanns != null && itann < itanns.length && nitoff <= offset) {_                if (nitoff == offset) {_                    int v = readAnnotationTarget(context, itanns[itann])__                    readAnnotationValues(v + 2, c, true,_                            mv.visitInsnAnnotation(context.typeRef,_                                    context.typePath, readUTF8(v, c), false))__                }_                nitoff = ++itann >= itanns.length_                        || readByte(itanns[itann]) < 0x43 ? -1_                        : readUnsignedShort(itanns[itann] + 1)__            }_        }_        if (labels[codeLength] != null) {_            mv.visitLabel(labels[codeLength])__        }__        _        if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {_            int[] typeTable = null__            if (varTypeTable != 0) {_                u = varTypeTable + 2__                typeTable = new int[readUnsignedShort(varTypeTable) * 3]__                for (int i = typeTable.length_ i > 0_) {_                    typeTable[--i] = u + 6_ _                    typeTable[--i] = readUnsignedShort(u + 8)_ _                    typeTable[--i] = readUnsignedShort(u)_ _                    u += 10__                }_            }_            u = varTable + 2__            for (int i = readUnsignedShort(varTable)_ i > 0_ --i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                int index = readUnsignedShort(u + 8)__                String vsignature = null__                if (typeTable != null) {_                    for (int j = 0_ j < typeTable.length_ j += 3) {_                        if (typeTable[j] == start && typeTable[j + 1] == index) {_                            vsignature = readUTF8(typeTable[j + 2], c)__                            break__                        }_                    }_                }_                mv.visitLocalVariable(readUTF8(u + 4, c), readUTF8(u + 6, c),_                        vsignature, labels[start], labels[start + length],_                        index)__                u += 10__            }_        }__        _        if (tanns != null) {_            for (int i = 0_ i < tanns.length_ ++i) {_                if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, tanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    true))__                }_            }_        }_        if (itanns != null) {_            for (int i = 0_ i < itanns.length_ ++i) {_                if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {_                    int v = readAnnotationTarget(context, itanns[i])__                    v = readAnnotationValues(v + 2, c, true,_                            mv.visitLocalVariableAnnotation(context.typeRef,_                                    context.typePath, context.start,_                                    context.end, context.index, readUTF8(v, c),_                                    false))__                }_            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            mv.visitAttribute(attributes)__            attributes = attr__        }__        _        mv.visitMaxs(maxStack, maxLocals)__    };reads,the,bytecode,of,a,method,and,makes,the,given,visitor,visit,it,param,mv,the,visitor,that,must,visit,the,method,s,code,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,code,attribute,in,the,class,file;private,void,read,code,final,method,visitor,mv,final,context,context,int,u,byte,b,this,b,char,c,context,buffer,int,max,stack,read,unsigned,short,u,int,max,locals,read,unsigned,short,u,2,int,code,length,read,int,u,4,u,8,int,code,start,u,int,code,end,u,code,length,label,labels,context,labels,new,label,code,length,2,read,label,code,length,1,labels,while,u,code,end,int,offset,u,code,start,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,read,label,offset,read,short,u,1,labels,u,3,break,case,class,writer,read,label,offset,read,unsigned,short,u,1,labels,u,3,break,case,class,writer,case,class,writer,read,label,offset,read,int,u,1,labels,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,8,read,int,u,4,1,i,0,i,read,label,offset,read,int,u,12,labels,u,4,u,12,break,case,class,writer,u,u,4,offset,3,read,label,offset,read,int,u,labels,for,int,i,read,int,u,4,i,0,i,read,label,offset,read,int,u,12,labels,u,8,u,8,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,for,int,i,read,unsigned,short,u,i,0,i,label,start,read,label,read,unsigned,short,u,2,labels,label,end,read,label,read,unsigned,short,u,4,labels,label,handler,read,label,read,unsigned,short,u,6,labels,string,type,read,utf8,items,read,unsigned,short,u,8,c,mv,visit,try,catch,block,start,end,handler,type,u,8,u,2,int,tanns,null,int,itanns,null,int,tann,0,int,itann,0,int,ntoff,1,int,nitoff,1,int,var,table,0,int,var,type,table,0,boolean,zip,true,boolean,unzip,context,flags,0,int,stack,map,0,int,stack,map,size,0,int,frame,count,0,context,frame,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,local,variable,table,equals,attr,name,if,context,flags,0,var,table,u,8,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,read,unsigned,short,v,12,if,labels,label,null,read,label,label,labels,status,label,debug,v,10,else,if,local,variable,type,table,equals,attr,name,var,type,table,u,8,else,if,line,number,table,equals,attr,name,if,context,flags,0,for,int,j,read,unsigned,short,u,8,v,u,j,0,j,int,label,read,unsigned,short,v,10,if,labels,label,null,read,label,label,labels,status,label,debug,label,l,labels,label,while,l,line,0,if,l,next,null,l,next,new,label,l,l,next,l,line,read,unsigned,short,v,12,v,4,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,read,type,annotations,mv,context,u,8,true,ntoff,tanns,length,0,read,byte,tanns,0,0x43,1,read,unsigned,short,tanns,0,1,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,read,type,annotations,mv,context,u,8,false,nitoff,itanns,length,0,read,byte,itanns,0,0x43,1,read,unsigned,short,itanns,0,1,else,if,frames,stack,map,table,equals,attr,name,if,context,flags,0,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,if,frames,stack,map,equals,attr,name,if,context,flags,0,zip,false,stack,map,u,10,stack,map,size,read,int,u,4,frame,count,read,unsigned,short,u,8,else,for,int,j,0,j,context,attrs,length,j,if,context,attrs,j,type,equals,attr,name,attribute,attr,context,attrs,j,read,this,u,8,read,int,u,4,c,code,start,8,labels,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,if,frames,stack,map,0,frame,context,frame,offset,1,frame,mode,0,frame,local,count,0,frame,local,diff,0,frame,stack,count,0,frame,local,new,object,max,locals,frame,stack,new,object,max,stack,if,unzip,get,implicit,frame,context,for,int,i,stack,map,i,stack,map,stack,map,size,2,i,if,b,i,8,int,v,read,unsigned,short,i,1,if,v,0,v,code,length,if,b,code,start,v,0x,ff,opcodes,new,read,label,v,labels,if,context,flags,0,context,flags,0,mv,visit,frame,opcodes,max,locals,null,0,null,int,opcode,delta,context,flags,0,33,0,boolean,insert,frame,false,u,code,start,while,u,code,end,int,offset,u,code,start,label,l,labels,offset,if,l,null,label,next,l,next,l,next,null,mv,visit,label,l,if,context,flags,0,l,line,0,mv,visit,line,number,l,line,l,while,next,null,mv,visit,line,number,next,line,l,next,next,next,while,frames,frame,null,frame,offset,offset,frame,offset,1,if,frame,offset,1,if,zip,unzip,mv,visit,frame,opcodes,frame,local,count,frame,local,frame,stack,count,frame,stack,else,mv,visit,frame,frame,mode,frame,local,diff,frame,local,frame,stack,count,frame,stack,insert,frame,false,if,frame,count,0,stack,map,read,frame,stack,map,zip,unzip,frame,frame,count,else,frame,null,if,frames,insert,frame,mv,visit,frame,class,writer,0,null,0,null,insert,frame,false,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,mv,visit,insn,opcode,u,1,break,case,class,writer,if,opcode,opcodes,istore,opcode,59,mv,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,else,opcode,26,mv,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,u,1,break,case,class,writer,mv,visit,jump,insn,opcode,labels,offset,read,short,u,1,u,3,break,case,class,writer,mv,visit,jump,insn,opcode,opcode,delta,labels,offset,read,int,u,1,u,5,break,case,class,writer,opcode,opcode,218,opcode,49,opcode,20,label,target,labels,offset,read,unsigned,short,u,1,if,opcode,opcodes,goto,opcode,opcodes,jsr,mv,visit,jump,insn,opcode,33,target,else,opcode,opcode,166,opcode,1,1,1,opcode,1,label,endif,read,label,offset,3,labels,mv,visit,jump,insn,opcode,endif,mv,visit,jump,insn,200,target,insert,frame,true,u,3,break,case,class,writer,mv,visit,jump,insn,200,labels,offset,read,int,u,1,insert,frame,true,u,5,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,mv,visit,iinc,insn,read,unsigned,short,u,2,read,short,u,4,u,6,else,mv,visit,var,insn,opcode,read,unsigned,short,u,2,u,4,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,min,read,int,u,4,int,max,read,int,u,8,label,table,new,label,max,min,1,u,12,for,int,i,0,i,table,length,i,table,i,labels,offset,read,int,u,u,4,mv,visit,table,switch,insn,min,max,labels,label,table,break,case,class,writer,u,u,4,offset,3,int,label,offset,read,int,u,int,len,read,int,u,4,int,keys,new,int,len,label,values,new,label,len,u,8,for,int,i,0,i,len,i,keys,i,read,int,u,values,i,labels,offset,read,int,u,4,u,8,mv,visit,lookup,switch,insn,labels,label,keys,values,break,case,class,writer,mv,visit,var,insn,opcode,b,u,1,0x,ff,u,2,break,case,class,writer,mv,visit,int,insn,opcode,b,u,1,u,2,break,case,class,writer,mv,visit,int,insn,opcode,read,short,u,1,u,3,break,case,class,writer,mv,visit,ldc,insn,read,const,b,u,1,0x,ff,c,u,2,break,case,class,writer,mv,visit,ldc,insn,read,const,read,unsigned,short,u,1,c,u,3,break,case,class,writer,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,boolean,itf,b,cp,index,1,class,writer,imeth,string,iowner,read,class,cp,index,c,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,if,opcode,opcodes,invokevirtual,mv,visit,field,insn,opcode,iowner,iname,idesc,else,mv,visit,method,insn,opcode,iowner,iname,idesc,itf,if,opcode,opcodes,invokeinterface,u,5,else,u,3,break,case,class,writer,int,cp,index,items,read,unsigned,short,u,1,int,bsm,index,context,bootstrap,methods,read,unsigned,short,cp,index,handle,bsm,handle,read,const,read,unsigned,short,bsm,index,c,int,bsm,arg,count,read,unsigned,short,bsm,index,2,object,bsm,args,new,object,bsm,arg,count,bsm,index,4,for,int,i,0,i,bsm,arg,count,i,bsm,args,i,read,const,read,unsigned,short,bsm,index,c,bsm,index,2,cp,index,items,read,unsigned,short,cp,index,2,string,iname,read,utf8,cp,index,c,string,idesc,read,utf8,cp,index,2,c,mv,visit,invoke,dynamic,insn,iname,idesc,bsm,bsm,args,u,5,break,case,class,writer,mv,visit,type,insn,opcode,read,class,u,1,c,u,3,break,case,class,writer,mv,visit,iinc,insn,b,u,1,0x,ff,b,u,2,u,3,break,default,mv,visit,multi,anew,array,insn,read,class,u,1,c,b,u,3,0x,ff,u,4,break,while,tanns,null,tann,tanns,length,ntoff,offset,if,ntoff,offset,int,v,read,annotation,target,context,tanns,tann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,ntoff,tann,tanns,length,read,byte,tanns,tann,0x43,1,read,unsigned,short,tanns,tann,1,while,itanns,null,itann,itanns,length,nitoff,offset,if,nitoff,offset,int,v,read,annotation,target,context,itanns,itann,read,annotation,values,v,2,c,true,mv,visit,insn,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,nitoff,itann,itanns,length,read,byte,itanns,itann,0x43,1,read,unsigned,short,itanns,itann,1,if,labels,code,length,null,mv,visit,label,labels,code,length,if,context,flags,0,var,table,0,int,type,table,null,if,var,type,table,0,u,var,type,table,2,type,table,new,int,read,unsigned,short,var,type,table,3,for,int,i,type,table,length,i,0,type,table,i,u,6,type,table,i,read,unsigned,short,u,8,type,table,i,read,unsigned,short,u,u,10,u,var,table,2,for,int,i,read,unsigned,short,var,table,i,0,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,int,index,read,unsigned,short,u,8,string,vsignature,null,if,type,table,null,for,int,j,0,j,type,table,length,j,3,if,type,table,j,start,type,table,j,1,index,vsignature,read,utf8,type,table,j,2,c,break,mv,visit,local,variable,read,utf8,u,4,c,read,utf8,u,6,c,vsignature,labels,start,labels,start,length,index,u,10,if,tanns,null,for,int,i,0,i,tanns,length,i,if,read,byte,tanns,i,1,0x40,1,int,v,read,annotation,target,context,tanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,true,if,itanns,null,for,int,i,0,i,itanns,length,i,if,read,byte,itanns,i,1,0x40,1,int,v,read,annotation,target,context,itanns,i,v,read,annotation,values,v,2,c,true,mv,visit,local,variable,annotation,context,type,ref,context,type,path,context,start,context,end,context,index,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,mv,visit,attribute,attributes,attributes,attr,mv,visit,maxs,max,stack,max,locals
ClassReader -> private int getAttributes();1366718246;Returns the start index of the attribute_info structure of this class.__@return the start index of the attribute_info structure of this class.;private int getAttributes() {_        _        int u = header + 8 + readUnsignedShort(header + 6) * 2__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        u += 2__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        _        return u + 2__    };returns,the,start,index,of,the,structure,of,this,class,return,the,start,index,of,the,structure,of,this,class;private,int,get,attributes,int,u,header,8,read,unsigned,short,header,6,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,u,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,return,u,2
ClassReader -> private int getAttributes();1395273982;Returns the start index of the attribute_info structure of this class.__@return the start index of the attribute_info structure of this class.;private int getAttributes() {_        _        int u = header + 8 + readUnsignedShort(header + 6) * 2__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        u += 2__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        _        return u + 2__    };returns,the,start,index,of,the,structure,of,this,class,return,the,start,index,of,the,structure,of,this,class;private,int,get,attributes,int,u,header,8,read,unsigned,short,header,6,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,u,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,return,u,2
ClassReader -> private int getAttributes();1414067099;Returns the start index of the attribute_info structure of this class.__@return the start index of the attribute_info structure of this class.;private int getAttributes() {_        _        int u = header + 8 + readUnsignedShort(header + 6) * 2__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        u += 2__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        _        return u + 2__    };returns,the,start,index,of,the,structure,of,this,class,return,the,start,index,of,the,structure,of,this,class;private,int,get,attributes,int,u,header,8,read,unsigned,short,header,6,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,u,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,return,u,2
ClassReader -> private int getAttributes();1414499035;Returns the start index of the attribute_info structure of this class.__@return the start index of the attribute_info structure of this class.;private int getAttributes() {_        _        int u = header + 8 + readUnsignedShort(header + 6) * 2__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        u += 2__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        _        return u + 2__    };returns,the,start,index,of,the,structure,of,this,class,return,the,start,index,of,the,structure,of,this,class;private,int,get,attributes,int,u,header,8,read,unsigned,short,header,6,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,u,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,return,u,2
ClassReader -> private int getAttributes();1416998550;Returns the start index of the attribute_info structure of this class.__@return the start index of the attribute_info structure of this class.;private int getAttributes() {_        _        int u = header + 8 + readUnsignedShort(header + 6) * 2__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        u += 2__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        _        return u + 2__    };returns,the,start,index,of,the,structure,of,this,class,return,the,start,index,of,the,structure,of,this,class;private,int,get,attributes,int,u,header,8,read,unsigned,short,header,6,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,u,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,return,u,2
ClassReader -> private int getAttributes();1457705343;Returns the start index of the attribute_info structure of this class.__@return the start index of the attribute_info structure of this class.;private int getAttributes() {_        _        int u = header + 8 + readUnsignedShort(header + 6) * 2__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        u += 2__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        _        return u + 2__    };returns,the,start,index,of,the,structure,of,this,class,return,the,start,index,of,the,structure,of,this,class;private,int,get,attributes,int,u,header,8,read,unsigned,short,header,6,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,u,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,return,u,2
ClassReader -> private int getAttributes();1459258703;Returns the start index of the attribute_info structure of this class.__@return the start index of the attribute_info structure of this class.;private int getAttributes() {_        _        int u = header + 8 + readUnsignedShort(header + 6) * 2__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        u += 2__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        _        return u + 2__    };returns,the,start,index,of,the,structure,of,this,class,return,the,start,index,of,the,structure,of,this,class;private,int,get,attributes,int,u,header,8,read,unsigned,short,header,6,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,u,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,return,u,2
ClassReader -> private int getAttributes();1478623137;Returns the start index of the attribute_info structure of this class.__@return the start index of the attribute_info structure of this class.;private int getAttributes() {_        _        int u = header + 8 + readUnsignedShort(header + 6) * 2__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        u += 2__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        _        return u + 2__    };returns,the,start,index,of,the,structure,of,this,class,return,the,start,index,of,the,structure,of,this,class;private,int,get,attributes,int,u,header,8,read,unsigned,short,header,6,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,u,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,return,u,2
ClassReader -> private int getAttributes();1483093254;Returns the start index of the attribute_info structure of this class.__@return the start index of the attribute_info structure of this class.;private int getAttributes() {_        _        int u = header + 8 + readUnsignedShort(header + 6) * 2__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        u += 2__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        _        return u + 2__    };returns,the,start,index,of,the,structure,of,this,class,return,the,start,index,of,the,structure,of,this,class;private,int,get,attributes,int,u,header,8,read,unsigned,short,header,6,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,u,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,return,u,2
ClassReader -> private int getAttributes();1505821772;Returns the start index of the attribute_info structure of this class.__@return the start index of the attribute_info structure of this class.;private int getAttributes() {_        _        int u = header + 8 + readUnsignedShort(header + 6) * 2__        _        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        u += 2__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            for (int j = readUnsignedShort(u + 8)_ j > 0_ --j) {_                u += 6 + readInt(u + 12)__            }_            u += 8__        }_        _        return u + 2__    };returns,the,start,index,of,the,structure,of,this,class,return,the,start,index,of,the,structure,of,this,class;private,int,get,attributes,int,u,header,8,read,unsigned,short,header,6,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,u,2,for,int,i,read,unsigned,short,u,i,0,i,for,int,j,read,unsigned,short,u,8,j,0,j,u,6,read,int,u,12,u,8,return,u,2
ClassReader -> private ConstantDynamic readConstantDynamic(       final int constantPoolEntryIndex, final char[] charBuffer);1531241461;Reads a CONSTANT_Dynamic constant pool entry in {@link #b}.__@param constantPoolEntryIndex the index of a CONSTANT_Dynamic entry in the class's constant_pool table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the ConstantDynamic corresponding to the specified CONSTANT_Dynamic entry.;private ConstantDynamic readConstantDynamic(_      final int constantPoolEntryIndex, final char[] charBuffer) {_    ConstantDynamic constantDynamic = (ConstantDynamic) cpInfoValues[constantPoolEntryIndex]__    if (constantDynamic != null) {_      return constantDynamic__    }_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__    String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__    String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__    int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)]__    Handle handle = (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__    Object[] bootstrapMethodArguments = new Object[readUnsignedShort(bootstrapMethodOffset + 2)]__    bootstrapMethodOffset += 4__    for (int i = 0_ i < bootstrapMethodArguments.length_ i++) {_      bootstrapMethodArguments[i] = readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__      bootstrapMethodOffset += 2__    }_    constantDynamic = new ConstantDynamic(name, descriptor, handle, bootstrapMethodArguments)__    cpInfoValues[constantPoolEntryIndex] = constantDynamic__    return constantDynamic__  };reads,a,constant,pool,entry,in,link,b,param,constant,pool,entry,index,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,constant,dynamic,corresponding,to,the,specified,entry;private,constant,dynamic,read,constant,dynamic,final,int,constant,pool,entry,index,final,char,char,buffer,constant,dynamic,constant,dynamic,constant,dynamic,cp,info,values,constant,pool,entry,index,if,constant,dynamic,null,return,constant,dynamic,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,int,bootstrap,method,offset,bootstrap,method,offsets,read,unsigned,short,cp,info,offset,handle,handle,handle,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,object,bootstrap,method,arguments,new,object,read,unsigned,short,bootstrap,method,offset,2,bootstrap,method,offset,4,for,int,i,0,i,bootstrap,method,arguments,length,i,bootstrap,method,arguments,i,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,bootstrap,method,offset,2,constant,dynamic,new,constant,dynamic,name,descriptor,handle,bootstrap,method,arguments,cp,info,values,constant,pool,entry,index,constant,dynamic,return,constant,dynamic
ClassReader -> private ConstantDynamic readConstantDynamic(       final int constantPoolEntryIndex, final char[] charBuffer);1536664245;Reads a CONSTANT_Dynamic constant pool entry in {@link #b}.__@param constantPoolEntryIndex the index of a CONSTANT_Dynamic entry in the class's constant_pool table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the ConstantDynamic corresponding to the specified CONSTANT_Dynamic entry.;private ConstantDynamic readConstantDynamic(_      final int constantPoolEntryIndex, final char[] charBuffer) {_    ConstantDynamic constantDynamic = (ConstantDynamic) cpInfoValues[constantPoolEntryIndex]__    if (constantDynamic != null) {_      return constantDynamic__    }_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__    String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__    String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__    int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)]__    Handle handle = (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__    Object[] bootstrapMethodArguments = new Object[readUnsignedShort(bootstrapMethodOffset + 2)]__    bootstrapMethodOffset += 4__    for (int i = 0_ i < bootstrapMethodArguments.length_ i++) {_      bootstrapMethodArguments[i] = readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__      bootstrapMethodOffset += 2__    }_    constantDynamic = new ConstantDynamic(name, descriptor, handle, bootstrapMethodArguments)__    cpInfoValues[constantPoolEntryIndex] = constantDynamic__    return constantDynamic__  };reads,a,constant,pool,entry,in,link,b,param,constant,pool,entry,index,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,constant,dynamic,corresponding,to,the,specified,entry;private,constant,dynamic,read,constant,dynamic,final,int,constant,pool,entry,index,final,char,char,buffer,constant,dynamic,constant,dynamic,constant,dynamic,cp,info,values,constant,pool,entry,index,if,constant,dynamic,null,return,constant,dynamic,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,int,bootstrap,method,offset,bootstrap,method,offsets,read,unsigned,short,cp,info,offset,handle,handle,handle,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,object,bootstrap,method,arguments,new,object,read,unsigned,short,bootstrap,method,offset,2,bootstrap,method,offset,4,for,int,i,0,i,bootstrap,method,arguments,length,i,bootstrap,method,arguments,i,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,bootstrap,method,offset,2,constant,dynamic,new,constant,dynamic,name,descriptor,handle,bootstrap,method,arguments,cp,info,values,constant,pool,entry,index,constant,dynamic,return,constant,dynamic
ClassReader -> private ConstantDynamic readConstantDynamic(       final int constantPoolEntryIndex, final char[] charBuffer);1536747989;Reads a CONSTANT_Dynamic constant pool entry in {@link #b}.__@param constantPoolEntryIndex the index of a CONSTANT_Dynamic entry in the class's constant_pool table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the ConstantDynamic corresponding to the specified CONSTANT_Dynamic entry.;private ConstantDynamic readConstantDynamic(_      final int constantPoolEntryIndex, final char[] charBuffer) {_    ConstantDynamic constantDynamic = constantDynamicValues[constantPoolEntryIndex]__    if (constantDynamic != null) {_      return constantDynamic__    }_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__    String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__    String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__    int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)]__    Handle handle = (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__    Object[] bootstrapMethodArguments = new Object[readUnsignedShort(bootstrapMethodOffset + 2)]__    bootstrapMethodOffset += 4__    for (int i = 0_ i < bootstrapMethodArguments.length_ i++) {_      bootstrapMethodArguments[i] = readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__      bootstrapMethodOffset += 2__    }_    return constantDynamicValues[constantPoolEntryIndex] =_        new ConstantDynamic(name, descriptor, handle, bootstrapMethodArguments)__  };reads,a,constant,pool,entry,in,link,b,param,constant,pool,entry,index,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,constant,dynamic,corresponding,to,the,specified,entry;private,constant,dynamic,read,constant,dynamic,final,int,constant,pool,entry,index,final,char,char,buffer,constant,dynamic,constant,dynamic,constant,dynamic,values,constant,pool,entry,index,if,constant,dynamic,null,return,constant,dynamic,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,int,bootstrap,method,offset,bootstrap,method,offsets,read,unsigned,short,cp,info,offset,handle,handle,handle,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,object,bootstrap,method,arguments,new,object,read,unsigned,short,bootstrap,method,offset,2,bootstrap,method,offset,4,for,int,i,0,i,bootstrap,method,arguments,length,i,bootstrap,method,arguments,i,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,bootstrap,method,offset,2,return,constant,dynamic,values,constant,pool,entry,index,new,constant,dynamic,name,descriptor,handle,bootstrap,method,arguments
ClassReader -> private ConstantDynamic readConstantDynamic(       final int constantPoolEntryIndex, final char[] charBuffer);1537204147;Reads a CONSTANT_Dynamic constant pool entry in {@link #b}.__@param constantPoolEntryIndex the index of a CONSTANT_Dynamic entry in the class's constant_pool table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the ConstantDynamic corresponding to the specified CONSTANT_Dynamic entry.;private ConstantDynamic readConstantDynamic(_      final int constantPoolEntryIndex, final char[] charBuffer) {_    ConstantDynamic constantDynamic = constantDynamicValues[constantPoolEntryIndex]__    if (constantDynamic != null) {_      return constantDynamic__    }_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__    String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__    String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__    int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)]__    Handle handle = (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__    Object[] bootstrapMethodArguments = new Object[readUnsignedShort(bootstrapMethodOffset + 2)]__    bootstrapMethodOffset += 4__    for (int i = 0_ i < bootstrapMethodArguments.length_ i++) {_      bootstrapMethodArguments[i] = readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__      bootstrapMethodOffset += 2__    }_    return constantDynamicValues[constantPoolEntryIndex] =_        new ConstantDynamic(name, descriptor, handle, bootstrapMethodArguments)__  };reads,a,constant,pool,entry,in,link,b,param,constant,pool,entry,index,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,constant,dynamic,corresponding,to,the,specified,entry;private,constant,dynamic,read,constant,dynamic,final,int,constant,pool,entry,index,final,char,char,buffer,constant,dynamic,constant,dynamic,constant,dynamic,values,constant,pool,entry,index,if,constant,dynamic,null,return,constant,dynamic,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,int,bootstrap,method,offset,bootstrap,method,offsets,read,unsigned,short,cp,info,offset,handle,handle,handle,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,object,bootstrap,method,arguments,new,object,read,unsigned,short,bootstrap,method,offset,2,bootstrap,method,offset,4,for,int,i,0,i,bootstrap,method,arguments,length,i,bootstrap,method,arguments,i,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,bootstrap,method,offset,2,return,constant,dynamic,values,constant,pool,entry,index,new,constant,dynamic,name,descriptor,handle,bootstrap,method,arguments
ClassReader -> private ConstantDynamic readConstantDynamic(       final int constantPoolEntryIndex, final char[] charBuffer);1539119582;Reads a CONSTANT_Dynamic constant pool entry in {@link #b}.__@param constantPoolEntryIndex the index of a CONSTANT_Dynamic entry in the class's constant_pool table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the ConstantDynamic corresponding to the specified CONSTANT_Dynamic entry.;private ConstantDynamic readConstantDynamic(_      final int constantPoolEntryIndex, final char[] charBuffer) {_    ConstantDynamic constantDynamic = constantDynamicValues[constantPoolEntryIndex]__    if (constantDynamic != null) {_      return constantDynamic__    }_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__    String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__    String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__    int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)]__    Handle handle = (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__    Object[] bootstrapMethodArguments = new Object[readUnsignedShort(bootstrapMethodOffset + 2)]__    bootstrapMethodOffset += 4__    for (int i = 0_ i < bootstrapMethodArguments.length_ i++) {_      bootstrapMethodArguments[i] = readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__      bootstrapMethodOffset += 2__    }_    return constantDynamicValues[constantPoolEntryIndex] =_        new ConstantDynamic(name, descriptor, handle, bootstrapMethodArguments)__  };reads,a,constant,pool,entry,in,link,b,param,constant,pool,entry,index,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,constant,dynamic,corresponding,to,the,specified,entry;private,constant,dynamic,read,constant,dynamic,final,int,constant,pool,entry,index,final,char,char,buffer,constant,dynamic,constant,dynamic,constant,dynamic,values,constant,pool,entry,index,if,constant,dynamic,null,return,constant,dynamic,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,int,bootstrap,method,offset,bootstrap,method,offsets,read,unsigned,short,cp,info,offset,handle,handle,handle,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,object,bootstrap,method,arguments,new,object,read,unsigned,short,bootstrap,method,offset,2,bootstrap,method,offset,4,for,int,i,0,i,bootstrap,method,arguments,length,i,bootstrap,method,arguments,i,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,bootstrap,method,offset,2,return,constant,dynamic,values,constant,pool,entry,index,new,constant,dynamic,name,descriptor,handle,bootstrap,method,arguments
ClassReader -> private ConstantDynamic readConstantDynamic(       final int constantPoolEntryIndex, final char[] charBuffer);1541436263;Reads a CONSTANT_Dynamic constant pool entry in {@link #b}.__@param constantPoolEntryIndex the index of a CONSTANT_Dynamic entry in the class's constant_pool table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the ConstantDynamic corresponding to the specified CONSTANT_Dynamic entry.;private ConstantDynamic readConstantDynamic(_      final int constantPoolEntryIndex, final char[] charBuffer) {_    ConstantDynamic constantDynamic = constantDynamicValues[constantPoolEntryIndex]__    if (constantDynamic != null) {_      return constantDynamic__    }_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__    String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__    String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__    int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)]__    Handle handle = (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__    Object[] bootstrapMethodArguments = new Object[readUnsignedShort(bootstrapMethodOffset + 2)]__    bootstrapMethodOffset += 4__    for (int i = 0_ i < bootstrapMethodArguments.length_ i++) {_      bootstrapMethodArguments[i] = readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__      bootstrapMethodOffset += 2__    }_    return constantDynamicValues[constantPoolEntryIndex] =_        new ConstantDynamic(name, descriptor, handle, bootstrapMethodArguments)__  };reads,a,constant,pool,entry,in,link,b,param,constant,pool,entry,index,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,constant,dynamic,corresponding,to,the,specified,entry;private,constant,dynamic,read,constant,dynamic,final,int,constant,pool,entry,index,final,char,char,buffer,constant,dynamic,constant,dynamic,constant,dynamic,values,constant,pool,entry,index,if,constant,dynamic,null,return,constant,dynamic,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,int,bootstrap,method,offset,bootstrap,method,offsets,read,unsigned,short,cp,info,offset,handle,handle,handle,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,object,bootstrap,method,arguments,new,object,read,unsigned,short,bootstrap,method,offset,2,bootstrap,method,offset,4,for,int,i,0,i,bootstrap,method,arguments,length,i,bootstrap,method,arguments,i,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,bootstrap,method,offset,2,return,constant,dynamic,values,constant,pool,entry,index,new,constant,dynamic,name,descriptor,handle,bootstrap,method,arguments
ClassReader -> public String readModule(final int offset, final char[] charBuffer);1531241461;Reads a CONSTANT_Module constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Module entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Module entry.;public String readModule(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,module,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readModule(final int offset, final char[] charBuffer);1536664245;Reads a CONSTANT_Module constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Module entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Module entry.;public String readModule(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,module,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readModule(final int offset, final char[] charBuffer);1536747989;Reads a CONSTANT_Module constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Module entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Module entry.;public String readModule(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,module,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readModule(final int offset, final char[] charBuffer);1537204147;Reads a CONSTANT_Module constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Module entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Module entry.;public String readModule(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,module,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readModule(final int offset, final char[] charBuffer);1539119582;Reads a CONSTANT_Module constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Module entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Module entry.;public String readModule(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,module,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public String readModule(final int offset, final char[] charBuffer);1541436263;Reads a CONSTANT_Module constant pool entry in {@link #b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Module entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Module entry.;public String readModule(final int offset, final char[] charBuffer) {_    return readStringish(offset, charBuffer)__  };reads,a,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;public,string,read,module,final,int,offset,final,char,char,buffer,return,read,stringish,offset,char,buffer
ClassReader -> public long readLong(final int index);1366718246;Reads a signed long value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public long readLong(final int index) {_        long l1 = readInt(index)__        long l0 = readInt(index + 4) & 0xFFFFFFFFL__        return (l1 << 32) | l0__    };reads,a,signed,long,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,long,read,long,final,int,index,long,l1,read,int,index,long,l0,read,int,index,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int index);1395273982;Reads a signed long value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public long readLong(final int index) {_        long l1 = readInt(index)__        long l0 = readInt(index + 4) & 0xFFFFFFFFL__        return (l1 << 32) | l0__    };reads,a,signed,long,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,long,read,long,final,int,index,long,l1,read,int,index,long,l0,read,int,index,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int index);1414067099;Reads a signed long value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public long readLong(final int index) {_        long l1 = readInt(index)__        long l0 = readInt(index + 4) & 0xFFFFFFFFL__        return (l1 << 32) | l0__    };reads,a,signed,long,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,long,read,long,final,int,index,long,l1,read,int,index,long,l0,read,int,index,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int index);1414499035;Reads a signed long value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public long readLong(final int index) {_        long l1 = readInt(index)__        long l0 = readInt(index + 4) & 0xFFFFFFFFL__        return (l1 << 32) | l0__    };reads,a,signed,long,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,long,read,long,final,int,index,long,l1,read,int,index,long,l0,read,int,index,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int index);1416998550;Reads a signed long value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public long readLong(final int index) {_        long l1 = readInt(index)__        long l0 = readInt(index + 4) & 0xFFFFFFFFL__        return (l1 << 32) | l0__    };reads,a,signed,long,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,long,read,long,final,int,index,long,l1,read,int,index,long,l0,read,int,index,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int index);1457705343;Reads a signed long value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public long readLong(final int index) {_        long l1 = readInt(index)__        long l0 = readInt(index + 4) & 0xFFFFFFFFL__        return (l1 << 32) | l0__    };reads,a,signed,long,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,long,read,long,final,int,index,long,l1,read,int,index,long,l0,read,int,index,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int index);1459258703;Reads a signed long value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public long readLong(final int index) {_        long l1 = readInt(index)__        long l0 = readInt(index + 4) & 0xFFFFFFFFL__        return (l1 << 32) | l0__    };reads,a,signed,long,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,long,read,long,final,int,index,long,l1,read,int,index,long,l0,read,int,index,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int index);1478623137;Reads a signed long value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public long readLong(final int index) {_        long l1 = readInt(index)__        long l0 = readInt(index + 4) & 0xFFFFFFFFL__        return (l1 << 32) | l0__    };reads,a,signed,long,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,long,read,long,final,int,index,long,l1,read,int,index,long,l0,read,int,index,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int index);1483093254;Reads a signed long value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public long readLong(final int index) {_        long l1 = readInt(index)__        long l0 = readInt(index + 4) & 0xFFFFFFFFL__        return (l1 << 32) | l0__    };reads,a,signed,long,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,long,read,long,final,int,index,long,l1,read,int,index,long,l0,read,int,index,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> public long readLong(final int index);1505821772;Reads a signed long value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public long readLong(final int index) {_        long l1 = readInt(index)__        long l0 = readInt(index + 4) & 0xFFFFFFFFL__        return (l1 << 32) | l0__    };reads,a,signed,long,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,long,read,long,final,int,index,long,l1,read,int,index,long,l0,read,int,index,4,0x,ffffffffl,return,l1,32,l0
ClassReader -> final String readUtf(final int constantPoolEntryIndex, final char[] charBuffer);1537204147;Reads a CONSTANT_Utf8 constant pool entry in {@link #b}.__@param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pool_table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Utf8 entry.;final String readUtf(final int constantPoolEntryIndex, final char[] charBuffer) {_    String value = constantUtf8Values[constantPoolEntryIndex]__    if (value != null) {_      return value__    }_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    return constantUtf8Values[constantPoolEntryIndex] =_        readUtf(cpInfoOffset + 2, readUnsignedShort(cpInfoOffset), charBuffer)__  };reads,a,constant,pool,entry,in,link,b,param,constant,pool,entry,index,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;final,string,read,utf,final,int,constant,pool,entry,index,final,char,char,buffer,string,value,constant,utf8values,constant,pool,entry,index,if,value,null,return,value,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,return,constant,utf8values,constant,pool,entry,index,read,utf,cp,info,offset,2,read,unsigned,short,cp,info,offset,char,buffer
ClassReader -> final String readUtf(final int constantPoolEntryIndex, final char[] charBuffer);1539119582;Reads a CONSTANT_Utf8 constant pool entry in {@link #b}.__@param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pool_table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Utf8 entry.;final String readUtf(final int constantPoolEntryIndex, final char[] charBuffer) {_    String value = constantUtf8Values[constantPoolEntryIndex]__    if (value != null) {_      return value__    }_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    return constantUtf8Values[constantPoolEntryIndex] =_        readUtf(cpInfoOffset + 2, readUnsignedShort(cpInfoOffset), charBuffer)__  };reads,a,constant,pool,entry,in,link,b,param,constant,pool,entry,index,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;final,string,read,utf,final,int,constant,pool,entry,index,final,char,char,buffer,string,value,constant,utf8values,constant,pool,entry,index,if,value,null,return,value,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,return,constant,utf8values,constant,pool,entry,index,read,utf,cp,info,offset,2,read,unsigned,short,cp,info,offset,char,buffer
ClassReader -> final String readUtf(final int constantPoolEntryIndex, final char[] charBuffer);1541436263;Reads a CONSTANT_Utf8 constant pool entry in {@link #b}.__@param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pool_table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Utf8 entry.;final String readUtf(final int constantPoolEntryIndex, final char[] charBuffer) {_    String value = constantUtf8Values[constantPoolEntryIndex]__    if (value != null) {_      return value__    }_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    return constantUtf8Values[constantPoolEntryIndex] =_        readUtf(cpInfoOffset + 2, readUnsignedShort(cpInfoOffset), charBuffer)__  };reads,a,constant,pool,entry,in,link,b,param,constant,pool,entry,index,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;final,string,read,utf,final,int,constant,pool,entry,index,final,char,char,buffer,string,value,constant,utf8values,constant,pool,entry,index,if,value,null,return,value,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,return,constant,utf8values,constant,pool,entry,index,read,utf,cp,info,offset,2,read,unsigned,short,cp,info,offset,char,buffer
ClassReader -> public short readShort(final int index);1366718246;Reads a signed short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public short readShort(final int index) {_        byte[] b = this.b__        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,short,read,short,final,int,index,byte,b,this,b,return,short,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public short readShort(final int index);1395273982;Reads a signed short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public short readShort(final int index) {_        byte[] b = this.b__        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,short,read,short,final,int,index,byte,b,this,b,return,short,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public short readShort(final int index);1414067099;Reads a signed short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public short readShort(final int index) {_        byte[] b = this.b__        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,short,read,short,final,int,index,byte,b,this,b,return,short,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public short readShort(final int index);1414499035;Reads a signed short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public short readShort(final int index) {_        byte[] b = this.b__        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,short,read,short,final,int,index,byte,b,this,b,return,short,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public short readShort(final int index);1416998550;Reads a signed short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public short readShort(final int index) {_        byte[] b = this.b__        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,short,read,short,final,int,index,byte,b,this,b,return,short,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public short readShort(final int index);1457705343;Reads a signed short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public short readShort(final int index) {_        byte[] b = this.b__        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,short,read,short,final,int,index,byte,b,this,b,return,short,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public short readShort(final int index);1459258703;Reads a signed short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public short readShort(final int index) {_        byte[] b = this.b__        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,short,read,short,final,int,index,byte,b,this,b,return,short,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public short readShort(final int index);1478623137;Reads a signed short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public short readShort(final int index) {_        byte[] b = this.b__        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,short,read,short,final,int,index,byte,b,this,b,return,short,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public short readShort(final int index);1483093254;Reads a signed short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public short readShort(final int index) {_        byte[] b = this.b__        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,short,read,short,final,int,index,byte,b,this,b,return,short,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> public short readShort(final int index);1505821772;Reads a signed short value in {@link #b b}. <i>This method is intended_for {@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public short readShort(final int index) {_        byte[] b = this.b__        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,short,read,short,final,int,index,byte,b,this,b,return,short,b,index,0x,ff,8,b,index,1,0x,ff
ClassReader -> private void copyBootstrapMethods(final ClassWriter classWriter,             final Item[] items, final char[] c);1366718246;Copies the bootstrap method data into the given {@link ClassWriter}._Should be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy bootstrap methods into.;private void copyBootstrapMethods(final ClassWriter classWriter,_            final Item[] items, final char[] c) {_        _        int u = getAttributes()__        boolean found = false__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("BootstrapMethods".equals(attrName)) {_                found = true__                break__            }_            u += 6 + readInt(u + 4)__        }_        if (!found) {_            return__        }_        _        int boostrapMethodCount = readUnsignedShort(u + 8)__        for (int j = 0, v = u + 10_ j < boostrapMethodCount_ j++) {_            int position = v - u - 10__            int hashCode = readConst(readUnsignedShort(v), c).hashCode()__            for (int k = readUnsignedShort(v + 2)_ k > 0_ --k) {_                hashCode ^= readConst(readUnsignedShort(v + 4), c).hashCode()__                v += 2__            }_            v += 4__            Item item = new Item(j)__            item.set(position, hashCode & 0x7FFFFFFF)__            int index = item.hashCode % items.length__            item.next = items[index]__            items[index] = item__        }_        int attrSize = readInt(u + 4)__        ByteVector bootstrapMethods = new ByteVector(attrSize + 62)__        bootstrapMethods.putByteArray(b, u + 10, attrSize - 2)__        classWriter.bootstrapMethodsCount = boostrapMethodCount__        classWriter.bootstrapMethods = bootstrapMethods__    };copies,the,bootstrap,method,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,bootstrap,methods,into;private,void,copy,bootstrap,methods,final,class,writer,class,writer,final,item,items,final,char,c,int,u,get,attributes,boolean,found,false,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,bootstrap,methods,equals,attr,name,found,true,break,u,6,read,int,u,4,if,found,return,int,boostrap,method,count,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,boostrap,method,count,j,int,position,v,u,10,int,hash,code,read,const,read,unsigned,short,v,c,hash,code,for,int,k,read,unsigned,short,v,2,k,0,k,hash,code,read,const,read,unsigned,short,v,4,c,hash,code,v,2,v,4,item,item,new,item,j,item,set,position,hash,code,0x7fffffff,int,index,item,hash,code,items,length,item,next,items,index,items,index,item,int,attr,size,read,int,u,4,byte,vector,bootstrap,methods,new,byte,vector,attr,size,62,bootstrap,methods,put,byte,array,b,u,10,attr,size,2,class,writer,bootstrap,methods,count,boostrap,method,count,class,writer,bootstrap,methods,bootstrap,methods
ClassReader -> private void copyBootstrapMethods(final ClassWriter classWriter,             final Item[] items, final char[] c);1395273982;Copies the bootstrap method data into the given {@link ClassWriter}._Should be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy bootstrap methods into.;private void copyBootstrapMethods(final ClassWriter classWriter,_            final Item[] items, final char[] c) {_        _        int u = getAttributes()__        boolean found = false__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("BootstrapMethods".equals(attrName)) {_                found = true__                break__            }_            u += 6 + readInt(u + 4)__        }_        if (!found) {_            return__        }_        _        int boostrapMethodCount = readUnsignedShort(u + 8)__        for (int j = 0, v = u + 10_ j < boostrapMethodCount_ j++) {_            int position = v - u - 10__            int hashCode = readConst(readUnsignedShort(v), c).hashCode()__            for (int k = readUnsignedShort(v + 2)_ k > 0_ --k) {_                hashCode ^= readConst(readUnsignedShort(v + 4), c).hashCode()__                v += 2__            }_            v += 4__            Item item = new Item(j)__            item.set(position, hashCode & 0x7FFFFFFF)__            int index = item.hashCode % items.length__            item.next = items[index]__            items[index] = item__        }_        int attrSize = readInt(u + 4)__        ByteVector bootstrapMethods = new ByteVector(attrSize + 62)__        bootstrapMethods.putByteArray(b, u + 10, attrSize - 2)__        classWriter.bootstrapMethodsCount = boostrapMethodCount__        classWriter.bootstrapMethods = bootstrapMethods__    };copies,the,bootstrap,method,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,bootstrap,methods,into;private,void,copy,bootstrap,methods,final,class,writer,class,writer,final,item,items,final,char,c,int,u,get,attributes,boolean,found,false,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,bootstrap,methods,equals,attr,name,found,true,break,u,6,read,int,u,4,if,found,return,int,boostrap,method,count,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,boostrap,method,count,j,int,position,v,u,10,int,hash,code,read,const,read,unsigned,short,v,c,hash,code,for,int,k,read,unsigned,short,v,2,k,0,k,hash,code,read,const,read,unsigned,short,v,4,c,hash,code,v,2,v,4,item,item,new,item,j,item,set,position,hash,code,0x7fffffff,int,index,item,hash,code,items,length,item,next,items,index,items,index,item,int,attr,size,read,int,u,4,byte,vector,bootstrap,methods,new,byte,vector,attr,size,62,bootstrap,methods,put,byte,array,b,u,10,attr,size,2,class,writer,bootstrap,methods,count,boostrap,method,count,class,writer,bootstrap,methods,bootstrap,methods
ClassReader -> private void copyBootstrapMethods(final ClassWriter classWriter,             final Item[] items, final char[] c);1414067099;Copies the bootstrap method data into the given {@link ClassWriter}._Should be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy bootstrap methods into.;private void copyBootstrapMethods(final ClassWriter classWriter,_            final Item[] items, final char[] c) {_        _        int u = getAttributes()__        boolean found = false__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("BootstrapMethods".equals(attrName)) {_                found = true__                break__            }_            u += 6 + readInt(u + 4)__        }_        if (!found) {_            return__        }_        _        int boostrapMethodCount = readUnsignedShort(u + 8)__        for (int j = 0, v = u + 10_ j < boostrapMethodCount_ j++) {_            int position = v - u - 10__            int hashCode = readConst(readUnsignedShort(v), c).hashCode()__            for (int k = readUnsignedShort(v + 2)_ k > 0_ --k) {_                hashCode ^= readConst(readUnsignedShort(v + 4), c).hashCode()__                v += 2__            }_            v += 4__            Item item = new Item(j)__            item.set(position, hashCode & 0x7FFFFFFF)__            int index = item.hashCode % items.length__            item.next = items[index]__            items[index] = item__        }_        int attrSize = readInt(u + 4)__        ByteVector bootstrapMethods = new ByteVector(attrSize + 62)__        bootstrapMethods.putByteArray(b, u + 10, attrSize - 2)__        classWriter.bootstrapMethodsCount = boostrapMethodCount__        classWriter.bootstrapMethods = bootstrapMethods__    };copies,the,bootstrap,method,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,bootstrap,methods,into;private,void,copy,bootstrap,methods,final,class,writer,class,writer,final,item,items,final,char,c,int,u,get,attributes,boolean,found,false,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,bootstrap,methods,equals,attr,name,found,true,break,u,6,read,int,u,4,if,found,return,int,boostrap,method,count,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,boostrap,method,count,j,int,position,v,u,10,int,hash,code,read,const,read,unsigned,short,v,c,hash,code,for,int,k,read,unsigned,short,v,2,k,0,k,hash,code,read,const,read,unsigned,short,v,4,c,hash,code,v,2,v,4,item,item,new,item,j,item,set,position,hash,code,0x7fffffff,int,index,item,hash,code,items,length,item,next,items,index,items,index,item,int,attr,size,read,int,u,4,byte,vector,bootstrap,methods,new,byte,vector,attr,size,62,bootstrap,methods,put,byte,array,b,u,10,attr,size,2,class,writer,bootstrap,methods,count,boostrap,method,count,class,writer,bootstrap,methods,bootstrap,methods
ClassReader -> private void copyBootstrapMethods(final ClassWriter classWriter,             final Item[] items, final char[] c);1414499035;Copies the bootstrap method data into the given {@link ClassWriter}._Should be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy bootstrap methods into.;private void copyBootstrapMethods(final ClassWriter classWriter,_            final Item[] items, final char[] c) {_        _        int u = getAttributes()__        boolean found = false__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("BootstrapMethods".equals(attrName)) {_                found = true__                break__            }_            u += 6 + readInt(u + 4)__        }_        if (!found) {_            return__        }_        _        int boostrapMethodCount = readUnsignedShort(u + 8)__        for (int j = 0, v = u + 10_ j < boostrapMethodCount_ j++) {_            int position = v - u - 10__            int hashCode = readConst(readUnsignedShort(v), c).hashCode()__            for (int k = readUnsignedShort(v + 2)_ k > 0_ --k) {_                hashCode ^= readConst(readUnsignedShort(v + 4), c).hashCode()__                v += 2__            }_            v += 4__            Item item = new Item(j)__            item.set(position, hashCode & 0x7FFFFFFF)__            int index = item.hashCode % items.length__            item.next = items[index]__            items[index] = item__        }_        int attrSize = readInt(u + 4)__        ByteVector bootstrapMethods = new ByteVector(attrSize + 62)__        bootstrapMethods.putByteArray(b, u + 10, attrSize - 2)__        classWriter.bootstrapMethodsCount = boostrapMethodCount__        classWriter.bootstrapMethods = bootstrapMethods__    };copies,the,bootstrap,method,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,bootstrap,methods,into;private,void,copy,bootstrap,methods,final,class,writer,class,writer,final,item,items,final,char,c,int,u,get,attributes,boolean,found,false,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,bootstrap,methods,equals,attr,name,found,true,break,u,6,read,int,u,4,if,found,return,int,boostrap,method,count,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,boostrap,method,count,j,int,position,v,u,10,int,hash,code,read,const,read,unsigned,short,v,c,hash,code,for,int,k,read,unsigned,short,v,2,k,0,k,hash,code,read,const,read,unsigned,short,v,4,c,hash,code,v,2,v,4,item,item,new,item,j,item,set,position,hash,code,0x7fffffff,int,index,item,hash,code,items,length,item,next,items,index,items,index,item,int,attr,size,read,int,u,4,byte,vector,bootstrap,methods,new,byte,vector,attr,size,62,bootstrap,methods,put,byte,array,b,u,10,attr,size,2,class,writer,bootstrap,methods,count,boostrap,method,count,class,writer,bootstrap,methods,bootstrap,methods
ClassReader -> private void copyBootstrapMethods(final ClassWriter classWriter,             final Item[] items, final char[] c);1416998550;Copies the bootstrap method data into the given {@link ClassWriter}._Should be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy bootstrap methods into.;private void copyBootstrapMethods(final ClassWriter classWriter,_            final Item[] items, final char[] c) {_        _        int u = getAttributes()__        boolean found = false__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("BootstrapMethods".equals(attrName)) {_                found = true__                break__            }_            u += 6 + readInt(u + 4)__        }_        if (!found) {_            return__        }_        _        int boostrapMethodCount = readUnsignedShort(u + 8)__        for (int j = 0, v = u + 10_ j < boostrapMethodCount_ j++) {_            int position = v - u - 10__            int hashCode = readConst(readUnsignedShort(v), c).hashCode()__            for (int k = readUnsignedShort(v + 2)_ k > 0_ --k) {_                hashCode ^= readConst(readUnsignedShort(v + 4), c).hashCode()__                v += 2__            }_            v += 4__            Item item = new Item(j)__            item.set(position, hashCode & 0x7FFFFFFF)__            int index = item.hashCode % items.length__            item.next = items[index]__            items[index] = item__        }_        int attrSize = readInt(u + 4)__        ByteVector bootstrapMethods = new ByteVector(attrSize + 62)__        bootstrapMethods.putByteArray(b, u + 10, attrSize - 2)__        classWriter.bootstrapMethodsCount = boostrapMethodCount__        classWriter.bootstrapMethods = bootstrapMethods__    };copies,the,bootstrap,method,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,bootstrap,methods,into;private,void,copy,bootstrap,methods,final,class,writer,class,writer,final,item,items,final,char,c,int,u,get,attributes,boolean,found,false,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,bootstrap,methods,equals,attr,name,found,true,break,u,6,read,int,u,4,if,found,return,int,boostrap,method,count,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,boostrap,method,count,j,int,position,v,u,10,int,hash,code,read,const,read,unsigned,short,v,c,hash,code,for,int,k,read,unsigned,short,v,2,k,0,k,hash,code,read,const,read,unsigned,short,v,4,c,hash,code,v,2,v,4,item,item,new,item,j,item,set,position,hash,code,0x7fffffff,int,index,item,hash,code,items,length,item,next,items,index,items,index,item,int,attr,size,read,int,u,4,byte,vector,bootstrap,methods,new,byte,vector,attr,size,62,bootstrap,methods,put,byte,array,b,u,10,attr,size,2,class,writer,bootstrap,methods,count,boostrap,method,count,class,writer,bootstrap,methods,bootstrap,methods
ClassReader -> private void copyBootstrapMethods(final ClassWriter classWriter,             final Item[] items, final char[] c);1457705343;Copies the bootstrap method data into the given {@link ClassWriter}._Should be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy bootstrap methods into.;private void copyBootstrapMethods(final ClassWriter classWriter,_            final Item[] items, final char[] c) {_        _        int u = getAttributes()__        boolean found = false__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("BootstrapMethods".equals(attrName)) {_                found = true__                break__            }_            u += 6 + readInt(u + 4)__        }_        if (!found) {_            return__        }_        _        int boostrapMethodCount = readUnsignedShort(u + 8)__        for (int j = 0, v = u + 10_ j < boostrapMethodCount_ j++) {_            int position = v - u - 10__            int hashCode = readConst(readUnsignedShort(v), c).hashCode()__            for (int k = readUnsignedShort(v + 2)_ k > 0_ --k) {_                hashCode ^= readConst(readUnsignedShort(v + 4), c).hashCode()__                v += 2__            }_            v += 4__            Item item = new Item(j)__            item.set(position, hashCode & 0x7FFFFFFF)__            int index = item.hashCode % items.length__            item.next = items[index]__            items[index] = item__        }_        int attrSize = readInt(u + 4)__        ByteVector bootstrapMethods = new ByteVector(attrSize + 62)__        bootstrapMethods.putByteArray(b, u + 10, attrSize - 2)__        classWriter.bootstrapMethodsCount = boostrapMethodCount__        classWriter.bootstrapMethods = bootstrapMethods__    };copies,the,bootstrap,method,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,bootstrap,methods,into;private,void,copy,bootstrap,methods,final,class,writer,class,writer,final,item,items,final,char,c,int,u,get,attributes,boolean,found,false,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,bootstrap,methods,equals,attr,name,found,true,break,u,6,read,int,u,4,if,found,return,int,boostrap,method,count,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,boostrap,method,count,j,int,position,v,u,10,int,hash,code,read,const,read,unsigned,short,v,c,hash,code,for,int,k,read,unsigned,short,v,2,k,0,k,hash,code,read,const,read,unsigned,short,v,4,c,hash,code,v,2,v,4,item,item,new,item,j,item,set,position,hash,code,0x7fffffff,int,index,item,hash,code,items,length,item,next,items,index,items,index,item,int,attr,size,read,int,u,4,byte,vector,bootstrap,methods,new,byte,vector,attr,size,62,bootstrap,methods,put,byte,array,b,u,10,attr,size,2,class,writer,bootstrap,methods,count,boostrap,method,count,class,writer,bootstrap,methods,bootstrap,methods
ClassReader -> private void copyBootstrapMethods(final ClassWriter classWriter,             final Item[] items, final char[] c);1459258703;Copies the bootstrap method data into the given {@link ClassWriter}._Should be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy bootstrap methods into.;private void copyBootstrapMethods(final ClassWriter classWriter,_            final Item[] items, final char[] c) {_        _        int u = getAttributes()__        boolean found = false__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("BootstrapMethods".equals(attrName)) {_                found = true__                break__            }_            u += 6 + readInt(u + 4)__        }_        if (!found) {_            return__        }_        _        int boostrapMethodCount = readUnsignedShort(u + 8)__        for (int j = 0, v = u + 10_ j < boostrapMethodCount_ j++) {_            int position = v - u - 10__            int hashCode = readConst(readUnsignedShort(v), c).hashCode()__            for (int k = readUnsignedShort(v + 2)_ k > 0_ --k) {_                hashCode ^= readConst(readUnsignedShort(v + 4), c).hashCode()__                v += 2__            }_            v += 4__            Item item = new Item(j)__            item.set(position, hashCode & 0x7FFFFFFF)__            int index = item.hashCode % items.length__            item.next = items[index]__            items[index] = item__        }_        int attrSize = readInt(u + 4)__        ByteVector bootstrapMethods = new ByteVector(attrSize + 62)__        bootstrapMethods.putByteArray(b, u + 10, attrSize - 2)__        classWriter.bootstrapMethodsCount = boostrapMethodCount__        classWriter.bootstrapMethods = bootstrapMethods__    };copies,the,bootstrap,method,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,bootstrap,methods,into;private,void,copy,bootstrap,methods,final,class,writer,class,writer,final,item,items,final,char,c,int,u,get,attributes,boolean,found,false,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,bootstrap,methods,equals,attr,name,found,true,break,u,6,read,int,u,4,if,found,return,int,boostrap,method,count,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,boostrap,method,count,j,int,position,v,u,10,int,hash,code,read,const,read,unsigned,short,v,c,hash,code,for,int,k,read,unsigned,short,v,2,k,0,k,hash,code,read,const,read,unsigned,short,v,4,c,hash,code,v,2,v,4,item,item,new,item,j,item,set,position,hash,code,0x7fffffff,int,index,item,hash,code,items,length,item,next,items,index,items,index,item,int,attr,size,read,int,u,4,byte,vector,bootstrap,methods,new,byte,vector,attr,size,62,bootstrap,methods,put,byte,array,b,u,10,attr,size,2,class,writer,bootstrap,methods,count,boostrap,method,count,class,writer,bootstrap,methods,bootstrap,methods
ClassReader -> private void copyBootstrapMethods(final ClassWriter classWriter,             final Item[] items, final char[] c);1478623137;Copies the bootstrap method data into the given {@link ClassWriter}._Should be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy bootstrap methods into.;private void copyBootstrapMethods(final ClassWriter classWriter,_            final Item[] items, final char[] c) {_        _        int u = getAttributes()__        boolean found = false__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("BootstrapMethods".equals(attrName)) {_                found = true__                break__            }_            u += 6 + readInt(u + 4)__        }_        if (!found) {_            return__        }_        _        int boostrapMethodCount = readUnsignedShort(u + 8)__        for (int j = 0, v = u + 10_ j < boostrapMethodCount_ j++) {_            int position = v - u - 10__            int hashCode = readConst(readUnsignedShort(v), c).hashCode()__            for (int k = readUnsignedShort(v + 2)_ k > 0_ --k) {_                hashCode ^= readConst(readUnsignedShort(v + 4), c).hashCode()__                v += 2__            }_            v += 4__            Item item = new Item(j)__            item.set(position, hashCode & 0x7FFFFFFF)__            int index = item.hashCode % items.length__            item.next = items[index]__            items[index] = item__        }_        int attrSize = readInt(u + 4)__        ByteVector bootstrapMethods = new ByteVector(attrSize + 62)__        bootstrapMethods.putByteArray(b, u + 10, attrSize - 2)__        classWriter.bootstrapMethodsCount = boostrapMethodCount__        classWriter.bootstrapMethods = bootstrapMethods__    };copies,the,bootstrap,method,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,bootstrap,methods,into;private,void,copy,bootstrap,methods,final,class,writer,class,writer,final,item,items,final,char,c,int,u,get,attributes,boolean,found,false,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,bootstrap,methods,equals,attr,name,found,true,break,u,6,read,int,u,4,if,found,return,int,boostrap,method,count,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,boostrap,method,count,j,int,position,v,u,10,int,hash,code,read,const,read,unsigned,short,v,c,hash,code,for,int,k,read,unsigned,short,v,2,k,0,k,hash,code,read,const,read,unsigned,short,v,4,c,hash,code,v,2,v,4,item,item,new,item,j,item,set,position,hash,code,0x7fffffff,int,index,item,hash,code,items,length,item,next,items,index,items,index,item,int,attr,size,read,int,u,4,byte,vector,bootstrap,methods,new,byte,vector,attr,size,62,bootstrap,methods,put,byte,array,b,u,10,attr,size,2,class,writer,bootstrap,methods,count,boostrap,method,count,class,writer,bootstrap,methods,bootstrap,methods
ClassReader -> private void copyBootstrapMethods(final ClassWriter classWriter,             final Item[] items, final char[] c);1483093254;Copies the bootstrap method data into the given {@link ClassWriter}._Should be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy bootstrap methods into.;private void copyBootstrapMethods(final ClassWriter classWriter,_            final Item[] items, final char[] c) {_        _        int u = getAttributes()__        boolean found = false__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("BootstrapMethods".equals(attrName)) {_                found = true__                break__            }_            u += 6 + readInt(u + 4)__        }_        if (!found) {_            return__        }_        _        int boostrapMethodCount = readUnsignedShort(u + 8)__        for (int j = 0, v = u + 10_ j < boostrapMethodCount_ j++) {_            int position = v - u - 10__            int hashCode = readConst(readUnsignedShort(v), c).hashCode()__            for (int k = readUnsignedShort(v + 2)_ k > 0_ --k) {_                hashCode ^= readConst(readUnsignedShort(v + 4), c).hashCode()__                v += 2__            }_            v += 4__            Item item = new Item(j)__            item.set(position, hashCode & 0x7FFFFFFF)__            int index = item.hashCode % items.length__            item.next = items[index]__            items[index] = item__        }_        int attrSize = readInt(u + 4)__        ByteVector bootstrapMethods = new ByteVector(attrSize + 62)__        bootstrapMethods.putByteArray(b, u + 10, attrSize - 2)__        classWriter.bootstrapMethodsCount = boostrapMethodCount__        classWriter.bootstrapMethods = bootstrapMethods__    };copies,the,bootstrap,method,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,bootstrap,methods,into;private,void,copy,bootstrap,methods,final,class,writer,class,writer,final,item,items,final,char,c,int,u,get,attributes,boolean,found,false,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,bootstrap,methods,equals,attr,name,found,true,break,u,6,read,int,u,4,if,found,return,int,boostrap,method,count,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,boostrap,method,count,j,int,position,v,u,10,int,hash,code,read,const,read,unsigned,short,v,c,hash,code,for,int,k,read,unsigned,short,v,2,k,0,k,hash,code,read,const,read,unsigned,short,v,4,c,hash,code,v,2,v,4,item,item,new,item,j,item,set,position,hash,code,0x7fffffff,int,index,item,hash,code,items,length,item,next,items,index,items,index,item,int,attr,size,read,int,u,4,byte,vector,bootstrap,methods,new,byte,vector,attr,size,62,bootstrap,methods,put,byte,array,b,u,10,attr,size,2,class,writer,bootstrap,methods,count,boostrap,method,count,class,writer,bootstrap,methods,bootstrap,methods
ClassReader -> private void copyBootstrapMethods(final ClassWriter classWriter,             final Item[] items, final char[] c);1505821772;Copies the bootstrap method data into the given {@link ClassWriter}._Should be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy bootstrap methods into.;private void copyBootstrapMethods(final ClassWriter classWriter,_            final Item[] items, final char[] c) {_        _        int u = getAttributes()__        boolean found = false__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            if ("BootstrapMethods".equals(attrName)) {_                found = true__                break__            }_            u += 6 + readInt(u + 4)__        }_        if (!found) {_            return__        }_        _        int boostrapMethodCount = readUnsignedShort(u + 8)__        for (int j = 0, v = u + 10_ j < boostrapMethodCount_ j++) {_            int position = v - u - 10__            int hashCode = readConst(readUnsignedShort(v), c).hashCode()__            for (int k = readUnsignedShort(v + 2)_ k > 0_ --k) {_                hashCode ^= readConst(readUnsignedShort(v + 4), c).hashCode()__                v += 2__            }_            v += 4__            Item item = new Item(j)__            item.set(position, hashCode & 0x7FFFFFFF)__            int index = item.hashCode % items.length__            item.next = items[index]__            items[index] = item__        }_        int attrSize = readInt(u + 4)__        ByteVector bootstrapMethods = new ByteVector(attrSize + 62)__        bootstrapMethods.putByteArray(b, u + 10, attrSize - 2)__        classWriter.bootstrapMethodsCount = boostrapMethodCount__        classWriter.bootstrapMethods = bootstrapMethods__    };copies,the,bootstrap,method,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,bootstrap,methods,into;private,void,copy,bootstrap,methods,final,class,writer,class,writer,final,item,items,final,char,c,int,u,get,attributes,boolean,found,false,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,bootstrap,methods,equals,attr,name,found,true,break,u,6,read,int,u,4,if,found,return,int,boostrap,method,count,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,boostrap,method,count,j,int,position,v,u,10,int,hash,code,read,const,read,unsigned,short,v,c,hash,code,for,int,k,read,unsigned,short,v,2,k,0,k,hash,code,read,const,read,unsigned,short,v,4,c,hash,code,v,2,v,4,item,item,new,item,j,item,set,position,hash,code,0x7fffffff,int,index,item,hash,code,items,length,item,next,items,index,items,index,item,int,attr,size,read,int,u,4,byte,vector,bootstrap,methods,new,byte,vector,attr,size,62,bootstrap,methods,put,byte,array,b,u,10,attr,size,2,class,writer,bootstrap,methods,count,boostrap,method,count,class,writer,bootstrap,methods,bootstrap,methods
ClassReader -> public int readInt(final int offset);1531241461;Reads a signed int value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public int readInt(final int offset) {_    byte[] classFileBuffer = b__    return ((classFileBuffer[offset] & 0xFF) << 24)_        | ((classFileBuffer[offset + 1] & 0xFF) << 16)_        | ((classFileBuffer[offset + 2] & 0xFF) << 8)_        | (classFileBuffer[offset + 3] & 0xFF)__  };reads,a,signed,int,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,int,final,int,offset,byte,class,file,buffer,b,return,class,file,buffer,offset,0x,ff,24,class,file,buffer,offset,1,0x,ff,16,class,file,buffer,offset,2,0x,ff,8,class,file,buffer,offset,3,0x,ff
ClassReader -> public int readInt(final int offset);1536664245;Reads a signed int value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public int readInt(final int offset) {_    byte[] classFileBuffer = b__    return ((classFileBuffer[offset] & 0xFF) << 24)_        | ((classFileBuffer[offset + 1] & 0xFF) << 16)_        | ((classFileBuffer[offset + 2] & 0xFF) << 8)_        | (classFileBuffer[offset + 3] & 0xFF)__  };reads,a,signed,int,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,int,final,int,offset,byte,class,file,buffer,b,return,class,file,buffer,offset,0x,ff,24,class,file,buffer,offset,1,0x,ff,16,class,file,buffer,offset,2,0x,ff,8,class,file,buffer,offset,3,0x,ff
ClassReader -> public int readInt(final int offset);1536747989;Reads a signed int value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public int readInt(final int offset) {_    byte[] classFileBuffer = b__    return ((classFileBuffer[offset] & 0xFF) << 24)_        | ((classFileBuffer[offset + 1] & 0xFF) << 16)_        | ((classFileBuffer[offset + 2] & 0xFF) << 8)_        | (classFileBuffer[offset + 3] & 0xFF)__  };reads,a,signed,int,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,int,final,int,offset,byte,class,file,buffer,b,return,class,file,buffer,offset,0x,ff,24,class,file,buffer,offset,1,0x,ff,16,class,file,buffer,offset,2,0x,ff,8,class,file,buffer,offset,3,0x,ff
ClassReader -> public int readInt(final int offset);1537204147;Reads a signed int value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public int readInt(final int offset) {_    byte[] classFileBuffer = b__    return ((classFileBuffer[offset] & 0xFF) << 24)_        | ((classFileBuffer[offset + 1] & 0xFF) << 16)_        | ((classFileBuffer[offset + 2] & 0xFF) << 8)_        | (classFileBuffer[offset + 3] & 0xFF)__  };reads,a,signed,int,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,int,final,int,offset,byte,class,file,buffer,b,return,class,file,buffer,offset,0x,ff,24,class,file,buffer,offset,1,0x,ff,16,class,file,buffer,offset,2,0x,ff,8,class,file,buffer,offset,3,0x,ff
ClassReader -> public int readInt(final int offset);1539119582;Reads a signed int value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public int readInt(final int offset) {_    byte[] classFileBuffer = b__    return ((classFileBuffer[offset] & 0xFF) << 24)_        | ((classFileBuffer[offset + 1] & 0xFF) << 16)_        | ((classFileBuffer[offset + 2] & 0xFF) << 8)_        | (classFileBuffer[offset + 3] & 0xFF)__  };reads,a,signed,int,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,int,final,int,offset,byte,class,file,buffer,b,return,class,file,buffer,offset,0x,ff,24,class,file,buffer,offset,1,0x,ff,16,class,file,buffer,offset,2,0x,ff,8,class,file,buffer,offset,3,0x,ff
ClassReader -> public int readInt(final int offset);1541436263;Reads a signed int value in {@link #b}. <i>This method is intended for {@link Attribute} sub_classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of the value to be read in {@link #b}._@return the read value.;public int readInt(final int offset) {_    byte[] classFileBuffer = b__    return ((classFileBuffer[offset] & 0xFF) << 24)_        | ((classFileBuffer[offset + 1] & 0xFF) << 16)_        | ((classFileBuffer[offset + 2] & 0xFF) << 8)_        | (classFileBuffer[offset + 3] & 0xFF)__  };reads,a,signed,int,value,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,the,value,to,be,read,in,link,b,return,the,read,value;public,int,read,int,final,int,offset,byte,class,file,buffer,b,return,class,file,buffer,offset,0x,ff,24,class,file,buffer,offset,1,0x,ff,16,class,file,buffer,offset,2,0x,ff,8,class,file,buffer,offset,3,0x,ff
ClassReader -> protected Label readLabel(int offset, Label[] labels);1366718246;Returns the label corresponding to the given offset. The default_implementation of this method creates a label for the given offset if it_has not been already created.__@param offset_a bytecode offset in a method._@param labels_the already created labels, indexed by their offset. If a_label already exists for offset this method must not create a_new one. Otherwise it must store the new label in this array._@return a non null Label, which must be equal to labels[offset].;protected Label readLabel(int offset, Label[] labels) {_        if (labels[offset] == null) {_            labels[offset] = new Label()__        }_        return labels[offset]__    };returns,the,label,corresponding,to,the,given,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,offset;protected,label,read,label,int,offset,label,labels,if,labels,offset,null,labels,offset,new,label,return,labels,offset
ClassReader -> protected Label readLabel(int offset, Label[] labels);1395273982;Returns the label corresponding to the given offset. The default_implementation of this method creates a label for the given offset if it_has not been already created.__@param offset_a bytecode offset in a method._@param labels_the already created labels, indexed by their offset. If a_label already exists for offset this method must not create a_new one. Otherwise it must store the new label in this array._@return a non null Label, which must be equal to labels[offset].;protected Label readLabel(int offset, Label[] labels) {_        if (labels[offset] == null) {_            labels[offset] = new Label()__        }_        return labels[offset]__    };returns,the,label,corresponding,to,the,given,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,offset;protected,label,read,label,int,offset,label,labels,if,labels,offset,null,labels,offset,new,label,return,labels,offset
ClassReader -> protected Label readLabel(int offset, Label[] labels);1414067099;Returns the label corresponding to the given offset. The default_implementation of this method creates a label for the given offset if it_has not been already created.__@param offset_a bytecode offset in a method._@param labels_the already created labels, indexed by their offset. If a_label already exists for offset this method must not create a_new one. Otherwise it must store the new label in this array._@return a non null Label, which must be equal to labels[offset].;protected Label readLabel(int offset, Label[] labels) {_        if (labels[offset] == null) {_            labels[offset] = new Label()__        }_        return labels[offset]__    };returns,the,label,corresponding,to,the,given,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,offset;protected,label,read,label,int,offset,label,labels,if,labels,offset,null,labels,offset,new,label,return,labels,offset
ClassReader -> protected Label readLabel(int offset, Label[] labels);1414499035;Returns the label corresponding to the given offset. The default_implementation of this method creates a label for the given offset if it_has not been already created.__@param offset_a bytecode offset in a method._@param labels_the already created labels, indexed by their offset. If a_label already exists for offset this method must not create a_new one. Otherwise it must store the new label in this array._@return a non null Label, which must be equal to labels[offset].;protected Label readLabel(int offset, Label[] labels) {_        if (labels[offset] == null) {_            labels[offset] = new Label()__        }_        return labels[offset]__    };returns,the,label,corresponding,to,the,given,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,offset;protected,label,read,label,int,offset,label,labels,if,labels,offset,null,labels,offset,new,label,return,labels,offset
ClassReader -> protected Label readLabel(int offset, Label[] labels);1416998550;Returns the label corresponding to the given offset. The default_implementation of this method creates a label for the given offset if it_has not been already created.__@param offset_a bytecode offset in a method._@param labels_the already created labels, indexed by their offset. If a_label already exists for offset this method must not create a_new one. Otherwise it must store the new label in this array._@return a non null Label, which must be equal to labels[offset].;protected Label readLabel(int offset, Label[] labels) {_        if (labels[offset] == null) {_            labels[offset] = new Label()__        }_        return labels[offset]__    };returns,the,label,corresponding,to,the,given,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,offset;protected,label,read,label,int,offset,label,labels,if,labels,offset,null,labels,offset,new,label,return,labels,offset
ClassReader -> protected Label readLabel(int offset, Label[] labels);1457705343;Returns the label corresponding to the given offset. The default_implementation of this method creates a label for the given offset if it_has not been already created.__@param offset_a bytecode offset in a method._@param labels_the already created labels, indexed by their offset. If a_label already exists for offset this method must not create a_new one. Otherwise it must store the new label in this array._@return a non null Label, which must be equal to labels[offset].;protected Label readLabel(int offset, Label[] labels) {_        if (labels[offset] == null) {_            labels[offset] = new Label()__        }_        return labels[offset]__    };returns,the,label,corresponding,to,the,given,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,offset;protected,label,read,label,int,offset,label,labels,if,labels,offset,null,labels,offset,new,label,return,labels,offset
ClassReader -> protected Label readLabel(int offset, Label[] labels);1459258703;Returns the label corresponding to the given offset. The default_implementation of this method creates a label for the given offset if it_has not been already created.__@param offset_a bytecode offset in a method._@param labels_the already created labels, indexed by their offset. If a_label already exists for offset this method must not create a_new one. Otherwise it must store the new label in this array._@return a non null Label, which must be equal to labels[offset].;protected Label readLabel(int offset, Label[] labels) {_        _        if (offset >= labels.length) {_            return new Label()__        }_        _        if (labels[offset] == null) {_            labels[offset] = new Label()__        }_        return labels[offset]__    };returns,the,label,corresponding,to,the,given,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,offset;protected,label,read,label,int,offset,label,labels,if,offset,labels,length,return,new,label,if,labels,offset,null,labels,offset,new,label,return,labels,offset
ClassReader -> protected Label readLabel(int offset, Label[] labels);1478623137;Returns the label corresponding to the given offset. The default_implementation of this method creates a label for the given offset if it_has not been already created.__@param offset_a bytecode offset in a method._@param labels_the already created labels, indexed by their offset. If a_label already exists for offset this method must not create a_new one. Otherwise it must store the new label in this array._@return a non null Label, which must be equal to labels[offset].;protected Label readLabel(int offset, Label[] labels) {_        _        if (offset >= labels.length) {_            return new Label()__        }_        _        if (labels[offset] == null) {_            labels[offset] = new Label()__        }_        return labels[offset]__    };returns,the,label,corresponding,to,the,given,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,offset;protected,label,read,label,int,offset,label,labels,if,offset,labels,length,return,new,label,if,labels,offset,null,labels,offset,new,label,return,labels,offset
ClassReader -> protected Label readLabel(int offset, Label[] labels);1483093254;Returns the label corresponding to the given offset. The default_implementation of this method creates a label for the given offset if it_has not been already created.__@param offset_a bytecode offset in a method._@param labels_the already created labels, indexed by their offset. If a_label already exists for offset this method must not create a_new one. Otherwise it must store the new label in this array._@return a non null Label, which must be equal to labels[offset].;protected Label readLabel(int offset, Label[] labels) {_        _        if (offset >= labels.length) {_            return new Label()__        }_        _        if (labels[offset] == null) {_            labels[offset] = new Label()__        }_        return labels[offset]__    };returns,the,label,corresponding,to,the,given,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,offset;protected,label,read,label,int,offset,label,labels,if,offset,labels,length,return,new,label,if,labels,offset,null,labels,offset,new,label,return,labels,offset
ClassReader -> protected Label readLabel(int offset, Label[] labels);1505821772;Returns the label corresponding to the given offset. The default_implementation of this method creates a label for the given offset if it_has not been already created.__@param offset_a bytecode offset in a method._@param labels_the already created labels, indexed by their offset. If a_label already exists for offset this method must not create a_new one. Otherwise it must store the new label in this array._@return a non null Label, which must be equal to labels[offset].;protected Label readLabel(int offset, Label[] labels) {_        _        if (offset >= labels.length) {_            return new Label()__        }_        _        if (labels[offset] == null) {_            labels[offset] = new Label()__        }_        return labels[offset]__    };returns,the,label,corresponding,to,the,given,offset,the,default,implementation,of,this,method,creates,a,label,for,the,given,offset,if,it,has,not,been,already,created,param,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,if,a,label,already,exists,for,offset,this,method,must,not,create,a,new,one,otherwise,it,must,store,the,new,label,in,this,array,return,a,non,null,label,which,must,be,equal,to,labels,offset;protected,label,read,label,int,offset,label,labels,if,offset,labels,length,return,new,label,if,labels,offset,null,labels,offset,new,label,return,labels,offset
ClassReader -> public ClassReader(final byte[] b, final int off, final int len);1366718246;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read._@param off_the start offset of the class data._@param len_the length of the class data.;public ClassReader(final byte[] b, final int off, final int len) {_        this.b = b__        _		_        _        items = new int[readUnsignedShort(off + 8)]__        int n = items.length__        strings = new String[n]__        int max = 0__        int index = off + 10__        for (int i = 1_ i < n_ ++i) {_            items[i] = index + 1__            int size__            switch (b[index]) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_            case ClassWriter.INT:_            case ClassWriter.FLOAT:_            case ClassWriter.NAME_TYPE:_            case ClassWriter.INDY:_                size = 5__                break__            case ClassWriter.LONG:_            case ClassWriter.DOUBLE:_                size = 9__                ++i__                break__            case ClassWriter.UTF8:_                size = 3 + readUnsignedShort(index + 1)__                if (size > max) {_                    max = size__                }_                break__            case ClassWriter.HANDLE:_                size = 4__                break__            _            _            _            default:_                size = 3__                break__            }_            index += size__        }_        maxStringLength = max__        _        header = index__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read,param,off,the,start,offset,of,the,class,data,param,len,the,length,of,the,class,data;public,class,reader,final,byte,b,final,int,off,final,int,len,this,b,b,items,new,int,read,unsigned,short,off,8,int,n,items,length,strings,new,string,n,int,max,0,int,index,off,10,for,int,i,1,i,n,i,items,i,index,1,int,size,switch,b,index,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,case,class,writer,int,case,class,writer,float,case,class,writer,case,class,writer,indy,size,5,break,case,class,writer,long,case,class,writer,double,size,9,i,break,case,class,writer,utf8,size,3,read,unsigned,short,index,1,if,size,max,max,size,break,case,class,writer,handle,size,4,break,default,size,3,break,index,size,max,string,length,max,header,index
ClassReader -> public ClassReader(final byte[] b, final int off, final int len);1395273982;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read._@param off_the start offset of the class data._@param len_the length of the class data.;public ClassReader(final byte[] b, final int off, final int len) {_        this.b = b__        _		_        _        items = new int[readUnsignedShort(off + 8)]__        int n = items.length__        strings = new String[n]__        int max = 0__        int index = off + 10__        for (int i = 1_ i < n_ ++i) {_            items[i] = index + 1__            int size__            switch (b[index]) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_            case ClassWriter.INT:_            case ClassWriter.FLOAT:_            case ClassWriter.NAME_TYPE:_            case ClassWriter.INDY:_                size = 5__                break__            case ClassWriter.LONG:_            case ClassWriter.DOUBLE:_                size = 9__                ++i__                break__            case ClassWriter.UTF8:_                size = 3 + readUnsignedShort(index + 1)__                if (size > max) {_                    max = size__                }_                break__            case ClassWriter.HANDLE:_                size = 4__                break__            _            _            _            default:_                size = 3__                break__            }_            index += size__        }_        maxStringLength = max__        _        header = index__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read,param,off,the,start,offset,of,the,class,data,param,len,the,length,of,the,class,data;public,class,reader,final,byte,b,final,int,off,final,int,len,this,b,b,items,new,int,read,unsigned,short,off,8,int,n,items,length,strings,new,string,n,int,max,0,int,index,off,10,for,int,i,1,i,n,i,items,i,index,1,int,size,switch,b,index,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,case,class,writer,int,case,class,writer,float,case,class,writer,case,class,writer,indy,size,5,break,case,class,writer,long,case,class,writer,double,size,9,i,break,case,class,writer,utf8,size,3,read,unsigned,short,index,1,if,size,max,max,size,break,case,class,writer,handle,size,4,break,default,size,3,break,index,size,max,string,length,max,header,index
ClassReader -> public ClassReader(final byte[] b, final int off, final int len);1414067099;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read._@param off_the start offset of the class data._@param len_the length of the class data.;public ClassReader(final byte[] b, final int off, final int len) {_        this.b = b__        _		_        _        items = new int[readUnsignedShort(off + 8)]__        int n = items.length__        strings = new String[n]__        int max = 0__        int index = off + 10__        for (int i = 1_ i < n_ ++i) {_            items[i] = index + 1__            int size__            switch (b[index]) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_            case ClassWriter.INT:_            case ClassWriter.FLOAT:_            case ClassWriter.NAME_TYPE:_            case ClassWriter.INDY:_                size = 5__                break__            case ClassWriter.LONG:_            case ClassWriter.DOUBLE:_                size = 9__                ++i__                break__            case ClassWriter.UTF8:_                size = 3 + readUnsignedShort(index + 1)__                if (size > max) {_                    max = size__                }_                break__            case ClassWriter.HANDLE:_                size = 4__                break__            _            _            _            default:_                size = 3__                break__            }_            index += size__        }_        maxStringLength = max__        _        header = index__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read,param,off,the,start,offset,of,the,class,data,param,len,the,length,of,the,class,data;public,class,reader,final,byte,b,final,int,off,final,int,len,this,b,b,items,new,int,read,unsigned,short,off,8,int,n,items,length,strings,new,string,n,int,max,0,int,index,off,10,for,int,i,1,i,n,i,items,i,index,1,int,size,switch,b,index,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,case,class,writer,int,case,class,writer,float,case,class,writer,case,class,writer,indy,size,5,break,case,class,writer,long,case,class,writer,double,size,9,i,break,case,class,writer,utf8,size,3,read,unsigned,short,index,1,if,size,max,max,size,break,case,class,writer,handle,size,4,break,default,size,3,break,index,size,max,string,length,max,header,index
ClassReader -> public ClassReader(final byte[] b, final int off, final int len);1414499035;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read._@param off_the start offset of the class data._@param len_the length of the class data.;public ClassReader(final byte[] b, final int off, final int len) {_        this.b = b__        _		_        _        items = new int[readUnsignedShort(off + 8)]__        int n = items.length__        strings = new String[n]__        int max = 0__        int index = off + 10__        for (int i = 1_ i < n_ ++i) {_            items[i] = index + 1__            int size__            switch (b[index]) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_            case ClassWriter.INT:_            case ClassWriter.FLOAT:_            case ClassWriter.NAME_TYPE:_            case ClassWriter.INDY:_                size = 5__                break__            case ClassWriter.LONG:_            case ClassWriter.DOUBLE:_                size = 9__                ++i__                break__            case ClassWriter.UTF8:_                size = 3 + readUnsignedShort(index + 1)__                if (size > max) {_                    max = size__                }_                break__            case ClassWriter.HANDLE:_                size = 4__                break__            _            _            _            default:_                size = 3__                break__            }_            index += size__        }_        maxStringLength = max__        _        header = index__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read,param,off,the,start,offset,of,the,class,data,param,len,the,length,of,the,class,data;public,class,reader,final,byte,b,final,int,off,final,int,len,this,b,b,items,new,int,read,unsigned,short,off,8,int,n,items,length,strings,new,string,n,int,max,0,int,index,off,10,for,int,i,1,i,n,i,items,i,index,1,int,size,switch,b,index,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,case,class,writer,int,case,class,writer,float,case,class,writer,case,class,writer,indy,size,5,break,case,class,writer,long,case,class,writer,double,size,9,i,break,case,class,writer,utf8,size,3,read,unsigned,short,index,1,if,size,max,max,size,break,case,class,writer,handle,size,4,break,default,size,3,break,index,size,max,string,length,max,header,index
ClassReader -> public ClassReader(final byte[] b, final int off, final int len);1416998550;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read._@param off_the start offset of the class data._@param len_the length of the class data.;public ClassReader(final byte[] b, final int off, final int len) {_        this.b = b__        _		_        _        items = new int[readUnsignedShort(off + 8)]__        int n = items.length__        strings = new String[n]__        int max = 0__        int index = off + 10__        for (int i = 1_ i < n_ ++i) {_            items[i] = index + 1__            int size__            switch (b[index]) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_            case ClassWriter.INT:_            case ClassWriter.FLOAT:_            case ClassWriter.NAME_TYPE:_            case ClassWriter.INDY:_                size = 5__                break__            case ClassWriter.LONG:_            case ClassWriter.DOUBLE:_                size = 9__                ++i__                break__            case ClassWriter.UTF8:_                size = 3 + readUnsignedShort(index + 1)__                if (size > max) {_                    max = size__                }_                break__            case ClassWriter.HANDLE:_                size = 4__                break__            _            _            _            default:_                size = 3__                break__            }_            index += size__        }_        maxStringLength = max__        _        header = index__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read,param,off,the,start,offset,of,the,class,data,param,len,the,length,of,the,class,data;public,class,reader,final,byte,b,final,int,off,final,int,len,this,b,b,items,new,int,read,unsigned,short,off,8,int,n,items,length,strings,new,string,n,int,max,0,int,index,off,10,for,int,i,1,i,n,i,items,i,index,1,int,size,switch,b,index,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,case,class,writer,int,case,class,writer,float,case,class,writer,case,class,writer,indy,size,5,break,case,class,writer,long,case,class,writer,double,size,9,i,break,case,class,writer,utf8,size,3,read,unsigned,short,index,1,if,size,max,max,size,break,case,class,writer,handle,size,4,break,default,size,3,break,index,size,max,string,length,max,header,index
ClassReader -> public ClassReader(final byte[] b, final int off, final int len);1457705343;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read._@param off_the start offset of the class data._@param len_the length of the class data.;public ClassReader(final byte[] b, final int off, final int len) {_        this.b = b__        _		_        _        items = new int[readUnsignedShort(off + 8)]__        int n = items.length__        strings = new String[n]__        int max = 0__        int index = off + 10__        for (int i = 1_ i < n_ ++i) {_            items[i] = index + 1__            int size__            switch (b[index]) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_            case ClassWriter.INT:_            case ClassWriter.FLOAT:_            case ClassWriter.NAME_TYPE:_            case ClassWriter.INDY:_                size = 5__                break__            case ClassWriter.LONG:_            case ClassWriter.DOUBLE:_                size = 9__                ++i__                break__            case ClassWriter.UTF8:_                size = 3 + readUnsignedShort(index + 1)__                if (size > max) {_                    max = size__                }_                break__            case ClassWriter.HANDLE:_                size = 4__                break__            _            _            _            default:_                size = 3__                break__            }_            index += size__        }_        maxStringLength = max__        _        header = index__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read,param,off,the,start,offset,of,the,class,data,param,len,the,length,of,the,class,data;public,class,reader,final,byte,b,final,int,off,final,int,len,this,b,b,items,new,int,read,unsigned,short,off,8,int,n,items,length,strings,new,string,n,int,max,0,int,index,off,10,for,int,i,1,i,n,i,items,i,index,1,int,size,switch,b,index,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,case,class,writer,int,case,class,writer,float,case,class,writer,case,class,writer,indy,size,5,break,case,class,writer,long,case,class,writer,double,size,9,i,break,case,class,writer,utf8,size,3,read,unsigned,short,index,1,if,size,max,max,size,break,case,class,writer,handle,size,4,break,default,size,3,break,index,size,max,string,length,max,header,index
ClassReader -> public ClassReader(final byte[] b, final int off, final int len);1459258703;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read._@param off_the start offset of the class data._@param len_the length of the class data.;public ClassReader(final byte[] b, final int off, final int len) {_        this.b = b__        _		_        _        items = new int[readUnsignedShort(off + 8)]__        int n = items.length__        strings = new String[n]__        int max = 0__        int index = off + 10__        for (int i = 1_ i < n_ ++i) {_            items[i] = index + 1__            int size__            switch (b[index]) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_            case ClassWriter.INT:_            case ClassWriter.FLOAT:_            case ClassWriter.NAME_TYPE:_            case ClassWriter.INDY:_                size = 5__                break__            case ClassWriter.LONG:_            case ClassWriter.DOUBLE:_                size = 9__                ++i__                break__            case ClassWriter.UTF8:_                size = 3 + readUnsignedShort(index + 1)__                if (size > max) {_                    max = size__                }_                break__            case ClassWriter.HANDLE:_                size = 4__                break__            _            _            _            default:_                size = 3__                break__            }_            index += size__        }_        maxStringLength = max__        _        header = index__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read,param,off,the,start,offset,of,the,class,data,param,len,the,length,of,the,class,data;public,class,reader,final,byte,b,final,int,off,final,int,len,this,b,b,items,new,int,read,unsigned,short,off,8,int,n,items,length,strings,new,string,n,int,max,0,int,index,off,10,for,int,i,1,i,n,i,items,i,index,1,int,size,switch,b,index,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,case,class,writer,int,case,class,writer,float,case,class,writer,case,class,writer,indy,size,5,break,case,class,writer,long,case,class,writer,double,size,9,i,break,case,class,writer,utf8,size,3,read,unsigned,short,index,1,if,size,max,max,size,break,case,class,writer,handle,size,4,break,default,size,3,break,index,size,max,string,length,max,header,index
ClassReader -> public ClassReader(final byte[] b, final int off, final int len);1478623137;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read._@param off_the start offset of the class data._@param len_the length of the class data.;public ClassReader(final byte[] b, final int off, final int len) {_        this.b = b__        _		_        _        items = new int[readUnsignedShort(off + 8)]__        int n = items.length__        strings = new String[n]__        int max = 0__        int index = off + 10__        for (int i = 1_ i < n_ ++i) {_            items[i] = index + 1__            int size__            switch (b[index]) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_            case ClassWriter.INT:_            case ClassWriter.FLOAT:_            case ClassWriter.NAME_TYPE:_            case ClassWriter.INDY:_                size = 5__                break__            case ClassWriter.LONG:_            case ClassWriter.DOUBLE:_                size = 9__                ++i__                break__            case ClassWriter.UTF8:_                size = 3 + readUnsignedShort(index + 1)__                if (size > max) {_                    max = size__                }_                break__            case ClassWriter.HANDLE:_                size = 4__                break__            _            _            _            default:_                size = 3__                break__            }_            index += size__        }_        maxStringLength = max__        _        header = index__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read,param,off,the,start,offset,of,the,class,data,param,len,the,length,of,the,class,data;public,class,reader,final,byte,b,final,int,off,final,int,len,this,b,b,items,new,int,read,unsigned,short,off,8,int,n,items,length,strings,new,string,n,int,max,0,int,index,off,10,for,int,i,1,i,n,i,items,i,index,1,int,size,switch,b,index,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,case,class,writer,int,case,class,writer,float,case,class,writer,case,class,writer,indy,size,5,break,case,class,writer,long,case,class,writer,double,size,9,i,break,case,class,writer,utf8,size,3,read,unsigned,short,index,1,if,size,max,max,size,break,case,class,writer,handle,size,4,break,default,size,3,break,index,size,max,string,length,max,header,index
ClassReader -> public ClassReader(final byte[] b, final int off, final int len);1483093254;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read._@param off_the start offset of the class data._@param len_the length of the class data.;public ClassReader(final byte[] b, final int off, final int len) {_        this.b = b__        _		_        _        items = new int[readUnsignedShort(off + 8)]__        int n = items.length__        strings = new String[n]__        int max = 0__        int index = off + 10__        for (int i = 1_ i < n_ ++i) {_            items[i] = index + 1__            int size__            switch (b[index]) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_            case ClassWriter.INT:_            case ClassWriter.FLOAT:_            case ClassWriter.NAME_TYPE:_            case ClassWriter.INDY:_                size = 5__                break__            case ClassWriter.LONG:_            case ClassWriter.DOUBLE:_                size = 9__                ++i__                break__            case ClassWriter.UTF8:_                size = 3 + readUnsignedShort(index + 1)__                if (size > max) {_                    max = size__                }_                break__            case ClassWriter.HANDLE:_                size = 4__                break__            _            _            _            default:_                size = 3__                break__            }_            index += size__        }_        maxStringLength = max__        _        header = index__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read,param,off,the,start,offset,of,the,class,data,param,len,the,length,of,the,class,data;public,class,reader,final,byte,b,final,int,off,final,int,len,this,b,b,items,new,int,read,unsigned,short,off,8,int,n,items,length,strings,new,string,n,int,max,0,int,index,off,10,for,int,i,1,i,n,i,items,i,index,1,int,size,switch,b,index,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,case,class,writer,int,case,class,writer,float,case,class,writer,case,class,writer,indy,size,5,break,case,class,writer,long,case,class,writer,double,size,9,i,break,case,class,writer,utf8,size,3,read,unsigned,short,index,1,if,size,max,max,size,break,case,class,writer,handle,size,4,break,default,size,3,break,index,size,max,string,length,max,header,index
ClassReader -> public ClassReader(final byte[] b, final int off, final int len);1505821772;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read._@param off_the start offset of the class data._@param len_the length of the class data.;public ClassReader(final byte[] b, final int off, final int len) {_        this.b = b__        _		_        _        items = new int[readUnsignedShort(off + 8)]__        int n = items.length__        strings = new String[n]__        int max = 0__        int index = off + 10__        for (int i = 1_ i < n_ ++i) {_            items[i] = index + 1__            int size__            switch (b[index]) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_            case ClassWriter.INT:_            case ClassWriter.FLOAT:_            case ClassWriter.NAME_TYPE:_            case ClassWriter.INDY:_                size = 5__                break__            case ClassWriter.LONG:_            case ClassWriter.DOUBLE:_                size = 9__                ++i__                break__            case ClassWriter.UTF8:_                size = 3 + readUnsignedShort(index + 1)__                if (size > max) {_                    max = size__                }_                break__            case ClassWriter.HANDLE:_                size = 4__                break__            _            _            _            _            _            default:_                size = 3__                break__            }_            index += size__        }_        maxStringLength = max__        _        header = index__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read,param,off,the,start,offset,of,the,class,data,param,len,the,length,of,the,class,data;public,class,reader,final,byte,b,final,int,off,final,int,len,this,b,b,items,new,int,read,unsigned,short,off,8,int,n,items,length,strings,new,string,n,int,max,0,int,index,off,10,for,int,i,1,i,n,i,items,i,index,1,int,size,switch,b,index,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,case,class,writer,int,case,class,writer,float,case,class,writer,case,class,writer,indy,size,5,break,case,class,writer,long,case,class,writer,double,size,9,i,break,case,class,writer,utf8,size,3,read,unsigned,short,index,1,if,size,max,max,size,break,case,class,writer,handle,size,4,break,default,size,3,break,index,size,max,string,length,max,header,index
ClassReader -> private static byte[] readClass(final InputStream is, boolean close)             throws IOException;1366718246;Reads the bytecode of a class.__@param is_an input stream from which to read the class._@param close_true to close the input stream after reading._@return the bytecode read from the given input stream._@throws IOException_if a problem occurs during reading.;private static byte[] readClass(final InputStream is, boolean close)_            throws IOException {_        if (is == null) {_            throw new IOException("Class not found")__        }_        try {_            byte[] b = new byte[is.available()]__            int len = 0__            while (true) {_                int n = is.read(b, len, b.length - len)__                if (n == -1) {_                    if (len < b.length) {_                        byte[] c = new byte[len]__                        System.arraycopy(b, 0, c, 0, len)__                        b = c__                    }_                    return b__                }_                len += n__                if (len == b.length) {_                    int last = is.read()__                    if (last < 0) {_                        return b__                    }_                    byte[] c = new byte[b.length + 1000]__                    System.arraycopy(b, 0, c, 0, len)__                    c[len++] = (byte) last__                    b = c__                }_            }_        } finally {_            if (close) {_                is.close()__            }_        }_    };reads,the,bytecode,of,a,class,param,is,an,input,stream,from,which,to,read,the,class,param,close,true,to,close,the,input,stream,after,reading,return,the,bytecode,read,from,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,class,final,input,stream,is,boolean,close,throws,ioexception,if,is,null,throw,new,ioexception,class,not,found,try,byte,b,new,byte,is,available,int,len,0,while,true,int,n,is,read,b,len,b,length,len,if,n,1,if,len,b,length,byte,c,new,byte,len,system,arraycopy,b,0,c,0,len,b,c,return,b,len,n,if,len,b,length,int,last,is,read,if,last,0,return,b,byte,c,new,byte,b,length,1000,system,arraycopy,b,0,c,0,len,c,len,byte,last,b,c,finally,if,close,is,close
ClassReader -> private static byte[] readClass(final InputStream is, boolean close)             throws IOException;1395273982;Reads the bytecode of a class.__@param is_an input stream from which to read the class._@param close_true to close the input stream after reading._@return the bytecode read from the given input stream._@throws IOException_if a problem occurs during reading.;private static byte[] readClass(final InputStream is, boolean close)_            throws IOException {_        if (is == null) {_            throw new IOException("Class not found")__        }_        try {_            byte[] b = new byte[is.available()]__            int len = 0__            while (true) {_                int n = is.read(b, len, b.length - len)__                if (n == -1) {_                    if (len < b.length) {_                        byte[] c = new byte[len]__                        System.arraycopy(b, 0, c, 0, len)__                        b = c__                    }_                    return b__                }_                len += n__                if (len == b.length) {_                    int last = is.read()__                    if (last < 0) {_                        return b__                    }_                    byte[] c = new byte[b.length + 1000]__                    System.arraycopy(b, 0, c, 0, len)__                    c[len++] = (byte) last__                    b = c__                }_            }_        } finally {_            if (close) {_                is.close()__            }_        }_    };reads,the,bytecode,of,a,class,param,is,an,input,stream,from,which,to,read,the,class,param,close,true,to,close,the,input,stream,after,reading,return,the,bytecode,read,from,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,class,final,input,stream,is,boolean,close,throws,ioexception,if,is,null,throw,new,ioexception,class,not,found,try,byte,b,new,byte,is,available,int,len,0,while,true,int,n,is,read,b,len,b,length,len,if,n,1,if,len,b,length,byte,c,new,byte,len,system,arraycopy,b,0,c,0,len,b,c,return,b,len,n,if,len,b,length,int,last,is,read,if,last,0,return,b,byte,c,new,byte,b,length,1000,system,arraycopy,b,0,c,0,len,c,len,byte,last,b,c,finally,if,close,is,close
ClassReader -> private static byte[] readClass(final InputStream is, boolean close)             throws IOException;1414067099;Reads the bytecode of a class.__@param is_an input stream from which to read the class._@param close_true to close the input stream after reading._@return the bytecode read from the given input stream._@throws IOException_if a problem occurs during reading.;private static byte[] readClass(final InputStream is, boolean close)_            throws IOException {_        if (is == null) {_            throw new IOException("Class not found")__        }_        try {_            byte[] b = new byte[is.available()]__            int len = 0__            while (true) {_                int n = is.read(b, len, b.length - len)__                if (n == -1) {_                    if (len < b.length) {_                        byte[] c = new byte[len]__                        System.arraycopy(b, 0, c, 0, len)__                        b = c__                    }_                    return b__                }_                len += n__                if (len == b.length) {_                    int last = is.read()__                    if (last < 0) {_                        return b__                    }_                    byte[] c = new byte[b.length + 1000]__                    System.arraycopy(b, 0, c, 0, len)__                    c[len++] = (byte) last__                    b = c__                }_            }_        } finally {_            if (close) {_                is.close()__            }_        }_    };reads,the,bytecode,of,a,class,param,is,an,input,stream,from,which,to,read,the,class,param,close,true,to,close,the,input,stream,after,reading,return,the,bytecode,read,from,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,class,final,input,stream,is,boolean,close,throws,ioexception,if,is,null,throw,new,ioexception,class,not,found,try,byte,b,new,byte,is,available,int,len,0,while,true,int,n,is,read,b,len,b,length,len,if,n,1,if,len,b,length,byte,c,new,byte,len,system,arraycopy,b,0,c,0,len,b,c,return,b,len,n,if,len,b,length,int,last,is,read,if,last,0,return,b,byte,c,new,byte,b,length,1000,system,arraycopy,b,0,c,0,len,c,len,byte,last,b,c,finally,if,close,is,close
ClassReader -> private static byte[] readClass(final InputStream is, boolean close)             throws IOException;1414499035;Reads the bytecode of a class.__@param is_an input stream from which to read the class._@param close_true to close the input stream after reading._@return the bytecode read from the given input stream._@throws IOException_if a problem occurs during reading.;private static byte[] readClass(final InputStream is, boolean close)_            throws IOException {_        if (is == null) {_            throw new IOException("Class not found")__        }_        try {_            byte[] b = new byte[is.available()]__            int len = 0__            while (true) {_                int n = is.read(b, len, b.length - len)__                if (n == -1) {_                    if (len < b.length) {_                        byte[] c = new byte[len]__                        System.arraycopy(b, 0, c, 0, len)__                        b = c__                    }_                    return b__                }_                len += n__                if (len == b.length) {_                    int last = is.read()__                    if (last < 0) {_                        return b__                    }_                    byte[] c = new byte[b.length + 1000]__                    System.arraycopy(b, 0, c, 0, len)__                    c[len++] = (byte) last__                    b = c__                }_            }_        } finally {_            if (close) {_                is.close()__            }_        }_    };reads,the,bytecode,of,a,class,param,is,an,input,stream,from,which,to,read,the,class,param,close,true,to,close,the,input,stream,after,reading,return,the,bytecode,read,from,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,class,final,input,stream,is,boolean,close,throws,ioexception,if,is,null,throw,new,ioexception,class,not,found,try,byte,b,new,byte,is,available,int,len,0,while,true,int,n,is,read,b,len,b,length,len,if,n,1,if,len,b,length,byte,c,new,byte,len,system,arraycopy,b,0,c,0,len,b,c,return,b,len,n,if,len,b,length,int,last,is,read,if,last,0,return,b,byte,c,new,byte,b,length,1000,system,arraycopy,b,0,c,0,len,c,len,byte,last,b,c,finally,if,close,is,close
ClassReader -> private static byte[] readClass(final InputStream is, boolean close)             throws IOException;1416998550;Reads the bytecode of a class.__@param is_an input stream from which to read the class._@param close_true to close the input stream after reading._@return the bytecode read from the given input stream._@throws IOException_if a problem occurs during reading.;private static byte[] readClass(final InputStream is, boolean close)_            throws IOException {_        if (is == null) {_            throw new IOException("Class not found")__        }_        try {_            byte[] b = new byte[is.available()]__            int len = 0__            while (true) {_                int n = is.read(b, len, b.length - len)__                if (n == -1) {_                    if (len < b.length) {_                        byte[] c = new byte[len]__                        System.arraycopy(b, 0, c, 0, len)__                        b = c__                    }_                    return b__                }_                len += n__                if (len == b.length) {_                    int last = is.read()__                    if (last < 0) {_                        return b__                    }_                    byte[] c = new byte[b.length + 1000]__                    System.arraycopy(b, 0, c, 0, len)__                    c[len++] = (byte) last__                    b = c__                }_            }_        } finally {_            if (close) {_                is.close()__            }_        }_    };reads,the,bytecode,of,a,class,param,is,an,input,stream,from,which,to,read,the,class,param,close,true,to,close,the,input,stream,after,reading,return,the,bytecode,read,from,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,class,final,input,stream,is,boolean,close,throws,ioexception,if,is,null,throw,new,ioexception,class,not,found,try,byte,b,new,byte,is,available,int,len,0,while,true,int,n,is,read,b,len,b,length,len,if,n,1,if,len,b,length,byte,c,new,byte,len,system,arraycopy,b,0,c,0,len,b,c,return,b,len,n,if,len,b,length,int,last,is,read,if,last,0,return,b,byte,c,new,byte,b,length,1000,system,arraycopy,b,0,c,0,len,c,len,byte,last,b,c,finally,if,close,is,close
ClassReader -> private static byte[] readClass(final InputStream is, boolean close)             throws IOException;1457705343;Reads the bytecode of a class.__@param is_an input stream from which to read the class._@param close_true to close the input stream after reading._@return the bytecode read from the given input stream._@throws IOException_if a problem occurs during reading.;private static byte[] readClass(final InputStream is, boolean close)_            throws IOException {_        if (is == null) {_            throw new IOException("Class not found")__        }_        try {_            byte[] b = new byte[is.available()]__            int len = 0__            while (true) {_                int n = is.read(b, len, b.length - len)__                if (n == -1) {_                    if (len < b.length) {_                        byte[] c = new byte[len]__                        System.arraycopy(b, 0, c, 0, len)__                        b = c__                    }_                    return b__                }_                len += n__                if (len == b.length) {_                    int last = is.read()__                    if (last < 0) {_                        return b__                    }_                    byte[] c = new byte[b.length + 1000]__                    System.arraycopy(b, 0, c, 0, len)__                    c[len++] = (byte) last__                    b = c__                }_            }_        } finally {_            if (close) {_                is.close()__            }_        }_    };reads,the,bytecode,of,a,class,param,is,an,input,stream,from,which,to,read,the,class,param,close,true,to,close,the,input,stream,after,reading,return,the,bytecode,read,from,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,class,final,input,stream,is,boolean,close,throws,ioexception,if,is,null,throw,new,ioexception,class,not,found,try,byte,b,new,byte,is,available,int,len,0,while,true,int,n,is,read,b,len,b,length,len,if,n,1,if,len,b,length,byte,c,new,byte,len,system,arraycopy,b,0,c,0,len,b,c,return,b,len,n,if,len,b,length,int,last,is,read,if,last,0,return,b,byte,c,new,byte,b,length,1000,system,arraycopy,b,0,c,0,len,c,len,byte,last,b,c,finally,if,close,is,close
ClassReader -> private static byte[] readClass(final InputStream is, boolean close)             throws IOException;1459258703;Reads the bytecode of a class.__@param is_an input stream from which to read the class._@param close_true to close the input stream after reading._@return the bytecode read from the given input stream._@throws IOException_if a problem occurs during reading.;private static byte[] readClass(final InputStream is, boolean close)_            throws IOException {_        if (is == null) {_            throw new IOException("Class not found")__        }_        try {_            byte[] b = new byte[is.available()]__            int len = 0__            while (true) {_                int n = is.read(b, len, b.length - len)__                if (n == -1) {_                    if (len < b.length) {_                        byte[] c = new byte[len]__                        System.arraycopy(b, 0, c, 0, len)__                        b = c__                    }_                    return b__                }_                len += n__                if (len == b.length) {_                    int last = is.read()__                    if (last < 0) {_                        return b__                    }_                    byte[] c = new byte[b.length + 1000]__                    System.arraycopy(b, 0, c, 0, len)__                    c[len++] = (byte) last__                    b = c__                }_            }_        } finally {_            if (close) {_                is.close()__            }_        }_    };reads,the,bytecode,of,a,class,param,is,an,input,stream,from,which,to,read,the,class,param,close,true,to,close,the,input,stream,after,reading,return,the,bytecode,read,from,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,class,final,input,stream,is,boolean,close,throws,ioexception,if,is,null,throw,new,ioexception,class,not,found,try,byte,b,new,byte,is,available,int,len,0,while,true,int,n,is,read,b,len,b,length,len,if,n,1,if,len,b,length,byte,c,new,byte,len,system,arraycopy,b,0,c,0,len,b,c,return,b,len,n,if,len,b,length,int,last,is,read,if,last,0,return,b,byte,c,new,byte,b,length,1000,system,arraycopy,b,0,c,0,len,c,len,byte,last,b,c,finally,if,close,is,close
ClassReader -> private static byte[] readClass(final InputStream is, boolean close)             throws IOException;1478623137;Reads the bytecode of a class.__@param is_an input stream from which to read the class._@param close_true to close the input stream after reading._@return the bytecode read from the given input stream._@throws IOException_if a problem occurs during reading.;private static byte[] readClass(final InputStream is, boolean close)_            throws IOException {_        if (is == null) {_            throw new IOException("Class not found")__        }_        try {_            byte[] b = new byte[is.available()]__            int len = 0__            while (true) {_                int n = is.read(b, len, b.length - len)__                if (n == -1) {_                    if (len < b.length) {_                        byte[] c = new byte[len]__                        System.arraycopy(b, 0, c, 0, len)__                        b = c__                    }_                    return b__                }_                len += n__                if (len == b.length) {_                    int last = is.read()__                    if (last < 0) {_                        return b__                    }_                    byte[] c = new byte[b.length + 1000]__                    System.arraycopy(b, 0, c, 0, len)__                    c[len++] = (byte) last__                    b = c__                }_            }_        } finally {_            if (close) {_                is.close()__            }_        }_    };reads,the,bytecode,of,a,class,param,is,an,input,stream,from,which,to,read,the,class,param,close,true,to,close,the,input,stream,after,reading,return,the,bytecode,read,from,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,class,final,input,stream,is,boolean,close,throws,ioexception,if,is,null,throw,new,ioexception,class,not,found,try,byte,b,new,byte,is,available,int,len,0,while,true,int,n,is,read,b,len,b,length,len,if,n,1,if,len,b,length,byte,c,new,byte,len,system,arraycopy,b,0,c,0,len,b,c,return,b,len,n,if,len,b,length,int,last,is,read,if,last,0,return,b,byte,c,new,byte,b,length,1000,system,arraycopy,b,0,c,0,len,c,len,byte,last,b,c,finally,if,close,is,close
ClassReader -> private static byte[] readClass(final InputStream is, boolean close)             throws IOException;1483093254;Reads the bytecode of a class.__@param is_an input stream from which to read the class._@param close_true to close the input stream after reading._@return the bytecode read from the given input stream._@throws IOException_if a problem occurs during reading.;private static byte[] readClass(final InputStream is, boolean close)_            throws IOException {_        if (is == null) {_            throw new IOException("Class not found")__        }_        try {_            byte[] b = new byte[is.available()]__            int len = 0__            while (true) {_                int n = is.read(b, len, b.length - len)__                if (n == -1) {_                    if (len < b.length) {_                        byte[] c = new byte[len]__                        System.arraycopy(b, 0, c, 0, len)__                        b = c__                    }_                    return b__                }_                len += n__                if (len == b.length) {_                    int last = is.read()__                    if (last < 0) {_                        return b__                    }_                    byte[] c = new byte[b.length + 1000]__                    System.arraycopy(b, 0, c, 0, len)__                    c[len++] = (byte) last__                    b = c__                }_            }_        } finally {_            if (close) {_                is.close()__            }_        }_    };reads,the,bytecode,of,a,class,param,is,an,input,stream,from,which,to,read,the,class,param,close,true,to,close,the,input,stream,after,reading,return,the,bytecode,read,from,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,class,final,input,stream,is,boolean,close,throws,ioexception,if,is,null,throw,new,ioexception,class,not,found,try,byte,b,new,byte,is,available,int,len,0,while,true,int,n,is,read,b,len,b,length,len,if,n,1,if,len,b,length,byte,c,new,byte,len,system,arraycopy,b,0,c,0,len,b,c,return,b,len,n,if,len,b,length,int,last,is,read,if,last,0,return,b,byte,c,new,byte,b,length,1000,system,arraycopy,b,0,c,0,len,c,len,byte,last,b,c,finally,if,close,is,close
ClassReader -> private static byte[] readClass(final InputStream is, boolean close)             throws IOException;1505821772;Reads the bytecode of a class.__@param is_an input stream from which to read the class._@param close_true to close the input stream after reading._@return the bytecode read from the given input stream._@throws IOException_if a problem occurs during reading.;private static byte[] readClass(final InputStream is, boolean close)_            throws IOException {_        if (is == null) {_            throw new IOException("Class not found")__        }_        try {_            byte[] b = new byte[is.available()]__            int len = 0__            while (true) {_                int n = is.read(b, len, b.length - len)__                if (n == -1) {_                    if (len < b.length) {_                        byte[] c = new byte[len]__                        System.arraycopy(b, 0, c, 0, len)__                        b = c__                    }_                    return b__                }_                len += n__                if (len == b.length) {_                    int last = is.read()__                    if (last < 0) {_                        return b__                    }_                    byte[] c = new byte[b.length + 1000]__                    System.arraycopy(b, 0, c, 0, len)__                    c[len++] = (byte) last__                    b = c__                }_            }_        } finally {_            if (close) {_                is.close()__            }_        }_    };reads,the,bytecode,of,a,class,param,is,an,input,stream,from,which,to,read,the,class,param,close,true,to,close,the,input,stream,after,reading,return,the,bytecode,read,from,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,class,final,input,stream,is,boolean,close,throws,ioexception,if,is,null,throw,new,ioexception,class,not,found,try,byte,b,new,byte,is,available,int,len,0,while,true,int,n,is,read,b,len,b,length,len,if,n,1,if,len,b,length,byte,c,new,byte,len,system,arraycopy,b,0,c,0,len,b,c,return,b,len,n,if,len,b,length,int,last,is,read,if,last,0,return,b,byte,c,new,byte,b,length,1000,system,arraycopy,b,0,c,0,len,c,len,byte,last,b,c,finally,if,close,is,close
ClassReader -> private Attribute readAttribute(       final Attribute[] attributePrototypes,       final String type,       final int offset,       final int length,       final char[] charBuffer,       final int codeAttributeOffset,       final Label[] labels);1531241461;Reads a non standard JVMS 'attribute' structure in {@link #b}.__@param attributePrototypes prototypes of the attributes that must be parsed during the visit of_the class. Any attribute whose type is not equal to the type of one the prototypes will not_be parsed: its byte array value will be passed unchanged to the ClassWriter._@param type the type of the attribute._@param offset the start offset of the JVMS 'attribute' structure in {@link #b}. The 6 attribute_header bytes (attribute_name_index and attribute_length) are not taken into account here._@param length the length of the attribute's content (excluding the 6 attribute header bytes)._@param charBuffer the buffer to be used to read strings in the constant pool._@param codeAttributeOffset the start offset of the enclosing Code attribute in {@link #b}, or_-1 if the attribute to be read is not a code attribute. The 6 attribute header bytes_(attribute_name_index and attribute_length) are not taken into account here._@param labels the labels of the method's code, or <tt>null</tt> if the attribute to be read is_not a code attribute._@return the attribute that has been read.;private Attribute readAttribute(_      final Attribute[] attributePrototypes,_      final String type,_      final int offset,_      final int length,_      final char[] charBuffer,_      final int codeAttributeOffset,_      final Label[] labels) {_    for (int i = 0_ i < attributePrototypes.length_ ++i) {_      if (attributePrototypes[i].type.equals(type)) {_        return attributePrototypes[i].read(_            this, offset, length, charBuffer, codeAttributeOffset, labels)__      }_    }_    return new Attribute(type).read(this, offset, length, null, -1, null)__  };reads,a,non,standard,jvms,attribute,structure,in,link,b,param,attribute,prototypes,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,param,type,the,type,of,the,attribute,param,offset,the,start,offset,of,the,jvms,attribute,structure,in,link,b,the,6,attribute,header,bytes,and,are,not,taken,into,account,here,param,length,the,length,of,the,attribute,s,content,excluding,the,6,attribute,header,bytes,param,char,buffer,the,buffer,to,be,used,to,read,strings,in,the,constant,pool,param,code,attribute,offset,the,start,offset,of,the,enclosing,code,attribute,in,link,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,and,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,tt,null,tt,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read;private,attribute,read,attribute,final,attribute,attribute,prototypes,final,string,type,final,int,offset,final,int,length,final,char,char,buffer,final,int,code,attribute,offset,final,label,labels,for,int,i,0,i,attribute,prototypes,length,i,if,attribute,prototypes,i,type,equals,type,return,attribute,prototypes,i,read,this,offset,length,char,buffer,code,attribute,offset,labels,return,new,attribute,type,read,this,offset,length,null,1,null
ClassReader -> private Attribute readAttribute(       final Attribute[] attributePrototypes,       final String type,       final int offset,       final int length,       final char[] charBuffer,       final int codeAttributeOffset,       final Label[] labels);1536664245;Reads a non standard JVMS 'attribute' structure in {@link #b}.__@param attributePrototypes prototypes of the attributes that must be parsed during the visit of_the class. Any attribute whose type is not equal to the type of one the prototypes will not_be parsed: its byte array value will be passed unchanged to the ClassWriter._@param type the type of the attribute._@param offset the start offset of the JVMS 'attribute' structure in {@link #b}. The 6 attribute_header bytes (attribute_name_index and attribute_length) are not taken into account here._@param length the length of the attribute's content (excluding the 6 attribute header bytes)._@param charBuffer the buffer to be used to read strings in the constant pool._@param codeAttributeOffset the start offset of the enclosing Code attribute in {@link #b}, or_-1 if the attribute to be read is not a code attribute. The 6 attribute header bytes_(attribute_name_index and attribute_length) are not taken into account here._@param labels the labels of the method's code, or {@literal null} if the attribute to be read_is not a code attribute._@return the attribute that has been read.;private Attribute readAttribute(_      final Attribute[] attributePrototypes,_      final String type,_      final int offset,_      final int length,_      final char[] charBuffer,_      final int codeAttributeOffset,_      final Label[] labels) {_    for (int i = 0_ i < attributePrototypes.length_ ++i) {_      if (attributePrototypes[i].type.equals(type)) {_        return attributePrototypes[i].read(_            this, offset, length, charBuffer, codeAttributeOffset, labels)__      }_    }_    return new Attribute(type).read(this, offset, length, null, -1, null)__  };reads,a,non,standard,jvms,attribute,structure,in,link,b,param,attribute,prototypes,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,param,type,the,type,of,the,attribute,param,offset,the,start,offset,of,the,jvms,attribute,structure,in,link,b,the,6,attribute,header,bytes,and,are,not,taken,into,account,here,param,length,the,length,of,the,attribute,s,content,excluding,the,6,attribute,header,bytes,param,char,buffer,the,buffer,to,be,used,to,read,strings,in,the,constant,pool,param,code,attribute,offset,the,start,offset,of,the,enclosing,code,attribute,in,link,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,and,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,literal,null,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read;private,attribute,read,attribute,final,attribute,attribute,prototypes,final,string,type,final,int,offset,final,int,length,final,char,char,buffer,final,int,code,attribute,offset,final,label,labels,for,int,i,0,i,attribute,prototypes,length,i,if,attribute,prototypes,i,type,equals,type,return,attribute,prototypes,i,read,this,offset,length,char,buffer,code,attribute,offset,labels,return,new,attribute,type,read,this,offset,length,null,1,null
ClassReader -> private Attribute readAttribute(       final Attribute[] attributePrototypes,       final String type,       final int offset,       final int length,       final char[] charBuffer,       final int codeAttributeOffset,       final Label[] labels);1536747989;Reads a non standard JVMS 'attribute' structure in {@link #b}.__@param attributePrototypes prototypes of the attributes that must be parsed during the visit of_the class. Any attribute whose type is not equal to the type of one the prototypes will not_be parsed: its byte array value will be passed unchanged to the ClassWriter._@param type the type of the attribute._@param offset the start offset of the JVMS 'attribute' structure in {@link #b}. The 6 attribute_header bytes (attribute_name_index and attribute_length) are not taken into account here._@param length the length of the attribute's content (excluding the 6 attribute header bytes)._@param charBuffer the buffer to be used to read strings in the constant pool._@param codeAttributeOffset the start offset of the enclosing Code attribute in {@link #b}, or_-1 if the attribute to be read is not a code attribute. The 6 attribute header bytes_(attribute_name_index and attribute_length) are not taken into account here._@param labels the labels of the method's code, or {@literal null} if the attribute to be read_is not a code attribute._@return the attribute that has been read.;private Attribute readAttribute(_      final Attribute[] attributePrototypes,_      final String type,_      final int offset,_      final int length,_      final char[] charBuffer,_      final int codeAttributeOffset,_      final Label[] labels) {_    for (int i = 0_ i < attributePrototypes.length_ ++i) {_      if (attributePrototypes[i].type.equals(type)) {_        return attributePrototypes[i].read(_            this, offset, length, charBuffer, codeAttributeOffset, labels)__      }_    }_    return new Attribute(type).read(this, offset, length, null, -1, null)__  };reads,a,non,standard,jvms,attribute,structure,in,link,b,param,attribute,prototypes,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,param,type,the,type,of,the,attribute,param,offset,the,start,offset,of,the,jvms,attribute,structure,in,link,b,the,6,attribute,header,bytes,and,are,not,taken,into,account,here,param,length,the,length,of,the,attribute,s,content,excluding,the,6,attribute,header,bytes,param,char,buffer,the,buffer,to,be,used,to,read,strings,in,the,constant,pool,param,code,attribute,offset,the,start,offset,of,the,enclosing,code,attribute,in,link,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,and,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,literal,null,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read;private,attribute,read,attribute,final,attribute,attribute,prototypes,final,string,type,final,int,offset,final,int,length,final,char,char,buffer,final,int,code,attribute,offset,final,label,labels,for,int,i,0,i,attribute,prototypes,length,i,if,attribute,prototypes,i,type,equals,type,return,attribute,prototypes,i,read,this,offset,length,char,buffer,code,attribute,offset,labels,return,new,attribute,type,read,this,offset,length,null,1,null
ClassReader -> private Attribute readAttribute(       final Attribute[] attributePrototypes,       final String type,       final int offset,       final int length,       final char[] charBuffer,       final int codeAttributeOffset,       final Label[] labels);1537204147;Reads a non standard JVMS 'attribute' structure in {@link #b}.__@param attributePrototypes prototypes of the attributes that must be parsed during the visit of_the class. Any attribute whose type is not equal to the type of one the prototypes will not_be parsed: its byte array value will be passed unchanged to the ClassWriter._@param type the type of the attribute._@param offset the start offset of the JVMS 'attribute' structure in {@link #b}. The 6 attribute_header bytes (attribute_name_index and attribute_length) are not taken into account here._@param length the length of the attribute's content (excluding the 6 attribute header bytes)._@param charBuffer the buffer to be used to read strings in the constant pool._@param codeAttributeOffset the start offset of the enclosing Code attribute in {@link #b}, or_-1 if the attribute to be read is not a code attribute. The 6 attribute header bytes_(attribute_name_index and attribute_length) are not taken into account here._@param labels the labels of the method's code, or {@literal null} if the attribute to be read_is not a code attribute._@return the attribute that has been read.;private Attribute readAttribute(_      final Attribute[] attributePrototypes,_      final String type,_      final int offset,_      final int length,_      final char[] charBuffer,_      final int codeAttributeOffset,_      final Label[] labels) {_    for (int i = 0_ i < attributePrototypes.length_ ++i) {_      if (attributePrototypes[i].type.equals(type)) {_        return attributePrototypes[i].read(_            this, offset, length, charBuffer, codeAttributeOffset, labels)__      }_    }_    return new Attribute(type).read(this, offset, length, null, -1, null)__  };reads,a,non,standard,jvms,attribute,structure,in,link,b,param,attribute,prototypes,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,param,type,the,type,of,the,attribute,param,offset,the,start,offset,of,the,jvms,attribute,structure,in,link,b,the,6,attribute,header,bytes,and,are,not,taken,into,account,here,param,length,the,length,of,the,attribute,s,content,excluding,the,6,attribute,header,bytes,param,char,buffer,the,buffer,to,be,used,to,read,strings,in,the,constant,pool,param,code,attribute,offset,the,start,offset,of,the,enclosing,code,attribute,in,link,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,and,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,literal,null,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read;private,attribute,read,attribute,final,attribute,attribute,prototypes,final,string,type,final,int,offset,final,int,length,final,char,char,buffer,final,int,code,attribute,offset,final,label,labels,for,int,i,0,i,attribute,prototypes,length,i,if,attribute,prototypes,i,type,equals,type,return,attribute,prototypes,i,read,this,offset,length,char,buffer,code,attribute,offset,labels,return,new,attribute,type,read,this,offset,length,null,1,null
ClassReader -> private Attribute readAttribute(       final Attribute[] attributePrototypes,       final String type,       final int offset,       final int length,       final char[] charBuffer,       final int codeAttributeOffset,       final Label[] labels);1539119582;Reads a non standard JVMS 'attribute' structure in {@link #b}.__@param attributePrototypes prototypes of the attributes that must be parsed during the visit of_the class. Any attribute whose type is not equal to the type of one the prototypes will not_be parsed: its byte array value will be passed unchanged to the ClassWriter._@param type the type of the attribute._@param offset the start offset of the JVMS 'attribute' structure in {@link #b}. The 6 attribute_header bytes (attribute_name_index and attribute_length) are not taken into account here._@param length the length of the attribute's content (excluding the 6 attribute header bytes)._@param charBuffer the buffer to be used to read strings in the constant pool._@param codeAttributeOffset the start offset of the enclosing Code attribute in {@link #b}, or_-1 if the attribute to be read is not a code attribute. The 6 attribute header bytes_(attribute_name_index and attribute_length) are not taken into account here._@param labels the labels of the method's code, or {@literal null} if the attribute to be read_is not a code attribute._@return the attribute that has been read.;private Attribute readAttribute(_      final Attribute[] attributePrototypes,_      final String type,_      final int offset,_      final int length,_      final char[] charBuffer,_      final int codeAttributeOffset,_      final Label[] labels) {_    for (Attribute attributePrototype : attributePrototypes) {_      if (attributePrototype.type.equals(type)) {_        return attributePrototype.read(_            this, offset, length, charBuffer, codeAttributeOffset, labels)__      }_    }_    return new Attribute(type).read(this, offset, length, null, -1, null)__  };reads,a,non,standard,jvms,attribute,structure,in,link,b,param,attribute,prototypes,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,param,type,the,type,of,the,attribute,param,offset,the,start,offset,of,the,jvms,attribute,structure,in,link,b,the,6,attribute,header,bytes,and,are,not,taken,into,account,here,param,length,the,length,of,the,attribute,s,content,excluding,the,6,attribute,header,bytes,param,char,buffer,the,buffer,to,be,used,to,read,strings,in,the,constant,pool,param,code,attribute,offset,the,start,offset,of,the,enclosing,code,attribute,in,link,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,and,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,literal,null,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read;private,attribute,read,attribute,final,attribute,attribute,prototypes,final,string,type,final,int,offset,final,int,length,final,char,char,buffer,final,int,code,attribute,offset,final,label,labels,for,attribute,attribute,prototype,attribute,prototypes,if,attribute,prototype,type,equals,type,return,attribute,prototype,read,this,offset,length,char,buffer,code,attribute,offset,labels,return,new,attribute,type,read,this,offset,length,null,1,null
ClassReader -> private Attribute readAttribute(       final Attribute[] attributePrototypes,       final String type,       final int offset,       final int length,       final char[] charBuffer,       final int codeAttributeOffset,       final Label[] labels);1541436263;Reads a non standard JVMS 'attribute' structure in {@link #b}.__@param attributePrototypes prototypes of the attributes that must be parsed during the visit of_the class. Any attribute whose type is not equal to the type of one the prototypes will not_be parsed: its byte array value will be passed unchanged to the ClassWriter._@param type the type of the attribute._@param offset the start offset of the JVMS 'attribute' structure in {@link #b}. The 6 attribute_header bytes (attribute_name_index and attribute_length) are not taken into account here._@param length the length of the attribute's content (excluding the 6 attribute header bytes)._@param charBuffer the buffer to be used to read strings in the constant pool._@param codeAttributeOffset the start offset of the enclosing Code attribute in {@link #b}, or_-1 if the attribute to be read is not a code attribute. The 6 attribute header bytes_(attribute_name_index and attribute_length) are not taken into account here._@param labels the labels of the method's code, or {@literal null} if the attribute to be read_is not a code attribute._@return the attribute that has been read.;private Attribute readAttribute(_      final Attribute[] attributePrototypes,_      final String type,_      final int offset,_      final int length,_      final char[] charBuffer,_      final int codeAttributeOffset,_      final Label[] labels) {_    for (Attribute attributePrototype : attributePrototypes) {_      if (attributePrototype.type.equals(type)) {_        return attributePrototype.read(_            this, offset, length, charBuffer, codeAttributeOffset, labels)__      }_    }_    return new Attribute(type).read(this, offset, length, null, -1, null)__  };reads,a,non,standard,jvms,attribute,structure,in,link,b,param,attribute,prototypes,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,param,type,the,type,of,the,attribute,param,offset,the,start,offset,of,the,jvms,attribute,structure,in,link,b,the,6,attribute,header,bytes,and,are,not,taken,into,account,here,param,length,the,length,of,the,attribute,s,content,excluding,the,6,attribute,header,bytes,param,char,buffer,the,buffer,to,be,used,to,read,strings,in,the,constant,pool,param,code,attribute,offset,the,start,offset,of,the,enclosing,code,attribute,in,link,b,or,1,if,the,attribute,to,be,read,is,not,a,code,attribute,the,6,attribute,header,bytes,and,are,not,taken,into,account,here,param,labels,the,labels,of,the,method,s,code,or,literal,null,if,the,attribute,to,be,read,is,not,a,code,attribute,return,the,attribute,that,has,been,read;private,attribute,read,attribute,final,attribute,attribute,prototypes,final,string,type,final,int,offset,final,int,length,final,char,char,buffer,final,int,code,attribute,offset,final,label,labels,for,attribute,attribute,prototype,attribute,prototypes,if,attribute,prototype,type,equals,type,return,attribute,prototype,read,this,offset,length,char,buffer,code,attribute,offset,labels,return,new,attribute,type,read,this,offset,length,null,1,null
ClassReader -> private int[] readTypeAnnotations(       final MethodVisitor methodVisitor,       final Context context,       final int runtimeTypeAnnotationsOffset,       final boolean visible);1531241461;Parses a Runtime[In]VisibleTypeAnnotations attribute to find the offset of each type_annotation_entry it contains, to find the corresponding labels, and to visit the try catch block_annotations.__@param methodVisitor the method visitor to be used to visit the try catch block annotations._@param context information about the class being parsed._@param runtimeTypeAnnotationsOffset the start offset of a Runtime[In]VisibleTypeAnnotations_attribute, excluding the attribute_info's attribute_name_index and attribute_length fields._@param visible true if the attribute to parse is a RuntimeVisibleTypeAnnotations attribute,_false it is a RuntimeInvisibleTypeAnnotations attribute._@return the start offset of each entry of the Runtime[In]VisibleTypeAnnotations_attribute's_'annotations' array field.;private int[] readTypeAnnotations(_      final MethodVisitor methodVisitor,_      final Context context,_      final int runtimeTypeAnnotationsOffset,_      final boolean visible) {_    char[] charBuffer = context.charBuffer__    int currentOffset = runtimeTypeAnnotationsOffset__    _    int[] typeAnnotationsOffsets = new int[readUnsignedShort(currentOffset)]__    currentOffset += 2__    _    for (int i = 0_ i < typeAnnotationsOffsets.length_ ++i) {_      typeAnnotationsOffsets[i] = currentOffset__      _      _      int targetType = readInt(currentOffset)__      switch (targetType >>> 24) {_        case TypeReference.LOCAL_VARIABLE:_        case TypeReference.RESOURCE_VARIABLE:_          _          _          int tableLength = readUnsignedShort(currentOffset + 1)__          currentOffset += 3__          while (tableLength-- > 0) {_            int startPc = readUnsignedShort(currentOffset)__            int length = readUnsignedShort(currentOffset + 2)__            _            currentOffset += 6__            createLabel(startPc, context.currentMethodLabels)__            createLabel(startPc + length, context.currentMethodLabels)__          }_          break__        case TypeReference.CAST:_        case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:_        case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:_        case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:_        case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:_          currentOffset += 4__          break__        case TypeReference.CLASS_EXTENDS:_        case TypeReference.CLASS_TYPE_PARAMETER_BOUND:_        case TypeReference.METHOD_TYPE_PARAMETER_BOUND:_        case TypeReference.THROWS:_        case TypeReference.EXCEPTION_PARAMETER:_        case TypeReference.INSTANCEOF:_        case TypeReference.NEW:_        case TypeReference.CONSTRUCTOR_REFERENCE:_        case TypeReference.METHOD_REFERENCE:_          currentOffset += 3__          break__        case TypeReference.CLASS_TYPE_PARAMETER:_        case TypeReference.METHOD_TYPE_PARAMETER:_        case TypeReference.METHOD_FORMAL_PARAMETER:_        case TypeReference.FIELD:_        case TypeReference.METHOD_RETURN:_        case TypeReference.METHOD_RECEIVER:_        default:_          _          throw new IllegalArgumentException()__      }_      _      _      int pathLength = readByte(currentOffset)__      if ((targetType >>> 24) == TypeReference.EXCEPTION_PARAMETER) {_        _        TypePath path = pathLength == 0 ? null : new TypePath(b, currentOffset)__        currentOffset += 1 + 2 * pathLength__        _        String annotationDescriptor = readUTF8(currentOffset, charBuffer)__        currentOffset += 2__        _        currentOffset =_            readElementValues(_                methodVisitor.visitTryCatchAnnotation(_                    targetType & 0xFFFFFF00, path, annotationDescriptor, visible),_                currentOffset,_                 true,_                charBuffer)__      } else {_        _        _        _        currentOffset += 3 + 2 * pathLength__        _        _        currentOffset =_            readElementValues(_                 null, currentOffset,  true, charBuffer)__      }_    }_    return typeAnnotationsOffsets__  };parses,a,runtime,in,visible,type,annotations,attribute,to,find,the,offset,of,each,entry,it,contains,to,find,the,corresponding,labels,and,to,visit,the,try,catch,block,annotations,param,method,visitor,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,runtime,type,annotations,offset,the,start,offset,of,a,runtime,in,visible,type,annotations,attribute,excluding,the,s,and,fields,param,visible,true,if,the,attribute,to,parse,is,a,runtime,visible,type,annotations,attribute,false,it,is,a,runtime,invisible,type,annotations,attribute,return,the,start,offset,of,each,entry,of,the,runtime,in,s,annotations,array,field;private,int,read,type,annotations,final,method,visitor,method,visitor,final,context,context,final,int,runtime,type,annotations,offset,final,boolean,visible,char,char,buffer,context,char,buffer,int,current,offset,runtime,type,annotations,offset,int,type,annotations,offsets,new,int,read,unsigned,short,current,offset,current,offset,2,for,int,i,0,i,type,annotations,offsets,length,i,type,annotations,offsets,i,current,offset,int,target,type,read,int,current,offset,switch,target,type,24,case,type,reference,case,type,reference,int,table,length,read,unsigned,short,current,offset,1,current,offset,3,while,table,length,0,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,current,offset,6,create,label,start,pc,context,current,method,labels,create,label,start,pc,length,context,current,method,labels,break,case,type,reference,cast,case,type,reference,case,type,reference,case,type,reference,case,type,reference,current,offset,4,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,throws,case,type,reference,case,type,reference,instanceof,case,type,reference,new,case,type,reference,case,type,reference,current,offset,3,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,field,case,type,reference,case,type,reference,default,throw,new,illegal,argument,exception,int,path,length,read,byte,current,offset,if,target,type,24,type,reference,type,path,path,path,length,0,null,new,type,path,b,current,offset,current,offset,1,2,path,length,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,current,offset,read,element,values,method,visitor,visit,try,catch,annotation,target,type,0x,ffffff00,path,annotation,descriptor,visible,current,offset,true,char,buffer,else,current,offset,3,2,path,length,current,offset,read,element,values,null,current,offset,true,char,buffer,return,type,annotations,offsets
ClassReader -> private int[] readTypeAnnotations(       final MethodVisitor methodVisitor,       final Context context,       final int runtimeTypeAnnotationsOffset,       final boolean visible);1536664245;Parses a Runtime[In]VisibleTypeAnnotations attribute to find the offset of each type_annotation_entry it contains, to find the corresponding labels, and to visit the try catch block_annotations.__@param methodVisitor the method visitor to be used to visit the try catch block annotations._@param context information about the class being parsed._@param runtimeTypeAnnotationsOffset the start offset of a Runtime[In]VisibleTypeAnnotations_attribute, excluding the attribute_info's attribute_name_index and attribute_length fields._@param visible true if the attribute to parse is a RuntimeVisibleTypeAnnotations attribute,_false it is a RuntimeInvisibleTypeAnnotations attribute._@return the start offset of each entry of the Runtime[In]VisibleTypeAnnotations_attribute's_'annotations' array field.;private int[] readTypeAnnotations(_      final MethodVisitor methodVisitor,_      final Context context,_      final int runtimeTypeAnnotationsOffset,_      final boolean visible) {_    char[] charBuffer = context.charBuffer__    int currentOffset = runtimeTypeAnnotationsOffset__    _    int[] typeAnnotationsOffsets = new int[readUnsignedShort(currentOffset)]__    currentOffset += 2__    _    for (int i = 0_ i < typeAnnotationsOffsets.length_ ++i) {_      typeAnnotationsOffsets[i] = currentOffset__      _      _      int targetType = readInt(currentOffset)__      switch (targetType >>> 24) {_        case TypeReference.LOCAL_VARIABLE:_        case TypeReference.RESOURCE_VARIABLE:_          _          _          int tableLength = readUnsignedShort(currentOffset + 1)__          currentOffset += 3__          while (tableLength-- > 0) {_            int startPc = readUnsignedShort(currentOffset)__            int length = readUnsignedShort(currentOffset + 2)__            _            currentOffset += 6__            createLabel(startPc, context.currentMethodLabels)__            createLabel(startPc + length, context.currentMethodLabels)__          }_          break__        case TypeReference.CAST:_        case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:_        case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:_        case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:_        case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:_          currentOffset += 4__          break__        case TypeReference.CLASS_EXTENDS:_        case TypeReference.CLASS_TYPE_PARAMETER_BOUND:_        case TypeReference.METHOD_TYPE_PARAMETER_BOUND:_        case TypeReference.THROWS:_        case TypeReference.EXCEPTION_PARAMETER:_        case TypeReference.INSTANCEOF:_        case TypeReference.NEW:_        case TypeReference.CONSTRUCTOR_REFERENCE:_        case TypeReference.METHOD_REFERENCE:_          currentOffset += 3__          break__        case TypeReference.CLASS_TYPE_PARAMETER:_        case TypeReference.METHOD_TYPE_PARAMETER:_        case TypeReference.METHOD_FORMAL_PARAMETER:_        case TypeReference.FIELD:_        case TypeReference.METHOD_RETURN:_        case TypeReference.METHOD_RECEIVER:_        default:_          _          throw new IllegalArgumentException()__      }_      _      _      int pathLength = readByte(currentOffset)__      if ((targetType >>> 24) == TypeReference.EXCEPTION_PARAMETER) {_        _        TypePath path = pathLength == 0 ? null : new TypePath(b, currentOffset)__        currentOffset += 1 + 2 * pathLength__        _        String annotationDescriptor = readUTF8(currentOffset, charBuffer)__        currentOffset += 2__        _        currentOffset =_            readElementValues(_                methodVisitor.visitTryCatchAnnotation(_                    targetType & 0xFFFFFF00, path, annotationDescriptor, visible),_                currentOffset,_                 true,_                charBuffer)__      } else {_        _        _        _        currentOffset += 3 + 2 * pathLength__        _        _        currentOffset =_            readElementValues(_                 null, currentOffset,  true, charBuffer)__      }_    }_    return typeAnnotationsOffsets__  };parses,a,runtime,in,visible,type,annotations,attribute,to,find,the,offset,of,each,entry,it,contains,to,find,the,corresponding,labels,and,to,visit,the,try,catch,block,annotations,param,method,visitor,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,runtime,type,annotations,offset,the,start,offset,of,a,runtime,in,visible,type,annotations,attribute,excluding,the,s,and,fields,param,visible,true,if,the,attribute,to,parse,is,a,runtime,visible,type,annotations,attribute,false,it,is,a,runtime,invisible,type,annotations,attribute,return,the,start,offset,of,each,entry,of,the,runtime,in,s,annotations,array,field;private,int,read,type,annotations,final,method,visitor,method,visitor,final,context,context,final,int,runtime,type,annotations,offset,final,boolean,visible,char,char,buffer,context,char,buffer,int,current,offset,runtime,type,annotations,offset,int,type,annotations,offsets,new,int,read,unsigned,short,current,offset,current,offset,2,for,int,i,0,i,type,annotations,offsets,length,i,type,annotations,offsets,i,current,offset,int,target,type,read,int,current,offset,switch,target,type,24,case,type,reference,case,type,reference,int,table,length,read,unsigned,short,current,offset,1,current,offset,3,while,table,length,0,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,current,offset,6,create,label,start,pc,context,current,method,labels,create,label,start,pc,length,context,current,method,labels,break,case,type,reference,cast,case,type,reference,case,type,reference,case,type,reference,case,type,reference,current,offset,4,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,throws,case,type,reference,case,type,reference,instanceof,case,type,reference,new,case,type,reference,case,type,reference,current,offset,3,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,field,case,type,reference,case,type,reference,default,throw,new,illegal,argument,exception,int,path,length,read,byte,current,offset,if,target,type,24,type,reference,type,path,path,path,length,0,null,new,type,path,b,current,offset,current,offset,1,2,path,length,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,current,offset,read,element,values,method,visitor,visit,try,catch,annotation,target,type,0x,ffffff00,path,annotation,descriptor,visible,current,offset,true,char,buffer,else,current,offset,3,2,path,length,current,offset,read,element,values,null,current,offset,true,char,buffer,return,type,annotations,offsets
ClassReader -> private int[] readTypeAnnotations(       final MethodVisitor methodVisitor,       final Context context,       final int runtimeTypeAnnotationsOffset,       final boolean visible);1536747989;Parses a Runtime[In]VisibleTypeAnnotations attribute to find the offset of each type_annotation_entry it contains, to find the corresponding labels, and to visit the try catch block_annotations.__@param methodVisitor the method visitor to be used to visit the try catch block annotations._@param context information about the class being parsed._@param runtimeTypeAnnotationsOffset the start offset of a Runtime[In]VisibleTypeAnnotations_attribute, excluding the attribute_info's attribute_name_index and attribute_length fields._@param visible true if the attribute to parse is a RuntimeVisibleTypeAnnotations attribute,_false it is a RuntimeInvisibleTypeAnnotations attribute._@return the start offset of each entry of the Runtime[In]VisibleTypeAnnotations_attribute's_'annotations' array field.;private int[] readTypeAnnotations(_      final MethodVisitor methodVisitor,_      final Context context,_      final int runtimeTypeAnnotationsOffset,_      final boolean visible) {_    char[] charBuffer = context.charBuffer__    int currentOffset = runtimeTypeAnnotationsOffset__    _    int[] typeAnnotationsOffsets = new int[readUnsignedShort(currentOffset)]__    currentOffset += 2__    _    for (int i = 0_ i < typeAnnotationsOffsets.length_ ++i) {_      typeAnnotationsOffsets[i] = currentOffset__      _      _      int targetType = readInt(currentOffset)__      switch (targetType >>> 24) {_        case TypeReference.LOCAL_VARIABLE:_        case TypeReference.RESOURCE_VARIABLE:_          _          _          int tableLength = readUnsignedShort(currentOffset + 1)__          currentOffset += 3__          while (tableLength-- > 0) {_            int startPc = readUnsignedShort(currentOffset)__            int length = readUnsignedShort(currentOffset + 2)__            _            currentOffset += 6__            createLabel(startPc, context.currentMethodLabels)__            createLabel(startPc + length, context.currentMethodLabels)__          }_          break__        case TypeReference.CAST:_        case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:_        case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:_        case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:_        case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:_          currentOffset += 4__          break__        case TypeReference.CLASS_EXTENDS:_        case TypeReference.CLASS_TYPE_PARAMETER_BOUND:_        case TypeReference.METHOD_TYPE_PARAMETER_BOUND:_        case TypeReference.THROWS:_        case TypeReference.EXCEPTION_PARAMETER:_        case TypeReference.INSTANCEOF:_        case TypeReference.NEW:_        case TypeReference.CONSTRUCTOR_REFERENCE:_        case TypeReference.METHOD_REFERENCE:_          currentOffset += 3__          break__        case TypeReference.CLASS_TYPE_PARAMETER:_        case TypeReference.METHOD_TYPE_PARAMETER:_        case TypeReference.METHOD_FORMAL_PARAMETER:_        case TypeReference.FIELD:_        case TypeReference.METHOD_RETURN:_        case TypeReference.METHOD_RECEIVER:_        default:_          _          throw new IllegalArgumentException()__      }_      _      _      int pathLength = readByte(currentOffset)__      if ((targetType >>> 24) == TypeReference.EXCEPTION_PARAMETER) {_        _        TypePath path = pathLength == 0 ? null : new TypePath(b, currentOffset)__        currentOffset += 1 + 2 * pathLength__        _        String annotationDescriptor = readUTF8(currentOffset, charBuffer)__        currentOffset += 2__        _        currentOffset =_            readElementValues(_                methodVisitor.visitTryCatchAnnotation(_                    targetType & 0xFFFFFF00, path, annotationDescriptor, visible),_                currentOffset,_                 true,_                charBuffer)__      } else {_        _        _        _        currentOffset += 3 + 2 * pathLength__        _        _        currentOffset =_            readElementValues(_                 null, currentOffset,  true, charBuffer)__      }_    }_    return typeAnnotationsOffsets__  };parses,a,runtime,in,visible,type,annotations,attribute,to,find,the,offset,of,each,entry,it,contains,to,find,the,corresponding,labels,and,to,visit,the,try,catch,block,annotations,param,method,visitor,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,runtime,type,annotations,offset,the,start,offset,of,a,runtime,in,visible,type,annotations,attribute,excluding,the,s,and,fields,param,visible,true,if,the,attribute,to,parse,is,a,runtime,visible,type,annotations,attribute,false,it,is,a,runtime,invisible,type,annotations,attribute,return,the,start,offset,of,each,entry,of,the,runtime,in,s,annotations,array,field;private,int,read,type,annotations,final,method,visitor,method,visitor,final,context,context,final,int,runtime,type,annotations,offset,final,boolean,visible,char,char,buffer,context,char,buffer,int,current,offset,runtime,type,annotations,offset,int,type,annotations,offsets,new,int,read,unsigned,short,current,offset,current,offset,2,for,int,i,0,i,type,annotations,offsets,length,i,type,annotations,offsets,i,current,offset,int,target,type,read,int,current,offset,switch,target,type,24,case,type,reference,case,type,reference,int,table,length,read,unsigned,short,current,offset,1,current,offset,3,while,table,length,0,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,current,offset,6,create,label,start,pc,context,current,method,labels,create,label,start,pc,length,context,current,method,labels,break,case,type,reference,cast,case,type,reference,case,type,reference,case,type,reference,case,type,reference,current,offset,4,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,throws,case,type,reference,case,type,reference,instanceof,case,type,reference,new,case,type,reference,case,type,reference,current,offset,3,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,field,case,type,reference,case,type,reference,default,throw,new,illegal,argument,exception,int,path,length,read,byte,current,offset,if,target,type,24,type,reference,type,path,path,path,length,0,null,new,type,path,b,current,offset,current,offset,1,2,path,length,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,current,offset,read,element,values,method,visitor,visit,try,catch,annotation,target,type,0x,ffffff00,path,annotation,descriptor,visible,current,offset,true,char,buffer,else,current,offset,3,2,path,length,current,offset,read,element,values,null,current,offset,true,char,buffer,return,type,annotations,offsets
ClassReader -> private int[] readTypeAnnotations(       final MethodVisitor methodVisitor,       final Context context,       final int runtimeTypeAnnotationsOffset,       final boolean visible);1537204147;Parses a Runtime[In]VisibleTypeAnnotations attribute to find the offset of each type_annotation_entry it contains, to find the corresponding labels, and to visit the try catch block_annotations.__@param methodVisitor the method visitor to be used to visit the try catch block annotations._@param context information about the class being parsed._@param runtimeTypeAnnotationsOffset the start offset of a Runtime[In]VisibleTypeAnnotations_attribute, excluding the attribute_info's attribute_name_index and attribute_length fields._@param visible true if the attribute to parse is a RuntimeVisibleTypeAnnotations attribute,_false it is a RuntimeInvisibleTypeAnnotations attribute._@return the start offset of each entry of the Runtime[In]VisibleTypeAnnotations_attribute's_'annotations' array field.;private int[] readTypeAnnotations(_      final MethodVisitor methodVisitor,_      final Context context,_      final int runtimeTypeAnnotationsOffset,_      final boolean visible) {_    char[] charBuffer = context.charBuffer__    int currentOffset = runtimeTypeAnnotationsOffset__    _    int[] typeAnnotationsOffsets = new int[readUnsignedShort(currentOffset)]__    currentOffset += 2__    _    for (int i = 0_ i < typeAnnotationsOffsets.length_ ++i) {_      typeAnnotationsOffsets[i] = currentOffset__      _      _      int targetType = readInt(currentOffset)__      switch (targetType >>> 24) {_        case TypeReference.LOCAL_VARIABLE:_        case TypeReference.RESOURCE_VARIABLE:_          _          _          int tableLength = readUnsignedShort(currentOffset + 1)__          currentOffset += 3__          while (tableLength-- > 0) {_            int startPc = readUnsignedShort(currentOffset)__            int length = readUnsignedShort(currentOffset + 2)__            _            currentOffset += 6__            createLabel(startPc, context.currentMethodLabels)__            createLabel(startPc + length, context.currentMethodLabels)__          }_          break__        case TypeReference.CAST:_        case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:_        case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:_        case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:_        case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:_          currentOffset += 4__          break__        case TypeReference.CLASS_EXTENDS:_        case TypeReference.CLASS_TYPE_PARAMETER_BOUND:_        case TypeReference.METHOD_TYPE_PARAMETER_BOUND:_        case TypeReference.THROWS:_        case TypeReference.EXCEPTION_PARAMETER:_        case TypeReference.INSTANCEOF:_        case TypeReference.NEW:_        case TypeReference.CONSTRUCTOR_REFERENCE:_        case TypeReference.METHOD_REFERENCE:_          currentOffset += 3__          break__        case TypeReference.CLASS_TYPE_PARAMETER:_        case TypeReference.METHOD_TYPE_PARAMETER:_        case TypeReference.METHOD_FORMAL_PARAMETER:_        case TypeReference.FIELD:_        case TypeReference.METHOD_RETURN:_        case TypeReference.METHOD_RECEIVER:_        default:_          _          throw new IllegalArgumentException()__      }_      _      _      int pathLength = readByte(currentOffset)__      if ((targetType >>> 24) == TypeReference.EXCEPTION_PARAMETER) {_        _        TypePath path = pathLength == 0 ? null : new TypePath(b, currentOffset)__        currentOffset += 1 + 2 * pathLength__        _        String annotationDescriptor = readUTF8(currentOffset, charBuffer)__        currentOffset += 2__        _        currentOffset =_            readElementValues(_                methodVisitor.visitTryCatchAnnotation(_                    targetType & 0xFFFFFF00, path, annotationDescriptor, visible),_                currentOffset,_                 true,_                charBuffer)__      } else {_        _        _        _        currentOffset += 3 + 2 * pathLength__        _        _        currentOffset =_            readElementValues(_                 null, currentOffset,  true, charBuffer)__      }_    }_    return typeAnnotationsOffsets__  };parses,a,runtime,in,visible,type,annotations,attribute,to,find,the,offset,of,each,entry,it,contains,to,find,the,corresponding,labels,and,to,visit,the,try,catch,block,annotations,param,method,visitor,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,runtime,type,annotations,offset,the,start,offset,of,a,runtime,in,visible,type,annotations,attribute,excluding,the,s,and,fields,param,visible,true,if,the,attribute,to,parse,is,a,runtime,visible,type,annotations,attribute,false,it,is,a,runtime,invisible,type,annotations,attribute,return,the,start,offset,of,each,entry,of,the,runtime,in,s,annotations,array,field;private,int,read,type,annotations,final,method,visitor,method,visitor,final,context,context,final,int,runtime,type,annotations,offset,final,boolean,visible,char,char,buffer,context,char,buffer,int,current,offset,runtime,type,annotations,offset,int,type,annotations,offsets,new,int,read,unsigned,short,current,offset,current,offset,2,for,int,i,0,i,type,annotations,offsets,length,i,type,annotations,offsets,i,current,offset,int,target,type,read,int,current,offset,switch,target,type,24,case,type,reference,case,type,reference,int,table,length,read,unsigned,short,current,offset,1,current,offset,3,while,table,length,0,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,current,offset,6,create,label,start,pc,context,current,method,labels,create,label,start,pc,length,context,current,method,labels,break,case,type,reference,cast,case,type,reference,case,type,reference,case,type,reference,case,type,reference,current,offset,4,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,throws,case,type,reference,case,type,reference,instanceof,case,type,reference,new,case,type,reference,case,type,reference,current,offset,3,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,field,case,type,reference,case,type,reference,default,throw,new,illegal,argument,exception,int,path,length,read,byte,current,offset,if,target,type,24,type,reference,type,path,path,path,length,0,null,new,type,path,b,current,offset,current,offset,1,2,path,length,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,current,offset,read,element,values,method,visitor,visit,try,catch,annotation,target,type,0x,ffffff00,path,annotation,descriptor,visible,current,offset,true,char,buffer,else,current,offset,3,2,path,length,current,offset,read,element,values,null,current,offset,true,char,buffer,return,type,annotations,offsets
ClassReader -> private int[] readTypeAnnotations(       final MethodVisitor methodVisitor,       final Context context,       final int runtimeTypeAnnotationsOffset,       final boolean visible);1539119582;Parses a Runtime[In]VisibleTypeAnnotations attribute to find the offset of each type_annotation_entry it contains, to find the corresponding labels, and to visit the try catch block_annotations.__@param methodVisitor the method visitor to be used to visit the try catch block annotations._@param context information about the class being parsed._@param runtimeTypeAnnotationsOffset the start offset of a Runtime[In]VisibleTypeAnnotations_attribute, excluding the attribute_info's attribute_name_index and attribute_length fields._@param visible true if the attribute to parse is a RuntimeVisibleTypeAnnotations attribute,_false it is a RuntimeInvisibleTypeAnnotations attribute._@return the start offset of each entry of the Runtime[In]VisibleTypeAnnotations_attribute's_'annotations' array field.;private int[] readTypeAnnotations(_      final MethodVisitor methodVisitor,_      final Context context,_      final int runtimeTypeAnnotationsOffset,_      final boolean visible) {_    char[] charBuffer = context.charBuffer__    int currentOffset = runtimeTypeAnnotationsOffset__    _    int[] typeAnnotationsOffsets = new int[readUnsignedShort(currentOffset)]__    currentOffset += 2__    _    for (int i = 0_ i < typeAnnotationsOffsets.length_ ++i) {_      typeAnnotationsOffsets[i] = currentOffset__      _      _      int targetType = readInt(currentOffset)__      switch (targetType >>> 24) {_        case TypeReference.LOCAL_VARIABLE:_        case TypeReference.RESOURCE_VARIABLE:_          _          _          int tableLength = readUnsignedShort(currentOffset + 1)__          currentOffset += 3__          while (tableLength-- > 0) {_            int startPc = readUnsignedShort(currentOffset)__            int length = readUnsignedShort(currentOffset + 2)__            _            currentOffset += 6__            createLabel(startPc, context.currentMethodLabels)__            createLabel(startPc + length, context.currentMethodLabels)__          }_          break__        case TypeReference.CAST:_        case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:_        case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:_        case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:_        case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:_          currentOffset += 4__          break__        case TypeReference.CLASS_EXTENDS:_        case TypeReference.CLASS_TYPE_PARAMETER_BOUND:_        case TypeReference.METHOD_TYPE_PARAMETER_BOUND:_        case TypeReference.THROWS:_        case TypeReference.EXCEPTION_PARAMETER:_        case TypeReference.INSTANCEOF:_        case TypeReference.NEW:_        case TypeReference.CONSTRUCTOR_REFERENCE:_        case TypeReference.METHOD_REFERENCE:_          currentOffset += 3__          break__        case TypeReference.CLASS_TYPE_PARAMETER:_        case TypeReference.METHOD_TYPE_PARAMETER:_        case TypeReference.METHOD_FORMAL_PARAMETER:_        case TypeReference.FIELD:_        case TypeReference.METHOD_RETURN:_        case TypeReference.METHOD_RECEIVER:_        default:_          _          throw new IllegalArgumentException()__      }_      _      _      int pathLength = readByte(currentOffset)__      if ((targetType >>> 24) == TypeReference.EXCEPTION_PARAMETER) {_        _        TypePath path = pathLength == 0 ? null : new TypePath(b, currentOffset)__        currentOffset += 1 + 2 * pathLength__        _        String annotationDescriptor = readUTF8(currentOffset, charBuffer)__        currentOffset += 2__        _        currentOffset =_            readElementValues(_                methodVisitor.visitTryCatchAnnotation(_                    targetType & 0xFFFFFF00, path, annotationDescriptor, visible),_                currentOffset,_                 true,_                charBuffer)__      } else {_        _        _        _        currentOffset += 3 + 2 * pathLength__        _        _        currentOffset =_            readElementValues(_                 null, currentOffset,  true, charBuffer)__      }_    }_    return typeAnnotationsOffsets__  };parses,a,runtime,in,visible,type,annotations,attribute,to,find,the,offset,of,each,entry,it,contains,to,find,the,corresponding,labels,and,to,visit,the,try,catch,block,annotations,param,method,visitor,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,runtime,type,annotations,offset,the,start,offset,of,a,runtime,in,visible,type,annotations,attribute,excluding,the,s,and,fields,param,visible,true,if,the,attribute,to,parse,is,a,runtime,visible,type,annotations,attribute,false,it,is,a,runtime,invisible,type,annotations,attribute,return,the,start,offset,of,each,entry,of,the,runtime,in,s,annotations,array,field;private,int,read,type,annotations,final,method,visitor,method,visitor,final,context,context,final,int,runtime,type,annotations,offset,final,boolean,visible,char,char,buffer,context,char,buffer,int,current,offset,runtime,type,annotations,offset,int,type,annotations,offsets,new,int,read,unsigned,short,current,offset,current,offset,2,for,int,i,0,i,type,annotations,offsets,length,i,type,annotations,offsets,i,current,offset,int,target,type,read,int,current,offset,switch,target,type,24,case,type,reference,case,type,reference,int,table,length,read,unsigned,short,current,offset,1,current,offset,3,while,table,length,0,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,current,offset,6,create,label,start,pc,context,current,method,labels,create,label,start,pc,length,context,current,method,labels,break,case,type,reference,cast,case,type,reference,case,type,reference,case,type,reference,case,type,reference,current,offset,4,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,throws,case,type,reference,case,type,reference,instanceof,case,type,reference,new,case,type,reference,case,type,reference,current,offset,3,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,field,case,type,reference,case,type,reference,default,throw,new,illegal,argument,exception,int,path,length,read,byte,current,offset,if,target,type,24,type,reference,type,path,path,path,length,0,null,new,type,path,b,current,offset,current,offset,1,2,path,length,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,current,offset,read,element,values,method,visitor,visit,try,catch,annotation,target,type,0x,ffffff00,path,annotation,descriptor,visible,current,offset,true,char,buffer,else,current,offset,3,2,path,length,current,offset,read,element,values,null,current,offset,true,char,buffer,return,type,annotations,offsets
ClassReader -> private int[] readTypeAnnotations(       final MethodVisitor methodVisitor,       final Context context,       final int runtimeTypeAnnotationsOffset,       final boolean visible);1541436263;Parses a Runtime[In]VisibleTypeAnnotations attribute to find the offset of each type_annotation_entry it contains, to find the corresponding labels, and to visit the try catch block_annotations.__@param methodVisitor the method visitor to be used to visit the try catch block annotations._@param context information about the class being parsed._@param runtimeTypeAnnotationsOffset the start offset of a Runtime[In]VisibleTypeAnnotations_attribute, excluding the attribute_info's attribute_name_index and attribute_length fields._@param visible true if the attribute to parse is a RuntimeVisibleTypeAnnotations attribute,_false it is a RuntimeInvisibleTypeAnnotations attribute._@return the start offset of each entry of the Runtime[In]VisibleTypeAnnotations_attribute's_'annotations' array field.;private int[] readTypeAnnotations(_      final MethodVisitor methodVisitor,_      final Context context,_      final int runtimeTypeAnnotationsOffset,_      final boolean visible) {_    char[] charBuffer = context.charBuffer__    int currentOffset = runtimeTypeAnnotationsOffset__    _    int[] typeAnnotationsOffsets = new int[readUnsignedShort(currentOffset)]__    currentOffset += 2__    _    for (int i = 0_ i < typeAnnotationsOffsets.length_ ++i) {_      typeAnnotationsOffsets[i] = currentOffset__      _      _      int targetType = readInt(currentOffset)__      switch (targetType >>> 24) {_        case TypeReference.LOCAL_VARIABLE:_        case TypeReference.RESOURCE_VARIABLE:_          _          _          int tableLength = readUnsignedShort(currentOffset + 1)__          currentOffset += 3__          while (tableLength-- > 0) {_            int startPc = readUnsignedShort(currentOffset)__            int length = readUnsignedShort(currentOffset + 2)__            _            currentOffset += 6__            createLabel(startPc, context.currentMethodLabels)__            createLabel(startPc + length, context.currentMethodLabels)__          }_          break__        case TypeReference.CAST:_        case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:_        case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:_        case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:_        case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:_          currentOffset += 4__          break__        case TypeReference.CLASS_EXTENDS:_        case TypeReference.CLASS_TYPE_PARAMETER_BOUND:_        case TypeReference.METHOD_TYPE_PARAMETER_BOUND:_        case TypeReference.THROWS:_        case TypeReference.EXCEPTION_PARAMETER:_        case TypeReference.INSTANCEOF:_        case TypeReference.NEW:_        case TypeReference.CONSTRUCTOR_REFERENCE:_        case TypeReference.METHOD_REFERENCE:_          currentOffset += 3__          break__        case TypeReference.CLASS_TYPE_PARAMETER:_        case TypeReference.METHOD_TYPE_PARAMETER:_        case TypeReference.METHOD_FORMAL_PARAMETER:_        case TypeReference.FIELD:_        case TypeReference.METHOD_RETURN:_        case TypeReference.METHOD_RECEIVER:_        default:_          _          throw new IllegalArgumentException()__      }_      _      _      int pathLength = readByte(currentOffset)__      if ((targetType >>> 24) == TypeReference.EXCEPTION_PARAMETER) {_        _        TypePath path = pathLength == 0 ? null : new TypePath(b, currentOffset)__        currentOffset += 1 + 2 * pathLength__        _        String annotationDescriptor = readUTF8(currentOffset, charBuffer)__        currentOffset += 2__        _        currentOffset =_            readElementValues(_                methodVisitor.visitTryCatchAnnotation(_                    targetType & 0xFFFFFF00, path, annotationDescriptor, visible),_                currentOffset,_                 true,_                charBuffer)__      } else {_        _        _        _        currentOffset += 3 + 2 * pathLength__        _        _        currentOffset =_            readElementValues(_                 null, currentOffset,  true, charBuffer)__      }_    }_    return typeAnnotationsOffsets__  };parses,a,runtime,in,visible,type,annotations,attribute,to,find,the,offset,of,each,entry,it,contains,to,find,the,corresponding,labels,and,to,visit,the,try,catch,block,annotations,param,method,visitor,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,runtime,type,annotations,offset,the,start,offset,of,a,runtime,in,visible,type,annotations,attribute,excluding,the,s,and,fields,param,visible,true,if,the,attribute,to,parse,is,a,runtime,visible,type,annotations,attribute,false,it,is,a,runtime,invisible,type,annotations,attribute,return,the,start,offset,of,each,entry,of,the,runtime,in,s,annotations,array,field;private,int,read,type,annotations,final,method,visitor,method,visitor,final,context,context,final,int,runtime,type,annotations,offset,final,boolean,visible,char,char,buffer,context,char,buffer,int,current,offset,runtime,type,annotations,offset,int,type,annotations,offsets,new,int,read,unsigned,short,current,offset,current,offset,2,for,int,i,0,i,type,annotations,offsets,length,i,type,annotations,offsets,i,current,offset,int,target,type,read,int,current,offset,switch,target,type,24,case,type,reference,case,type,reference,int,table,length,read,unsigned,short,current,offset,1,current,offset,3,while,table,length,0,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,current,offset,6,create,label,start,pc,context,current,method,labels,create,label,start,pc,length,context,current,method,labels,break,case,type,reference,cast,case,type,reference,case,type,reference,case,type,reference,case,type,reference,current,offset,4,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,throws,case,type,reference,case,type,reference,instanceof,case,type,reference,new,case,type,reference,case,type,reference,current,offset,3,break,case,type,reference,case,type,reference,case,type,reference,case,type,reference,field,case,type,reference,case,type,reference,default,throw,new,illegal,argument,exception,int,path,length,read,byte,current,offset,if,target,type,24,type,reference,type,path,path,path,length,0,null,new,type,path,b,current,offset,current,offset,1,2,path,length,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,current,offset,read,element,values,method,visitor,visit,try,catch,annotation,target,type,0x,ffffff00,path,annotation,descriptor,visible,current,offset,true,char,buffer,else,current,offset,3,2,path,length,current,offset,read,element,values,null,current,offset,true,char,buffer,return,type,annotations,offsets
ClassReader -> private int readField(final ClassVisitor classVisitor,             final Context context, int u);1366718246;Reads a field and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the field._@param context_information about the class being parsed._@param u_the start offset of the field in the class file._@return the offset of the first byte following the field in the class.;private int readField(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        int access = readUnsignedShort(u)__        String name = readUTF8(u + 2, c)__        String desc = readUTF8(u + 4, c)__        u += 6___        _        String signature = null__        int anns = 0__        int ianns = 0__        Object value = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("ConstantValue".equals(attrName)) {_                int item = readUnsignedShort(u + 8)__                value = item == 0 ? null : readConst(item, c)__            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        FieldVisitor fv = classVisitor.visitField(access, name, desc,_                signature, value)__        if (fv == null) {_            return u__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            fv.visitAttribute(attributes)__            attributes = attr__        }__        _        fv.visitEnd()___        return u__    };reads,a,field,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,field,in,the,class,file,return,the,offset,of,the,first,byte,following,the,field,in,the,class;private,int,read,field,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,int,access,read,unsigned,short,u,string,name,read,utf8,u,2,c,string,desc,read,utf8,u,4,c,u,6,string,signature,null,int,anns,0,int,ianns,0,object,value,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,constant,value,equals,attr,name,int,item,read,unsigned,short,u,8,value,item,0,null,read,const,item,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,field,visitor,fv,class,visitor,visit,field,access,name,desc,signature,value,if,fv,null,return,u,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,fv,visit,attribute,attributes,attributes,attr,fv,visit,end,return,u
ClassReader -> private int readField(final ClassVisitor classVisitor,             final Context context, int u);1395273982;Reads a field and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the field._@param context_information about the class being parsed._@param u_the start offset of the field in the class file._@return the offset of the first byte following the field in the class.;private int readField(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        int access = readUnsignedShort(u)__        String name = readUTF8(u + 2, c)__        String desc = readUTF8(u + 4, c)__        u += 6___        _        String signature = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        Object value = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("ConstantValue".equals(attrName)) {_                int item = readUnsignedShort(u + 8)__                value = item == 0 ? null : readConst(item, c)__            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        FieldVisitor fv = classVisitor.visitField(access, name, desc,_                signature, value)__        if (fv == null) {_            return u__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            fv.visitAttribute(attributes)__            attributes = attr__        }__        _        fv.visitEnd()___        return u__    };reads,a,field,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,field,in,the,class,file,return,the,offset,of,the,first,byte,following,the,field,in,the,class;private,int,read,field,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,int,access,read,unsigned,short,u,string,name,read,utf8,u,2,c,string,desc,read,utf8,u,4,c,u,6,string,signature,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,object,value,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,constant,value,equals,attr,name,int,item,read,unsigned,short,u,8,value,item,0,null,read,const,item,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,field,visitor,fv,class,visitor,visit,field,access,name,desc,signature,value,if,fv,null,return,u,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,fv,visit,attribute,attributes,attributes,attr,fv,visit,end,return,u
ClassReader -> private int readField(final ClassVisitor classVisitor,             final Context context, int u);1414067099;Reads a field and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the field._@param context_information about the class being parsed._@param u_the start offset of the field in the class file._@return the offset of the first byte following the field in the class.;private int readField(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        int access = readUnsignedShort(u)__        String name = readUTF8(u + 2, c)__        String desc = readUTF8(u + 4, c)__        u += 6___        _        String signature = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        Object value = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("ConstantValue".equals(attrName)) {_                int item = readUnsignedShort(u + 8)__                value = item == 0 ? null : readConst(item, c)__            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        FieldVisitor fv = classVisitor.visitField(access, name, desc,_                signature, value)__        if (fv == null) {_            return u__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            fv.visitAttribute(attributes)__            attributes = attr__        }__        _        fv.visitEnd()___        return u__    };reads,a,field,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,field,in,the,class,file,return,the,offset,of,the,first,byte,following,the,field,in,the,class;private,int,read,field,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,int,access,read,unsigned,short,u,string,name,read,utf8,u,2,c,string,desc,read,utf8,u,4,c,u,6,string,signature,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,object,value,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,constant,value,equals,attr,name,int,item,read,unsigned,short,u,8,value,item,0,null,read,const,item,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,field,visitor,fv,class,visitor,visit,field,access,name,desc,signature,value,if,fv,null,return,u,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,fv,visit,attribute,attributes,attributes,attr,fv,visit,end,return,u
ClassReader -> private int readField(final ClassVisitor classVisitor,             final Context context, int u);1414499035;Reads a field and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the field._@param context_information about the class being parsed._@param u_the start offset of the field in the class file._@return the offset of the first byte following the field in the class.;private int readField(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        int access = readUnsignedShort(u)__        String name = readUTF8(u + 2, c)__        String desc = readUTF8(u + 4, c)__        u += 6___        _        String signature = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        Object value = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("ConstantValue".equals(attrName)) {_                int item = readUnsignedShort(u + 8)__                value = item == 0 ? null : readConst(item, c)__            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        FieldVisitor fv = classVisitor.visitField(access, name, desc,_                signature, value)__        if (fv == null) {_            return u__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            fv.visitAttribute(attributes)__            attributes = attr__        }__        _        fv.visitEnd()___        return u__    };reads,a,field,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,field,in,the,class,file,return,the,offset,of,the,first,byte,following,the,field,in,the,class;private,int,read,field,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,int,access,read,unsigned,short,u,string,name,read,utf8,u,2,c,string,desc,read,utf8,u,4,c,u,6,string,signature,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,object,value,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,constant,value,equals,attr,name,int,item,read,unsigned,short,u,8,value,item,0,null,read,const,item,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,field,visitor,fv,class,visitor,visit,field,access,name,desc,signature,value,if,fv,null,return,u,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,fv,visit,attribute,attributes,attributes,attr,fv,visit,end,return,u
ClassReader -> private int readField(final ClassVisitor classVisitor,             final Context context, int u);1416998550;Reads a field and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the field._@param context_information about the class being parsed._@param u_the start offset of the field in the class file._@return the offset of the first byte following the field in the class.;private int readField(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        int access = readUnsignedShort(u)__        String name = readUTF8(u + 2, c)__        String desc = readUTF8(u + 4, c)__        u += 6___        _        String signature = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        Object value = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("ConstantValue".equals(attrName)) {_                int item = readUnsignedShort(u + 8)__                value = item == 0 ? null : readConst(item, c)__            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        FieldVisitor fv = classVisitor.visitField(access, name, desc,_                signature, value)__        if (fv == null) {_            return u__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            fv.visitAttribute(attributes)__            attributes = attr__        }__        _        fv.visitEnd()___        return u__    };reads,a,field,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,field,in,the,class,file,return,the,offset,of,the,first,byte,following,the,field,in,the,class;private,int,read,field,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,int,access,read,unsigned,short,u,string,name,read,utf8,u,2,c,string,desc,read,utf8,u,4,c,u,6,string,signature,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,object,value,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,constant,value,equals,attr,name,int,item,read,unsigned,short,u,8,value,item,0,null,read,const,item,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,field,visitor,fv,class,visitor,visit,field,access,name,desc,signature,value,if,fv,null,return,u,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,fv,visit,attribute,attributes,attributes,attr,fv,visit,end,return,u
ClassReader -> private int readField(final ClassVisitor classVisitor,             final Context context, int u);1457705343;Reads a field and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the field._@param context_information about the class being parsed._@param u_the start offset of the field in the class file._@return the offset of the first byte following the field in the class.;private int readField(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        int access = readUnsignedShort(u)__        String name = readUTF8(u + 2, c)__        String desc = readUTF8(u + 4, c)__        u += 6___        _        String signature = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        Object value = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("ConstantValue".equals(attrName)) {_                int item = readUnsignedShort(u + 8)__                value = item == 0 ? null : readConst(item, c)__            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        FieldVisitor fv = classVisitor.visitField(access, name, desc,_                signature, value)__        if (fv == null) {_            return u__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            fv.visitAttribute(attributes)__            attributes = attr__        }__        _        fv.visitEnd()___        return u__    };reads,a,field,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,field,in,the,class,file,return,the,offset,of,the,first,byte,following,the,field,in,the,class;private,int,read,field,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,int,access,read,unsigned,short,u,string,name,read,utf8,u,2,c,string,desc,read,utf8,u,4,c,u,6,string,signature,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,object,value,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,constant,value,equals,attr,name,int,item,read,unsigned,short,u,8,value,item,0,null,read,const,item,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,field,visitor,fv,class,visitor,visit,field,access,name,desc,signature,value,if,fv,null,return,u,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,fv,visit,attribute,attributes,attributes,attr,fv,visit,end,return,u
ClassReader -> private int readField(final ClassVisitor classVisitor,             final Context context, int u);1459258703;Reads a field and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the field._@param context_information about the class being parsed._@param u_the start offset of the field in the class file._@return the offset of the first byte following the field in the class.;private int readField(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        int access = readUnsignedShort(u)__        String name = readUTF8(u + 2, c)__        String desc = readUTF8(u + 4, c)__        u += 6___        _        String signature = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        Object value = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("ConstantValue".equals(attrName)) {_                int item = readUnsignedShort(u + 8)__                value = item == 0 ? null : readConst(item, c)__            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        FieldVisitor fv = classVisitor.visitField(access, name, desc,_                signature, value)__        if (fv == null) {_            return u__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            fv.visitAttribute(attributes)__            attributes = attr__        }__        _        fv.visitEnd()___        return u__    };reads,a,field,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,field,in,the,class,file,return,the,offset,of,the,first,byte,following,the,field,in,the,class;private,int,read,field,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,int,access,read,unsigned,short,u,string,name,read,utf8,u,2,c,string,desc,read,utf8,u,4,c,u,6,string,signature,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,object,value,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,constant,value,equals,attr,name,int,item,read,unsigned,short,u,8,value,item,0,null,read,const,item,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,field,visitor,fv,class,visitor,visit,field,access,name,desc,signature,value,if,fv,null,return,u,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,fv,visit,attribute,attributes,attributes,attr,fv,visit,end,return,u
ClassReader -> private int readField(final ClassVisitor classVisitor,             final Context context, int u);1478623137;Reads a field and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the field._@param context_information about the class being parsed._@param u_the start offset of the field in the class file._@return the offset of the first byte following the field in the class.;private int readField(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        int access = readUnsignedShort(u)__        String name = readUTF8(u + 2, c)__        String desc = readUTF8(u + 4, c)__        u += 6___        _        String signature = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        Object value = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("ConstantValue".equals(attrName)) {_                int item = readUnsignedShort(u + 8)__                value = item == 0 ? null : readConst(item, c)__            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        FieldVisitor fv = classVisitor.visitField(access, name, desc,_                signature, value)__        if (fv == null) {_            return u__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            fv.visitAttribute(attributes)__            attributes = attr__        }__        _        fv.visitEnd()___        return u__    };reads,a,field,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,field,in,the,class,file,return,the,offset,of,the,first,byte,following,the,field,in,the,class;private,int,read,field,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,int,access,read,unsigned,short,u,string,name,read,utf8,u,2,c,string,desc,read,utf8,u,4,c,u,6,string,signature,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,object,value,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,constant,value,equals,attr,name,int,item,read,unsigned,short,u,8,value,item,0,null,read,const,item,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,field,visitor,fv,class,visitor,visit,field,access,name,desc,signature,value,if,fv,null,return,u,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,fv,visit,attribute,attributes,attributes,attr,fv,visit,end,return,u
ClassReader -> private int readField(final ClassVisitor classVisitor,             final Context context, int u);1483093254;Reads a field and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the field._@param context_information about the class being parsed._@param u_the start offset of the field in the class file._@return the offset of the first byte following the field in the class.;private int readField(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        int access = readUnsignedShort(u)__        String name = readUTF8(u + 2, c)__        String desc = readUTF8(u + 4, c)__        u += 6___        _        String signature = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        Object value = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("ConstantValue".equals(attrName)) {_                int item = readUnsignedShort(u + 8)__                value = item == 0 ? null : readConst(item, c)__            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        FieldVisitor fv = classVisitor.visitField(access, name, desc,_                signature, value)__        if (fv == null) {_            return u__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            fv.visitAttribute(attributes)__            attributes = attr__        }__        _        fv.visitEnd()___        return u__    };reads,a,field,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,field,in,the,class,file,return,the,offset,of,the,first,byte,following,the,field,in,the,class;private,int,read,field,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,int,access,read,unsigned,short,u,string,name,read,utf8,u,2,c,string,desc,read,utf8,u,4,c,u,6,string,signature,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,object,value,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,constant,value,equals,attr,name,int,item,read,unsigned,short,u,8,value,item,0,null,read,const,item,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,field,visitor,fv,class,visitor,visit,field,access,name,desc,signature,value,if,fv,null,return,u,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,fv,visit,attribute,attributes,attributes,attr,fv,visit,end,return,u
ClassReader -> private int readField(final ClassVisitor classVisitor,             final Context context, int u);1505821772;Reads a field and makes the given visitor visit it.__@param classVisitor_the visitor that must visit the field._@param context_information about the class being parsed._@param u_the start offset of the field in the class file._@return the offset of the first byte following the field in the class.;private int readField(final ClassVisitor classVisitor,_            final Context context, int u) {_        _        char[] c = context.buffer__        int access = readUnsignedShort(u)__        String name = readUTF8(u + 2, c)__        String desc = readUTF8(u + 4, c)__        u += 6___        _        String signature = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        Object value = null__        Attribute attributes = null___        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("ConstantValue".equals(attrName)) {_                int item = readUnsignedShort(u + 8)__                value = item == 0 ? null : readConst(item, c)__            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else {_                Attribute attr = readAttribute(context.attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }_        u += 2___        _        FieldVisitor fv = classVisitor.visitField(access, name, desc,_                signature, value)__        if (fv == null) {_            return u__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        fv.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        fv.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            fv.visitAttribute(attributes)__            attributes = attr__        }__        _        fv.visitEnd()___        return u__    };reads,a,field,and,makes,the,given,visitor,visit,it,param,class,visitor,the,visitor,that,must,visit,the,field,param,context,information,about,the,class,being,parsed,param,u,the,start,offset,of,the,field,in,the,class,file,return,the,offset,of,the,first,byte,following,the,field,in,the,class;private,int,read,field,final,class,visitor,class,visitor,final,context,context,int,u,char,c,context,buffer,int,access,read,unsigned,short,u,string,name,read,utf8,u,2,c,string,desc,read,utf8,u,4,c,u,6,string,signature,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,object,value,null,attribute,attributes,null,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,constant,value,equals,attr,name,int,item,read,unsigned,short,u,8,value,item,0,null,read,const,item,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,attribute,attr,read,attribute,context,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,u,2,field,visitor,fv,class,visitor,visit,field,access,name,desc,signature,value,if,fv,null,return,u,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,fv,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,fv,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,fv,visit,attribute,attributes,attributes,attr,fv,visit,end,return,u
ClassReader -> public String[] getInterfaces();1366718246;Returns the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}).__@return the array of internal names for all implemented interfaces or_<tt>null</tt>.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_        int index = header + 6__        int n = readUnsignedShort(index)__        String[] interfaces = new String[n]__        if (n > 0) {_            char[] buf = new char[maxStringLength]__            for (int i = 0_ i < n_ ++i) {_                index += 2__                interfaces[i] = readClass(index, buf)__            }_        }_        return interfaces__    };returns,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,return,the,array,of,internal,names,for,all,implemented,interfaces,or,tt,null,tt,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,index,header,6,int,n,read,unsigned,short,index,string,interfaces,new,string,n,if,n,0,char,buf,new,char,max,string,length,for,int,i,0,i,n,i,index,2,interfaces,i,read,class,index,buf,return,interfaces
ClassReader -> public String[] getInterfaces();1395273982;Returns the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}).__@return the array of internal names for all implemented interfaces or_<tt>null</tt>.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_        int index = header + 6__        int n = readUnsignedShort(index)__        String[] interfaces = new String[n]__        if (n > 0) {_            char[] buf = new char[maxStringLength]__            for (int i = 0_ i < n_ ++i) {_                index += 2__                interfaces[i] = readClass(index, buf)__            }_        }_        return interfaces__    };returns,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,return,the,array,of,internal,names,for,all,implemented,interfaces,or,tt,null,tt,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,index,header,6,int,n,read,unsigned,short,index,string,interfaces,new,string,n,if,n,0,char,buf,new,char,max,string,length,for,int,i,0,i,n,i,index,2,interfaces,i,read,class,index,buf,return,interfaces
ClassReader -> public String[] getInterfaces();1414067099;Returns the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}).__@return the array of internal names for all implemented interfaces or_<tt>null</tt>.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_        int index = header + 6__        int n = readUnsignedShort(index)__        String[] interfaces = new String[n]__        if (n > 0) {_            char[] buf = new char[maxStringLength]__            for (int i = 0_ i < n_ ++i) {_                index += 2__                interfaces[i] = readClass(index, buf)__            }_        }_        return interfaces__    };returns,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,return,the,array,of,internal,names,for,all,implemented,interfaces,or,tt,null,tt,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,index,header,6,int,n,read,unsigned,short,index,string,interfaces,new,string,n,if,n,0,char,buf,new,char,max,string,length,for,int,i,0,i,n,i,index,2,interfaces,i,read,class,index,buf,return,interfaces
ClassReader -> public String[] getInterfaces();1414499035;Returns the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}).__@return the array of internal names for all implemented interfaces or_<tt>null</tt>.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_        int index = header + 6__        int n = readUnsignedShort(index)__        String[] interfaces = new String[n]__        if (n > 0) {_            char[] buf = new char[maxStringLength]__            for (int i = 0_ i < n_ ++i) {_                index += 2__                interfaces[i] = readClass(index, buf)__            }_        }_        return interfaces__    };returns,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,return,the,array,of,internal,names,for,all,implemented,interfaces,or,tt,null,tt,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,index,header,6,int,n,read,unsigned,short,index,string,interfaces,new,string,n,if,n,0,char,buf,new,char,max,string,length,for,int,i,0,i,n,i,index,2,interfaces,i,read,class,index,buf,return,interfaces
ClassReader -> public String[] getInterfaces();1416998550;Returns the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}).__@return the array of internal names for all implemented interfaces or_<tt>null</tt>.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_        int index = header + 6__        int n = readUnsignedShort(index)__        String[] interfaces = new String[n]__        if (n > 0) {_            char[] buf = new char[maxStringLength]__            for (int i = 0_ i < n_ ++i) {_                index += 2__                interfaces[i] = readClass(index, buf)__            }_        }_        return interfaces__    };returns,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,return,the,array,of,internal,names,for,all,implemented,interfaces,or,tt,null,tt,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,index,header,6,int,n,read,unsigned,short,index,string,interfaces,new,string,n,if,n,0,char,buf,new,char,max,string,length,for,int,i,0,i,n,i,index,2,interfaces,i,read,class,index,buf,return,interfaces
ClassReader -> public String[] getInterfaces();1457705343;Returns the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}).__@return the array of internal names for all implemented interfaces or_<tt>null</tt>.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_        int index = header + 6__        int n = readUnsignedShort(index)__        String[] interfaces = new String[n]__        if (n > 0) {_            char[] buf = new char[maxStringLength]__            for (int i = 0_ i < n_ ++i) {_                index += 2__                interfaces[i] = readClass(index, buf)__            }_        }_        return interfaces__    };returns,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,return,the,array,of,internal,names,for,all,implemented,interfaces,or,tt,null,tt,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,index,header,6,int,n,read,unsigned,short,index,string,interfaces,new,string,n,if,n,0,char,buf,new,char,max,string,length,for,int,i,0,i,n,i,index,2,interfaces,i,read,class,index,buf,return,interfaces
ClassReader -> public String[] getInterfaces();1459258703;Returns the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}).__@return the array of internal names for all implemented interfaces or_<tt>null</tt>.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_        int index = header + 6__        int n = readUnsignedShort(index)__        String[] interfaces = new String[n]__        if (n > 0) {_            char[] buf = new char[maxStringLength]__            for (int i = 0_ i < n_ ++i) {_                index += 2__                interfaces[i] = readClass(index, buf)__            }_        }_        return interfaces__    };returns,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,return,the,array,of,internal,names,for,all,implemented,interfaces,or,tt,null,tt,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,index,header,6,int,n,read,unsigned,short,index,string,interfaces,new,string,n,if,n,0,char,buf,new,char,max,string,length,for,int,i,0,i,n,i,index,2,interfaces,i,read,class,index,buf,return,interfaces
ClassReader -> public String[] getInterfaces();1478623137;Returns the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}).__@return the array of internal names for all implemented interfaces or_<tt>null</tt>.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_        int index = header + 6__        int n = readUnsignedShort(index)__        String[] interfaces = new String[n]__        if (n > 0) {_            char[] buf = new char[maxStringLength]__            for (int i = 0_ i < n_ ++i) {_                index += 2__                interfaces[i] = readClass(index, buf)__            }_        }_        return interfaces__    };returns,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,return,the,array,of,internal,names,for,all,implemented,interfaces,or,tt,null,tt,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,index,header,6,int,n,read,unsigned,short,index,string,interfaces,new,string,n,if,n,0,char,buf,new,char,max,string,length,for,int,i,0,i,n,i,index,2,interfaces,i,read,class,index,buf,return,interfaces
ClassReader -> public String[] getInterfaces();1483093254;Returns the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}).__@return the array of internal names for all implemented interfaces or_<tt>null</tt>.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_        int index = header + 6__        int n = readUnsignedShort(index)__        String[] interfaces = new String[n]__        if (n > 0) {_            char[] buf = new char[maxStringLength]__            for (int i = 0_ i < n_ ++i) {_                index += 2__                interfaces[i] = readClass(index, buf)__            }_        }_        return interfaces__    };returns,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,return,the,array,of,internal,names,for,all,implemented,interfaces,or,tt,null,tt,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,index,header,6,int,n,read,unsigned,short,index,string,interfaces,new,string,n,if,n,0,char,buf,new,char,max,string,length,for,int,i,0,i,n,i,index,2,interfaces,i,read,class,index,buf,return,interfaces
ClassReader -> public String[] getInterfaces();1505821772;Returns the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}).__@return the array of internal names for all implemented interfaces or_<tt>null</tt>.__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_        int index = header + 6__        int n = readUnsignedShort(index)__        String[] interfaces = new String[n]__        if (n > 0) {_            char[] buf = new char[maxStringLength]__            for (int i = 0_ i < n_ ++i) {_                index += 2__                interfaces[i] = readClass(index, buf)__            }_        }_        return interfaces__    };returns,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,return,the,array,of,internal,names,for,all,implemented,interfaces,or,tt,null,tt,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,index,header,6,int,n,read,unsigned,short,index,string,interfaces,new,string,n,if,n,0,char,buf,new,char,max,string,length,for,int,i,0,i,n,i,index,2,interfaces,i,read,class,index,buf,return,interfaces
ClassReader -> public String[] getInterfaces();1531241461;Returns the internal names of the implemented interfaces (see {@link Type#getInternalName()}).__@return the internal names of the directly implemented interfaces. Inherited implemented_interfaces are not returned._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_    _    int currentOffset = header + 6__    int interfacesCount = readUnsignedShort(currentOffset)__    String[] interfaces = new String[interfacesCount]__    if (interfacesCount > 0) {_      char[] charBuffer = new char[maxStringLength]__      for (int i = 0_ i < interfacesCount_ ++i) {_        currentOffset += 2__        interfaces[i] = readClass(currentOffset, charBuffer)__      }_    }_    return interfaces__  };returns,the,internal,names,of,the,implemented,interfaces,see,link,type,get,internal,name,return,the,internal,names,of,the,directly,implemented,interfaces,inherited,implemented,interfaces,are,not,returned,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,current,offset,header,6,int,interfaces,count,read,unsigned,short,current,offset,string,interfaces,new,string,interfaces,count,if,interfaces,count,0,char,char,buffer,new,char,max,string,length,for,int,i,0,i,interfaces,count,i,current,offset,2,interfaces,i,read,class,current,offset,char,buffer,return,interfaces
ClassReader -> public String[] getInterfaces();1536664245;Returns the internal names of the implemented interfaces (see {@link Type#getInternalName()}).__@return the internal names of the directly implemented interfaces. Inherited implemented_interfaces are not returned._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_    _    int currentOffset = header + 6__    int interfacesCount = readUnsignedShort(currentOffset)__    String[] interfaces = new String[interfacesCount]__    if (interfacesCount > 0) {_      char[] charBuffer = new char[maxStringLength]__      for (int i = 0_ i < interfacesCount_ ++i) {_        currentOffset += 2__        interfaces[i] = readClass(currentOffset, charBuffer)__      }_    }_    return interfaces__  };returns,the,internal,names,of,the,implemented,interfaces,see,link,type,get,internal,name,return,the,internal,names,of,the,directly,implemented,interfaces,inherited,implemented,interfaces,are,not,returned,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,current,offset,header,6,int,interfaces,count,read,unsigned,short,current,offset,string,interfaces,new,string,interfaces,count,if,interfaces,count,0,char,char,buffer,new,char,max,string,length,for,int,i,0,i,interfaces,count,i,current,offset,2,interfaces,i,read,class,current,offset,char,buffer,return,interfaces
ClassReader -> public String[] getInterfaces();1536747989;Returns the internal names of the implemented interfaces (see {@link Type#getInternalName()}).__@return the internal names of the directly implemented interfaces. Inherited implemented_interfaces are not returned._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_    _    int currentOffset = header + 6__    int interfacesCount = readUnsignedShort(currentOffset)__    String[] interfaces = new String[interfacesCount]__    if (interfacesCount > 0) {_      char[] charBuffer = new char[maxStringLength]__      for (int i = 0_ i < interfacesCount_ ++i) {_        currentOffset += 2__        interfaces[i] = readClass(currentOffset, charBuffer)__      }_    }_    return interfaces__  };returns,the,internal,names,of,the,implemented,interfaces,see,link,type,get,internal,name,return,the,internal,names,of,the,directly,implemented,interfaces,inherited,implemented,interfaces,are,not,returned,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,current,offset,header,6,int,interfaces,count,read,unsigned,short,current,offset,string,interfaces,new,string,interfaces,count,if,interfaces,count,0,char,char,buffer,new,char,max,string,length,for,int,i,0,i,interfaces,count,i,current,offset,2,interfaces,i,read,class,current,offset,char,buffer,return,interfaces
ClassReader -> public String[] getInterfaces();1537204147;Returns the internal names of the implemented interfaces (see {@link Type#getInternalName()}).__@return the internal names of the directly implemented interfaces. Inherited implemented_interfaces are not returned._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_    _    int currentOffset = header + 6__    int interfacesCount = readUnsignedShort(currentOffset)__    String[] interfaces = new String[interfacesCount]__    if (interfacesCount > 0) {_      char[] charBuffer = new char[maxStringLength]__      for (int i = 0_ i < interfacesCount_ ++i) {_        currentOffset += 2__        interfaces[i] = readClass(currentOffset, charBuffer)__      }_    }_    return interfaces__  };returns,the,internal,names,of,the,implemented,interfaces,see,link,type,get,internal,name,return,the,internal,names,of,the,directly,implemented,interfaces,inherited,implemented,interfaces,are,not,returned,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,current,offset,header,6,int,interfaces,count,read,unsigned,short,current,offset,string,interfaces,new,string,interfaces,count,if,interfaces,count,0,char,char,buffer,new,char,max,string,length,for,int,i,0,i,interfaces,count,i,current,offset,2,interfaces,i,read,class,current,offset,char,buffer,return,interfaces
ClassReader -> public String[] getInterfaces();1539119582;Returns the internal names of the implemented interfaces (see {@link Type#getInternalName()}).__@return the internal names of the directly implemented interfaces. Inherited implemented_interfaces are not returned._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_    _    int currentOffset = header + 6__    int interfacesCount = readUnsignedShort(currentOffset)__    String[] interfaces = new String[interfacesCount]__    if (interfacesCount > 0) {_      char[] charBuffer = new char[maxStringLength]__      for (int i = 0_ i < interfacesCount_ ++i) {_        currentOffset += 2__        interfaces[i] = readClass(currentOffset, charBuffer)__      }_    }_    return interfaces__  };returns,the,internal,names,of,the,implemented,interfaces,see,link,type,get,internal,name,return,the,internal,names,of,the,directly,implemented,interfaces,inherited,implemented,interfaces,are,not,returned,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,current,offset,header,6,int,interfaces,count,read,unsigned,short,current,offset,string,interfaces,new,string,interfaces,count,if,interfaces,count,0,char,char,buffer,new,char,max,string,length,for,int,i,0,i,interfaces,count,i,current,offset,2,interfaces,i,read,class,current,offset,char,buffer,return,interfaces
ClassReader -> public String[] getInterfaces();1541436263;Returns the internal names of the implemented interfaces (see {@link Type#getInternalName()}).__@return the internal names of the directly implemented interfaces. Inherited implemented_interfaces are not returned._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String[] getInterfaces() {_    _    int currentOffset = header + 6__    int interfacesCount = readUnsignedShort(currentOffset)__    String[] interfaces = new String[interfacesCount]__    if (interfacesCount > 0) {_      char[] charBuffer = new char[maxStringLength]__      for (int i = 0_ i < interfacesCount_ ++i) {_        currentOffset += 2__        interfaces[i] = readClass(currentOffset, charBuffer)__      }_    }_    return interfaces__  };returns,the,internal,names,of,the,implemented,interfaces,see,link,type,get,internal,name,return,the,internal,names,of,the,directly,implemented,interfaces,inherited,implemented,interfaces,are,not,returned,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,interfaces,int,current,offset,header,6,int,interfaces,count,read,unsigned,short,current,offset,string,interfaces,new,string,interfaces,count,if,interfaces,count,0,char,char,buffer,new,char,max,string,length,for,int,i,0,i,interfaces,count,i,current,offset,2,interfaces,i,read,class,current,offset,char,buffer,return,interfaces
ClassReader -> public ClassReader(final byte[] b);1366718246;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read.;public ClassReader(final byte[] b) {_        this(b, 0, b.length)__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read;public,class,reader,final,byte,b,this,b,0,b,length
ClassReader -> public ClassReader(final byte[] b);1395273982;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read.;public ClassReader(final byte[] b) {_        this(b, 0, b.length)__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read;public,class,reader,final,byte,b,this,b,0,b,length
ClassReader -> public ClassReader(final byte[] b);1414067099;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read.;public ClassReader(final byte[] b) {_        this(b, 0, b.length)__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read;public,class,reader,final,byte,b,this,b,0,b,length
ClassReader -> public ClassReader(final byte[] b);1414499035;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read.;public ClassReader(final byte[] b) {_        this(b, 0, b.length)__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read;public,class,reader,final,byte,b,this,b,0,b,length
ClassReader -> public ClassReader(final byte[] b);1416998550;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read.;public ClassReader(final byte[] b) {_        this(b, 0, b.length)__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read;public,class,reader,final,byte,b,this,b,0,b,length
ClassReader -> public ClassReader(final byte[] b);1457705343;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read.;public ClassReader(final byte[] b) {_        this(b, 0, b.length)__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read;public,class,reader,final,byte,b,this,b,0,b,length
ClassReader -> public ClassReader(final byte[] b);1459258703;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read.;public ClassReader(final byte[] b) {_        this(b, 0, b.length)__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read;public,class,reader,final,byte,b,this,b,0,b,length
ClassReader -> public ClassReader(final byte[] b);1478623137;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read.;public ClassReader(final byte[] b) {_        this(b, 0, b.length)__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read;public,class,reader,final,byte,b,this,b,0,b,length
ClassReader -> public ClassReader(final byte[] b);1483093254;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read.;public ClassReader(final byte[] b) {_        this(b, 0, b.length)__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read;public,class,reader,final,byte,b,this,b,0,b,length
ClassReader -> public ClassReader(final byte[] b);1505821772;Constructs a new {@link ClassReader} object.__@param b_the bytecode of the class to be read.;public ClassReader(final byte[] b) {_        this(b, 0, b.length)__    };constructs,a,new,link,class,reader,object,param,b,the,bytecode,of,the,class,to,be,read;public,class,reader,final,byte,b,this,b,0,b,length
ClassReader -> public ClassReader(final InputStream is) throws IOException;1366718246;Constructs a new {@link ClassReader} object.__@param is_an input stream from which to read the class._@throws IOException_if a problem occurs during reading.;public ClassReader(final InputStream is) throws IOException {_        this(readClass(is, false))__    };constructs,a,new,link,class,reader,object,param,is,an,input,stream,from,which,to,read,the,class,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,is,throws,ioexception,this,read,class,is,false
ClassReader -> public ClassReader(final InputStream is) throws IOException;1395273982;Constructs a new {@link ClassReader} object.__@param is_an input stream from which to read the class._@throws IOException_if a problem occurs during reading.;public ClassReader(final InputStream is) throws IOException {_        this(readClass(is, false))__    };constructs,a,new,link,class,reader,object,param,is,an,input,stream,from,which,to,read,the,class,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,is,throws,ioexception,this,read,class,is,false
ClassReader -> public ClassReader(final InputStream is) throws IOException;1414067099;Constructs a new {@link ClassReader} object.__@param is_an input stream from which to read the class._@throws IOException_if a problem occurs during reading.;public ClassReader(final InputStream is) throws IOException {_        this(readClass(is, false))__    };constructs,a,new,link,class,reader,object,param,is,an,input,stream,from,which,to,read,the,class,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,is,throws,ioexception,this,read,class,is,false
ClassReader -> public ClassReader(final InputStream is) throws IOException;1414499035;Constructs a new {@link ClassReader} object.__@param is_an input stream from which to read the class._@throws IOException_if a problem occurs during reading.;public ClassReader(final InputStream is) throws IOException {_        this(readClass(is, false))__    };constructs,a,new,link,class,reader,object,param,is,an,input,stream,from,which,to,read,the,class,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,is,throws,ioexception,this,read,class,is,false
ClassReader -> public ClassReader(final InputStream is) throws IOException;1416998550;Constructs a new {@link ClassReader} object.__@param is_an input stream from which to read the class._@throws IOException_if a problem occurs during reading.;public ClassReader(final InputStream is) throws IOException {_        this(readClass(is, false))__    };constructs,a,new,link,class,reader,object,param,is,an,input,stream,from,which,to,read,the,class,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,is,throws,ioexception,this,read,class,is,false
ClassReader -> public ClassReader(final InputStream is) throws IOException;1457705343;Constructs a new {@link ClassReader} object.__@param is_an input stream from which to read the class._@throws IOException_if a problem occurs during reading.;public ClassReader(final InputStream is) throws IOException {_        this(readClass(is, false))__    };constructs,a,new,link,class,reader,object,param,is,an,input,stream,from,which,to,read,the,class,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,is,throws,ioexception,this,read,class,is,false
ClassReader -> public ClassReader(final InputStream is) throws IOException;1459258703;Constructs a new {@link ClassReader} object.__@param is_an input stream from which to read the class._@throws IOException_if a problem occurs during reading.;public ClassReader(final InputStream is) throws IOException {_        this(readClass(is, false))__    };constructs,a,new,link,class,reader,object,param,is,an,input,stream,from,which,to,read,the,class,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,is,throws,ioexception,this,read,class,is,false
ClassReader -> public ClassReader(final InputStream is) throws IOException;1478623137;Constructs a new {@link ClassReader} object.__@param is_an input stream from which to read the class._@throws IOException_if a problem occurs during reading.;public ClassReader(final InputStream is) throws IOException {_        this(readClass(is, false))__    };constructs,a,new,link,class,reader,object,param,is,an,input,stream,from,which,to,read,the,class,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,is,throws,ioexception,this,read,class,is,false
ClassReader -> public ClassReader(final InputStream is) throws IOException;1483093254;Constructs a new {@link ClassReader} object.__@param is_an input stream from which to read the class._@throws IOException_if a problem occurs during reading.;public ClassReader(final InputStream is) throws IOException {_        this(readClass(is, false))__    };constructs,a,new,link,class,reader,object,param,is,an,input,stream,from,which,to,read,the,class,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,is,throws,ioexception,this,read,class,is,false
ClassReader -> public ClassReader(final InputStream is) throws IOException;1505821772;Constructs a new {@link ClassReader} object.__@param is_an input stream from which to read the class._@throws IOException_if a problem occurs during reading.;public ClassReader(final InputStream is) throws IOException {_        this(readClass(is, false))__    };constructs,a,new,link,class,reader,object,param,is,an,input,stream,from,which,to,read,the,class,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,is,throws,ioexception,this,read,class,is,false
ClassReader -> private int readAnnotationValues(int v, final char[] buf,             final boolean named, final AnnotationVisitor av);1366718246;Reads the values of an annotation and makes the given visitor visit them.__@param v_the start offset in {@link #b b} of the values to be read_(including the unsigned short that gives the number of_values)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param named_if the annotation values are named or not._@param av_the visitor that must visit the values._@return the end offset of the annotation values.;private int readAnnotationValues(int v, final char[] buf,_            final boolean named, final AnnotationVisitor av) {_        int i = readUnsignedShort(v)__        v += 2__        if (named) {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v + 2, buf, readUTF8(v, buf), av)__            }_        } else {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v, buf, null, av)__            }_        }_        if (av != null) {_            av.visitEnd()__        }_        return v__    };reads,the,values,of,an,annotation,and,makes,the,given,visitor,visit,them,param,v,the,start,offset,in,link,b,b,of,the,values,to,be,read,including,the,unsigned,short,that,gives,the,number,of,values,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,named,if,the,annotation,values,are,named,or,not,param,av,the,visitor,that,must,visit,the,values,return,the,end,offset,of,the,annotation,values;private,int,read,annotation,values,int,v,final,char,buf,final,boolean,named,final,annotation,visitor,av,int,i,read,unsigned,short,v,v,2,if,named,for,i,0,i,v,read,annotation,value,v,2,buf,read,utf8,v,buf,av,else,for,i,0,i,v,read,annotation,value,v,buf,null,av,if,av,null,av,visit,end,return,v
ClassReader -> private int readAnnotationValues(int v, final char[] buf,             final boolean named, final AnnotationVisitor av);1395273982;Reads the values of an annotation and makes the given visitor visit them.__@param v_the start offset in {@link #b b} of the values to be read_(including the unsigned short that gives the number of_values)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param named_if the annotation values are named or not._@param av_the visitor that must visit the values._@return the end offset of the annotation values.;private int readAnnotationValues(int v, final char[] buf,_            final boolean named, final AnnotationVisitor av) {_        int i = readUnsignedShort(v)__        v += 2__        if (named) {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v + 2, buf, readUTF8(v, buf), av)__            }_        } else {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v, buf, null, av)__            }_        }_        if (av != null) {_            av.visitEnd()__        }_        return v__    };reads,the,values,of,an,annotation,and,makes,the,given,visitor,visit,them,param,v,the,start,offset,in,link,b,b,of,the,values,to,be,read,including,the,unsigned,short,that,gives,the,number,of,values,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,named,if,the,annotation,values,are,named,or,not,param,av,the,visitor,that,must,visit,the,values,return,the,end,offset,of,the,annotation,values;private,int,read,annotation,values,int,v,final,char,buf,final,boolean,named,final,annotation,visitor,av,int,i,read,unsigned,short,v,v,2,if,named,for,i,0,i,v,read,annotation,value,v,2,buf,read,utf8,v,buf,av,else,for,i,0,i,v,read,annotation,value,v,buf,null,av,if,av,null,av,visit,end,return,v
ClassReader -> private int readAnnotationValues(int v, final char[] buf,             final boolean named, final AnnotationVisitor av);1414067099;Reads the values of an annotation and makes the given visitor visit them.__@param v_the start offset in {@link #b b} of the values to be read_(including the unsigned short that gives the number of_values)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param named_if the annotation values are named or not._@param av_the visitor that must visit the values._@return the end offset of the annotation values.;private int readAnnotationValues(int v, final char[] buf,_            final boolean named, final AnnotationVisitor av) {_        int i = readUnsignedShort(v)__        v += 2__        if (named) {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v + 2, buf, readUTF8(v, buf), av)__            }_        } else {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v, buf, null, av)__            }_        }_        if (av != null) {_            av.visitEnd()__        }_        return v__    };reads,the,values,of,an,annotation,and,makes,the,given,visitor,visit,them,param,v,the,start,offset,in,link,b,b,of,the,values,to,be,read,including,the,unsigned,short,that,gives,the,number,of,values,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,named,if,the,annotation,values,are,named,or,not,param,av,the,visitor,that,must,visit,the,values,return,the,end,offset,of,the,annotation,values;private,int,read,annotation,values,int,v,final,char,buf,final,boolean,named,final,annotation,visitor,av,int,i,read,unsigned,short,v,v,2,if,named,for,i,0,i,v,read,annotation,value,v,2,buf,read,utf8,v,buf,av,else,for,i,0,i,v,read,annotation,value,v,buf,null,av,if,av,null,av,visit,end,return,v
ClassReader -> private int readAnnotationValues(int v, final char[] buf,             final boolean named, final AnnotationVisitor av);1414499035;Reads the values of an annotation and makes the given visitor visit them.__@param v_the start offset in {@link #b b} of the values to be read_(including the unsigned short that gives the number of_values)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param named_if the annotation values are named or not._@param av_the visitor that must visit the values._@return the end offset of the annotation values.;private int readAnnotationValues(int v, final char[] buf,_            final boolean named, final AnnotationVisitor av) {_        int i = readUnsignedShort(v)__        v += 2__        if (named) {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v + 2, buf, readUTF8(v, buf), av)__            }_        } else {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v, buf, null, av)__            }_        }_        if (av != null) {_            av.visitEnd()__        }_        return v__    };reads,the,values,of,an,annotation,and,makes,the,given,visitor,visit,them,param,v,the,start,offset,in,link,b,b,of,the,values,to,be,read,including,the,unsigned,short,that,gives,the,number,of,values,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,named,if,the,annotation,values,are,named,or,not,param,av,the,visitor,that,must,visit,the,values,return,the,end,offset,of,the,annotation,values;private,int,read,annotation,values,int,v,final,char,buf,final,boolean,named,final,annotation,visitor,av,int,i,read,unsigned,short,v,v,2,if,named,for,i,0,i,v,read,annotation,value,v,2,buf,read,utf8,v,buf,av,else,for,i,0,i,v,read,annotation,value,v,buf,null,av,if,av,null,av,visit,end,return,v
ClassReader -> private int readAnnotationValues(int v, final char[] buf,             final boolean named, final AnnotationVisitor av);1416998550;Reads the values of an annotation and makes the given visitor visit them.__@param v_the start offset in {@link #b b} of the values to be read_(including the unsigned short that gives the number of_values)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param named_if the annotation values are named or not._@param av_the visitor that must visit the values._@return the end offset of the annotation values.;private int readAnnotationValues(int v, final char[] buf,_            final boolean named, final AnnotationVisitor av) {_        int i = readUnsignedShort(v)__        v += 2__        if (named) {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v + 2, buf, readUTF8(v, buf), av)__            }_        } else {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v, buf, null, av)__            }_        }_        if (av != null) {_            av.visitEnd()__        }_        return v__    };reads,the,values,of,an,annotation,and,makes,the,given,visitor,visit,them,param,v,the,start,offset,in,link,b,b,of,the,values,to,be,read,including,the,unsigned,short,that,gives,the,number,of,values,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,named,if,the,annotation,values,are,named,or,not,param,av,the,visitor,that,must,visit,the,values,return,the,end,offset,of,the,annotation,values;private,int,read,annotation,values,int,v,final,char,buf,final,boolean,named,final,annotation,visitor,av,int,i,read,unsigned,short,v,v,2,if,named,for,i,0,i,v,read,annotation,value,v,2,buf,read,utf8,v,buf,av,else,for,i,0,i,v,read,annotation,value,v,buf,null,av,if,av,null,av,visit,end,return,v
ClassReader -> private int readAnnotationValues(int v, final char[] buf,             final boolean named, final AnnotationVisitor av);1457705343;Reads the values of an annotation and makes the given visitor visit them.__@param v_the start offset in {@link #b b} of the values to be read_(including the unsigned short that gives the number of_values)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param named_if the annotation values are named or not._@param av_the visitor that must visit the values._@return the end offset of the annotation values.;private int readAnnotationValues(int v, final char[] buf,_            final boolean named, final AnnotationVisitor av) {_        int i = readUnsignedShort(v)__        v += 2__        if (named) {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v + 2, buf, readUTF8(v, buf), av)__            }_        } else {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v, buf, null, av)__            }_        }_        if (av != null) {_            av.visitEnd()__        }_        return v__    };reads,the,values,of,an,annotation,and,makes,the,given,visitor,visit,them,param,v,the,start,offset,in,link,b,b,of,the,values,to,be,read,including,the,unsigned,short,that,gives,the,number,of,values,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,named,if,the,annotation,values,are,named,or,not,param,av,the,visitor,that,must,visit,the,values,return,the,end,offset,of,the,annotation,values;private,int,read,annotation,values,int,v,final,char,buf,final,boolean,named,final,annotation,visitor,av,int,i,read,unsigned,short,v,v,2,if,named,for,i,0,i,v,read,annotation,value,v,2,buf,read,utf8,v,buf,av,else,for,i,0,i,v,read,annotation,value,v,buf,null,av,if,av,null,av,visit,end,return,v
ClassReader -> private int readAnnotationValues(int v, final char[] buf,             final boolean named, final AnnotationVisitor av);1459258703;Reads the values of an annotation and makes the given visitor visit them.__@param v_the start offset in {@link #b b} of the values to be read_(including the unsigned short that gives the number of_values)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param named_if the annotation values are named or not._@param av_the visitor that must visit the values._@return the end offset of the annotation values.;private int readAnnotationValues(int v, final char[] buf,_            final boolean named, final AnnotationVisitor av) {_        int i = readUnsignedShort(v)__        v += 2__        if (named) {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v + 2, buf, readUTF8(v, buf), av)__            }_        } else {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v, buf, null, av)__            }_        }_        if (av != null) {_            av.visitEnd()__        }_        return v__    };reads,the,values,of,an,annotation,and,makes,the,given,visitor,visit,them,param,v,the,start,offset,in,link,b,b,of,the,values,to,be,read,including,the,unsigned,short,that,gives,the,number,of,values,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,named,if,the,annotation,values,are,named,or,not,param,av,the,visitor,that,must,visit,the,values,return,the,end,offset,of,the,annotation,values;private,int,read,annotation,values,int,v,final,char,buf,final,boolean,named,final,annotation,visitor,av,int,i,read,unsigned,short,v,v,2,if,named,for,i,0,i,v,read,annotation,value,v,2,buf,read,utf8,v,buf,av,else,for,i,0,i,v,read,annotation,value,v,buf,null,av,if,av,null,av,visit,end,return,v
ClassReader -> private int readAnnotationValues(int v, final char[] buf,             final boolean named, final AnnotationVisitor av);1478623137;Reads the values of an annotation and makes the given visitor visit them.__@param v_the start offset in {@link #b b} of the values to be read_(including the unsigned short that gives the number of_values)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param named_if the annotation values are named or not._@param av_the visitor that must visit the values._@return the end offset of the annotation values.;private int readAnnotationValues(int v, final char[] buf,_            final boolean named, final AnnotationVisitor av) {_        int i = readUnsignedShort(v)__        v += 2__        if (named) {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v + 2, buf, readUTF8(v, buf), av)__            }_        } else {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v, buf, null, av)__            }_        }_        if (av != null) {_            av.visitEnd()__        }_        return v__    };reads,the,values,of,an,annotation,and,makes,the,given,visitor,visit,them,param,v,the,start,offset,in,link,b,b,of,the,values,to,be,read,including,the,unsigned,short,that,gives,the,number,of,values,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,named,if,the,annotation,values,are,named,or,not,param,av,the,visitor,that,must,visit,the,values,return,the,end,offset,of,the,annotation,values;private,int,read,annotation,values,int,v,final,char,buf,final,boolean,named,final,annotation,visitor,av,int,i,read,unsigned,short,v,v,2,if,named,for,i,0,i,v,read,annotation,value,v,2,buf,read,utf8,v,buf,av,else,for,i,0,i,v,read,annotation,value,v,buf,null,av,if,av,null,av,visit,end,return,v
ClassReader -> private int readAnnotationValues(int v, final char[] buf,             final boolean named, final AnnotationVisitor av);1483093254;Reads the values of an annotation and makes the given visitor visit them.__@param v_the start offset in {@link #b b} of the values to be read_(including the unsigned short that gives the number of_values)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param named_if the annotation values are named or not._@param av_the visitor that must visit the values._@return the end offset of the annotation values.;private int readAnnotationValues(int v, final char[] buf,_            final boolean named, final AnnotationVisitor av) {_        int i = readUnsignedShort(v)__        v += 2__        if (named) {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v + 2, buf, readUTF8(v, buf), av)__            }_        } else {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v, buf, null, av)__            }_        }_        if (av != null) {_            av.visitEnd()__        }_        return v__    };reads,the,values,of,an,annotation,and,makes,the,given,visitor,visit,them,param,v,the,start,offset,in,link,b,b,of,the,values,to,be,read,including,the,unsigned,short,that,gives,the,number,of,values,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,named,if,the,annotation,values,are,named,or,not,param,av,the,visitor,that,must,visit,the,values,return,the,end,offset,of,the,annotation,values;private,int,read,annotation,values,int,v,final,char,buf,final,boolean,named,final,annotation,visitor,av,int,i,read,unsigned,short,v,v,2,if,named,for,i,0,i,v,read,annotation,value,v,2,buf,read,utf8,v,buf,av,else,for,i,0,i,v,read,annotation,value,v,buf,null,av,if,av,null,av,visit,end,return,v
ClassReader -> private int readAnnotationValues(int v, final char[] buf,             final boolean named, final AnnotationVisitor av);1505821772;Reads the values of an annotation and makes the given visitor visit them.__@param v_the start offset in {@link #b b} of the values to be read_(including the unsigned short that gives the number of_values)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param named_if the annotation values are named or not._@param av_the visitor that must visit the values._@return the end offset of the annotation values.;private int readAnnotationValues(int v, final char[] buf,_            final boolean named, final AnnotationVisitor av) {_        int i = readUnsignedShort(v)__        v += 2__        if (named) {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v + 2, buf, readUTF8(v, buf), av)__            }_        } else {_            for (_ i > 0_ --i) {_                v = readAnnotationValue(v, buf, null, av)__            }_        }_        if (av != null) {_            av.visitEnd()__        }_        return v__    };reads,the,values,of,an,annotation,and,makes,the,given,visitor,visit,them,param,v,the,start,offset,in,link,b,b,of,the,values,to,be,read,including,the,unsigned,short,that,gives,the,number,of,values,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,named,if,the,annotation,values,are,named,or,not,param,av,the,visitor,that,must,visit,the,values,return,the,end,offset,of,the,annotation,values;private,int,read,annotation,values,int,v,final,char,buf,final,boolean,named,final,annotation,visitor,av,int,i,read,unsigned,short,v,v,2,if,named,for,i,0,i,v,read,annotation,value,v,2,buf,read,utf8,v,buf,av,else,for,i,0,i,v,read,annotation,value,v,buf,null,av,if,av,null,av,visit,end,return,v
ClassReader -> public int readInt(final int index);1366718246;Reads a signed int value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readInt(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,int,final,int,index,byte,b,this,b,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
ClassReader -> public int readInt(final int index);1395273982;Reads a signed int value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readInt(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,int,final,int,index,byte,b,this,b,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
ClassReader -> public int readInt(final int index);1414067099;Reads a signed int value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readInt(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,int,final,int,index,byte,b,this,b,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
ClassReader -> public int readInt(final int index);1414499035;Reads a signed int value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readInt(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,int,final,int,index,byte,b,this,b,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
ClassReader -> public int readInt(final int index);1416998550;Reads a signed int value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readInt(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,int,final,int,index,byte,b,this,b,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
ClassReader -> public int readInt(final int index);1457705343;Reads a signed int value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readInt(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,int,final,int,index,byte,b,this,b,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
ClassReader -> public int readInt(final int index);1459258703;Reads a signed int value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readInt(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,int,final,int,index,byte,b,this,b,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
ClassReader -> public int readInt(final int index);1478623137;Reads a signed int value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readInt(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,int,final,int,index,byte,b,this,b,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
ClassReader -> public int readInt(final int index);1483093254;Reads a signed int value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readInt(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,int,final,int,index,byte,b,this,b,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
ClassReader -> public int readInt(final int index);1505821772;Reads a signed int value in {@link #b b}. <i>This method is intended for_{@link Attribute} sub classes, and is normally not needed by class_generators or adapters.</i>__@param index_the start index of the value to be read in {@link #b b}._@return the read value.;public int readInt(final int index) {_        byte[] b = this.b__        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,link,b,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,index,the,start,index,of,the,value,to,be,read,in,link,b,b,return,the,read,value;public,int,read,int,final,int,index,byte,b,this,b,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
ClassReader -> public ClassReader(final String className) throws IOException;1531241461;Constructs a new {@link ClassReader} object.__@param className the fully qualified name of the class to be read. The ClassFile structure is_retrieved with the current class loader's {@link ClassLoader#getSystemResourceAsStream}._@throws IOException if an exception occurs during reading.;public ClassReader(final String className) throws IOException {_    this(_        readStream(_            ClassLoader.getSystemResourceAsStream(className.replace('.', '/') + ".class"), true))__  };constructs,a,new,link,class,reader,object,param,class,name,the,fully,qualified,name,of,the,class,to,be,read,the,class,file,structure,is,retrieved,with,the,current,class,loader,s,link,class,loader,get,system,resource,as,stream,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,class,name,throws,ioexception,this,read,stream,class,loader,get,system,resource,as,stream,class,name,replace,class,true
ClassReader -> public ClassReader(final String className) throws IOException;1536664245;Constructs a new {@link ClassReader} object.__@param className the fully qualified name of the class to be read. The ClassFile structure is_retrieved with the current class loader's {@link ClassLoader#getSystemResourceAsStream}._@throws IOException if an exception occurs during reading.;public ClassReader(final String className) throws IOException {_    this(_        readStream(_            ClassLoader.getSystemResourceAsStream(className.replace('.', '/') + ".class"), true))__  };constructs,a,new,link,class,reader,object,param,class,name,the,fully,qualified,name,of,the,class,to,be,read,the,class,file,structure,is,retrieved,with,the,current,class,loader,s,link,class,loader,get,system,resource,as,stream,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,class,name,throws,ioexception,this,read,stream,class,loader,get,system,resource,as,stream,class,name,replace,class,true
ClassReader -> public ClassReader(final String className) throws IOException;1536747989;Constructs a new {@link ClassReader} object.__@param className the fully qualified name of the class to be read. The ClassFile structure is_retrieved with the current class loader's {@link ClassLoader#getSystemResourceAsStream}._@throws IOException if an exception occurs during reading.;public ClassReader(final String className) throws IOException {_    this(_        readStream(_            ClassLoader.getSystemResourceAsStream(className.replace('.', '/') + ".class"), true))__  };constructs,a,new,link,class,reader,object,param,class,name,the,fully,qualified,name,of,the,class,to,be,read,the,class,file,structure,is,retrieved,with,the,current,class,loader,s,link,class,loader,get,system,resource,as,stream,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,class,name,throws,ioexception,this,read,stream,class,loader,get,system,resource,as,stream,class,name,replace,class,true
ClassReader -> public ClassReader(final String className) throws IOException;1537204147;Constructs a new {@link ClassReader} object.__@param className the fully qualified name of the class to be read. The ClassFile structure is_retrieved with the current class loader's {@link ClassLoader#getSystemResourceAsStream}._@throws IOException if an exception occurs during reading.;public ClassReader(final String className) throws IOException {_    this(_        readStream(_            ClassLoader.getSystemResourceAsStream(className.replace('.', '/') + ".class"), true))__  };constructs,a,new,link,class,reader,object,param,class,name,the,fully,qualified,name,of,the,class,to,be,read,the,class,file,structure,is,retrieved,with,the,current,class,loader,s,link,class,loader,get,system,resource,as,stream,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,class,name,throws,ioexception,this,read,stream,class,loader,get,system,resource,as,stream,class,name,replace,class,true
ClassReader -> public ClassReader(final String className) throws IOException;1539119582;Constructs a new {@link ClassReader} object.__@param className the fully qualified name of the class to be read. The ClassFile structure is_retrieved with the current class loader's {@link ClassLoader#getSystemResourceAsStream}._@throws IOException if an exception occurs during reading.;public ClassReader(final String className) throws IOException {_    this(_        readStream(_            ClassLoader.getSystemResourceAsStream(className.replace('.', '/') + ".class"), true))__  };constructs,a,new,link,class,reader,object,param,class,name,the,fully,qualified,name,of,the,class,to,be,read,the,class,file,structure,is,retrieved,with,the,current,class,loader,s,link,class,loader,get,system,resource,as,stream,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,class,name,throws,ioexception,this,read,stream,class,loader,get,system,resource,as,stream,class,name,replace,class,true
ClassReader -> public ClassReader(final String className) throws IOException;1541436263;Constructs a new {@link ClassReader} object.__@param className the fully qualified name of the class to be read. The ClassFile structure is_retrieved with the current class loader's {@link ClassLoader#getSystemResourceAsStream}._@throws IOException if an exception occurs during reading.;public ClassReader(final String className) throws IOException {_    this(_        readStream(_            ClassLoader.getSystemResourceAsStream(className.replace('.', '/') + ".class"), true))__  };constructs,a,new,link,class,reader,object,param,class,name,the,fully,qualified,name,of,the,class,to,be,read,the,class,file,structure,is,retrieved,with,the,current,class,loader,s,link,class,loader,get,system,resource,as,stream,throws,ioexception,if,an,exception,occurs,during,reading;public,class,reader,final,string,class,name,throws,ioexception,this,read,stream,class,loader,get,system,resource,as,stream,class,name,replace,class,true
ClassReader -> private int readStackMapFrame(       final int stackMapFrameOffset,       final boolean compressed,       final boolean expand,       final Context context);1531241461;Reads a JVMS 'stack_map_frame' structure and stores the result in the given {@link Context}_object. This method can also be used to read a full_frame structure, excluding its frame_type_field (this is used to parse the legacy StackMap attributes).__@param stackMapFrameOffset the start offset in {@link #b} of the stack_map_frame_value_structure to be read, or the start offset of a full_frame structure (excluding its_frame_type field)._@param compressed true to read a 'stack_map_frame' structure, false to read a 'full_frame'_structure without its frame_type field._@param expand if the stack map frame must be expanded. See {@link #EXPAND_FRAMES}._@param context where the parsed stack map frame must be stored._@return the end offset of the JVMS 'stack_map_frame' or 'full_frame' structure.;private int readStackMapFrame(_      final int stackMapFrameOffset,_      final boolean compressed,_      final boolean expand,_      final Context context) {_    int currentOffset = stackMapFrameOffset__    final char[] charBuffer = context.charBuffer__    final Label[] labels = context.currentMethodLabels__    int frameType__    if (compressed) {_      _      frameType = b[currentOffset++] & 0xFF__    } else {_      frameType = Frame.FULL_FRAME__      context.currentFrameOffset = -1__    }_    int offsetDelta__    context.currentFrameLocalCountDelta = 0__    if (frameType < Frame.SAME_LOCALS_1_STACK_ITEM_FRAME) {_      offsetDelta = frameType__      context.currentFrameType = Opcodes.F_SAME__      context.currentFrameStackCount = 0__    } else if (frameType < Frame.RESERVED) {_      offsetDelta = frameType - Frame.SAME_LOCALS_1_STACK_ITEM_FRAME__      currentOffset =_          readVerificationTypeInfo(_              currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels)__      context.currentFrameType = Opcodes.F_SAME1__      context.currentFrameStackCount = 1__    } else if (frameType >= Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_      offsetDelta = readUnsignedShort(currentOffset)__      currentOffset += 2__      if (frameType == Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_        currentOffset =_            readVerificationTypeInfo(_                currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels)__        context.currentFrameType = Opcodes.F_SAME1__        context.currentFrameStackCount = 1__      } else if (frameType >= Frame.CHOP_FRAME && frameType < Frame.SAME_FRAME_EXTENDED) {_        context.currentFrameType = Opcodes.F_CHOP__        context.currentFrameLocalCountDelta = Frame.SAME_FRAME_EXTENDED - frameType__        context.currentFrameLocalCount -= context.currentFrameLocalCountDelta__        context.currentFrameStackCount = 0__      } else if (frameType == Frame.SAME_FRAME_EXTENDED) {_        context.currentFrameType = Opcodes.F_SAME__        context.currentFrameStackCount = 0__      } else if (frameType < Frame.FULL_FRAME) {_        int local = expand ? context.currentFrameLocalCount : 0__        for (int k = frameType - Frame.SAME_FRAME_EXTENDED_ k > 0_ k--) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameLocalTypes, local++, charBuffer, labels)__        }_        context.currentFrameType = Opcodes.F_APPEND__        context.currentFrameLocalCountDelta = frameType - Frame.SAME_FRAME_EXTENDED__        context.currentFrameLocalCount += context.currentFrameLocalCountDelta__        context.currentFrameStackCount = 0__      } else {_        final int numberOfLocals = readUnsignedShort(currentOffset)__        currentOffset += 2__        context.currentFrameType = Opcodes.F_FULL__        context.currentFrameLocalCountDelta = numberOfLocals__        context.currentFrameLocalCount = numberOfLocals__        for (int local = 0_ local < numberOfLocals_ ++local) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameLocalTypes, local, charBuffer, labels)__        }_        final int numberOfStackItems = readUnsignedShort(currentOffset)__        currentOffset += 2__        context.currentFrameStackCount = numberOfStackItems__        for (int stack = 0_ stack < numberOfStackItems_ ++stack) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameStackTypes, stack, charBuffer, labels)__        }_      }_    } else {_      throw new IllegalArgumentException()__    }_    context.currentFrameOffset += offsetDelta + 1__    createLabel(context.currentFrameOffset, labels)__    return currentOffset__  };reads,a,jvms,structure,and,stores,the,result,in,the,given,link,context,object,this,method,can,also,be,used,to,read,a,structure,excluding,its,field,this,is,used,to,parse,the,legacy,stack,map,attributes,param,stack,map,frame,offset,the,start,offset,in,link,b,of,the,structure,to,be,read,or,the,start,offset,of,a,structure,excluding,its,field,param,compressed,true,to,read,a,structure,false,to,read,a,structure,without,its,field,param,expand,if,the,stack,map,frame,must,be,expanded,see,link,param,context,where,the,parsed,stack,map,frame,must,be,stored,return,the,end,offset,of,the,jvms,or,structure;private,int,read,stack,map,frame,final,int,stack,map,frame,offset,final,boolean,compressed,final,boolean,expand,final,context,context,int,current,offset,stack,map,frame,offset,final,char,char,buffer,context,char,buffer,final,label,labels,context,current,method,labels,int,frame,type,if,compressed,frame,type,b,current,offset,0x,ff,else,frame,type,frame,context,current,frame,offset,1,int,offset,delta,context,current,frame,local,count,delta,0,if,frame,type,frame,offset,delta,frame,type,context,current,frame,type,opcodes,context,current,frame,stack,count,0,else,if,frame,type,frame,reserved,offset,delta,frame,type,frame,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,0,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,stack,count,1,else,if,frame,type,frame,offset,delta,read,unsigned,short,current,offset,current,offset,2,if,frame,type,frame,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,0,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,stack,count,1,else,if,frame,type,frame,frame,type,frame,context,current,frame,type,opcodes,context,current,frame,local,count,delta,frame,frame,type,context,current,frame,local,count,context,current,frame,local,count,delta,context,current,frame,stack,count,0,else,if,frame,type,frame,context,current,frame,type,opcodes,context,current,frame,stack,count,0,else,if,frame,type,frame,int,local,expand,context,current,frame,local,count,0,for,int,k,frame,type,frame,k,0,k,current,offset,read,verification,type,info,current,offset,context,current,frame,local,types,local,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,local,count,delta,frame,type,frame,context,current,frame,local,count,context,current,frame,local,count,delta,context,current,frame,stack,count,0,else,final,int,number,of,locals,read,unsigned,short,current,offset,current,offset,2,context,current,frame,type,opcodes,context,current,frame,local,count,delta,number,of,locals,context,current,frame,local,count,number,of,locals,for,int,local,0,local,number,of,locals,local,current,offset,read,verification,type,info,current,offset,context,current,frame,local,types,local,char,buffer,labels,final,int,number,of,stack,items,read,unsigned,short,current,offset,current,offset,2,context,current,frame,stack,count,number,of,stack,items,for,int,stack,0,stack,number,of,stack,items,stack,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,stack,char,buffer,labels,else,throw,new,illegal,argument,exception,context,current,frame,offset,offset,delta,1,create,label,context,current,frame,offset,labels,return,current,offset
ClassReader -> private int readStackMapFrame(       final int stackMapFrameOffset,       final boolean compressed,       final boolean expand,       final Context context);1536664245;Reads a JVMS 'stack_map_frame' structure and stores the result in the given {@link Context}_object. This method can also be used to read a full_frame structure, excluding its frame_type_field (this is used to parse the legacy StackMap attributes).__@param stackMapFrameOffset the start offset in {@link #b} of the stack_map_frame_value_structure to be read, or the start offset of a full_frame structure (excluding its_frame_type field)._@param compressed true to read a 'stack_map_frame' structure, false to read a 'full_frame'_structure without its frame_type field._@param expand if the stack map frame must be expanded. See {@link #EXPAND_FRAMES}._@param context where the parsed stack map frame must be stored._@return the end offset of the JVMS 'stack_map_frame' or 'full_frame' structure.;private int readStackMapFrame(_      final int stackMapFrameOffset,_      final boolean compressed,_      final boolean expand,_      final Context context) {_    int currentOffset = stackMapFrameOffset__    final char[] charBuffer = context.charBuffer__    final Label[] labels = context.currentMethodLabels__    int frameType__    if (compressed) {_      _      frameType = b[currentOffset++] & 0xFF__    } else {_      frameType = Frame.FULL_FRAME__      context.currentFrameOffset = -1__    }_    int offsetDelta__    context.currentFrameLocalCountDelta = 0__    if (frameType < Frame.SAME_LOCALS_1_STACK_ITEM_FRAME) {_      offsetDelta = frameType__      context.currentFrameType = Opcodes.F_SAME__      context.currentFrameStackCount = 0__    } else if (frameType < Frame.RESERVED) {_      offsetDelta = frameType - Frame.SAME_LOCALS_1_STACK_ITEM_FRAME__      currentOffset =_          readVerificationTypeInfo(_              currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels)__      context.currentFrameType = Opcodes.F_SAME1__      context.currentFrameStackCount = 1__    } else if (frameType >= Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_      offsetDelta = readUnsignedShort(currentOffset)__      currentOffset += 2__      if (frameType == Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_        currentOffset =_            readVerificationTypeInfo(_                currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels)__        context.currentFrameType = Opcodes.F_SAME1__        context.currentFrameStackCount = 1__      } else if (frameType >= Frame.CHOP_FRAME && frameType < Frame.SAME_FRAME_EXTENDED) {_        context.currentFrameType = Opcodes.F_CHOP__        context.currentFrameLocalCountDelta = Frame.SAME_FRAME_EXTENDED - frameType__        context.currentFrameLocalCount -= context.currentFrameLocalCountDelta__        context.currentFrameStackCount = 0__      } else if (frameType == Frame.SAME_FRAME_EXTENDED) {_        context.currentFrameType = Opcodes.F_SAME__        context.currentFrameStackCount = 0__      } else if (frameType < Frame.FULL_FRAME) {_        int local = expand ? context.currentFrameLocalCount : 0__        for (int k = frameType - Frame.SAME_FRAME_EXTENDED_ k > 0_ k--) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameLocalTypes, local++, charBuffer, labels)__        }_        context.currentFrameType = Opcodes.F_APPEND__        context.currentFrameLocalCountDelta = frameType - Frame.SAME_FRAME_EXTENDED__        context.currentFrameLocalCount += context.currentFrameLocalCountDelta__        context.currentFrameStackCount = 0__      } else {_        final int numberOfLocals = readUnsignedShort(currentOffset)__        currentOffset += 2__        context.currentFrameType = Opcodes.F_FULL__        context.currentFrameLocalCountDelta = numberOfLocals__        context.currentFrameLocalCount = numberOfLocals__        for (int local = 0_ local < numberOfLocals_ ++local) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameLocalTypes, local, charBuffer, labels)__        }_        final int numberOfStackItems = readUnsignedShort(currentOffset)__        currentOffset += 2__        context.currentFrameStackCount = numberOfStackItems__        for (int stack = 0_ stack < numberOfStackItems_ ++stack) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameStackTypes, stack, charBuffer, labels)__        }_      }_    } else {_      throw new IllegalArgumentException()__    }_    context.currentFrameOffset += offsetDelta + 1__    createLabel(context.currentFrameOffset, labels)__    return currentOffset__  };reads,a,jvms,structure,and,stores,the,result,in,the,given,link,context,object,this,method,can,also,be,used,to,read,a,structure,excluding,its,field,this,is,used,to,parse,the,legacy,stack,map,attributes,param,stack,map,frame,offset,the,start,offset,in,link,b,of,the,structure,to,be,read,or,the,start,offset,of,a,structure,excluding,its,field,param,compressed,true,to,read,a,structure,false,to,read,a,structure,without,its,field,param,expand,if,the,stack,map,frame,must,be,expanded,see,link,param,context,where,the,parsed,stack,map,frame,must,be,stored,return,the,end,offset,of,the,jvms,or,structure;private,int,read,stack,map,frame,final,int,stack,map,frame,offset,final,boolean,compressed,final,boolean,expand,final,context,context,int,current,offset,stack,map,frame,offset,final,char,char,buffer,context,char,buffer,final,label,labels,context,current,method,labels,int,frame,type,if,compressed,frame,type,b,current,offset,0x,ff,else,frame,type,frame,context,current,frame,offset,1,int,offset,delta,context,current,frame,local,count,delta,0,if,frame,type,frame,offset,delta,frame,type,context,current,frame,type,opcodes,context,current,frame,stack,count,0,else,if,frame,type,frame,reserved,offset,delta,frame,type,frame,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,0,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,stack,count,1,else,if,frame,type,frame,offset,delta,read,unsigned,short,current,offset,current,offset,2,if,frame,type,frame,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,0,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,stack,count,1,else,if,frame,type,frame,frame,type,frame,context,current,frame,type,opcodes,context,current,frame,local,count,delta,frame,frame,type,context,current,frame,local,count,context,current,frame,local,count,delta,context,current,frame,stack,count,0,else,if,frame,type,frame,context,current,frame,type,opcodes,context,current,frame,stack,count,0,else,if,frame,type,frame,int,local,expand,context,current,frame,local,count,0,for,int,k,frame,type,frame,k,0,k,current,offset,read,verification,type,info,current,offset,context,current,frame,local,types,local,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,local,count,delta,frame,type,frame,context,current,frame,local,count,context,current,frame,local,count,delta,context,current,frame,stack,count,0,else,final,int,number,of,locals,read,unsigned,short,current,offset,current,offset,2,context,current,frame,type,opcodes,context,current,frame,local,count,delta,number,of,locals,context,current,frame,local,count,number,of,locals,for,int,local,0,local,number,of,locals,local,current,offset,read,verification,type,info,current,offset,context,current,frame,local,types,local,char,buffer,labels,final,int,number,of,stack,items,read,unsigned,short,current,offset,current,offset,2,context,current,frame,stack,count,number,of,stack,items,for,int,stack,0,stack,number,of,stack,items,stack,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,stack,char,buffer,labels,else,throw,new,illegal,argument,exception,context,current,frame,offset,offset,delta,1,create,label,context,current,frame,offset,labels,return,current,offset
ClassReader -> private int readStackMapFrame(       final int stackMapFrameOffset,       final boolean compressed,       final boolean expand,       final Context context);1536747989;Reads a JVMS 'stack_map_frame' structure and stores the result in the given {@link Context}_object. This method can also be used to read a full_frame structure, excluding its frame_type_field (this is used to parse the legacy StackMap attributes).__@param stackMapFrameOffset the start offset in {@link #b} of the stack_map_frame_value_structure to be read, or the start offset of a full_frame structure (excluding its_frame_type field)._@param compressed true to read a 'stack_map_frame' structure, false to read a 'full_frame'_structure without its frame_type field._@param expand if the stack map frame must be expanded. See {@link #EXPAND_FRAMES}._@param context where the parsed stack map frame must be stored._@return the end offset of the JVMS 'stack_map_frame' or 'full_frame' structure.;private int readStackMapFrame(_      final int stackMapFrameOffset,_      final boolean compressed,_      final boolean expand,_      final Context context) {_    int currentOffset = stackMapFrameOffset__    final char[] charBuffer = context.charBuffer__    final Label[] labels = context.currentMethodLabels__    int frameType__    if (compressed) {_      _      frameType = b[currentOffset++] & 0xFF__    } else {_      frameType = Frame.FULL_FRAME__      context.currentFrameOffset = -1__    }_    int offsetDelta__    context.currentFrameLocalCountDelta = 0__    if (frameType < Frame.SAME_LOCALS_1_STACK_ITEM_FRAME) {_      offsetDelta = frameType__      context.currentFrameType = Opcodes.F_SAME__      context.currentFrameStackCount = 0__    } else if (frameType < Frame.RESERVED) {_      offsetDelta = frameType - Frame.SAME_LOCALS_1_STACK_ITEM_FRAME__      currentOffset =_          readVerificationTypeInfo(_              currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels)__      context.currentFrameType = Opcodes.F_SAME1__      context.currentFrameStackCount = 1__    } else if (frameType >= Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_      offsetDelta = readUnsignedShort(currentOffset)__      currentOffset += 2__      if (frameType == Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_        currentOffset =_            readVerificationTypeInfo(_                currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels)__        context.currentFrameType = Opcodes.F_SAME1__        context.currentFrameStackCount = 1__      } else if (frameType >= Frame.CHOP_FRAME && frameType < Frame.SAME_FRAME_EXTENDED) {_        context.currentFrameType = Opcodes.F_CHOP__        context.currentFrameLocalCountDelta = Frame.SAME_FRAME_EXTENDED - frameType__        context.currentFrameLocalCount -= context.currentFrameLocalCountDelta__        context.currentFrameStackCount = 0__      } else if (frameType == Frame.SAME_FRAME_EXTENDED) {_        context.currentFrameType = Opcodes.F_SAME__        context.currentFrameStackCount = 0__      } else if (frameType < Frame.FULL_FRAME) {_        int local = expand ? context.currentFrameLocalCount : 0__        for (int k = frameType - Frame.SAME_FRAME_EXTENDED_ k > 0_ k--) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameLocalTypes, local++, charBuffer, labels)__        }_        context.currentFrameType = Opcodes.F_APPEND__        context.currentFrameLocalCountDelta = frameType - Frame.SAME_FRAME_EXTENDED__        context.currentFrameLocalCount += context.currentFrameLocalCountDelta__        context.currentFrameStackCount = 0__      } else {_        final int numberOfLocals = readUnsignedShort(currentOffset)__        currentOffset += 2__        context.currentFrameType = Opcodes.F_FULL__        context.currentFrameLocalCountDelta = numberOfLocals__        context.currentFrameLocalCount = numberOfLocals__        for (int local = 0_ local < numberOfLocals_ ++local) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameLocalTypes, local, charBuffer, labels)__        }_        final int numberOfStackItems = readUnsignedShort(currentOffset)__        currentOffset += 2__        context.currentFrameStackCount = numberOfStackItems__        for (int stack = 0_ stack < numberOfStackItems_ ++stack) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameStackTypes, stack, charBuffer, labels)__        }_      }_    } else {_      throw new IllegalArgumentException()__    }_    context.currentFrameOffset += offsetDelta + 1__    createLabel(context.currentFrameOffset, labels)__    return currentOffset__  };reads,a,jvms,structure,and,stores,the,result,in,the,given,link,context,object,this,method,can,also,be,used,to,read,a,structure,excluding,its,field,this,is,used,to,parse,the,legacy,stack,map,attributes,param,stack,map,frame,offset,the,start,offset,in,link,b,of,the,structure,to,be,read,or,the,start,offset,of,a,structure,excluding,its,field,param,compressed,true,to,read,a,structure,false,to,read,a,structure,without,its,field,param,expand,if,the,stack,map,frame,must,be,expanded,see,link,param,context,where,the,parsed,stack,map,frame,must,be,stored,return,the,end,offset,of,the,jvms,or,structure;private,int,read,stack,map,frame,final,int,stack,map,frame,offset,final,boolean,compressed,final,boolean,expand,final,context,context,int,current,offset,stack,map,frame,offset,final,char,char,buffer,context,char,buffer,final,label,labels,context,current,method,labels,int,frame,type,if,compressed,frame,type,b,current,offset,0x,ff,else,frame,type,frame,context,current,frame,offset,1,int,offset,delta,context,current,frame,local,count,delta,0,if,frame,type,frame,offset,delta,frame,type,context,current,frame,type,opcodes,context,current,frame,stack,count,0,else,if,frame,type,frame,reserved,offset,delta,frame,type,frame,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,0,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,stack,count,1,else,if,frame,type,frame,offset,delta,read,unsigned,short,current,offset,current,offset,2,if,frame,type,frame,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,0,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,stack,count,1,else,if,frame,type,frame,frame,type,frame,context,current,frame,type,opcodes,context,current,frame,local,count,delta,frame,frame,type,context,current,frame,local,count,context,current,frame,local,count,delta,context,current,frame,stack,count,0,else,if,frame,type,frame,context,current,frame,type,opcodes,context,current,frame,stack,count,0,else,if,frame,type,frame,int,local,expand,context,current,frame,local,count,0,for,int,k,frame,type,frame,k,0,k,current,offset,read,verification,type,info,current,offset,context,current,frame,local,types,local,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,local,count,delta,frame,type,frame,context,current,frame,local,count,context,current,frame,local,count,delta,context,current,frame,stack,count,0,else,final,int,number,of,locals,read,unsigned,short,current,offset,current,offset,2,context,current,frame,type,opcodes,context,current,frame,local,count,delta,number,of,locals,context,current,frame,local,count,number,of,locals,for,int,local,0,local,number,of,locals,local,current,offset,read,verification,type,info,current,offset,context,current,frame,local,types,local,char,buffer,labels,final,int,number,of,stack,items,read,unsigned,short,current,offset,current,offset,2,context,current,frame,stack,count,number,of,stack,items,for,int,stack,0,stack,number,of,stack,items,stack,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,stack,char,buffer,labels,else,throw,new,illegal,argument,exception,context,current,frame,offset,offset,delta,1,create,label,context,current,frame,offset,labels,return,current,offset
ClassReader -> private int readStackMapFrame(       final int stackMapFrameOffset,       final boolean compressed,       final boolean expand,       final Context context);1537204147;Reads a JVMS 'stack_map_frame' structure and stores the result in the given {@link Context}_object. This method can also be used to read a full_frame structure, excluding its frame_type_field (this is used to parse the legacy StackMap attributes).__@param stackMapFrameOffset the start offset in {@link #b} of the stack_map_frame_value_structure to be read, or the start offset of a full_frame structure (excluding its_frame_type field)._@param compressed true to read a 'stack_map_frame' structure, false to read a 'full_frame'_structure without its frame_type field._@param expand if the stack map frame must be expanded. See {@link #EXPAND_FRAMES}._@param context where the parsed stack map frame must be stored._@return the end offset of the JVMS 'stack_map_frame' or 'full_frame' structure.;private int readStackMapFrame(_      final int stackMapFrameOffset,_      final boolean compressed,_      final boolean expand,_      final Context context) {_    int currentOffset = stackMapFrameOffset__    final char[] charBuffer = context.charBuffer__    final Label[] labels = context.currentMethodLabels__    int frameType__    if (compressed) {_      _      frameType = b[currentOffset++] & 0xFF__    } else {_      frameType = Frame.FULL_FRAME__      context.currentFrameOffset = -1__    }_    int offsetDelta__    context.currentFrameLocalCountDelta = 0__    if (frameType < Frame.SAME_LOCALS_1_STACK_ITEM_FRAME) {_      offsetDelta = frameType__      context.currentFrameType = Opcodes.F_SAME__      context.currentFrameStackCount = 0__    } else if (frameType < Frame.RESERVED) {_      offsetDelta = frameType - Frame.SAME_LOCALS_1_STACK_ITEM_FRAME__      currentOffset =_          readVerificationTypeInfo(_              currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels)__      context.currentFrameType = Opcodes.F_SAME1__      context.currentFrameStackCount = 1__    } else if (frameType >= Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_      offsetDelta = readUnsignedShort(currentOffset)__      currentOffset += 2__      if (frameType == Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_        currentOffset =_            readVerificationTypeInfo(_                currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels)__        context.currentFrameType = Opcodes.F_SAME1__        context.currentFrameStackCount = 1__      } else if (frameType >= Frame.CHOP_FRAME && frameType < Frame.SAME_FRAME_EXTENDED) {_        context.currentFrameType = Opcodes.F_CHOP__        context.currentFrameLocalCountDelta = Frame.SAME_FRAME_EXTENDED - frameType__        context.currentFrameLocalCount -= context.currentFrameLocalCountDelta__        context.currentFrameStackCount = 0__      } else if (frameType == Frame.SAME_FRAME_EXTENDED) {_        context.currentFrameType = Opcodes.F_SAME__        context.currentFrameStackCount = 0__      } else if (frameType < Frame.FULL_FRAME) {_        int local = expand ? context.currentFrameLocalCount : 0__        for (int k = frameType - Frame.SAME_FRAME_EXTENDED_ k > 0_ k--) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameLocalTypes, local++, charBuffer, labels)__        }_        context.currentFrameType = Opcodes.F_APPEND__        context.currentFrameLocalCountDelta = frameType - Frame.SAME_FRAME_EXTENDED__        context.currentFrameLocalCount += context.currentFrameLocalCountDelta__        context.currentFrameStackCount = 0__      } else {_        final int numberOfLocals = readUnsignedShort(currentOffset)__        currentOffset += 2__        context.currentFrameType = Opcodes.F_FULL__        context.currentFrameLocalCountDelta = numberOfLocals__        context.currentFrameLocalCount = numberOfLocals__        for (int local = 0_ local < numberOfLocals_ ++local) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameLocalTypes, local, charBuffer, labels)__        }_        final int numberOfStackItems = readUnsignedShort(currentOffset)__        currentOffset += 2__        context.currentFrameStackCount = numberOfStackItems__        for (int stack = 0_ stack < numberOfStackItems_ ++stack) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameStackTypes, stack, charBuffer, labels)__        }_      }_    } else {_      throw new IllegalArgumentException()__    }_    context.currentFrameOffset += offsetDelta + 1__    createLabel(context.currentFrameOffset, labels)__    return currentOffset__  };reads,a,jvms,structure,and,stores,the,result,in,the,given,link,context,object,this,method,can,also,be,used,to,read,a,structure,excluding,its,field,this,is,used,to,parse,the,legacy,stack,map,attributes,param,stack,map,frame,offset,the,start,offset,in,link,b,of,the,structure,to,be,read,or,the,start,offset,of,a,structure,excluding,its,field,param,compressed,true,to,read,a,structure,false,to,read,a,structure,without,its,field,param,expand,if,the,stack,map,frame,must,be,expanded,see,link,param,context,where,the,parsed,stack,map,frame,must,be,stored,return,the,end,offset,of,the,jvms,or,structure;private,int,read,stack,map,frame,final,int,stack,map,frame,offset,final,boolean,compressed,final,boolean,expand,final,context,context,int,current,offset,stack,map,frame,offset,final,char,char,buffer,context,char,buffer,final,label,labels,context,current,method,labels,int,frame,type,if,compressed,frame,type,b,current,offset,0x,ff,else,frame,type,frame,context,current,frame,offset,1,int,offset,delta,context,current,frame,local,count,delta,0,if,frame,type,frame,offset,delta,frame,type,context,current,frame,type,opcodes,context,current,frame,stack,count,0,else,if,frame,type,frame,reserved,offset,delta,frame,type,frame,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,0,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,stack,count,1,else,if,frame,type,frame,offset,delta,read,unsigned,short,current,offset,current,offset,2,if,frame,type,frame,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,0,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,stack,count,1,else,if,frame,type,frame,frame,type,frame,context,current,frame,type,opcodes,context,current,frame,local,count,delta,frame,frame,type,context,current,frame,local,count,context,current,frame,local,count,delta,context,current,frame,stack,count,0,else,if,frame,type,frame,context,current,frame,type,opcodes,context,current,frame,stack,count,0,else,if,frame,type,frame,int,local,expand,context,current,frame,local,count,0,for,int,k,frame,type,frame,k,0,k,current,offset,read,verification,type,info,current,offset,context,current,frame,local,types,local,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,local,count,delta,frame,type,frame,context,current,frame,local,count,context,current,frame,local,count,delta,context,current,frame,stack,count,0,else,final,int,number,of,locals,read,unsigned,short,current,offset,current,offset,2,context,current,frame,type,opcodes,context,current,frame,local,count,delta,number,of,locals,context,current,frame,local,count,number,of,locals,for,int,local,0,local,number,of,locals,local,current,offset,read,verification,type,info,current,offset,context,current,frame,local,types,local,char,buffer,labels,final,int,number,of,stack,items,read,unsigned,short,current,offset,current,offset,2,context,current,frame,stack,count,number,of,stack,items,for,int,stack,0,stack,number,of,stack,items,stack,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,stack,char,buffer,labels,else,throw,new,illegal,argument,exception,context,current,frame,offset,offset,delta,1,create,label,context,current,frame,offset,labels,return,current,offset
ClassReader -> private int readStackMapFrame(       final int stackMapFrameOffset,       final boolean compressed,       final boolean expand,       final Context context);1539119582;Reads a JVMS 'stack_map_frame' structure and stores the result in the given {@link Context}_object. This method can also be used to read a full_frame structure, excluding its frame_type_field (this is used to parse the legacy StackMap attributes).__@param stackMapFrameOffset the start offset in {@link #b} of the stack_map_frame_value_structure to be read, or the start offset of a full_frame structure (excluding its_frame_type field)._@param compressed true to read a 'stack_map_frame' structure, false to read a 'full_frame'_structure without its frame_type field._@param expand if the stack map frame must be expanded. See {@link #EXPAND_FRAMES}._@param context where the parsed stack map frame must be stored._@return the end offset of the JVMS 'stack_map_frame' or 'full_frame' structure.;private int readStackMapFrame(_      final int stackMapFrameOffset,_      final boolean compressed,_      final boolean expand,_      final Context context) {_    int currentOffset = stackMapFrameOffset__    final char[] charBuffer = context.charBuffer__    final Label[] labels = context.currentMethodLabels__    int frameType__    if (compressed) {_      _      frameType = b[currentOffset++] & 0xFF__    } else {_      frameType = Frame.FULL_FRAME__      context.currentFrameOffset = -1__    }_    int offsetDelta__    context.currentFrameLocalCountDelta = 0__    if (frameType < Frame.SAME_LOCALS_1_STACK_ITEM_FRAME) {_      offsetDelta = frameType__      context.currentFrameType = Opcodes.F_SAME__      context.currentFrameStackCount = 0__    } else if (frameType < Frame.RESERVED) {_      offsetDelta = frameType - Frame.SAME_LOCALS_1_STACK_ITEM_FRAME__      currentOffset =_          readVerificationTypeInfo(_              currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels)__      context.currentFrameType = Opcodes.F_SAME1__      context.currentFrameStackCount = 1__    } else if (frameType >= Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_      offsetDelta = readUnsignedShort(currentOffset)__      currentOffset += 2__      if (frameType == Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_        currentOffset =_            readVerificationTypeInfo(_                currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels)__        context.currentFrameType = Opcodes.F_SAME1__        context.currentFrameStackCount = 1__      } else if (frameType >= Frame.CHOP_FRAME && frameType < Frame.SAME_FRAME_EXTENDED) {_        context.currentFrameType = Opcodes.F_CHOP__        context.currentFrameLocalCountDelta = Frame.SAME_FRAME_EXTENDED - frameType__        context.currentFrameLocalCount -= context.currentFrameLocalCountDelta__        context.currentFrameStackCount = 0__      } else if (frameType == Frame.SAME_FRAME_EXTENDED) {_        context.currentFrameType = Opcodes.F_SAME__        context.currentFrameStackCount = 0__      } else if (frameType < Frame.FULL_FRAME) {_        int local = expand ? context.currentFrameLocalCount : 0__        for (int k = frameType - Frame.SAME_FRAME_EXTENDED_ k > 0_ k--) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameLocalTypes, local++, charBuffer, labels)__        }_        context.currentFrameType = Opcodes.F_APPEND__        context.currentFrameLocalCountDelta = frameType - Frame.SAME_FRAME_EXTENDED__        context.currentFrameLocalCount += context.currentFrameLocalCountDelta__        context.currentFrameStackCount = 0__      } else {_        final int numberOfLocals = readUnsignedShort(currentOffset)__        currentOffset += 2__        context.currentFrameType = Opcodes.F_FULL__        context.currentFrameLocalCountDelta = numberOfLocals__        context.currentFrameLocalCount = numberOfLocals__        for (int local = 0_ local < numberOfLocals_ ++local) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameLocalTypes, local, charBuffer, labels)__        }_        final int numberOfStackItems = readUnsignedShort(currentOffset)__        currentOffset += 2__        context.currentFrameStackCount = numberOfStackItems__        for (int stack = 0_ stack < numberOfStackItems_ ++stack) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameStackTypes, stack, charBuffer, labels)__        }_      }_    } else {_      throw new IllegalArgumentException()__    }_    context.currentFrameOffset += offsetDelta + 1__    createLabel(context.currentFrameOffset, labels)__    return currentOffset__  };reads,a,jvms,structure,and,stores,the,result,in,the,given,link,context,object,this,method,can,also,be,used,to,read,a,structure,excluding,its,field,this,is,used,to,parse,the,legacy,stack,map,attributes,param,stack,map,frame,offset,the,start,offset,in,link,b,of,the,structure,to,be,read,or,the,start,offset,of,a,structure,excluding,its,field,param,compressed,true,to,read,a,structure,false,to,read,a,structure,without,its,field,param,expand,if,the,stack,map,frame,must,be,expanded,see,link,param,context,where,the,parsed,stack,map,frame,must,be,stored,return,the,end,offset,of,the,jvms,or,structure;private,int,read,stack,map,frame,final,int,stack,map,frame,offset,final,boolean,compressed,final,boolean,expand,final,context,context,int,current,offset,stack,map,frame,offset,final,char,char,buffer,context,char,buffer,final,label,labels,context,current,method,labels,int,frame,type,if,compressed,frame,type,b,current,offset,0x,ff,else,frame,type,frame,context,current,frame,offset,1,int,offset,delta,context,current,frame,local,count,delta,0,if,frame,type,frame,offset,delta,frame,type,context,current,frame,type,opcodes,context,current,frame,stack,count,0,else,if,frame,type,frame,reserved,offset,delta,frame,type,frame,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,0,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,stack,count,1,else,if,frame,type,frame,offset,delta,read,unsigned,short,current,offset,current,offset,2,if,frame,type,frame,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,0,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,stack,count,1,else,if,frame,type,frame,frame,type,frame,context,current,frame,type,opcodes,context,current,frame,local,count,delta,frame,frame,type,context,current,frame,local,count,context,current,frame,local,count,delta,context,current,frame,stack,count,0,else,if,frame,type,frame,context,current,frame,type,opcodes,context,current,frame,stack,count,0,else,if,frame,type,frame,int,local,expand,context,current,frame,local,count,0,for,int,k,frame,type,frame,k,0,k,current,offset,read,verification,type,info,current,offset,context,current,frame,local,types,local,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,local,count,delta,frame,type,frame,context,current,frame,local,count,context,current,frame,local,count,delta,context,current,frame,stack,count,0,else,final,int,number,of,locals,read,unsigned,short,current,offset,current,offset,2,context,current,frame,type,opcodes,context,current,frame,local,count,delta,number,of,locals,context,current,frame,local,count,number,of,locals,for,int,local,0,local,number,of,locals,local,current,offset,read,verification,type,info,current,offset,context,current,frame,local,types,local,char,buffer,labels,final,int,number,of,stack,items,read,unsigned,short,current,offset,current,offset,2,context,current,frame,stack,count,number,of,stack,items,for,int,stack,0,stack,number,of,stack,items,stack,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,stack,char,buffer,labels,else,throw,new,illegal,argument,exception,context,current,frame,offset,offset,delta,1,create,label,context,current,frame,offset,labels,return,current,offset
ClassReader -> private int readStackMapFrame(       final int stackMapFrameOffset,       final boolean compressed,       final boolean expand,       final Context context);1541436263;Reads a JVMS 'stack_map_frame' structure and stores the result in the given {@link Context}_object. This method can also be used to read a full_frame structure, excluding its frame_type_field (this is used to parse the legacy StackMap attributes).__@param stackMapFrameOffset the start offset in {@link #b} of the stack_map_frame_value_structure to be read, or the start offset of a full_frame structure (excluding its_frame_type field)._@param compressed true to read a 'stack_map_frame' structure, false to read a 'full_frame'_structure without its frame_type field._@param expand if the stack map frame must be expanded. See {@link #EXPAND_FRAMES}._@param context where the parsed stack map frame must be stored._@return the end offset of the JVMS 'stack_map_frame' or 'full_frame' structure.;private int readStackMapFrame(_      final int stackMapFrameOffset,_      final boolean compressed,_      final boolean expand,_      final Context context) {_    int currentOffset = stackMapFrameOffset__    final char[] charBuffer = context.charBuffer__    final Label[] labels = context.currentMethodLabels__    int frameType__    if (compressed) {_      _      frameType = b[currentOffset++] & 0xFF__    } else {_      frameType = Frame.FULL_FRAME__      context.currentFrameOffset = -1__    }_    int offsetDelta__    context.currentFrameLocalCountDelta = 0__    if (frameType < Frame.SAME_LOCALS_1_STACK_ITEM_FRAME) {_      offsetDelta = frameType__      context.currentFrameType = Opcodes.F_SAME__      context.currentFrameStackCount = 0__    } else if (frameType < Frame.RESERVED) {_      offsetDelta = frameType - Frame.SAME_LOCALS_1_STACK_ITEM_FRAME__      currentOffset =_          readVerificationTypeInfo(_              currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels)__      context.currentFrameType = Opcodes.F_SAME1__      context.currentFrameStackCount = 1__    } else if (frameType >= Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_      offsetDelta = readUnsignedShort(currentOffset)__      currentOffset += 2__      if (frameType == Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_        currentOffset =_            readVerificationTypeInfo(_                currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels)__        context.currentFrameType = Opcodes.F_SAME1__        context.currentFrameStackCount = 1__      } else if (frameType >= Frame.CHOP_FRAME && frameType < Frame.SAME_FRAME_EXTENDED) {_        context.currentFrameType = Opcodes.F_CHOP__        context.currentFrameLocalCountDelta = Frame.SAME_FRAME_EXTENDED - frameType__        context.currentFrameLocalCount -= context.currentFrameLocalCountDelta__        context.currentFrameStackCount = 0__      } else if (frameType == Frame.SAME_FRAME_EXTENDED) {_        context.currentFrameType = Opcodes.F_SAME__        context.currentFrameStackCount = 0__      } else if (frameType < Frame.FULL_FRAME) {_        int local = expand ? context.currentFrameLocalCount : 0__        for (int k = frameType - Frame.SAME_FRAME_EXTENDED_ k > 0_ k--) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameLocalTypes, local++, charBuffer, labels)__        }_        context.currentFrameType = Opcodes.F_APPEND__        context.currentFrameLocalCountDelta = frameType - Frame.SAME_FRAME_EXTENDED__        context.currentFrameLocalCount += context.currentFrameLocalCountDelta__        context.currentFrameStackCount = 0__      } else {_        final int numberOfLocals = readUnsignedShort(currentOffset)__        currentOffset += 2__        context.currentFrameType = Opcodes.F_FULL__        context.currentFrameLocalCountDelta = numberOfLocals__        context.currentFrameLocalCount = numberOfLocals__        for (int local = 0_ local < numberOfLocals_ ++local) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameLocalTypes, local, charBuffer, labels)__        }_        final int numberOfStackItems = readUnsignedShort(currentOffset)__        currentOffset += 2__        context.currentFrameStackCount = numberOfStackItems__        for (int stack = 0_ stack < numberOfStackItems_ ++stack) {_          currentOffset =_              readVerificationTypeInfo(_                  currentOffset, context.currentFrameStackTypes, stack, charBuffer, labels)__        }_      }_    } else {_      throw new IllegalArgumentException()__    }_    context.currentFrameOffset += offsetDelta + 1__    createLabel(context.currentFrameOffset, labels)__    return currentOffset__  };reads,a,jvms,structure,and,stores,the,result,in,the,given,link,context,object,this,method,can,also,be,used,to,read,a,structure,excluding,its,field,this,is,used,to,parse,the,legacy,stack,map,attributes,param,stack,map,frame,offset,the,start,offset,in,link,b,of,the,structure,to,be,read,or,the,start,offset,of,a,structure,excluding,its,field,param,compressed,true,to,read,a,structure,false,to,read,a,structure,without,its,field,param,expand,if,the,stack,map,frame,must,be,expanded,see,link,param,context,where,the,parsed,stack,map,frame,must,be,stored,return,the,end,offset,of,the,jvms,or,structure;private,int,read,stack,map,frame,final,int,stack,map,frame,offset,final,boolean,compressed,final,boolean,expand,final,context,context,int,current,offset,stack,map,frame,offset,final,char,char,buffer,context,char,buffer,final,label,labels,context,current,method,labels,int,frame,type,if,compressed,frame,type,b,current,offset,0x,ff,else,frame,type,frame,context,current,frame,offset,1,int,offset,delta,context,current,frame,local,count,delta,0,if,frame,type,frame,offset,delta,frame,type,context,current,frame,type,opcodes,context,current,frame,stack,count,0,else,if,frame,type,frame,reserved,offset,delta,frame,type,frame,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,0,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,stack,count,1,else,if,frame,type,frame,offset,delta,read,unsigned,short,current,offset,current,offset,2,if,frame,type,frame,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,0,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,stack,count,1,else,if,frame,type,frame,frame,type,frame,context,current,frame,type,opcodes,context,current,frame,local,count,delta,frame,frame,type,context,current,frame,local,count,context,current,frame,local,count,delta,context,current,frame,stack,count,0,else,if,frame,type,frame,context,current,frame,type,opcodes,context,current,frame,stack,count,0,else,if,frame,type,frame,int,local,expand,context,current,frame,local,count,0,for,int,k,frame,type,frame,k,0,k,current,offset,read,verification,type,info,current,offset,context,current,frame,local,types,local,char,buffer,labels,context,current,frame,type,opcodes,context,current,frame,local,count,delta,frame,type,frame,context,current,frame,local,count,context,current,frame,local,count,delta,context,current,frame,stack,count,0,else,final,int,number,of,locals,read,unsigned,short,current,offset,current,offset,2,context,current,frame,type,opcodes,context,current,frame,local,count,delta,number,of,locals,context,current,frame,local,count,number,of,locals,for,int,local,0,local,number,of,locals,local,current,offset,read,verification,type,info,current,offset,context,current,frame,local,types,local,char,buffer,labels,final,int,number,of,stack,items,read,unsigned,short,current,offset,current,offset,2,context,current,frame,stack,count,number,of,stack,items,for,int,stack,0,stack,number,of,stack,items,stack,current,offset,read,verification,type,info,current,offset,context,current,frame,stack,types,stack,char,buffer,labels,else,throw,new,illegal,argument,exception,context,current,frame,offset,offset,delta,1,create,label,context,current,frame,offset,labels,return,current,offset
ClassReader -> private int readVerificationTypeInfo(       final int verificationTypeInfoOffset,       final Object[] frame,       final int index,       final char[] charBuffer,       final Label[] labels);1531241461;Reads a JVMS 'verification_type_info' structure and stores it at the given index in the given_array.__@param verificationTypeInfoOffset the start offset of the 'verification_type_info' structure to_read._@param frame the array where the parsed type must be stored._@param index the index in 'frame' where the parsed type must be stored._@param charBuffer the buffer used to read strings in the constant pool._@param labels the labels of the method currently being parsed, indexed by their offset. If the_parsed type is an ITEM_Uninitialized, a new label for the corresponding NEW instruction is_stored in this array if it does not already exist._@return the end offset of the JVMS 'verification_type_info' structure.;private int readVerificationTypeInfo(_      final int verificationTypeInfoOffset,_      final Object[] frame,_      final int index,_      final char[] charBuffer,_      final Label[] labels) {_    int currentOffset = verificationTypeInfoOffset__    int tag = b[currentOffset++] & 0xFF__    switch (tag) {_      case Frame.ITEM_TOP:_        frame[index] = Opcodes.TOP__        break__      case Frame.ITEM_INTEGER:_        frame[index] = Opcodes.INTEGER__        break__      case Frame.ITEM_FLOAT:_        frame[index] = Opcodes.FLOAT__        break__      case Frame.ITEM_DOUBLE:_        frame[index] = Opcodes.DOUBLE__        break__      case Frame.ITEM_LONG:_        frame[index] = Opcodes.LONG__        break__      case Frame.ITEM_NULL:_        frame[index] = Opcodes.NULL__        break__      case Frame.ITEM_UNINITIALIZED_THIS:_        frame[index] = Opcodes.UNINITIALIZED_THIS__        break__      case Frame.ITEM_OBJECT:_        frame[index] = readClass(currentOffset, charBuffer)__        currentOffset += 2__        break__      case Frame.ITEM_UNINITIALIZED:_        frame[index] = createLabel(readUnsignedShort(currentOffset), labels)__        currentOffset += 2__        break__      default:_        throw new IllegalArgumentException()__    }_    return currentOffset__  };reads,a,jvms,structure,and,stores,it,at,the,given,index,in,the,given,array,param,verification,type,info,offset,the,start,offset,of,the,structure,to,read,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,end,offset,of,the,jvms,structure;private,int,read,verification,type,info,final,int,verification,type,info,offset,final,object,frame,final,int,index,final,char,char,buffer,final,label,labels,int,current,offset,verification,type,info,offset,int,tag,b,current,offset,0x,ff,switch,tag,case,frame,frame,index,opcodes,top,break,case,frame,frame,index,opcodes,integer,break,case,frame,frame,index,opcodes,float,break,case,frame,frame,index,opcodes,double,break,case,frame,frame,index,opcodes,long,break,case,frame,frame,index,opcodes,null,break,case,frame,frame,index,opcodes,break,case,frame,frame,index,read,class,current,offset,char,buffer,current,offset,2,break,case,frame,frame,index,create,label,read,unsigned,short,current,offset,labels,current,offset,2,break,default,throw,new,illegal,argument,exception,return,current,offset
ClassReader -> private int readVerificationTypeInfo(       final int verificationTypeInfoOffset,       final Object[] frame,       final int index,       final char[] charBuffer,       final Label[] labels);1536664245;Reads a JVMS 'verification_type_info' structure and stores it at the given index in the given_array.__@param verificationTypeInfoOffset the start offset of the 'verification_type_info' structure to_read._@param frame the array where the parsed type must be stored._@param index the index in 'frame' where the parsed type must be stored._@param charBuffer the buffer used to read strings in the constant pool._@param labels the labels of the method currently being parsed, indexed by their offset. If the_parsed type is an ITEM_Uninitialized, a new label for the corresponding NEW instruction is_stored in this array if it does not already exist._@return the end offset of the JVMS 'verification_type_info' structure.;private int readVerificationTypeInfo(_      final int verificationTypeInfoOffset,_      final Object[] frame,_      final int index,_      final char[] charBuffer,_      final Label[] labels) {_    int currentOffset = verificationTypeInfoOffset__    int tag = b[currentOffset++] & 0xFF__    switch (tag) {_      case Frame.ITEM_TOP:_        frame[index] = Opcodes.TOP__        break__      case Frame.ITEM_INTEGER:_        frame[index] = Opcodes.INTEGER__        break__      case Frame.ITEM_FLOAT:_        frame[index] = Opcodes.FLOAT__        break__      case Frame.ITEM_DOUBLE:_        frame[index] = Opcodes.DOUBLE__        break__      case Frame.ITEM_LONG:_        frame[index] = Opcodes.LONG__        break__      case Frame.ITEM_NULL:_        frame[index] = Opcodes.NULL__        break__      case Frame.ITEM_UNINITIALIZED_THIS:_        frame[index] = Opcodes.UNINITIALIZED_THIS__        break__      case Frame.ITEM_OBJECT:_        frame[index] = readClass(currentOffset, charBuffer)__        currentOffset += 2__        break__      case Frame.ITEM_UNINITIALIZED:_        frame[index] = createLabel(readUnsignedShort(currentOffset), labels)__        currentOffset += 2__        break__      default:_        throw new IllegalArgumentException()__    }_    return currentOffset__  };reads,a,jvms,structure,and,stores,it,at,the,given,index,in,the,given,array,param,verification,type,info,offset,the,start,offset,of,the,structure,to,read,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,end,offset,of,the,jvms,structure;private,int,read,verification,type,info,final,int,verification,type,info,offset,final,object,frame,final,int,index,final,char,char,buffer,final,label,labels,int,current,offset,verification,type,info,offset,int,tag,b,current,offset,0x,ff,switch,tag,case,frame,frame,index,opcodes,top,break,case,frame,frame,index,opcodes,integer,break,case,frame,frame,index,opcodes,float,break,case,frame,frame,index,opcodes,double,break,case,frame,frame,index,opcodes,long,break,case,frame,frame,index,opcodes,null,break,case,frame,frame,index,opcodes,break,case,frame,frame,index,read,class,current,offset,char,buffer,current,offset,2,break,case,frame,frame,index,create,label,read,unsigned,short,current,offset,labels,current,offset,2,break,default,throw,new,illegal,argument,exception,return,current,offset
ClassReader -> private int readVerificationTypeInfo(       final int verificationTypeInfoOffset,       final Object[] frame,       final int index,       final char[] charBuffer,       final Label[] labels);1536747989;Reads a JVMS 'verification_type_info' structure and stores it at the given index in the given_array.__@param verificationTypeInfoOffset the start offset of the 'verification_type_info' structure to_read._@param frame the array where the parsed type must be stored._@param index the index in 'frame' where the parsed type must be stored._@param charBuffer the buffer used to read strings in the constant pool._@param labels the labels of the method currently being parsed, indexed by their offset. If the_parsed type is an ITEM_Uninitialized, a new label for the corresponding NEW instruction is_stored in this array if it does not already exist._@return the end offset of the JVMS 'verification_type_info' structure.;private int readVerificationTypeInfo(_      final int verificationTypeInfoOffset,_      final Object[] frame,_      final int index,_      final char[] charBuffer,_      final Label[] labels) {_    int currentOffset = verificationTypeInfoOffset__    int tag = b[currentOffset++] & 0xFF__    switch (tag) {_      case Frame.ITEM_TOP:_        frame[index] = Opcodes.TOP__        break__      case Frame.ITEM_INTEGER:_        frame[index] = Opcodes.INTEGER__        break__      case Frame.ITEM_FLOAT:_        frame[index] = Opcodes.FLOAT__        break__      case Frame.ITEM_DOUBLE:_        frame[index] = Opcodes.DOUBLE__        break__      case Frame.ITEM_LONG:_        frame[index] = Opcodes.LONG__        break__      case Frame.ITEM_NULL:_        frame[index] = Opcodes.NULL__        break__      case Frame.ITEM_UNINITIALIZED_THIS:_        frame[index] = Opcodes.UNINITIALIZED_THIS__        break__      case Frame.ITEM_OBJECT:_        frame[index] = readClass(currentOffset, charBuffer)__        currentOffset += 2__        break__      case Frame.ITEM_UNINITIALIZED:_        frame[index] = createLabel(readUnsignedShort(currentOffset), labels)__        currentOffset += 2__        break__      default:_        throw new IllegalArgumentException()__    }_    return currentOffset__  };reads,a,jvms,structure,and,stores,it,at,the,given,index,in,the,given,array,param,verification,type,info,offset,the,start,offset,of,the,structure,to,read,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,end,offset,of,the,jvms,structure;private,int,read,verification,type,info,final,int,verification,type,info,offset,final,object,frame,final,int,index,final,char,char,buffer,final,label,labels,int,current,offset,verification,type,info,offset,int,tag,b,current,offset,0x,ff,switch,tag,case,frame,frame,index,opcodes,top,break,case,frame,frame,index,opcodes,integer,break,case,frame,frame,index,opcodes,float,break,case,frame,frame,index,opcodes,double,break,case,frame,frame,index,opcodes,long,break,case,frame,frame,index,opcodes,null,break,case,frame,frame,index,opcodes,break,case,frame,frame,index,read,class,current,offset,char,buffer,current,offset,2,break,case,frame,frame,index,create,label,read,unsigned,short,current,offset,labels,current,offset,2,break,default,throw,new,illegal,argument,exception,return,current,offset
ClassReader -> private int readVerificationTypeInfo(       final int verificationTypeInfoOffset,       final Object[] frame,       final int index,       final char[] charBuffer,       final Label[] labels);1537204147;Reads a JVMS 'verification_type_info' structure and stores it at the given index in the given_array.__@param verificationTypeInfoOffset the start offset of the 'verification_type_info' structure to_read._@param frame the array where the parsed type must be stored._@param index the index in 'frame' where the parsed type must be stored._@param charBuffer the buffer used to read strings in the constant pool._@param labels the labels of the method currently being parsed, indexed by their offset. If the_parsed type is an ITEM_Uninitialized, a new label for the corresponding NEW instruction is_stored in this array if it does not already exist._@return the end offset of the JVMS 'verification_type_info' structure.;private int readVerificationTypeInfo(_      final int verificationTypeInfoOffset,_      final Object[] frame,_      final int index,_      final char[] charBuffer,_      final Label[] labels) {_    int currentOffset = verificationTypeInfoOffset__    int tag = b[currentOffset++] & 0xFF__    switch (tag) {_      case Frame.ITEM_TOP:_        frame[index] = Opcodes.TOP__        break__      case Frame.ITEM_INTEGER:_        frame[index] = Opcodes.INTEGER__        break__      case Frame.ITEM_FLOAT:_        frame[index] = Opcodes.FLOAT__        break__      case Frame.ITEM_DOUBLE:_        frame[index] = Opcodes.DOUBLE__        break__      case Frame.ITEM_LONG:_        frame[index] = Opcodes.LONG__        break__      case Frame.ITEM_NULL:_        frame[index] = Opcodes.NULL__        break__      case Frame.ITEM_UNINITIALIZED_THIS:_        frame[index] = Opcodes.UNINITIALIZED_THIS__        break__      case Frame.ITEM_OBJECT:_        frame[index] = readClass(currentOffset, charBuffer)__        currentOffset += 2__        break__      case Frame.ITEM_UNINITIALIZED:_        frame[index] = createLabel(readUnsignedShort(currentOffset), labels)__        currentOffset += 2__        break__      default:_        throw new IllegalArgumentException()__    }_    return currentOffset__  };reads,a,jvms,structure,and,stores,it,at,the,given,index,in,the,given,array,param,verification,type,info,offset,the,start,offset,of,the,structure,to,read,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,end,offset,of,the,jvms,structure;private,int,read,verification,type,info,final,int,verification,type,info,offset,final,object,frame,final,int,index,final,char,char,buffer,final,label,labels,int,current,offset,verification,type,info,offset,int,tag,b,current,offset,0x,ff,switch,tag,case,frame,frame,index,opcodes,top,break,case,frame,frame,index,opcodes,integer,break,case,frame,frame,index,opcodes,float,break,case,frame,frame,index,opcodes,double,break,case,frame,frame,index,opcodes,long,break,case,frame,frame,index,opcodes,null,break,case,frame,frame,index,opcodes,break,case,frame,frame,index,read,class,current,offset,char,buffer,current,offset,2,break,case,frame,frame,index,create,label,read,unsigned,short,current,offset,labels,current,offset,2,break,default,throw,new,illegal,argument,exception,return,current,offset
ClassReader -> private int readVerificationTypeInfo(       final int verificationTypeInfoOffset,       final Object[] frame,       final int index,       final char[] charBuffer,       final Label[] labels);1539119582;Reads a JVMS 'verification_type_info' structure and stores it at the given index in the given_array.__@param verificationTypeInfoOffset the start offset of the 'verification_type_info' structure to_read._@param frame the array where the parsed type must be stored._@param index the index in 'frame' where the parsed type must be stored._@param charBuffer the buffer used to read strings in the constant pool._@param labels the labels of the method currently being parsed, indexed by their offset. If the_parsed type is an ITEM_Uninitialized, a new label for the corresponding NEW instruction is_stored in this array if it does not already exist._@return the end offset of the JVMS 'verification_type_info' structure.;private int readVerificationTypeInfo(_      final int verificationTypeInfoOffset,_      final Object[] frame,_      final int index,_      final char[] charBuffer,_      final Label[] labels) {_    int currentOffset = verificationTypeInfoOffset__    int tag = b[currentOffset++] & 0xFF__    switch (tag) {_      case Frame.ITEM_TOP:_        frame[index] = Opcodes.TOP__        break__      case Frame.ITEM_INTEGER:_        frame[index] = Opcodes.INTEGER__        break__      case Frame.ITEM_FLOAT:_        frame[index] = Opcodes.FLOAT__        break__      case Frame.ITEM_DOUBLE:_        frame[index] = Opcodes.DOUBLE__        break__      case Frame.ITEM_LONG:_        frame[index] = Opcodes.LONG__        break__      case Frame.ITEM_NULL:_        frame[index] = Opcodes.NULL__        break__      case Frame.ITEM_UNINITIALIZED_THIS:_        frame[index] = Opcodes.UNINITIALIZED_THIS__        break__      case Frame.ITEM_OBJECT:_        frame[index] = readClass(currentOffset, charBuffer)__        currentOffset += 2__        break__      case Frame.ITEM_UNINITIALIZED:_        frame[index] = createLabel(readUnsignedShort(currentOffset), labels)__        currentOffset += 2__        break__      default:_        throw new IllegalArgumentException()__    }_    return currentOffset__  };reads,a,jvms,structure,and,stores,it,at,the,given,index,in,the,given,array,param,verification,type,info,offset,the,start,offset,of,the,structure,to,read,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,end,offset,of,the,jvms,structure;private,int,read,verification,type,info,final,int,verification,type,info,offset,final,object,frame,final,int,index,final,char,char,buffer,final,label,labels,int,current,offset,verification,type,info,offset,int,tag,b,current,offset,0x,ff,switch,tag,case,frame,frame,index,opcodes,top,break,case,frame,frame,index,opcodes,integer,break,case,frame,frame,index,opcodes,float,break,case,frame,frame,index,opcodes,double,break,case,frame,frame,index,opcodes,long,break,case,frame,frame,index,opcodes,null,break,case,frame,frame,index,opcodes,break,case,frame,frame,index,read,class,current,offset,char,buffer,current,offset,2,break,case,frame,frame,index,create,label,read,unsigned,short,current,offset,labels,current,offset,2,break,default,throw,new,illegal,argument,exception,return,current,offset
ClassReader -> private int readVerificationTypeInfo(       final int verificationTypeInfoOffset,       final Object[] frame,       final int index,       final char[] charBuffer,       final Label[] labels);1541436263;Reads a JVMS 'verification_type_info' structure and stores it at the given index in the given_array.__@param verificationTypeInfoOffset the start offset of the 'verification_type_info' structure to_read._@param frame the array where the parsed type must be stored._@param index the index in 'frame' where the parsed type must be stored._@param charBuffer the buffer used to read strings in the constant pool._@param labels the labels of the method currently being parsed, indexed by their offset. If the_parsed type is an ITEM_Uninitialized, a new label for the corresponding NEW instruction is_stored in this array if it does not already exist._@return the end offset of the JVMS 'verification_type_info' structure.;private int readVerificationTypeInfo(_      final int verificationTypeInfoOffset,_      final Object[] frame,_      final int index,_      final char[] charBuffer,_      final Label[] labels) {_    int currentOffset = verificationTypeInfoOffset__    int tag = b[currentOffset++] & 0xFF__    switch (tag) {_      case Frame.ITEM_TOP:_        frame[index] = Opcodes.TOP__        break__      case Frame.ITEM_INTEGER:_        frame[index] = Opcodes.INTEGER__        break__      case Frame.ITEM_FLOAT:_        frame[index] = Opcodes.FLOAT__        break__      case Frame.ITEM_DOUBLE:_        frame[index] = Opcodes.DOUBLE__        break__      case Frame.ITEM_LONG:_        frame[index] = Opcodes.LONG__        break__      case Frame.ITEM_NULL:_        frame[index] = Opcodes.NULL__        break__      case Frame.ITEM_UNINITIALIZED_THIS:_        frame[index] = Opcodes.UNINITIALIZED_THIS__        break__      case Frame.ITEM_OBJECT:_        frame[index] = readClass(currentOffset, charBuffer)__        currentOffset += 2__        break__      case Frame.ITEM_UNINITIALIZED:_        frame[index] = createLabel(readUnsignedShort(currentOffset), labels)__        currentOffset += 2__        break__      default:_        throw new IllegalArgumentException()__    }_    return currentOffset__  };reads,a,jvms,structure,and,stores,it,at,the,given,index,in,the,given,array,param,verification,type,info,offset,the,start,offset,of,the,structure,to,read,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,end,offset,of,the,jvms,structure;private,int,read,verification,type,info,final,int,verification,type,info,offset,final,object,frame,final,int,index,final,char,char,buffer,final,label,labels,int,current,offset,verification,type,info,offset,int,tag,b,current,offset,0x,ff,switch,tag,case,frame,frame,index,opcodes,top,break,case,frame,frame,index,opcodes,integer,break,case,frame,frame,index,opcodes,float,break,case,frame,frame,index,opcodes,double,break,case,frame,frame,index,opcodes,long,break,case,frame,frame,index,opcodes,null,break,case,frame,frame,index,opcodes,break,case,frame,frame,index,read,class,current,offset,char,buffer,current,offset,2,break,case,frame,frame,index,create,label,read,unsigned,short,current,offset,labels,current,offset,2,break,default,throw,new,illegal,argument,exception,return,current,offset
ClassReader -> private String readUtf(final int utfOffset, final int utfLength, final char[] charBuffer);1537204147;Reads an UTF8 string in {@link #b}.__@param utfOffset the start offset of the UTF8 string to be read._@param utfLength the length of the UTF8 string to be read._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUtf(final int utfOffset, final int utfLength, final char[] charBuffer) {_    int currentOffset = utfOffset__    int endOffset = currentOffset + utfLength__    int strLength = 0__    byte[] classFileBuffer = b__    while (currentOffset < endOffset) {_      int currentByte = classFileBuffer[currentOffset++]__      if ((currentByte & 0x80) == 0) {_        charBuffer[strLength++] = (char) (currentByte & 0x7F)__      } else if ((currentByte & 0xE0) == 0xC0) {_        charBuffer[strLength++] =_            (char) (((currentByte & 0x1F) << 6) + (classFileBuffer[currentOffset++] & 0x3F))__      } else {_        charBuffer[strLength++] =_            (char)_                (((currentByte & 0xF) << 12)_                    + ((classFileBuffer[currentOffset++] & 0x3F) << 6)_                    + (classFileBuffer[currentOffset++] & 0x3F))__      }_    }_    return new String(charBuffer, 0, strLength)__  };reads,an,utf8,string,in,link,b,param,utf,offset,the,start,offset,of,the,utf8,string,to,be,read,param,utf,length,the,length,of,the,utf8,string,to,be,read,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,final,int,utf,offset,final,int,utf,length,final,char,char,buffer,int,current,offset,utf,offset,int,end,offset,current,offset,utf,length,int,str,length,0,byte,class,file,buffer,b,while,current,offset,end,offset,int,current,byte,class,file,buffer,current,offset,if,current,byte,0x80,0,char,buffer,str,length,char,current,byte,0x7f,else,if,current,byte,0x,e0,0x,c0,char,buffer,str,length,char,current,byte,0x1f,6,class,file,buffer,current,offset,0x3f,else,char,buffer,str,length,char,current,byte,0x,f,12,class,file,buffer,current,offset,0x3f,6,class,file,buffer,current,offset,0x3f,return,new,string,char,buffer,0,str,length
ClassReader -> private String readUtf(final int utfOffset, final int utfLength, final char[] charBuffer);1539119582;Reads an UTF8 string in {@link #b}.__@param utfOffset the start offset of the UTF8 string to be read._@param utfLength the length of the UTF8 string to be read._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUtf(final int utfOffset, final int utfLength, final char[] charBuffer) {_    int currentOffset = utfOffset__    int endOffset = currentOffset + utfLength__    int strLength = 0__    byte[] classFileBuffer = b__    while (currentOffset < endOffset) {_      int currentByte = classFileBuffer[currentOffset++]__      if ((currentByte & 0x80) == 0) {_        charBuffer[strLength++] = (char) (currentByte & 0x7F)__      } else if ((currentByte & 0xE0) == 0xC0) {_        charBuffer[strLength++] =_            (char) (((currentByte & 0x1F) << 6) + (classFileBuffer[currentOffset++] & 0x3F))__      } else {_        charBuffer[strLength++] =_            (char)_                (((currentByte & 0xF) << 12)_                    + ((classFileBuffer[currentOffset++] & 0x3F) << 6)_                    + (classFileBuffer[currentOffset++] & 0x3F))__      }_    }_    return new String(charBuffer, 0, strLength)__  };reads,an,utf8,string,in,link,b,param,utf,offset,the,start,offset,of,the,utf8,string,to,be,read,param,utf,length,the,length,of,the,utf8,string,to,be,read,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,final,int,utf,offset,final,int,utf,length,final,char,char,buffer,int,current,offset,utf,offset,int,end,offset,current,offset,utf,length,int,str,length,0,byte,class,file,buffer,b,while,current,offset,end,offset,int,current,byte,class,file,buffer,current,offset,if,current,byte,0x80,0,char,buffer,str,length,char,current,byte,0x7f,else,if,current,byte,0x,e0,0x,c0,char,buffer,str,length,char,current,byte,0x1f,6,class,file,buffer,current,offset,0x3f,else,char,buffer,str,length,char,current,byte,0x,f,12,class,file,buffer,current,offset,0x3f,6,class,file,buffer,current,offset,0x3f,return,new,string,char,buffer,0,str,length
ClassReader -> private String readUtf(final int utfOffset, final int utfLength, final char[] charBuffer);1541436263;Reads an UTF8 string in {@link #b}.__@param utfOffset the start offset of the UTF8 string to be read._@param utfLength the length of the UTF8 string to be read._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUtf(final int utfOffset, final int utfLength, final char[] charBuffer) {_    int currentOffset = utfOffset__    int endOffset = currentOffset + utfLength__    int strLength = 0__    byte[] classFileBuffer = b__    while (currentOffset < endOffset) {_      int currentByte = classFileBuffer[currentOffset++]__      if ((currentByte & 0x80) == 0) {_        charBuffer[strLength++] = (char) (currentByte & 0x7F)__      } else if ((currentByte & 0xE0) == 0xC0) {_        charBuffer[strLength++] =_            (char) (((currentByte & 0x1F) << 6) + (classFileBuffer[currentOffset++] & 0x3F))__      } else {_        charBuffer[strLength++] =_            (char)_                (((currentByte & 0xF) << 12)_                    + ((classFileBuffer[currentOffset++] & 0x3F) << 6)_                    + (classFileBuffer[currentOffset++] & 0x3F))__      }_    }_    return new String(charBuffer, 0, strLength)__  };reads,an,utf8,string,in,link,b,param,utf,offset,the,start,offset,of,the,utf8,string,to,be,read,param,utf,length,the,length,of,the,utf8,string,to,be,read,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,final,int,utf,offset,final,int,utf,length,final,char,char,buffer,int,current,offset,utf,offset,int,end,offset,current,offset,utf,length,int,str,length,0,byte,class,file,buffer,b,while,current,offset,end,offset,int,current,byte,class,file,buffer,current,offset,if,current,byte,0x80,0,char,buffer,str,length,char,current,byte,0x7f,else,if,current,byte,0x,e0,0x,c0,char,buffer,str,length,char,current,byte,0x1f,6,class,file,buffer,current,offset,0x3f,else,char,buffer,str,length,char,current,byte,0x,f,12,class,file,buffer,current,offset,0x3f,6,class,file,buffer,current,offset,0x3f,return,new,string,char,buffer,0,str,length
ClassReader -> private static byte[] readStream(final InputStream inputStream, final boolean close)       throws IOException;1531241461;Reads the given input stream and returns its content as a byte array.__@param inputStream an input stream._@param close true to close the input stream after reading._@return the content of the given input stream._@throws IOException if a problem occurs during reading.;private static byte[] readStream(final InputStream inputStream, final boolean close)_      throws IOException {_    if (inputStream == null) {_      throw new IOException("Class not found")__    }_    try {_      ByteArrayOutputStream outputStream = new ByteArrayOutputStream()__      byte[] data = new byte[INPUT_STREAM_DATA_CHUNK_SIZE]__      int bytesRead__      while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) {_        outputStream.write(data, 0, bytesRead)__      }_      outputStream.flush()__      return outputStream.toByteArray()__    } finally {_      if (close) {_        inputStream.close()__      }_    }_  };reads,the,given,input,stream,and,returns,its,content,as,a,byte,array,param,input,stream,an,input,stream,param,close,true,to,close,the,input,stream,after,reading,return,the,content,of,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,stream,final,input,stream,input,stream,final,boolean,close,throws,ioexception,if,input,stream,null,throw,new,ioexception,class,not,found,try,byte,array,output,stream,output,stream,new,byte,array,output,stream,byte,data,new,byte,int,bytes,read,while,bytes,read,input,stream,read,data,0,data,length,1,output,stream,write,data,0,bytes,read,output,stream,flush,return,output,stream,to,byte,array,finally,if,close,input,stream,close
ClassReader -> private static byte[] readStream(final InputStream inputStream, final boolean close)       throws IOException;1536664245;Reads the given input stream and returns its content as a byte array.__@param inputStream an input stream._@param close true to close the input stream after reading._@return the content of the given input stream._@throws IOException if a problem occurs during reading.;private static byte[] readStream(final InputStream inputStream, final boolean close)_      throws IOException {_    if (inputStream == null) {_      throw new IOException("Class not found")__    }_    try {_      ByteArrayOutputStream outputStream = new ByteArrayOutputStream()__      byte[] data = new byte[INPUT_STREAM_DATA_CHUNK_SIZE]__      int bytesRead__      while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) {_        outputStream.write(data, 0, bytesRead)__      }_      outputStream.flush()__      return outputStream.toByteArray()__    } finally {_      if (close) {_        inputStream.close()__      }_    }_  };reads,the,given,input,stream,and,returns,its,content,as,a,byte,array,param,input,stream,an,input,stream,param,close,true,to,close,the,input,stream,after,reading,return,the,content,of,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,stream,final,input,stream,input,stream,final,boolean,close,throws,ioexception,if,input,stream,null,throw,new,ioexception,class,not,found,try,byte,array,output,stream,output,stream,new,byte,array,output,stream,byte,data,new,byte,int,bytes,read,while,bytes,read,input,stream,read,data,0,data,length,1,output,stream,write,data,0,bytes,read,output,stream,flush,return,output,stream,to,byte,array,finally,if,close,input,stream,close
ClassReader -> private static byte[] readStream(final InputStream inputStream, final boolean close)       throws IOException;1536747989;Reads the given input stream and returns its content as a byte array.__@param inputStream an input stream._@param close true to close the input stream after reading._@return the content of the given input stream._@throws IOException if a problem occurs during reading.;private static byte[] readStream(final InputStream inputStream, final boolean close)_      throws IOException {_    if (inputStream == null) {_      throw new IOException("Class not found")__    }_    try {_      ByteArrayOutputStream outputStream = new ByteArrayOutputStream()__      byte[] data = new byte[INPUT_STREAM_DATA_CHUNK_SIZE]__      int bytesRead__      while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) {_        outputStream.write(data, 0, bytesRead)__      }_      outputStream.flush()__      return outputStream.toByteArray()__    } finally {_      if (close) {_        inputStream.close()__      }_    }_  };reads,the,given,input,stream,and,returns,its,content,as,a,byte,array,param,input,stream,an,input,stream,param,close,true,to,close,the,input,stream,after,reading,return,the,content,of,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,stream,final,input,stream,input,stream,final,boolean,close,throws,ioexception,if,input,stream,null,throw,new,ioexception,class,not,found,try,byte,array,output,stream,output,stream,new,byte,array,output,stream,byte,data,new,byte,int,bytes,read,while,bytes,read,input,stream,read,data,0,data,length,1,output,stream,write,data,0,bytes,read,output,stream,flush,return,output,stream,to,byte,array,finally,if,close,input,stream,close
ClassReader -> private static byte[] readStream(final InputStream inputStream, final boolean close)       throws IOException;1537204147;Reads the given input stream and returns its content as a byte array.__@param inputStream an input stream._@param close true to close the input stream after reading._@return the content of the given input stream._@throws IOException if a problem occurs during reading.;private static byte[] readStream(final InputStream inputStream, final boolean close)_      throws IOException {_    if (inputStream == null) {_      throw new IOException("Class not found")__    }_    try {_      ByteArrayOutputStream outputStream = new ByteArrayOutputStream()__      byte[] data = new byte[INPUT_STREAM_DATA_CHUNK_SIZE]__      int bytesRead__      while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) {_        outputStream.write(data, 0, bytesRead)__      }_      outputStream.flush()__      return outputStream.toByteArray()__    } finally {_      if (close) {_        inputStream.close()__      }_    }_  };reads,the,given,input,stream,and,returns,its,content,as,a,byte,array,param,input,stream,an,input,stream,param,close,true,to,close,the,input,stream,after,reading,return,the,content,of,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,stream,final,input,stream,input,stream,final,boolean,close,throws,ioexception,if,input,stream,null,throw,new,ioexception,class,not,found,try,byte,array,output,stream,output,stream,new,byte,array,output,stream,byte,data,new,byte,int,bytes,read,while,bytes,read,input,stream,read,data,0,data,length,1,output,stream,write,data,0,bytes,read,output,stream,flush,return,output,stream,to,byte,array,finally,if,close,input,stream,close
ClassReader -> private static byte[] readStream(final InputStream inputStream, final boolean close)       throws IOException;1539119582;Reads the given input stream and returns its content as a byte array.__@param inputStream an input stream._@param close true to close the input stream after reading._@return the content of the given input stream._@throws IOException if a problem occurs during reading.;private static byte[] readStream(final InputStream inputStream, final boolean close)_      throws IOException {_    if (inputStream == null) {_      throw new IOException("Class not found")__    }_    try {_      ByteArrayOutputStream outputStream = new ByteArrayOutputStream()__      byte[] data = new byte[INPUT_STREAM_DATA_CHUNK_SIZE]__      int bytesRead__      while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) {_        outputStream.write(data, 0, bytesRead)__      }_      outputStream.flush()__      return outputStream.toByteArray()__    } finally {_      if (close) {_        inputStream.close()__      }_    }_  };reads,the,given,input,stream,and,returns,its,content,as,a,byte,array,param,input,stream,an,input,stream,param,close,true,to,close,the,input,stream,after,reading,return,the,content,of,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,stream,final,input,stream,input,stream,final,boolean,close,throws,ioexception,if,input,stream,null,throw,new,ioexception,class,not,found,try,byte,array,output,stream,output,stream,new,byte,array,output,stream,byte,data,new,byte,int,bytes,read,while,bytes,read,input,stream,read,data,0,data,length,1,output,stream,write,data,0,bytes,read,output,stream,flush,return,output,stream,to,byte,array,finally,if,close,input,stream,close
ClassReader -> private static byte[] readStream(final InputStream inputStream, final boolean close)       throws IOException;1541436263;Reads the given input stream and returns its content as a byte array.__@param inputStream an input stream._@param close true to close the input stream after reading._@return the content of the given input stream._@throws IOException if a problem occurs during reading.;private static byte[] readStream(final InputStream inputStream, final boolean close)_      throws IOException {_    if (inputStream == null) {_      throw new IOException("Class not found")__    }_    try {_      ByteArrayOutputStream outputStream = new ByteArrayOutputStream()__      byte[] data = new byte[INPUT_STREAM_DATA_CHUNK_SIZE]__      int bytesRead__      while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) {_        outputStream.write(data, 0, bytesRead)__      }_      outputStream.flush()__      return outputStream.toByteArray()__    } finally {_      if (close) {_        inputStream.close()__      }_    }_  };reads,the,given,input,stream,and,returns,its,content,as,a,byte,array,param,input,stream,an,input,stream,param,close,true,to,close,the,input,stream,after,reading,return,the,content,of,the,given,input,stream,throws,ioexception,if,a,problem,occurs,during,reading;private,static,byte,read,stream,final,input,stream,input,stream,final,boolean,close,throws,ioexception,if,input,stream,null,throw,new,ioexception,class,not,found,try,byte,array,output,stream,output,stream,new,byte,array,output,stream,byte,data,new,byte,int,bytes,read,while,bytes,read,input,stream,read,data,0,data,length,1,output,stream,write,data,0,bytes,read,output,stream,flush,return,output,stream,to,byte,array,finally,if,close,input,stream,close
ClassReader -> private void getImplicitFrame(final Context frame);1366718246;Computes the implicit frame of the method currently being parsed (as_defined in the given {@link Context}) and stores it in the given context.__@param frame_information about the class being parsed.;private void getImplicitFrame(final Context frame) {_        String desc = frame.desc__        Object[] locals = frame.local__        int local = 0__        if ((frame.access & Opcodes.ACC_STATIC) == 0) {_            if ("<init>".equals(frame.name)) {_                locals[local++] = Opcodes.UNINITIALIZED_THIS__            } else {_                locals[local++] = readClass(header + 2, frame.buffer)__            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (desc.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                locals[local++] = Opcodes.INTEGER__                break__            case 'F':_                locals[local++] = Opcodes.FLOAT__                break__            case 'J':_                locals[local++] = Opcodes.LONG__                break__            case 'D':_                locals[local++] = Opcodes.DOUBLE__                break__            case '[':_                while (desc.charAt(i) == '[') {_                    ++i__                }_                if (desc.charAt(i) == 'L') {_                    ++i__                    while (desc.charAt(i) != '_') {_                        ++i__                    }_                }_                locals[local++] = desc.substring(j, ++i)__                break__            case 'L':_                while (desc.charAt(i) != '_') {_                    ++i__                }_                locals[local++] = desc.substring(j + 1, i++)__                break__            default:_                break loop__            }_        }_        frame.localCount = local__    };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,frame,information,about,the,class,being,parsed;private,void,get,implicit,frame,final,context,frame,string,desc,frame,desc,object,locals,frame,local,int,local,0,if,frame,access,opcodes,0,if,init,equals,frame,name,locals,local,opcodes,else,locals,local,read,class,header,2,frame,buffer,int,i,1,loop,while,true,int,j,i,switch,desc,char,at,i,case,z,case,c,case,b,case,s,case,i,locals,local,opcodes,integer,break,case,f,locals,local,opcodes,float,break,case,j,locals,local,opcodes,long,break,case,d,locals,local,opcodes,double,break,case,while,desc,char,at,i,i,if,desc,char,at,i,l,i,while,desc,char,at,i,i,locals,local,desc,substring,j,i,break,case,l,while,desc,char,at,i,i,locals,local,desc,substring,j,1,i,break,default,break,loop,frame,local,count,local
ClassReader -> private void getImplicitFrame(final Context frame);1395273982;Computes the implicit frame of the method currently being parsed (as_defined in the given {@link Context}) and stores it in the given context.__@param frame_information about the class being parsed.;private void getImplicitFrame(final Context frame) {_        String desc = frame.desc__        Object[] locals = frame.local__        int local = 0__        if ((frame.access & Opcodes.ACC_STATIC) == 0) {_            if ("<init>".equals(frame.name)) {_                locals[local++] = Opcodes.UNINITIALIZED_THIS__            } else {_                locals[local++] = readClass(header + 2, frame.buffer)__            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (desc.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                locals[local++] = Opcodes.INTEGER__                break__            case 'F':_                locals[local++] = Opcodes.FLOAT__                break__            case 'J':_                locals[local++] = Opcodes.LONG__                break__            case 'D':_                locals[local++] = Opcodes.DOUBLE__                break__            case '[':_                while (desc.charAt(i) == '[') {_                    ++i__                }_                if (desc.charAt(i) == 'L') {_                    ++i__                    while (desc.charAt(i) != '_') {_                        ++i__                    }_                }_                locals[local++] = desc.substring(j, ++i)__                break__            case 'L':_                while (desc.charAt(i) != '_') {_                    ++i__                }_                locals[local++] = desc.substring(j + 1, i++)__                break__            default:_                break loop__            }_        }_        frame.localCount = local__    };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,frame,information,about,the,class,being,parsed;private,void,get,implicit,frame,final,context,frame,string,desc,frame,desc,object,locals,frame,local,int,local,0,if,frame,access,opcodes,0,if,init,equals,frame,name,locals,local,opcodes,else,locals,local,read,class,header,2,frame,buffer,int,i,1,loop,while,true,int,j,i,switch,desc,char,at,i,case,z,case,c,case,b,case,s,case,i,locals,local,opcodes,integer,break,case,f,locals,local,opcodes,float,break,case,j,locals,local,opcodes,long,break,case,d,locals,local,opcodes,double,break,case,while,desc,char,at,i,i,if,desc,char,at,i,l,i,while,desc,char,at,i,i,locals,local,desc,substring,j,i,break,case,l,while,desc,char,at,i,i,locals,local,desc,substring,j,1,i,break,default,break,loop,frame,local,count,local
ClassReader -> private void getImplicitFrame(final Context frame);1414067099;Computes the implicit frame of the method currently being parsed (as_defined in the given {@link Context}) and stores it in the given context.__@param frame_information about the class being parsed.;private void getImplicitFrame(final Context frame) {_        String desc = frame.desc__        Object[] locals = frame.local__        int local = 0__        if ((frame.access & Opcodes.ACC_STATIC) == 0) {_            if ("<init>".equals(frame.name)) {_                locals[local++] = Opcodes.UNINITIALIZED_THIS__            } else {_                locals[local++] = readClass(header + 2, frame.buffer)__            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (desc.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                locals[local++] = Opcodes.INTEGER__                break__            case 'F':_                locals[local++] = Opcodes.FLOAT__                break__            case 'J':_                locals[local++] = Opcodes.LONG__                break__            case 'D':_                locals[local++] = Opcodes.DOUBLE__                break__            case '[':_                while (desc.charAt(i) == '[') {_                    ++i__                }_                if (desc.charAt(i) == 'L') {_                    ++i__                    while (desc.charAt(i) != '_') {_                        ++i__                    }_                }_                locals[local++] = desc.substring(j, ++i)__                break__            case 'L':_                while (desc.charAt(i) != '_') {_                    ++i__                }_                locals[local++] = desc.substring(j + 1, i++)__                break__            default:_                break loop__            }_        }_        frame.localCount = local__    };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,frame,information,about,the,class,being,parsed;private,void,get,implicit,frame,final,context,frame,string,desc,frame,desc,object,locals,frame,local,int,local,0,if,frame,access,opcodes,0,if,init,equals,frame,name,locals,local,opcodes,else,locals,local,read,class,header,2,frame,buffer,int,i,1,loop,while,true,int,j,i,switch,desc,char,at,i,case,z,case,c,case,b,case,s,case,i,locals,local,opcodes,integer,break,case,f,locals,local,opcodes,float,break,case,j,locals,local,opcodes,long,break,case,d,locals,local,opcodes,double,break,case,while,desc,char,at,i,i,if,desc,char,at,i,l,i,while,desc,char,at,i,i,locals,local,desc,substring,j,i,break,case,l,while,desc,char,at,i,i,locals,local,desc,substring,j,1,i,break,default,break,loop,frame,local,count,local
ClassReader -> private void getImplicitFrame(final Context frame);1414499035;Computes the implicit frame of the method currently being parsed (as_defined in the given {@link Context}) and stores it in the given context.__@param frame_information about the class being parsed.;private void getImplicitFrame(final Context frame) {_        String desc = frame.desc__        Object[] locals = frame.local__        int local = 0__        if ((frame.access & Opcodes.ACC_STATIC) == 0) {_            if ("<init>".equals(frame.name)) {_                locals[local++] = Opcodes.UNINITIALIZED_THIS__            } else {_                locals[local++] = readClass(header + 2, frame.buffer)__            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (desc.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                locals[local++] = Opcodes.INTEGER__                break__            case 'F':_                locals[local++] = Opcodes.FLOAT__                break__            case 'J':_                locals[local++] = Opcodes.LONG__                break__            case 'D':_                locals[local++] = Opcodes.DOUBLE__                break__            case '[':_                while (desc.charAt(i) == '[') {_                    ++i__                }_                if (desc.charAt(i) == 'L') {_                    ++i__                    while (desc.charAt(i) != '_') {_                        ++i__                    }_                }_                locals[local++] = desc.substring(j, ++i)__                break__            case 'L':_                while (desc.charAt(i) != '_') {_                    ++i__                }_                locals[local++] = desc.substring(j + 1, i++)__                break__            default:_                break loop__            }_        }_        frame.localCount = local__    };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,frame,information,about,the,class,being,parsed;private,void,get,implicit,frame,final,context,frame,string,desc,frame,desc,object,locals,frame,local,int,local,0,if,frame,access,opcodes,0,if,init,equals,frame,name,locals,local,opcodes,else,locals,local,read,class,header,2,frame,buffer,int,i,1,loop,while,true,int,j,i,switch,desc,char,at,i,case,z,case,c,case,b,case,s,case,i,locals,local,opcodes,integer,break,case,f,locals,local,opcodes,float,break,case,j,locals,local,opcodes,long,break,case,d,locals,local,opcodes,double,break,case,while,desc,char,at,i,i,if,desc,char,at,i,l,i,while,desc,char,at,i,i,locals,local,desc,substring,j,i,break,case,l,while,desc,char,at,i,i,locals,local,desc,substring,j,1,i,break,default,break,loop,frame,local,count,local
ClassReader -> private void getImplicitFrame(final Context frame);1416998550;Computes the implicit frame of the method currently being parsed (as_defined in the given {@link Context}) and stores it in the given context.__@param frame_information about the class being parsed.;private void getImplicitFrame(final Context frame) {_        String desc = frame.desc__        Object[] locals = frame.local__        int local = 0__        if ((frame.access & Opcodes.ACC_STATIC) == 0) {_            if ("<init>".equals(frame.name)) {_                locals[local++] = Opcodes.UNINITIALIZED_THIS__            } else {_                locals[local++] = readClass(header + 2, frame.buffer)__            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (desc.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                locals[local++] = Opcodes.INTEGER__                break__            case 'F':_                locals[local++] = Opcodes.FLOAT__                break__            case 'J':_                locals[local++] = Opcodes.LONG__                break__            case 'D':_                locals[local++] = Opcodes.DOUBLE__                break__            case '[':_                while (desc.charAt(i) == '[') {_                    ++i__                }_                if (desc.charAt(i) == 'L') {_                    ++i__                    while (desc.charAt(i) != '_') {_                        ++i__                    }_                }_                locals[local++] = desc.substring(j, ++i)__                break__            case 'L':_                while (desc.charAt(i) != '_') {_                    ++i__                }_                locals[local++] = desc.substring(j + 1, i++)__                break__            default:_                break loop__            }_        }_        frame.localCount = local__    };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,frame,information,about,the,class,being,parsed;private,void,get,implicit,frame,final,context,frame,string,desc,frame,desc,object,locals,frame,local,int,local,0,if,frame,access,opcodes,0,if,init,equals,frame,name,locals,local,opcodes,else,locals,local,read,class,header,2,frame,buffer,int,i,1,loop,while,true,int,j,i,switch,desc,char,at,i,case,z,case,c,case,b,case,s,case,i,locals,local,opcodes,integer,break,case,f,locals,local,opcodes,float,break,case,j,locals,local,opcodes,long,break,case,d,locals,local,opcodes,double,break,case,while,desc,char,at,i,i,if,desc,char,at,i,l,i,while,desc,char,at,i,i,locals,local,desc,substring,j,i,break,case,l,while,desc,char,at,i,i,locals,local,desc,substring,j,1,i,break,default,break,loop,frame,local,count,local
ClassReader -> private void getImplicitFrame(final Context frame);1457705343;Computes the implicit frame of the method currently being parsed (as_defined in the given {@link Context}) and stores it in the given context.__@param frame_information about the class being parsed.;private void getImplicitFrame(final Context frame) {_        String desc = frame.desc__        Object[] locals = frame.local__        int local = 0__        if ((frame.access & Opcodes.ACC_STATIC) == 0) {_            if ("<init>".equals(frame.name)) {_                locals[local++] = Opcodes.UNINITIALIZED_THIS__            } else {_                locals[local++] = readClass(header + 2, frame.buffer)__            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (desc.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                locals[local++] = Opcodes.INTEGER__                break__            case 'F':_                locals[local++] = Opcodes.FLOAT__                break__            case 'J':_                locals[local++] = Opcodes.LONG__                break__            case 'D':_                locals[local++] = Opcodes.DOUBLE__                break__            case '[':_                while (desc.charAt(i) == '[') {_                    ++i__                }_                if (desc.charAt(i) == 'L') {_                    ++i__                    while (desc.charAt(i) != '_') {_                        ++i__                    }_                }_                locals[local++] = desc.substring(j, ++i)__                break__            case 'L':_                while (desc.charAt(i) != '_') {_                    ++i__                }_                locals[local++] = desc.substring(j + 1, i++)__                break__            default:_                break loop__            }_        }_        frame.localCount = local__    };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,frame,information,about,the,class,being,parsed;private,void,get,implicit,frame,final,context,frame,string,desc,frame,desc,object,locals,frame,local,int,local,0,if,frame,access,opcodes,0,if,init,equals,frame,name,locals,local,opcodes,else,locals,local,read,class,header,2,frame,buffer,int,i,1,loop,while,true,int,j,i,switch,desc,char,at,i,case,z,case,c,case,b,case,s,case,i,locals,local,opcodes,integer,break,case,f,locals,local,opcodes,float,break,case,j,locals,local,opcodes,long,break,case,d,locals,local,opcodes,double,break,case,while,desc,char,at,i,i,if,desc,char,at,i,l,i,while,desc,char,at,i,i,locals,local,desc,substring,j,i,break,case,l,while,desc,char,at,i,i,locals,local,desc,substring,j,1,i,break,default,break,loop,frame,local,count,local
ClassReader -> private void getImplicitFrame(final Context frame);1459258703;Computes the implicit frame of the method currently being parsed (as_defined in the given {@link Context}) and stores it in the given context.__@param frame_information about the class being parsed.;private void getImplicitFrame(final Context frame) {_        String desc = frame.desc__        Object[] locals = frame.local__        int local = 0__        if ((frame.access & Opcodes.ACC_STATIC) == 0) {_            if ("<init>".equals(frame.name)) {_                locals[local++] = Opcodes.UNINITIALIZED_THIS__            } else {_                locals[local++] = readClass(header + 2, frame.buffer)__            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (desc.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                locals[local++] = Opcodes.INTEGER__                break__            case 'F':_                locals[local++] = Opcodes.FLOAT__                break__            case 'J':_                locals[local++] = Opcodes.LONG__                break__            case 'D':_                locals[local++] = Opcodes.DOUBLE__                break__            case '[':_                while (desc.charAt(i) == '[') {_                    ++i__                }_                if (desc.charAt(i) == 'L') {_                    ++i__                    while (desc.charAt(i) != '_') {_                        ++i__                    }_                }_                locals[local++] = desc.substring(j, ++i)__                break__            case 'L':_                while (desc.charAt(i) != '_') {_                    ++i__                }_                locals[local++] = desc.substring(j + 1, i++)__                break__            default:_                break loop__            }_        }_        frame.localCount = local__    };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,frame,information,about,the,class,being,parsed;private,void,get,implicit,frame,final,context,frame,string,desc,frame,desc,object,locals,frame,local,int,local,0,if,frame,access,opcodes,0,if,init,equals,frame,name,locals,local,opcodes,else,locals,local,read,class,header,2,frame,buffer,int,i,1,loop,while,true,int,j,i,switch,desc,char,at,i,case,z,case,c,case,b,case,s,case,i,locals,local,opcodes,integer,break,case,f,locals,local,opcodes,float,break,case,j,locals,local,opcodes,long,break,case,d,locals,local,opcodes,double,break,case,while,desc,char,at,i,i,if,desc,char,at,i,l,i,while,desc,char,at,i,i,locals,local,desc,substring,j,i,break,case,l,while,desc,char,at,i,i,locals,local,desc,substring,j,1,i,break,default,break,loop,frame,local,count,local
ClassReader -> private void getImplicitFrame(final Context frame);1478623137;Computes the implicit frame of the method currently being parsed (as_defined in the given {@link Context}) and stores it in the given context.__@param frame_information about the class being parsed.;private void getImplicitFrame(final Context frame) {_        String desc = frame.desc__        Object[] locals = frame.local__        int local = 0__        if ((frame.access & Opcodes.ACC_STATIC) == 0) {_            if ("<init>".equals(frame.name)) {_                locals[local++] = Opcodes.UNINITIALIZED_THIS__            } else {_                locals[local++] = readClass(header + 2, frame.buffer)__            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (desc.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                locals[local++] = Opcodes.INTEGER__                break__            case 'F':_                locals[local++] = Opcodes.FLOAT__                break__            case 'J':_                locals[local++] = Opcodes.LONG__                break__            case 'D':_                locals[local++] = Opcodes.DOUBLE__                break__            case '[':_                while (desc.charAt(i) == '[') {_                    ++i__                }_                if (desc.charAt(i) == 'L') {_                    ++i__                    while (desc.charAt(i) != '_') {_                        ++i__                    }_                }_                locals[local++] = desc.substring(j, ++i)__                break__            case 'L':_                while (desc.charAt(i) != '_') {_                    ++i__                }_                locals[local++] = desc.substring(j + 1, i++)__                break__            default:_                break loop__            }_        }_        frame.localCount = local__    };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,frame,information,about,the,class,being,parsed;private,void,get,implicit,frame,final,context,frame,string,desc,frame,desc,object,locals,frame,local,int,local,0,if,frame,access,opcodes,0,if,init,equals,frame,name,locals,local,opcodes,else,locals,local,read,class,header,2,frame,buffer,int,i,1,loop,while,true,int,j,i,switch,desc,char,at,i,case,z,case,c,case,b,case,s,case,i,locals,local,opcodes,integer,break,case,f,locals,local,opcodes,float,break,case,j,locals,local,opcodes,long,break,case,d,locals,local,opcodes,double,break,case,while,desc,char,at,i,i,if,desc,char,at,i,l,i,while,desc,char,at,i,i,locals,local,desc,substring,j,i,break,case,l,while,desc,char,at,i,i,locals,local,desc,substring,j,1,i,break,default,break,loop,frame,local,count,local
ClassReader -> private void getImplicitFrame(final Context frame);1483093254;Computes the implicit frame of the method currently being parsed (as_defined in the given {@link Context}) and stores it in the given context.__@param frame_information about the class being parsed.;private void getImplicitFrame(final Context frame) {_        String desc = frame.desc__        Object[] locals = frame.local__        int local = 0__        if ((frame.access & Opcodes.ACC_STATIC) == 0) {_            if ("<init>".equals(frame.name)) {_                locals[local++] = Opcodes.UNINITIALIZED_THIS__            } else {_                locals[local++] = readClass(header + 2, frame.buffer)__            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (desc.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                locals[local++] = Opcodes.INTEGER__                break__            case 'F':_                locals[local++] = Opcodes.FLOAT__                break__            case 'J':_                locals[local++] = Opcodes.LONG__                break__            case 'D':_                locals[local++] = Opcodes.DOUBLE__                break__            case '[':_                while (desc.charAt(i) == '[') {_                    ++i__                }_                if (desc.charAt(i) == 'L') {_                    ++i__                    while (desc.charAt(i) != '_') {_                        ++i__                    }_                }_                locals[local++] = desc.substring(j, ++i)__                break__            case 'L':_                while (desc.charAt(i) != '_') {_                    ++i__                }_                locals[local++] = desc.substring(j + 1, i++)__                break__            default:_                break loop__            }_        }_        frame.localCount = local__    };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,frame,information,about,the,class,being,parsed;private,void,get,implicit,frame,final,context,frame,string,desc,frame,desc,object,locals,frame,local,int,local,0,if,frame,access,opcodes,0,if,init,equals,frame,name,locals,local,opcodes,else,locals,local,read,class,header,2,frame,buffer,int,i,1,loop,while,true,int,j,i,switch,desc,char,at,i,case,z,case,c,case,b,case,s,case,i,locals,local,opcodes,integer,break,case,f,locals,local,opcodes,float,break,case,j,locals,local,opcodes,long,break,case,d,locals,local,opcodes,double,break,case,while,desc,char,at,i,i,if,desc,char,at,i,l,i,while,desc,char,at,i,i,locals,local,desc,substring,j,i,break,case,l,while,desc,char,at,i,i,locals,local,desc,substring,j,1,i,break,default,break,loop,frame,local,count,local
ClassReader -> private void getImplicitFrame(final Context frame);1505821772;Computes the implicit frame of the method currently being parsed (as_defined in the given {@link Context}) and stores it in the given context.__@param frame_information about the class being parsed.;private void getImplicitFrame(final Context frame) {_        String desc = frame.desc__        Object[] locals = frame.local__        int local = 0__        if ((frame.access & Opcodes.ACC_STATIC) == 0) {_            if ("<init>".equals(frame.name)) {_                locals[local++] = Opcodes.UNINITIALIZED_THIS__            } else {_                locals[local++] = readClass(header + 2, frame.buffer)__            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (desc.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                locals[local++] = Opcodes.INTEGER__                break__            case 'F':_                locals[local++] = Opcodes.FLOAT__                break__            case 'J':_                locals[local++] = Opcodes.LONG__                break__            case 'D':_                locals[local++] = Opcodes.DOUBLE__                break__            case '[':_                while (desc.charAt(i) == '[') {_                    ++i__                }_                if (desc.charAt(i) == 'L') {_                    ++i__                    while (desc.charAt(i) != '_') {_                        ++i__                    }_                }_                locals[local++] = desc.substring(j, ++i)__                break__            case 'L':_                while (desc.charAt(i) != '_') {_                    ++i__                }_                locals[local++] = desc.substring(j + 1, i++)__                break__            default:_                break loop__            }_        }_        frame.localCount = local__    };computes,the,implicit,frame,of,the,method,currently,being,parsed,as,defined,in,the,given,link,context,and,stores,it,in,the,given,context,param,frame,information,about,the,class,being,parsed;private,void,get,implicit,frame,final,context,frame,string,desc,frame,desc,object,locals,frame,local,int,local,0,if,frame,access,opcodes,0,if,init,equals,frame,name,locals,local,opcodes,else,locals,local,read,class,header,2,frame,buffer,int,i,1,loop,while,true,int,j,i,switch,desc,char,at,i,case,z,case,c,case,b,case,s,case,i,locals,local,opcodes,integer,break,case,f,locals,local,opcodes,float,break,case,j,locals,local,opcodes,long,break,case,d,locals,local,opcodes,double,break,case,while,desc,char,at,i,i,if,desc,char,at,i,l,i,while,desc,char,at,i,i,locals,local,desc,substring,j,i,break,case,l,while,desc,char,at,i,i,locals,local,desc,substring,j,1,i,break,default,break,loop,frame,local,count,local
ClassReader -> void copyPool(final ClassWriter classWriter);1366718246;Copies the constant pool data into the given {@link ClassWriter}. Should_be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy constant pool into.;void copyPool(final ClassWriter classWriter) {_        char[] buf = new char[maxStringLength]__        int ll = items.length__        Item[] items2 = new Item[ll]__        for (int i = 1_ i < ll_ i++) {_            int index = items[i]__            int tag = b[index - 1]__            Item item = new Item(i)__            int nameType__            switch (tag) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_                nameType = items[readUnsignedShort(index + 2)]__                item.set(tag, readClass(index, buf), readUTF8(nameType, buf),_                        readUTF8(nameType + 2, buf))__                break__            case ClassWriter.INT:_                item.set(readInt(index))__                break__            case ClassWriter.FLOAT:_                item.set(Float.intBitsToFloat(readInt(index)))__                break__            case ClassWriter.NAME_TYPE:_                item.set(tag, readUTF8(index, buf), readUTF8(index + 2, buf),_                        null)__                break__            case ClassWriter.LONG:_                item.set(readLong(index))__                ++i__                break__            case ClassWriter.DOUBLE:_                item.set(Double.longBitsToDouble(readLong(index)))__                ++i__                break__            case ClassWriter.UTF8: {_                String s = strings[i]__                if (s == null) {_                    index = items[i]__                    s = strings[i] = readUTF(index + 2,_                            readUnsignedShort(index), buf)__                }_                item.set(tag, s, null, null)__                break__            }_            case ClassWriter.HANDLE: {_                int fieldOrMethodRef = items[readUnsignedShort(index + 1)]__                nameType = items[readUnsignedShort(fieldOrMethodRef + 2)]__                item.set(ClassWriter.HANDLE_BASE + readByte(index),_                        readClass(fieldOrMethodRef, buf),_                        readUTF8(nameType, buf), readUTF8(nameType + 2, buf))__                break__            }_            case ClassWriter.INDY:_                if (classWriter.bootstrapMethods == null) {_                    copyBootstrapMethods(classWriter, items2, buf)__                }_                nameType = items[readUnsignedShort(index + 2)]__                item.set(readUTF8(nameType, buf), readUTF8(nameType + 2, buf),_                        readUnsignedShort(index))__                break__            _            _            _            default:_                item.set(tag, readUTF8(index, buf), null, null)__                break__            }__            int index2 = item.hashCode % items2.length__            item.next = items2[index2]__            items2[index2] = item__        }__        int off = items[1] - 1__        classWriter.pool.putByteArray(b, off, header - off)__        classWriter.items = items2__        classWriter.threshold = (int) (0.75d * ll)__        classWriter.index = ll__    };copies,the,constant,pool,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,constant,pool,into;void,copy,pool,final,class,writer,class,writer,char,buf,new,char,max,string,length,int,ll,items,length,item,items2,new,item,ll,for,int,i,1,i,ll,i,int,index,items,i,int,tag,b,index,1,item,item,new,item,i,int,name,type,switch,tag,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,name,type,items,read,unsigned,short,index,2,item,set,tag,read,class,index,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,int,item,set,read,int,index,break,case,class,writer,float,item,set,float,int,bits,to,float,read,int,index,break,case,class,writer,item,set,tag,read,utf8,index,buf,read,utf8,index,2,buf,null,break,case,class,writer,long,item,set,read,long,index,i,break,case,class,writer,double,item,set,double,long,bits,to,double,read,long,index,i,break,case,class,writer,utf8,string,s,strings,i,if,s,null,index,items,i,s,strings,i,read,utf,index,2,read,unsigned,short,index,buf,item,set,tag,s,null,null,break,case,class,writer,handle,int,field,or,method,ref,items,read,unsigned,short,index,1,name,type,items,read,unsigned,short,field,or,method,ref,2,item,set,class,writer,read,byte,index,read,class,field,or,method,ref,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,indy,if,class,writer,bootstrap,methods,null,copy,bootstrap,methods,class,writer,items2,buf,name,type,items,read,unsigned,short,index,2,item,set,read,utf8,name,type,buf,read,utf8,name,type,2,buf,read,unsigned,short,index,break,default,item,set,tag,read,utf8,index,buf,null,null,break,int,index2,item,hash,code,items2,length,item,next,items2,index2,items2,index2,item,int,off,items,1,1,class,writer,pool,put,byte,array,b,off,header,off,class,writer,items,items2,class,writer,threshold,int,0,75d,ll,class,writer,index,ll
ClassReader -> void copyPool(final ClassWriter classWriter);1395273982;Copies the constant pool data into the given {@link ClassWriter}. Should_be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy constant pool into.;void copyPool(final ClassWriter classWriter) {_        char[] buf = new char[maxStringLength]__        int ll = items.length__        Item[] items2 = new Item[ll]__        for (int i = 1_ i < ll_ i++) {_            int index = items[i]__            int tag = b[index - 1]__            Item item = new Item(i)__            int nameType__            switch (tag) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_                nameType = items[readUnsignedShort(index + 2)]__                item.set(tag, readClass(index, buf), readUTF8(nameType, buf),_                        readUTF8(nameType + 2, buf))__                break__            case ClassWriter.INT:_                item.set(readInt(index))__                break__            case ClassWriter.FLOAT:_                item.set(Float.intBitsToFloat(readInt(index)))__                break__            case ClassWriter.NAME_TYPE:_                item.set(tag, readUTF8(index, buf), readUTF8(index + 2, buf),_                        null)__                break__            case ClassWriter.LONG:_                item.set(readLong(index))__                ++i__                break__            case ClassWriter.DOUBLE:_                item.set(Double.longBitsToDouble(readLong(index)))__                ++i__                break__            case ClassWriter.UTF8: {_                String s = strings[i]__                if (s == null) {_                    index = items[i]__                    s = strings[i] = readUTF(index + 2,_                            readUnsignedShort(index), buf)__                }_                item.set(tag, s, null, null)__                break__            }_            case ClassWriter.HANDLE: {_                int fieldOrMethodRef = items[readUnsignedShort(index + 1)]__                nameType = items[readUnsignedShort(fieldOrMethodRef + 2)]__                item.set(ClassWriter.HANDLE_BASE + readByte(index),_                        readClass(fieldOrMethodRef, buf),_                        readUTF8(nameType, buf), readUTF8(nameType + 2, buf))__                break__            }_            case ClassWriter.INDY:_                if (classWriter.bootstrapMethods == null) {_                    copyBootstrapMethods(classWriter, items2, buf)__                }_                nameType = items[readUnsignedShort(index + 2)]__                item.set(readUTF8(nameType, buf), readUTF8(nameType + 2, buf),_                        readUnsignedShort(index))__                break__            _            _            _            default:_                item.set(tag, readUTF8(index, buf), null, null)__                break__            }__            int index2 = item.hashCode % items2.length__            item.next = items2[index2]__            items2[index2] = item__        }__        int off = items[1] - 1__        classWriter.pool.putByteArray(b, off, header - off)__        classWriter.items = items2__        classWriter.threshold = (int) (0.75d * ll)__        classWriter.index = ll__    };copies,the,constant,pool,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,constant,pool,into;void,copy,pool,final,class,writer,class,writer,char,buf,new,char,max,string,length,int,ll,items,length,item,items2,new,item,ll,for,int,i,1,i,ll,i,int,index,items,i,int,tag,b,index,1,item,item,new,item,i,int,name,type,switch,tag,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,name,type,items,read,unsigned,short,index,2,item,set,tag,read,class,index,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,int,item,set,read,int,index,break,case,class,writer,float,item,set,float,int,bits,to,float,read,int,index,break,case,class,writer,item,set,tag,read,utf8,index,buf,read,utf8,index,2,buf,null,break,case,class,writer,long,item,set,read,long,index,i,break,case,class,writer,double,item,set,double,long,bits,to,double,read,long,index,i,break,case,class,writer,utf8,string,s,strings,i,if,s,null,index,items,i,s,strings,i,read,utf,index,2,read,unsigned,short,index,buf,item,set,tag,s,null,null,break,case,class,writer,handle,int,field,or,method,ref,items,read,unsigned,short,index,1,name,type,items,read,unsigned,short,field,or,method,ref,2,item,set,class,writer,read,byte,index,read,class,field,or,method,ref,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,indy,if,class,writer,bootstrap,methods,null,copy,bootstrap,methods,class,writer,items2,buf,name,type,items,read,unsigned,short,index,2,item,set,read,utf8,name,type,buf,read,utf8,name,type,2,buf,read,unsigned,short,index,break,default,item,set,tag,read,utf8,index,buf,null,null,break,int,index2,item,hash,code,items2,length,item,next,items2,index2,items2,index2,item,int,off,items,1,1,class,writer,pool,put,byte,array,b,off,header,off,class,writer,items,items2,class,writer,threshold,int,0,75d,ll,class,writer,index,ll
ClassReader -> void copyPool(final ClassWriter classWriter);1414067099;Copies the constant pool data into the given {@link ClassWriter}. Should_be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy constant pool into.;void copyPool(final ClassWriter classWriter) {_        char[] buf = new char[maxStringLength]__        int ll = items.length__        Item[] items2 = new Item[ll]__        for (int i = 1_ i < ll_ i++) {_            int index = items[i]__            int tag = b[index - 1]__            Item item = new Item(i)__            int nameType__            switch (tag) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_                nameType = items[readUnsignedShort(index + 2)]__                item.set(tag, readClass(index, buf), readUTF8(nameType, buf),_                        readUTF8(nameType + 2, buf))__                break__            case ClassWriter.INT:_                item.set(readInt(index))__                break__            case ClassWriter.FLOAT:_                item.set(Float.intBitsToFloat(readInt(index)))__                break__            case ClassWriter.NAME_TYPE:_                item.set(tag, readUTF8(index, buf), readUTF8(index + 2, buf),_                        null)__                break__            case ClassWriter.LONG:_                item.set(readLong(index))__                ++i__                break__            case ClassWriter.DOUBLE:_                item.set(Double.longBitsToDouble(readLong(index)))__                ++i__                break__            case ClassWriter.UTF8: {_                String s = strings[i]__                if (s == null) {_                    index = items[i]__                    s = strings[i] = readUTF(index + 2,_                            readUnsignedShort(index), buf)__                }_                item.set(tag, s, null, null)__                break__            }_            case ClassWriter.HANDLE: {_                int fieldOrMethodRef = items[readUnsignedShort(index + 1)]__                nameType = items[readUnsignedShort(fieldOrMethodRef + 2)]__                item.set(ClassWriter.HANDLE_BASE + readByte(index),_                        readClass(fieldOrMethodRef, buf),_                        readUTF8(nameType, buf), readUTF8(nameType + 2, buf))__                break__            }_            case ClassWriter.INDY:_                if (classWriter.bootstrapMethods == null) {_                    copyBootstrapMethods(classWriter, items2, buf)__                }_                nameType = items[readUnsignedShort(index + 2)]__                item.set(readUTF8(nameType, buf), readUTF8(nameType + 2, buf),_                        readUnsignedShort(index))__                break__            _            _            _            default:_                item.set(tag, readUTF8(index, buf), null, null)__                break__            }__            int index2 = item.hashCode % items2.length__            item.next = items2[index2]__            items2[index2] = item__        }__        int off = items[1] - 1__        classWriter.pool.putByteArray(b, off, header - off)__        classWriter.items = items2__        classWriter.threshold = (int) (0.75d * ll)__        classWriter.index = ll__    };copies,the,constant,pool,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,constant,pool,into;void,copy,pool,final,class,writer,class,writer,char,buf,new,char,max,string,length,int,ll,items,length,item,items2,new,item,ll,for,int,i,1,i,ll,i,int,index,items,i,int,tag,b,index,1,item,item,new,item,i,int,name,type,switch,tag,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,name,type,items,read,unsigned,short,index,2,item,set,tag,read,class,index,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,int,item,set,read,int,index,break,case,class,writer,float,item,set,float,int,bits,to,float,read,int,index,break,case,class,writer,item,set,tag,read,utf8,index,buf,read,utf8,index,2,buf,null,break,case,class,writer,long,item,set,read,long,index,i,break,case,class,writer,double,item,set,double,long,bits,to,double,read,long,index,i,break,case,class,writer,utf8,string,s,strings,i,if,s,null,index,items,i,s,strings,i,read,utf,index,2,read,unsigned,short,index,buf,item,set,tag,s,null,null,break,case,class,writer,handle,int,field,or,method,ref,items,read,unsigned,short,index,1,name,type,items,read,unsigned,short,field,or,method,ref,2,item,set,class,writer,read,byte,index,read,class,field,or,method,ref,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,indy,if,class,writer,bootstrap,methods,null,copy,bootstrap,methods,class,writer,items2,buf,name,type,items,read,unsigned,short,index,2,item,set,read,utf8,name,type,buf,read,utf8,name,type,2,buf,read,unsigned,short,index,break,default,item,set,tag,read,utf8,index,buf,null,null,break,int,index2,item,hash,code,items2,length,item,next,items2,index2,items2,index2,item,int,off,items,1,1,class,writer,pool,put,byte,array,b,off,header,off,class,writer,items,items2,class,writer,threshold,int,0,75d,ll,class,writer,index,ll
ClassReader -> void copyPool(final ClassWriter classWriter);1414499035;Copies the constant pool data into the given {@link ClassWriter}. Should_be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy constant pool into.;void copyPool(final ClassWriter classWriter) {_        char[] buf = new char[maxStringLength]__        int ll = items.length__        Item[] items2 = new Item[ll]__        for (int i = 1_ i < ll_ i++) {_            int index = items[i]__            int tag = b[index - 1]__            Item item = new Item(i)__            int nameType__            switch (tag) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_                nameType = items[readUnsignedShort(index + 2)]__                item.set(tag, readClass(index, buf), readUTF8(nameType, buf),_                        readUTF8(nameType + 2, buf))__                break__            case ClassWriter.INT:_                item.set(readInt(index))__                break__            case ClassWriter.FLOAT:_                item.set(Float.intBitsToFloat(readInt(index)))__                break__            case ClassWriter.NAME_TYPE:_                item.set(tag, readUTF8(index, buf), readUTF8(index + 2, buf),_                        null)__                break__            case ClassWriter.LONG:_                item.set(readLong(index))__                ++i__                break__            case ClassWriter.DOUBLE:_                item.set(Double.longBitsToDouble(readLong(index)))__                ++i__                break__            case ClassWriter.UTF8: {_                String s = strings[i]__                if (s == null) {_                    index = items[i]__                    s = strings[i] = readUTF(index + 2,_                            readUnsignedShort(index), buf)__                }_                item.set(tag, s, null, null)__                break__            }_            case ClassWriter.HANDLE: {_                int fieldOrMethodRef = items[readUnsignedShort(index + 1)]__                nameType = items[readUnsignedShort(fieldOrMethodRef + 2)]__                item.set(ClassWriter.HANDLE_BASE + readByte(index),_                        readClass(fieldOrMethodRef, buf),_                        readUTF8(nameType, buf), readUTF8(nameType + 2, buf))__                break__            }_            case ClassWriter.INDY:_                if (classWriter.bootstrapMethods == null) {_                    copyBootstrapMethods(classWriter, items2, buf)__                }_                nameType = items[readUnsignedShort(index + 2)]__                item.set(readUTF8(nameType, buf), readUTF8(nameType + 2, buf),_                        readUnsignedShort(index))__                break__            _            _            _            default:_                item.set(tag, readUTF8(index, buf), null, null)__                break__            }__            int index2 = item.hashCode % items2.length__            item.next = items2[index2]__            items2[index2] = item__        }__        int off = items[1] - 1__        classWriter.pool.putByteArray(b, off, header - off)__        classWriter.items = items2__        classWriter.threshold = (int) (0.75d * ll)__        classWriter.index = ll__    };copies,the,constant,pool,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,constant,pool,into;void,copy,pool,final,class,writer,class,writer,char,buf,new,char,max,string,length,int,ll,items,length,item,items2,new,item,ll,for,int,i,1,i,ll,i,int,index,items,i,int,tag,b,index,1,item,item,new,item,i,int,name,type,switch,tag,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,name,type,items,read,unsigned,short,index,2,item,set,tag,read,class,index,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,int,item,set,read,int,index,break,case,class,writer,float,item,set,float,int,bits,to,float,read,int,index,break,case,class,writer,item,set,tag,read,utf8,index,buf,read,utf8,index,2,buf,null,break,case,class,writer,long,item,set,read,long,index,i,break,case,class,writer,double,item,set,double,long,bits,to,double,read,long,index,i,break,case,class,writer,utf8,string,s,strings,i,if,s,null,index,items,i,s,strings,i,read,utf,index,2,read,unsigned,short,index,buf,item,set,tag,s,null,null,break,case,class,writer,handle,int,field,or,method,ref,items,read,unsigned,short,index,1,name,type,items,read,unsigned,short,field,or,method,ref,2,item,set,class,writer,read,byte,index,read,class,field,or,method,ref,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,indy,if,class,writer,bootstrap,methods,null,copy,bootstrap,methods,class,writer,items2,buf,name,type,items,read,unsigned,short,index,2,item,set,read,utf8,name,type,buf,read,utf8,name,type,2,buf,read,unsigned,short,index,break,default,item,set,tag,read,utf8,index,buf,null,null,break,int,index2,item,hash,code,items2,length,item,next,items2,index2,items2,index2,item,int,off,items,1,1,class,writer,pool,put,byte,array,b,off,header,off,class,writer,items,items2,class,writer,threshold,int,0,75d,ll,class,writer,index,ll
ClassReader -> void copyPool(final ClassWriter classWriter);1416998550;Copies the constant pool data into the given {@link ClassWriter}. Should_be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy constant pool into.;void copyPool(final ClassWriter classWriter) {_        char[] buf = new char[maxStringLength]__        int ll = items.length__        Item[] items2 = new Item[ll]__        for (int i = 1_ i < ll_ i++) {_            int index = items[i]__            int tag = b[index - 1]__            Item item = new Item(i)__            int nameType__            switch (tag) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_                nameType = items[readUnsignedShort(index + 2)]__                item.set(tag, readClass(index, buf), readUTF8(nameType, buf),_                        readUTF8(nameType + 2, buf))__                break__            case ClassWriter.INT:_                item.set(readInt(index))__                break__            case ClassWriter.FLOAT:_                item.set(Float.intBitsToFloat(readInt(index)))__                break__            case ClassWriter.NAME_TYPE:_                item.set(tag, readUTF8(index, buf), readUTF8(index + 2, buf),_                        null)__                break__            case ClassWriter.LONG:_                item.set(readLong(index))__                ++i__                break__            case ClassWriter.DOUBLE:_                item.set(Double.longBitsToDouble(readLong(index)))__                ++i__                break__            case ClassWriter.UTF8: {_                String s = strings[i]__                if (s == null) {_                    index = items[i]__                    s = strings[i] = readUTF(index + 2,_                            readUnsignedShort(index), buf)__                }_                item.set(tag, s, null, null)__                break__            }_            case ClassWriter.HANDLE: {_                int fieldOrMethodRef = items[readUnsignedShort(index + 1)]__                nameType = items[readUnsignedShort(fieldOrMethodRef + 2)]__                item.set(ClassWriter.HANDLE_BASE + readByte(index),_                        readClass(fieldOrMethodRef, buf),_                        readUTF8(nameType, buf), readUTF8(nameType + 2, buf))__                break__            }_            case ClassWriter.INDY:_                if (classWriter.bootstrapMethods == null) {_                    copyBootstrapMethods(classWriter, items2, buf)__                }_                nameType = items[readUnsignedShort(index + 2)]__                item.set(readUTF8(nameType, buf), readUTF8(nameType + 2, buf),_                        readUnsignedShort(index))__                break__            _            _            _            default:_                item.set(tag, readUTF8(index, buf), null, null)__                break__            }__            int index2 = item.hashCode % items2.length__            item.next = items2[index2]__            items2[index2] = item__        }__        int off = items[1] - 1__        classWriter.pool.putByteArray(b, off, header - off)__        classWriter.items = items2__        classWriter.threshold = (int) (0.75d * ll)__        classWriter.index = ll__    };copies,the,constant,pool,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,constant,pool,into;void,copy,pool,final,class,writer,class,writer,char,buf,new,char,max,string,length,int,ll,items,length,item,items2,new,item,ll,for,int,i,1,i,ll,i,int,index,items,i,int,tag,b,index,1,item,item,new,item,i,int,name,type,switch,tag,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,name,type,items,read,unsigned,short,index,2,item,set,tag,read,class,index,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,int,item,set,read,int,index,break,case,class,writer,float,item,set,float,int,bits,to,float,read,int,index,break,case,class,writer,item,set,tag,read,utf8,index,buf,read,utf8,index,2,buf,null,break,case,class,writer,long,item,set,read,long,index,i,break,case,class,writer,double,item,set,double,long,bits,to,double,read,long,index,i,break,case,class,writer,utf8,string,s,strings,i,if,s,null,index,items,i,s,strings,i,read,utf,index,2,read,unsigned,short,index,buf,item,set,tag,s,null,null,break,case,class,writer,handle,int,field,or,method,ref,items,read,unsigned,short,index,1,name,type,items,read,unsigned,short,field,or,method,ref,2,item,set,class,writer,read,byte,index,read,class,field,or,method,ref,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,indy,if,class,writer,bootstrap,methods,null,copy,bootstrap,methods,class,writer,items2,buf,name,type,items,read,unsigned,short,index,2,item,set,read,utf8,name,type,buf,read,utf8,name,type,2,buf,read,unsigned,short,index,break,default,item,set,tag,read,utf8,index,buf,null,null,break,int,index2,item,hash,code,items2,length,item,next,items2,index2,items2,index2,item,int,off,items,1,1,class,writer,pool,put,byte,array,b,off,header,off,class,writer,items,items2,class,writer,threshold,int,0,75d,ll,class,writer,index,ll
ClassReader -> void copyPool(final ClassWriter classWriter);1457705343;Copies the constant pool data into the given {@link ClassWriter}. Should_be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy constant pool into.;void copyPool(final ClassWriter classWriter) {_        char[] buf = new char[maxStringLength]__        int ll = items.length__        Item[] items2 = new Item[ll]__        for (int i = 1_ i < ll_ i++) {_            int index = items[i]__            int tag = b[index - 1]__            Item item = new Item(i)__            int nameType__            switch (tag) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_                nameType = items[readUnsignedShort(index + 2)]__                item.set(tag, readClass(index, buf), readUTF8(nameType, buf),_                        readUTF8(nameType + 2, buf))__                break__            case ClassWriter.INT:_                item.set(readInt(index))__                break__            case ClassWriter.FLOAT:_                item.set(Float.intBitsToFloat(readInt(index)))__                break__            case ClassWriter.NAME_TYPE:_                item.set(tag, readUTF8(index, buf), readUTF8(index + 2, buf),_                        null)__                break__            case ClassWriter.LONG:_                item.set(readLong(index))__                ++i__                break__            case ClassWriter.DOUBLE:_                item.set(Double.longBitsToDouble(readLong(index)))__                ++i__                break__            case ClassWriter.UTF8: {_                String s = strings[i]__                if (s == null) {_                    index = items[i]__                    s = strings[i] = readUTF(index + 2,_                            readUnsignedShort(index), buf)__                }_                item.set(tag, s, null, null)__                break__            }_            case ClassWriter.HANDLE: {_                int fieldOrMethodRef = items[readUnsignedShort(index + 1)]__                nameType = items[readUnsignedShort(fieldOrMethodRef + 2)]__                item.set(ClassWriter.HANDLE_BASE + readByte(index),_                        readClass(fieldOrMethodRef, buf),_                        readUTF8(nameType, buf), readUTF8(nameType + 2, buf))__                break__            }_            case ClassWriter.INDY:_                if (classWriter.bootstrapMethods == null) {_                    copyBootstrapMethods(classWriter, items2, buf)__                }_                nameType = items[readUnsignedShort(index + 2)]__                item.set(readUTF8(nameType, buf), readUTF8(nameType + 2, buf),_                        readUnsignedShort(index))__                break__            _            _            _            default:_                item.set(tag, readUTF8(index, buf), null, null)__                break__            }__            int index2 = item.hashCode % items2.length__            item.next = items2[index2]__            items2[index2] = item__        }__        int off = items[1] - 1__        classWriter.pool.putByteArray(b, off, header - off)__        classWriter.items = items2__        classWriter.threshold = (int) (0.75d * ll)__        classWriter.index = ll__    };copies,the,constant,pool,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,constant,pool,into;void,copy,pool,final,class,writer,class,writer,char,buf,new,char,max,string,length,int,ll,items,length,item,items2,new,item,ll,for,int,i,1,i,ll,i,int,index,items,i,int,tag,b,index,1,item,item,new,item,i,int,name,type,switch,tag,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,name,type,items,read,unsigned,short,index,2,item,set,tag,read,class,index,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,int,item,set,read,int,index,break,case,class,writer,float,item,set,float,int,bits,to,float,read,int,index,break,case,class,writer,item,set,tag,read,utf8,index,buf,read,utf8,index,2,buf,null,break,case,class,writer,long,item,set,read,long,index,i,break,case,class,writer,double,item,set,double,long,bits,to,double,read,long,index,i,break,case,class,writer,utf8,string,s,strings,i,if,s,null,index,items,i,s,strings,i,read,utf,index,2,read,unsigned,short,index,buf,item,set,tag,s,null,null,break,case,class,writer,handle,int,field,or,method,ref,items,read,unsigned,short,index,1,name,type,items,read,unsigned,short,field,or,method,ref,2,item,set,class,writer,read,byte,index,read,class,field,or,method,ref,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,indy,if,class,writer,bootstrap,methods,null,copy,bootstrap,methods,class,writer,items2,buf,name,type,items,read,unsigned,short,index,2,item,set,read,utf8,name,type,buf,read,utf8,name,type,2,buf,read,unsigned,short,index,break,default,item,set,tag,read,utf8,index,buf,null,null,break,int,index2,item,hash,code,items2,length,item,next,items2,index2,items2,index2,item,int,off,items,1,1,class,writer,pool,put,byte,array,b,off,header,off,class,writer,items,items2,class,writer,threshold,int,0,75d,ll,class,writer,index,ll
ClassReader -> void copyPool(final ClassWriter classWriter);1459258703;Copies the constant pool data into the given {@link ClassWriter}. Should_be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy constant pool into.;void copyPool(final ClassWriter classWriter) {_        char[] buf = new char[maxStringLength]__        int ll = items.length__        Item[] items2 = new Item[ll]__        for (int i = 1_ i < ll_ i++) {_            int index = items[i]__            int tag = b[index - 1]__            Item item = new Item(i)__            int nameType__            switch (tag) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_                nameType = items[readUnsignedShort(index + 2)]__                item.set(tag, readClass(index, buf), readUTF8(nameType, buf),_                        readUTF8(nameType + 2, buf))__                break__            case ClassWriter.INT:_                item.set(readInt(index))__                break__            case ClassWriter.FLOAT:_                item.set(Float.intBitsToFloat(readInt(index)))__                break__            case ClassWriter.NAME_TYPE:_                item.set(tag, readUTF8(index, buf), readUTF8(index + 2, buf),_                        null)__                break__            case ClassWriter.LONG:_                item.set(readLong(index))__                ++i__                break__            case ClassWriter.DOUBLE:_                item.set(Double.longBitsToDouble(readLong(index)))__                ++i__                break__            case ClassWriter.UTF8: {_                String s = strings[i]__                if (s == null) {_                    index = items[i]__                    s = strings[i] = readUTF(index + 2,_                            readUnsignedShort(index), buf)__                }_                item.set(tag, s, null, null)__                break__            }_            case ClassWriter.HANDLE: {_                int fieldOrMethodRef = items[readUnsignedShort(index + 1)]__                nameType = items[readUnsignedShort(fieldOrMethodRef + 2)]__                item.set(ClassWriter.HANDLE_BASE + readByte(index),_                        readClass(fieldOrMethodRef, buf),_                        readUTF8(nameType, buf), readUTF8(nameType + 2, buf))__                break__            }_            case ClassWriter.INDY:_                if (classWriter.bootstrapMethods == null) {_                    copyBootstrapMethods(classWriter, items2, buf)__                }_                nameType = items[readUnsignedShort(index + 2)]__                item.set(readUTF8(nameType, buf), readUTF8(nameType + 2, buf),_                        readUnsignedShort(index))__                break__            _            _            _            default:_                item.set(tag, readUTF8(index, buf), null, null)__                break__            }__            int index2 = item.hashCode % items2.length__            item.next = items2[index2]__            items2[index2] = item__        }__        int off = items[1] - 1__        classWriter.pool.putByteArray(b, off, header - off)__        classWriter.items = items2__        classWriter.threshold = (int) (0.75d * ll)__        classWriter.index = ll__    };copies,the,constant,pool,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,constant,pool,into;void,copy,pool,final,class,writer,class,writer,char,buf,new,char,max,string,length,int,ll,items,length,item,items2,new,item,ll,for,int,i,1,i,ll,i,int,index,items,i,int,tag,b,index,1,item,item,new,item,i,int,name,type,switch,tag,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,name,type,items,read,unsigned,short,index,2,item,set,tag,read,class,index,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,int,item,set,read,int,index,break,case,class,writer,float,item,set,float,int,bits,to,float,read,int,index,break,case,class,writer,item,set,tag,read,utf8,index,buf,read,utf8,index,2,buf,null,break,case,class,writer,long,item,set,read,long,index,i,break,case,class,writer,double,item,set,double,long,bits,to,double,read,long,index,i,break,case,class,writer,utf8,string,s,strings,i,if,s,null,index,items,i,s,strings,i,read,utf,index,2,read,unsigned,short,index,buf,item,set,tag,s,null,null,break,case,class,writer,handle,int,field,or,method,ref,items,read,unsigned,short,index,1,name,type,items,read,unsigned,short,field,or,method,ref,2,item,set,class,writer,read,byte,index,read,class,field,or,method,ref,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,indy,if,class,writer,bootstrap,methods,null,copy,bootstrap,methods,class,writer,items2,buf,name,type,items,read,unsigned,short,index,2,item,set,read,utf8,name,type,buf,read,utf8,name,type,2,buf,read,unsigned,short,index,break,default,item,set,tag,read,utf8,index,buf,null,null,break,int,index2,item,hash,code,items2,length,item,next,items2,index2,items2,index2,item,int,off,items,1,1,class,writer,pool,put,byte,array,b,off,header,off,class,writer,items,items2,class,writer,threshold,int,0,75d,ll,class,writer,index,ll
ClassReader -> void copyPool(final ClassWriter classWriter);1478623137;Copies the constant pool data into the given {@link ClassWriter}. Should_be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy constant pool into.;void copyPool(final ClassWriter classWriter) {_        char[] buf = new char[maxStringLength]__        int ll = items.length__        Item[] items2 = new Item[ll]__        for (int i = 1_ i < ll_ i++) {_            int index = items[i]__            int tag = b[index - 1]__            Item item = new Item(i)__            int nameType__            switch (tag) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_                nameType = items[readUnsignedShort(index + 2)]__                item.set(tag, readClass(index, buf), readUTF8(nameType, buf),_                        readUTF8(nameType + 2, buf))__                break__            case ClassWriter.INT:_                item.set(readInt(index))__                break__            case ClassWriter.FLOAT:_                item.set(Float.intBitsToFloat(readInt(index)))__                break__            case ClassWriter.NAME_TYPE:_                item.set(tag, readUTF8(index, buf), readUTF8(index + 2, buf),_                        null)__                break__            case ClassWriter.LONG:_                item.set(readLong(index))__                ++i__                break__            case ClassWriter.DOUBLE:_                item.set(Double.longBitsToDouble(readLong(index)))__                ++i__                break__            case ClassWriter.UTF8: {_                String s = strings[i]__                if (s == null) {_                    index = items[i]__                    s = strings[i] = readUTF(index + 2,_                            readUnsignedShort(index), buf)__                }_                item.set(tag, s, null, null)__                break__            }_            case ClassWriter.HANDLE: {_                int fieldOrMethodRef = items[readUnsignedShort(index + 1)]__                nameType = items[readUnsignedShort(fieldOrMethodRef + 2)]__                item.set(ClassWriter.HANDLE_BASE + readByte(index),_                        readClass(fieldOrMethodRef, buf),_                        readUTF8(nameType, buf), readUTF8(nameType + 2, buf))__                break__            }_            case ClassWriter.INDY:_                if (classWriter.bootstrapMethods == null) {_                    copyBootstrapMethods(classWriter, items2, buf)__                }_                nameType = items[readUnsignedShort(index + 2)]__                item.set(readUTF8(nameType, buf), readUTF8(nameType + 2, buf),_                        readUnsignedShort(index))__                break__            _            _            _            default:_                item.set(tag, readUTF8(index, buf), null, null)__                break__            }__            int index2 = item.hashCode % items2.length__            item.next = items2[index2]__            items2[index2] = item__        }__        int off = items[1] - 1__        classWriter.pool.putByteArray(b, off, header - off)__        classWriter.items = items2__        classWriter.threshold = (int) (0.75d * ll)__        classWriter.index = ll__    };copies,the,constant,pool,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,constant,pool,into;void,copy,pool,final,class,writer,class,writer,char,buf,new,char,max,string,length,int,ll,items,length,item,items2,new,item,ll,for,int,i,1,i,ll,i,int,index,items,i,int,tag,b,index,1,item,item,new,item,i,int,name,type,switch,tag,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,name,type,items,read,unsigned,short,index,2,item,set,tag,read,class,index,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,int,item,set,read,int,index,break,case,class,writer,float,item,set,float,int,bits,to,float,read,int,index,break,case,class,writer,item,set,tag,read,utf8,index,buf,read,utf8,index,2,buf,null,break,case,class,writer,long,item,set,read,long,index,i,break,case,class,writer,double,item,set,double,long,bits,to,double,read,long,index,i,break,case,class,writer,utf8,string,s,strings,i,if,s,null,index,items,i,s,strings,i,read,utf,index,2,read,unsigned,short,index,buf,item,set,tag,s,null,null,break,case,class,writer,handle,int,field,or,method,ref,items,read,unsigned,short,index,1,name,type,items,read,unsigned,short,field,or,method,ref,2,item,set,class,writer,read,byte,index,read,class,field,or,method,ref,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,indy,if,class,writer,bootstrap,methods,null,copy,bootstrap,methods,class,writer,items2,buf,name,type,items,read,unsigned,short,index,2,item,set,read,utf8,name,type,buf,read,utf8,name,type,2,buf,read,unsigned,short,index,break,default,item,set,tag,read,utf8,index,buf,null,null,break,int,index2,item,hash,code,items2,length,item,next,items2,index2,items2,index2,item,int,off,items,1,1,class,writer,pool,put,byte,array,b,off,header,off,class,writer,items,items2,class,writer,threshold,int,0,75d,ll,class,writer,index,ll
ClassReader -> void copyPool(final ClassWriter classWriter);1483093254;Copies the constant pool data into the given {@link ClassWriter}. Should_be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy constant pool into.;void copyPool(final ClassWriter classWriter) {_        char[] buf = new char[maxStringLength]__        int ll = items.length__        Item[] items2 = new Item[ll]__        for (int i = 1_ i < ll_ i++) {_            int index = items[i]__            int tag = b[index - 1]__            Item item = new Item(i)__            int nameType__            switch (tag) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_                nameType = items[readUnsignedShort(index + 2)]__                item.set(tag, readClass(index, buf), readUTF8(nameType, buf),_                        readUTF8(nameType + 2, buf))__                break__            case ClassWriter.INT:_                item.set(readInt(index))__                break__            case ClassWriter.FLOAT:_                item.set(Float.intBitsToFloat(readInt(index)))__                break__            case ClassWriter.NAME_TYPE:_                item.set(tag, readUTF8(index, buf), readUTF8(index + 2, buf),_                        null)__                break__            case ClassWriter.LONG:_                item.set(readLong(index))__                ++i__                break__            case ClassWriter.DOUBLE:_                item.set(Double.longBitsToDouble(readLong(index)))__                ++i__                break__            case ClassWriter.UTF8: {_                String s = strings[i]__                if (s == null) {_                    index = items[i]__                    s = strings[i] = readUTF(index + 2,_                            readUnsignedShort(index), buf)__                }_                item.set(tag, s, null, null)__                break__            }_            case ClassWriter.HANDLE: {_                int fieldOrMethodRef = items[readUnsignedShort(index + 1)]__                nameType = items[readUnsignedShort(fieldOrMethodRef + 2)]__                item.set(ClassWriter.HANDLE_BASE + readByte(index),_                        readClass(fieldOrMethodRef, buf),_                        readUTF8(nameType, buf), readUTF8(nameType + 2, buf))__                break__            }_            case ClassWriter.INDY:_                if (classWriter.bootstrapMethods == null) {_                    copyBootstrapMethods(classWriter, items2, buf)__                }_                nameType = items[readUnsignedShort(index + 2)]__                item.set(readUTF8(nameType, buf), readUTF8(nameType + 2, buf),_                        readUnsignedShort(index))__                break__            _            _            _            default:_                item.set(tag, readUTF8(index, buf), null, null)__                break__            }__            int index2 = item.hashCode % items2.length__            item.next = items2[index2]__            items2[index2] = item__        }__        int off = items[1] - 1__        classWriter.pool.putByteArray(b, off, header - off)__        classWriter.items = items2__        classWriter.threshold = (int) (0.75d * ll)__        classWriter.index = ll__    };copies,the,constant,pool,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,constant,pool,into;void,copy,pool,final,class,writer,class,writer,char,buf,new,char,max,string,length,int,ll,items,length,item,items2,new,item,ll,for,int,i,1,i,ll,i,int,index,items,i,int,tag,b,index,1,item,item,new,item,i,int,name,type,switch,tag,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,name,type,items,read,unsigned,short,index,2,item,set,tag,read,class,index,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,int,item,set,read,int,index,break,case,class,writer,float,item,set,float,int,bits,to,float,read,int,index,break,case,class,writer,item,set,tag,read,utf8,index,buf,read,utf8,index,2,buf,null,break,case,class,writer,long,item,set,read,long,index,i,break,case,class,writer,double,item,set,double,long,bits,to,double,read,long,index,i,break,case,class,writer,utf8,string,s,strings,i,if,s,null,index,items,i,s,strings,i,read,utf,index,2,read,unsigned,short,index,buf,item,set,tag,s,null,null,break,case,class,writer,handle,int,field,or,method,ref,items,read,unsigned,short,index,1,name,type,items,read,unsigned,short,field,or,method,ref,2,item,set,class,writer,read,byte,index,read,class,field,or,method,ref,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,indy,if,class,writer,bootstrap,methods,null,copy,bootstrap,methods,class,writer,items2,buf,name,type,items,read,unsigned,short,index,2,item,set,read,utf8,name,type,buf,read,utf8,name,type,2,buf,read,unsigned,short,index,break,default,item,set,tag,read,utf8,index,buf,null,null,break,int,index2,item,hash,code,items2,length,item,next,items2,index2,items2,index2,item,int,off,items,1,1,class,writer,pool,put,byte,array,b,off,header,off,class,writer,items,items2,class,writer,threshold,int,0,75d,ll,class,writer,index,ll
ClassReader -> void copyPool(final ClassWriter classWriter);1505821772;Copies the constant pool data into the given {@link ClassWriter}. Should_be called before the {@link #accept(ClassVisitor,int)} method.__@param classWriter_the {@link ClassWriter} to copy constant pool into.;void copyPool(final ClassWriter classWriter) {_        char[] buf = new char[maxStringLength]__        int ll = items.length__        Item[] items2 = new Item[ll]__        for (int i = 1_ i < ll_ i++) {_            int index = items[i]__            int tag = b[index - 1]__            Item item = new Item(i)__            int nameType__            switch (tag) {_            case ClassWriter.FIELD:_            case ClassWriter.METH:_            case ClassWriter.IMETH:_                nameType = items[readUnsignedShort(index + 2)]__                item.set(tag, readClass(index, buf), readUTF8(nameType, buf),_                        readUTF8(nameType + 2, buf))__                break__            case ClassWriter.INT:_                item.set(readInt(index))__                break__            case ClassWriter.FLOAT:_                item.set(Float.intBitsToFloat(readInt(index)))__                break__            case ClassWriter.NAME_TYPE:_                item.set(tag, readUTF8(index, buf), readUTF8(index + 2, buf),_                        null)__                break__            case ClassWriter.LONG:_                item.set(readLong(index))__                ++i__                break__            case ClassWriter.DOUBLE:_                item.set(Double.longBitsToDouble(readLong(index)))__                ++i__                break__            case ClassWriter.UTF8: {_                String s = strings[i]__                if (s == null) {_                    index = items[i]__                    s = strings[i] = readUTF(index + 2,_                            readUnsignedShort(index), buf)__                }_                item.set(tag, s, null, null)__                break__            }_            case ClassWriter.HANDLE: {_                int fieldOrMethodRef = items[readUnsignedShort(index + 1)]__                nameType = items[readUnsignedShort(fieldOrMethodRef + 2)]__                item.set(ClassWriter.HANDLE_BASE + readByte(index),_                        readClass(fieldOrMethodRef, buf),_                        readUTF8(nameType, buf), readUTF8(nameType + 2, buf))__                break__            }_            case ClassWriter.INDY:_                if (classWriter.bootstrapMethods == null) {_                    copyBootstrapMethods(classWriter, items2, buf)__                }_                nameType = items[readUnsignedShort(index + 2)]__                item.set(readUTF8(nameType, buf), readUTF8(nameType + 2, buf),_                        readUnsignedShort(index))__                break__            _            _            _            _            _            default:_                item.set(tag, readUTF8(index, buf), null, null)__                break__            }__            int index2 = item.hashCode % items2.length__            item.next = items2[index2]__            items2[index2] = item__        }__        int off = items[1] - 1__        classWriter.pool.putByteArray(b, off, header - off)__        classWriter.items = items2__        classWriter.threshold = (int) (0.75d * ll)__        classWriter.index = ll__    };copies,the,constant,pool,data,into,the,given,link,class,writer,should,be,called,before,the,link,accept,class,visitor,int,method,param,class,writer,the,link,class,writer,to,copy,constant,pool,into;void,copy,pool,final,class,writer,class,writer,char,buf,new,char,max,string,length,int,ll,items,length,item,items2,new,item,ll,for,int,i,1,i,ll,i,int,index,items,i,int,tag,b,index,1,item,item,new,item,i,int,name,type,switch,tag,case,class,writer,field,case,class,writer,meth,case,class,writer,imeth,name,type,items,read,unsigned,short,index,2,item,set,tag,read,class,index,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,int,item,set,read,int,index,break,case,class,writer,float,item,set,float,int,bits,to,float,read,int,index,break,case,class,writer,item,set,tag,read,utf8,index,buf,read,utf8,index,2,buf,null,break,case,class,writer,long,item,set,read,long,index,i,break,case,class,writer,double,item,set,double,long,bits,to,double,read,long,index,i,break,case,class,writer,utf8,string,s,strings,i,if,s,null,index,items,i,s,strings,i,read,utf,index,2,read,unsigned,short,index,buf,item,set,tag,s,null,null,break,case,class,writer,handle,int,field,or,method,ref,items,read,unsigned,short,index,1,name,type,items,read,unsigned,short,field,or,method,ref,2,item,set,class,writer,read,byte,index,read,class,field,or,method,ref,buf,read,utf8,name,type,buf,read,utf8,name,type,2,buf,break,case,class,writer,indy,if,class,writer,bootstrap,methods,null,copy,bootstrap,methods,class,writer,items2,buf,name,type,items,read,unsigned,short,index,2,item,set,read,utf8,name,type,buf,read,utf8,name,type,2,buf,read,unsigned,short,index,break,default,item,set,tag,read,utf8,index,buf,null,null,break,int,index2,item,hash,code,items2,length,item,next,items2,index2,items2,index2,item,int,off,items,1,1,class,writer,pool,put,byte,array,b,off,header,off,class,writer,items,items2,class,writer,threshold,int,0,75d,ll,class,writer,index,ll
ClassReader -> public ClassReader(       final byte[] classFileBuffer, final int classFileOffset, final int classFileLength);1531241461;Constructs a new {@link ClassReader} object.__@param classFileBuffer a byte array containing the JVMS ClassFile structure to be read._@param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read._@param classFileLength the length in bytes of the ClassFile to be read.;public ClassReader(_      final byte[] classFileBuffer, final int classFileOffset, final int classFileLength) {_    this(classFileBuffer, classFileOffset,  true)__  };constructs,a,new,link,class,reader,object,param,class,file,buffer,a,byte,array,containing,the,jvms,class,file,structure,to,be,read,param,class,file,offset,the,offset,in,byte,buffer,of,the,first,byte,of,the,class,file,to,be,read,param,class,file,length,the,length,in,bytes,of,the,class,file,to,be,read;public,class,reader,final,byte,class,file,buffer,final,int,class,file,offset,final,int,class,file,length,this,class,file,buffer,class,file,offset,true
ClassReader -> public ClassReader(       final byte[] classFileBuffer, final int classFileOffset, final int classFileLength);1536664245;Constructs a new {@link ClassReader} object.__@param classFileBuffer a byte array containing the JVMS ClassFile structure to be read._@param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read._@param classFileLength the length in bytes of the ClassFile to be read.;public ClassReader(_      final byte[] classFileBuffer, final int classFileOffset, final int classFileLength) {_    this(classFileBuffer, classFileOffset,  true)__  };constructs,a,new,link,class,reader,object,param,class,file,buffer,a,byte,array,containing,the,jvms,class,file,structure,to,be,read,param,class,file,offset,the,offset,in,byte,buffer,of,the,first,byte,of,the,class,file,to,be,read,param,class,file,length,the,length,in,bytes,of,the,class,file,to,be,read;public,class,reader,final,byte,class,file,buffer,final,int,class,file,offset,final,int,class,file,length,this,class,file,buffer,class,file,offset,true
ClassReader -> public ClassReader(       final byte[] classFileBuffer, final int classFileOffset, final int classFileLength);1536747989;Constructs a new {@link ClassReader} object.__@param classFileBuffer a byte array containing the JVMS ClassFile structure to be read._@param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read._@param classFileLength the length in bytes of the ClassFile to be read.;public ClassReader(_      final byte[] classFileBuffer, final int classFileOffset, final int classFileLength) {_    this(classFileBuffer, classFileOffset,  true)__  };constructs,a,new,link,class,reader,object,param,class,file,buffer,a,byte,array,containing,the,jvms,class,file,structure,to,be,read,param,class,file,offset,the,offset,in,byte,buffer,of,the,first,byte,of,the,class,file,to,be,read,param,class,file,length,the,length,in,bytes,of,the,class,file,to,be,read;public,class,reader,final,byte,class,file,buffer,final,int,class,file,offset,final,int,class,file,length,this,class,file,buffer,class,file,offset,true
ClassReader -> public ClassReader(       final byte[] classFileBuffer, final int classFileOffset, final int classFileLength);1537204147;Constructs a new {@link ClassReader} object.__@param classFileBuffer a byte array containing the JVMS ClassFile structure to be read._@param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read._@param classFileLength the length in bytes of the ClassFile to be read.;public ClassReader(_      final byte[] classFileBuffer, final int classFileOffset, final int classFileLength) {_    this(classFileBuffer, classFileOffset,  true)__  };constructs,a,new,link,class,reader,object,param,class,file,buffer,a,byte,array,containing,the,jvms,class,file,structure,to,be,read,param,class,file,offset,the,offset,in,byte,buffer,of,the,first,byte,of,the,class,file,to,be,read,param,class,file,length,the,length,in,bytes,of,the,class,file,to,be,read;public,class,reader,final,byte,class,file,buffer,final,int,class,file,offset,final,int,class,file,length,this,class,file,buffer,class,file,offset,true
ClassReader -> private Label createLabel(final int bytecodeOffset, final Label[] labels);1531241461;Creates a label without the {@link Label#FLAG_DEBUG_ONLY} flag set, for the given bytecode_offset. The label is created with a call to {@link #readLabel} and its {@link_Label#FLAG_DEBUG_ONLY} flag is cleared.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset._@return a Label without the {@link Label#FLAG_DEBUG_ONLY} flag set.;private Label createLabel(final int bytecodeOffset, final Label[] labels) {_    Label label = readLabel(bytecodeOffset, labels)__    label.flags &= ~Label.FLAG_DEBUG_ONLY__    return label__  };creates,a,label,without,the,link,label,flag,set,for,the,given,bytecode,offset,the,label,is,created,with,a,call,to,link,read,label,and,its,link,label,flag,is,cleared,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,return,a,label,without,the,link,label,flag,set;private,label,create,label,final,int,bytecode,offset,final,label,labels,label,label,read,label,bytecode,offset,labels,label,flags,label,return,label
ClassReader -> private Label createLabel(final int bytecodeOffset, final Label[] labels);1536664245;Creates a label without the {@link Label#FLAG_DEBUG_ONLY} flag set, for the given bytecode_offset. The label is created with a call to {@link #readLabel} and its {@link_Label#FLAG_DEBUG_ONLY} flag is cleared.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset._@return a Label without the {@link Label#FLAG_DEBUG_ONLY} flag set.;private Label createLabel(final int bytecodeOffset, final Label[] labels) {_    Label label = readLabel(bytecodeOffset, labels)__    label.flags &= ~Label.FLAG_DEBUG_ONLY__    return label__  };creates,a,label,without,the,link,label,flag,set,for,the,given,bytecode,offset,the,label,is,created,with,a,call,to,link,read,label,and,its,link,label,flag,is,cleared,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,return,a,label,without,the,link,label,flag,set;private,label,create,label,final,int,bytecode,offset,final,label,labels,label,label,read,label,bytecode,offset,labels,label,flags,label,return,label
ClassReader -> private Label createLabel(final int bytecodeOffset, final Label[] labels);1536747989;Creates a label without the {@link Label#FLAG_DEBUG_ONLY} flag set, for the given bytecode_offset. The label is created with a call to {@link #readLabel} and its {@link_Label#FLAG_DEBUG_ONLY} flag is cleared.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset._@return a Label without the {@link Label#FLAG_DEBUG_ONLY} flag set.;private Label createLabel(final int bytecodeOffset, final Label[] labels) {_    Label label = readLabel(bytecodeOffset, labels)__    label.flags &= ~Label.FLAG_DEBUG_ONLY__    return label__  };creates,a,label,without,the,link,label,flag,set,for,the,given,bytecode,offset,the,label,is,created,with,a,call,to,link,read,label,and,its,link,label,flag,is,cleared,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,return,a,label,without,the,link,label,flag,set;private,label,create,label,final,int,bytecode,offset,final,label,labels,label,label,read,label,bytecode,offset,labels,label,flags,label,return,label
ClassReader -> private Label createLabel(final int bytecodeOffset, final Label[] labels);1537204147;Creates a label without the {@link Label#FLAG_DEBUG_ONLY} flag set, for the given bytecode_offset. The label is created with a call to {@link #readLabel} and its {@link_Label#FLAG_DEBUG_ONLY} flag is cleared.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset._@return a Label without the {@link Label#FLAG_DEBUG_ONLY} flag set.;private Label createLabel(final int bytecodeOffset, final Label[] labels) {_    Label label = readLabel(bytecodeOffset, labels)__    label.flags &= ~Label.FLAG_DEBUG_ONLY__    return label__  };creates,a,label,without,the,link,label,flag,set,for,the,given,bytecode,offset,the,label,is,created,with,a,call,to,link,read,label,and,its,link,label,flag,is,cleared,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,return,a,label,without,the,link,label,flag,set;private,label,create,label,final,int,bytecode,offset,final,label,labels,label,label,read,label,bytecode,offset,labels,label,flags,label,return,label
ClassReader -> private Label createLabel(final int bytecodeOffset, final Label[] labels);1539119582;Creates a label without the {@link Label#FLAG_DEBUG_ONLY} flag set, for the given bytecode_offset. The label is created with a call to {@link #readLabel} and its {@link_Label#FLAG_DEBUG_ONLY} flag is cleared.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset._@return a Label without the {@link Label#FLAG_DEBUG_ONLY} flag set.;private Label createLabel(final int bytecodeOffset, final Label[] labels) {_    Label label = readLabel(bytecodeOffset, labels)__    label.flags &= ~Label.FLAG_DEBUG_ONLY__    return label__  };creates,a,label,without,the,link,label,flag,set,for,the,given,bytecode,offset,the,label,is,created,with,a,call,to,link,read,label,and,its,link,label,flag,is,cleared,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,return,a,label,without,the,link,label,flag,set;private,label,create,label,final,int,bytecode,offset,final,label,labels,label,label,read,label,bytecode,offset,labels,label,flags,label,return,label
ClassReader -> private Label createLabel(final int bytecodeOffset, final Label[] labels);1541436263;Creates a label without the {@link Label#FLAG_DEBUG_ONLY} flag set, for the given bytecode_offset. The label is created with a call to {@link #readLabel} and its {@link_Label#FLAG_DEBUG_ONLY} flag is cleared.__@param bytecodeOffset a bytecode offset in a method._@param labels the already created labels, indexed by their offset._@return a Label without the {@link Label#FLAG_DEBUG_ONLY} flag set.;private Label createLabel(final int bytecodeOffset, final Label[] labels) {_    Label label = readLabel(bytecodeOffset, labels)__    label.flags &= ~Label.FLAG_DEBUG_ONLY__    return label__  };creates,a,label,without,the,link,label,flag,set,for,the,given,bytecode,offset,the,label,is,created,with,a,call,to,link,read,label,and,its,link,label,flag,is,cleared,param,bytecode,offset,a,bytecode,offset,in,a,method,param,labels,the,already,created,labels,indexed,by,their,offset,return,a,label,without,the,link,label,flag,set;private,label,create,label,final,int,bytecode,offset,final,label,labels,label,label,read,label,bytecode,offset,labels,label,flags,label,return,label
ClassReader -> private int readElementValues(       final AnnotationVisitor annotationVisitor,       final int annotationOffset,       final boolean named,       final char[] charBuffer);1531241461;Reads the element values of a JVMS 'annotation' structure and makes the given visitor visit_them. This method can also be used to read the values of the JVMS 'array_value' field of an_annotation's 'element_value'.__@param annotationVisitor the visitor that must visit the values._@param annotationOffset the start offset of an 'annotation' structure (excluding its type_index_field) or of an 'array_value' structure._@param named if the annotation values are named or not. This should be true to parse the values_of a JVMS 'annotation' structure, and false to parse the JVMS 'array_value' of an_annotation's element_value._@param charBuffer the buffer used to read strings in the constant pool._@return the end offset of the JVMS 'annotation' or 'array_value' structure.;private int readElementValues(_      final AnnotationVisitor annotationVisitor,_      final int annotationOffset,_      final boolean named,_      final char[] charBuffer) {_    int currentOffset = annotationOffset__    _    int numElementValuePairs = readUnsignedShort(currentOffset)__    currentOffset += 2__    if (named) {_      _      while (numElementValuePairs-- > 0) {_        String elementName = readUTF8(currentOffset, charBuffer)__        currentOffset =_            readElementValue(annotationVisitor, currentOffset + 2, elementName, charBuffer)__      }_    } else {_      _      while (numElementValuePairs-- > 0) {_        currentOffset =_            readElementValue(annotationVisitor, currentOffset,  null, charBuffer)__      }_    }_    if (annotationVisitor != null) {_      annotationVisitor.visitEnd()__    }_    return currentOffset__  };reads,the,element,values,of,a,jvms,annotation,structure,and,makes,the,given,visitor,visit,them,this,method,can,also,be,used,to,read,the,values,of,the,jvms,field,of,an,annotation,s,param,annotation,visitor,the,visitor,that,must,visit,the,values,param,annotation,offset,the,start,offset,of,an,annotation,structure,excluding,its,field,or,of,an,structure,param,named,if,the,annotation,values,are,named,or,not,this,should,be,true,to,parse,the,values,of,a,jvms,annotation,structure,and,false,to,parse,the,jvms,of,an,annotation,s,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,return,the,end,offset,of,the,jvms,annotation,or,structure;private,int,read,element,values,final,annotation,visitor,annotation,visitor,final,int,annotation,offset,final,boolean,named,final,char,char,buffer,int,current,offset,annotation,offset,int,num,element,value,pairs,read,unsigned,short,current,offset,current,offset,2,if,named,while,num,element,value,pairs,0,string,element,name,read,utf8,current,offset,char,buffer,current,offset,read,element,value,annotation,visitor,current,offset,2,element,name,char,buffer,else,while,num,element,value,pairs,0,current,offset,read,element,value,annotation,visitor,current,offset,null,char,buffer,if,annotation,visitor,null,annotation,visitor,visit,end,return,current,offset
ClassReader -> private int readElementValues(       final AnnotationVisitor annotationVisitor,       final int annotationOffset,       final boolean named,       final char[] charBuffer);1536664245;Reads the element values of a JVMS 'annotation' structure and makes the given visitor visit_them. This method can also be used to read the values of the JVMS 'array_value' field of an_annotation's 'element_value'.__@param annotationVisitor the visitor that must visit the values._@param annotationOffset the start offset of an 'annotation' structure (excluding its type_index_field) or of an 'array_value' structure._@param named if the annotation values are named or not. This should be true to parse the values_of a JVMS 'annotation' structure, and false to parse the JVMS 'array_value' of an_annotation's element_value._@param charBuffer the buffer used to read strings in the constant pool._@return the end offset of the JVMS 'annotation' or 'array_value' structure.;private int readElementValues(_      final AnnotationVisitor annotationVisitor,_      final int annotationOffset,_      final boolean named,_      final char[] charBuffer) {_    int currentOffset = annotationOffset__    _    int numElementValuePairs = readUnsignedShort(currentOffset)__    currentOffset += 2__    if (named) {_      _      while (numElementValuePairs-- > 0) {_        String elementName = readUTF8(currentOffset, charBuffer)__        currentOffset =_            readElementValue(annotationVisitor, currentOffset + 2, elementName, charBuffer)__      }_    } else {_      _      while (numElementValuePairs-- > 0) {_        currentOffset =_            readElementValue(annotationVisitor, currentOffset,  null, charBuffer)__      }_    }_    if (annotationVisitor != null) {_      annotationVisitor.visitEnd()__    }_    return currentOffset__  };reads,the,element,values,of,a,jvms,annotation,structure,and,makes,the,given,visitor,visit,them,this,method,can,also,be,used,to,read,the,values,of,the,jvms,field,of,an,annotation,s,param,annotation,visitor,the,visitor,that,must,visit,the,values,param,annotation,offset,the,start,offset,of,an,annotation,structure,excluding,its,field,or,of,an,structure,param,named,if,the,annotation,values,are,named,or,not,this,should,be,true,to,parse,the,values,of,a,jvms,annotation,structure,and,false,to,parse,the,jvms,of,an,annotation,s,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,return,the,end,offset,of,the,jvms,annotation,or,structure;private,int,read,element,values,final,annotation,visitor,annotation,visitor,final,int,annotation,offset,final,boolean,named,final,char,char,buffer,int,current,offset,annotation,offset,int,num,element,value,pairs,read,unsigned,short,current,offset,current,offset,2,if,named,while,num,element,value,pairs,0,string,element,name,read,utf8,current,offset,char,buffer,current,offset,read,element,value,annotation,visitor,current,offset,2,element,name,char,buffer,else,while,num,element,value,pairs,0,current,offset,read,element,value,annotation,visitor,current,offset,null,char,buffer,if,annotation,visitor,null,annotation,visitor,visit,end,return,current,offset
ClassReader -> private int readElementValues(       final AnnotationVisitor annotationVisitor,       final int annotationOffset,       final boolean named,       final char[] charBuffer);1536747989;Reads the element values of a JVMS 'annotation' structure and makes the given visitor visit_them. This method can also be used to read the values of the JVMS 'array_value' field of an_annotation's 'element_value'.__@param annotationVisitor the visitor that must visit the values._@param annotationOffset the start offset of an 'annotation' structure (excluding its type_index_field) or of an 'array_value' structure._@param named if the annotation values are named or not. This should be true to parse the values_of a JVMS 'annotation' structure, and false to parse the JVMS 'array_value' of an_annotation's element_value._@param charBuffer the buffer used to read strings in the constant pool._@return the end offset of the JVMS 'annotation' or 'array_value' structure.;private int readElementValues(_      final AnnotationVisitor annotationVisitor,_      final int annotationOffset,_      final boolean named,_      final char[] charBuffer) {_    int currentOffset = annotationOffset__    _    int numElementValuePairs = readUnsignedShort(currentOffset)__    currentOffset += 2__    if (named) {_      _      while (numElementValuePairs-- > 0) {_        String elementName = readUTF8(currentOffset, charBuffer)__        currentOffset =_            readElementValue(annotationVisitor, currentOffset + 2, elementName, charBuffer)__      }_    } else {_      _      while (numElementValuePairs-- > 0) {_        currentOffset =_            readElementValue(annotationVisitor, currentOffset,  null, charBuffer)__      }_    }_    if (annotationVisitor != null) {_      annotationVisitor.visitEnd()__    }_    return currentOffset__  };reads,the,element,values,of,a,jvms,annotation,structure,and,makes,the,given,visitor,visit,them,this,method,can,also,be,used,to,read,the,values,of,the,jvms,field,of,an,annotation,s,param,annotation,visitor,the,visitor,that,must,visit,the,values,param,annotation,offset,the,start,offset,of,an,annotation,structure,excluding,its,field,or,of,an,structure,param,named,if,the,annotation,values,are,named,or,not,this,should,be,true,to,parse,the,values,of,a,jvms,annotation,structure,and,false,to,parse,the,jvms,of,an,annotation,s,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,return,the,end,offset,of,the,jvms,annotation,or,structure;private,int,read,element,values,final,annotation,visitor,annotation,visitor,final,int,annotation,offset,final,boolean,named,final,char,char,buffer,int,current,offset,annotation,offset,int,num,element,value,pairs,read,unsigned,short,current,offset,current,offset,2,if,named,while,num,element,value,pairs,0,string,element,name,read,utf8,current,offset,char,buffer,current,offset,read,element,value,annotation,visitor,current,offset,2,element,name,char,buffer,else,while,num,element,value,pairs,0,current,offset,read,element,value,annotation,visitor,current,offset,null,char,buffer,if,annotation,visitor,null,annotation,visitor,visit,end,return,current,offset
ClassReader -> private int readElementValues(       final AnnotationVisitor annotationVisitor,       final int annotationOffset,       final boolean named,       final char[] charBuffer);1537204147;Reads the element values of a JVMS 'annotation' structure and makes the given visitor visit_them. This method can also be used to read the values of the JVMS 'array_value' field of an_annotation's 'element_value'.__@param annotationVisitor the visitor that must visit the values._@param annotationOffset the start offset of an 'annotation' structure (excluding its type_index_field) or of an 'array_value' structure._@param named if the annotation values are named or not. This should be true to parse the values_of a JVMS 'annotation' structure, and false to parse the JVMS 'array_value' of an_annotation's element_value._@param charBuffer the buffer used to read strings in the constant pool._@return the end offset of the JVMS 'annotation' or 'array_value' structure.;private int readElementValues(_      final AnnotationVisitor annotationVisitor,_      final int annotationOffset,_      final boolean named,_      final char[] charBuffer) {_    int currentOffset = annotationOffset__    _    int numElementValuePairs = readUnsignedShort(currentOffset)__    currentOffset += 2__    if (named) {_      _      while (numElementValuePairs-- > 0) {_        String elementName = readUTF8(currentOffset, charBuffer)__        currentOffset =_            readElementValue(annotationVisitor, currentOffset + 2, elementName, charBuffer)__      }_    } else {_      _      while (numElementValuePairs-- > 0) {_        currentOffset =_            readElementValue(annotationVisitor, currentOffset,  null, charBuffer)__      }_    }_    if (annotationVisitor != null) {_      annotationVisitor.visitEnd()__    }_    return currentOffset__  };reads,the,element,values,of,a,jvms,annotation,structure,and,makes,the,given,visitor,visit,them,this,method,can,also,be,used,to,read,the,values,of,the,jvms,field,of,an,annotation,s,param,annotation,visitor,the,visitor,that,must,visit,the,values,param,annotation,offset,the,start,offset,of,an,annotation,structure,excluding,its,field,or,of,an,structure,param,named,if,the,annotation,values,are,named,or,not,this,should,be,true,to,parse,the,values,of,a,jvms,annotation,structure,and,false,to,parse,the,jvms,of,an,annotation,s,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,return,the,end,offset,of,the,jvms,annotation,or,structure;private,int,read,element,values,final,annotation,visitor,annotation,visitor,final,int,annotation,offset,final,boolean,named,final,char,char,buffer,int,current,offset,annotation,offset,int,num,element,value,pairs,read,unsigned,short,current,offset,current,offset,2,if,named,while,num,element,value,pairs,0,string,element,name,read,utf8,current,offset,char,buffer,current,offset,read,element,value,annotation,visitor,current,offset,2,element,name,char,buffer,else,while,num,element,value,pairs,0,current,offset,read,element,value,annotation,visitor,current,offset,null,char,buffer,if,annotation,visitor,null,annotation,visitor,visit,end,return,current,offset
ClassReader -> private int readElementValues(       final AnnotationVisitor annotationVisitor,       final int annotationOffset,       final boolean named,       final char[] charBuffer);1539119582;Reads the element values of a JVMS 'annotation' structure and makes the given visitor visit_them. This method can also be used to read the values of the JVMS 'array_value' field of an_annotation's 'element_value'.__@param annotationVisitor the visitor that must visit the values._@param annotationOffset the start offset of an 'annotation' structure (excluding its type_index_field) or of an 'array_value' structure._@param named if the annotation values are named or not. This should be true to parse the values_of a JVMS 'annotation' structure, and false to parse the JVMS 'array_value' of an_annotation's element_value._@param charBuffer the buffer used to read strings in the constant pool._@return the end offset of the JVMS 'annotation' or 'array_value' structure.;private int readElementValues(_      final AnnotationVisitor annotationVisitor,_      final int annotationOffset,_      final boolean named,_      final char[] charBuffer) {_    int currentOffset = annotationOffset__    _    int numElementValuePairs = readUnsignedShort(currentOffset)__    currentOffset += 2__    if (named) {_      _      while (numElementValuePairs-- > 0) {_        String elementName = readUTF8(currentOffset, charBuffer)__        currentOffset =_            readElementValue(annotationVisitor, currentOffset + 2, elementName, charBuffer)__      }_    } else {_      _      while (numElementValuePairs-- > 0) {_        currentOffset =_            readElementValue(annotationVisitor, currentOffset,  null, charBuffer)__      }_    }_    if (annotationVisitor != null) {_      annotationVisitor.visitEnd()__    }_    return currentOffset__  };reads,the,element,values,of,a,jvms,annotation,structure,and,makes,the,given,visitor,visit,them,this,method,can,also,be,used,to,read,the,values,of,the,jvms,field,of,an,annotation,s,param,annotation,visitor,the,visitor,that,must,visit,the,values,param,annotation,offset,the,start,offset,of,an,annotation,structure,excluding,its,field,or,of,an,structure,param,named,if,the,annotation,values,are,named,or,not,this,should,be,true,to,parse,the,values,of,a,jvms,annotation,structure,and,false,to,parse,the,jvms,of,an,annotation,s,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,return,the,end,offset,of,the,jvms,annotation,or,structure;private,int,read,element,values,final,annotation,visitor,annotation,visitor,final,int,annotation,offset,final,boolean,named,final,char,char,buffer,int,current,offset,annotation,offset,int,num,element,value,pairs,read,unsigned,short,current,offset,current,offset,2,if,named,while,num,element,value,pairs,0,string,element,name,read,utf8,current,offset,char,buffer,current,offset,read,element,value,annotation,visitor,current,offset,2,element,name,char,buffer,else,while,num,element,value,pairs,0,current,offset,read,element,value,annotation,visitor,current,offset,null,char,buffer,if,annotation,visitor,null,annotation,visitor,visit,end,return,current,offset
ClassReader -> private int readElementValues(       final AnnotationVisitor annotationVisitor,       final int annotationOffset,       final boolean named,       final char[] charBuffer);1541436263;Reads the element values of a JVMS 'annotation' structure and makes the given visitor visit_them. This method can also be used to read the values of the JVMS 'array_value' field of an_annotation's 'element_value'.__@param annotationVisitor the visitor that must visit the values._@param annotationOffset the start offset of an 'annotation' structure (excluding its type_index_field) or of an 'array_value' structure._@param named if the annotation values are named or not. This should be true to parse the values_of a JVMS 'annotation' structure, and false to parse the JVMS 'array_value' of an_annotation's element_value._@param charBuffer the buffer used to read strings in the constant pool._@return the end offset of the JVMS 'annotation' or 'array_value' structure.;private int readElementValues(_      final AnnotationVisitor annotationVisitor,_      final int annotationOffset,_      final boolean named,_      final char[] charBuffer) {_    int currentOffset = annotationOffset__    _    int numElementValuePairs = readUnsignedShort(currentOffset)__    currentOffset += 2__    if (named) {_      _      while (numElementValuePairs-- > 0) {_        String elementName = readUTF8(currentOffset, charBuffer)__        currentOffset =_            readElementValue(annotationVisitor, currentOffset + 2, elementName, charBuffer)__      }_    } else {_      _      while (numElementValuePairs-- > 0) {_        currentOffset =_            readElementValue(annotationVisitor, currentOffset,  null, charBuffer)__      }_    }_    if (annotationVisitor != null) {_      annotationVisitor.visitEnd()__    }_    return currentOffset__  };reads,the,element,values,of,a,jvms,annotation,structure,and,makes,the,given,visitor,visit,them,this,method,can,also,be,used,to,read,the,values,of,the,jvms,field,of,an,annotation,s,param,annotation,visitor,the,visitor,that,must,visit,the,values,param,annotation,offset,the,start,offset,of,an,annotation,structure,excluding,its,field,or,of,an,structure,param,named,if,the,annotation,values,are,named,or,not,this,should,be,true,to,parse,the,values,of,a,jvms,annotation,structure,and,false,to,parse,the,jvms,of,an,annotation,s,param,char,buffer,the,buffer,used,to,read,strings,in,the,constant,pool,return,the,end,offset,of,the,jvms,annotation,or,structure;private,int,read,element,values,final,annotation,visitor,annotation,visitor,final,int,annotation,offset,final,boolean,named,final,char,char,buffer,int,current,offset,annotation,offset,int,num,element,value,pairs,read,unsigned,short,current,offset,current,offset,2,if,named,while,num,element,value,pairs,0,string,element,name,read,utf8,current,offset,char,buffer,current,offset,read,element,value,annotation,visitor,current,offset,2,element,name,char,buffer,else,while,num,element,value,pairs,0,current,offset,read,element,value,annotation,visitor,current,offset,null,char,buffer,if,annotation,visitor,null,annotation,visitor,visit,end,return,current,offset
ClassReader -> private String readStringish(final int offset, final char[] charBuffer);1531241461;Reads a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or_CONSTANT_Package constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or_CONSTANT_Package entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified constant pool entry.;private String readStringish(final int offset, final char[] charBuffer) {_    _    _    return readUTF8(cpInfoOffsets[readUnsignedShort(offset)], charBuffer)__  };reads,a,or,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,or,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,constant,pool,entry;private,string,read,stringish,final,int,offset,final,char,char,buffer,return,read,utf8,cp,info,offsets,read,unsigned,short,offset,char,buffer
ClassReader -> private String readStringish(final int offset, final char[] charBuffer);1536664245;Reads a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or_CONSTANT_Package constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or_CONSTANT_Package entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified constant pool entry.;private String readStringish(final int offset, final char[] charBuffer) {_    _    _    return readUTF8(cpInfoOffsets[readUnsignedShort(offset)], charBuffer)__  };reads,a,or,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,or,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,constant,pool,entry;private,string,read,stringish,final,int,offset,final,char,char,buffer,return,read,utf8,cp,info,offsets,read,unsigned,short,offset,char,buffer
ClassReader -> private String readStringish(final int offset, final char[] charBuffer);1536747989;Reads a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or_CONSTANT_Package constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or_CONSTANT_Package entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified constant pool entry.;private String readStringish(final int offset, final char[] charBuffer) {_    _    _    return readUTF8(cpInfoOffsets[readUnsignedShort(offset)], charBuffer)__  };reads,a,or,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,or,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,constant,pool,entry;private,string,read,stringish,final,int,offset,final,char,char,buffer,return,read,utf8,cp,info,offsets,read,unsigned,short,offset,char,buffer
ClassReader -> private String readStringish(final int offset, final char[] charBuffer);1537204147;Reads a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or_CONSTANT_Package constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or_CONSTANT_Package entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified constant pool entry.;private String readStringish(final int offset, final char[] charBuffer) {_    _    _    return readUTF8(cpInfoOffsets[readUnsignedShort(offset)], charBuffer)__  };reads,a,or,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,or,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,constant,pool,entry;private,string,read,stringish,final,int,offset,final,char,char,buffer,return,read,utf8,cp,info,offsets,read,unsigned,short,offset,char,buffer
ClassReader -> private String readStringish(final int offset, final char[] charBuffer);1539119582;Reads a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or_CONSTANT_Package constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or_CONSTANT_Package entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified constant pool entry.;private String readStringish(final int offset, final char[] charBuffer) {_    _    _    return readUTF8(cpInfoOffsets[readUnsignedShort(offset)], charBuffer)__  };reads,a,or,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,or,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,constant,pool,entry;private,string,read,stringish,final,int,offset,final,char,char,buffer,return,read,utf8,cp,info,offsets,read,unsigned,short,offset,char,buffer
ClassReader -> private String readStringish(final int offset, final char[] charBuffer);1541436263;Reads a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or_CONSTANT_Package constant pool entry in {@link #b}. <i>This method is intended for {@link_Attribute} sub classes, and is normally not needed by class generators or adapters.</i>__@param offset the start offset of an unsigned short value in {@link #b}, whose value is the_index of a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or_CONSTANT_Package entry in class's constant pool table._@param charBuffer the buffer to be used to read the item. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified constant pool entry.;private String readStringish(final int offset, final char[] charBuffer) {_    _    _    return readUTF8(cpInfoOffsets[readUnsignedShort(offset)], charBuffer)__  };reads,a,or,constant,pool,entry,in,link,b,i,this,method,is,intended,for,link,attribute,sub,classes,and,is,normally,not,needed,by,class,generators,or,adapters,i,param,offset,the,start,offset,of,an,unsigned,short,value,in,link,b,whose,value,is,the,index,of,a,or,entry,in,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,item,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,constant,pool,entry;private,string,read,stringish,final,int,offset,final,char,char,buffer,return,read,utf8,cp,info,offsets,read,unsigned,short,offset,char,buffer
ClassReader -> public void accept(final ClassVisitor classVisitor, final int parsingOptions);1531241461;Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this_{@link ClassReader}.__@param classVisitor the visitor that must visit this class._@param parsingOptions the options to use to parse this class. One or more of {@link_#SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.;public void accept(final ClassVisitor classVisitor, final int parsingOptions) {_    accept(classVisitor, new Attribute[0], parsingOptions)__  };makes,the,given,visitor,visit,the,jvms,class,file,structure,passed,to,the,constructor,of,this,link,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,parsing,options,the,options,to,use,to,parse,this,class,one,or,more,of,link,link,link,or,link;public,void,accept,final,class,visitor,class,visitor,final,int,parsing,options,accept,class,visitor,new,attribute,0,parsing,options
ClassReader -> public void accept(final ClassVisitor classVisitor, final int parsingOptions);1536664245;Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this_{@link ClassReader}.__@param classVisitor the visitor that must visit this class._@param parsingOptions the options to use to parse this class. One or more of {@link_#SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.;public void accept(final ClassVisitor classVisitor, final int parsingOptions) {_    accept(classVisitor, new Attribute[0], parsingOptions)__  };makes,the,given,visitor,visit,the,jvms,class,file,structure,passed,to,the,constructor,of,this,link,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,parsing,options,the,options,to,use,to,parse,this,class,one,or,more,of,link,link,link,or,link;public,void,accept,final,class,visitor,class,visitor,final,int,parsing,options,accept,class,visitor,new,attribute,0,parsing,options
ClassReader -> public void accept(final ClassVisitor classVisitor, final int parsingOptions);1536747989;Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this_{@link ClassReader}.__@param classVisitor the visitor that must visit this class._@param parsingOptions the options to use to parse this class. One or more of {@link_#SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.;public void accept(final ClassVisitor classVisitor, final int parsingOptions) {_    accept(classVisitor, new Attribute[0], parsingOptions)__  };makes,the,given,visitor,visit,the,jvms,class,file,structure,passed,to,the,constructor,of,this,link,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,parsing,options,the,options,to,use,to,parse,this,class,one,or,more,of,link,link,link,or,link;public,void,accept,final,class,visitor,class,visitor,final,int,parsing,options,accept,class,visitor,new,attribute,0,parsing,options
ClassReader -> public void accept(final ClassVisitor classVisitor, final int parsingOptions);1537204147;Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this_{@link ClassReader}.__@param classVisitor the visitor that must visit this class._@param parsingOptions the options to use to parse this class. One or more of {@link_#SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.;public void accept(final ClassVisitor classVisitor, final int parsingOptions) {_    accept(classVisitor, new Attribute[0], parsingOptions)__  };makes,the,given,visitor,visit,the,jvms,class,file,structure,passed,to,the,constructor,of,this,link,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,parsing,options,the,options,to,use,to,parse,this,class,one,or,more,of,link,link,link,or,link;public,void,accept,final,class,visitor,class,visitor,final,int,parsing,options,accept,class,visitor,new,attribute,0,parsing,options
ClassReader -> public void accept(final ClassVisitor classVisitor, final int parsingOptions);1539119582;Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this_{@link ClassReader}.__@param classVisitor the visitor that must visit this class._@param parsingOptions the options to use to parse this class. One or more of {@link_#SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.;public void accept(final ClassVisitor classVisitor, final int parsingOptions) {_    accept(classVisitor, new Attribute[0], parsingOptions)__  };makes,the,given,visitor,visit,the,jvms,class,file,structure,passed,to,the,constructor,of,this,link,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,parsing,options,the,options,to,use,to,parse,this,class,one,or,more,of,link,link,link,or,link;public,void,accept,final,class,visitor,class,visitor,final,int,parsing,options,accept,class,visitor,new,attribute,0,parsing,options
ClassReader -> public void accept(final ClassVisitor classVisitor, final int parsingOptions);1541436263;Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this_{@link ClassReader}.__@param classVisitor the visitor that must visit this class._@param parsingOptions the options to use to parse this class. One or more of {@link_#SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.;public void accept(final ClassVisitor classVisitor, final int parsingOptions) {_    accept(classVisitor, new Attribute[0], parsingOptions)__  };makes,the,given,visitor,visit,the,jvms,class,file,structure,passed,to,the,constructor,of,this,link,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,parsing,options,the,options,to,use,to,parse,this,class,one,or,more,of,link,link,link,or,link;public,void,accept,final,class,visitor,class,visitor,final,int,parsing,options,accept,class,visitor,new,attribute,0,parsing,options
ClassReader -> private void readModule(       final ClassVisitor classVisitor,       final Context context,       final int moduleOffset,       final int modulePackagesOffset,       final String moduleMainClass);1531241461;Reads the module attribute and visit it.__@param classVisitor the current class visitor_@param context information about the class being parsed._@param moduleOffset the offset of the Module attribute (excluding the attribute_info's_attribute_name_index and attribute_length fields)._@param modulePackagesOffset the offset of the ModulePackages attribute (excluding the_attribute_info's attribute_name_index and attribute_length fields), or 0._@param moduleMainClass the string corresponding to the ModuleMainClass attribute, or null.;private void readModule(_      final ClassVisitor classVisitor,_      final Context context,_      final int moduleOffset,_      final int modulePackagesOffset,_      final String moduleMainClass) {_    char[] buffer = context.charBuffer___    _    int currentOffset = moduleOffset__    String moduleName = readModule(currentOffset, buffer)__    int moduleFlags = readUnsignedShort(currentOffset + 2)__    String moduleVersion = readUTF8(currentOffset + 4, buffer)__    currentOffset += 6__    ModuleVisitor moduleVisitor = classVisitor.visitModule(moduleName, moduleFlags, moduleVersion)__    if (moduleVisitor == null) {_      return__    }__    _    if (moduleMainClass != null) {_      moduleVisitor.visitMainClass(moduleMainClass)__    }__    _    if (modulePackagesOffset != 0) {_      int packageCount = readUnsignedShort(modulePackagesOffset)__      int currentPackageOffset = modulePackagesOffset + 2__      while (packageCount-- > 0) {_        moduleVisitor.visitPackage(readPackage(currentPackageOffset, buffer))__        currentPackageOffset += 2__      }_    }__    _    int requiresCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (requiresCount-- > 0) {_      _      String requires = readModule(currentOffset, buffer)__      int requiresFlags = readUnsignedShort(currentOffset + 2)__      String requiresVersion = readUTF8(currentOffset + 4, buffer)__      currentOffset += 6__      moduleVisitor.visitRequire(requires, requiresFlags, requiresVersion)__    }__    _    int exportsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (exportsCount-- > 0) {_      _      _      String exports = readPackage(currentOffset, buffer)__      int exportsFlags = readUnsignedShort(currentOffset + 2)__      int exportsToCount = readUnsignedShort(currentOffset + 4)__      currentOffset += 6__      String[] exportsTo = null__      if (exportsToCount != 0) {_        exportsTo = new String[exportsToCount]__        for (int i = 0_ i < exportsToCount_ ++i) {_          exportsTo[i] = readModule(currentOffset, buffer)__          currentOffset += 2__        }_      }_      moduleVisitor.visitExport(exports, exportsFlags, exportsTo)__    }__    _    int opensCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (opensCount-- > 0) {_      _      String opens = readPackage(currentOffset, buffer)__      int opensFlags = readUnsignedShort(currentOffset + 2)__      int opensToCount = readUnsignedShort(currentOffset + 4)__      currentOffset += 6__      String[] opensTo = null__      if (opensToCount != 0) {_        opensTo = new String[opensToCount]__        for (int i = 0_ i < opensToCount_ ++i) {_          opensTo[i] = readModule(currentOffset, buffer)__          currentOffset += 2__        }_      }_      moduleVisitor.visitOpen(opens, opensFlags, opensTo)__    }__    _    int usesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (usesCount-- > 0) {_      moduleVisitor.visitUse(readClass(currentOffset, buffer))__      currentOffset += 2__    }__    _    int providesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (providesCount-- > 0) {_      _      String provides = readClass(currentOffset, buffer)__      int providesWithCount = readUnsignedShort(currentOffset + 2)__      currentOffset += 4__      String[] providesWith = new String[providesWithCount]__      for (int i = 0_ i < providesWithCount_ ++i) {_        providesWith[i] = readClass(currentOffset, buffer)__        currentOffset += 2__      }_      moduleVisitor.visitProvide(provides, providesWith)__    }__    _    moduleVisitor.visitEnd()__  };reads,the,module,attribute,and,visit,it,param,class,visitor,the,current,class,visitor,param,context,information,about,the,class,being,parsed,param,module,offset,the,offset,of,the,module,attribute,excluding,the,s,and,fields,param,module,packages,offset,the,offset,of,the,module,packages,attribute,excluding,the,s,and,fields,or,0,param,module,main,class,the,string,corresponding,to,the,module,main,class,attribute,or,null;private,void,read,module,final,class,visitor,class,visitor,final,context,context,final,int,module,offset,final,int,module,packages,offset,final,string,module,main,class,char,buffer,context,char,buffer,int,current,offset,module,offset,string,module,name,read,module,current,offset,buffer,int,module,flags,read,unsigned,short,current,offset,2,string,module,version,read,utf8,current,offset,4,buffer,current,offset,6,module,visitor,module,visitor,class,visitor,visit,module,module,name,module,flags,module,version,if,module,visitor,null,return,if,module,main,class,null,module,visitor,visit,main,class,module,main,class,if,module,packages,offset,0,int,package,count,read,unsigned,short,module,packages,offset,int,current,package,offset,module,packages,offset,2,while,package,count,0,module,visitor,visit,package,read,package,current,package,offset,buffer,current,package,offset,2,int,requires,count,read,unsigned,short,current,offset,current,offset,2,while,requires,count,0,string,requires,read,module,current,offset,buffer,int,requires,flags,read,unsigned,short,current,offset,2,string,requires,version,read,utf8,current,offset,4,buffer,current,offset,6,module,visitor,visit,require,requires,requires,flags,requires,version,int,exports,count,read,unsigned,short,current,offset,current,offset,2,while,exports,count,0,string,exports,read,package,current,offset,buffer,int,exports,flags,read,unsigned,short,current,offset,2,int,exports,to,count,read,unsigned,short,current,offset,4,current,offset,6,string,exports,to,null,if,exports,to,count,0,exports,to,new,string,exports,to,count,for,int,i,0,i,exports,to,count,i,exports,to,i,read,module,current,offset,buffer,current,offset,2,module,visitor,visit,export,exports,exports,flags,exports,to,int,opens,count,read,unsigned,short,current,offset,current,offset,2,while,opens,count,0,string,opens,read,package,current,offset,buffer,int,opens,flags,read,unsigned,short,current,offset,2,int,opens,to,count,read,unsigned,short,current,offset,4,current,offset,6,string,opens,to,null,if,opens,to,count,0,opens,to,new,string,opens,to,count,for,int,i,0,i,opens,to,count,i,opens,to,i,read,module,current,offset,buffer,current,offset,2,module,visitor,visit,open,opens,opens,flags,opens,to,int,uses,count,read,unsigned,short,current,offset,current,offset,2,while,uses,count,0,module,visitor,visit,use,read,class,current,offset,buffer,current,offset,2,int,provides,count,read,unsigned,short,current,offset,current,offset,2,while,provides,count,0,string,provides,read,class,current,offset,buffer,int,provides,with,count,read,unsigned,short,current,offset,2,current,offset,4,string,provides,with,new,string,provides,with,count,for,int,i,0,i,provides,with,count,i,provides,with,i,read,class,current,offset,buffer,current,offset,2,module,visitor,visit,provide,provides,provides,with,module,visitor,visit,end
ClassReader -> private void readModule(       final ClassVisitor classVisitor,       final Context context,       final int moduleOffset,       final int modulePackagesOffset,       final String moduleMainClass);1536664245;Reads the module attribute and visit it.__@param classVisitor the current class visitor_@param context information about the class being parsed._@param moduleOffset the offset of the Module attribute (excluding the attribute_info's_attribute_name_index and attribute_length fields)._@param modulePackagesOffset the offset of the ModulePackages attribute (excluding the_attribute_info's attribute_name_index and attribute_length fields), or 0._@param moduleMainClass the string corresponding to the ModuleMainClass attribute, or null.;private void readModule(_      final ClassVisitor classVisitor,_      final Context context,_      final int moduleOffset,_      final int modulePackagesOffset,_      final String moduleMainClass) {_    char[] buffer = context.charBuffer___    _    int currentOffset = moduleOffset__    String moduleName = readModule(currentOffset, buffer)__    int moduleFlags = readUnsignedShort(currentOffset + 2)__    String moduleVersion = readUTF8(currentOffset + 4, buffer)__    currentOffset += 6__    ModuleVisitor moduleVisitor = classVisitor.visitModule(moduleName, moduleFlags, moduleVersion)__    if (moduleVisitor == null) {_      return__    }__    _    if (moduleMainClass != null) {_      moduleVisitor.visitMainClass(moduleMainClass)__    }__    _    if (modulePackagesOffset != 0) {_      int packageCount = readUnsignedShort(modulePackagesOffset)__      int currentPackageOffset = modulePackagesOffset + 2__      while (packageCount-- > 0) {_        moduleVisitor.visitPackage(readPackage(currentPackageOffset, buffer))__        currentPackageOffset += 2__      }_    }__    _    int requiresCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (requiresCount-- > 0) {_      _      String requires = readModule(currentOffset, buffer)__      int requiresFlags = readUnsignedShort(currentOffset + 2)__      String requiresVersion = readUTF8(currentOffset + 4, buffer)__      currentOffset += 6__      moduleVisitor.visitRequire(requires, requiresFlags, requiresVersion)__    }__    _    int exportsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (exportsCount-- > 0) {_      _      _      String exports = readPackage(currentOffset, buffer)__      int exportsFlags = readUnsignedShort(currentOffset + 2)__      int exportsToCount = readUnsignedShort(currentOffset + 4)__      currentOffset += 6__      String[] exportsTo = null__      if (exportsToCount != 0) {_        exportsTo = new String[exportsToCount]__        for (int i = 0_ i < exportsToCount_ ++i) {_          exportsTo[i] = readModule(currentOffset, buffer)__          currentOffset += 2__        }_      }_      moduleVisitor.visitExport(exports, exportsFlags, exportsTo)__    }__    _    int opensCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (opensCount-- > 0) {_      _      String opens = readPackage(currentOffset, buffer)__      int opensFlags = readUnsignedShort(currentOffset + 2)__      int opensToCount = readUnsignedShort(currentOffset + 4)__      currentOffset += 6__      String[] opensTo = null__      if (opensToCount != 0) {_        opensTo = new String[opensToCount]__        for (int i = 0_ i < opensToCount_ ++i) {_          opensTo[i] = readModule(currentOffset, buffer)__          currentOffset += 2__        }_      }_      moduleVisitor.visitOpen(opens, opensFlags, opensTo)__    }__    _    int usesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (usesCount-- > 0) {_      moduleVisitor.visitUse(readClass(currentOffset, buffer))__      currentOffset += 2__    }__    _    int providesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (providesCount-- > 0) {_      _      String provides = readClass(currentOffset, buffer)__      int providesWithCount = readUnsignedShort(currentOffset + 2)__      currentOffset += 4__      String[] providesWith = new String[providesWithCount]__      for (int i = 0_ i < providesWithCount_ ++i) {_        providesWith[i] = readClass(currentOffset, buffer)__        currentOffset += 2__      }_      moduleVisitor.visitProvide(provides, providesWith)__    }__    _    moduleVisitor.visitEnd()__  };reads,the,module,attribute,and,visit,it,param,class,visitor,the,current,class,visitor,param,context,information,about,the,class,being,parsed,param,module,offset,the,offset,of,the,module,attribute,excluding,the,s,and,fields,param,module,packages,offset,the,offset,of,the,module,packages,attribute,excluding,the,s,and,fields,or,0,param,module,main,class,the,string,corresponding,to,the,module,main,class,attribute,or,null;private,void,read,module,final,class,visitor,class,visitor,final,context,context,final,int,module,offset,final,int,module,packages,offset,final,string,module,main,class,char,buffer,context,char,buffer,int,current,offset,module,offset,string,module,name,read,module,current,offset,buffer,int,module,flags,read,unsigned,short,current,offset,2,string,module,version,read,utf8,current,offset,4,buffer,current,offset,6,module,visitor,module,visitor,class,visitor,visit,module,module,name,module,flags,module,version,if,module,visitor,null,return,if,module,main,class,null,module,visitor,visit,main,class,module,main,class,if,module,packages,offset,0,int,package,count,read,unsigned,short,module,packages,offset,int,current,package,offset,module,packages,offset,2,while,package,count,0,module,visitor,visit,package,read,package,current,package,offset,buffer,current,package,offset,2,int,requires,count,read,unsigned,short,current,offset,current,offset,2,while,requires,count,0,string,requires,read,module,current,offset,buffer,int,requires,flags,read,unsigned,short,current,offset,2,string,requires,version,read,utf8,current,offset,4,buffer,current,offset,6,module,visitor,visit,require,requires,requires,flags,requires,version,int,exports,count,read,unsigned,short,current,offset,current,offset,2,while,exports,count,0,string,exports,read,package,current,offset,buffer,int,exports,flags,read,unsigned,short,current,offset,2,int,exports,to,count,read,unsigned,short,current,offset,4,current,offset,6,string,exports,to,null,if,exports,to,count,0,exports,to,new,string,exports,to,count,for,int,i,0,i,exports,to,count,i,exports,to,i,read,module,current,offset,buffer,current,offset,2,module,visitor,visit,export,exports,exports,flags,exports,to,int,opens,count,read,unsigned,short,current,offset,current,offset,2,while,opens,count,0,string,opens,read,package,current,offset,buffer,int,opens,flags,read,unsigned,short,current,offset,2,int,opens,to,count,read,unsigned,short,current,offset,4,current,offset,6,string,opens,to,null,if,opens,to,count,0,opens,to,new,string,opens,to,count,for,int,i,0,i,opens,to,count,i,opens,to,i,read,module,current,offset,buffer,current,offset,2,module,visitor,visit,open,opens,opens,flags,opens,to,int,uses,count,read,unsigned,short,current,offset,current,offset,2,while,uses,count,0,module,visitor,visit,use,read,class,current,offset,buffer,current,offset,2,int,provides,count,read,unsigned,short,current,offset,current,offset,2,while,provides,count,0,string,provides,read,class,current,offset,buffer,int,provides,with,count,read,unsigned,short,current,offset,2,current,offset,4,string,provides,with,new,string,provides,with,count,for,int,i,0,i,provides,with,count,i,provides,with,i,read,class,current,offset,buffer,current,offset,2,module,visitor,visit,provide,provides,provides,with,module,visitor,visit,end
ClassReader -> private void readModule(       final ClassVisitor classVisitor,       final Context context,       final int moduleOffset,       final int modulePackagesOffset,       final String moduleMainClass);1536747989;Reads the module attribute and visit it.__@param classVisitor the current class visitor_@param context information about the class being parsed._@param moduleOffset the offset of the Module attribute (excluding the attribute_info's_attribute_name_index and attribute_length fields)._@param modulePackagesOffset the offset of the ModulePackages attribute (excluding the_attribute_info's attribute_name_index and attribute_length fields), or 0._@param moduleMainClass the string corresponding to the ModuleMainClass attribute, or null.;private void readModule(_      final ClassVisitor classVisitor,_      final Context context,_      final int moduleOffset,_      final int modulePackagesOffset,_      final String moduleMainClass) {_    char[] buffer = context.charBuffer___    _    int currentOffset = moduleOffset__    String moduleName = readModule(currentOffset, buffer)__    int moduleFlags = readUnsignedShort(currentOffset + 2)__    String moduleVersion = readUTF8(currentOffset + 4, buffer)__    currentOffset += 6__    ModuleVisitor moduleVisitor = classVisitor.visitModule(moduleName, moduleFlags, moduleVersion)__    if (moduleVisitor == null) {_      return__    }__    _    if (moduleMainClass != null) {_      moduleVisitor.visitMainClass(moduleMainClass)__    }__    _    if (modulePackagesOffset != 0) {_      int packageCount = readUnsignedShort(modulePackagesOffset)__      int currentPackageOffset = modulePackagesOffset + 2__      while (packageCount-- > 0) {_        moduleVisitor.visitPackage(readPackage(currentPackageOffset, buffer))__        currentPackageOffset += 2__      }_    }__    _    int requiresCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (requiresCount-- > 0) {_      _      String requires = readModule(currentOffset, buffer)__      int requiresFlags = readUnsignedShort(currentOffset + 2)__      String requiresVersion = readUTF8(currentOffset + 4, buffer)__      currentOffset += 6__      moduleVisitor.visitRequire(requires, requiresFlags, requiresVersion)__    }__    _    int exportsCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (exportsCount-- > 0) {_      _      _      String exports = readPackage(currentOffset, buffer)__      int exportsFlags = readUnsignedShort(currentOffset + 2)__      int exportsToCount = readUnsignedShort(currentOffset + 4)__      currentOffset += 6__      String[] exportsTo = null__      if (exportsToCount != 0) {_        exportsTo = new String[exportsToCount]__        for (int i = 0_ i < exportsToCount_ ++i) {_          exportsTo[i] = readModule(currentOffset, buffer)__          currentOffset += 2__        }_      }_      moduleVisitor.visitExport(exports, exportsFlags, exportsTo)__    }__    _    int opensCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (opensCount-- > 0) {_      _      String opens = readPackage(currentOffset, buffer)__      int opensFlags = readUnsignedShort(currentOffset + 2)__      int opensToCount = readUnsignedShort(currentOffset + 4)__      currentOffset += 6__      String[] opensTo = null__      if (opensToCount != 0) {_        opensTo = new String[opensToCount]__        for (int i = 0_ i < opensToCount_ ++i) {_          opensTo[i] = readModule(currentOffset, buffer)__          currentOffset += 2__        }_      }_      moduleVisitor.visitOpen(opens, opensFlags, opensTo)__    }__    _    int usesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (usesCount-- > 0) {_      moduleVisitor.visitUse(readClass(currentOffset, buffer))__      currentOffset += 2__    }__    _    int providesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (providesCount-- > 0) {_      _      String provides = readClass(currentOffset, buffer)__      int providesWithCount = readUnsignedShort(currentOffset + 2)__      currentOffset += 4__      String[] providesWith = new String[providesWithCount]__      for (int i = 0_ i < providesWithCount_ ++i) {_        providesWith[i] = readClass(currentOffset, buffer)__        currentOffset += 2__      }_      moduleVisitor.visitProvide(provides, providesWith)__    }__    _    moduleVisitor.visitEnd()__  };reads,the,module,attribute,and,visit,it,param,class,visitor,the,current,class,visitor,param,context,information,about,the,class,being,parsed,param,module,offset,the,offset,of,the,module,attribute,excluding,the,s,and,fields,param,module,packages,offset,the,offset,of,the,module,packages,attribute,excluding,the,s,and,fields,or,0,param,module,main,class,the,string,corresponding,to,the,module,main,class,attribute,or,null;private,void,read,module,final,class,visitor,class,visitor,final,context,context,final,int,module,offset,final,int,module,packages,offset,final,string,module,main,class,char,buffer,context,char,buffer,int,current,offset,module,offset,string,module,name,read,module,current,offset,buffer,int,module,flags,read,unsigned,short,current,offset,2,string,module,version,read,utf8,current,offset,4,buffer,current,offset,6,module,visitor,module,visitor,class,visitor,visit,module,module,name,module,flags,module,version,if,module,visitor,null,return,if,module,main,class,null,module,visitor,visit,main,class,module,main,class,if,module,packages,offset,0,int,package,count,read,unsigned,short,module,packages,offset,int,current,package,offset,module,packages,offset,2,while,package,count,0,module,visitor,visit,package,read,package,current,package,offset,buffer,current,package,offset,2,int,requires,count,read,unsigned,short,current,offset,current,offset,2,while,requires,count,0,string,requires,read,module,current,offset,buffer,int,requires,flags,read,unsigned,short,current,offset,2,string,requires,version,read,utf8,current,offset,4,buffer,current,offset,6,module,visitor,visit,require,requires,requires,flags,requires,version,int,exports,count,read,unsigned,short,current,offset,current,offset,2,while,exports,count,0,string,exports,read,package,current,offset,buffer,int,exports,flags,read,unsigned,short,current,offset,2,int,exports,to,count,read,unsigned,short,current,offset,4,current,offset,6,string,exports,to,null,if,exports,to,count,0,exports,to,new,string,exports,to,count,for,int,i,0,i,exports,to,count,i,exports,to,i,read,module,current,offset,buffer,current,offset,2,module,visitor,visit,export,exports,exports,flags,exports,to,int,opens,count,read,unsigned,short,current,offset,current,offset,2,while,opens,count,0,string,opens,read,package,current,offset,buffer,int,opens,flags,read,unsigned,short,current,offset,2,int,opens,to,count,read,unsigned,short,current,offset,4,current,offset,6,string,opens,to,null,if,opens,to,count,0,opens,to,new,string,opens,to,count,for,int,i,0,i,opens,to,count,i,opens,to,i,read,module,current,offset,buffer,current,offset,2,module,visitor,visit,open,opens,opens,flags,opens,to,int,uses,count,read,unsigned,short,current,offset,current,offset,2,while,uses,count,0,module,visitor,visit,use,read,class,current,offset,buffer,current,offset,2,int,provides,count,read,unsigned,short,current,offset,current,offset,2,while,provides,count,0,string,provides,read,class,current,offset,buffer,int,provides,with,count,read,unsigned,short,current,offset,2,current,offset,4,string,provides,with,new,string,provides,with,count,for,int,i,0,i,provides,with,count,i,provides,with,i,read,class,current,offset,buffer,current,offset,2,module,visitor,visit,provide,provides,provides,with,module,visitor,visit,end
ClassReader -> final String readUTF(final int constantPoolEntryIndex, final char[] charBuffer);1531241461;Reads a CONSTANT_Utf8 constant pool entry in {@link #b}.__@param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pool_table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Utf8 entry.;final String readUTF(final int constantPoolEntryIndex, final char[] charBuffer) {_    String value = (String) cpInfoValues[constantPoolEntryIndex]__    if (value != null) {_      return value__    }_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    value = readUTF(cpInfoOffset + 2, readUnsignedShort(cpInfoOffset), charBuffer)__    cpInfoValues[constantPoolEntryIndex] = value__    return value__  };reads,a,constant,pool,entry,in,link,b,param,constant,pool,entry,index,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;final,string,read,utf,final,int,constant,pool,entry,index,final,char,char,buffer,string,value,string,cp,info,values,constant,pool,entry,index,if,value,null,return,value,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,value,read,utf,cp,info,offset,2,read,unsigned,short,cp,info,offset,char,buffer,cp,info,values,constant,pool,entry,index,value,return,value
ClassReader -> final String readUTF(final int constantPoolEntryIndex, final char[] charBuffer);1536664245;Reads a CONSTANT_Utf8 constant pool entry in {@link #b}.__@param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pool_table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Utf8 entry.;final String readUTF(final int constantPoolEntryIndex, final char[] charBuffer) {_    String value = (String) cpInfoValues[constantPoolEntryIndex]__    if (value != null) {_      return value__    }_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    value = readUTF(cpInfoOffset + 2, readUnsignedShort(cpInfoOffset), charBuffer)__    cpInfoValues[constantPoolEntryIndex] = value__    return value__  };reads,a,constant,pool,entry,in,link,b,param,constant,pool,entry,index,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;final,string,read,utf,final,int,constant,pool,entry,index,final,char,char,buffer,string,value,string,cp,info,values,constant,pool,entry,index,if,value,null,return,value,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,value,read,utf,cp,info,offset,2,read,unsigned,short,cp,info,offset,char,buffer,cp,info,values,constant,pool,entry,index,value,return,value
ClassReader -> final String readUTF(final int constantPoolEntryIndex, final char[] charBuffer);1536747989;Reads a CONSTANT_Utf8 constant pool entry in {@link #b}.__@param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pool_table._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified CONSTANT_Utf8 entry.;final String readUTF(final int constantPoolEntryIndex, final char[] charBuffer) {_    String value = constantUtf8Values[constantPoolEntryIndex]__    if (value != null) {_      return value__    }_    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex]__    return constantUtf8Values[constantPoolEntryIndex] =_        readUTF(cpInfoOffset + 2, readUnsignedShort(cpInfoOffset), charBuffer)__  };reads,a,constant,pool,entry,in,link,b,param,constant,pool,entry,index,the,index,of,a,entry,in,the,class,s,constant,pool,table,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,entry;final,string,read,utf,final,int,constant,pool,entry,index,final,char,char,buffer,string,value,constant,utf8values,constant,pool,entry,index,if,value,null,return,value,int,cp,info,offset,cp,info,offsets,constant,pool,entry,index,return,constant,utf8values,constant,pool,entry,index,read,utf,cp,info,offset,2,read,unsigned,short,cp,info,offset,char,buffer
ClassReader -> public int getAccess();1366718246;Returns the class's access flags (see {@link Opcodes}). This value may_not reflect Deprecated and Synthetic flags when bytecode is before 1.5_and those flags are represented by attributes.__@return the class access flags__@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_        return readUnsignedShort(header)__    };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1395273982;Returns the class's access flags (see {@link Opcodes}). This value may_not reflect Deprecated and Synthetic flags when bytecode is before 1.5_and those flags are represented by attributes.__@return the class access flags__@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_        return readUnsignedShort(header)__    };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1414067099;Returns the class's access flags (see {@link Opcodes}). This value may_not reflect Deprecated and Synthetic flags when bytecode is before 1.5_and those flags are represented by attributes.__@return the class access flags__@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_        return readUnsignedShort(header)__    };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1414499035;Returns the class's access flags (see {@link Opcodes}). This value may_not reflect Deprecated and Synthetic flags when bytecode is before 1.5_and those flags are represented by attributes.__@return the class access flags__@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_        return readUnsignedShort(header)__    };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1416998550;Returns the class's access flags (see {@link Opcodes}). This value may_not reflect Deprecated and Synthetic flags when bytecode is before 1.5_and those flags are represented by attributes.__@return the class access flags__@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_        return readUnsignedShort(header)__    };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1457705343;Returns the class's access flags (see {@link Opcodes}). This value may_not reflect Deprecated and Synthetic flags when bytecode is before 1.5_and those flags are represented by attributes.__@return the class access flags__@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_        return readUnsignedShort(header)__    };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1459258703;Returns the class's access flags (see {@link Opcodes}). This value may_not reflect Deprecated and Synthetic flags when bytecode is before 1.5_and those flags are represented by attributes.__@return the class access flags__@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_        return readUnsignedShort(header)__    };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1478623137;Returns the class's access flags (see {@link Opcodes}). This value may_not reflect Deprecated and Synthetic flags when bytecode is before 1.5_and those flags are represented by attributes.__@return the class access flags__@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_        return readUnsignedShort(header)__    };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1483093254;Returns the class's access flags (see {@link Opcodes}). This value may_not reflect Deprecated and Synthetic flags when bytecode is before 1.5_and those flags are represented by attributes.__@return the class access flags__@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_        return readUnsignedShort(header)__    };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1505821772;Returns the class's access flags (see {@link Opcodes}). This value may_not reflect Deprecated and Synthetic flags when bytecode is before 1.5_and those flags are represented by attributes.__@return the class access flags__@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_        return readUnsignedShort(header)__    };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1531241461;Returns the class's access flags (see {@link Opcodes}). This value may not reflect Deprecated_and Synthetic flags when bytecode is before 1.5 and those flags are represented by attributes.__@return the class access flags._@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_    return readUnsignedShort(header)__  };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1536664245;Returns the class's access flags (see {@link Opcodes}). This value may not reflect Deprecated_and Synthetic flags when bytecode is before 1.5 and those flags are represented by attributes.__@return the class access flags._@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_    return readUnsignedShort(header)__  };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1536747989;Returns the class's access flags (see {@link Opcodes}). This value may not reflect Deprecated_and Synthetic flags when bytecode is before 1.5 and those flags are represented by attributes.__@return the class access flags._@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_    return readUnsignedShort(header)__  };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1537204147;Returns the class's access flags (see {@link Opcodes}). This value may not reflect Deprecated_and Synthetic flags when bytecode is before 1.5 and those flags are represented by attributes.__@return the class access flags._@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_    return readUnsignedShort(header)__  };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1539119582;Returns the class's access flags (see {@link Opcodes}). This value may not reflect Deprecated_and Synthetic flags when bytecode is before 1.5 and those flags are represented by attributes.__@return the class access flags._@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_    return readUnsignedShort(header)__  };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getAccess();1541436263;Returns the class's access flags (see {@link Opcodes}). This value may not reflect Deprecated_and Synthetic flags when bytecode is before 1.5 and those flags are represented by attributes.__@return the class access flags._@see ClassVisitor#visit(int, int, String, String, String, String[]);public int getAccess() {_    return readUnsignedShort(header)__  };returns,the,class,s,access,flags,see,link,opcodes,this,value,may,not,reflect,deprecated,and,synthetic,flags,when,bytecode,is,before,1,5,and,those,flags,are,represented,by,attributes,return,the,class,access,flags,see,class,visitor,visit,int,int,string,string,string,string;public,int,get,access,return,read,unsigned,short,header
ClassReader -> public int getItemCount();1366718246;Returns the number of constant pool items in {@link #b b}.__@return the number of constant pool items in {@link #b b}.;public int getItemCount() {_        return items.length__    };returns,the,number,of,constant,pool,items,in,link,b,b,return,the,number,of,constant,pool,items,in,link,b,b;public,int,get,item,count,return,items,length
ClassReader -> public int getItemCount();1395273982;Returns the number of constant pool items in {@link #b b}.__@return the number of constant pool items in {@link #b b}.;public int getItemCount() {_        return items.length__    };returns,the,number,of,constant,pool,items,in,link,b,b,return,the,number,of,constant,pool,items,in,link,b,b;public,int,get,item,count,return,items,length
ClassReader -> public int getItemCount();1414067099;Returns the number of constant pool items in {@link #b b}.__@return the number of constant pool items in {@link #b b}.;public int getItemCount() {_        return items.length__    };returns,the,number,of,constant,pool,items,in,link,b,b,return,the,number,of,constant,pool,items,in,link,b,b;public,int,get,item,count,return,items,length
ClassReader -> public int getItemCount();1414499035;Returns the number of constant pool items in {@link #b b}.__@return the number of constant pool items in {@link #b b}.;public int getItemCount() {_        return items.length__    };returns,the,number,of,constant,pool,items,in,link,b,b,return,the,number,of,constant,pool,items,in,link,b,b;public,int,get,item,count,return,items,length
ClassReader -> public int getItemCount();1416998550;Returns the number of constant pool items in {@link #b b}.__@return the number of constant pool items in {@link #b b}.;public int getItemCount() {_        return items.length__    };returns,the,number,of,constant,pool,items,in,link,b,b,return,the,number,of,constant,pool,items,in,link,b,b;public,int,get,item,count,return,items,length
ClassReader -> public int getItemCount();1457705343;Returns the number of constant pool items in {@link #b b}.__@return the number of constant pool items in {@link #b b}.;public int getItemCount() {_        return items.length__    };returns,the,number,of,constant,pool,items,in,link,b,b,return,the,number,of,constant,pool,items,in,link,b,b;public,int,get,item,count,return,items,length
ClassReader -> public int getItemCount();1459258703;Returns the number of constant pool items in {@link #b b}.__@return the number of constant pool items in {@link #b b}.;public int getItemCount() {_        return items.length__    };returns,the,number,of,constant,pool,items,in,link,b,b,return,the,number,of,constant,pool,items,in,link,b,b;public,int,get,item,count,return,items,length
ClassReader -> public int getItemCount();1478623137;Returns the number of constant pool items in {@link #b b}.__@return the number of constant pool items in {@link #b b}.;public int getItemCount() {_        return items.length__    };returns,the,number,of,constant,pool,items,in,link,b,b,return,the,number,of,constant,pool,items,in,link,b,b;public,int,get,item,count,return,items,length
ClassReader -> public int getItemCount();1483093254;Returns the number of constant pool items in {@link #b b}.__@return the number of constant pool items in {@link #b b}.;public int getItemCount() {_        return items.length__    };returns,the,number,of,constant,pool,items,in,link,b,b,return,the,number,of,constant,pool,items,in,link,b,b;public,int,get,item,count,return,items,length
ClassReader -> public int getItemCount();1505821772;Returns the number of constant pool items in {@link #b b}.__@return the number of constant pool items in {@link #b b}.;public int getItemCount() {_        return items.length__    };returns,the,number,of,constant,pool,items,in,link,b,b,return,the,number,of,constant,pool,items,in,link,b,b;public,int,get,item,count,return,items,length
ClassReader -> public int getItemCount();1531241461;Returns the number of entries in the class's constant pool table.__@return the number of entries in the class's constant pool table.;public int getItemCount() {_    return cpInfoOffsets.length__  };returns,the,number,of,entries,in,the,class,s,constant,pool,table,return,the,number,of,entries,in,the,class,s,constant,pool,table;public,int,get,item,count,return,cp,info,offsets,length
ClassReader -> public int getItemCount();1536664245;Returns the number of entries in the class's constant pool table.__@return the number of entries in the class's constant pool table.;public int getItemCount() {_    return cpInfoOffsets.length__  };returns,the,number,of,entries,in,the,class,s,constant,pool,table,return,the,number,of,entries,in,the,class,s,constant,pool,table;public,int,get,item,count,return,cp,info,offsets,length
ClassReader -> public int getItemCount();1536747989;Returns the number of entries in the class's constant pool table.__@return the number of entries in the class's constant pool table.;public int getItemCount() {_    return cpInfoOffsets.length__  };returns,the,number,of,entries,in,the,class,s,constant,pool,table,return,the,number,of,entries,in,the,class,s,constant,pool,table;public,int,get,item,count,return,cp,info,offsets,length
ClassReader -> public int getItemCount();1537204147;Returns the number of entries in the class's constant pool table.__@return the number of entries in the class's constant pool table.;public int getItemCount() {_    return cpInfoOffsets.length__  };returns,the,number,of,entries,in,the,class,s,constant,pool,table,return,the,number,of,entries,in,the,class,s,constant,pool,table;public,int,get,item,count,return,cp,info,offsets,length
ClassReader -> public int getItemCount();1539119582;Returns the number of entries in the class's constant pool table.__@return the number of entries in the class's constant pool table.;public int getItemCount() {_    return cpInfoOffsets.length__  };returns,the,number,of,entries,in,the,class,s,constant,pool,table,return,the,number,of,entries,in,the,class,s,constant,pool,table;public,int,get,item,count,return,cp,info,offsets,length
ClassReader -> public int getItemCount();1541436263;Returns the number of entries in the class's constant pool table.__@return the number of entries in the class's constant pool table.;public int getItemCount() {_    return cpInfoOffsets.length__  };returns,the,number,of,entries,in,the,class,s,constant,pool,table,return,the,number,of,entries,in,the,class,s,constant,pool,table;public,int,get,item,count,return,cp,info,offsets,length
ClassReader -> private int getTypeAnnotationBytecodeOffset(       final int[] typeAnnotationOffsets, final int typeAnnotationIndex);1531241461;Returns the bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or_-1 if there is no such type_annotation of if it does not have a bytecode offset.__@param typeAnnotationOffsets the offset of each 'type_annotation' entry in a_Runtime[In]VisibleTypeAnnotations attribute, or null._@param typeAnnotationIndex the index a 'type_annotation' entry in typeAnnotationOffsets._@return bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or -1_if there is no such type_annotation of if it does not have a bytecode offset.;private int getTypeAnnotationBytecodeOffset(_      final int[] typeAnnotationOffsets, final int typeAnnotationIndex) {_    if (typeAnnotationOffsets == null_        || typeAnnotationIndex >= typeAnnotationOffsets.length_        || readByte(typeAnnotationOffsets[typeAnnotationIndex]) < TypeReference.INSTANCEOF) {_      return -1__    }_    return readUnsignedShort(typeAnnotationOffsets[typeAnnotationIndex] + 1)__  };returns,the,bytecode,offset,corresponding,to,the,specified,jvms,structure,or,1,if,there,is,no,such,of,if,it,does,not,have,a,bytecode,offset,param,type,annotation,offsets,the,offset,of,each,entry,in,a,runtime,in,visible,type,annotations,attribute,or,null,param,type,annotation,index,the,index,a,entry,in,type,annotation,offsets,return,bytecode,offset,corresponding,to,the,specified,jvms,structure,or,1,if,there,is,no,such,of,if,it,does,not,have,a,bytecode,offset;private,int,get,type,annotation,bytecode,offset,final,int,type,annotation,offsets,final,int,type,annotation,index,if,type,annotation,offsets,null,type,annotation,index,type,annotation,offsets,length,read,byte,type,annotation,offsets,type,annotation,index,type,reference,instanceof,return,1,return,read,unsigned,short,type,annotation,offsets,type,annotation,index,1
ClassReader -> private int getTypeAnnotationBytecodeOffset(       final int[] typeAnnotationOffsets, final int typeAnnotationIndex);1536664245;Returns the bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or_-1 if there is no such type_annotation of if it does not have a bytecode offset.__@param typeAnnotationOffsets the offset of each 'type_annotation' entry in a_Runtime[In]VisibleTypeAnnotations attribute, or null._@param typeAnnotationIndex the index a 'type_annotation' entry in typeAnnotationOffsets._@return bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or -1_if there is no such type_annotation of if it does not have a bytecode offset.;private int getTypeAnnotationBytecodeOffset(_      final int[] typeAnnotationOffsets, final int typeAnnotationIndex) {_    if (typeAnnotationOffsets == null_        || typeAnnotationIndex >= typeAnnotationOffsets.length_        || readByte(typeAnnotationOffsets[typeAnnotationIndex]) < TypeReference.INSTANCEOF) {_      return -1__    }_    return readUnsignedShort(typeAnnotationOffsets[typeAnnotationIndex] + 1)__  };returns,the,bytecode,offset,corresponding,to,the,specified,jvms,structure,or,1,if,there,is,no,such,of,if,it,does,not,have,a,bytecode,offset,param,type,annotation,offsets,the,offset,of,each,entry,in,a,runtime,in,visible,type,annotations,attribute,or,null,param,type,annotation,index,the,index,a,entry,in,type,annotation,offsets,return,bytecode,offset,corresponding,to,the,specified,jvms,structure,or,1,if,there,is,no,such,of,if,it,does,not,have,a,bytecode,offset;private,int,get,type,annotation,bytecode,offset,final,int,type,annotation,offsets,final,int,type,annotation,index,if,type,annotation,offsets,null,type,annotation,index,type,annotation,offsets,length,read,byte,type,annotation,offsets,type,annotation,index,type,reference,instanceof,return,1,return,read,unsigned,short,type,annotation,offsets,type,annotation,index,1
ClassReader -> private int getTypeAnnotationBytecodeOffset(       final int[] typeAnnotationOffsets, final int typeAnnotationIndex);1536747989;Returns the bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or_-1 if there is no such type_annotation of if it does not have a bytecode offset.__@param typeAnnotationOffsets the offset of each 'type_annotation' entry in a_Runtime[In]VisibleTypeAnnotations attribute, or null._@param typeAnnotationIndex the index a 'type_annotation' entry in typeAnnotationOffsets._@return bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or -1_if there is no such type_annotation of if it does not have a bytecode offset.;private int getTypeAnnotationBytecodeOffset(_      final int[] typeAnnotationOffsets, final int typeAnnotationIndex) {_    if (typeAnnotationOffsets == null_        || typeAnnotationIndex >= typeAnnotationOffsets.length_        || readByte(typeAnnotationOffsets[typeAnnotationIndex]) < TypeReference.INSTANCEOF) {_      return -1__    }_    return readUnsignedShort(typeAnnotationOffsets[typeAnnotationIndex] + 1)__  };returns,the,bytecode,offset,corresponding,to,the,specified,jvms,structure,or,1,if,there,is,no,such,of,if,it,does,not,have,a,bytecode,offset,param,type,annotation,offsets,the,offset,of,each,entry,in,a,runtime,in,visible,type,annotations,attribute,or,null,param,type,annotation,index,the,index,a,entry,in,type,annotation,offsets,return,bytecode,offset,corresponding,to,the,specified,jvms,structure,or,1,if,there,is,no,such,of,if,it,does,not,have,a,bytecode,offset;private,int,get,type,annotation,bytecode,offset,final,int,type,annotation,offsets,final,int,type,annotation,index,if,type,annotation,offsets,null,type,annotation,index,type,annotation,offsets,length,read,byte,type,annotation,offsets,type,annotation,index,type,reference,instanceof,return,1,return,read,unsigned,short,type,annotation,offsets,type,annotation,index,1
ClassReader -> private int getTypeAnnotationBytecodeOffset(       final int[] typeAnnotationOffsets, final int typeAnnotationIndex);1537204147;Returns the bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or_-1 if there is no such type_annotation of if it does not have a bytecode offset.__@param typeAnnotationOffsets the offset of each 'type_annotation' entry in a_Runtime[In]VisibleTypeAnnotations attribute, or null._@param typeAnnotationIndex the index a 'type_annotation' entry in typeAnnotationOffsets._@return bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or -1_if there is no such type_annotation of if it does not have a bytecode offset.;private int getTypeAnnotationBytecodeOffset(_      final int[] typeAnnotationOffsets, final int typeAnnotationIndex) {_    if (typeAnnotationOffsets == null_        || typeAnnotationIndex >= typeAnnotationOffsets.length_        || readByte(typeAnnotationOffsets[typeAnnotationIndex]) < TypeReference.INSTANCEOF) {_      return -1__    }_    return readUnsignedShort(typeAnnotationOffsets[typeAnnotationIndex] + 1)__  };returns,the,bytecode,offset,corresponding,to,the,specified,jvms,structure,or,1,if,there,is,no,such,of,if,it,does,not,have,a,bytecode,offset,param,type,annotation,offsets,the,offset,of,each,entry,in,a,runtime,in,visible,type,annotations,attribute,or,null,param,type,annotation,index,the,index,a,entry,in,type,annotation,offsets,return,bytecode,offset,corresponding,to,the,specified,jvms,structure,or,1,if,there,is,no,such,of,if,it,does,not,have,a,bytecode,offset;private,int,get,type,annotation,bytecode,offset,final,int,type,annotation,offsets,final,int,type,annotation,index,if,type,annotation,offsets,null,type,annotation,index,type,annotation,offsets,length,read,byte,type,annotation,offsets,type,annotation,index,type,reference,instanceof,return,1,return,read,unsigned,short,type,annotation,offsets,type,annotation,index,1
ClassReader -> private int getTypeAnnotationBytecodeOffset(       final int[] typeAnnotationOffsets, final int typeAnnotationIndex);1539119582;Returns the bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or_-1 if there is no such type_annotation of if it does not have a bytecode offset.__@param typeAnnotationOffsets the offset of each 'type_annotation' entry in a_Runtime[In]VisibleTypeAnnotations attribute, or null._@param typeAnnotationIndex the index a 'type_annotation' entry in typeAnnotationOffsets._@return bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or -1_if there is no such type_annotation of if it does not have a bytecode offset.;private int getTypeAnnotationBytecodeOffset(_      final int[] typeAnnotationOffsets, final int typeAnnotationIndex) {_    if (typeAnnotationOffsets == null_        || typeAnnotationIndex >= typeAnnotationOffsets.length_        || readByte(typeAnnotationOffsets[typeAnnotationIndex]) < TypeReference.INSTANCEOF) {_      return -1__    }_    return readUnsignedShort(typeAnnotationOffsets[typeAnnotationIndex] + 1)__  };returns,the,bytecode,offset,corresponding,to,the,specified,jvms,structure,or,1,if,there,is,no,such,of,if,it,does,not,have,a,bytecode,offset,param,type,annotation,offsets,the,offset,of,each,entry,in,a,runtime,in,visible,type,annotations,attribute,or,null,param,type,annotation,index,the,index,a,entry,in,type,annotation,offsets,return,bytecode,offset,corresponding,to,the,specified,jvms,structure,or,1,if,there,is,no,such,of,if,it,does,not,have,a,bytecode,offset;private,int,get,type,annotation,bytecode,offset,final,int,type,annotation,offsets,final,int,type,annotation,index,if,type,annotation,offsets,null,type,annotation,index,type,annotation,offsets,length,read,byte,type,annotation,offsets,type,annotation,index,type,reference,instanceof,return,1,return,read,unsigned,short,type,annotation,offsets,type,annotation,index,1
ClassReader -> private int getTypeAnnotationBytecodeOffset(       final int[] typeAnnotationOffsets, final int typeAnnotationIndex);1541436263;Returns the bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or_-1 if there is no such type_annotation of if it does not have a bytecode offset.__@param typeAnnotationOffsets the offset of each 'type_annotation' entry in a_Runtime[In]VisibleTypeAnnotations attribute, or null._@param typeAnnotationIndex the index a 'type_annotation' entry in typeAnnotationOffsets._@return bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or -1_if there is no such type_annotation of if it does not have a bytecode offset.;private int getTypeAnnotationBytecodeOffset(_      final int[] typeAnnotationOffsets, final int typeAnnotationIndex) {_    if (typeAnnotationOffsets == null_        || typeAnnotationIndex >= typeAnnotationOffsets.length_        || readByte(typeAnnotationOffsets[typeAnnotationIndex]) < TypeReference.INSTANCEOF) {_      return -1__    }_    return readUnsignedShort(typeAnnotationOffsets[typeAnnotationIndex] + 1)__  };returns,the,bytecode,offset,corresponding,to,the,specified,jvms,structure,or,1,if,there,is,no,such,of,if,it,does,not,have,a,bytecode,offset,param,type,annotation,offsets,the,offset,of,each,entry,in,a,runtime,in,visible,type,annotations,attribute,or,null,param,type,annotation,index,the,index,a,entry,in,type,annotation,offsets,return,bytecode,offset,corresponding,to,the,specified,jvms,structure,or,1,if,there,is,no,such,of,if,it,does,not,have,a,bytecode,offset;private,int,get,type,annotation,bytecode,offset,final,int,type,annotation,offsets,final,int,type,annotation,index,if,type,annotation,offsets,null,type,annotation,index,type,annotation,offsets,length,read,byte,type,annotation,offsets,type,annotation,index,type,reference,instanceof,return,1,return,read,unsigned,short,type,annotation,offsets,type,annotation,index,1
ClassReader -> private int readAnnotationValue(int v, final char[] buf, final String name,             final AnnotationVisitor av);1366718246;Reads a value of an annotation and makes the given visitor visit it.__@param v_the start offset in {@link #b b} of the value to be read_(<i>not including the value name constant pool index</i>)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param name_the name of the value to be read._@param av_the visitor that must visit the value._@return the end offset of the annotation value.;private int readAnnotationValue(int v, final char[] buf, final String name,_            final AnnotationVisitor av) {_        int i__        if (av == null) {_            switch (b[v] & 0xFF) {_            case 'e': _                return v + 5__            case '@': _                return readAnnotationValues(v + 3, buf, true, null)__            case '[': _                return readAnnotationValues(v + 1, buf, false, null)__            default:_                return v + 3__            }_        }_        switch (b[v++] & 0xFF) {_        case 'I': _        case 'J': _        case 'F': _        case 'D': _            av.visit(name, readConst(readUnsignedShort(v), buf))__            v += 2__            break__        case 'B': _            av.visit(name,_                    new Byte((byte) readInt(items[readUnsignedShort(v)])))__            v += 2__            break__        case 'Z': _            av.visit(name,_                    readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE_                            : Boolean.TRUE)__            v += 2__            break__        case 'S': _            av.visit(name, new Short(_                    (short) readInt(items[readUnsignedShort(v)])))__            v += 2__            break__        case 'C': _            av.visit(name, new Character(_                    (char) readInt(items[readUnsignedShort(v)])))__            v += 2__            break__        case 's': _            av.visit(name, readUTF8(v, buf))__            v += 2__            break__        case 'e': _            av.visitEnum(name, readUTF8(v, buf), readUTF8(v + 2, buf))__            v += 4__            break__        case 'c': _            av.visit(name, Type.getType(readUTF8(v, buf)))__            v += 2__            break__        case '@': _            v = readAnnotationValues(v + 2, buf, true,_                    av.visitAnnotation(name, readUTF8(v, buf)))__            break__        case '[': _            int size = readUnsignedShort(v)__            v += 2__            if (size == 0) {_                return readAnnotationValues(v - 2, buf, false,_                        av.visitArray(name))__            }_            switch (this.b[v++] & 0xFF) {_            case 'B':_                byte[] bv = new byte[size]__                for (i = 0_ i < size_ i++) {_                    bv[i] = (byte) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, bv)__                --v__                break__            case 'Z':_                boolean[] zv = new boolean[size]__                for (i = 0_ i < size_ i++) {_                    zv[i] = readInt(items[readUnsignedShort(v)]) != 0__                    v += 3__                }_                av.visit(name, zv)__                --v__                break__            case 'S':_                short[] sv = new short[size]__                for (i = 0_ i < size_ i++) {_                    sv[i] = (short) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, sv)__                --v__                break__            case 'C':_                char[] cv = new char[size]__                for (i = 0_ i < size_ i++) {_                    cv[i] = (char) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, cv)__                --v__                break__            case 'I':_                int[] iv = new int[size]__                for (i = 0_ i < size_ i++) {_                    iv[i] = readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, iv)__                --v__                break__            case 'J':_                long[] lv = new long[size]__                for (i = 0_ i < size_ i++) {_                    lv[i] = readLong(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, lv)__                --v__                break__            case 'F':_                float[] fv = new float[size]__                for (i = 0_ i < size_ i++) {_                    fv[i] = Float_                            .intBitsToFloat(readInt(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, fv)__                --v__                break__            case 'D':_                double[] dv = new double[size]__                for (i = 0_ i < size_ i++) {_                    dv[i] = Double_                            .longBitsToDouble(readLong(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, dv)__                --v__                break__            default:_                v = readAnnotationValues(v - 3, buf, false, av.visitArray(name))__            }_        }_        return v__    };reads,a,value,of,an,annotation,and,makes,the,given,visitor,visit,it,param,v,the,start,offset,in,link,b,b,of,the,value,to,be,read,i,not,including,the,value,name,constant,pool,index,i,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,name,the,name,of,the,value,to,be,read,param,av,the,visitor,that,must,visit,the,value,return,the,end,offset,of,the,annotation,value;private,int,read,annotation,value,int,v,final,char,buf,final,string,name,final,annotation,visitor,av,int,i,if,av,null,switch,b,v,0x,ff,case,e,return,v,5,case,return,read,annotation,values,v,3,buf,true,null,case,return,read,annotation,values,v,1,buf,false,null,default,return,v,3,switch,b,v,0x,ff,case,i,case,j,case,f,case,d,av,visit,name,read,const,read,unsigned,short,v,buf,v,2,break,case,b,av,visit,name,new,byte,byte,read,int,items,read,unsigned,short,v,v,2,break,case,z,av,visit,name,read,int,items,read,unsigned,short,v,0,boolean,false,boolean,true,v,2,break,case,s,av,visit,name,new,short,short,read,int,items,read,unsigned,short,v,v,2,break,case,c,av,visit,name,new,character,char,read,int,items,read,unsigned,short,v,v,2,break,case,s,av,visit,name,read,utf8,v,buf,v,2,break,case,e,av,visit,enum,name,read,utf8,v,buf,read,utf8,v,2,buf,v,4,break,case,c,av,visit,name,type,get,type,read,utf8,v,buf,v,2,break,case,v,read,annotation,values,v,2,buf,true,av,visit,annotation,name,read,utf8,v,buf,break,case,int,size,read,unsigned,short,v,v,2,if,size,0,return,read,annotation,values,v,2,buf,false,av,visit,array,name,switch,this,b,v,0x,ff,case,b,byte,bv,new,byte,size,for,i,0,i,size,i,bv,i,byte,read,int,items,read,unsigned,short,v,v,3,av,visit,name,bv,v,break,case,z,boolean,zv,new,boolean,size,for,i,0,i,size,i,zv,i,read,int,items,read,unsigned,short,v,0,v,3,av,visit,name,zv,v,break,case,s,short,sv,new,short,size,for,i,0,i,size,i,sv,i,short,read,int,items,read,unsigned,short,v,v,3,av,visit,name,sv,v,break,case,c,char,cv,new,char,size,for,i,0,i,size,i,cv,i,char,read,int,items,read,unsigned,short,v,v,3,av,visit,name,cv,v,break,case,i,int,iv,new,int,size,for,i,0,i,size,i,iv,i,read,int,items,read,unsigned,short,v,v,3,av,visit,name,iv,v,break,case,j,long,lv,new,long,size,for,i,0,i,size,i,lv,i,read,long,items,read,unsigned,short,v,v,3,av,visit,name,lv,v,break,case,f,float,fv,new,float,size,for,i,0,i,size,i,fv,i,float,int,bits,to,float,read,int,items,read,unsigned,short,v,v,3,av,visit,name,fv,v,break,case,d,double,dv,new,double,size,for,i,0,i,size,i,dv,i,double,long,bits,to,double,read,long,items,read,unsigned,short,v,v,3,av,visit,name,dv,v,break,default,v,read,annotation,values,v,3,buf,false,av,visit,array,name,return,v
ClassReader -> private int readAnnotationValue(int v, final char[] buf, final String name,             final AnnotationVisitor av);1395273982;Reads a value of an annotation and makes the given visitor visit it.__@param v_the start offset in {@link #b b} of the value to be read_(<i>not including the value name constant pool index</i>)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param name_the name of the value to be read._@param av_the visitor that must visit the value._@return the end offset of the annotation value.;private int readAnnotationValue(int v, final char[] buf, final String name,_            final AnnotationVisitor av) {_        int i__        if (av == null) {_            switch (b[v] & 0xFF) {_            case 'e': _                return v + 5__            case '@': _                return readAnnotationValues(v + 3, buf, true, null)__            case '[': _                return readAnnotationValues(v + 1, buf, false, null)__            default:_                return v + 3__            }_        }_        switch (b[v++] & 0xFF) {_        case 'I': _        case 'J': _        case 'F': _        case 'D': _            av.visit(name, readConst(readUnsignedShort(v), buf))__            v += 2__            break__        case 'B': _            av.visit(name,_                    new Byte((byte) readInt(items[readUnsignedShort(v)])))__            v += 2__            break__        case 'Z': _            av.visit(name,_                    readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE_                            : Boolean.TRUE)__            v += 2__            break__        case 'S': _            av.visit(name, new Short(_                    (short) readInt(items[readUnsignedShort(v)])))__            v += 2__            break__        case 'C': _            av.visit(name, new Character(_                    (char) readInt(items[readUnsignedShort(v)])))__            v += 2__            break__        case 's': _            av.visit(name, readUTF8(v, buf))__            v += 2__            break__        case 'e': _            av.visitEnum(name, readUTF8(v, buf), readUTF8(v + 2, buf))__            v += 4__            break__        case 'c': _            av.visit(name, Type.getType(readUTF8(v, buf)))__            v += 2__            break__        case '@': _            v = readAnnotationValues(v + 2, buf, true,_                    av.visitAnnotation(name, readUTF8(v, buf)))__            break__        case '[': _            int size = readUnsignedShort(v)__            v += 2__            if (size == 0) {_                return readAnnotationValues(v - 2, buf, false,_                        av.visitArray(name))__            }_            switch (this.b[v++] & 0xFF) {_            case 'B':_                byte[] bv = new byte[size]__                for (i = 0_ i < size_ i++) {_                    bv[i] = (byte) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, bv)__                --v__                break__            case 'Z':_                boolean[] zv = new boolean[size]__                for (i = 0_ i < size_ i++) {_                    zv[i] = readInt(items[readUnsignedShort(v)]) != 0__                    v += 3__                }_                av.visit(name, zv)__                --v__                break__            case 'S':_                short[] sv = new short[size]__                for (i = 0_ i < size_ i++) {_                    sv[i] = (short) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, sv)__                --v__                break__            case 'C':_                char[] cv = new char[size]__                for (i = 0_ i < size_ i++) {_                    cv[i] = (char) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, cv)__                --v__                break__            case 'I':_                int[] iv = new int[size]__                for (i = 0_ i < size_ i++) {_                    iv[i] = readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, iv)__                --v__                break__            case 'J':_                long[] lv = new long[size]__                for (i = 0_ i < size_ i++) {_                    lv[i] = readLong(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, lv)__                --v__                break__            case 'F':_                float[] fv = new float[size]__                for (i = 0_ i < size_ i++) {_                    fv[i] = Float_                            .intBitsToFloat(readInt(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, fv)__                --v__                break__            case 'D':_                double[] dv = new double[size]__                for (i = 0_ i < size_ i++) {_                    dv[i] = Double_                            .longBitsToDouble(readLong(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, dv)__                --v__                break__            default:_                v = readAnnotationValues(v - 3, buf, false, av.visitArray(name))__            }_        }_        return v__    };reads,a,value,of,an,annotation,and,makes,the,given,visitor,visit,it,param,v,the,start,offset,in,link,b,b,of,the,value,to,be,read,i,not,including,the,value,name,constant,pool,index,i,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,name,the,name,of,the,value,to,be,read,param,av,the,visitor,that,must,visit,the,value,return,the,end,offset,of,the,annotation,value;private,int,read,annotation,value,int,v,final,char,buf,final,string,name,final,annotation,visitor,av,int,i,if,av,null,switch,b,v,0x,ff,case,e,return,v,5,case,return,read,annotation,values,v,3,buf,true,null,case,return,read,annotation,values,v,1,buf,false,null,default,return,v,3,switch,b,v,0x,ff,case,i,case,j,case,f,case,d,av,visit,name,read,const,read,unsigned,short,v,buf,v,2,break,case,b,av,visit,name,new,byte,byte,read,int,items,read,unsigned,short,v,v,2,break,case,z,av,visit,name,read,int,items,read,unsigned,short,v,0,boolean,false,boolean,true,v,2,break,case,s,av,visit,name,new,short,short,read,int,items,read,unsigned,short,v,v,2,break,case,c,av,visit,name,new,character,char,read,int,items,read,unsigned,short,v,v,2,break,case,s,av,visit,name,read,utf8,v,buf,v,2,break,case,e,av,visit,enum,name,read,utf8,v,buf,read,utf8,v,2,buf,v,4,break,case,c,av,visit,name,type,get,type,read,utf8,v,buf,v,2,break,case,v,read,annotation,values,v,2,buf,true,av,visit,annotation,name,read,utf8,v,buf,break,case,int,size,read,unsigned,short,v,v,2,if,size,0,return,read,annotation,values,v,2,buf,false,av,visit,array,name,switch,this,b,v,0x,ff,case,b,byte,bv,new,byte,size,for,i,0,i,size,i,bv,i,byte,read,int,items,read,unsigned,short,v,v,3,av,visit,name,bv,v,break,case,z,boolean,zv,new,boolean,size,for,i,0,i,size,i,zv,i,read,int,items,read,unsigned,short,v,0,v,3,av,visit,name,zv,v,break,case,s,short,sv,new,short,size,for,i,0,i,size,i,sv,i,short,read,int,items,read,unsigned,short,v,v,3,av,visit,name,sv,v,break,case,c,char,cv,new,char,size,for,i,0,i,size,i,cv,i,char,read,int,items,read,unsigned,short,v,v,3,av,visit,name,cv,v,break,case,i,int,iv,new,int,size,for,i,0,i,size,i,iv,i,read,int,items,read,unsigned,short,v,v,3,av,visit,name,iv,v,break,case,j,long,lv,new,long,size,for,i,0,i,size,i,lv,i,read,long,items,read,unsigned,short,v,v,3,av,visit,name,lv,v,break,case,f,float,fv,new,float,size,for,i,0,i,size,i,fv,i,float,int,bits,to,float,read,int,items,read,unsigned,short,v,v,3,av,visit,name,fv,v,break,case,d,double,dv,new,double,size,for,i,0,i,size,i,dv,i,double,long,bits,to,double,read,long,items,read,unsigned,short,v,v,3,av,visit,name,dv,v,break,default,v,read,annotation,values,v,3,buf,false,av,visit,array,name,return,v
ClassReader -> private int readAnnotationValue(int v, final char[] buf, final String name,             final AnnotationVisitor av);1414067099;Reads a value of an annotation and makes the given visitor visit it.__@param v_the start offset in {@link #b b} of the value to be read_(<i>not including the value name constant pool index</i>)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param name_the name of the value to be read._@param av_the visitor that must visit the value._@return the end offset of the annotation value.;private int readAnnotationValue(int v, final char[] buf, final String name,_            final AnnotationVisitor av) {_        int i__        if (av == null) {_            switch (b[v] & 0xFF) {_            case 'e': _                return v + 5__            case '@': _                return readAnnotationValues(v + 3, buf, true, null)__            case '[': _                return readAnnotationValues(v + 1, buf, false, null)__            default:_                return v + 3__            }_        }_        switch (b[v++] & 0xFF) {_        case 'I': _        case 'J': _        case 'F': _        case 'D': _            av.visit(name, readConst(readUnsignedShort(v), buf))__            v += 2__            break__        case 'B': _            av.visit(name, (byte) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'Z': _            av.visit(name, readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE)__            v += 2__            break__        case 'S': _            av.visit(name, (short) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'C': _            av.visit(name, (char) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 's': _            av.visit(name, readUTF8(v, buf))__            v += 2__            break__        case 'e': _            av.visitEnum(name, readUTF8(v, buf), readUTF8(v + 2, buf))__            v += 4__            break__        case 'c': _            av.visit(name, Type.getType(readUTF8(v, buf)))__            v += 2__            break__        case '@': _            v = readAnnotationValues(v + 2, buf, true,_                    av.visitAnnotation(name, readUTF8(v, buf)))__            break__        case '[': _            int size = readUnsignedShort(v)__            v += 2__            if (size == 0) {_                return readAnnotationValues(v - 2, buf, false,_                        av.visitArray(name))__            }_            switch (this.b[v++] & 0xFF) {_            case 'B':_                byte[] bv = new byte[size]__                for (i = 0_ i < size_ i++) {_                    bv[i] = (byte) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, bv)__                --v__                break__            case 'Z':_                boolean[] zv = new boolean[size]__                for (i = 0_ i < size_ i++) {_                    zv[i] = readInt(items[readUnsignedShort(v)]) != 0__                    v += 3__                }_                av.visit(name, zv)__                --v__                break__            case 'S':_                short[] sv = new short[size]__                for (i = 0_ i < size_ i++) {_                    sv[i] = (short) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, sv)__                --v__                break__            case 'C':_                char[] cv = new char[size]__                for (i = 0_ i < size_ i++) {_                    cv[i] = (char) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, cv)__                --v__                break__            case 'I':_                int[] iv = new int[size]__                for (i = 0_ i < size_ i++) {_                    iv[i] = readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, iv)__                --v__                break__            case 'J':_                long[] lv = new long[size]__                for (i = 0_ i < size_ i++) {_                    lv[i] = readLong(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, lv)__                --v__                break__            case 'F':_                float[] fv = new float[size]__                for (i = 0_ i < size_ i++) {_                    fv[i] = Float_                            .intBitsToFloat(readInt(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, fv)__                --v__                break__            case 'D':_                double[] dv = new double[size]__                for (i = 0_ i < size_ i++) {_                    dv[i] = Double_                            .longBitsToDouble(readLong(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, dv)__                --v__                break__            default:_                v = readAnnotationValues(v - 3, buf, false, av.visitArray(name))__            }_        }_        return v__    };reads,a,value,of,an,annotation,and,makes,the,given,visitor,visit,it,param,v,the,start,offset,in,link,b,b,of,the,value,to,be,read,i,not,including,the,value,name,constant,pool,index,i,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,name,the,name,of,the,value,to,be,read,param,av,the,visitor,that,must,visit,the,value,return,the,end,offset,of,the,annotation,value;private,int,read,annotation,value,int,v,final,char,buf,final,string,name,final,annotation,visitor,av,int,i,if,av,null,switch,b,v,0x,ff,case,e,return,v,5,case,return,read,annotation,values,v,3,buf,true,null,case,return,read,annotation,values,v,1,buf,false,null,default,return,v,3,switch,b,v,0x,ff,case,i,case,j,case,f,case,d,av,visit,name,read,const,read,unsigned,short,v,buf,v,2,break,case,b,av,visit,name,byte,read,int,items,read,unsigned,short,v,v,2,break,case,z,av,visit,name,read,int,items,read,unsigned,short,v,0,boolean,false,boolean,true,v,2,break,case,s,av,visit,name,short,read,int,items,read,unsigned,short,v,v,2,break,case,c,av,visit,name,char,read,int,items,read,unsigned,short,v,v,2,break,case,s,av,visit,name,read,utf8,v,buf,v,2,break,case,e,av,visit,enum,name,read,utf8,v,buf,read,utf8,v,2,buf,v,4,break,case,c,av,visit,name,type,get,type,read,utf8,v,buf,v,2,break,case,v,read,annotation,values,v,2,buf,true,av,visit,annotation,name,read,utf8,v,buf,break,case,int,size,read,unsigned,short,v,v,2,if,size,0,return,read,annotation,values,v,2,buf,false,av,visit,array,name,switch,this,b,v,0x,ff,case,b,byte,bv,new,byte,size,for,i,0,i,size,i,bv,i,byte,read,int,items,read,unsigned,short,v,v,3,av,visit,name,bv,v,break,case,z,boolean,zv,new,boolean,size,for,i,0,i,size,i,zv,i,read,int,items,read,unsigned,short,v,0,v,3,av,visit,name,zv,v,break,case,s,short,sv,new,short,size,for,i,0,i,size,i,sv,i,short,read,int,items,read,unsigned,short,v,v,3,av,visit,name,sv,v,break,case,c,char,cv,new,char,size,for,i,0,i,size,i,cv,i,char,read,int,items,read,unsigned,short,v,v,3,av,visit,name,cv,v,break,case,i,int,iv,new,int,size,for,i,0,i,size,i,iv,i,read,int,items,read,unsigned,short,v,v,3,av,visit,name,iv,v,break,case,j,long,lv,new,long,size,for,i,0,i,size,i,lv,i,read,long,items,read,unsigned,short,v,v,3,av,visit,name,lv,v,break,case,f,float,fv,new,float,size,for,i,0,i,size,i,fv,i,float,int,bits,to,float,read,int,items,read,unsigned,short,v,v,3,av,visit,name,fv,v,break,case,d,double,dv,new,double,size,for,i,0,i,size,i,dv,i,double,long,bits,to,double,read,long,items,read,unsigned,short,v,v,3,av,visit,name,dv,v,break,default,v,read,annotation,values,v,3,buf,false,av,visit,array,name,return,v
ClassReader -> private int readAnnotationValue(int v, final char[] buf, final String name,             final AnnotationVisitor av);1414499035;Reads a value of an annotation and makes the given visitor visit it.__@param v_the start offset in {@link #b b} of the value to be read_(<i>not including the value name constant pool index</i>)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param name_the name of the value to be read._@param av_the visitor that must visit the value._@return the end offset of the annotation value.;private int readAnnotationValue(int v, final char[] buf, final String name,_            final AnnotationVisitor av) {_        int i__        if (av == null) {_            switch (b[v] & 0xFF) {_            case 'e': _                return v + 5__            case '@': _                return readAnnotationValues(v + 3, buf, true, null)__            case '[': _                return readAnnotationValues(v + 1, buf, false, null)__            default:_                return v + 3__            }_        }_        switch (b[v++] & 0xFF) {_        case 'I': _        case 'J': _        case 'F': _        case 'D': _            av.visit(name, readConst(readUnsignedShort(v), buf))__            v += 2__            break__        case 'B': _            av.visit(name, (byte) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'Z': _            av.visit(name, readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE)__            v += 2__            break__        case 'S': _            av.visit(name, (short) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'C': _            av.visit(name, (char) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 's': _            av.visit(name, readUTF8(v, buf))__            v += 2__            break__        case 'e': _            av.visitEnum(name, readUTF8(v, buf), readUTF8(v + 2, buf))__            v += 4__            break__        case 'c': _            av.visit(name, Type.getType(readUTF8(v, buf)))__            v += 2__            break__        case '@': _            v = readAnnotationValues(v + 2, buf, true,_                    av.visitAnnotation(name, readUTF8(v, buf)))__            break__        case '[': _            int size = readUnsignedShort(v)__            v += 2__            if (size == 0) {_                return readAnnotationValues(v - 2, buf, false,_                        av.visitArray(name))__            }_            switch (this.b[v++] & 0xFF) {_            case 'B':_                byte[] bv = new byte[size]__                for (i = 0_ i < size_ i++) {_                    bv[i] = (byte) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, bv)__                --v__                break__            case 'Z':_                boolean[] zv = new boolean[size]__                for (i = 0_ i < size_ i++) {_                    zv[i] = readInt(items[readUnsignedShort(v)]) != 0__                    v += 3__                }_                av.visit(name, zv)__                --v__                break__            case 'S':_                short[] sv = new short[size]__                for (i = 0_ i < size_ i++) {_                    sv[i] = (short) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, sv)__                --v__                break__            case 'C':_                char[] cv = new char[size]__                for (i = 0_ i < size_ i++) {_                    cv[i] = (char) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, cv)__                --v__                break__            case 'I':_                int[] iv = new int[size]__                for (i = 0_ i < size_ i++) {_                    iv[i] = readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, iv)__                --v__                break__            case 'J':_                long[] lv = new long[size]__                for (i = 0_ i < size_ i++) {_                    lv[i] = readLong(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, lv)__                --v__                break__            case 'F':_                float[] fv = new float[size]__                for (i = 0_ i < size_ i++) {_                    fv[i] = Float_                            .intBitsToFloat(readInt(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, fv)__                --v__                break__            case 'D':_                double[] dv = new double[size]__                for (i = 0_ i < size_ i++) {_                    dv[i] = Double_                            .longBitsToDouble(readLong(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, dv)__                --v__                break__            default:_                v = readAnnotationValues(v - 3, buf, false, av.visitArray(name))__            }_        }_        return v__    };reads,a,value,of,an,annotation,and,makes,the,given,visitor,visit,it,param,v,the,start,offset,in,link,b,b,of,the,value,to,be,read,i,not,including,the,value,name,constant,pool,index,i,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,name,the,name,of,the,value,to,be,read,param,av,the,visitor,that,must,visit,the,value,return,the,end,offset,of,the,annotation,value;private,int,read,annotation,value,int,v,final,char,buf,final,string,name,final,annotation,visitor,av,int,i,if,av,null,switch,b,v,0x,ff,case,e,return,v,5,case,return,read,annotation,values,v,3,buf,true,null,case,return,read,annotation,values,v,1,buf,false,null,default,return,v,3,switch,b,v,0x,ff,case,i,case,j,case,f,case,d,av,visit,name,read,const,read,unsigned,short,v,buf,v,2,break,case,b,av,visit,name,byte,read,int,items,read,unsigned,short,v,v,2,break,case,z,av,visit,name,read,int,items,read,unsigned,short,v,0,boolean,false,boolean,true,v,2,break,case,s,av,visit,name,short,read,int,items,read,unsigned,short,v,v,2,break,case,c,av,visit,name,char,read,int,items,read,unsigned,short,v,v,2,break,case,s,av,visit,name,read,utf8,v,buf,v,2,break,case,e,av,visit,enum,name,read,utf8,v,buf,read,utf8,v,2,buf,v,4,break,case,c,av,visit,name,type,get,type,read,utf8,v,buf,v,2,break,case,v,read,annotation,values,v,2,buf,true,av,visit,annotation,name,read,utf8,v,buf,break,case,int,size,read,unsigned,short,v,v,2,if,size,0,return,read,annotation,values,v,2,buf,false,av,visit,array,name,switch,this,b,v,0x,ff,case,b,byte,bv,new,byte,size,for,i,0,i,size,i,bv,i,byte,read,int,items,read,unsigned,short,v,v,3,av,visit,name,bv,v,break,case,z,boolean,zv,new,boolean,size,for,i,0,i,size,i,zv,i,read,int,items,read,unsigned,short,v,0,v,3,av,visit,name,zv,v,break,case,s,short,sv,new,short,size,for,i,0,i,size,i,sv,i,short,read,int,items,read,unsigned,short,v,v,3,av,visit,name,sv,v,break,case,c,char,cv,new,char,size,for,i,0,i,size,i,cv,i,char,read,int,items,read,unsigned,short,v,v,3,av,visit,name,cv,v,break,case,i,int,iv,new,int,size,for,i,0,i,size,i,iv,i,read,int,items,read,unsigned,short,v,v,3,av,visit,name,iv,v,break,case,j,long,lv,new,long,size,for,i,0,i,size,i,lv,i,read,long,items,read,unsigned,short,v,v,3,av,visit,name,lv,v,break,case,f,float,fv,new,float,size,for,i,0,i,size,i,fv,i,float,int,bits,to,float,read,int,items,read,unsigned,short,v,v,3,av,visit,name,fv,v,break,case,d,double,dv,new,double,size,for,i,0,i,size,i,dv,i,double,long,bits,to,double,read,long,items,read,unsigned,short,v,v,3,av,visit,name,dv,v,break,default,v,read,annotation,values,v,3,buf,false,av,visit,array,name,return,v
ClassReader -> private int readAnnotationValue(int v, final char[] buf, final String name,             final AnnotationVisitor av);1416998550;Reads a value of an annotation and makes the given visitor visit it.__@param v_the start offset in {@link #b b} of the value to be read_(<i>not including the value name constant pool index</i>)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param name_the name of the value to be read._@param av_the visitor that must visit the value._@return the end offset of the annotation value.;private int readAnnotationValue(int v, final char[] buf, final String name,_            final AnnotationVisitor av) {_        int i__        if (av == null) {_            switch (b[v] & 0xFF) {_            case 'e': _                return v + 5__            case '@': _                return readAnnotationValues(v + 3, buf, true, null)__            case '[': _                return readAnnotationValues(v + 1, buf, false, null)__            default:_                return v + 3__            }_        }_        switch (b[v++] & 0xFF) {_        case 'I': _        case 'J': _        case 'F': _        case 'D': _            av.visit(name, readConst(readUnsignedShort(v), buf))__            v += 2__            break__        case 'B': _            av.visit(name, (byte) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'Z': _            av.visit(name, readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE)__            v += 2__            break__        case 'S': _            av.visit(name, (short) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'C': _            av.visit(name, (char) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 's': _            av.visit(name, readUTF8(v, buf))__            v += 2__            break__        case 'e': _            av.visitEnum(name, readUTF8(v, buf), readUTF8(v + 2, buf))__            v += 4__            break__        case 'c': _            av.visit(name, Type.getType(readUTF8(v, buf)))__            v += 2__            break__        case '@': _            v = readAnnotationValues(v + 2, buf, true,_                    av.visitAnnotation(name, readUTF8(v, buf)))__            break__        case '[': _            int size = readUnsignedShort(v)__            v += 2__            if (size == 0) {_                return readAnnotationValues(v - 2, buf, false,_                        av.visitArray(name))__            }_            switch (this.b[v++] & 0xFF) {_            case 'B':_                byte[] bv = new byte[size]__                for (i = 0_ i < size_ i++) {_                    bv[i] = (byte) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, bv)__                --v__                break__            case 'Z':_                boolean[] zv = new boolean[size]__                for (i = 0_ i < size_ i++) {_                    zv[i] = readInt(items[readUnsignedShort(v)]) != 0__                    v += 3__                }_                av.visit(name, zv)__                --v__                break__            case 'S':_                short[] sv = new short[size]__                for (i = 0_ i < size_ i++) {_                    sv[i] = (short) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, sv)__                --v__                break__            case 'C':_                char[] cv = new char[size]__                for (i = 0_ i < size_ i++) {_                    cv[i] = (char) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, cv)__                --v__                break__            case 'I':_                int[] iv = new int[size]__                for (i = 0_ i < size_ i++) {_                    iv[i] = readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, iv)__                --v__                break__            case 'J':_                long[] lv = new long[size]__                for (i = 0_ i < size_ i++) {_                    lv[i] = readLong(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, lv)__                --v__                break__            case 'F':_                float[] fv = new float[size]__                for (i = 0_ i < size_ i++) {_                    fv[i] = Float_                            .intBitsToFloat(readInt(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, fv)__                --v__                break__            case 'D':_                double[] dv = new double[size]__                for (i = 0_ i < size_ i++) {_                    dv[i] = Double_                            .longBitsToDouble(readLong(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, dv)__                --v__                break__            default:_                v = readAnnotationValues(v - 3, buf, false, av.visitArray(name))__            }_        }_        return v__    };reads,a,value,of,an,annotation,and,makes,the,given,visitor,visit,it,param,v,the,start,offset,in,link,b,b,of,the,value,to,be,read,i,not,including,the,value,name,constant,pool,index,i,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,name,the,name,of,the,value,to,be,read,param,av,the,visitor,that,must,visit,the,value,return,the,end,offset,of,the,annotation,value;private,int,read,annotation,value,int,v,final,char,buf,final,string,name,final,annotation,visitor,av,int,i,if,av,null,switch,b,v,0x,ff,case,e,return,v,5,case,return,read,annotation,values,v,3,buf,true,null,case,return,read,annotation,values,v,1,buf,false,null,default,return,v,3,switch,b,v,0x,ff,case,i,case,j,case,f,case,d,av,visit,name,read,const,read,unsigned,short,v,buf,v,2,break,case,b,av,visit,name,byte,read,int,items,read,unsigned,short,v,v,2,break,case,z,av,visit,name,read,int,items,read,unsigned,short,v,0,boolean,false,boolean,true,v,2,break,case,s,av,visit,name,short,read,int,items,read,unsigned,short,v,v,2,break,case,c,av,visit,name,char,read,int,items,read,unsigned,short,v,v,2,break,case,s,av,visit,name,read,utf8,v,buf,v,2,break,case,e,av,visit,enum,name,read,utf8,v,buf,read,utf8,v,2,buf,v,4,break,case,c,av,visit,name,type,get,type,read,utf8,v,buf,v,2,break,case,v,read,annotation,values,v,2,buf,true,av,visit,annotation,name,read,utf8,v,buf,break,case,int,size,read,unsigned,short,v,v,2,if,size,0,return,read,annotation,values,v,2,buf,false,av,visit,array,name,switch,this,b,v,0x,ff,case,b,byte,bv,new,byte,size,for,i,0,i,size,i,bv,i,byte,read,int,items,read,unsigned,short,v,v,3,av,visit,name,bv,v,break,case,z,boolean,zv,new,boolean,size,for,i,0,i,size,i,zv,i,read,int,items,read,unsigned,short,v,0,v,3,av,visit,name,zv,v,break,case,s,short,sv,new,short,size,for,i,0,i,size,i,sv,i,short,read,int,items,read,unsigned,short,v,v,3,av,visit,name,sv,v,break,case,c,char,cv,new,char,size,for,i,0,i,size,i,cv,i,char,read,int,items,read,unsigned,short,v,v,3,av,visit,name,cv,v,break,case,i,int,iv,new,int,size,for,i,0,i,size,i,iv,i,read,int,items,read,unsigned,short,v,v,3,av,visit,name,iv,v,break,case,j,long,lv,new,long,size,for,i,0,i,size,i,lv,i,read,long,items,read,unsigned,short,v,v,3,av,visit,name,lv,v,break,case,f,float,fv,new,float,size,for,i,0,i,size,i,fv,i,float,int,bits,to,float,read,int,items,read,unsigned,short,v,v,3,av,visit,name,fv,v,break,case,d,double,dv,new,double,size,for,i,0,i,size,i,dv,i,double,long,bits,to,double,read,long,items,read,unsigned,short,v,v,3,av,visit,name,dv,v,break,default,v,read,annotation,values,v,3,buf,false,av,visit,array,name,return,v
ClassReader -> private int readAnnotationValue(int v, final char[] buf, final String name,             final AnnotationVisitor av);1457705343;Reads a value of an annotation and makes the given visitor visit it.__@param v_the start offset in {@link #b b} of the value to be read_(<i>not including the value name constant pool index</i>)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param name_the name of the value to be read._@param av_the visitor that must visit the value._@return the end offset of the annotation value.;private int readAnnotationValue(int v, final char[] buf, final String name,_            final AnnotationVisitor av) {_        int i__        if (av == null) {_            switch (b[v] & 0xFF) {_            case 'e': _                return v + 5__            case '@': _                return readAnnotationValues(v + 3, buf, true, null)__            case '[': _                return readAnnotationValues(v + 1, buf, false, null)__            default:_                return v + 3__            }_        }_        switch (b[v++] & 0xFF) {_        case 'I': _        case 'J': _        case 'F': _        case 'D': _            av.visit(name, readConst(readUnsignedShort(v), buf))__            v += 2__            break__        case 'B': _            av.visit(name, (byte) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'Z': _            av.visit(name, readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE)__            v += 2__            break__        case 'S': _            av.visit(name, (short) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'C': _            av.visit(name, (char) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 's': _            av.visit(name, readUTF8(v, buf))__            v += 2__            break__        case 'e': _            av.visitEnum(name, readUTF8(v, buf), readUTF8(v + 2, buf))__            v += 4__            break__        case 'c': _            av.visit(name, Type.getType(readUTF8(v, buf)))__            v += 2__            break__        case '@': _            v = readAnnotationValues(v + 2, buf, true,_                    av.visitAnnotation(name, readUTF8(v, buf)))__            break__        case '[': _            int size = readUnsignedShort(v)__            v += 2__            if (size == 0) {_                return readAnnotationValues(v - 2, buf, false,_                        av.visitArray(name))__            }_            switch (this.b[v++] & 0xFF) {_            case 'B':_                byte[] bv = new byte[size]__                for (i = 0_ i < size_ i++) {_                    bv[i] = (byte) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, bv)__                --v__                break__            case 'Z':_                boolean[] zv = new boolean[size]__                for (i = 0_ i < size_ i++) {_                    zv[i] = readInt(items[readUnsignedShort(v)]) != 0__                    v += 3__                }_                av.visit(name, zv)__                --v__                break__            case 'S':_                short[] sv = new short[size]__                for (i = 0_ i < size_ i++) {_                    sv[i] = (short) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, sv)__                --v__                break__            case 'C':_                char[] cv = new char[size]__                for (i = 0_ i < size_ i++) {_                    cv[i] = (char) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, cv)__                --v__                break__            case 'I':_                int[] iv = new int[size]__                for (i = 0_ i < size_ i++) {_                    iv[i] = readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, iv)__                --v__                break__            case 'J':_                long[] lv = new long[size]__                for (i = 0_ i < size_ i++) {_                    lv[i] = readLong(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, lv)__                --v__                break__            case 'F':_                float[] fv = new float[size]__                for (i = 0_ i < size_ i++) {_                    fv[i] = Float_                            .intBitsToFloat(readInt(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, fv)__                --v__                break__            case 'D':_                double[] dv = new double[size]__                for (i = 0_ i < size_ i++) {_                    dv[i] = Double_                            .longBitsToDouble(readLong(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, dv)__                --v__                break__            default:_                v = readAnnotationValues(v - 3, buf, false, av.visitArray(name))__            }_        }_        return v__    };reads,a,value,of,an,annotation,and,makes,the,given,visitor,visit,it,param,v,the,start,offset,in,link,b,b,of,the,value,to,be,read,i,not,including,the,value,name,constant,pool,index,i,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,name,the,name,of,the,value,to,be,read,param,av,the,visitor,that,must,visit,the,value,return,the,end,offset,of,the,annotation,value;private,int,read,annotation,value,int,v,final,char,buf,final,string,name,final,annotation,visitor,av,int,i,if,av,null,switch,b,v,0x,ff,case,e,return,v,5,case,return,read,annotation,values,v,3,buf,true,null,case,return,read,annotation,values,v,1,buf,false,null,default,return,v,3,switch,b,v,0x,ff,case,i,case,j,case,f,case,d,av,visit,name,read,const,read,unsigned,short,v,buf,v,2,break,case,b,av,visit,name,byte,read,int,items,read,unsigned,short,v,v,2,break,case,z,av,visit,name,read,int,items,read,unsigned,short,v,0,boolean,false,boolean,true,v,2,break,case,s,av,visit,name,short,read,int,items,read,unsigned,short,v,v,2,break,case,c,av,visit,name,char,read,int,items,read,unsigned,short,v,v,2,break,case,s,av,visit,name,read,utf8,v,buf,v,2,break,case,e,av,visit,enum,name,read,utf8,v,buf,read,utf8,v,2,buf,v,4,break,case,c,av,visit,name,type,get,type,read,utf8,v,buf,v,2,break,case,v,read,annotation,values,v,2,buf,true,av,visit,annotation,name,read,utf8,v,buf,break,case,int,size,read,unsigned,short,v,v,2,if,size,0,return,read,annotation,values,v,2,buf,false,av,visit,array,name,switch,this,b,v,0x,ff,case,b,byte,bv,new,byte,size,for,i,0,i,size,i,bv,i,byte,read,int,items,read,unsigned,short,v,v,3,av,visit,name,bv,v,break,case,z,boolean,zv,new,boolean,size,for,i,0,i,size,i,zv,i,read,int,items,read,unsigned,short,v,0,v,3,av,visit,name,zv,v,break,case,s,short,sv,new,short,size,for,i,0,i,size,i,sv,i,short,read,int,items,read,unsigned,short,v,v,3,av,visit,name,sv,v,break,case,c,char,cv,new,char,size,for,i,0,i,size,i,cv,i,char,read,int,items,read,unsigned,short,v,v,3,av,visit,name,cv,v,break,case,i,int,iv,new,int,size,for,i,0,i,size,i,iv,i,read,int,items,read,unsigned,short,v,v,3,av,visit,name,iv,v,break,case,j,long,lv,new,long,size,for,i,0,i,size,i,lv,i,read,long,items,read,unsigned,short,v,v,3,av,visit,name,lv,v,break,case,f,float,fv,new,float,size,for,i,0,i,size,i,fv,i,float,int,bits,to,float,read,int,items,read,unsigned,short,v,v,3,av,visit,name,fv,v,break,case,d,double,dv,new,double,size,for,i,0,i,size,i,dv,i,double,long,bits,to,double,read,long,items,read,unsigned,short,v,v,3,av,visit,name,dv,v,break,default,v,read,annotation,values,v,3,buf,false,av,visit,array,name,return,v
ClassReader -> private int readAnnotationValue(int v, final char[] buf, final String name,             final AnnotationVisitor av);1459258703;Reads a value of an annotation and makes the given visitor visit it.__@param v_the start offset in {@link #b b} of the value to be read_(<i>not including the value name constant pool index</i>)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param name_the name of the value to be read._@param av_the visitor that must visit the value._@return the end offset of the annotation value.;private int readAnnotationValue(int v, final char[] buf, final String name,_            final AnnotationVisitor av) {_        int i__        if (av == null) {_            switch (b[v] & 0xFF) {_            case 'e': _                return v + 5__            case '@': _                return readAnnotationValues(v + 3, buf, true, null)__            case '[': _                return readAnnotationValues(v + 1, buf, false, null)__            default:_                return v + 3__            }_        }_        switch (b[v++] & 0xFF) {_        case 'I': _        case 'J': _        case 'F': _        case 'D': _            av.visit(name, readConst(readUnsignedShort(v), buf))__            v += 2__            break__        case 'B': _            av.visit(name, (byte) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'Z': _            av.visit(name, readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE)__            v += 2__            break__        case 'S': _            av.visit(name, (short) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'C': _            av.visit(name, (char) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 's': _            av.visit(name, readUTF8(v, buf))__            v += 2__            break__        case 'e': _            av.visitEnum(name, readUTF8(v, buf), readUTF8(v + 2, buf))__            v += 4__            break__        case 'c': _            av.visit(name, Type.getType(readUTF8(v, buf)))__            v += 2__            break__        case '@': _            v = readAnnotationValues(v + 2, buf, true,_                    av.visitAnnotation(name, readUTF8(v, buf)))__            break__        case '[': _            int size = readUnsignedShort(v)__            v += 2__            if (size == 0) {_                return readAnnotationValues(v - 2, buf, false,_                        av.visitArray(name))__            }_            switch (this.b[v++] & 0xFF) {_            case 'B':_                byte[] bv = new byte[size]__                for (i = 0_ i < size_ i++) {_                    bv[i] = (byte) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, bv)__                --v__                break__            case 'Z':_                boolean[] zv = new boolean[size]__                for (i = 0_ i < size_ i++) {_                    zv[i] = readInt(items[readUnsignedShort(v)]) != 0__                    v += 3__                }_                av.visit(name, zv)__                --v__                break__            case 'S':_                short[] sv = new short[size]__                for (i = 0_ i < size_ i++) {_                    sv[i] = (short) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, sv)__                --v__                break__            case 'C':_                char[] cv = new char[size]__                for (i = 0_ i < size_ i++) {_                    cv[i] = (char) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, cv)__                --v__                break__            case 'I':_                int[] iv = new int[size]__                for (i = 0_ i < size_ i++) {_                    iv[i] = readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, iv)__                --v__                break__            case 'J':_                long[] lv = new long[size]__                for (i = 0_ i < size_ i++) {_                    lv[i] = readLong(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, lv)__                --v__                break__            case 'F':_                float[] fv = new float[size]__                for (i = 0_ i < size_ i++) {_                    fv[i] = Float_                            .intBitsToFloat(readInt(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, fv)__                --v__                break__            case 'D':_                double[] dv = new double[size]__                for (i = 0_ i < size_ i++) {_                    dv[i] = Double_                            .longBitsToDouble(readLong(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, dv)__                --v__                break__            default:_                v = readAnnotationValues(v - 3, buf, false, av.visitArray(name))__            }_        }_        return v__    };reads,a,value,of,an,annotation,and,makes,the,given,visitor,visit,it,param,v,the,start,offset,in,link,b,b,of,the,value,to,be,read,i,not,including,the,value,name,constant,pool,index,i,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,name,the,name,of,the,value,to,be,read,param,av,the,visitor,that,must,visit,the,value,return,the,end,offset,of,the,annotation,value;private,int,read,annotation,value,int,v,final,char,buf,final,string,name,final,annotation,visitor,av,int,i,if,av,null,switch,b,v,0x,ff,case,e,return,v,5,case,return,read,annotation,values,v,3,buf,true,null,case,return,read,annotation,values,v,1,buf,false,null,default,return,v,3,switch,b,v,0x,ff,case,i,case,j,case,f,case,d,av,visit,name,read,const,read,unsigned,short,v,buf,v,2,break,case,b,av,visit,name,byte,read,int,items,read,unsigned,short,v,v,2,break,case,z,av,visit,name,read,int,items,read,unsigned,short,v,0,boolean,false,boolean,true,v,2,break,case,s,av,visit,name,short,read,int,items,read,unsigned,short,v,v,2,break,case,c,av,visit,name,char,read,int,items,read,unsigned,short,v,v,2,break,case,s,av,visit,name,read,utf8,v,buf,v,2,break,case,e,av,visit,enum,name,read,utf8,v,buf,read,utf8,v,2,buf,v,4,break,case,c,av,visit,name,type,get,type,read,utf8,v,buf,v,2,break,case,v,read,annotation,values,v,2,buf,true,av,visit,annotation,name,read,utf8,v,buf,break,case,int,size,read,unsigned,short,v,v,2,if,size,0,return,read,annotation,values,v,2,buf,false,av,visit,array,name,switch,this,b,v,0x,ff,case,b,byte,bv,new,byte,size,for,i,0,i,size,i,bv,i,byte,read,int,items,read,unsigned,short,v,v,3,av,visit,name,bv,v,break,case,z,boolean,zv,new,boolean,size,for,i,0,i,size,i,zv,i,read,int,items,read,unsigned,short,v,0,v,3,av,visit,name,zv,v,break,case,s,short,sv,new,short,size,for,i,0,i,size,i,sv,i,short,read,int,items,read,unsigned,short,v,v,3,av,visit,name,sv,v,break,case,c,char,cv,new,char,size,for,i,0,i,size,i,cv,i,char,read,int,items,read,unsigned,short,v,v,3,av,visit,name,cv,v,break,case,i,int,iv,new,int,size,for,i,0,i,size,i,iv,i,read,int,items,read,unsigned,short,v,v,3,av,visit,name,iv,v,break,case,j,long,lv,new,long,size,for,i,0,i,size,i,lv,i,read,long,items,read,unsigned,short,v,v,3,av,visit,name,lv,v,break,case,f,float,fv,new,float,size,for,i,0,i,size,i,fv,i,float,int,bits,to,float,read,int,items,read,unsigned,short,v,v,3,av,visit,name,fv,v,break,case,d,double,dv,new,double,size,for,i,0,i,size,i,dv,i,double,long,bits,to,double,read,long,items,read,unsigned,short,v,v,3,av,visit,name,dv,v,break,default,v,read,annotation,values,v,3,buf,false,av,visit,array,name,return,v
ClassReader -> private int readAnnotationValue(int v, final char[] buf, final String name,             final AnnotationVisitor av);1478623137;Reads a value of an annotation and makes the given visitor visit it.__@param v_the start offset in {@link #b b} of the value to be read_(<i>not including the value name constant pool index</i>)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param name_the name of the value to be read._@param av_the visitor that must visit the value._@return the end offset of the annotation value.;private int readAnnotationValue(int v, final char[] buf, final String name,_            final AnnotationVisitor av) {_        int i__        if (av == null) {_            switch (b[v] & 0xFF) {_            case 'e': _                return v + 5__            case '@': _                return readAnnotationValues(v + 3, buf, true, null)__            case '[': _                return readAnnotationValues(v + 1, buf, false, null)__            default:_                return v + 3__            }_        }_        switch (b[v++] & 0xFF) {_        case 'I': _        case 'J': _        case 'F': _        case 'D': _            av.visit(name, readConst(readUnsignedShort(v), buf))__            v += 2__            break__        case 'B': _            av.visit(name, (byte) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'Z': _            av.visit(name, readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE)__            v += 2__            break__        case 'S': _            av.visit(name, (short) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'C': _            av.visit(name, (char) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 's': _            av.visit(name, readUTF8(v, buf))__            v += 2__            break__        case 'e': _            av.visitEnum(name, readUTF8(v, buf), readUTF8(v + 2, buf))__            v += 4__            break__        case 'c': _            av.visit(name, Type.getType(readUTF8(v, buf)))__            v += 2__            break__        case '@': _            v = readAnnotationValues(v + 2, buf, true,_                    av.visitAnnotation(name, readUTF8(v, buf)))__            break__        case '[': _            int size = readUnsignedShort(v)__            v += 2__            if (size == 0) {_                return readAnnotationValues(v - 2, buf, false,_                        av.visitArray(name))__            }_            switch (this.b[v++] & 0xFF) {_            case 'B':_                byte[] bv = new byte[size]__                for (i = 0_ i < size_ i++) {_                    bv[i] = (byte) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, bv)__                --v__                break__            case 'Z':_                boolean[] zv = new boolean[size]__                for (i = 0_ i < size_ i++) {_                    zv[i] = readInt(items[readUnsignedShort(v)]) != 0__                    v += 3__                }_                av.visit(name, zv)__                --v__                break__            case 'S':_                short[] sv = new short[size]__                for (i = 0_ i < size_ i++) {_                    sv[i] = (short) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, sv)__                --v__                break__            case 'C':_                char[] cv = new char[size]__                for (i = 0_ i < size_ i++) {_                    cv[i] = (char) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, cv)__                --v__                break__            case 'I':_                int[] iv = new int[size]__                for (i = 0_ i < size_ i++) {_                    iv[i] = readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, iv)__                --v__                break__            case 'J':_                long[] lv = new long[size]__                for (i = 0_ i < size_ i++) {_                    lv[i] = readLong(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, lv)__                --v__                break__            case 'F':_                float[] fv = new float[size]__                for (i = 0_ i < size_ i++) {_                    fv[i] = Float_                            .intBitsToFloat(readInt(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, fv)__                --v__                break__            case 'D':_                double[] dv = new double[size]__                for (i = 0_ i < size_ i++) {_                    dv[i] = Double_                            .longBitsToDouble(readLong(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, dv)__                --v__                break__            default:_                v = readAnnotationValues(v - 3, buf, false, av.visitArray(name))__            }_        }_        return v__    };reads,a,value,of,an,annotation,and,makes,the,given,visitor,visit,it,param,v,the,start,offset,in,link,b,b,of,the,value,to,be,read,i,not,including,the,value,name,constant,pool,index,i,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,name,the,name,of,the,value,to,be,read,param,av,the,visitor,that,must,visit,the,value,return,the,end,offset,of,the,annotation,value;private,int,read,annotation,value,int,v,final,char,buf,final,string,name,final,annotation,visitor,av,int,i,if,av,null,switch,b,v,0x,ff,case,e,return,v,5,case,return,read,annotation,values,v,3,buf,true,null,case,return,read,annotation,values,v,1,buf,false,null,default,return,v,3,switch,b,v,0x,ff,case,i,case,j,case,f,case,d,av,visit,name,read,const,read,unsigned,short,v,buf,v,2,break,case,b,av,visit,name,byte,read,int,items,read,unsigned,short,v,v,2,break,case,z,av,visit,name,read,int,items,read,unsigned,short,v,0,boolean,false,boolean,true,v,2,break,case,s,av,visit,name,short,read,int,items,read,unsigned,short,v,v,2,break,case,c,av,visit,name,char,read,int,items,read,unsigned,short,v,v,2,break,case,s,av,visit,name,read,utf8,v,buf,v,2,break,case,e,av,visit,enum,name,read,utf8,v,buf,read,utf8,v,2,buf,v,4,break,case,c,av,visit,name,type,get,type,read,utf8,v,buf,v,2,break,case,v,read,annotation,values,v,2,buf,true,av,visit,annotation,name,read,utf8,v,buf,break,case,int,size,read,unsigned,short,v,v,2,if,size,0,return,read,annotation,values,v,2,buf,false,av,visit,array,name,switch,this,b,v,0x,ff,case,b,byte,bv,new,byte,size,for,i,0,i,size,i,bv,i,byte,read,int,items,read,unsigned,short,v,v,3,av,visit,name,bv,v,break,case,z,boolean,zv,new,boolean,size,for,i,0,i,size,i,zv,i,read,int,items,read,unsigned,short,v,0,v,3,av,visit,name,zv,v,break,case,s,short,sv,new,short,size,for,i,0,i,size,i,sv,i,short,read,int,items,read,unsigned,short,v,v,3,av,visit,name,sv,v,break,case,c,char,cv,new,char,size,for,i,0,i,size,i,cv,i,char,read,int,items,read,unsigned,short,v,v,3,av,visit,name,cv,v,break,case,i,int,iv,new,int,size,for,i,0,i,size,i,iv,i,read,int,items,read,unsigned,short,v,v,3,av,visit,name,iv,v,break,case,j,long,lv,new,long,size,for,i,0,i,size,i,lv,i,read,long,items,read,unsigned,short,v,v,3,av,visit,name,lv,v,break,case,f,float,fv,new,float,size,for,i,0,i,size,i,fv,i,float,int,bits,to,float,read,int,items,read,unsigned,short,v,v,3,av,visit,name,fv,v,break,case,d,double,dv,new,double,size,for,i,0,i,size,i,dv,i,double,long,bits,to,double,read,long,items,read,unsigned,short,v,v,3,av,visit,name,dv,v,break,default,v,read,annotation,values,v,3,buf,false,av,visit,array,name,return,v
ClassReader -> private int readAnnotationValue(int v, final char[] buf, final String name,             final AnnotationVisitor av);1483093254;Reads a value of an annotation and makes the given visitor visit it.__@param v_the start offset in {@link #b b} of the value to be read_(<i>not including the value name constant pool index</i>)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param name_the name of the value to be read._@param av_the visitor that must visit the value._@return the end offset of the annotation value.;private int readAnnotationValue(int v, final char[] buf, final String name,_            final AnnotationVisitor av) {_        int i__        if (av == null) {_            switch (b[v] & 0xFF) {_            case 'e': _                return v + 5__            case '@': _                return readAnnotationValues(v + 3, buf, true, null)__            case '[': _                return readAnnotationValues(v + 1, buf, false, null)__            default:_                return v + 3__            }_        }_        switch (b[v++] & 0xFF) {_        case 'I': _        case 'J': _        case 'F': _        case 'D': _            av.visit(name, readConst(readUnsignedShort(v), buf))__            v += 2__            break__        case 'B': _            av.visit(name, (byte) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'Z': _            av.visit(name,_                    readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE_                            : Boolean.TRUE)__            v += 2__            break__        case 'S': _            av.visit(name, (short) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'C': _            av.visit(name, (char) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 's': _            av.visit(name, readUTF8(v, buf))__            v += 2__            break__        case 'e': _            av.visitEnum(name, readUTF8(v, buf), readUTF8(v + 2, buf))__            v += 4__            break__        case 'c': _            av.visit(name, Type.getType(readUTF8(v, buf)))__            v += 2__            break__        case '@': _            v = readAnnotationValues(v + 2, buf, true,_                    av.visitAnnotation(name, readUTF8(v, buf)))__            break__        case '[': _            int size = readUnsignedShort(v)__            v += 2__            if (size == 0) {_                return readAnnotationValues(v - 2, buf, false,_                        av.visitArray(name))__            }_            switch (this.b[v++] & 0xFF) {_            case 'B':_                byte[] bv = new byte[size]__                for (i = 0_ i < size_ i++) {_                    bv[i] = (byte) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, bv)__                --v__                break__            case 'Z':_                boolean[] zv = new boolean[size]__                for (i = 0_ i < size_ i++) {_                    zv[i] = readInt(items[readUnsignedShort(v)]) != 0__                    v += 3__                }_                av.visit(name, zv)__                --v__                break__            case 'S':_                short[] sv = new short[size]__                for (i = 0_ i < size_ i++) {_                    sv[i] = (short) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, sv)__                --v__                break__            case 'C':_                char[] cv = new char[size]__                for (i = 0_ i < size_ i++) {_                    cv[i] = (char) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, cv)__                --v__                break__            case 'I':_                int[] iv = new int[size]__                for (i = 0_ i < size_ i++) {_                    iv[i] = readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, iv)__                --v__                break__            case 'J':_                long[] lv = new long[size]__                for (i = 0_ i < size_ i++) {_                    lv[i] = readLong(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, lv)__                --v__                break__            case 'F':_                float[] fv = new float[size]__                for (i = 0_ i < size_ i++) {_                    fv[i] = Float_                            .intBitsToFloat(readInt(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, fv)__                --v__                break__            case 'D':_                double[] dv = new double[size]__                for (i = 0_ i < size_ i++) {_                    dv[i] = Double_                            .longBitsToDouble(readLong(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, dv)__                --v__                break__            default:_                v = readAnnotationValues(v - 3, buf, false, av.visitArray(name))__            }_        }_        return v__    };reads,a,value,of,an,annotation,and,makes,the,given,visitor,visit,it,param,v,the,start,offset,in,link,b,b,of,the,value,to,be,read,i,not,including,the,value,name,constant,pool,index,i,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,name,the,name,of,the,value,to,be,read,param,av,the,visitor,that,must,visit,the,value,return,the,end,offset,of,the,annotation,value;private,int,read,annotation,value,int,v,final,char,buf,final,string,name,final,annotation,visitor,av,int,i,if,av,null,switch,b,v,0x,ff,case,e,return,v,5,case,return,read,annotation,values,v,3,buf,true,null,case,return,read,annotation,values,v,1,buf,false,null,default,return,v,3,switch,b,v,0x,ff,case,i,case,j,case,f,case,d,av,visit,name,read,const,read,unsigned,short,v,buf,v,2,break,case,b,av,visit,name,byte,read,int,items,read,unsigned,short,v,v,2,break,case,z,av,visit,name,read,int,items,read,unsigned,short,v,0,boolean,false,boolean,true,v,2,break,case,s,av,visit,name,short,read,int,items,read,unsigned,short,v,v,2,break,case,c,av,visit,name,char,read,int,items,read,unsigned,short,v,v,2,break,case,s,av,visit,name,read,utf8,v,buf,v,2,break,case,e,av,visit,enum,name,read,utf8,v,buf,read,utf8,v,2,buf,v,4,break,case,c,av,visit,name,type,get,type,read,utf8,v,buf,v,2,break,case,v,read,annotation,values,v,2,buf,true,av,visit,annotation,name,read,utf8,v,buf,break,case,int,size,read,unsigned,short,v,v,2,if,size,0,return,read,annotation,values,v,2,buf,false,av,visit,array,name,switch,this,b,v,0x,ff,case,b,byte,bv,new,byte,size,for,i,0,i,size,i,bv,i,byte,read,int,items,read,unsigned,short,v,v,3,av,visit,name,bv,v,break,case,z,boolean,zv,new,boolean,size,for,i,0,i,size,i,zv,i,read,int,items,read,unsigned,short,v,0,v,3,av,visit,name,zv,v,break,case,s,short,sv,new,short,size,for,i,0,i,size,i,sv,i,short,read,int,items,read,unsigned,short,v,v,3,av,visit,name,sv,v,break,case,c,char,cv,new,char,size,for,i,0,i,size,i,cv,i,char,read,int,items,read,unsigned,short,v,v,3,av,visit,name,cv,v,break,case,i,int,iv,new,int,size,for,i,0,i,size,i,iv,i,read,int,items,read,unsigned,short,v,v,3,av,visit,name,iv,v,break,case,j,long,lv,new,long,size,for,i,0,i,size,i,lv,i,read,long,items,read,unsigned,short,v,v,3,av,visit,name,lv,v,break,case,f,float,fv,new,float,size,for,i,0,i,size,i,fv,i,float,int,bits,to,float,read,int,items,read,unsigned,short,v,v,3,av,visit,name,fv,v,break,case,d,double,dv,new,double,size,for,i,0,i,size,i,dv,i,double,long,bits,to,double,read,long,items,read,unsigned,short,v,v,3,av,visit,name,dv,v,break,default,v,read,annotation,values,v,3,buf,false,av,visit,array,name,return,v
ClassReader -> private int readAnnotationValue(int v, final char[] buf, final String name,             final AnnotationVisitor av);1505821772;Reads a value of an annotation and makes the given visitor visit it.__@param v_the start offset in {@link #b b} of the value to be read_(<i>not including the value name constant pool index</i>)._@param buf_buffer to be used to call {@link #readUTF8 readUTF8},_{@link #readClass(int,char[]) readClass} or {@link #readConst_readConst}._@param name_the name of the value to be read._@param av_the visitor that must visit the value._@return the end offset of the annotation value.;private int readAnnotationValue(int v, final char[] buf, final String name,_            final AnnotationVisitor av) {_        int i__        if (av == null) {_            switch (b[v] & 0xFF) {_            case 'e': _                return v + 5__            case '@': _                return readAnnotationValues(v + 3, buf, true, null)__            case '[': _                return readAnnotationValues(v + 1, buf, false, null)__            default:_                return v + 3__            }_        }_        switch (b[v++] & 0xFF) {_        case 'I': _        case 'J': _        case 'F': _        case 'D': _            av.visit(name, readConst(readUnsignedShort(v), buf))__            v += 2__            break__        case 'B': _            av.visit(name, (byte) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'Z': _            av.visit(name,_                    readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE_                            : Boolean.TRUE)__            v += 2__            break__        case 'S': _            av.visit(name, (short) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 'C': _            av.visit(name, (char) readInt(items[readUnsignedShort(v)]))__            v += 2__            break__        case 's': _            av.visit(name, readUTF8(v, buf))__            v += 2__            break__        case 'e': _            av.visitEnum(name, readUTF8(v, buf), readUTF8(v + 2, buf))__            v += 4__            break__        case 'c': _            av.visit(name, Type.getType(readUTF8(v, buf)))__            v += 2__            break__        case '@': _            v = readAnnotationValues(v + 2, buf, true,_                    av.visitAnnotation(name, readUTF8(v, buf)))__            break__        case '[': _            int size = readUnsignedShort(v)__            v += 2__            if (size == 0) {_                return readAnnotationValues(v - 2, buf, false,_                        av.visitArray(name))__            }_            switch (this.b[v++] & 0xFF) {_            case 'B':_                byte[] bv = new byte[size]__                for (i = 0_ i < size_ i++) {_                    bv[i] = (byte) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, bv)__                --v__                break__            case 'Z':_                boolean[] zv = new boolean[size]__                for (i = 0_ i < size_ i++) {_                    zv[i] = readInt(items[readUnsignedShort(v)]) != 0__                    v += 3__                }_                av.visit(name, zv)__                --v__                break__            case 'S':_                short[] sv = new short[size]__                for (i = 0_ i < size_ i++) {_                    sv[i] = (short) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, sv)__                --v__                break__            case 'C':_                char[] cv = new char[size]__                for (i = 0_ i < size_ i++) {_                    cv[i] = (char) readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, cv)__                --v__                break__            case 'I':_                int[] iv = new int[size]__                for (i = 0_ i < size_ i++) {_                    iv[i] = readInt(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, iv)__                --v__                break__            case 'J':_                long[] lv = new long[size]__                for (i = 0_ i < size_ i++) {_                    lv[i] = readLong(items[readUnsignedShort(v)])__                    v += 3__                }_                av.visit(name, lv)__                --v__                break__            case 'F':_                float[] fv = new float[size]__                for (i = 0_ i < size_ i++) {_                    fv[i] = Float_                            .intBitsToFloat(readInt(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, fv)__                --v__                break__            case 'D':_                double[] dv = new double[size]__                for (i = 0_ i < size_ i++) {_                    dv[i] = Double_                            .longBitsToDouble(readLong(items[readUnsignedShort(v)]))__                    v += 3__                }_                av.visit(name, dv)__                --v__                break__            default:_                v = readAnnotationValues(v - 3, buf, false, av.visitArray(name))__            }_        }_        return v__    };reads,a,value,of,an,annotation,and,makes,the,given,visitor,visit,it,param,v,the,start,offset,in,link,b,b,of,the,value,to,be,read,i,not,including,the,value,name,constant,pool,index,i,param,buf,buffer,to,be,used,to,call,link,read,utf8,read,utf8,link,read,class,int,char,read,class,or,link,read,const,read,const,param,name,the,name,of,the,value,to,be,read,param,av,the,visitor,that,must,visit,the,value,return,the,end,offset,of,the,annotation,value;private,int,read,annotation,value,int,v,final,char,buf,final,string,name,final,annotation,visitor,av,int,i,if,av,null,switch,b,v,0x,ff,case,e,return,v,5,case,return,read,annotation,values,v,3,buf,true,null,case,return,read,annotation,values,v,1,buf,false,null,default,return,v,3,switch,b,v,0x,ff,case,i,case,j,case,f,case,d,av,visit,name,read,const,read,unsigned,short,v,buf,v,2,break,case,b,av,visit,name,byte,read,int,items,read,unsigned,short,v,v,2,break,case,z,av,visit,name,read,int,items,read,unsigned,short,v,0,boolean,false,boolean,true,v,2,break,case,s,av,visit,name,short,read,int,items,read,unsigned,short,v,v,2,break,case,c,av,visit,name,char,read,int,items,read,unsigned,short,v,v,2,break,case,s,av,visit,name,read,utf8,v,buf,v,2,break,case,e,av,visit,enum,name,read,utf8,v,buf,read,utf8,v,2,buf,v,4,break,case,c,av,visit,name,type,get,type,read,utf8,v,buf,v,2,break,case,v,read,annotation,values,v,2,buf,true,av,visit,annotation,name,read,utf8,v,buf,break,case,int,size,read,unsigned,short,v,v,2,if,size,0,return,read,annotation,values,v,2,buf,false,av,visit,array,name,switch,this,b,v,0x,ff,case,b,byte,bv,new,byte,size,for,i,0,i,size,i,bv,i,byte,read,int,items,read,unsigned,short,v,v,3,av,visit,name,bv,v,break,case,z,boolean,zv,new,boolean,size,for,i,0,i,size,i,zv,i,read,int,items,read,unsigned,short,v,0,v,3,av,visit,name,zv,v,break,case,s,short,sv,new,short,size,for,i,0,i,size,i,sv,i,short,read,int,items,read,unsigned,short,v,v,3,av,visit,name,sv,v,break,case,c,char,cv,new,char,size,for,i,0,i,size,i,cv,i,char,read,int,items,read,unsigned,short,v,v,3,av,visit,name,cv,v,break,case,i,int,iv,new,int,size,for,i,0,i,size,i,iv,i,read,int,items,read,unsigned,short,v,v,3,av,visit,name,iv,v,break,case,j,long,lv,new,long,size,for,i,0,i,size,i,lv,i,read,long,items,read,unsigned,short,v,v,3,av,visit,name,lv,v,break,case,f,float,fv,new,float,size,for,i,0,i,size,i,fv,i,float,int,bits,to,float,read,int,items,read,unsigned,short,v,v,3,av,visit,name,fv,v,break,case,d,double,dv,new,double,size,for,i,0,i,size,i,dv,i,double,long,bits,to,double,read,long,items,read,unsigned,short,v,v,3,av,visit,name,dv,v,break,default,v,read,annotation,values,v,3,buf,false,av,visit,array,name,return,v
ClassReader -> private String readUTF(final int utfOffset, final int utfLength, final char[] charBuffer);1531241461;Reads an UTF8 string in {@link #b}.__@param utfOffset the start offset of the UTF8 string to be read._@param utfLength the length of the UTF8 string to be read._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(final int utfOffset, final int utfLength, final char[] charBuffer) {_    int currentOffset = utfOffset__    int endOffset = currentOffset + utfLength__    int strLength = 0__    byte[] classFileBuffer = b__    while (currentOffset < endOffset) {_      int currentByte = classFileBuffer[currentOffset++]__      if ((currentByte & 0x80) == 0) {_        charBuffer[strLength++] = (char) (currentByte & 0x7F)__      } else if ((currentByte & 0xE0) == 0xC0) {_        charBuffer[strLength++] =_            (char) (((currentByte & 0x1F) << 6) + (classFileBuffer[currentOffset++] & 0x3F))__      } else {_        charBuffer[strLength++] =_            (char)_                (((currentByte & 0xF) << 12)_                    + ((classFileBuffer[currentOffset++] & 0x3F) << 6)_                    + (classFileBuffer[currentOffset++] & 0x3F))__      }_    }_    return new String(charBuffer, 0, strLength)__  };reads,an,utf8,string,in,link,b,param,utf,offset,the,start,offset,of,the,utf8,string,to,be,read,param,utf,length,the,length,of,the,utf8,string,to,be,read,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,final,int,utf,offset,final,int,utf,length,final,char,char,buffer,int,current,offset,utf,offset,int,end,offset,current,offset,utf,length,int,str,length,0,byte,class,file,buffer,b,while,current,offset,end,offset,int,current,byte,class,file,buffer,current,offset,if,current,byte,0x80,0,char,buffer,str,length,char,current,byte,0x7f,else,if,current,byte,0x,e0,0x,c0,char,buffer,str,length,char,current,byte,0x1f,6,class,file,buffer,current,offset,0x3f,else,char,buffer,str,length,char,current,byte,0x,f,12,class,file,buffer,current,offset,0x3f,6,class,file,buffer,current,offset,0x3f,return,new,string,char,buffer,0,str,length
ClassReader -> private String readUTF(final int utfOffset, final int utfLength, final char[] charBuffer);1536664245;Reads an UTF8 string in {@link #b}.__@param utfOffset the start offset of the UTF8 string to be read._@param utfLength the length of the UTF8 string to be read._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(final int utfOffset, final int utfLength, final char[] charBuffer) {_    int currentOffset = utfOffset__    int endOffset = currentOffset + utfLength__    int strLength = 0__    byte[] classFileBuffer = b__    while (currentOffset < endOffset) {_      int currentByte = classFileBuffer[currentOffset++]__      if ((currentByte & 0x80) == 0) {_        charBuffer[strLength++] = (char) (currentByte & 0x7F)__      } else if ((currentByte & 0xE0) == 0xC0) {_        charBuffer[strLength++] =_            (char) (((currentByte & 0x1F) << 6) + (classFileBuffer[currentOffset++] & 0x3F))__      } else {_        charBuffer[strLength++] =_            (char)_                (((currentByte & 0xF) << 12)_                    + ((classFileBuffer[currentOffset++] & 0x3F) << 6)_                    + (classFileBuffer[currentOffset++] & 0x3F))__      }_    }_    return new String(charBuffer, 0, strLength)__  };reads,an,utf8,string,in,link,b,param,utf,offset,the,start,offset,of,the,utf8,string,to,be,read,param,utf,length,the,length,of,the,utf8,string,to,be,read,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,final,int,utf,offset,final,int,utf,length,final,char,char,buffer,int,current,offset,utf,offset,int,end,offset,current,offset,utf,length,int,str,length,0,byte,class,file,buffer,b,while,current,offset,end,offset,int,current,byte,class,file,buffer,current,offset,if,current,byte,0x80,0,char,buffer,str,length,char,current,byte,0x7f,else,if,current,byte,0x,e0,0x,c0,char,buffer,str,length,char,current,byte,0x1f,6,class,file,buffer,current,offset,0x3f,else,char,buffer,str,length,char,current,byte,0x,f,12,class,file,buffer,current,offset,0x3f,6,class,file,buffer,current,offset,0x3f,return,new,string,char,buffer,0,str,length
ClassReader -> private String readUTF(final int utfOffset, final int utfLength, final char[] charBuffer);1536747989;Reads an UTF8 string in {@link #b}.__@param utfOffset the start offset of the UTF8 string to be read._@param utfLength the length of the UTF8 string to be read._@param charBuffer the buffer to be used to read the string. This buffer must be sufficiently_large. It is not automatically resized._@return the String corresponding to the specified UTF8 string.;private String readUTF(final int utfOffset, final int utfLength, final char[] charBuffer) {_    int currentOffset = utfOffset__    int endOffset = currentOffset + utfLength__    int strLength = 0__    byte[] classFileBuffer = b__    while (currentOffset < endOffset) {_      int currentByte = classFileBuffer[currentOffset++]__      if ((currentByte & 0x80) == 0) {_        charBuffer[strLength++] = (char) (currentByte & 0x7F)__      } else if ((currentByte & 0xE0) == 0xC0) {_        charBuffer[strLength++] =_            (char) (((currentByte & 0x1F) << 6) + (classFileBuffer[currentOffset++] & 0x3F))__      } else {_        charBuffer[strLength++] =_            (char)_                (((currentByte & 0xF) << 12)_                    + ((classFileBuffer[currentOffset++] & 0x3F) << 6)_                    + (classFileBuffer[currentOffset++] & 0x3F))__      }_    }_    return new String(charBuffer, 0, strLength)__  };reads,an,utf8,string,in,link,b,param,utf,offset,the,start,offset,of,the,utf8,string,to,be,read,param,utf,length,the,length,of,the,utf8,string,to,be,read,param,char,buffer,the,buffer,to,be,used,to,read,the,string,this,buffer,must,be,sufficiently,large,it,is,not,automatically,resized,return,the,string,corresponding,to,the,specified,utf8,string;private,string,read,utf,final,int,utf,offset,final,int,utf,length,final,char,char,buffer,int,current,offset,utf,offset,int,end,offset,current,offset,utf,length,int,str,length,0,byte,class,file,buffer,b,while,current,offset,end,offset,int,current,byte,class,file,buffer,current,offset,if,current,byte,0x80,0,char,buffer,str,length,char,current,byte,0x7f,else,if,current,byte,0x,e0,0x,c0,char,buffer,str,length,char,current,byte,0x1f,6,class,file,buffer,current,offset,0x3f,else,char,buffer,str,length,char,current,byte,0x,f,12,class,file,buffer,current,offset,0x3f,6,class,file,buffer,current,offset,0x3f,return,new,string,char,buffer,0,str,length
ClassReader -> private int[] readBootstrapMethodsAttribute(final int maxStringLength);1536664245;Reads the BootstrapMethods attribute to compute the offset of each bootstrap method.__@param maxStringLength a conservative estimate of the maximum length of the strings contained_in the constant pool of the class._@return the offsets of the bootstrap methods or null.;private int[] readBootstrapMethodsAttribute(final int maxStringLength) {_    char[] charBuffer = new char[maxStringLength]__    int currentAttributeOffset = getFirstAttributeOffset()__    int[] currentBootstrapMethodOffsets = null__    for (int i = readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      _      String attributeName = readUTF8(currentAttributeOffset, charBuffer)__      int attributeLength = readInt(currentAttributeOffset + 2)__      currentAttributeOffset += 6__      if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        _        currentBootstrapMethodOffsets = new int[readUnsignedShort(currentAttributeOffset)]__        _        int currentBootstrapMethodOffset = currentAttributeOffset + 2__        for (int j = 0_ j < currentBootstrapMethodOffsets.length_ ++j) {_          currentBootstrapMethodOffsets[j] = currentBootstrapMethodOffset__          _          _          currentBootstrapMethodOffset +=_              4 + readUnsignedShort(currentBootstrapMethodOffset + 2) * 2__        }_        return currentBootstrapMethodOffsets__      }_      currentAttributeOffset += attributeLength__    }_    return null__  };reads,the,bootstrap,methods,attribute,to,compute,the,offset,of,each,bootstrap,method,param,max,string,length,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,offsets,of,the,bootstrap,methods,or,null;private,int,read,bootstrap,methods,attribute,final,int,max,string,length,char,char,buffer,new,char,max,string,length,int,current,attribute,offset,get,first,attribute,offset,int,current,bootstrap,method,offsets,null,for,int,i,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,read,utf8,current,attribute,offset,char,buffer,int,attribute,length,read,int,current,attribute,offset,2,current,attribute,offset,6,if,constants,equals,attribute,name,current,bootstrap,method,offsets,new,int,read,unsigned,short,current,attribute,offset,int,current,bootstrap,method,offset,current,attribute,offset,2,for,int,j,0,j,current,bootstrap,method,offsets,length,j,current,bootstrap,method,offsets,j,current,bootstrap,method,offset,current,bootstrap,method,offset,4,read,unsigned,short,current,bootstrap,method,offset,2,2,return,current,bootstrap,method,offsets,current,attribute,offset,attribute,length,return,null
ClassReader -> private int[] readBootstrapMethodsAttribute(final int maxStringLength);1536747989;Reads the BootstrapMethods attribute to compute the offset of each bootstrap method.__@param maxStringLength a conservative estimate of the maximum length of the strings contained_in the constant pool of the class._@return the offsets of the bootstrap methods or null.;private int[] readBootstrapMethodsAttribute(final int maxStringLength) {_    char[] charBuffer = new char[maxStringLength]__    int currentAttributeOffset = getFirstAttributeOffset()__    int[] currentBootstrapMethodOffsets = null__    for (int i = readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      _      String attributeName = readUTF8(currentAttributeOffset, charBuffer)__      int attributeLength = readInt(currentAttributeOffset + 2)__      currentAttributeOffset += 6__      if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        _        currentBootstrapMethodOffsets = new int[readUnsignedShort(currentAttributeOffset)]__        _        int currentBootstrapMethodOffset = currentAttributeOffset + 2__        for (int j = 0_ j < currentBootstrapMethodOffsets.length_ ++j) {_          currentBootstrapMethodOffsets[j] = currentBootstrapMethodOffset__          _          _          currentBootstrapMethodOffset +=_              4 + readUnsignedShort(currentBootstrapMethodOffset + 2) * 2__        }_        return currentBootstrapMethodOffsets__      }_      currentAttributeOffset += attributeLength__    }_    return null__  };reads,the,bootstrap,methods,attribute,to,compute,the,offset,of,each,bootstrap,method,param,max,string,length,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,offsets,of,the,bootstrap,methods,or,null;private,int,read,bootstrap,methods,attribute,final,int,max,string,length,char,char,buffer,new,char,max,string,length,int,current,attribute,offset,get,first,attribute,offset,int,current,bootstrap,method,offsets,null,for,int,i,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,read,utf8,current,attribute,offset,char,buffer,int,attribute,length,read,int,current,attribute,offset,2,current,attribute,offset,6,if,constants,equals,attribute,name,current,bootstrap,method,offsets,new,int,read,unsigned,short,current,attribute,offset,int,current,bootstrap,method,offset,current,attribute,offset,2,for,int,j,0,j,current,bootstrap,method,offsets,length,j,current,bootstrap,method,offsets,j,current,bootstrap,method,offset,current,bootstrap,method,offset,4,read,unsigned,short,current,bootstrap,method,offset,2,2,return,current,bootstrap,method,offsets,current,attribute,offset,attribute,length,return,null
ClassReader -> private int[] readBootstrapMethodsAttribute(final int maxStringLength);1537204147;Reads the BootstrapMethods attribute to compute the offset of each bootstrap method.__@param maxStringLength a conservative estimate of the maximum length of the strings contained_in the constant pool of the class._@return the offsets of the bootstrap methods or null.;private int[] readBootstrapMethodsAttribute(final int maxStringLength) {_    char[] charBuffer = new char[maxStringLength]__    int currentAttributeOffset = getFirstAttributeOffset()__    int[] currentBootstrapMethodOffsets = null__    for (int i = readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      _      String attributeName = readUTF8(currentAttributeOffset, charBuffer)__      int attributeLength = readInt(currentAttributeOffset + 2)__      currentAttributeOffset += 6__      if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        _        currentBootstrapMethodOffsets = new int[readUnsignedShort(currentAttributeOffset)]__        _        int currentBootstrapMethodOffset = currentAttributeOffset + 2__        for (int j = 0_ j < currentBootstrapMethodOffsets.length_ ++j) {_          currentBootstrapMethodOffsets[j] = currentBootstrapMethodOffset__          _          _          currentBootstrapMethodOffset +=_              4 + readUnsignedShort(currentBootstrapMethodOffset + 2) * 2__        }_        return currentBootstrapMethodOffsets__      }_      currentAttributeOffset += attributeLength__    }_    return null__  };reads,the,bootstrap,methods,attribute,to,compute,the,offset,of,each,bootstrap,method,param,max,string,length,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,offsets,of,the,bootstrap,methods,or,null;private,int,read,bootstrap,methods,attribute,final,int,max,string,length,char,char,buffer,new,char,max,string,length,int,current,attribute,offset,get,first,attribute,offset,int,current,bootstrap,method,offsets,null,for,int,i,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,read,utf8,current,attribute,offset,char,buffer,int,attribute,length,read,int,current,attribute,offset,2,current,attribute,offset,6,if,constants,equals,attribute,name,current,bootstrap,method,offsets,new,int,read,unsigned,short,current,attribute,offset,int,current,bootstrap,method,offset,current,attribute,offset,2,for,int,j,0,j,current,bootstrap,method,offsets,length,j,current,bootstrap,method,offsets,j,current,bootstrap,method,offset,current,bootstrap,method,offset,4,read,unsigned,short,current,bootstrap,method,offset,2,2,return,current,bootstrap,method,offsets,current,attribute,offset,attribute,length,return,null
ClassReader -> private int[] readBootstrapMethodsAttribute(final int maxStringLength);1539119582;Reads the BootstrapMethods attribute to compute the offset of each bootstrap method.__@param maxStringLength a conservative estimate of the maximum length of the strings contained_in the constant pool of the class._@return the offsets of the bootstrap methods or null.;private int[] readBootstrapMethodsAttribute(final int maxStringLength) {_    char[] charBuffer = new char[maxStringLength]__    int currentAttributeOffset = getFirstAttributeOffset()__    int[] currentBootstrapMethodOffsets = null__    for (int i = readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      _      String attributeName = readUTF8(currentAttributeOffset, charBuffer)__      int attributeLength = readInt(currentAttributeOffset + 2)__      currentAttributeOffset += 6__      if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        _        currentBootstrapMethodOffsets = new int[readUnsignedShort(currentAttributeOffset)]__        _        int currentBootstrapMethodOffset = currentAttributeOffset + 2__        for (int j = 0_ j < currentBootstrapMethodOffsets.length_ ++j) {_          currentBootstrapMethodOffsets[j] = currentBootstrapMethodOffset__          _          _          currentBootstrapMethodOffset +=_              4 + readUnsignedShort(currentBootstrapMethodOffset + 2) * 2__        }_        return currentBootstrapMethodOffsets__      }_      currentAttributeOffset += attributeLength__    }_    return null__  };reads,the,bootstrap,methods,attribute,to,compute,the,offset,of,each,bootstrap,method,param,max,string,length,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,offsets,of,the,bootstrap,methods,or,null;private,int,read,bootstrap,methods,attribute,final,int,max,string,length,char,char,buffer,new,char,max,string,length,int,current,attribute,offset,get,first,attribute,offset,int,current,bootstrap,method,offsets,null,for,int,i,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,read,utf8,current,attribute,offset,char,buffer,int,attribute,length,read,int,current,attribute,offset,2,current,attribute,offset,6,if,constants,equals,attribute,name,current,bootstrap,method,offsets,new,int,read,unsigned,short,current,attribute,offset,int,current,bootstrap,method,offset,current,attribute,offset,2,for,int,j,0,j,current,bootstrap,method,offsets,length,j,current,bootstrap,method,offsets,j,current,bootstrap,method,offset,current,bootstrap,method,offset,4,read,unsigned,short,current,bootstrap,method,offset,2,2,return,current,bootstrap,method,offsets,current,attribute,offset,attribute,length,return,null
ClassReader -> private int[] readBootstrapMethodsAttribute(final int maxStringLength);1541436263;Reads the BootstrapMethods attribute to compute the offset of each bootstrap method.__@param maxStringLength a conservative estimate of the maximum length of the strings contained_in the constant pool of the class._@return the offsets of the bootstrap methods or null.;private int[] readBootstrapMethodsAttribute(final int maxStringLength) {_    char[] charBuffer = new char[maxStringLength]__    int currentAttributeOffset = getFirstAttributeOffset()__    int[] currentBootstrapMethodOffsets = null__    for (int i = readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      _      String attributeName = readUTF8(currentAttributeOffset, charBuffer)__      int attributeLength = readInt(currentAttributeOffset + 2)__      currentAttributeOffset += 6__      if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        _        currentBootstrapMethodOffsets = new int[readUnsignedShort(currentAttributeOffset)]__        _        int currentBootstrapMethodOffset = currentAttributeOffset + 2__        for (int j = 0_ j < currentBootstrapMethodOffsets.length_ ++j) {_          currentBootstrapMethodOffsets[j] = currentBootstrapMethodOffset__          _          _          currentBootstrapMethodOffset +=_              4 + readUnsignedShort(currentBootstrapMethodOffset + 2) * 2__        }_        return currentBootstrapMethodOffsets__      }_      currentAttributeOffset += attributeLength__    }_    return null__  };reads,the,bootstrap,methods,attribute,to,compute,the,offset,of,each,bootstrap,method,param,max,string,length,a,conservative,estimate,of,the,maximum,length,of,the,strings,contained,in,the,constant,pool,of,the,class,return,the,offsets,of,the,bootstrap,methods,or,null;private,int,read,bootstrap,methods,attribute,final,int,max,string,length,char,char,buffer,new,char,max,string,length,int,current,attribute,offset,get,first,attribute,offset,int,current,bootstrap,method,offsets,null,for,int,i,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,read,utf8,current,attribute,offset,char,buffer,int,attribute,length,read,int,current,attribute,offset,2,current,attribute,offset,6,if,constants,equals,attribute,name,current,bootstrap,method,offsets,new,int,read,unsigned,short,current,attribute,offset,int,current,bootstrap,method,offset,current,attribute,offset,2,for,int,j,0,j,current,bootstrap,method,offsets,length,j,current,bootstrap,method,offsets,j,current,bootstrap,method,offset,current,bootstrap,method,offset,4,read,unsigned,short,current,bootstrap,method,offset,2,2,return,current,bootstrap,method,offsets,current,attribute,offset,attribute,length,return,null
ClassReader -> ClassReader(       final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion);1531241461;Constructs a new {@link ClassReader} object. <i>This internal constructor must not be exposed_as a public API</i>.__@param classFileBuffer a byte array containing the JVMS ClassFile structure to be read._@param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read._@param checkClassVersion whether to check the class version or not.;ClassReader(_      final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion) {_    this.b = classFileBuffer__    _    _    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V12) {_      throw new IllegalArgumentException(_          "Unsupported class file major version " + readShort(classFileOffset + 6))__    }_    _    _    int constantPoolCount = readUnsignedShort(classFileOffset + 8)__    cpInfoOffsets = new int[constantPoolCount]__    cpInfoValues = new Object[constantPoolCount]__    _    _    _    _    int currentCpInfoIndex = 1__    int currentCpInfoOffset = classFileOffset + 10__    int currentMaxStringLength = 0__    _    while (currentCpInfoIndex < constantPoolCount) {_      cpInfoOffsets[currentCpInfoIndex++] = currentCpInfoOffset + 1__      int cpInfoSize__      switch (classFileBuffer[currentCpInfoOffset]) {_        case Symbol.CONSTANT_FIELDREF_TAG:_        case Symbol.CONSTANT_METHODREF_TAG:_        case Symbol.CONSTANT_INTERFACE_METHODREF_TAG:_        case Symbol.CONSTANT_INTEGER_TAG:_        case Symbol.CONSTANT_FLOAT_TAG:_        case Symbol.CONSTANT_NAME_AND_TYPE_TAG:_        case Symbol.CONSTANT_INVOKE_DYNAMIC_TAG:_        case Symbol.CONSTANT_DYNAMIC_TAG:_          cpInfoSize = 5__          break__        case Symbol.CONSTANT_LONG_TAG:_        case Symbol.CONSTANT_DOUBLE_TAG:_          cpInfoSize = 9__          currentCpInfoIndex++__          break__        case Symbol.CONSTANT_UTF8_TAG:_          cpInfoSize = 3 + readUnsignedShort(currentCpInfoOffset + 1)__          if (cpInfoSize > currentMaxStringLength) {_            _            _            _            currentMaxStringLength = cpInfoSize__          }_          break__        case Symbol.CONSTANT_METHOD_HANDLE_TAG:_          cpInfoSize = 4__          break__        case Symbol.CONSTANT_CLASS_TAG:_        case Symbol.CONSTANT_STRING_TAG:_        case Symbol.CONSTANT_METHOD_TYPE_TAG:_        case Symbol.CONSTANT_PACKAGE_TAG:_        case Symbol.CONSTANT_MODULE_TAG:_          cpInfoSize = 3__          break__        default:_          throw new IllegalArgumentException()__      }_      currentCpInfoOffset += cpInfoSize__    }_    this.maxStringLength = currentMaxStringLength__    _    this.header = currentCpInfoOffset___    _    int currentAttributeOffset = getFirstAttributeOffset()__    int[] currentBootstrapMethodOffsets = null__    for (int i = readUnsignedShort(currentAttributeOffset - 2)_ i > 0_ --i) {_      _      String attributeName = readUTF8(currentAttributeOffset, new char[maxStringLength])__      int attributeLength = readInt(currentAttributeOffset + 2)__      currentAttributeOffset += 6__      if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {_        _        currentBootstrapMethodOffsets = new int[readUnsignedShort(currentAttributeOffset)]__        _        int currentBootstrapMethodOffset = currentAttributeOffset + 2__        for (int j = 0_ j < currentBootstrapMethodOffsets.length_ ++j) {_          currentBootstrapMethodOffsets[j] = currentBootstrapMethodOffset__          _          _          currentBootstrapMethodOffset +=_              4 + readUnsignedShort(currentBootstrapMethodOffset + 2) * 2__        }_      }_      currentAttributeOffset += attributeLength__    }_    this.bootstrapMethodOffsets = currentBootstrapMethodOffsets__  };constructs,a,new,link,class,reader,object,i,this,internal,constructor,must,not,be,exposed,as,a,public,api,i,param,class,file,buffer,a,byte,array,containing,the,jvms,class,file,structure,to,be,read,param,class,file,offset,the,offset,in,byte,buffer,of,the,first,byte,of,the,class,file,to,be,read,param,check,class,version,whether,to,check,the,class,version,or,not;class,reader,final,byte,class,file,buffer,final,int,class,file,offset,final,boolean,check,class,version,this,b,class,file,buffer,if,check,class,version,read,short,class,file,offset,6,opcodes,v12,throw,new,illegal,argument,exception,unsupported,class,file,major,version,read,short,class,file,offset,6,int,constant,pool,count,read,unsigned,short,class,file,offset,8,cp,info,offsets,new,int,constant,pool,count,cp,info,values,new,object,constant,pool,count,int,current,cp,info,index,1,int,current,cp,info,offset,class,file,offset,10,int,current,max,string,length,0,while,current,cp,info,index,constant,pool,count,cp,info,offsets,current,cp,info,index,current,cp,info,offset,1,int,cp,info,size,switch,class,file,buffer,current,cp,info,offset,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,cp,info,size,5,break,case,symbol,case,symbol,cp,info,size,9,current,cp,info,index,break,case,symbol,cp,info,size,3,read,unsigned,short,current,cp,info,offset,1,if,cp,info,size,current,max,string,length,current,max,string,length,cp,info,size,break,case,symbol,cp,info,size,4,break,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,cp,info,size,3,break,default,throw,new,illegal,argument,exception,current,cp,info,offset,cp,info,size,this,max,string,length,current,max,string,length,this,header,current,cp,info,offset,int,current,attribute,offset,get,first,attribute,offset,int,current,bootstrap,method,offsets,null,for,int,i,read,unsigned,short,current,attribute,offset,2,i,0,i,string,attribute,name,read,utf8,current,attribute,offset,new,char,max,string,length,int,attribute,length,read,int,current,attribute,offset,2,current,attribute,offset,6,if,constants,equals,attribute,name,current,bootstrap,method,offsets,new,int,read,unsigned,short,current,attribute,offset,int,current,bootstrap,method,offset,current,attribute,offset,2,for,int,j,0,j,current,bootstrap,method,offsets,length,j,current,bootstrap,method,offsets,j,current,bootstrap,method,offset,current,bootstrap,method,offset,4,read,unsigned,short,current,bootstrap,method,offset,2,2,current,attribute,offset,attribute,length,this,bootstrap,method,offsets,current,bootstrap,method,offsets
ClassReader -> ClassReader(       final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion);1536664245;Constructs a new {@link ClassReader} object. <i>This internal constructor must not be exposed_as a public API</i>.__@param classFileBuffer a byte array containing the JVMS ClassFile structure to be read._@param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read._@param checkClassVersion whether to check the class version or not.;ClassReader(_      final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion) {_    this.b = classFileBuffer__    _    _    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V12) {_      throw new IllegalArgumentException(_          "Unsupported class file major version " + readShort(classFileOffset + 6))__    }_    _    _    int constantPoolCount = readUnsignedShort(classFileOffset + 8)__    cpInfoOffsets = new int[constantPoolCount]__    cpInfoValues = new Object[constantPoolCount]__    _    _    _    _    int currentCpInfoIndex = 1__    int currentCpInfoOffset = classFileOffset + 10__    int currentMaxStringLength = 0__    boolean hasBootstrapMethods = false__    _    while (currentCpInfoIndex < constantPoolCount) {_      cpInfoOffsets[currentCpInfoIndex++] = currentCpInfoOffset + 1__      int cpInfoSize__      switch (classFileBuffer[currentCpInfoOffset]) {_        case Symbol.CONSTANT_FIELDREF_TAG:_        case Symbol.CONSTANT_METHODREF_TAG:_        case Symbol.CONSTANT_INTERFACE_METHODREF_TAG:_        case Symbol.CONSTANT_INTEGER_TAG:_        case Symbol.CONSTANT_FLOAT_TAG:_        case Symbol.CONSTANT_NAME_AND_TYPE_TAG:_          cpInfoSize = 5__          break__        case Symbol.CONSTANT_INVOKE_DYNAMIC_TAG:_        case Symbol.CONSTANT_DYNAMIC_TAG:_          cpInfoSize = 5__          hasBootstrapMethods = true__          break__        case Symbol.CONSTANT_LONG_TAG:_        case Symbol.CONSTANT_DOUBLE_TAG:_          cpInfoSize = 9__          currentCpInfoIndex++__          break__        case Symbol.CONSTANT_UTF8_TAG:_          cpInfoSize = 3 + readUnsignedShort(currentCpInfoOffset + 1)__          if (cpInfoSize > currentMaxStringLength) {_            _            _            _            currentMaxStringLength = cpInfoSize__          }_          break__        case Symbol.CONSTANT_METHOD_HANDLE_TAG:_          cpInfoSize = 4__          break__        case Symbol.CONSTANT_CLASS_TAG:_        case Symbol.CONSTANT_STRING_TAG:_        case Symbol.CONSTANT_METHOD_TYPE_TAG:_        case Symbol.CONSTANT_PACKAGE_TAG:_        case Symbol.CONSTANT_MODULE_TAG:_          cpInfoSize = 3__          break__        default:_          throw new IllegalArgumentException()__      }_      currentCpInfoOffset += cpInfoSize__    }_    this.maxStringLength = currentMaxStringLength__    _    this.header = currentCpInfoOffset___    _    this.bootstrapMethodOffsets =_        hasBootstrapMethods ? readBootstrapMethodsAttribute(currentMaxStringLength) : null__  };constructs,a,new,link,class,reader,object,i,this,internal,constructor,must,not,be,exposed,as,a,public,api,i,param,class,file,buffer,a,byte,array,containing,the,jvms,class,file,structure,to,be,read,param,class,file,offset,the,offset,in,byte,buffer,of,the,first,byte,of,the,class,file,to,be,read,param,check,class,version,whether,to,check,the,class,version,or,not;class,reader,final,byte,class,file,buffer,final,int,class,file,offset,final,boolean,check,class,version,this,b,class,file,buffer,if,check,class,version,read,short,class,file,offset,6,opcodes,v12,throw,new,illegal,argument,exception,unsupported,class,file,major,version,read,short,class,file,offset,6,int,constant,pool,count,read,unsigned,short,class,file,offset,8,cp,info,offsets,new,int,constant,pool,count,cp,info,values,new,object,constant,pool,count,int,current,cp,info,index,1,int,current,cp,info,offset,class,file,offset,10,int,current,max,string,length,0,boolean,has,bootstrap,methods,false,while,current,cp,info,index,constant,pool,count,cp,info,offsets,current,cp,info,index,current,cp,info,offset,1,int,cp,info,size,switch,class,file,buffer,current,cp,info,offset,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,cp,info,size,5,break,case,symbol,case,symbol,cp,info,size,5,has,bootstrap,methods,true,break,case,symbol,case,symbol,cp,info,size,9,current,cp,info,index,break,case,symbol,cp,info,size,3,read,unsigned,short,current,cp,info,offset,1,if,cp,info,size,current,max,string,length,current,max,string,length,cp,info,size,break,case,symbol,cp,info,size,4,break,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,cp,info,size,3,break,default,throw,new,illegal,argument,exception,current,cp,info,offset,cp,info,size,this,max,string,length,current,max,string,length,this,header,current,cp,info,offset,this,bootstrap,method,offsets,has,bootstrap,methods,read,bootstrap,methods,attribute,current,max,string,length,null
ClassReader -> ClassReader(       final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion);1536747989;Constructs a new {@link ClassReader} object. <i>This internal constructor must not be exposed_as a public API</i>.__@param classFileBuffer a byte array containing the JVMS ClassFile structure to be read._@param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read._@param checkClassVersion whether to check the class version or not.;ClassReader(_      final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion) {_    b = classFileBuffer__    _    _    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V12) {_      throw new IllegalArgumentException(_          "Unsupported class file major version " + readShort(classFileOffset + 6))__    }_    _    _    int constantPoolCount = readUnsignedShort(classFileOffset + 8)__    cpInfoOffsets = new int[constantPoolCount]__    constantUtf8Values = new String[constantPoolCount]__    _    _    _    _    int currentCpInfoIndex = 1__    int currentCpInfoOffset = classFileOffset + 10__    int currentMaxStringLength = 0__    boolean hasConstantDynamic = false__    boolean hasConstantInvokeDynamic = false__    _    while (currentCpInfoIndex < constantPoolCount) {_      cpInfoOffsets[currentCpInfoIndex++] = currentCpInfoOffset + 1__      int cpInfoSize__      switch (classFileBuffer[currentCpInfoOffset]) {_        case Symbol.CONSTANT_FIELDREF_TAG:_        case Symbol.CONSTANT_METHODREF_TAG:_        case Symbol.CONSTANT_INTERFACE_METHODREF_TAG:_        case Symbol.CONSTANT_INTEGER_TAG:_        case Symbol.CONSTANT_FLOAT_TAG:_        case Symbol.CONSTANT_NAME_AND_TYPE_TAG:_          cpInfoSize = 5__          break__        case Symbol.CONSTANT_DYNAMIC_TAG:_          cpInfoSize = 5__          hasConstantDynamic = true__          break__        case Symbol.CONSTANT_INVOKE_DYNAMIC_TAG:_          cpInfoSize = 5__          hasConstantInvokeDynamic = true__          break__        case Symbol.CONSTANT_LONG_TAG:_        case Symbol.CONSTANT_DOUBLE_TAG:_          cpInfoSize = 9__          currentCpInfoIndex++__          break__        case Symbol.CONSTANT_UTF8_TAG:_          cpInfoSize = 3 + readUnsignedShort(currentCpInfoOffset + 1)__          if (cpInfoSize > currentMaxStringLength) {_            _            _            _            currentMaxStringLength = cpInfoSize__          }_          break__        case Symbol.CONSTANT_METHOD_HANDLE_TAG:_          cpInfoSize = 4__          break__        case Symbol.CONSTANT_CLASS_TAG:_        case Symbol.CONSTANT_STRING_TAG:_        case Symbol.CONSTANT_METHOD_TYPE_TAG:_        case Symbol.CONSTANT_PACKAGE_TAG:_        case Symbol.CONSTANT_MODULE_TAG:_          cpInfoSize = 3__          break__        default:_          throw new IllegalArgumentException()__      }_      currentCpInfoOffset += cpInfoSize__    }_    maxStringLength = currentMaxStringLength__    _    header = currentCpInfoOffset___    _    constantDynamicValues = hasConstantDynamic ? new ConstantDynamic[constantPoolCount] : null___    _    bootstrapMethodOffsets =_        (hasConstantDynamic | hasConstantInvokeDynamic)_            ? readBootstrapMethodsAttribute(currentMaxStringLength)_            : null__  };constructs,a,new,link,class,reader,object,i,this,internal,constructor,must,not,be,exposed,as,a,public,api,i,param,class,file,buffer,a,byte,array,containing,the,jvms,class,file,structure,to,be,read,param,class,file,offset,the,offset,in,byte,buffer,of,the,first,byte,of,the,class,file,to,be,read,param,check,class,version,whether,to,check,the,class,version,or,not;class,reader,final,byte,class,file,buffer,final,int,class,file,offset,final,boolean,check,class,version,b,class,file,buffer,if,check,class,version,read,short,class,file,offset,6,opcodes,v12,throw,new,illegal,argument,exception,unsupported,class,file,major,version,read,short,class,file,offset,6,int,constant,pool,count,read,unsigned,short,class,file,offset,8,cp,info,offsets,new,int,constant,pool,count,constant,utf8values,new,string,constant,pool,count,int,current,cp,info,index,1,int,current,cp,info,offset,class,file,offset,10,int,current,max,string,length,0,boolean,has,constant,dynamic,false,boolean,has,constant,invoke,dynamic,false,while,current,cp,info,index,constant,pool,count,cp,info,offsets,current,cp,info,index,current,cp,info,offset,1,int,cp,info,size,switch,class,file,buffer,current,cp,info,offset,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,cp,info,size,5,break,case,symbol,cp,info,size,5,has,constant,dynamic,true,break,case,symbol,cp,info,size,5,has,constant,invoke,dynamic,true,break,case,symbol,case,symbol,cp,info,size,9,current,cp,info,index,break,case,symbol,cp,info,size,3,read,unsigned,short,current,cp,info,offset,1,if,cp,info,size,current,max,string,length,current,max,string,length,cp,info,size,break,case,symbol,cp,info,size,4,break,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,cp,info,size,3,break,default,throw,new,illegal,argument,exception,current,cp,info,offset,cp,info,size,max,string,length,current,max,string,length,header,current,cp,info,offset,constant,dynamic,values,has,constant,dynamic,new,constant,dynamic,constant,pool,count,null,bootstrap,method,offsets,has,constant,dynamic,has,constant,invoke,dynamic,read,bootstrap,methods,attribute,current,max,string,length,null
ClassReader -> ClassReader(       final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion);1537204147;Constructs a new {@link ClassReader} object. <i>This internal constructor must not be exposed_as a public API</i>.__@param classFileBuffer a byte array containing the JVMS ClassFile structure to be read._@param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read._@param checkClassVersion whether to check the class version or not.;ClassReader(_      final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion) {_    b = classFileBuffer__    _    _    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V12) {_      throw new IllegalArgumentException(_          "Unsupported class file major version " + readShort(classFileOffset + 6))__    }_    _    _    int constantPoolCount = readUnsignedShort(classFileOffset + 8)__    cpInfoOffsets = new int[constantPoolCount]__    constantUtf8Values = new String[constantPoolCount]__    _    _    _    _    int currentCpInfoIndex = 1__    int currentCpInfoOffset = classFileOffset + 10__    int currentMaxStringLength = 0__    boolean hasConstantDynamic = false__    boolean hasConstantInvokeDynamic = false__    _    while (currentCpInfoIndex < constantPoolCount) {_      cpInfoOffsets[currentCpInfoIndex++] = currentCpInfoOffset + 1__      int cpInfoSize__      switch (classFileBuffer[currentCpInfoOffset]) {_        case Symbol.CONSTANT_FIELDREF_TAG:_        case Symbol.CONSTANT_METHODREF_TAG:_        case Symbol.CONSTANT_INTERFACE_METHODREF_TAG:_        case Symbol.CONSTANT_INTEGER_TAG:_        case Symbol.CONSTANT_FLOAT_TAG:_        case Symbol.CONSTANT_NAME_AND_TYPE_TAG:_          cpInfoSize = 5__          break__        case Symbol.CONSTANT_DYNAMIC_TAG:_          cpInfoSize = 5__          hasConstantDynamic = true__          break__        case Symbol.CONSTANT_INVOKE_DYNAMIC_TAG:_          cpInfoSize = 5__          hasConstantInvokeDynamic = true__          break__        case Symbol.CONSTANT_LONG_TAG:_        case Symbol.CONSTANT_DOUBLE_TAG:_          cpInfoSize = 9__          currentCpInfoIndex++__          break__        case Symbol.CONSTANT_UTF8_TAG:_          cpInfoSize = 3 + readUnsignedShort(currentCpInfoOffset + 1)__          if (cpInfoSize > currentMaxStringLength) {_            _            _            _            currentMaxStringLength = cpInfoSize__          }_          break__        case Symbol.CONSTANT_METHOD_HANDLE_TAG:_          cpInfoSize = 4__          break__        case Symbol.CONSTANT_CLASS_TAG:_        case Symbol.CONSTANT_STRING_TAG:_        case Symbol.CONSTANT_METHOD_TYPE_TAG:_        case Symbol.CONSTANT_PACKAGE_TAG:_        case Symbol.CONSTANT_MODULE_TAG:_          cpInfoSize = 3__          break__        default:_          throw new IllegalArgumentException()__      }_      currentCpInfoOffset += cpInfoSize__    }_    maxStringLength = currentMaxStringLength__    _    header = currentCpInfoOffset___    _    constantDynamicValues = hasConstantDynamic ? new ConstantDynamic[constantPoolCount] : null___    _    bootstrapMethodOffsets =_        (hasConstantDynamic | hasConstantInvokeDynamic)_            ? readBootstrapMethodsAttribute(currentMaxStringLength)_            : null__  };constructs,a,new,link,class,reader,object,i,this,internal,constructor,must,not,be,exposed,as,a,public,api,i,param,class,file,buffer,a,byte,array,containing,the,jvms,class,file,structure,to,be,read,param,class,file,offset,the,offset,in,byte,buffer,of,the,first,byte,of,the,class,file,to,be,read,param,check,class,version,whether,to,check,the,class,version,or,not;class,reader,final,byte,class,file,buffer,final,int,class,file,offset,final,boolean,check,class,version,b,class,file,buffer,if,check,class,version,read,short,class,file,offset,6,opcodes,v12,throw,new,illegal,argument,exception,unsupported,class,file,major,version,read,short,class,file,offset,6,int,constant,pool,count,read,unsigned,short,class,file,offset,8,cp,info,offsets,new,int,constant,pool,count,constant,utf8values,new,string,constant,pool,count,int,current,cp,info,index,1,int,current,cp,info,offset,class,file,offset,10,int,current,max,string,length,0,boolean,has,constant,dynamic,false,boolean,has,constant,invoke,dynamic,false,while,current,cp,info,index,constant,pool,count,cp,info,offsets,current,cp,info,index,current,cp,info,offset,1,int,cp,info,size,switch,class,file,buffer,current,cp,info,offset,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,cp,info,size,5,break,case,symbol,cp,info,size,5,has,constant,dynamic,true,break,case,symbol,cp,info,size,5,has,constant,invoke,dynamic,true,break,case,symbol,case,symbol,cp,info,size,9,current,cp,info,index,break,case,symbol,cp,info,size,3,read,unsigned,short,current,cp,info,offset,1,if,cp,info,size,current,max,string,length,current,max,string,length,cp,info,size,break,case,symbol,cp,info,size,4,break,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,cp,info,size,3,break,default,throw,new,illegal,argument,exception,current,cp,info,offset,cp,info,size,max,string,length,current,max,string,length,header,current,cp,info,offset,constant,dynamic,values,has,constant,dynamic,new,constant,dynamic,constant,pool,count,null,bootstrap,method,offsets,has,constant,dynamic,has,constant,invoke,dynamic,read,bootstrap,methods,attribute,current,max,string,length,null
ClassReader -> ClassReader(       final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion);1539119582;Constructs a new {@link ClassReader} object. <i>This internal constructor must not be exposed_as a public API</i>.__@param classFileBuffer a byte array containing the JVMS ClassFile structure to be read._@param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read._@param checkClassVersion whether to check the class version or not.;ClassReader(_      final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion) {_    b = classFileBuffer__    _    _    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V12) {_      throw new IllegalArgumentException(_          "Unsupported class file major version " + readShort(classFileOffset + 6))__    }_    _    _    int constantPoolCount = readUnsignedShort(classFileOffset + 8)__    cpInfoOffsets = new int[constantPoolCount]__    constantUtf8Values = new String[constantPoolCount]__    _    _    _    _    int currentCpInfoIndex = 1__    int currentCpInfoOffset = classFileOffset + 10__    int currentMaxStringLength = 0__    boolean hasConstantDynamic = false__    boolean hasConstantInvokeDynamic = false__    _    while (currentCpInfoIndex < constantPoolCount) {_      cpInfoOffsets[currentCpInfoIndex++] = currentCpInfoOffset + 1__      int cpInfoSize__      switch (classFileBuffer[currentCpInfoOffset]) {_        case Symbol.CONSTANT_FIELDREF_TAG:_        case Symbol.CONSTANT_METHODREF_TAG:_        case Symbol.CONSTANT_INTERFACE_METHODREF_TAG:_        case Symbol.CONSTANT_INTEGER_TAG:_        case Symbol.CONSTANT_FLOAT_TAG:_        case Symbol.CONSTANT_NAME_AND_TYPE_TAG:_          cpInfoSize = 5__          break__        case Symbol.CONSTANT_DYNAMIC_TAG:_          cpInfoSize = 5__          hasConstantDynamic = true__          break__        case Symbol.CONSTANT_INVOKE_DYNAMIC_TAG:_          cpInfoSize = 5__          hasConstantInvokeDynamic = true__          break__        case Symbol.CONSTANT_LONG_TAG:_        case Symbol.CONSTANT_DOUBLE_TAG:_          cpInfoSize = 9__          currentCpInfoIndex++__          break__        case Symbol.CONSTANT_UTF8_TAG:_          cpInfoSize = 3 + readUnsignedShort(currentCpInfoOffset + 1)__          if (cpInfoSize > currentMaxStringLength) {_            _            _            _            currentMaxStringLength = cpInfoSize__          }_          break__        case Symbol.CONSTANT_METHOD_HANDLE_TAG:_          cpInfoSize = 4__          break__        case Symbol.CONSTANT_CLASS_TAG:_        case Symbol.CONSTANT_STRING_TAG:_        case Symbol.CONSTANT_METHOD_TYPE_TAG:_        case Symbol.CONSTANT_PACKAGE_TAG:_        case Symbol.CONSTANT_MODULE_TAG:_          cpInfoSize = 3__          break__        default:_          throw new IllegalArgumentException()__      }_      currentCpInfoOffset += cpInfoSize__    }_    maxStringLength = currentMaxStringLength__    _    header = currentCpInfoOffset___    _    constantDynamicValues = hasConstantDynamic ? new ConstantDynamic[constantPoolCount] : null___    _    bootstrapMethodOffsets =_        (hasConstantDynamic | hasConstantInvokeDynamic)_            ? readBootstrapMethodsAttribute(currentMaxStringLength)_            : null__  };constructs,a,new,link,class,reader,object,i,this,internal,constructor,must,not,be,exposed,as,a,public,api,i,param,class,file,buffer,a,byte,array,containing,the,jvms,class,file,structure,to,be,read,param,class,file,offset,the,offset,in,byte,buffer,of,the,first,byte,of,the,class,file,to,be,read,param,check,class,version,whether,to,check,the,class,version,or,not;class,reader,final,byte,class,file,buffer,final,int,class,file,offset,final,boolean,check,class,version,b,class,file,buffer,if,check,class,version,read,short,class,file,offset,6,opcodes,v12,throw,new,illegal,argument,exception,unsupported,class,file,major,version,read,short,class,file,offset,6,int,constant,pool,count,read,unsigned,short,class,file,offset,8,cp,info,offsets,new,int,constant,pool,count,constant,utf8values,new,string,constant,pool,count,int,current,cp,info,index,1,int,current,cp,info,offset,class,file,offset,10,int,current,max,string,length,0,boolean,has,constant,dynamic,false,boolean,has,constant,invoke,dynamic,false,while,current,cp,info,index,constant,pool,count,cp,info,offsets,current,cp,info,index,current,cp,info,offset,1,int,cp,info,size,switch,class,file,buffer,current,cp,info,offset,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,cp,info,size,5,break,case,symbol,cp,info,size,5,has,constant,dynamic,true,break,case,symbol,cp,info,size,5,has,constant,invoke,dynamic,true,break,case,symbol,case,symbol,cp,info,size,9,current,cp,info,index,break,case,symbol,cp,info,size,3,read,unsigned,short,current,cp,info,offset,1,if,cp,info,size,current,max,string,length,current,max,string,length,cp,info,size,break,case,symbol,cp,info,size,4,break,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,cp,info,size,3,break,default,throw,new,illegal,argument,exception,current,cp,info,offset,cp,info,size,max,string,length,current,max,string,length,header,current,cp,info,offset,constant,dynamic,values,has,constant,dynamic,new,constant,dynamic,constant,pool,count,null,bootstrap,method,offsets,has,constant,dynamic,has,constant,invoke,dynamic,read,bootstrap,methods,attribute,current,max,string,length,null
ClassReader -> ClassReader(       final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion);1541436263;Constructs a new {@link ClassReader} object. <i>This internal constructor must not be exposed_as a public API</i>.__@param classFileBuffer a byte array containing the JVMS ClassFile structure to be read._@param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read._@param checkClassVersion whether to check the class version or not.;ClassReader(_      final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion) {_    b = classFileBuffer__    _    _    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V12) {_      throw new IllegalArgumentException(_          "Unsupported class file major version " + readShort(classFileOffset + 6))__    }_    _    _    int constantPoolCount = readUnsignedShort(classFileOffset + 8)__    cpInfoOffsets = new int[constantPoolCount]__    constantUtf8Values = new String[constantPoolCount]__    _    _    _    _    int currentCpInfoIndex = 1__    int currentCpInfoOffset = classFileOffset + 10__    int currentMaxStringLength = 0__    boolean hasConstantDynamic = false__    boolean hasConstantInvokeDynamic = false__    _    while (currentCpInfoIndex < constantPoolCount) {_      cpInfoOffsets[currentCpInfoIndex++] = currentCpInfoOffset + 1__      int cpInfoSize__      switch (classFileBuffer[currentCpInfoOffset]) {_        case Symbol.CONSTANT_FIELDREF_TAG:_        case Symbol.CONSTANT_METHODREF_TAG:_        case Symbol.CONSTANT_INTERFACE_METHODREF_TAG:_        case Symbol.CONSTANT_INTEGER_TAG:_        case Symbol.CONSTANT_FLOAT_TAG:_        case Symbol.CONSTANT_NAME_AND_TYPE_TAG:_          cpInfoSize = 5__          break__        case Symbol.CONSTANT_DYNAMIC_TAG:_          cpInfoSize = 5__          hasConstantDynamic = true__          break__        case Symbol.CONSTANT_INVOKE_DYNAMIC_TAG:_          cpInfoSize = 5__          hasConstantInvokeDynamic = true__          break__        case Symbol.CONSTANT_LONG_TAG:_        case Symbol.CONSTANT_DOUBLE_TAG:_          cpInfoSize = 9__          currentCpInfoIndex++__          break__        case Symbol.CONSTANT_UTF8_TAG:_          cpInfoSize = 3 + readUnsignedShort(currentCpInfoOffset + 1)__          if (cpInfoSize > currentMaxStringLength) {_            _            _            _            currentMaxStringLength = cpInfoSize__          }_          break__        case Symbol.CONSTANT_METHOD_HANDLE_TAG:_          cpInfoSize = 4__          break__        case Symbol.CONSTANT_CLASS_TAG:_        case Symbol.CONSTANT_STRING_TAG:_        case Symbol.CONSTANT_METHOD_TYPE_TAG:_        case Symbol.CONSTANT_PACKAGE_TAG:_        case Symbol.CONSTANT_MODULE_TAG:_          cpInfoSize = 3__          break__        default:_          throw new IllegalArgumentException()__      }_      currentCpInfoOffset += cpInfoSize__    }_    maxStringLength = currentMaxStringLength__    _    header = currentCpInfoOffset___    _    constantDynamicValues = hasConstantDynamic ? new ConstantDynamic[constantPoolCount] : null___    _    bootstrapMethodOffsets =_        (hasConstantDynamic | hasConstantInvokeDynamic)_            ? readBootstrapMethodsAttribute(currentMaxStringLength)_            : null__  };constructs,a,new,link,class,reader,object,i,this,internal,constructor,must,not,be,exposed,as,a,public,api,i,param,class,file,buffer,a,byte,array,containing,the,jvms,class,file,structure,to,be,read,param,class,file,offset,the,offset,in,byte,buffer,of,the,first,byte,of,the,class,file,to,be,read,param,check,class,version,whether,to,check,the,class,version,or,not;class,reader,final,byte,class,file,buffer,final,int,class,file,offset,final,boolean,check,class,version,b,class,file,buffer,if,check,class,version,read,short,class,file,offset,6,opcodes,v12,throw,new,illegal,argument,exception,unsupported,class,file,major,version,read,short,class,file,offset,6,int,constant,pool,count,read,unsigned,short,class,file,offset,8,cp,info,offsets,new,int,constant,pool,count,constant,utf8values,new,string,constant,pool,count,int,current,cp,info,index,1,int,current,cp,info,offset,class,file,offset,10,int,current,max,string,length,0,boolean,has,constant,dynamic,false,boolean,has,constant,invoke,dynamic,false,while,current,cp,info,index,constant,pool,count,cp,info,offsets,current,cp,info,index,current,cp,info,offset,1,int,cp,info,size,switch,class,file,buffer,current,cp,info,offset,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,cp,info,size,5,break,case,symbol,cp,info,size,5,has,constant,dynamic,true,break,case,symbol,cp,info,size,5,has,constant,invoke,dynamic,true,break,case,symbol,case,symbol,cp,info,size,9,current,cp,info,index,break,case,symbol,cp,info,size,3,read,unsigned,short,current,cp,info,offset,1,if,cp,info,size,current,max,string,length,current,max,string,length,cp,info,size,break,case,symbol,cp,info,size,4,break,case,symbol,case,symbol,case,symbol,case,symbol,case,symbol,cp,info,size,3,break,default,throw,new,illegal,argument,exception,current,cp,info,offset,cp,info,size,max,string,length,current,max,string,length,header,current,cp,info,offset,constant,dynamic,values,has,constant,dynamic,new,constant,dynamic,constant,pool,count,null,bootstrap,method,offsets,has,constant,dynamic,has,constant,invoke,dynamic,read,bootstrap,methods,attribute,current,max,string,length,null
ClassReader -> public ClassReader(       final byte[] classFileBuffer,       final int classFileOffset,       final int classFileLength);1539119582;Constructs a new {@link ClassReader} object.__@param classFileBuffer a byte array containing the JVMS ClassFile structure to be read._@param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read._@param classFileLength the length in bytes of the ClassFile to be read.;public ClassReader(_      final byte[] classFileBuffer,_      final int classFileOffset,_      final int classFileLength) { _    this(classFileBuffer, classFileOffset,  true)__  };constructs,a,new,link,class,reader,object,param,class,file,buffer,a,byte,array,containing,the,jvms,class,file,structure,to,be,read,param,class,file,offset,the,offset,in,byte,buffer,of,the,first,byte,of,the,class,file,to,be,read,param,class,file,length,the,length,in,bytes,of,the,class,file,to,be,read;public,class,reader,final,byte,class,file,buffer,final,int,class,file,offset,final,int,class,file,length,this,class,file,buffer,class,file,offset,true
ClassReader -> public ClassReader(       final byte[] classFileBuffer,       final int classFileOffset,       final int classFileLength);1541436263;Constructs a new {@link ClassReader} object.__@param classFileBuffer a byte array containing the JVMS ClassFile structure to be read._@param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read._@param classFileLength the length in bytes of the ClassFile to be read.;public ClassReader(_      final byte[] classFileBuffer,_      final int classFileOffset,_      final int classFileLength) { _    this(classFileBuffer, classFileOffset,  true)__  };constructs,a,new,link,class,reader,object,param,class,file,buffer,a,byte,array,containing,the,jvms,class,file,structure,to,be,read,param,class,file,offset,the,offset,in,byte,buffer,of,the,first,byte,of,the,class,file,to,be,read,param,class,file,length,the,length,in,bytes,of,the,class,file,to,be,read;public,class,reader,final,byte,class,file,buffer,final,int,class,file,offset,final,int,class,file,length,this,class,file,buffer,class,file,offset,true
ClassReader -> public ClassReader(final byte[] classFile);1531241461;Constructs a new {@link ClassReader} object.__@param classFile the JVMS ClassFile structure to be read.;public ClassReader(final byte[] classFile) {_    this(classFile, 0, classFile.length)__  };constructs,a,new,link,class,reader,object,param,class,file,the,jvms,class,file,structure,to,be,read;public,class,reader,final,byte,class,file,this,class,file,0,class,file,length
ClassReader -> public ClassReader(final byte[] classFile);1536664245;Constructs a new {@link ClassReader} object.__@param classFile the JVMS ClassFile structure to be read.;public ClassReader(final byte[] classFile) {_    this(classFile, 0, classFile.length)__  };constructs,a,new,link,class,reader,object,param,class,file,the,jvms,class,file,structure,to,be,read;public,class,reader,final,byte,class,file,this,class,file,0,class,file,length
ClassReader -> public ClassReader(final byte[] classFile);1536747989;Constructs a new {@link ClassReader} object.__@param classFile the JVMS ClassFile structure to be read.;public ClassReader(final byte[] classFile) {_    this(classFile, 0, classFile.length)__  };constructs,a,new,link,class,reader,object,param,class,file,the,jvms,class,file,structure,to,be,read;public,class,reader,final,byte,class,file,this,class,file,0,class,file,length
ClassReader -> public ClassReader(final byte[] classFile);1537204147;Constructs a new {@link ClassReader} object.__@param classFile the JVMS ClassFile structure to be read.;public ClassReader(final byte[] classFile) {_    this(classFile, 0, classFile.length)__  };constructs,a,new,link,class,reader,object,param,class,file,the,jvms,class,file,structure,to,be,read;public,class,reader,final,byte,class,file,this,class,file,0,class,file,length
ClassReader -> public ClassReader(final byte[] classFile);1539119582;Constructs a new {@link ClassReader} object.__@param classFile the JVMS ClassFile structure to be read.;public ClassReader(final byte[] classFile) {_    this(classFile, 0, classFile.length)__  };constructs,a,new,link,class,reader,object,param,class,file,the,jvms,class,file,structure,to,be,read;public,class,reader,final,byte,class,file,this,class,file,0,class,file,length
ClassReader -> public ClassReader(final byte[] classFile);1541436263;Constructs a new {@link ClassReader} object.__@param classFile the JVMS ClassFile structure to be read.;public ClassReader(final byte[] classFile) {_    this(classFile, 0, classFile.length)__  };constructs,a,new,link,class,reader,object,param,class,file,the,jvms,class,file,structure,to,be,read;public,class,reader,final,byte,class,file,this,class,file,0,class,file,length
ClassReader -> public ClassReader(final InputStream inputStream) throws IOException;1531241461;Constructs a new {@link ClassReader} object.__@param inputStream an input stream of the JVMS ClassFile structure to be read. This input_stream must contain nothing more than the ClassFile structure itself. It is read from its_current position to its end._@throws IOException if a problem occurs during reading.;public ClassReader(final InputStream inputStream) throws IOException {_    this(readStream(inputStream, false))__  };constructs,a,new,link,class,reader,object,param,input,stream,an,input,stream,of,the,jvms,class,file,structure,to,be,read,this,input,stream,must,contain,nothing,more,than,the,class,file,structure,itself,it,is,read,from,its,current,position,to,its,end,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,input,stream,throws,ioexception,this,read,stream,input,stream,false
ClassReader -> public ClassReader(final InputStream inputStream) throws IOException;1536664245;Constructs a new {@link ClassReader} object.__@param inputStream an input stream of the JVMS ClassFile structure to be read. This input_stream must contain nothing more than the ClassFile structure itself. It is read from its_current position to its end._@throws IOException if a problem occurs during reading.;public ClassReader(final InputStream inputStream) throws IOException {_    this(readStream(inputStream, false))__  };constructs,a,new,link,class,reader,object,param,input,stream,an,input,stream,of,the,jvms,class,file,structure,to,be,read,this,input,stream,must,contain,nothing,more,than,the,class,file,structure,itself,it,is,read,from,its,current,position,to,its,end,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,input,stream,throws,ioexception,this,read,stream,input,stream,false
ClassReader -> public ClassReader(final InputStream inputStream) throws IOException;1536747989;Constructs a new {@link ClassReader} object.__@param inputStream an input stream of the JVMS ClassFile structure to be read. This input_stream must contain nothing more than the ClassFile structure itself. It is read from its_current position to its end._@throws IOException if a problem occurs during reading.;public ClassReader(final InputStream inputStream) throws IOException {_    this(readStream(inputStream, false))__  };constructs,a,new,link,class,reader,object,param,input,stream,an,input,stream,of,the,jvms,class,file,structure,to,be,read,this,input,stream,must,contain,nothing,more,than,the,class,file,structure,itself,it,is,read,from,its,current,position,to,its,end,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,input,stream,throws,ioexception,this,read,stream,input,stream,false
ClassReader -> public ClassReader(final InputStream inputStream) throws IOException;1537204147;Constructs a new {@link ClassReader} object.__@param inputStream an input stream of the JVMS ClassFile structure to be read. This input_stream must contain nothing more than the ClassFile structure itself. It is read from its_current position to its end._@throws IOException if a problem occurs during reading.;public ClassReader(final InputStream inputStream) throws IOException {_    this(readStream(inputStream, false))__  };constructs,a,new,link,class,reader,object,param,input,stream,an,input,stream,of,the,jvms,class,file,structure,to,be,read,this,input,stream,must,contain,nothing,more,than,the,class,file,structure,itself,it,is,read,from,its,current,position,to,its,end,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,input,stream,throws,ioexception,this,read,stream,input,stream,false
ClassReader -> public ClassReader(final InputStream inputStream) throws IOException;1539119582;Constructs a new {@link ClassReader} object.__@param inputStream an input stream of the JVMS ClassFile structure to be read. This input_stream must contain nothing more than the ClassFile structure itself. It is read from its_current position to its end._@throws IOException if a problem occurs during reading.;public ClassReader(final InputStream inputStream) throws IOException {_    this(readStream(inputStream, false))__  };constructs,a,new,link,class,reader,object,param,input,stream,an,input,stream,of,the,jvms,class,file,structure,to,be,read,this,input,stream,must,contain,nothing,more,than,the,class,file,structure,itself,it,is,read,from,its,current,position,to,its,end,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,input,stream,throws,ioexception,this,read,stream,input,stream,false
ClassReader -> public ClassReader(final InputStream inputStream) throws IOException;1541436263;Constructs a new {@link ClassReader} object.__@param inputStream an input stream of the JVMS ClassFile structure to be read. This input_stream must contain nothing more than the ClassFile structure itself. It is read from its_current position to its end._@throws IOException if a problem occurs during reading.;public ClassReader(final InputStream inputStream) throws IOException {_    this(readStream(inputStream, false))__  };constructs,a,new,link,class,reader,object,param,input,stream,an,input,stream,of,the,jvms,class,file,structure,to,be,read,this,input,stream,must,contain,nothing,more,than,the,class,file,structure,itself,it,is,read,from,its,current,position,to,its,end,throws,ioexception,if,a,problem,occurs,during,reading;public,class,reader,final,input,stream,input,stream,throws,ioexception,this,read,stream,input,stream,false
ClassReader -> public void accept(final ClassVisitor classVisitor,             final Attribute[] attrs, final int flags);1366718246;Makes the given visitor visit the Java class of this {@link ClassReader}._This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes will not be parsed: its byte_array value will be passed unchanged to the ClassWriter._<i>This may corrupt it if this value contains references to_the constant pool, or has syntactic or semantic links with a_class element that has been transformed by a class adapter_between the reader and the writer</i>._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor,_            final Attribute[] attrs, final int flags) {_        int u = header_ _        char[] c = new char[maxStringLength]_ __        Context context = new Context()__        context.attrs = attrs__        context.flags = flags__        context.buffer = c___        _        int access = readUnsignedShort(u)__        String name = readClass(u + 2, c)__        String superClass = readClass(u + 4, c)__        String[] interfaces = new String[readUnsignedShort(u + 6)]__        u += 8__        for (int i = 0_ i < interfaces.length_ ++i) {_            interfaces[i] = readClass(u, c)__            u += 2__        }__        _        String signature = null__        String sourceFile = null__        String sourceDebug = null__        String enclosingOwner = null__        String enclosingName = null__        String enclosingDesc = null__        int anns = 0__        int ianns = 0__        int innerClasses = 0__        Attribute attributes = null___        u = getAttributes()__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("SourceFile".equals(attrName)) {_                sourceFile = readUTF8(u + 8, c)__            } else if ("InnerClasses".equals(attrName)) {_                innerClasses = u + 8__            } else if ("EnclosingMethod".equals(attrName)) {_                enclosingOwner = readClass(u + 8, c)__                int item = readUnsignedShort(u + 10)__                if (item != 0) {_                    enclosingName = readUTF8(items[item], c)__                    enclosingDesc = readUTF8(items[item] + 2, c)__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if ("SourceDebugExtension".equals(attrName)) {_                int len = readInt(u + 4)__                sourceDebug = readUTF(u + 8, len, new char[len])__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if ("BootstrapMethods".equals(attrName)) {_                int[] bootstrapMethods = new int[readUnsignedShort(u + 8)]__                for (int j = 0, v = u + 10_ j < bootstrapMethods.length_ j++) {_                    bootstrapMethods[j] = v__                    v += 2 + readUnsignedShort(v + 2) << 1__                }_                context.bootstrapMethods = bootstrapMethods__            } else {_                Attribute attr = readAttribute(attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }__        _        classVisitor.visit(readInt(items[1] - 7), access, name, signature,_                superClass, interfaces)___        _        if ((flags & SKIP_DEBUG) == 0_                && (sourceFile != null || sourceDebug != null)) {_            classVisitor.visitSource(sourceFile, sourceDebug)__        }__        _        if (enclosingOwner != null) {_            classVisitor.visitOuterClass(enclosingOwner, enclosingName,_                    enclosingDesc)__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            classVisitor.visitAttribute(attributes)__            attributes = attr__        }__        _        if (innerClasses != 0) {_            int v = innerClasses + 2__            for (int i = readUnsignedShort(innerClasses)_ i > 0_ --i) {_                classVisitor.visitInnerClass(readClass(v, c),_                        readClass(v + 2, c), readUTF8(v + 4, c),_                        readUnsignedShort(v + 6))__                v += 8__            }_        }__        _        u = header + 10 + 2 * interfaces.length__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readField(classVisitor, context, u)__        }_        u += 2__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readMethod(classVisitor, context, u)__        }__        _        classVisitor.visitEnd()__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attrs,final,int,flags,int,u,header,char,c,new,char,max,string,length,context,context,new,context,context,attrs,attrs,context,flags,flags,context,buffer,c,int,access,read,unsigned,short,u,string,name,read,class,u,2,c,string,super,class,read,class,u,4,c,string,interfaces,new,string,read,unsigned,short,u,6,u,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,u,c,u,2,string,signature,null,string,source,file,null,string,source,debug,null,string,enclosing,owner,null,string,enclosing,name,null,string,enclosing,desc,null,int,anns,0,int,ianns,0,int,inner,classes,0,attribute,attributes,null,u,get,attributes,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,source,file,equals,attr,name,source,file,read,utf8,u,8,c,else,if,inner,classes,equals,attr,name,inner,classes,u,8,else,if,enclosing,method,equals,attr,name,enclosing,owner,read,class,u,8,c,int,item,read,unsigned,short,u,10,if,item,0,enclosing,name,read,utf8,items,item,c,enclosing,desc,read,utf8,items,item,2,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,source,debug,extension,equals,attr,name,int,len,read,int,u,4,source,debug,read,utf,u,8,len,new,char,len,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,bootstrap,methods,equals,attr,name,int,bootstrap,methods,new,int,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,bootstrap,methods,length,j,bootstrap,methods,j,v,v,2,read,unsigned,short,v,2,1,context,bootstrap,methods,bootstrap,methods,else,attribute,attr,read,attribute,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,class,visitor,visit,read,int,items,1,7,access,name,signature,super,class,interfaces,if,flags,0,source,file,null,source,debug,null,class,visitor,visit,source,source,file,source,debug,if,enclosing,owner,null,class,visitor,visit,outer,class,enclosing,owner,enclosing,name,enclosing,desc,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,class,visitor,visit,attribute,attributes,attributes,attr,if,inner,classes,0,int,v,inner,classes,2,for,int,i,read,unsigned,short,inner,classes,i,0,i,class,visitor,visit,inner,class,read,class,v,c,read,class,v,2,c,read,utf8,v,4,c,read,unsigned,short,v,6,v,8,u,header,10,2,interfaces,length,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,field,class,visitor,context,u,u,2,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,method,class,visitor,context,u,class,visitor,visit,end
ClassReader -> public void accept(final ClassVisitor classVisitor,             final Attribute[] attrs, final int flags);1395273982;Makes the given visitor visit the Java class of this {@link ClassReader}._This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes will not be parsed: its byte_array value will be passed unchanged to the ClassWriter._<i>This may corrupt it if this value contains references to_the constant pool, or has syntactic or semantic links with a_class element that has been transformed by a class adapter_between the reader and the writer</i>._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor,_            final Attribute[] attrs, final int flags) {_        int u = header_ _        char[] c = new char[maxStringLength]_ __        Context context = new Context()__        context.attrs = attrs__        context.flags = flags__        context.buffer = c___        _        int access = readUnsignedShort(u)__        String name = readClass(u + 2, c)__        String superClass = readClass(u + 4, c)__        String[] interfaces = new String[readUnsignedShort(u + 6)]__        u += 8__        for (int i = 0_ i < interfaces.length_ ++i) {_            interfaces[i] = readClass(u, c)__            u += 2__        }__        _        String signature = null__        String sourceFile = null__        String sourceDebug = null__        String enclosingOwner = null__        String enclosingName = null__        String enclosingDesc = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int innerClasses = 0__        Attribute attributes = null___        u = getAttributes()__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("SourceFile".equals(attrName)) {_                sourceFile = readUTF8(u + 8, c)__            } else if ("InnerClasses".equals(attrName)) {_                innerClasses = u + 8__            } else if ("EnclosingMethod".equals(attrName)) {_                enclosingOwner = readClass(u + 8, c)__                int item = readUnsignedShort(u + 10)__                if (item != 0) {_                    enclosingName = readUTF8(items[item], c)__                    enclosingDesc = readUTF8(items[item] + 2, c)__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if ("SourceDebugExtension".equals(attrName)) {_                int len = readInt(u + 4)__                sourceDebug = readUTF(u + 8, len, new char[len])__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if ("BootstrapMethods".equals(attrName)) {_                int[] bootstrapMethods = new int[readUnsignedShort(u + 8)]__                for (int j = 0, v = u + 10_ j < bootstrapMethods.length_ j++) {_                    bootstrapMethods[j] = v__                    v += 2 + readUnsignedShort(v + 2) << 1__                }_                context.bootstrapMethods = bootstrapMethods__            } else {_                Attribute attr = readAttribute(attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }__        _        classVisitor.visit(readInt(items[1] - 7), access, name, signature,_                superClass, interfaces)___        _        if ((flags & SKIP_DEBUG) == 0_                && (sourceFile != null || sourceDebug != null)) {_            classVisitor.visitSource(sourceFile, sourceDebug)__        }__        _        if (enclosingOwner != null) {_            classVisitor.visitOuterClass(enclosingOwner, enclosingName,_                    enclosingDesc)__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            classVisitor.visitAttribute(attributes)__            attributes = attr__        }__        _        if (innerClasses != 0) {_            int v = innerClasses + 2__            for (int i = readUnsignedShort(innerClasses)_ i > 0_ --i) {_                classVisitor.visitInnerClass(readClass(v, c),_                        readClass(v + 2, c), readUTF8(v + 4, c),_                        readUnsignedShort(v + 6))__                v += 8__            }_        }__        _        u = header + 10 + 2 * interfaces.length__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readField(classVisitor, context, u)__        }_        u += 2__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readMethod(classVisitor, context, u)__        }__        _        classVisitor.visitEnd()__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attrs,final,int,flags,int,u,header,char,c,new,char,max,string,length,context,context,new,context,context,attrs,attrs,context,flags,flags,context,buffer,c,int,access,read,unsigned,short,u,string,name,read,class,u,2,c,string,super,class,read,class,u,4,c,string,interfaces,new,string,read,unsigned,short,u,6,u,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,u,c,u,2,string,signature,null,string,source,file,null,string,source,debug,null,string,enclosing,owner,null,string,enclosing,name,null,string,enclosing,desc,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,inner,classes,0,attribute,attributes,null,u,get,attributes,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,source,file,equals,attr,name,source,file,read,utf8,u,8,c,else,if,inner,classes,equals,attr,name,inner,classes,u,8,else,if,enclosing,method,equals,attr,name,enclosing,owner,read,class,u,8,c,int,item,read,unsigned,short,u,10,if,item,0,enclosing,name,read,utf8,items,item,c,enclosing,desc,read,utf8,items,item,2,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,source,debug,extension,equals,attr,name,int,len,read,int,u,4,source,debug,read,utf,u,8,len,new,char,len,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,bootstrap,methods,equals,attr,name,int,bootstrap,methods,new,int,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,bootstrap,methods,length,j,bootstrap,methods,j,v,v,2,read,unsigned,short,v,2,1,context,bootstrap,methods,bootstrap,methods,else,attribute,attr,read,attribute,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,class,visitor,visit,read,int,items,1,7,access,name,signature,super,class,interfaces,if,flags,0,source,file,null,source,debug,null,class,visitor,visit,source,source,file,source,debug,if,enclosing,owner,null,class,visitor,visit,outer,class,enclosing,owner,enclosing,name,enclosing,desc,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,class,visitor,visit,attribute,attributes,attributes,attr,if,inner,classes,0,int,v,inner,classes,2,for,int,i,read,unsigned,short,inner,classes,i,0,i,class,visitor,visit,inner,class,read,class,v,c,read,class,v,2,c,read,utf8,v,4,c,read,unsigned,short,v,6,v,8,u,header,10,2,interfaces,length,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,field,class,visitor,context,u,u,2,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,method,class,visitor,context,u,class,visitor,visit,end
ClassReader -> public void accept(final ClassVisitor classVisitor,             final Attribute[] attrs, final int flags);1414067099;Makes the given visitor visit the Java class of this {@link ClassReader}._This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes will not be parsed: its byte_array value will be passed unchanged to the ClassWriter._<i>This may corrupt it if this value contains references to_the constant pool, or has syntactic or semantic links with a_class element that has been transformed by a class adapter_between the reader and the writer</i>._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor,_            final Attribute[] attrs, final int flags) {_        int u = header_ _        char[] c = new char[maxStringLength]_ __        Context context = new Context()__        context.attrs = attrs__        context.flags = flags__        context.buffer = c___        _        int access = readUnsignedShort(u)__        String name = readClass(u + 2, c)__        String superClass = readClass(u + 4, c)__        String[] interfaces = new String[readUnsignedShort(u + 6)]__        u += 8__        for (int i = 0_ i < interfaces.length_ ++i) {_            interfaces[i] = readClass(u, c)__            u += 2__        }__        _        String signature = null__        String sourceFile = null__        String sourceDebug = null__        String enclosingOwner = null__        String enclosingName = null__        String enclosingDesc = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int innerClasses = 0__        Attribute attributes = null___        u = getAttributes()__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("SourceFile".equals(attrName)) {_                sourceFile = readUTF8(u + 8, c)__            } else if ("InnerClasses".equals(attrName)) {_                innerClasses = u + 8__            } else if ("EnclosingMethod".equals(attrName)) {_                enclosingOwner = readClass(u + 8, c)__                int item = readUnsignedShort(u + 10)__                if (item != 0) {_                    enclosingName = readUTF8(items[item], c)__                    enclosingDesc = readUTF8(items[item] + 2, c)__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if ("SourceDebugExtension".equals(attrName)) {_                int len = readInt(u + 4)__                sourceDebug = readUTF(u + 8, len, new char[len])__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if ("BootstrapMethods".equals(attrName)) {_                int[] bootstrapMethods = new int[readUnsignedShort(u + 8)]__                for (int j = 0, v = u + 10_ j < bootstrapMethods.length_ j++) {_                    bootstrapMethods[j] = v__                    v += 2 + readUnsignedShort(v + 2) << 1__                }_                context.bootstrapMethods = bootstrapMethods__            } else {_                Attribute attr = readAttribute(attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }__        _        classVisitor.visit(readInt(items[1] - 7), access, name, signature,_                superClass, interfaces)___        _        if ((flags & SKIP_DEBUG) == 0_                && (sourceFile != null || sourceDebug != null)) {_            classVisitor.visitSource(sourceFile, sourceDebug)__        }__        _        if (enclosingOwner != null) {_            classVisitor.visitOuterClass(enclosingOwner, enclosingName,_                    enclosingDesc)__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            classVisitor.visitAttribute(attributes)__            attributes = attr__        }__        _        if (innerClasses != 0) {_            int v = innerClasses + 2__            for (int i = readUnsignedShort(innerClasses)_ i > 0_ --i) {_                classVisitor.visitInnerClass(readClass(v, c),_                        readClass(v + 2, c), readUTF8(v + 4, c),_                        readUnsignedShort(v + 6))__                v += 8__            }_        }__        _        u = header + 10 + 2 * interfaces.length__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readField(classVisitor, context, u)__        }_        u += 2__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readMethod(classVisitor, context, u)__        }__        _        classVisitor.visitEnd()__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attrs,final,int,flags,int,u,header,char,c,new,char,max,string,length,context,context,new,context,context,attrs,attrs,context,flags,flags,context,buffer,c,int,access,read,unsigned,short,u,string,name,read,class,u,2,c,string,super,class,read,class,u,4,c,string,interfaces,new,string,read,unsigned,short,u,6,u,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,u,c,u,2,string,signature,null,string,source,file,null,string,source,debug,null,string,enclosing,owner,null,string,enclosing,name,null,string,enclosing,desc,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,inner,classes,0,attribute,attributes,null,u,get,attributes,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,source,file,equals,attr,name,source,file,read,utf8,u,8,c,else,if,inner,classes,equals,attr,name,inner,classes,u,8,else,if,enclosing,method,equals,attr,name,enclosing,owner,read,class,u,8,c,int,item,read,unsigned,short,u,10,if,item,0,enclosing,name,read,utf8,items,item,c,enclosing,desc,read,utf8,items,item,2,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,source,debug,extension,equals,attr,name,int,len,read,int,u,4,source,debug,read,utf,u,8,len,new,char,len,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,bootstrap,methods,equals,attr,name,int,bootstrap,methods,new,int,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,bootstrap,methods,length,j,bootstrap,methods,j,v,v,2,read,unsigned,short,v,2,1,context,bootstrap,methods,bootstrap,methods,else,attribute,attr,read,attribute,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,class,visitor,visit,read,int,items,1,7,access,name,signature,super,class,interfaces,if,flags,0,source,file,null,source,debug,null,class,visitor,visit,source,source,file,source,debug,if,enclosing,owner,null,class,visitor,visit,outer,class,enclosing,owner,enclosing,name,enclosing,desc,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,class,visitor,visit,attribute,attributes,attributes,attr,if,inner,classes,0,int,v,inner,classes,2,for,int,i,read,unsigned,short,inner,classes,i,0,i,class,visitor,visit,inner,class,read,class,v,c,read,class,v,2,c,read,utf8,v,4,c,read,unsigned,short,v,6,v,8,u,header,10,2,interfaces,length,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,field,class,visitor,context,u,u,2,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,method,class,visitor,context,u,class,visitor,visit,end
ClassReader -> public void accept(final ClassVisitor classVisitor,             final Attribute[] attrs, final int flags);1414499035;Makes the given visitor visit the Java class of this {@link ClassReader}._This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes will not be parsed: its byte_array value will be passed unchanged to the ClassWriter._<i>This may corrupt it if this value contains references to_the constant pool, or has syntactic or semantic links with a_class element that has been transformed by a class adapter_between the reader and the writer</i>._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor,_            final Attribute[] attrs, final int flags) {_        int u = header_ _        char[] c = new char[maxStringLength]_ __        Context context = new Context()__        context.attrs = attrs__        context.flags = flags__        context.buffer = c___        _        int access = readUnsignedShort(u)__        String name = readClass(u + 2, c)__        String superClass = readClass(u + 4, c)__        String[] interfaces = new String[readUnsignedShort(u + 6)]__        u += 8__        for (int i = 0_ i < interfaces.length_ ++i) {_            interfaces[i] = readClass(u, c)__            u += 2__        }__        _        String signature = null__        String sourceFile = null__        String sourceDebug = null__        String enclosingOwner = null__        String enclosingName = null__        String enclosingDesc = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int innerClasses = 0__        Attribute attributes = null___        u = getAttributes()__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("SourceFile".equals(attrName)) {_                sourceFile = readUTF8(u + 8, c)__            } else if ("InnerClasses".equals(attrName)) {_                innerClasses = u + 8__            } else if ("EnclosingMethod".equals(attrName)) {_                enclosingOwner = readClass(u + 8, c)__                int item = readUnsignedShort(u + 10)__                if (item != 0) {_                    enclosingName = readUTF8(items[item], c)__                    enclosingDesc = readUTF8(items[item] + 2, c)__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if ("SourceDebugExtension".equals(attrName)) {_                int len = readInt(u + 4)__                sourceDebug = readUTF(u + 8, len, new char[len])__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if ("BootstrapMethods".equals(attrName)) {_                int[] bootstrapMethods = new int[readUnsignedShort(u + 8)]__                for (int j = 0, v = u + 10_ j < bootstrapMethods.length_ j++) {_                    bootstrapMethods[j] = v__                    v += 2 + readUnsignedShort(v + 2) << 1__                }_                context.bootstrapMethods = bootstrapMethods__            } else {_                Attribute attr = readAttribute(attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }__        _        classVisitor.visit(readInt(items[1] - 7), access, name, signature,_                superClass, interfaces)___        _        if ((flags & SKIP_DEBUG) == 0_                && (sourceFile != null || sourceDebug != null)) {_            classVisitor.visitSource(sourceFile, sourceDebug)__        }__        _        if (enclosingOwner != null) {_            classVisitor.visitOuterClass(enclosingOwner, enclosingName,_                    enclosingDesc)__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            classVisitor.visitAttribute(attributes)__            attributes = attr__        }__        _        if (innerClasses != 0) {_            int v = innerClasses + 2__            for (int i = readUnsignedShort(innerClasses)_ i > 0_ --i) {_                classVisitor.visitInnerClass(readClass(v, c),_                        readClass(v + 2, c), readUTF8(v + 4, c),_                        readUnsignedShort(v + 6))__                v += 8__            }_        }__        _        u = header + 10 + 2 * interfaces.length__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readField(classVisitor, context, u)__        }_        u += 2__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readMethod(classVisitor, context, u)__        }__        _        classVisitor.visitEnd()__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attrs,final,int,flags,int,u,header,char,c,new,char,max,string,length,context,context,new,context,context,attrs,attrs,context,flags,flags,context,buffer,c,int,access,read,unsigned,short,u,string,name,read,class,u,2,c,string,super,class,read,class,u,4,c,string,interfaces,new,string,read,unsigned,short,u,6,u,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,u,c,u,2,string,signature,null,string,source,file,null,string,source,debug,null,string,enclosing,owner,null,string,enclosing,name,null,string,enclosing,desc,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,inner,classes,0,attribute,attributes,null,u,get,attributes,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,source,file,equals,attr,name,source,file,read,utf8,u,8,c,else,if,inner,classes,equals,attr,name,inner,classes,u,8,else,if,enclosing,method,equals,attr,name,enclosing,owner,read,class,u,8,c,int,item,read,unsigned,short,u,10,if,item,0,enclosing,name,read,utf8,items,item,c,enclosing,desc,read,utf8,items,item,2,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,source,debug,extension,equals,attr,name,int,len,read,int,u,4,source,debug,read,utf,u,8,len,new,char,len,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,bootstrap,methods,equals,attr,name,int,bootstrap,methods,new,int,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,bootstrap,methods,length,j,bootstrap,methods,j,v,v,2,read,unsigned,short,v,2,1,context,bootstrap,methods,bootstrap,methods,else,attribute,attr,read,attribute,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,class,visitor,visit,read,int,items,1,7,access,name,signature,super,class,interfaces,if,flags,0,source,file,null,source,debug,null,class,visitor,visit,source,source,file,source,debug,if,enclosing,owner,null,class,visitor,visit,outer,class,enclosing,owner,enclosing,name,enclosing,desc,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,class,visitor,visit,attribute,attributes,attributes,attr,if,inner,classes,0,int,v,inner,classes,2,for,int,i,read,unsigned,short,inner,classes,i,0,i,class,visitor,visit,inner,class,read,class,v,c,read,class,v,2,c,read,utf8,v,4,c,read,unsigned,short,v,6,v,8,u,header,10,2,interfaces,length,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,field,class,visitor,context,u,u,2,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,method,class,visitor,context,u,class,visitor,visit,end
ClassReader -> public void accept(final ClassVisitor classVisitor,             final Attribute[] attrs, final int flags);1416998550;Makes the given visitor visit the Java class of this {@link ClassReader}._This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes will not be parsed: its byte_array value will be passed unchanged to the ClassWriter._<i>This may corrupt it if this value contains references to_the constant pool, or has syntactic or semantic links with a_class element that has been transformed by a class adapter_between the reader and the writer</i>._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor,_            final Attribute[] attrs, final int flags) {_        int u = header_ _        char[] c = new char[maxStringLength]_ __        Context context = new Context()__        context.attrs = attrs__        context.flags = flags__        context.buffer = c___        _        int access = readUnsignedShort(u)__        String name = readClass(u + 2, c)__        String superClass = readClass(u + 4, c)__        String[] interfaces = new String[readUnsignedShort(u + 6)]__        u += 8__        for (int i = 0_ i < interfaces.length_ ++i) {_            interfaces[i] = readClass(u, c)__            u += 2__        }__        _        String signature = null__        String sourceFile = null__        String sourceDebug = null__        String enclosingOwner = null__        String enclosingName = null__        String enclosingDesc = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int innerClasses = 0__        Attribute attributes = null___        u = getAttributes()__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("SourceFile".equals(attrName)) {_                sourceFile = readUTF8(u + 8, c)__            } else if ("InnerClasses".equals(attrName)) {_                innerClasses = u + 8__            } else if ("EnclosingMethod".equals(attrName)) {_                enclosingOwner = readClass(u + 8, c)__                int item = readUnsignedShort(u + 10)__                if (item != 0) {_                    enclosingName = readUTF8(items[item], c)__                    enclosingDesc = readUTF8(items[item] + 2, c)__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if ("SourceDebugExtension".equals(attrName)) {_                int len = readInt(u + 4)__                sourceDebug = readUTF(u + 8, len, new char[len])__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if ("BootstrapMethods".equals(attrName)) {_                int[] bootstrapMethods = new int[readUnsignedShort(u + 8)]__                for (int j = 0, v = u + 10_ j < bootstrapMethods.length_ j++) {_                    bootstrapMethods[j] = v__                    v += 2 + readUnsignedShort(v + 2) << 1__                }_                context.bootstrapMethods = bootstrapMethods__            } else {_                Attribute attr = readAttribute(attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }__        _        classVisitor.visit(readInt(items[1] - 7), access, name, signature,_                superClass, interfaces)___        _        if ((flags & SKIP_DEBUG) == 0_                && (sourceFile != null || sourceDebug != null)) {_            classVisitor.visitSource(sourceFile, sourceDebug)__        }__        _        if (enclosingOwner != null) {_            classVisitor.visitOuterClass(enclosingOwner, enclosingName,_                    enclosingDesc)__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            classVisitor.visitAttribute(attributes)__            attributes = attr__        }__        _        if (innerClasses != 0) {_            int v = innerClasses + 2__            for (int i = readUnsignedShort(innerClasses)_ i > 0_ --i) {_                classVisitor.visitInnerClass(readClass(v, c),_                        readClass(v + 2, c), readUTF8(v + 4, c),_                        readUnsignedShort(v + 6))__                v += 8__            }_        }__        _        u = header + 10 + 2 * interfaces.length__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readField(classVisitor, context, u)__        }_        u += 2__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readMethod(classVisitor, context, u)__        }__        _        classVisitor.visitEnd()__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attrs,final,int,flags,int,u,header,char,c,new,char,max,string,length,context,context,new,context,context,attrs,attrs,context,flags,flags,context,buffer,c,int,access,read,unsigned,short,u,string,name,read,class,u,2,c,string,super,class,read,class,u,4,c,string,interfaces,new,string,read,unsigned,short,u,6,u,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,u,c,u,2,string,signature,null,string,source,file,null,string,source,debug,null,string,enclosing,owner,null,string,enclosing,name,null,string,enclosing,desc,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,inner,classes,0,attribute,attributes,null,u,get,attributes,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,source,file,equals,attr,name,source,file,read,utf8,u,8,c,else,if,inner,classes,equals,attr,name,inner,classes,u,8,else,if,enclosing,method,equals,attr,name,enclosing,owner,read,class,u,8,c,int,item,read,unsigned,short,u,10,if,item,0,enclosing,name,read,utf8,items,item,c,enclosing,desc,read,utf8,items,item,2,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,source,debug,extension,equals,attr,name,int,len,read,int,u,4,source,debug,read,utf,u,8,len,new,char,len,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,bootstrap,methods,equals,attr,name,int,bootstrap,methods,new,int,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,bootstrap,methods,length,j,bootstrap,methods,j,v,v,2,read,unsigned,short,v,2,1,context,bootstrap,methods,bootstrap,methods,else,attribute,attr,read,attribute,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,class,visitor,visit,read,int,items,1,7,access,name,signature,super,class,interfaces,if,flags,0,source,file,null,source,debug,null,class,visitor,visit,source,source,file,source,debug,if,enclosing,owner,null,class,visitor,visit,outer,class,enclosing,owner,enclosing,name,enclosing,desc,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,class,visitor,visit,attribute,attributes,attributes,attr,if,inner,classes,0,int,v,inner,classes,2,for,int,i,read,unsigned,short,inner,classes,i,0,i,class,visitor,visit,inner,class,read,class,v,c,read,class,v,2,c,read,utf8,v,4,c,read,unsigned,short,v,6,v,8,u,header,10,2,interfaces,length,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,field,class,visitor,context,u,u,2,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,method,class,visitor,context,u,class,visitor,visit,end
ClassReader -> public void accept(final ClassVisitor classVisitor,             final Attribute[] attrs, final int flags);1457705343;Makes the given visitor visit the Java class of this {@link ClassReader}._This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes will not be parsed: its byte_array value will be passed unchanged to the ClassWriter._<i>This may corrupt it if this value contains references to_the constant pool, or has syntactic or semantic links with a_class element that has been transformed by a class adapter_between the reader and the writer</i>._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor,_            final Attribute[] attrs, final int flags) {_        int u = header_ _        char[] c = new char[maxStringLength]_ __        Context context = new Context()__        context.attrs = attrs__        context.flags = flags__        context.buffer = c___        _        int access = readUnsignedShort(u)__        String name = readClass(u + 2, c)__        String superClass = readClass(u + 4, c)__        String[] interfaces = new String[readUnsignedShort(u + 6)]__        u += 8__        for (int i = 0_ i < interfaces.length_ ++i) {_            interfaces[i] = readClass(u, c)__            u += 2__        }__        _        String signature = null__        String sourceFile = null__        String sourceDebug = null__        String enclosingOwner = null__        String enclosingName = null__        String enclosingDesc = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int innerClasses = 0__        Attribute attributes = null___        u = getAttributes()__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("SourceFile".equals(attrName)) {_                sourceFile = readUTF8(u + 8, c)__            } else if ("InnerClasses".equals(attrName)) {_                innerClasses = u + 8__            } else if ("EnclosingMethod".equals(attrName)) {_                enclosingOwner = readClass(u + 8, c)__                int item = readUnsignedShort(u + 10)__                if (item != 0) {_                    enclosingName = readUTF8(items[item], c)__                    enclosingDesc = readUTF8(items[item] + 2, c)__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if ("SourceDebugExtension".equals(attrName)) {_                int len = readInt(u + 4)__                sourceDebug = readUTF(u + 8, len, new char[len])__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if ("BootstrapMethods".equals(attrName)) {_                int[] bootstrapMethods = new int[readUnsignedShort(u + 8)]__                for (int j = 0, v = u + 10_ j < bootstrapMethods.length_ j++) {_                    bootstrapMethods[j] = v__                    v += 2 + readUnsignedShort(v + 2) << 1__                }_                context.bootstrapMethods = bootstrapMethods__            } else {_                Attribute attr = readAttribute(attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }__        _        classVisitor.visit(readInt(items[1] - 7), access, name, signature,_                superClass, interfaces)___        _        if ((flags & SKIP_DEBUG) == 0_                && (sourceFile != null || sourceDebug != null)) {_            classVisitor.visitSource(sourceFile, sourceDebug)__        }__        _        if (enclosingOwner != null) {_            classVisitor.visitOuterClass(enclosingOwner, enclosingName,_                    enclosingDesc)__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            classVisitor.visitAttribute(attributes)__            attributes = attr__        }__        _        if (innerClasses != 0) {_            int v = innerClasses + 2__            for (int i = readUnsignedShort(innerClasses)_ i > 0_ --i) {_                classVisitor.visitInnerClass(readClass(v, c),_                        readClass(v + 2, c), readUTF8(v + 4, c),_                        readUnsignedShort(v + 6))__                v += 8__            }_        }__        _        u = header + 10 + 2 * interfaces.length__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readField(classVisitor, context, u)__        }_        u += 2__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readMethod(classVisitor, context, u)__        }__        _        classVisitor.visitEnd()__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attrs,final,int,flags,int,u,header,char,c,new,char,max,string,length,context,context,new,context,context,attrs,attrs,context,flags,flags,context,buffer,c,int,access,read,unsigned,short,u,string,name,read,class,u,2,c,string,super,class,read,class,u,4,c,string,interfaces,new,string,read,unsigned,short,u,6,u,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,u,c,u,2,string,signature,null,string,source,file,null,string,source,debug,null,string,enclosing,owner,null,string,enclosing,name,null,string,enclosing,desc,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,inner,classes,0,attribute,attributes,null,u,get,attributes,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,source,file,equals,attr,name,source,file,read,utf8,u,8,c,else,if,inner,classes,equals,attr,name,inner,classes,u,8,else,if,enclosing,method,equals,attr,name,enclosing,owner,read,class,u,8,c,int,item,read,unsigned,short,u,10,if,item,0,enclosing,name,read,utf8,items,item,c,enclosing,desc,read,utf8,items,item,2,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,source,debug,extension,equals,attr,name,int,len,read,int,u,4,source,debug,read,utf,u,8,len,new,char,len,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,bootstrap,methods,equals,attr,name,int,bootstrap,methods,new,int,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,bootstrap,methods,length,j,bootstrap,methods,j,v,v,2,read,unsigned,short,v,2,1,context,bootstrap,methods,bootstrap,methods,else,attribute,attr,read,attribute,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,class,visitor,visit,read,int,items,1,7,access,name,signature,super,class,interfaces,if,flags,0,source,file,null,source,debug,null,class,visitor,visit,source,source,file,source,debug,if,enclosing,owner,null,class,visitor,visit,outer,class,enclosing,owner,enclosing,name,enclosing,desc,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,class,visitor,visit,attribute,attributes,attributes,attr,if,inner,classes,0,int,v,inner,classes,2,for,int,i,read,unsigned,short,inner,classes,i,0,i,class,visitor,visit,inner,class,read,class,v,c,read,class,v,2,c,read,utf8,v,4,c,read,unsigned,short,v,6,v,8,u,header,10,2,interfaces,length,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,field,class,visitor,context,u,u,2,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,method,class,visitor,context,u,class,visitor,visit,end
ClassReader -> public void accept(final ClassVisitor classVisitor,             final Attribute[] attrs, final int flags);1459258703;Makes the given visitor visit the Java class of this {@link ClassReader}._This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes will not be parsed: its byte_array value will be passed unchanged to the ClassWriter._<i>This may corrupt it if this value contains references to_the constant pool, or has syntactic or semantic links with a_class element that has been transformed by a class adapter_between the reader and the writer</i>._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor,_            final Attribute[] attrs, final int flags) {_        int u = header_ _        char[] c = new char[maxStringLength]_ __        Context context = new Context()__        context.attrs = attrs__        context.flags = flags__        context.buffer = c___        _        int access = readUnsignedShort(u)__        String name = readClass(u + 2, c)__        String superClass = readClass(u + 4, c)__        String[] interfaces = new String[readUnsignedShort(u + 6)]__        u += 8__        for (int i = 0_ i < interfaces.length_ ++i) {_            interfaces[i] = readClass(u, c)__            u += 2__        }__        _        String signature = null__        String sourceFile = null__        String sourceDebug = null__        String enclosingOwner = null__        String enclosingName = null__        String enclosingDesc = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int innerClasses = 0__        Attribute attributes = null___        u = getAttributes()__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("SourceFile".equals(attrName)) {_                sourceFile = readUTF8(u + 8, c)__            } else if ("InnerClasses".equals(attrName)) {_                innerClasses = u + 8__            } else if ("EnclosingMethod".equals(attrName)) {_                enclosingOwner = readClass(u + 8, c)__                int item = readUnsignedShort(u + 10)__                if (item != 0) {_                    enclosingName = readUTF8(items[item], c)__                    enclosingDesc = readUTF8(items[item] + 2, c)__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if ("SourceDebugExtension".equals(attrName)) {_                int len = readInt(u + 4)__                sourceDebug = readUTF(u + 8, len, new char[len])__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if ("BootstrapMethods".equals(attrName)) {_                int[] bootstrapMethods = new int[readUnsignedShort(u + 8)]__                for (int j = 0, v = u + 10_ j < bootstrapMethods.length_ j++) {_                    bootstrapMethods[j] = v__                    v += 2 + readUnsignedShort(v + 2) << 1__                }_                context.bootstrapMethods = bootstrapMethods__            } else {_                Attribute attr = readAttribute(attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }__        _        classVisitor.visit(readInt(items[1] - 7), access, name, signature,_                superClass, interfaces)___        _        if ((flags & SKIP_DEBUG) == 0_                && (sourceFile != null || sourceDebug != null)) {_            classVisitor.visitSource(sourceFile, sourceDebug)__        }__        _        if (enclosingOwner != null) {_            classVisitor.visitOuterClass(enclosingOwner, enclosingName,_                    enclosingDesc)__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            classVisitor.visitAttribute(attributes)__            attributes = attr__        }__        _        if (innerClasses != 0) {_            int v = innerClasses + 2__            for (int i = readUnsignedShort(innerClasses)_ i > 0_ --i) {_                classVisitor.visitInnerClass(readClass(v, c),_                        readClass(v + 2, c), readUTF8(v + 4, c),_                        readUnsignedShort(v + 6))__                v += 8__            }_        }__        _        u = header + 10 + 2 * interfaces.length__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readField(classVisitor, context, u)__        }_        u += 2__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readMethod(classVisitor, context, u)__        }__        _        classVisitor.visitEnd()__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attrs,final,int,flags,int,u,header,char,c,new,char,max,string,length,context,context,new,context,context,attrs,attrs,context,flags,flags,context,buffer,c,int,access,read,unsigned,short,u,string,name,read,class,u,2,c,string,super,class,read,class,u,4,c,string,interfaces,new,string,read,unsigned,short,u,6,u,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,u,c,u,2,string,signature,null,string,source,file,null,string,source,debug,null,string,enclosing,owner,null,string,enclosing,name,null,string,enclosing,desc,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,inner,classes,0,attribute,attributes,null,u,get,attributes,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,source,file,equals,attr,name,source,file,read,utf8,u,8,c,else,if,inner,classes,equals,attr,name,inner,classes,u,8,else,if,enclosing,method,equals,attr,name,enclosing,owner,read,class,u,8,c,int,item,read,unsigned,short,u,10,if,item,0,enclosing,name,read,utf8,items,item,c,enclosing,desc,read,utf8,items,item,2,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,source,debug,extension,equals,attr,name,int,len,read,int,u,4,source,debug,read,utf,u,8,len,new,char,len,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,bootstrap,methods,equals,attr,name,int,bootstrap,methods,new,int,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,bootstrap,methods,length,j,bootstrap,methods,j,v,v,2,read,unsigned,short,v,2,1,context,bootstrap,methods,bootstrap,methods,else,attribute,attr,read,attribute,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,class,visitor,visit,read,int,items,1,7,access,name,signature,super,class,interfaces,if,flags,0,source,file,null,source,debug,null,class,visitor,visit,source,source,file,source,debug,if,enclosing,owner,null,class,visitor,visit,outer,class,enclosing,owner,enclosing,name,enclosing,desc,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,class,visitor,visit,attribute,attributes,attributes,attr,if,inner,classes,0,int,v,inner,classes,2,for,int,i,read,unsigned,short,inner,classes,i,0,i,class,visitor,visit,inner,class,read,class,v,c,read,class,v,2,c,read,utf8,v,4,c,read,unsigned,short,v,6,v,8,u,header,10,2,interfaces,length,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,field,class,visitor,context,u,u,2,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,method,class,visitor,context,u,class,visitor,visit,end
ClassReader -> public void accept(final ClassVisitor classVisitor,             final Attribute[] attrs, final int flags);1478623137;Makes the given visitor visit the Java class of this {@link ClassReader}._This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes will not be parsed: its byte_array value will be passed unchanged to the ClassWriter._<i>This may corrupt it if this value contains references to_the constant pool, or has syntactic or semantic links with a_class element that has been transformed by a class adapter_between the reader and the writer</i>._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor,_            final Attribute[] attrs, final int flags) {_        int u = header_ _        char[] c = new char[maxStringLength]_ __        Context context = new Context()__        context.attrs = attrs__        context.flags = flags__        context.buffer = c___        _        int access = readUnsignedShort(u)__        String name = readClass(u + 2, c)__        String superClass = readClass(u + 4, c)__        String[] interfaces = new String[readUnsignedShort(u + 6)]__        u += 8__        for (int i = 0_ i < interfaces.length_ ++i) {_            interfaces[i] = readClass(u, c)__            u += 2__        }__        _        String signature = null__        String sourceFile = null__        String sourceDebug = null__        String enclosingOwner = null__        String enclosingName = null__        String enclosingDesc = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int innerClasses = 0__        Attribute attributes = null___        u = getAttributes()__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("SourceFile".equals(attrName)) {_                sourceFile = readUTF8(u + 8, c)__            } else if ("InnerClasses".equals(attrName)) {_                innerClasses = u + 8__            } else if ("EnclosingMethod".equals(attrName)) {_                enclosingOwner = readClass(u + 8, c)__                int item = readUnsignedShort(u + 10)__                if (item != 0) {_                    enclosingName = readUTF8(items[item], c)__                    enclosingDesc = readUTF8(items[item] + 2, c)__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if ("SourceDebugExtension".equals(attrName)) {_                int len = readInt(u + 4)__                sourceDebug = readUTF(u + 8, len, new char[len])__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if ("BootstrapMethods".equals(attrName)) {_                int[] bootstrapMethods = new int[readUnsignedShort(u + 8)]__                for (int j = 0, v = u + 10_ j < bootstrapMethods.length_ j++) {_                    bootstrapMethods[j] = v__                    v += 2 + readUnsignedShort(v + 2) << 1__                }_                context.bootstrapMethods = bootstrapMethods__            } else {_                Attribute attr = readAttribute(attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }__        _        classVisitor.visit(readInt(items[1] - 7), access, name, signature,_                superClass, interfaces)___        _        if ((flags & SKIP_DEBUG) == 0_                && (sourceFile != null || sourceDebug != null)) {_            classVisitor.visitSource(sourceFile, sourceDebug)__        }__        _        if (enclosingOwner != null) {_            classVisitor.visitOuterClass(enclosingOwner, enclosingName,_                    enclosingDesc)__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            classVisitor.visitAttribute(attributes)__            attributes = attr__        }__        _        if (innerClasses != 0) {_            int v = innerClasses + 2__            for (int i = readUnsignedShort(innerClasses)_ i > 0_ --i) {_                classVisitor.visitInnerClass(readClass(v, c),_                        readClass(v + 2, c), readUTF8(v + 4, c),_                        readUnsignedShort(v + 6))__                v += 8__            }_        }__        _        u = header + 10 + 2 * interfaces.length__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readField(classVisitor, context, u)__        }_        u += 2__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readMethod(classVisitor, context, u)__        }__        _        classVisitor.visitEnd()__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attrs,final,int,flags,int,u,header,char,c,new,char,max,string,length,context,context,new,context,context,attrs,attrs,context,flags,flags,context,buffer,c,int,access,read,unsigned,short,u,string,name,read,class,u,2,c,string,super,class,read,class,u,4,c,string,interfaces,new,string,read,unsigned,short,u,6,u,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,u,c,u,2,string,signature,null,string,source,file,null,string,source,debug,null,string,enclosing,owner,null,string,enclosing,name,null,string,enclosing,desc,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,inner,classes,0,attribute,attributes,null,u,get,attributes,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,source,file,equals,attr,name,source,file,read,utf8,u,8,c,else,if,inner,classes,equals,attr,name,inner,classes,u,8,else,if,enclosing,method,equals,attr,name,enclosing,owner,read,class,u,8,c,int,item,read,unsigned,short,u,10,if,item,0,enclosing,name,read,utf8,items,item,c,enclosing,desc,read,utf8,items,item,2,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,source,debug,extension,equals,attr,name,int,len,read,int,u,4,source,debug,read,utf,u,8,len,new,char,len,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,bootstrap,methods,equals,attr,name,int,bootstrap,methods,new,int,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,bootstrap,methods,length,j,bootstrap,methods,j,v,v,2,read,unsigned,short,v,2,1,context,bootstrap,methods,bootstrap,methods,else,attribute,attr,read,attribute,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,class,visitor,visit,read,int,items,1,7,access,name,signature,super,class,interfaces,if,flags,0,source,file,null,source,debug,null,class,visitor,visit,source,source,file,source,debug,if,enclosing,owner,null,class,visitor,visit,outer,class,enclosing,owner,enclosing,name,enclosing,desc,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,class,visitor,visit,attribute,attributes,attributes,attr,if,inner,classes,0,int,v,inner,classes,2,for,int,i,read,unsigned,short,inner,classes,i,0,i,class,visitor,visit,inner,class,read,class,v,c,read,class,v,2,c,read,utf8,v,4,c,read,unsigned,short,v,6,v,8,u,header,10,2,interfaces,length,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,field,class,visitor,context,u,u,2,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,method,class,visitor,context,u,class,visitor,visit,end
ClassReader -> public void accept(final ClassVisitor classVisitor,             final Attribute[] attrs, final int flags);1483093254;Makes the given visitor visit the Java class of this {@link ClassReader}._This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes will not be parsed: its byte_array value will be passed unchanged to the ClassWriter._<i>This may corrupt it if this value contains references to_the constant pool, or has syntactic or semantic links with a_class element that has been transformed by a class adapter_between the reader and the writer</i>._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor,_            final Attribute[] attrs, final int flags) {_        int u = header_ _        char[] c = new char[maxStringLength]_ __        Context context = new Context()__        context.attrs = attrs__        context.flags = flags__        context.buffer = c___        _        int access = readUnsignedShort(u)__        String name = readClass(u + 2, c)__        String superClass = readClass(u + 4, c)__        String[] interfaces = new String[readUnsignedShort(u + 6)]__        u += 8__        for (int i = 0_ i < interfaces.length_ ++i) {_            interfaces[i] = readClass(u, c)__            u += 2__        }__        _        String signature = null__        String sourceFile = null__        String sourceDebug = null__        String enclosingOwner = null__        String enclosingName = null__        String enclosingDesc = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int innerClasses = 0__        Attribute attributes = null___        u = getAttributes()__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("SourceFile".equals(attrName)) {_                sourceFile = readUTF8(u + 8, c)__            } else if ("InnerClasses".equals(attrName)) {_                innerClasses = u + 8__            } else if ("EnclosingMethod".equals(attrName)) {_                enclosingOwner = readClass(u + 8, c)__                int item = readUnsignedShort(u + 10)__                if (item != 0) {_                    enclosingName = readUTF8(items[item], c)__                    enclosingDesc = readUTF8(items[item] + 2, c)__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if ("SourceDebugExtension".equals(attrName)) {_                int len = readInt(u + 4)__                sourceDebug = readUTF(u + 8, len, new char[len])__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if ("BootstrapMethods".equals(attrName)) {_                int[] bootstrapMethods = new int[readUnsignedShort(u + 8)]__                for (int j = 0, v = u + 10_ j < bootstrapMethods.length_ j++) {_                    bootstrapMethods[j] = v__                    v += 2 + readUnsignedShort(v + 2) << 1__                }_                context.bootstrapMethods = bootstrapMethods__            } else {_                Attribute attr = readAttribute(attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }__        _        classVisitor.visit(readInt(items[1] - 7), access, name, signature,_                superClass, interfaces)___        _        if ((flags & SKIP_DEBUG) == 0_                && (sourceFile != null || sourceDebug != null)) {_            classVisitor.visitSource(sourceFile, sourceDebug)__        }__        _        if (enclosingOwner != null) {_            classVisitor.visitOuterClass(enclosingOwner, enclosingName,_                    enclosingDesc)__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            classVisitor.visitAttribute(attributes)__            attributes = attr__        }__        _        if (innerClasses != 0) {_            int v = innerClasses + 2__            for (int i = readUnsignedShort(innerClasses)_ i > 0_ --i) {_                classVisitor.visitInnerClass(readClass(v, c),_                        readClass(v + 2, c), readUTF8(v + 4, c),_                        readUnsignedShort(v + 6))__                v += 8__            }_        }__        _        u = header + 10 + 2 * interfaces.length__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readField(classVisitor, context, u)__        }_        u += 2__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readMethod(classVisitor, context, u)__        }__        _        classVisitor.visitEnd()__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attrs,final,int,flags,int,u,header,char,c,new,char,max,string,length,context,context,new,context,context,attrs,attrs,context,flags,flags,context,buffer,c,int,access,read,unsigned,short,u,string,name,read,class,u,2,c,string,super,class,read,class,u,4,c,string,interfaces,new,string,read,unsigned,short,u,6,u,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,u,c,u,2,string,signature,null,string,source,file,null,string,source,debug,null,string,enclosing,owner,null,string,enclosing,name,null,string,enclosing,desc,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,inner,classes,0,attribute,attributes,null,u,get,attributes,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,source,file,equals,attr,name,source,file,read,utf8,u,8,c,else,if,inner,classes,equals,attr,name,inner,classes,u,8,else,if,enclosing,method,equals,attr,name,enclosing,owner,read,class,u,8,c,int,item,read,unsigned,short,u,10,if,item,0,enclosing,name,read,utf8,items,item,c,enclosing,desc,read,utf8,items,item,2,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,source,debug,extension,equals,attr,name,int,len,read,int,u,4,source,debug,read,utf,u,8,len,new,char,len,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,bootstrap,methods,equals,attr,name,int,bootstrap,methods,new,int,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,bootstrap,methods,length,j,bootstrap,methods,j,v,v,2,read,unsigned,short,v,2,1,context,bootstrap,methods,bootstrap,methods,else,attribute,attr,read,attribute,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,class,visitor,visit,read,int,items,1,7,access,name,signature,super,class,interfaces,if,flags,0,source,file,null,source,debug,null,class,visitor,visit,source,source,file,source,debug,if,enclosing,owner,null,class,visitor,visit,outer,class,enclosing,owner,enclosing,name,enclosing,desc,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,class,visitor,visit,attribute,attributes,attributes,attr,if,inner,classes,0,int,v,inner,classes,2,for,int,i,read,unsigned,short,inner,classes,i,0,i,class,visitor,visit,inner,class,read,class,v,c,read,class,v,2,c,read,utf8,v,4,c,read,unsigned,short,v,6,v,8,u,header,10,2,interfaces,length,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,field,class,visitor,context,u,u,2,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,method,class,visitor,context,u,class,visitor,visit,end
ClassReader -> public void accept(final ClassVisitor classVisitor,             final Attribute[] attrs, final int flags);1505821772;Makes the given visitor visit the Java class of this {@link ClassReader}._This class is the one specified in the constructor (see_{@link #ClassReader(byte[]) ClassReader}).__@param classVisitor_the visitor that must visit this class._@param attrs_prototypes of the attributes that must be parsed during the_visit of the class. Any attribute whose type is not equal to_the type of one the prototypes will not be parsed: its byte_array value will be passed unchanged to the ClassWriter._<i>This may corrupt it if this value contains references to_the constant pool, or has syntactic or semantic links with a_class element that has been transformed by a class adapter_between the reader and the writer</i>._@param flags_option flags that can be used to modify the default behavior_of this class. See {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}_, {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.;public void accept(final ClassVisitor classVisitor,_            final Attribute[] attrs, final int flags) {_        int u = header_ _        char[] c = new char[maxStringLength]_ __        Context context = new Context()__        context.attrs = attrs__        context.flags = flags__        context.buffer = c___        _        int access = readUnsignedShort(u)__        String name = readClass(u + 2, c)__        String superClass = readClass(u + 4, c)__        String[] interfaces = new String[readUnsignedShort(u + 6)]__        u += 8__        for (int i = 0_ i < interfaces.length_ ++i) {_            interfaces[i] = readClass(u, c)__            u += 2__        }__        _        String signature = null__        String sourceFile = null__        String sourceDebug = null__        String enclosingOwner = null__        String enclosingName = null__        String enclosingDesc = null__        String moduleMainClass = null__        int anns = 0__        int ianns = 0__        int tanns = 0__        int itanns = 0__        int innerClasses = 0__        int module = 0__        int packages = 0__        Attribute attributes = null___        u = getAttributes()__        for (int i = readUnsignedShort(u)_ i > 0_ --i) {_            String attrName = readUTF8(u + 2, c)__            _            _            if ("SourceFile".equals(attrName)) {_                sourceFile = readUTF8(u + 8, c)__            } else if ("InnerClasses".equals(attrName)) {_                innerClasses = u + 8__            } else if ("EnclosingMethod".equals(attrName)) {_                enclosingOwner = readClass(u + 8, c)__                int item = readUnsignedShort(u + 10)__                if (item != 0) {_                    enclosingName = readUTF8(items[item], c)__                    enclosingDesc = readUTF8(items[item] + 2, c)__                }_            } else if (SIGNATURES && "Signature".equals(attrName)) {_                signature = readUTF8(u + 8, c)__            } else if (ANNOTATIONS_                    && "RuntimeVisibleAnnotations".equals(attrName)) {_                anns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeVisibleTypeAnnotations".equals(attrName)) {_                tanns = u + 8__            } else if ("Deprecated".equals(attrName)) {_                access |= Opcodes.ACC_DEPRECATED__            } else if ("Synthetic".equals(attrName)) {_                access |= Opcodes.ACC_SYNTHETIC_                        | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE__            } else if ("SourceDebugExtension".equals(attrName)) {_                int len = readInt(u + 4)__                sourceDebug = readUTF(u + 8, len, new char[len])__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleAnnotations".equals(attrName)) {_                ianns = u + 8__            } else if (ANNOTATIONS_                    && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {_                itanns = u + 8__            } else if ("Module".equals(attrName)) {_                module = u + 8__            } else if ("ModuleMainClass".equals(attrName)) {_                moduleMainClass = readClass(u + 8, c)__            } else if ("ModulePackages".equals(attrName)) {_                packages = u + 10__            } else if ("BootstrapMethods".equals(attrName)) {_                int[] bootstrapMethods = new int[readUnsignedShort(u + 8)]__                for (int j = 0, v = u + 10_ j < bootstrapMethods.length_ j++) {_                    bootstrapMethods[j] = v__                    v += 2 + readUnsignedShort(v + 2) << 1__                }_                context.bootstrapMethods = bootstrapMethods__            } else {_                Attribute attr = readAttribute(attrs, attrName, u + 8,_                        readInt(u + 4), c, -1, null)__                if (attr != null) {_                    attr.next = attributes__                    attributes = attr__                }_            }_            u += 6 + readInt(u + 4)__        }__        _        classVisitor.visit(readInt(items[1] - 7), access, name, signature,_                superClass, interfaces)___        _        if ((flags & SKIP_DEBUG) == 0_                && (sourceFile != null || sourceDebug != null)) {_            classVisitor.visitSource(sourceFile, sourceDebug)__        }__        _        if (module != 0) {_            readModule(classVisitor, context, module,_                    moduleMainClass, packages)__        }__        _        if (enclosingOwner != null) {_            classVisitor.visitOuterClass(enclosingOwner, enclosingName,_                    enclosingDesc)__        }__        _        if (ANNOTATIONS && anns != 0) {_            for (int i = readUnsignedShort(anns), v = anns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && ianns != 0) {_            for (int i = readUnsignedShort(ianns), v = ianns + 2_ i > 0_ --i) {_                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitAnnotation(readUTF8(v, c), false))__            }_        }_        if (ANNOTATIONS && tanns != 0) {_            for (int i = readUnsignedShort(tanns), v = tanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), true))__            }_        }_        if (ANNOTATIONS && itanns != 0) {_            for (int i = readUnsignedShort(itanns), v = itanns + 2_ i > 0_ --i) {_                v = readAnnotationTarget(context, v)__                v = readAnnotationValues(v + 2, c, true,_                        classVisitor.visitTypeAnnotation(context.typeRef,_                                context.typePath, readUTF8(v, c), false))__            }_        }__        _        while (attributes != null) {_            Attribute attr = attributes.next__            attributes.next = null__            classVisitor.visitAttribute(attributes)__            attributes = attr__        }__        _        if (innerClasses != 0) {_            int v = innerClasses + 2__            for (int i = readUnsignedShort(innerClasses)_ i > 0_ --i) {_                classVisitor.visitInnerClass(readClass(v, c),_                        readClass(v + 2, c), readUTF8(v + 4, c),_                        readUnsignedShort(v + 6))__                v += 8__            }_        }__        _        u = header + 10 + 2 * interfaces.length__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readField(classVisitor, context, u)__        }_        u += 2__        for (int i = readUnsignedShort(u - 2)_ i > 0_ --i) {_            u = readMethod(classVisitor, context, u)__        }__        _        classVisitor.visitEnd()__    };makes,the,given,visitor,visit,the,java,class,of,this,link,class,reader,this,class,is,the,one,specified,in,the,constructor,see,link,class,reader,byte,class,reader,param,class,visitor,the,visitor,that,must,visit,this,class,param,attrs,prototypes,of,the,attributes,that,must,be,parsed,during,the,visit,of,the,class,any,attribute,whose,type,is,not,equal,to,the,type,of,one,the,prototypes,will,not,be,parsed,its,byte,array,value,will,be,passed,unchanged,to,the,class,writer,i,this,may,corrupt,it,if,this,value,contains,references,to,the,constant,pool,or,has,syntactic,or,semantic,links,with,a,class,element,that,has,been,transformed,by,a,class,adapter,between,the,reader,and,the,writer,i,param,flags,option,flags,that,can,be,used,to,modify,the,default,behavior,of,this,class,see,link,link,link,link;public,void,accept,final,class,visitor,class,visitor,final,attribute,attrs,final,int,flags,int,u,header,char,c,new,char,max,string,length,context,context,new,context,context,attrs,attrs,context,flags,flags,context,buffer,c,int,access,read,unsigned,short,u,string,name,read,class,u,2,c,string,super,class,read,class,u,4,c,string,interfaces,new,string,read,unsigned,short,u,6,u,8,for,int,i,0,i,interfaces,length,i,interfaces,i,read,class,u,c,u,2,string,signature,null,string,source,file,null,string,source,debug,null,string,enclosing,owner,null,string,enclosing,name,null,string,enclosing,desc,null,string,module,main,class,null,int,anns,0,int,ianns,0,int,tanns,0,int,itanns,0,int,inner,classes,0,int,module,0,int,packages,0,attribute,attributes,null,u,get,attributes,for,int,i,read,unsigned,short,u,i,0,i,string,attr,name,read,utf8,u,2,c,if,source,file,equals,attr,name,source,file,read,utf8,u,8,c,else,if,inner,classes,equals,attr,name,inner,classes,u,8,else,if,enclosing,method,equals,attr,name,enclosing,owner,read,class,u,8,c,int,item,read,unsigned,short,u,10,if,item,0,enclosing,name,read,utf8,items,item,c,enclosing,desc,read,utf8,items,item,2,c,else,if,signatures,signature,equals,attr,name,signature,read,utf8,u,8,c,else,if,annotations,runtime,visible,annotations,equals,attr,name,anns,u,8,else,if,annotations,runtime,visible,type,annotations,equals,attr,name,tanns,u,8,else,if,deprecated,equals,attr,name,access,opcodes,else,if,synthetic,equals,attr,name,access,opcodes,class,writer,else,if,source,debug,extension,equals,attr,name,int,len,read,int,u,4,source,debug,read,utf,u,8,len,new,char,len,else,if,annotations,runtime,invisible,annotations,equals,attr,name,ianns,u,8,else,if,annotations,runtime,invisible,type,annotations,equals,attr,name,itanns,u,8,else,if,module,equals,attr,name,module,u,8,else,if,module,main,class,equals,attr,name,module,main,class,read,class,u,8,c,else,if,module,packages,equals,attr,name,packages,u,10,else,if,bootstrap,methods,equals,attr,name,int,bootstrap,methods,new,int,read,unsigned,short,u,8,for,int,j,0,v,u,10,j,bootstrap,methods,length,j,bootstrap,methods,j,v,v,2,read,unsigned,short,v,2,1,context,bootstrap,methods,bootstrap,methods,else,attribute,attr,read,attribute,attrs,attr,name,u,8,read,int,u,4,c,1,null,if,attr,null,attr,next,attributes,attributes,attr,u,6,read,int,u,4,class,visitor,visit,read,int,items,1,7,access,name,signature,super,class,interfaces,if,flags,0,source,file,null,source,debug,null,class,visitor,visit,source,source,file,source,debug,if,module,0,read,module,class,visitor,context,module,module,main,class,packages,if,enclosing,owner,null,class,visitor,visit,outer,class,enclosing,owner,enclosing,name,enclosing,desc,if,annotations,anns,0,for,int,i,read,unsigned,short,anns,v,anns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,true,if,annotations,ianns,0,for,int,i,read,unsigned,short,ianns,v,ianns,2,i,0,i,v,read,annotation,values,v,2,c,true,class,visitor,visit,annotation,read,utf8,v,c,false,if,annotations,tanns,0,for,int,i,read,unsigned,short,tanns,v,tanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,true,if,annotations,itanns,0,for,int,i,read,unsigned,short,itanns,v,itanns,2,i,0,i,v,read,annotation,target,context,v,v,read,annotation,values,v,2,c,true,class,visitor,visit,type,annotation,context,type,ref,context,type,path,read,utf8,v,c,false,while,attributes,null,attribute,attr,attributes,next,attributes,next,null,class,visitor,visit,attribute,attributes,attributes,attr,if,inner,classes,0,int,v,inner,classes,2,for,int,i,read,unsigned,short,inner,classes,i,0,i,class,visitor,visit,inner,class,read,class,v,c,read,class,v,2,c,read,utf8,v,4,c,read,unsigned,short,v,6,v,8,u,header,10,2,interfaces,length,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,field,class,visitor,context,u,u,2,for,int,i,read,unsigned,short,u,2,i,0,i,u,read,method,class,visitor,context,u,class,visitor,visit,end
ClassReader -> private int readFrameType(final Object[] frame, final int index, int v,             final char[] buf, final Label[] labels);1366718246;Reads a stack map frame type and stores it at the given index in the_given array.__@param frame_the array where the parsed type must be stored._@param index_the index in 'frame' where the parsed type must be stored._@param v_the start offset of the stack map frame type to read._@param buf_a buffer to read strings._@param labels_the labels of the method currently being parsed, indexed by_their offset. If the parsed type is an Uninitialized type, a_new label for the corresponding NEW instruction is stored in_this array if it does not already exist._@return the offset of the first byte after the parsed type.;private int readFrameType(final Object[] frame, final int index, int v,_            final char[] buf, final Label[] labels) {_        int type = b[v++] & 0xFF__        switch (type) {_        case 0:_            frame[index] = Opcodes.TOP__            break__        case 1:_            frame[index] = Opcodes.INTEGER__            break__        case 2:_            frame[index] = Opcodes.FLOAT__            break__        case 3:_            frame[index] = Opcodes.DOUBLE__            break__        case 4:_            frame[index] = Opcodes.LONG__            break__        case 5:_            frame[index] = Opcodes.NULL__            break__        case 6:_            frame[index] = Opcodes.UNINITIALIZED_THIS__            break__        case 7: _            frame[index] = readClass(v, buf)__            v += 2__            break__        default: _            frame[index] = readLabel(readUnsignedShort(v), labels)__            v += 2__        }_        return v__    };reads,a,stack,map,frame,type,and,stores,it,at,the,given,index,in,the,given,array,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,v,the,start,offset,of,the,stack,map,frame,type,to,read,param,buf,a,buffer,to,read,strings,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,uninitialized,type,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,offset,of,the,first,byte,after,the,parsed,type;private,int,read,frame,type,final,object,frame,final,int,index,int,v,final,char,buf,final,label,labels,int,type,b,v,0x,ff,switch,type,case,0,frame,index,opcodes,top,break,case,1,frame,index,opcodes,integer,break,case,2,frame,index,opcodes,float,break,case,3,frame,index,opcodes,double,break,case,4,frame,index,opcodes,long,break,case,5,frame,index,opcodes,null,break,case,6,frame,index,opcodes,break,case,7,frame,index,read,class,v,buf,v,2,break,default,frame,index,read,label,read,unsigned,short,v,labels,v,2,return,v
ClassReader -> private int readFrameType(final Object[] frame, final int index, int v,             final char[] buf, final Label[] labels);1395273982;Reads a stack map frame type and stores it at the given index in the_given array.__@param frame_the array where the parsed type must be stored._@param index_the index in 'frame' where the parsed type must be stored._@param v_the start offset of the stack map frame type to read._@param buf_a buffer to read strings._@param labels_the labels of the method currently being parsed, indexed by_their offset. If the parsed type is an Uninitialized type, a_new label for the corresponding NEW instruction is stored in_this array if it does not already exist._@return the offset of the first byte after the parsed type.;private int readFrameType(final Object[] frame, final int index, int v,_            final char[] buf, final Label[] labels) {_        int type = b[v++] & 0xFF__        switch (type) {_        case 0:_            frame[index] = Opcodes.TOP__            break__        case 1:_            frame[index] = Opcodes.INTEGER__            break__        case 2:_            frame[index] = Opcodes.FLOAT__            break__        case 3:_            frame[index] = Opcodes.DOUBLE__            break__        case 4:_            frame[index] = Opcodes.LONG__            break__        case 5:_            frame[index] = Opcodes.NULL__            break__        case 6:_            frame[index] = Opcodes.UNINITIALIZED_THIS__            break__        case 7: _            frame[index] = readClass(v, buf)__            v += 2__            break__        default: _            frame[index] = readLabel(readUnsignedShort(v), labels)__            v += 2__        }_        return v__    };reads,a,stack,map,frame,type,and,stores,it,at,the,given,index,in,the,given,array,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,v,the,start,offset,of,the,stack,map,frame,type,to,read,param,buf,a,buffer,to,read,strings,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,uninitialized,type,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,offset,of,the,first,byte,after,the,parsed,type;private,int,read,frame,type,final,object,frame,final,int,index,int,v,final,char,buf,final,label,labels,int,type,b,v,0x,ff,switch,type,case,0,frame,index,opcodes,top,break,case,1,frame,index,opcodes,integer,break,case,2,frame,index,opcodes,float,break,case,3,frame,index,opcodes,double,break,case,4,frame,index,opcodes,long,break,case,5,frame,index,opcodes,null,break,case,6,frame,index,opcodes,break,case,7,frame,index,read,class,v,buf,v,2,break,default,frame,index,read,label,read,unsigned,short,v,labels,v,2,return,v
ClassReader -> private int readFrameType(final Object[] frame, final int index, int v,             final char[] buf, final Label[] labels);1414067099;Reads a stack map frame type and stores it at the given index in the_given array.__@param frame_the array where the parsed type must be stored._@param index_the index in 'frame' where the parsed type must be stored._@param v_the start offset of the stack map frame type to read._@param buf_a buffer to read strings._@param labels_the labels of the method currently being parsed, indexed by_their offset. If the parsed type is an Uninitialized type, a_new label for the corresponding NEW instruction is stored in_this array if it does not already exist._@return the offset of the first byte after the parsed type.;private int readFrameType(final Object[] frame, final int index, int v,_            final char[] buf, final Label[] labels) {_        int type = b[v++] & 0xFF__        switch (type) {_        case 0:_            frame[index] = Opcodes.TOP__            break__        case 1:_            frame[index] = Opcodes.INTEGER__            break__        case 2:_            frame[index] = Opcodes.FLOAT__            break__        case 3:_            frame[index] = Opcodes.DOUBLE__            break__        case 4:_            frame[index] = Opcodes.LONG__            break__        case 5:_            frame[index] = Opcodes.NULL__            break__        case 6:_            frame[index] = Opcodes.UNINITIALIZED_THIS__            break__        case 7: _            frame[index] = readClass(v, buf)__            v += 2__            break__        default: _            frame[index] = readLabel(readUnsignedShort(v), labels)__            v += 2__        }_        return v__    };reads,a,stack,map,frame,type,and,stores,it,at,the,given,index,in,the,given,array,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,v,the,start,offset,of,the,stack,map,frame,type,to,read,param,buf,a,buffer,to,read,strings,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,uninitialized,type,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,offset,of,the,first,byte,after,the,parsed,type;private,int,read,frame,type,final,object,frame,final,int,index,int,v,final,char,buf,final,label,labels,int,type,b,v,0x,ff,switch,type,case,0,frame,index,opcodes,top,break,case,1,frame,index,opcodes,integer,break,case,2,frame,index,opcodes,float,break,case,3,frame,index,opcodes,double,break,case,4,frame,index,opcodes,long,break,case,5,frame,index,opcodes,null,break,case,6,frame,index,opcodes,break,case,7,frame,index,read,class,v,buf,v,2,break,default,frame,index,read,label,read,unsigned,short,v,labels,v,2,return,v
ClassReader -> private int readFrameType(final Object[] frame, final int index, int v,             final char[] buf, final Label[] labels);1414499035;Reads a stack map frame type and stores it at the given index in the_given array.__@param frame_the array where the parsed type must be stored._@param index_the index in 'frame' where the parsed type must be stored._@param v_the start offset of the stack map frame type to read._@param buf_a buffer to read strings._@param labels_the labels of the method currently being parsed, indexed by_their offset. If the parsed type is an Uninitialized type, a_new label for the corresponding NEW instruction is stored in_this array if it does not already exist._@return the offset of the first byte after the parsed type.;private int readFrameType(final Object[] frame, final int index, int v,_            final char[] buf, final Label[] labels) {_        int type = b[v++] & 0xFF__        switch (type) {_        case 0:_            frame[index] = Opcodes.TOP__            break__        case 1:_            frame[index] = Opcodes.INTEGER__            break__        case 2:_            frame[index] = Opcodes.FLOAT__            break__        case 3:_            frame[index] = Opcodes.DOUBLE__            break__        case 4:_            frame[index] = Opcodes.LONG__            break__        case 5:_            frame[index] = Opcodes.NULL__            break__        case 6:_            frame[index] = Opcodes.UNINITIALIZED_THIS__            break__        case 7: _            frame[index] = readClass(v, buf)__            v += 2__            break__        default: _            frame[index] = readLabel(readUnsignedShort(v), labels)__            v += 2__        }_        return v__    };reads,a,stack,map,frame,type,and,stores,it,at,the,given,index,in,the,given,array,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,v,the,start,offset,of,the,stack,map,frame,type,to,read,param,buf,a,buffer,to,read,strings,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,uninitialized,type,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,offset,of,the,first,byte,after,the,parsed,type;private,int,read,frame,type,final,object,frame,final,int,index,int,v,final,char,buf,final,label,labels,int,type,b,v,0x,ff,switch,type,case,0,frame,index,opcodes,top,break,case,1,frame,index,opcodes,integer,break,case,2,frame,index,opcodes,float,break,case,3,frame,index,opcodes,double,break,case,4,frame,index,opcodes,long,break,case,5,frame,index,opcodes,null,break,case,6,frame,index,opcodes,break,case,7,frame,index,read,class,v,buf,v,2,break,default,frame,index,read,label,read,unsigned,short,v,labels,v,2,return,v
ClassReader -> private int readFrameType(final Object[] frame, final int index, int v,             final char[] buf, final Label[] labels);1416998550;Reads a stack map frame type and stores it at the given index in the_given array.__@param frame_the array where the parsed type must be stored._@param index_the index in 'frame' where the parsed type must be stored._@param v_the start offset of the stack map frame type to read._@param buf_a buffer to read strings._@param labels_the labels of the method currently being parsed, indexed by_their offset. If the parsed type is an Uninitialized type, a_new label for the corresponding NEW instruction is stored in_this array if it does not already exist._@return the offset of the first byte after the parsed type.;private int readFrameType(final Object[] frame, final int index, int v,_            final char[] buf, final Label[] labels) {_        int type = b[v++] & 0xFF__        switch (type) {_        case 0:_            frame[index] = Opcodes.TOP__            break__        case 1:_            frame[index] = Opcodes.INTEGER__            break__        case 2:_            frame[index] = Opcodes.FLOAT__            break__        case 3:_            frame[index] = Opcodes.DOUBLE__            break__        case 4:_            frame[index] = Opcodes.LONG__            break__        case 5:_            frame[index] = Opcodes.NULL__            break__        case 6:_            frame[index] = Opcodes.UNINITIALIZED_THIS__            break__        case 7: _            frame[index] = readClass(v, buf)__            v += 2__            break__        default: _            frame[index] = readLabel(readUnsignedShort(v), labels)__            v += 2__        }_        return v__    };reads,a,stack,map,frame,type,and,stores,it,at,the,given,index,in,the,given,array,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,v,the,start,offset,of,the,stack,map,frame,type,to,read,param,buf,a,buffer,to,read,strings,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,uninitialized,type,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,offset,of,the,first,byte,after,the,parsed,type;private,int,read,frame,type,final,object,frame,final,int,index,int,v,final,char,buf,final,label,labels,int,type,b,v,0x,ff,switch,type,case,0,frame,index,opcodes,top,break,case,1,frame,index,opcodes,integer,break,case,2,frame,index,opcodes,float,break,case,3,frame,index,opcodes,double,break,case,4,frame,index,opcodes,long,break,case,5,frame,index,opcodes,null,break,case,6,frame,index,opcodes,break,case,7,frame,index,read,class,v,buf,v,2,break,default,frame,index,read,label,read,unsigned,short,v,labels,v,2,return,v
ClassReader -> private int readFrameType(final Object[] frame, final int index, int v,             final char[] buf, final Label[] labels);1457705343;Reads a stack map frame type and stores it at the given index in the_given array.__@param frame_the array where the parsed type must be stored._@param index_the index in 'frame' where the parsed type must be stored._@param v_the start offset of the stack map frame type to read._@param buf_a buffer to read strings._@param labels_the labels of the method currently being parsed, indexed by_their offset. If the parsed type is an Uninitialized type, a_new label for the corresponding NEW instruction is stored in_this array if it does not already exist._@return the offset of the first byte after the parsed type.;private int readFrameType(final Object[] frame, final int index, int v,_            final char[] buf, final Label[] labels) {_        int type = b[v++] & 0xFF__        switch (type) {_        case 0:_            frame[index] = Opcodes.TOP__            break__        case 1:_            frame[index] = Opcodes.INTEGER__            break__        case 2:_            frame[index] = Opcodes.FLOAT__            break__        case 3:_            frame[index] = Opcodes.DOUBLE__            break__        case 4:_            frame[index] = Opcodes.LONG__            break__        case 5:_            frame[index] = Opcodes.NULL__            break__        case 6:_            frame[index] = Opcodes.UNINITIALIZED_THIS__            break__        case 7: _            frame[index] = readClass(v, buf)__            v += 2__            break__        default: _            frame[index] = readLabel(readUnsignedShort(v), labels)__            v += 2__        }_        return v__    };reads,a,stack,map,frame,type,and,stores,it,at,the,given,index,in,the,given,array,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,v,the,start,offset,of,the,stack,map,frame,type,to,read,param,buf,a,buffer,to,read,strings,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,uninitialized,type,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,offset,of,the,first,byte,after,the,parsed,type;private,int,read,frame,type,final,object,frame,final,int,index,int,v,final,char,buf,final,label,labels,int,type,b,v,0x,ff,switch,type,case,0,frame,index,opcodes,top,break,case,1,frame,index,opcodes,integer,break,case,2,frame,index,opcodes,float,break,case,3,frame,index,opcodes,double,break,case,4,frame,index,opcodes,long,break,case,5,frame,index,opcodes,null,break,case,6,frame,index,opcodes,break,case,7,frame,index,read,class,v,buf,v,2,break,default,frame,index,read,label,read,unsigned,short,v,labels,v,2,return,v
ClassReader -> private int readFrameType(final Object[] frame, final int index, int v,             final char[] buf, final Label[] labels);1459258703;Reads a stack map frame type and stores it at the given index in the_given array.__@param frame_the array where the parsed type must be stored._@param index_the index in 'frame' where the parsed type must be stored._@param v_the start offset of the stack map frame type to read._@param buf_a buffer to read strings._@param labels_the labels of the method currently being parsed, indexed by_their offset. If the parsed type is an Uninitialized type, a_new label for the corresponding NEW instruction is stored in_this array if it does not already exist._@return the offset of the first byte after the parsed type.;private int readFrameType(final Object[] frame, final int index, int v,_            final char[] buf, final Label[] labels) {_        int type = b[v++] & 0xFF__        switch (type) {_        case 0:_            frame[index] = Opcodes.TOP__            break__        case 1:_            frame[index] = Opcodes.INTEGER__            break__        case 2:_            frame[index] = Opcodes.FLOAT__            break__        case 3:_            frame[index] = Opcodes.DOUBLE__            break__        case 4:_            frame[index] = Opcodes.LONG__            break__        case 5:_            frame[index] = Opcodes.NULL__            break__        case 6:_            frame[index] = Opcodes.UNINITIALIZED_THIS__            break__        case 7: _            frame[index] = readClass(v, buf)__            v += 2__            break__        default: _            frame[index] = readLabel(readUnsignedShort(v), labels)__            v += 2__        }_        return v__    };reads,a,stack,map,frame,type,and,stores,it,at,the,given,index,in,the,given,array,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,v,the,start,offset,of,the,stack,map,frame,type,to,read,param,buf,a,buffer,to,read,strings,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,uninitialized,type,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,offset,of,the,first,byte,after,the,parsed,type;private,int,read,frame,type,final,object,frame,final,int,index,int,v,final,char,buf,final,label,labels,int,type,b,v,0x,ff,switch,type,case,0,frame,index,opcodes,top,break,case,1,frame,index,opcodes,integer,break,case,2,frame,index,opcodes,float,break,case,3,frame,index,opcodes,double,break,case,4,frame,index,opcodes,long,break,case,5,frame,index,opcodes,null,break,case,6,frame,index,opcodes,break,case,7,frame,index,read,class,v,buf,v,2,break,default,frame,index,read,label,read,unsigned,short,v,labels,v,2,return,v
ClassReader -> private int readFrameType(final Object[] frame, final int index, int v,             final char[] buf, final Label[] labels);1478623137;Reads a stack map frame type and stores it at the given index in the_given array.__@param frame_the array where the parsed type must be stored._@param index_the index in 'frame' where the parsed type must be stored._@param v_the start offset of the stack map frame type to read._@param buf_a buffer to read strings._@param labels_the labels of the method currently being parsed, indexed by_their offset. If the parsed type is an Uninitialized type, a_new label for the corresponding NEW instruction is stored in_this array if it does not already exist._@return the offset of the first byte after the parsed type.;private int readFrameType(final Object[] frame, final int index, int v,_            final char[] buf, final Label[] labels) {_        int type = b[v++] & 0xFF__        switch (type) {_        case 0:_            frame[index] = Opcodes.TOP__            break__        case 1:_            frame[index] = Opcodes.INTEGER__            break__        case 2:_            frame[index] = Opcodes.FLOAT__            break__        case 3:_            frame[index] = Opcodes.DOUBLE__            break__        case 4:_            frame[index] = Opcodes.LONG__            break__        case 5:_            frame[index] = Opcodes.NULL__            break__        case 6:_            frame[index] = Opcodes.UNINITIALIZED_THIS__            break__        case 7: _            frame[index] = readClass(v, buf)__            v += 2__            break__        default: _            frame[index] = readLabel(readUnsignedShort(v), labels)__            v += 2__        }_        return v__    };reads,a,stack,map,frame,type,and,stores,it,at,the,given,index,in,the,given,array,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,v,the,start,offset,of,the,stack,map,frame,type,to,read,param,buf,a,buffer,to,read,strings,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,uninitialized,type,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,offset,of,the,first,byte,after,the,parsed,type;private,int,read,frame,type,final,object,frame,final,int,index,int,v,final,char,buf,final,label,labels,int,type,b,v,0x,ff,switch,type,case,0,frame,index,opcodes,top,break,case,1,frame,index,opcodes,integer,break,case,2,frame,index,opcodes,float,break,case,3,frame,index,opcodes,double,break,case,4,frame,index,opcodes,long,break,case,5,frame,index,opcodes,null,break,case,6,frame,index,opcodes,break,case,7,frame,index,read,class,v,buf,v,2,break,default,frame,index,read,label,read,unsigned,short,v,labels,v,2,return,v
ClassReader -> private int readFrameType(final Object[] frame, final int index, int v,             final char[] buf, final Label[] labels);1483093254;Reads a stack map frame type and stores it at the given index in the_given array.__@param frame_the array where the parsed type must be stored._@param index_the index in 'frame' where the parsed type must be stored._@param v_the start offset of the stack map frame type to read._@param buf_a buffer to read strings._@param labels_the labels of the method currently being parsed, indexed by_their offset. If the parsed type is an Uninitialized type, a_new label for the corresponding NEW instruction is stored in_this array if it does not already exist._@return the offset of the first byte after the parsed type.;private int readFrameType(final Object[] frame, final int index, int v,_            final char[] buf, final Label[] labels) {_        int type = b[v++] & 0xFF__        switch (type) {_        case 0:_            frame[index] = Opcodes.TOP__            break__        case 1:_            frame[index] = Opcodes.INTEGER__            break__        case 2:_            frame[index] = Opcodes.FLOAT__            break__        case 3:_            frame[index] = Opcodes.DOUBLE__            break__        case 4:_            frame[index] = Opcodes.LONG__            break__        case 5:_            frame[index] = Opcodes.NULL__            break__        case 6:_            frame[index] = Opcodes.UNINITIALIZED_THIS__            break__        case 7: _            frame[index] = readClass(v, buf)__            v += 2__            break__        default: _            frame[index] = readLabel(readUnsignedShort(v), labels)__            v += 2__        }_        return v__    };reads,a,stack,map,frame,type,and,stores,it,at,the,given,index,in,the,given,array,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,v,the,start,offset,of,the,stack,map,frame,type,to,read,param,buf,a,buffer,to,read,strings,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,uninitialized,type,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,offset,of,the,first,byte,after,the,parsed,type;private,int,read,frame,type,final,object,frame,final,int,index,int,v,final,char,buf,final,label,labels,int,type,b,v,0x,ff,switch,type,case,0,frame,index,opcodes,top,break,case,1,frame,index,opcodes,integer,break,case,2,frame,index,opcodes,float,break,case,3,frame,index,opcodes,double,break,case,4,frame,index,opcodes,long,break,case,5,frame,index,opcodes,null,break,case,6,frame,index,opcodes,break,case,7,frame,index,read,class,v,buf,v,2,break,default,frame,index,read,label,read,unsigned,short,v,labels,v,2,return,v
ClassReader -> private int readFrameType(final Object[] frame, final int index, int v,             final char[] buf, final Label[] labels);1505821772;Reads a stack map frame type and stores it at the given index in the_given array.__@param frame_the array where the parsed type must be stored._@param index_the index in 'frame' where the parsed type must be stored._@param v_the start offset of the stack map frame type to read._@param buf_a buffer to read strings._@param labels_the labels of the method currently being parsed, indexed by_their offset. If the parsed type is an Uninitialized type, a_new label for the corresponding NEW instruction is stored in_this array if it does not already exist._@return the offset of the first byte after the parsed type.;private int readFrameType(final Object[] frame, final int index, int v,_            final char[] buf, final Label[] labels) {_        int type = b[v++] & 0xFF__        switch (type) {_        case 0:_            frame[index] = Opcodes.TOP__            break__        case 1:_            frame[index] = Opcodes.INTEGER__            break__        case 2:_            frame[index] = Opcodes.FLOAT__            break__        case 3:_            frame[index] = Opcodes.DOUBLE__            break__        case 4:_            frame[index] = Opcodes.LONG__            break__        case 5:_            frame[index] = Opcodes.NULL__            break__        case 6:_            frame[index] = Opcodes.UNINITIALIZED_THIS__            break__        case 7: _            frame[index] = readClass(v, buf)__            v += 2__            break__        default: _            frame[index] = readLabel(readUnsignedShort(v), labels)__            v += 2__        }_        return v__    };reads,a,stack,map,frame,type,and,stores,it,at,the,given,index,in,the,given,array,param,frame,the,array,where,the,parsed,type,must,be,stored,param,index,the,index,in,frame,where,the,parsed,type,must,be,stored,param,v,the,start,offset,of,the,stack,map,frame,type,to,read,param,buf,a,buffer,to,read,strings,param,labels,the,labels,of,the,method,currently,being,parsed,indexed,by,their,offset,if,the,parsed,type,is,an,uninitialized,type,a,new,label,for,the,corresponding,new,instruction,is,stored,in,this,array,if,it,does,not,already,exist,return,the,offset,of,the,first,byte,after,the,parsed,type;private,int,read,frame,type,final,object,frame,final,int,index,int,v,final,char,buf,final,label,labels,int,type,b,v,0x,ff,switch,type,case,0,frame,index,opcodes,top,break,case,1,frame,index,opcodes,integer,break,case,2,frame,index,opcodes,float,break,case,3,frame,index,opcodes,double,break,case,4,frame,index,opcodes,long,break,case,5,frame,index,opcodes,null,break,case,6,frame,index,opcodes,break,case,7,frame,index,read,class,v,buf,v,2,break,default,frame,index,read,label,read,unsigned,short,v,labels,v,2,return,v
ClassReader -> private int readFrame(int stackMap, boolean zip, boolean unzip,             Context frame);1395273982;Reads a stack map frame and stores the result in the given_{@link Context} object.__@param stackMap_the start offset of a stack map frame in the class file._@param zip_if the stack map frame at stackMap is compressed or not._@param unzip_if the stack map frame must be uncompressed._@param frame_where the parsed stack map frame must be stored._@return the offset of the first byte following the parsed frame.;private int readFrame(int stackMap, boolean zip, boolean unzip,_            Context frame) {_        char[] c = frame.buffer__        Label[] labels = frame.labels__        int tag__        int delta__        if (zip) {_            tag = b[stackMap++] & 0xFF__        } else {_            tag = MethodWriter.FULL_FRAME__            frame.offset = -1__        }_        frame.localDiff = 0__        if (tag < MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME) {_            delta = tag__            frame.mode = Opcodes.F_SAME__            frame.stackCount = 0__        } else if (tag < MethodWriter.RESERVED) {_            delta = tag - MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME__            stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__            frame.mode = Opcodes.F_SAME1__            frame.stackCount = 1__        } else {_            delta = readUnsignedShort(stackMap)__            stackMap += 2__            if (tag == MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_                stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__                frame.mode = Opcodes.F_SAME1__                frame.stackCount = 1__            } else if (tag >= MethodWriter.CHOP_FRAME_                    && tag < MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_CHOP__                frame.localDiff = MethodWriter.SAME_FRAME_EXTENDED - tag__                frame.localCount -= frame.localDiff__                frame.stackCount = 0__            } else if (tag == MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_SAME__                frame.stackCount = 0__            } else if (tag < MethodWriter.FULL_FRAME) {_                int local = unzip ? frame.localCount : 0__                for (int i = tag - MethodWriter.SAME_FRAME_EXTENDED_ i > 0_ i--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                frame.mode = Opcodes.F_APPEND__                frame.localDiff = tag - MethodWriter.SAME_FRAME_EXTENDED__                frame.localCount += frame.localDiff__                frame.stackCount = 0__            } else { _                frame.mode = Opcodes.F_FULL__                int n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.localDiff = n__                frame.localCount = n__                for (int local = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.stackCount = n__                for (int stack = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.stack, stack++, stackMap, c,_                            labels)__                }_            }_        }_        frame.offset += delta + 1__        readLabel(frame.offset, labels)__        return stackMap__    };reads,a,stack,map,frame,and,stores,the,result,in,the,given,link,context,object,param,stack,map,the,start,offset,of,a,stack,map,frame,in,the,class,file,param,zip,if,the,stack,map,frame,at,stack,map,is,compressed,or,not,param,unzip,if,the,stack,map,frame,must,be,uncompressed,param,frame,where,the,parsed,stack,map,frame,must,be,stored,return,the,offset,of,the,first,byte,following,the,parsed,frame;private,int,read,frame,int,stack,map,boolean,zip,boolean,unzip,context,frame,char,c,frame,buffer,label,labels,frame,labels,int,tag,int,delta,if,zip,tag,b,stack,map,0x,ff,else,tag,method,writer,frame,offset,1,frame,local,diff,0,if,tag,method,writer,delta,tag,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,reserved,delta,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,delta,read,unsigned,short,stack,map,stack,map,2,if,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,if,tag,method,writer,tag,method,writer,frame,mode,opcodes,frame,local,diff,method,writer,tag,frame,local,count,frame,local,diff,frame,stack,count,0,else,if,tag,method,writer,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,int,local,unzip,frame,local,count,0,for,int,i,tag,method,writer,i,0,i,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,frame,mode,opcodes,frame,local,diff,tag,method,writer,frame,local,count,frame,local,diff,frame,stack,count,0,else,frame,mode,opcodes,int,n,read,unsigned,short,stack,map,stack,map,2,frame,local,diff,n,frame,local,count,n,for,int,local,0,n,0,n,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,n,read,unsigned,short,stack,map,stack,map,2,frame,stack,count,n,for,int,stack,0,n,0,n,stack,map,read,frame,type,frame,stack,stack,stack,map,c,labels,frame,offset,delta,1,read,label,frame,offset,labels,return,stack,map
ClassReader -> private int readFrame(int stackMap, boolean zip, boolean unzip,             Context frame);1414067099;Reads a stack map frame and stores the result in the given_{@link Context} object.__@param stackMap_the start offset of a stack map frame in the class file._@param zip_if the stack map frame at stackMap is compressed or not._@param unzip_if the stack map frame must be uncompressed._@param frame_where the parsed stack map frame must be stored._@return the offset of the first byte following the parsed frame.;private int readFrame(int stackMap, boolean zip, boolean unzip,_            Context frame) {_        char[] c = frame.buffer__        Label[] labels = frame.labels__        int tag__        int delta__        if (zip) {_            tag = b[stackMap++] & 0xFF__        } else {_            tag = MethodWriter.FULL_FRAME__            frame.offset = -1__        }_        frame.localDiff = 0__        if (tag < MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME) {_            delta = tag__            frame.mode = Opcodes.F_SAME__            frame.stackCount = 0__        } else if (tag < MethodWriter.RESERVED) {_            delta = tag - MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME__            stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__            frame.mode = Opcodes.F_SAME1__            frame.stackCount = 1__        } else {_            delta = readUnsignedShort(stackMap)__            stackMap += 2__            if (tag == MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_                stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__                frame.mode = Opcodes.F_SAME1__                frame.stackCount = 1__            } else if (tag >= MethodWriter.CHOP_FRAME_                    && tag < MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_CHOP__                frame.localDiff = MethodWriter.SAME_FRAME_EXTENDED - tag__                frame.localCount -= frame.localDiff__                frame.stackCount = 0__            } else if (tag == MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_SAME__                frame.stackCount = 0__            } else if (tag < MethodWriter.FULL_FRAME) {_                int local = unzip ? frame.localCount : 0__                for (int i = tag - MethodWriter.SAME_FRAME_EXTENDED_ i > 0_ i--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                frame.mode = Opcodes.F_APPEND__                frame.localDiff = tag - MethodWriter.SAME_FRAME_EXTENDED__                frame.localCount += frame.localDiff__                frame.stackCount = 0__            } else { _                frame.mode = Opcodes.F_FULL__                int n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.localDiff = n__                frame.localCount = n__                for (int local = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.stackCount = n__                for (int stack = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.stack, stack++, stackMap, c,_                            labels)__                }_            }_        }_        frame.offset += delta + 1__        readLabel(frame.offset, labels)__        return stackMap__    };reads,a,stack,map,frame,and,stores,the,result,in,the,given,link,context,object,param,stack,map,the,start,offset,of,a,stack,map,frame,in,the,class,file,param,zip,if,the,stack,map,frame,at,stack,map,is,compressed,or,not,param,unzip,if,the,stack,map,frame,must,be,uncompressed,param,frame,where,the,parsed,stack,map,frame,must,be,stored,return,the,offset,of,the,first,byte,following,the,parsed,frame;private,int,read,frame,int,stack,map,boolean,zip,boolean,unzip,context,frame,char,c,frame,buffer,label,labels,frame,labels,int,tag,int,delta,if,zip,tag,b,stack,map,0x,ff,else,tag,method,writer,frame,offset,1,frame,local,diff,0,if,tag,method,writer,delta,tag,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,reserved,delta,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,delta,read,unsigned,short,stack,map,stack,map,2,if,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,if,tag,method,writer,tag,method,writer,frame,mode,opcodes,frame,local,diff,method,writer,tag,frame,local,count,frame,local,diff,frame,stack,count,0,else,if,tag,method,writer,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,int,local,unzip,frame,local,count,0,for,int,i,tag,method,writer,i,0,i,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,frame,mode,opcodes,frame,local,diff,tag,method,writer,frame,local,count,frame,local,diff,frame,stack,count,0,else,frame,mode,opcodes,int,n,read,unsigned,short,stack,map,stack,map,2,frame,local,diff,n,frame,local,count,n,for,int,local,0,n,0,n,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,n,read,unsigned,short,stack,map,stack,map,2,frame,stack,count,n,for,int,stack,0,n,0,n,stack,map,read,frame,type,frame,stack,stack,stack,map,c,labels,frame,offset,delta,1,read,label,frame,offset,labels,return,stack,map
ClassReader -> private int readFrame(int stackMap, boolean zip, boolean unzip,             Context frame);1414499035;Reads a stack map frame and stores the result in the given_{@link Context} object.__@param stackMap_the start offset of a stack map frame in the class file._@param zip_if the stack map frame at stackMap is compressed or not._@param unzip_if the stack map frame must be uncompressed._@param frame_where the parsed stack map frame must be stored._@return the offset of the first byte following the parsed frame.;private int readFrame(int stackMap, boolean zip, boolean unzip,_            Context frame) {_        char[] c = frame.buffer__        Label[] labels = frame.labels__        int tag__        int delta__        if (zip) {_            tag = b[stackMap++] & 0xFF__        } else {_            tag = MethodWriter.FULL_FRAME__            frame.offset = -1__        }_        frame.localDiff = 0__        if (tag < MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME) {_            delta = tag__            frame.mode = Opcodes.F_SAME__            frame.stackCount = 0__        } else if (tag < MethodWriter.RESERVED) {_            delta = tag - MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME__            stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__            frame.mode = Opcodes.F_SAME1__            frame.stackCount = 1__        } else {_            delta = readUnsignedShort(stackMap)__            stackMap += 2__            if (tag == MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_                stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__                frame.mode = Opcodes.F_SAME1__                frame.stackCount = 1__            } else if (tag >= MethodWriter.CHOP_FRAME_                    && tag < MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_CHOP__                frame.localDiff = MethodWriter.SAME_FRAME_EXTENDED - tag__                frame.localCount -= frame.localDiff__                frame.stackCount = 0__            } else if (tag == MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_SAME__                frame.stackCount = 0__            } else if (tag < MethodWriter.FULL_FRAME) {_                int local = unzip ? frame.localCount : 0__                for (int i = tag - MethodWriter.SAME_FRAME_EXTENDED_ i > 0_ i--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                frame.mode = Opcodes.F_APPEND__                frame.localDiff = tag - MethodWriter.SAME_FRAME_EXTENDED__                frame.localCount += frame.localDiff__                frame.stackCount = 0__            } else { _                frame.mode = Opcodes.F_FULL__                int n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.localDiff = n__                frame.localCount = n__                for (int local = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.stackCount = n__                for (int stack = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.stack, stack++, stackMap, c,_                            labels)__                }_            }_        }_        frame.offset += delta + 1__        readLabel(frame.offset, labels)__        return stackMap__    };reads,a,stack,map,frame,and,stores,the,result,in,the,given,link,context,object,param,stack,map,the,start,offset,of,a,stack,map,frame,in,the,class,file,param,zip,if,the,stack,map,frame,at,stack,map,is,compressed,or,not,param,unzip,if,the,stack,map,frame,must,be,uncompressed,param,frame,where,the,parsed,stack,map,frame,must,be,stored,return,the,offset,of,the,first,byte,following,the,parsed,frame;private,int,read,frame,int,stack,map,boolean,zip,boolean,unzip,context,frame,char,c,frame,buffer,label,labels,frame,labels,int,tag,int,delta,if,zip,tag,b,stack,map,0x,ff,else,tag,method,writer,frame,offset,1,frame,local,diff,0,if,tag,method,writer,delta,tag,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,reserved,delta,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,delta,read,unsigned,short,stack,map,stack,map,2,if,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,if,tag,method,writer,tag,method,writer,frame,mode,opcodes,frame,local,diff,method,writer,tag,frame,local,count,frame,local,diff,frame,stack,count,0,else,if,tag,method,writer,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,int,local,unzip,frame,local,count,0,for,int,i,tag,method,writer,i,0,i,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,frame,mode,opcodes,frame,local,diff,tag,method,writer,frame,local,count,frame,local,diff,frame,stack,count,0,else,frame,mode,opcodes,int,n,read,unsigned,short,stack,map,stack,map,2,frame,local,diff,n,frame,local,count,n,for,int,local,0,n,0,n,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,n,read,unsigned,short,stack,map,stack,map,2,frame,stack,count,n,for,int,stack,0,n,0,n,stack,map,read,frame,type,frame,stack,stack,stack,map,c,labels,frame,offset,delta,1,read,label,frame,offset,labels,return,stack,map
ClassReader -> private int readFrame(int stackMap, boolean zip, boolean unzip,             Context frame);1416998550;Reads a stack map frame and stores the result in the given_{@link Context} object.__@param stackMap_the start offset of a stack map frame in the class file._@param zip_if the stack map frame at stackMap is compressed or not._@param unzip_if the stack map frame must be uncompressed._@param frame_where the parsed stack map frame must be stored._@return the offset of the first byte following the parsed frame.;private int readFrame(int stackMap, boolean zip, boolean unzip,_            Context frame) {_        char[] c = frame.buffer__        Label[] labels = frame.labels__        int tag__        int delta__        if (zip) {_            tag = b[stackMap++] & 0xFF__        } else {_            tag = MethodWriter.FULL_FRAME__            frame.offset = -1__        }_        frame.localDiff = 0__        if (tag < MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME) {_            delta = tag__            frame.mode = Opcodes.F_SAME__            frame.stackCount = 0__        } else if (tag < MethodWriter.RESERVED) {_            delta = tag - MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME__            stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__            frame.mode = Opcodes.F_SAME1__            frame.stackCount = 1__        } else {_            delta = readUnsignedShort(stackMap)__            stackMap += 2__            if (tag == MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_                stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__                frame.mode = Opcodes.F_SAME1__                frame.stackCount = 1__            } else if (tag >= MethodWriter.CHOP_FRAME_                    && tag < MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_CHOP__                frame.localDiff = MethodWriter.SAME_FRAME_EXTENDED - tag__                frame.localCount -= frame.localDiff__                frame.stackCount = 0__            } else if (tag == MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_SAME__                frame.stackCount = 0__            } else if (tag < MethodWriter.FULL_FRAME) {_                int local = unzip ? frame.localCount : 0__                for (int i = tag - MethodWriter.SAME_FRAME_EXTENDED_ i > 0_ i--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                frame.mode = Opcodes.F_APPEND__                frame.localDiff = tag - MethodWriter.SAME_FRAME_EXTENDED__                frame.localCount += frame.localDiff__                frame.stackCount = 0__            } else { _                frame.mode = Opcodes.F_FULL__                int n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.localDiff = n__                frame.localCount = n__                for (int local = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.stackCount = n__                for (int stack = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.stack, stack++, stackMap, c,_                            labels)__                }_            }_        }_        frame.offset += delta + 1__        readLabel(frame.offset, labels)__        return stackMap__    };reads,a,stack,map,frame,and,stores,the,result,in,the,given,link,context,object,param,stack,map,the,start,offset,of,a,stack,map,frame,in,the,class,file,param,zip,if,the,stack,map,frame,at,stack,map,is,compressed,or,not,param,unzip,if,the,stack,map,frame,must,be,uncompressed,param,frame,where,the,parsed,stack,map,frame,must,be,stored,return,the,offset,of,the,first,byte,following,the,parsed,frame;private,int,read,frame,int,stack,map,boolean,zip,boolean,unzip,context,frame,char,c,frame,buffer,label,labels,frame,labels,int,tag,int,delta,if,zip,tag,b,stack,map,0x,ff,else,tag,method,writer,frame,offset,1,frame,local,diff,0,if,tag,method,writer,delta,tag,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,reserved,delta,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,delta,read,unsigned,short,stack,map,stack,map,2,if,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,if,tag,method,writer,tag,method,writer,frame,mode,opcodes,frame,local,diff,method,writer,tag,frame,local,count,frame,local,diff,frame,stack,count,0,else,if,tag,method,writer,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,int,local,unzip,frame,local,count,0,for,int,i,tag,method,writer,i,0,i,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,frame,mode,opcodes,frame,local,diff,tag,method,writer,frame,local,count,frame,local,diff,frame,stack,count,0,else,frame,mode,opcodes,int,n,read,unsigned,short,stack,map,stack,map,2,frame,local,diff,n,frame,local,count,n,for,int,local,0,n,0,n,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,n,read,unsigned,short,stack,map,stack,map,2,frame,stack,count,n,for,int,stack,0,n,0,n,stack,map,read,frame,type,frame,stack,stack,stack,map,c,labels,frame,offset,delta,1,read,label,frame,offset,labels,return,stack,map
ClassReader -> private int readFrame(int stackMap, boolean zip, boolean unzip,             Context frame);1457705343;Reads a stack map frame and stores the result in the given_{@link Context} object.__@param stackMap_the start offset of a stack map frame in the class file._@param zip_if the stack map frame at stackMap is compressed or not._@param unzip_if the stack map frame must be uncompressed._@param frame_where the parsed stack map frame must be stored._@return the offset of the first byte following the parsed frame.;private int readFrame(int stackMap, boolean zip, boolean unzip,_            Context frame) {_        char[] c = frame.buffer__        Label[] labels = frame.labels__        int tag__        int delta__        if (zip) {_            tag = b[stackMap++] & 0xFF__        } else {_            tag = MethodWriter.FULL_FRAME__            frame.offset = -1__        }_        frame.localDiff = 0__        if (tag < MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME) {_            delta = tag__            frame.mode = Opcodes.F_SAME__            frame.stackCount = 0__        } else if (tag < MethodWriter.RESERVED) {_            delta = tag - MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME__            stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__            frame.mode = Opcodes.F_SAME1__            frame.stackCount = 1__        } else {_            delta = readUnsignedShort(stackMap)__            stackMap += 2__            if (tag == MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_                stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__                frame.mode = Opcodes.F_SAME1__                frame.stackCount = 1__            } else if (tag >= MethodWriter.CHOP_FRAME_                    && tag < MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_CHOP__                frame.localDiff = MethodWriter.SAME_FRAME_EXTENDED - tag__                frame.localCount -= frame.localDiff__                frame.stackCount = 0__            } else if (tag == MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_SAME__                frame.stackCount = 0__            } else if (tag < MethodWriter.FULL_FRAME) {_                int local = unzip ? frame.localCount : 0__                for (int i = tag - MethodWriter.SAME_FRAME_EXTENDED_ i > 0_ i--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                frame.mode = Opcodes.F_APPEND__                frame.localDiff = tag - MethodWriter.SAME_FRAME_EXTENDED__                frame.localCount += frame.localDiff__                frame.stackCount = 0__            } else { _                frame.mode = Opcodes.F_FULL__                int n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.localDiff = n__                frame.localCount = n__                for (int local = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.stackCount = n__                for (int stack = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.stack, stack++, stackMap, c,_                            labels)__                }_            }_        }_        frame.offset += delta + 1__        readLabel(frame.offset, labels)__        return stackMap__    };reads,a,stack,map,frame,and,stores,the,result,in,the,given,link,context,object,param,stack,map,the,start,offset,of,a,stack,map,frame,in,the,class,file,param,zip,if,the,stack,map,frame,at,stack,map,is,compressed,or,not,param,unzip,if,the,stack,map,frame,must,be,uncompressed,param,frame,where,the,parsed,stack,map,frame,must,be,stored,return,the,offset,of,the,first,byte,following,the,parsed,frame;private,int,read,frame,int,stack,map,boolean,zip,boolean,unzip,context,frame,char,c,frame,buffer,label,labels,frame,labels,int,tag,int,delta,if,zip,tag,b,stack,map,0x,ff,else,tag,method,writer,frame,offset,1,frame,local,diff,0,if,tag,method,writer,delta,tag,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,reserved,delta,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,delta,read,unsigned,short,stack,map,stack,map,2,if,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,if,tag,method,writer,tag,method,writer,frame,mode,opcodes,frame,local,diff,method,writer,tag,frame,local,count,frame,local,diff,frame,stack,count,0,else,if,tag,method,writer,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,int,local,unzip,frame,local,count,0,for,int,i,tag,method,writer,i,0,i,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,frame,mode,opcodes,frame,local,diff,tag,method,writer,frame,local,count,frame,local,diff,frame,stack,count,0,else,frame,mode,opcodes,int,n,read,unsigned,short,stack,map,stack,map,2,frame,local,diff,n,frame,local,count,n,for,int,local,0,n,0,n,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,n,read,unsigned,short,stack,map,stack,map,2,frame,stack,count,n,for,int,stack,0,n,0,n,stack,map,read,frame,type,frame,stack,stack,stack,map,c,labels,frame,offset,delta,1,read,label,frame,offset,labels,return,stack,map
ClassReader -> private int readFrame(int stackMap, boolean zip, boolean unzip,             Context frame);1459258703;Reads a stack map frame and stores the result in the given_{@link Context} object.__@param stackMap_the start offset of a stack map frame in the class file._@param zip_if the stack map frame at stackMap is compressed or not._@param unzip_if the stack map frame must be uncompressed._@param frame_where the parsed stack map frame must be stored._@return the offset of the first byte following the parsed frame.;private int readFrame(int stackMap, boolean zip, boolean unzip,_            Context frame) {_        char[] c = frame.buffer__        Label[] labels = frame.labels__        int tag__        int delta__        if (zip) {_            tag = b[stackMap++] & 0xFF__        } else {_            tag = MethodWriter.FULL_FRAME__            frame.offset = -1__        }_        frame.localDiff = 0__        if (tag < MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME) {_            delta = tag__            frame.mode = Opcodes.F_SAME__            frame.stackCount = 0__        } else if (tag < MethodWriter.RESERVED) {_            delta = tag - MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME__            stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__            frame.mode = Opcodes.F_SAME1__            frame.stackCount = 1__        } else {_            delta = readUnsignedShort(stackMap)__            stackMap += 2__            if (tag == MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_                stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__                frame.mode = Opcodes.F_SAME1__                frame.stackCount = 1__            } else if (tag >= MethodWriter.CHOP_FRAME_                    && tag < MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_CHOP__                frame.localDiff = MethodWriter.SAME_FRAME_EXTENDED - tag__                frame.localCount -= frame.localDiff__                frame.stackCount = 0__            } else if (tag == MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_SAME__                frame.stackCount = 0__            } else if (tag < MethodWriter.FULL_FRAME) {_                int local = unzip ? frame.localCount : 0__                for (int i = tag - MethodWriter.SAME_FRAME_EXTENDED_ i > 0_ i--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                frame.mode = Opcodes.F_APPEND__                frame.localDiff = tag - MethodWriter.SAME_FRAME_EXTENDED__                frame.localCount += frame.localDiff__                frame.stackCount = 0__            } else { _                frame.mode = Opcodes.F_FULL__                int n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.localDiff = n__                frame.localCount = n__                for (int local = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.stackCount = n__                for (int stack = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.stack, stack++, stackMap, c,_                            labels)__                }_            }_        }_        frame.offset += delta + 1__        readLabel(frame.offset, labels)__        return stackMap__    };reads,a,stack,map,frame,and,stores,the,result,in,the,given,link,context,object,param,stack,map,the,start,offset,of,a,stack,map,frame,in,the,class,file,param,zip,if,the,stack,map,frame,at,stack,map,is,compressed,or,not,param,unzip,if,the,stack,map,frame,must,be,uncompressed,param,frame,where,the,parsed,stack,map,frame,must,be,stored,return,the,offset,of,the,first,byte,following,the,parsed,frame;private,int,read,frame,int,stack,map,boolean,zip,boolean,unzip,context,frame,char,c,frame,buffer,label,labels,frame,labels,int,tag,int,delta,if,zip,tag,b,stack,map,0x,ff,else,tag,method,writer,frame,offset,1,frame,local,diff,0,if,tag,method,writer,delta,tag,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,reserved,delta,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,delta,read,unsigned,short,stack,map,stack,map,2,if,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,if,tag,method,writer,tag,method,writer,frame,mode,opcodes,frame,local,diff,method,writer,tag,frame,local,count,frame,local,diff,frame,stack,count,0,else,if,tag,method,writer,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,int,local,unzip,frame,local,count,0,for,int,i,tag,method,writer,i,0,i,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,frame,mode,opcodes,frame,local,diff,tag,method,writer,frame,local,count,frame,local,diff,frame,stack,count,0,else,frame,mode,opcodes,int,n,read,unsigned,short,stack,map,stack,map,2,frame,local,diff,n,frame,local,count,n,for,int,local,0,n,0,n,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,n,read,unsigned,short,stack,map,stack,map,2,frame,stack,count,n,for,int,stack,0,n,0,n,stack,map,read,frame,type,frame,stack,stack,stack,map,c,labels,frame,offset,delta,1,read,label,frame,offset,labels,return,stack,map
ClassReader -> private int readFrame(int stackMap, boolean zip, boolean unzip,             Context frame);1478623137;Reads a stack map frame and stores the result in the given_{@link Context} object.__@param stackMap_the start offset of a stack map frame in the class file._@param zip_if the stack map frame at stackMap is compressed or not._@param unzip_if the stack map frame must be uncompressed._@param frame_where the parsed stack map frame must be stored._@return the offset of the first byte following the parsed frame.;private int readFrame(int stackMap, boolean zip, boolean unzip,_            Context frame) {_        char[] c = frame.buffer__        Label[] labels = frame.labels__        int tag__        int delta__        if (zip) {_            tag = b[stackMap++] & 0xFF__        } else {_            tag = MethodWriter.FULL_FRAME__            frame.offset = -1__        }_        frame.localDiff = 0__        if (tag < MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME) {_            delta = tag__            frame.mode = Opcodes.F_SAME__            frame.stackCount = 0__        } else if (tag < MethodWriter.RESERVED) {_            delta = tag - MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME__            stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__            frame.mode = Opcodes.F_SAME1__            frame.stackCount = 1__        } else {_            delta = readUnsignedShort(stackMap)__            stackMap += 2__            if (tag == MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_                stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__                frame.mode = Opcodes.F_SAME1__                frame.stackCount = 1__            } else if (tag >= MethodWriter.CHOP_FRAME_                    && tag < MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_CHOP__                frame.localDiff = MethodWriter.SAME_FRAME_EXTENDED - tag__                frame.localCount -= frame.localDiff__                frame.stackCount = 0__            } else if (tag == MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_SAME__                frame.stackCount = 0__            } else if (tag < MethodWriter.FULL_FRAME) {_                int local = unzip ? frame.localCount : 0__                for (int i = tag - MethodWriter.SAME_FRAME_EXTENDED_ i > 0_ i--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                frame.mode = Opcodes.F_APPEND__                frame.localDiff = tag - MethodWriter.SAME_FRAME_EXTENDED__                frame.localCount += frame.localDiff__                frame.stackCount = 0__            } else { _                frame.mode = Opcodes.F_FULL__                int n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.localDiff = n__                frame.localCount = n__                for (int local = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.stackCount = n__                for (int stack = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.stack, stack++, stackMap, c,_                            labels)__                }_            }_        }_        frame.offset += delta + 1__        readLabel(frame.offset, labels)__        return stackMap__    };reads,a,stack,map,frame,and,stores,the,result,in,the,given,link,context,object,param,stack,map,the,start,offset,of,a,stack,map,frame,in,the,class,file,param,zip,if,the,stack,map,frame,at,stack,map,is,compressed,or,not,param,unzip,if,the,stack,map,frame,must,be,uncompressed,param,frame,where,the,parsed,stack,map,frame,must,be,stored,return,the,offset,of,the,first,byte,following,the,parsed,frame;private,int,read,frame,int,stack,map,boolean,zip,boolean,unzip,context,frame,char,c,frame,buffer,label,labels,frame,labels,int,tag,int,delta,if,zip,tag,b,stack,map,0x,ff,else,tag,method,writer,frame,offset,1,frame,local,diff,0,if,tag,method,writer,delta,tag,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,reserved,delta,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,delta,read,unsigned,short,stack,map,stack,map,2,if,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,if,tag,method,writer,tag,method,writer,frame,mode,opcodes,frame,local,diff,method,writer,tag,frame,local,count,frame,local,diff,frame,stack,count,0,else,if,tag,method,writer,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,int,local,unzip,frame,local,count,0,for,int,i,tag,method,writer,i,0,i,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,frame,mode,opcodes,frame,local,diff,tag,method,writer,frame,local,count,frame,local,diff,frame,stack,count,0,else,frame,mode,opcodes,int,n,read,unsigned,short,stack,map,stack,map,2,frame,local,diff,n,frame,local,count,n,for,int,local,0,n,0,n,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,n,read,unsigned,short,stack,map,stack,map,2,frame,stack,count,n,for,int,stack,0,n,0,n,stack,map,read,frame,type,frame,stack,stack,stack,map,c,labels,frame,offset,delta,1,read,label,frame,offset,labels,return,stack,map
ClassReader -> private int readFrame(int stackMap, boolean zip, boolean unzip,             Context frame);1483093254;Reads a stack map frame and stores the result in the given_{@link Context} object.__@param stackMap_the start offset of a stack map frame in the class file._@param zip_if the stack map frame at stackMap is compressed or not._@param unzip_if the stack map frame must be uncompressed._@param frame_where the parsed stack map frame must be stored._@return the offset of the first byte following the parsed frame.;private int readFrame(int stackMap, boolean zip, boolean unzip,_            Context frame) {_        char[] c = frame.buffer__        Label[] labels = frame.labels__        int tag__        int delta__        if (zip) {_            tag = b[stackMap++] & 0xFF__        } else {_            tag = MethodWriter.FULL_FRAME__            frame.offset = -1__        }_        frame.localDiff = 0__        if (tag < MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME) {_            delta = tag__            frame.mode = Opcodes.F_SAME__            frame.stackCount = 0__        } else if (tag < MethodWriter.RESERVED) {_            delta = tag - MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME__            stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__            frame.mode = Opcodes.F_SAME1__            frame.stackCount = 1__        } else {_            delta = readUnsignedShort(stackMap)__            stackMap += 2__            if (tag == MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_                stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__                frame.mode = Opcodes.F_SAME1__                frame.stackCount = 1__            } else if (tag >= MethodWriter.CHOP_FRAME_                    && tag < MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_CHOP__                frame.localDiff = MethodWriter.SAME_FRAME_EXTENDED - tag__                frame.localCount -= frame.localDiff__                frame.stackCount = 0__            } else if (tag == MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_SAME__                frame.stackCount = 0__            } else if (tag < MethodWriter.FULL_FRAME) {_                int local = unzip ? frame.localCount : 0__                for (int i = tag - MethodWriter.SAME_FRAME_EXTENDED_ i > 0_ i--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                frame.mode = Opcodes.F_APPEND__                frame.localDiff = tag - MethodWriter.SAME_FRAME_EXTENDED__                frame.localCount += frame.localDiff__                frame.stackCount = 0__            } else { _                frame.mode = Opcodes.F_FULL__                int n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.localDiff = n__                frame.localCount = n__                for (int local = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.stackCount = n__                for (int stack = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.stack, stack++, stackMap, c,_                            labels)__                }_            }_        }_        frame.offset += delta + 1__        readLabel(frame.offset, labels)__        return stackMap__    };reads,a,stack,map,frame,and,stores,the,result,in,the,given,link,context,object,param,stack,map,the,start,offset,of,a,stack,map,frame,in,the,class,file,param,zip,if,the,stack,map,frame,at,stack,map,is,compressed,or,not,param,unzip,if,the,stack,map,frame,must,be,uncompressed,param,frame,where,the,parsed,stack,map,frame,must,be,stored,return,the,offset,of,the,first,byte,following,the,parsed,frame;private,int,read,frame,int,stack,map,boolean,zip,boolean,unzip,context,frame,char,c,frame,buffer,label,labels,frame,labels,int,tag,int,delta,if,zip,tag,b,stack,map,0x,ff,else,tag,method,writer,frame,offset,1,frame,local,diff,0,if,tag,method,writer,delta,tag,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,reserved,delta,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,delta,read,unsigned,short,stack,map,stack,map,2,if,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,if,tag,method,writer,tag,method,writer,frame,mode,opcodes,frame,local,diff,method,writer,tag,frame,local,count,frame,local,diff,frame,stack,count,0,else,if,tag,method,writer,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,int,local,unzip,frame,local,count,0,for,int,i,tag,method,writer,i,0,i,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,frame,mode,opcodes,frame,local,diff,tag,method,writer,frame,local,count,frame,local,diff,frame,stack,count,0,else,frame,mode,opcodes,int,n,read,unsigned,short,stack,map,stack,map,2,frame,local,diff,n,frame,local,count,n,for,int,local,0,n,0,n,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,n,read,unsigned,short,stack,map,stack,map,2,frame,stack,count,n,for,int,stack,0,n,0,n,stack,map,read,frame,type,frame,stack,stack,stack,map,c,labels,frame,offset,delta,1,read,label,frame,offset,labels,return,stack,map
ClassReader -> private int readFrame(int stackMap, boolean zip, boolean unzip,             Context frame);1505821772;Reads a stack map frame and stores the result in the given_{@link Context} object.__@param stackMap_the start offset of a stack map frame in the class file._@param zip_if the stack map frame at stackMap is compressed or not._@param unzip_if the stack map frame must be uncompressed._@param frame_where the parsed stack map frame must be stored._@return the offset of the first byte following the parsed frame.;private int readFrame(int stackMap, boolean zip, boolean unzip,_            Context frame) {_        char[] c = frame.buffer__        Label[] labels = frame.labels__        int tag__        int delta__        if (zip) {_            tag = b[stackMap++] & 0xFF__        } else {_            tag = MethodWriter.FULL_FRAME__            frame.offset = -1__        }_        frame.localDiff = 0__        if (tag < MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME) {_            delta = tag__            frame.mode = Opcodes.F_SAME__            frame.stackCount = 0__        } else if (tag < MethodWriter.RESERVED) {_            delta = tag - MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME__            stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__            frame.mode = Opcodes.F_SAME1__            frame.stackCount = 1__        } else {_            delta = readUnsignedShort(stackMap)__            stackMap += 2__            if (tag == MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {_                stackMap = readFrameType(frame.stack, 0, stackMap, c, labels)__                frame.mode = Opcodes.F_SAME1__                frame.stackCount = 1__            } else if (tag >= MethodWriter.CHOP_FRAME_                    && tag < MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_CHOP__                frame.localDiff = MethodWriter.SAME_FRAME_EXTENDED - tag__                frame.localCount -= frame.localDiff__                frame.stackCount = 0__            } else if (tag == MethodWriter.SAME_FRAME_EXTENDED) {_                frame.mode = Opcodes.F_SAME__                frame.stackCount = 0__            } else if (tag < MethodWriter.FULL_FRAME) {_                int local = unzip ? frame.localCount : 0__                for (int i = tag - MethodWriter.SAME_FRAME_EXTENDED_ i > 0_ i--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                frame.mode = Opcodes.F_APPEND__                frame.localDiff = tag - MethodWriter.SAME_FRAME_EXTENDED__                frame.localCount += frame.localDiff__                frame.stackCount = 0__            } else { _                frame.mode = Opcodes.F_FULL__                int n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.localDiff = n__                frame.localCount = n__                for (int local = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.local, local++, stackMap, c,_                            labels)__                }_                n = readUnsignedShort(stackMap)__                stackMap += 2__                frame.stackCount = n__                for (int stack = 0_ n > 0_ n--) {_                    stackMap = readFrameType(frame.stack, stack++, stackMap, c,_                            labels)__                }_            }_        }_        frame.offset += delta + 1__        readLabel(frame.offset, labels)__        return stackMap__    };reads,a,stack,map,frame,and,stores,the,result,in,the,given,link,context,object,param,stack,map,the,start,offset,of,a,stack,map,frame,in,the,class,file,param,zip,if,the,stack,map,frame,at,stack,map,is,compressed,or,not,param,unzip,if,the,stack,map,frame,must,be,uncompressed,param,frame,where,the,parsed,stack,map,frame,must,be,stored,return,the,offset,of,the,first,byte,following,the,parsed,frame;private,int,read,frame,int,stack,map,boolean,zip,boolean,unzip,context,frame,char,c,frame,buffer,label,labels,frame,labels,int,tag,int,delta,if,zip,tag,b,stack,map,0x,ff,else,tag,method,writer,frame,offset,1,frame,local,diff,0,if,tag,method,writer,delta,tag,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,reserved,delta,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,delta,read,unsigned,short,stack,map,stack,map,2,if,tag,method,writer,stack,map,read,frame,type,frame,stack,0,stack,map,c,labels,frame,mode,opcodes,frame,stack,count,1,else,if,tag,method,writer,tag,method,writer,frame,mode,opcodes,frame,local,diff,method,writer,tag,frame,local,count,frame,local,diff,frame,stack,count,0,else,if,tag,method,writer,frame,mode,opcodes,frame,stack,count,0,else,if,tag,method,writer,int,local,unzip,frame,local,count,0,for,int,i,tag,method,writer,i,0,i,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,frame,mode,opcodes,frame,local,diff,tag,method,writer,frame,local,count,frame,local,diff,frame,stack,count,0,else,frame,mode,opcodes,int,n,read,unsigned,short,stack,map,stack,map,2,frame,local,diff,n,frame,local,count,n,for,int,local,0,n,0,n,stack,map,read,frame,type,frame,local,local,stack,map,c,labels,n,read,unsigned,short,stack,map,stack,map,2,frame,stack,count,n,for,int,stack,0,n,0,n,stack,map,read,frame,type,frame,stack,stack,stack,map,c,labels,frame,offset,delta,1,read,label,frame,offset,labels,return,stack,map
ClassReader -> private int readAnnotationTarget(final Context context, int u);1395273982;Parses the header of a type annotation to extract its target_type and_target_path (the result is stored in the given context), and returns the_start offset of the rest of the type_annotation structure (i.e. the_offset to the type_index field, which is followed by_num_element_value_pairs and then the name,value pairs).__@param context_information about the class being parsed. This is where the_extracted target_type and target_path must be stored._@param u_the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readAnnotationTarget(final Context context, int u) {_        int target = readInt(u)__        switch (target >>> 24) {_        case 0x00: _        case 0x01: _        case 0x16: _            target &= 0xFFFF0000__            u += 2__            break__        case 0x13: _        case 0x14: _        case 0x15: _            target &= 0xFF000000__            u += 1__            break__        case 0x40: _        case 0x41: { _            target &= 0xFF000000__            int n = readUnsignedShort(u + 1)__            context.start = new Label[n]__            context.end = new Label[n]__            context.index = new int[n]__            u += 3__            for (int i = 0_ i < n_ ++i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                context.start[i] = readLabel(start, context.labels)__                context.end[i] = readLabel(start + length, context.labels)__                context.index[i] = readUnsignedShort(u + 4)__                u += 6__            }_            break__        }_        case 0x47: _        case 0x48: _        case 0x49: _        case 0x4A: _        case 0x4B: _            target &= 0xFF0000FF__            u += 4__            break__        _        _        _        _        _        _        _        _        _        default:_            target &= (target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000__            u += 3__            break__        }_        int pathLength = readByte(u)__        context.typeRef = target__        context.typePath = pathLength == 0 ? null : new TypePath(b, u)__        return u + 1 + 2 * pathLength__    };parses,the,header,of,a,type,annotation,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,i,e,the,offset,to,the,field,which,is,followed,by,and,then,the,name,value,pairs,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,u,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,annotation,target,final,context,context,int,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,target,0x,ffff0000,u,2,break,case,0x13,case,0x14,case,0x15,target,0x,ff000000,u,1,break,case,0x40,case,0x41,target,0x,ff000000,int,n,read,unsigned,short,u,1,context,start,new,label,n,context,end,new,label,n,context,index,new,int,n,u,3,for,int,i,0,i,n,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,context,start,i,read,label,start,context,labels,context,end,i,read,label,start,length,context,labels,context,index,i,read,unsigned,short,u,4,u,6,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,target,0x,ff0000ff,u,4,break,default,target,target,24,0x43,0x,ffffff00,0x,ff000000,u,3,break,int,path,length,read,byte,u,context,type,ref,target,context,type,path,path,length,0,null,new,type,path,b,u,return,u,1,2,path,length
ClassReader -> private int readAnnotationTarget(final Context context, int u);1414067099;Parses the header of a type annotation to extract its target_type and_target_path (the result is stored in the given context), and returns the_start offset of the rest of the type_annotation structure (i.e. the_offset to the type_index field, which is followed by_num_element_value_pairs and then the name,value pairs).__@param context_information about the class being parsed. This is where the_extracted target_type and target_path must be stored._@param u_the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readAnnotationTarget(final Context context, int u) {_        int target = readInt(u)__        switch (target >>> 24) {_        case 0x00: _        case 0x01: _        case 0x16: _            target &= 0xFFFF0000__            u += 2__            break__        case 0x13: _        case 0x14: _        case 0x15: _            target &= 0xFF000000__            u += 1__            break__        case 0x40: _        case 0x41: { _            target &= 0xFF000000__            int n = readUnsignedShort(u + 1)__            context.start = new Label[n]__            context.end = new Label[n]__            context.index = new int[n]__            u += 3__            for (int i = 0_ i < n_ ++i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                context.start[i] = readLabel(start, context.labels)__                context.end[i] = readLabel(start + length, context.labels)__                context.index[i] = readUnsignedShort(u + 4)__                u += 6__            }_            break__        }_        case 0x47: _        case 0x48: _        case 0x49: _        case 0x4A: _        case 0x4B: _            target &= 0xFF0000FF__            u += 4__            break__        _        _        _        _        _        _        _        _        _        default:_            target &= (target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000__            u += 3__            break__        }_        int pathLength = readByte(u)__        context.typeRef = target__        context.typePath = pathLength == 0 ? null : new TypePath(b, u)__        return u + 1 + 2 * pathLength__    };parses,the,header,of,a,type,annotation,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,i,e,the,offset,to,the,field,which,is,followed,by,and,then,the,name,value,pairs,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,u,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,annotation,target,final,context,context,int,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,target,0x,ffff0000,u,2,break,case,0x13,case,0x14,case,0x15,target,0x,ff000000,u,1,break,case,0x40,case,0x41,target,0x,ff000000,int,n,read,unsigned,short,u,1,context,start,new,label,n,context,end,new,label,n,context,index,new,int,n,u,3,for,int,i,0,i,n,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,context,start,i,read,label,start,context,labels,context,end,i,read,label,start,length,context,labels,context,index,i,read,unsigned,short,u,4,u,6,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,target,0x,ff0000ff,u,4,break,default,target,target,24,0x43,0x,ffffff00,0x,ff000000,u,3,break,int,path,length,read,byte,u,context,type,ref,target,context,type,path,path,length,0,null,new,type,path,b,u,return,u,1,2,path,length
ClassReader -> private int readAnnotationTarget(final Context context, int u);1414499035;Parses the header of a type annotation to extract its target_type and_target_path (the result is stored in the given context), and returns the_start offset of the rest of the type_annotation structure (i.e. the_offset to the type_index field, which is followed by_num_element_value_pairs and then the name,value pairs).__@param context_information about the class being parsed. This is where the_extracted target_type and target_path must be stored._@param u_the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readAnnotationTarget(final Context context, int u) {_        int target = readInt(u)__        switch (target >>> 24) {_        case 0x00: _        case 0x01: _        case 0x16: _            target &= 0xFFFF0000__            u += 2__            break__        case 0x13: _        case 0x14: _        case 0x15: _            target &= 0xFF000000__            u += 1__            break__        case 0x40: _        case 0x41: { _            target &= 0xFF000000__            int n = readUnsignedShort(u + 1)__            context.start = new Label[n]__            context.end = new Label[n]__            context.index = new int[n]__            u += 3__            for (int i = 0_ i < n_ ++i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                context.start[i] = readLabel(start, context.labels)__                context.end[i] = readLabel(start + length, context.labels)__                context.index[i] = readUnsignedShort(u + 4)__                u += 6__            }_            break__        }_        case 0x47: _        case 0x48: _        case 0x49: _        case 0x4A: _        case 0x4B: _            target &= 0xFF0000FF__            u += 4__            break__        _        _        _        _        _        _        _        _        _        default:_            target &= (target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000__            u += 3__            break__        }_        int pathLength = readByte(u)__        context.typeRef = target__        context.typePath = pathLength == 0 ? null : new TypePath(b, u)__        return u + 1 + 2 * pathLength__    };parses,the,header,of,a,type,annotation,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,i,e,the,offset,to,the,field,which,is,followed,by,and,then,the,name,value,pairs,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,u,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,annotation,target,final,context,context,int,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,target,0x,ffff0000,u,2,break,case,0x13,case,0x14,case,0x15,target,0x,ff000000,u,1,break,case,0x40,case,0x41,target,0x,ff000000,int,n,read,unsigned,short,u,1,context,start,new,label,n,context,end,new,label,n,context,index,new,int,n,u,3,for,int,i,0,i,n,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,context,start,i,read,label,start,context,labels,context,end,i,read,label,start,length,context,labels,context,index,i,read,unsigned,short,u,4,u,6,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,target,0x,ff0000ff,u,4,break,default,target,target,24,0x43,0x,ffffff00,0x,ff000000,u,3,break,int,path,length,read,byte,u,context,type,ref,target,context,type,path,path,length,0,null,new,type,path,b,u,return,u,1,2,path,length
ClassReader -> private int readAnnotationTarget(final Context context, int u);1416998550;Parses the header of a type annotation to extract its target_type and_target_path (the result is stored in the given context), and returns the_start offset of the rest of the type_annotation structure (i.e. the_offset to the type_index field, which is followed by_num_element_value_pairs and then the name,value pairs).__@param context_information about the class being parsed. This is where the_extracted target_type and target_path must be stored._@param u_the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readAnnotationTarget(final Context context, int u) {_        int target = readInt(u)__        switch (target >>> 24) {_        case 0x00: _        case 0x01: _        case 0x16: _            target &= 0xFFFF0000__            u += 2__            break__        case 0x13: _        case 0x14: _        case 0x15: _            target &= 0xFF000000__            u += 1__            break__        case 0x40: _        case 0x41: { _            target &= 0xFF000000__            int n = readUnsignedShort(u + 1)__            context.start = new Label[n]__            context.end = new Label[n]__            context.index = new int[n]__            u += 3__            for (int i = 0_ i < n_ ++i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                context.start[i] = readLabel(start, context.labels)__                context.end[i] = readLabel(start + length, context.labels)__                context.index[i] = readUnsignedShort(u + 4)__                u += 6__            }_            break__        }_        case 0x47: _        case 0x48: _        case 0x49: _        case 0x4A: _        case 0x4B: _            target &= 0xFF0000FF__            u += 4__            break__        _        _        _        _        _        _        _        _        _        default:_            target &= (target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000__            u += 3__            break__        }_        int pathLength = readByte(u)__        context.typeRef = target__        context.typePath = pathLength == 0 ? null : new TypePath(b, u)__        return u + 1 + 2 * pathLength__    };parses,the,header,of,a,type,annotation,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,i,e,the,offset,to,the,field,which,is,followed,by,and,then,the,name,value,pairs,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,u,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,annotation,target,final,context,context,int,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,target,0x,ffff0000,u,2,break,case,0x13,case,0x14,case,0x15,target,0x,ff000000,u,1,break,case,0x40,case,0x41,target,0x,ff000000,int,n,read,unsigned,short,u,1,context,start,new,label,n,context,end,new,label,n,context,index,new,int,n,u,3,for,int,i,0,i,n,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,context,start,i,read,label,start,context,labels,context,end,i,read,label,start,length,context,labels,context,index,i,read,unsigned,short,u,4,u,6,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,target,0x,ff0000ff,u,4,break,default,target,target,24,0x43,0x,ffffff00,0x,ff000000,u,3,break,int,path,length,read,byte,u,context,type,ref,target,context,type,path,path,length,0,null,new,type,path,b,u,return,u,1,2,path,length
ClassReader -> private int readAnnotationTarget(final Context context, int u);1457705343;Parses the header of a type annotation to extract its target_type and_target_path (the result is stored in the given context), and returns the_start offset of the rest of the type_annotation structure (i.e. the_offset to the type_index field, which is followed by_num_element_value_pairs and then the name,value pairs).__@param context_information about the class being parsed. This is where the_extracted target_type and target_path must be stored._@param u_the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readAnnotationTarget(final Context context, int u) {_        int target = readInt(u)__        switch (target >>> 24) {_        case 0x00: _        case 0x01: _        case 0x16: _            target &= 0xFFFF0000__            u += 2__            break__        case 0x13: _        case 0x14: _        case 0x15: _            target &= 0xFF000000__            u += 1__            break__        case 0x40: _        case 0x41: { _            target &= 0xFF000000__            int n = readUnsignedShort(u + 1)__            context.start = new Label[n]__            context.end = new Label[n]__            context.index = new int[n]__            u += 3__            for (int i = 0_ i < n_ ++i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                context.start[i] = readLabel(start, context.labels)__                context.end[i] = readLabel(start + length, context.labels)__                context.index[i] = readUnsignedShort(u + 4)__                u += 6__            }_            break__        }_        case 0x47: _        case 0x48: _        case 0x49: _        case 0x4A: _        case 0x4B: _            target &= 0xFF0000FF__            u += 4__            break__        _        _        _        _        _        _        _        _        _        default:_            target &= (target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000__            u += 3__            break__        }_        int pathLength = readByte(u)__        context.typeRef = target__        context.typePath = pathLength == 0 ? null : new TypePath(b, u)__        return u + 1 + 2 * pathLength__    };parses,the,header,of,a,type,annotation,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,i,e,the,offset,to,the,field,which,is,followed,by,and,then,the,name,value,pairs,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,u,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,annotation,target,final,context,context,int,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,target,0x,ffff0000,u,2,break,case,0x13,case,0x14,case,0x15,target,0x,ff000000,u,1,break,case,0x40,case,0x41,target,0x,ff000000,int,n,read,unsigned,short,u,1,context,start,new,label,n,context,end,new,label,n,context,index,new,int,n,u,3,for,int,i,0,i,n,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,context,start,i,read,label,start,context,labels,context,end,i,read,label,start,length,context,labels,context,index,i,read,unsigned,short,u,4,u,6,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,target,0x,ff0000ff,u,4,break,default,target,target,24,0x43,0x,ffffff00,0x,ff000000,u,3,break,int,path,length,read,byte,u,context,type,ref,target,context,type,path,path,length,0,null,new,type,path,b,u,return,u,1,2,path,length
ClassReader -> private int readAnnotationTarget(final Context context, int u);1459258703;Parses the header of a type annotation to extract its target_type and_target_path (the result is stored in the given context), and returns the_start offset of the rest of the type_annotation structure (i.e. the_offset to the type_index field, which is followed by_num_element_value_pairs and then the name,value pairs).__@param context_information about the class being parsed. This is where the_extracted target_type and target_path must be stored._@param u_the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readAnnotationTarget(final Context context, int u) {_        int target = readInt(u)__        switch (target >>> 24) {_        case 0x00: _        case 0x01: _        case 0x16: _            target &= 0xFFFF0000__            u += 2__            break__        case 0x13: _        case 0x14: _        case 0x15: _            target &= 0xFF000000__            u += 1__            break__        case 0x40: _        case 0x41: { _            target &= 0xFF000000__            int n = readUnsignedShort(u + 1)__            context.start = new Label[n]__            context.end = new Label[n]__            context.index = new int[n]__            u += 3__            for (int i = 0_ i < n_ ++i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                context.start[i] = readLabel(start, context.labels)__                context.end[i] = readLabel(start + length, context.labels)__                context.index[i] = readUnsignedShort(u + 4)__                u += 6__            }_            break__        }_        case 0x47: _        case 0x48: _        case 0x49: _        case 0x4A: _        case 0x4B: _            target &= 0xFF0000FF__            u += 4__            break__        _        _        _        _        _        _        _        _        _        default:_            target &= (target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000__            u += 3__            break__        }_        int pathLength = readByte(u)__        context.typeRef = target__        context.typePath = pathLength == 0 ? null : new TypePath(b, u)__        return u + 1 + 2 * pathLength__    };parses,the,header,of,a,type,annotation,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,i,e,the,offset,to,the,field,which,is,followed,by,and,then,the,name,value,pairs,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,u,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,annotation,target,final,context,context,int,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,target,0x,ffff0000,u,2,break,case,0x13,case,0x14,case,0x15,target,0x,ff000000,u,1,break,case,0x40,case,0x41,target,0x,ff000000,int,n,read,unsigned,short,u,1,context,start,new,label,n,context,end,new,label,n,context,index,new,int,n,u,3,for,int,i,0,i,n,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,context,start,i,read,label,start,context,labels,context,end,i,read,label,start,length,context,labels,context,index,i,read,unsigned,short,u,4,u,6,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,target,0x,ff0000ff,u,4,break,default,target,target,24,0x43,0x,ffffff00,0x,ff000000,u,3,break,int,path,length,read,byte,u,context,type,ref,target,context,type,path,path,length,0,null,new,type,path,b,u,return,u,1,2,path,length
ClassReader -> private int readAnnotationTarget(final Context context, int u);1478623137;Parses the header of a type annotation to extract its target_type and_target_path (the result is stored in the given context), and returns the_start offset of the rest of the type_annotation structure (i.e. the_offset to the type_index field, which is followed by_num_element_value_pairs and then the name,value pairs).__@param context_information about the class being parsed. This is where the_extracted target_type and target_path must be stored._@param u_the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readAnnotationTarget(final Context context, int u) {_        int target = readInt(u)__        switch (target >>> 24) {_        case 0x00: _        case 0x01: _        case 0x16: _            target &= 0xFFFF0000__            u += 2__            break__        case 0x13: _        case 0x14: _        case 0x15: _            target &= 0xFF000000__            u += 1__            break__        case 0x40: _        case 0x41: { _            target &= 0xFF000000__            int n = readUnsignedShort(u + 1)__            context.start = new Label[n]__            context.end = new Label[n]__            context.index = new int[n]__            u += 3__            for (int i = 0_ i < n_ ++i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                context.start[i] = readLabel(start, context.labels)__                context.end[i] = readLabel(start + length, context.labels)__                context.index[i] = readUnsignedShort(u + 4)__                u += 6__            }_            break__        }_        case 0x47: _        case 0x48: _        case 0x49: _        case 0x4A: _        case 0x4B: _            target &= 0xFF0000FF__            u += 4__            break__        _        _        _        _        _        _        _        _        _        default:_            target &= (target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000__            u += 3__            break__        }_        int pathLength = readByte(u)__        context.typeRef = target__        context.typePath = pathLength == 0 ? null : new TypePath(b, u)__        return u + 1 + 2 * pathLength__    };parses,the,header,of,a,type,annotation,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,i,e,the,offset,to,the,field,which,is,followed,by,and,then,the,name,value,pairs,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,u,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,annotation,target,final,context,context,int,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,target,0x,ffff0000,u,2,break,case,0x13,case,0x14,case,0x15,target,0x,ff000000,u,1,break,case,0x40,case,0x41,target,0x,ff000000,int,n,read,unsigned,short,u,1,context,start,new,label,n,context,end,new,label,n,context,index,new,int,n,u,3,for,int,i,0,i,n,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,context,start,i,read,label,start,context,labels,context,end,i,read,label,start,length,context,labels,context,index,i,read,unsigned,short,u,4,u,6,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,target,0x,ff0000ff,u,4,break,default,target,target,24,0x43,0x,ffffff00,0x,ff000000,u,3,break,int,path,length,read,byte,u,context,type,ref,target,context,type,path,path,length,0,null,new,type,path,b,u,return,u,1,2,path,length
ClassReader -> private int readAnnotationTarget(final Context context, int u);1483093254;Parses the header of a type annotation to extract its target_type and_target_path (the result is stored in the given context), and returns the_start offset of the rest of the type_annotation structure (i.e. the_offset to the type_index field, which is followed by_num_element_value_pairs and then the name,value pairs).__@param context_information about the class being parsed. This is where the_extracted target_type and target_path must be stored._@param u_the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readAnnotationTarget(final Context context, int u) {_        int target = readInt(u)__        switch (target >>> 24) {_        case 0x00: _        case 0x01: _        case 0x16: _            target &= 0xFFFF0000__            u += 2__            break__        case 0x13: _        case 0x14: _        case 0x15: _            target &= 0xFF000000__            u += 1__            break__        case 0x40: _        case 0x41: { _            target &= 0xFF000000__            int n = readUnsignedShort(u + 1)__            context.start = new Label[n]__            context.end = new Label[n]__            context.index = new int[n]__            u += 3__            for (int i = 0_ i < n_ ++i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                context.start[i] = readLabel(start, context.labels)__                context.end[i] = readLabel(start + length, context.labels)__                context.index[i] = readUnsignedShort(u + 4)__                u += 6__            }_            break__        }_        case 0x47: _        case 0x48: _        case 0x49: _        case 0x4A: _        case 0x4B: _            target &= 0xFF0000FF__            u += 4__            break__        _        _        _        _        _        _        _        _        _        default:_            target &= (target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000__            u += 3__            break__        }_        int pathLength = readByte(u)__        context.typeRef = target__        context.typePath = pathLength == 0 ? null : new TypePath(b, u)__        return u + 1 + 2 * pathLength__    };parses,the,header,of,a,type,annotation,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,i,e,the,offset,to,the,field,which,is,followed,by,and,then,the,name,value,pairs,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,u,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,annotation,target,final,context,context,int,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,target,0x,ffff0000,u,2,break,case,0x13,case,0x14,case,0x15,target,0x,ff000000,u,1,break,case,0x40,case,0x41,target,0x,ff000000,int,n,read,unsigned,short,u,1,context,start,new,label,n,context,end,new,label,n,context,index,new,int,n,u,3,for,int,i,0,i,n,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,context,start,i,read,label,start,context,labels,context,end,i,read,label,start,length,context,labels,context,index,i,read,unsigned,short,u,4,u,6,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,target,0x,ff0000ff,u,4,break,default,target,target,24,0x43,0x,ffffff00,0x,ff000000,u,3,break,int,path,length,read,byte,u,context,type,ref,target,context,type,path,path,length,0,null,new,type,path,b,u,return,u,1,2,path,length
ClassReader -> private int readAnnotationTarget(final Context context, int u);1505821772;Parses the header of a type annotation to extract its target_type and_target_path (the result is stored in the given context), and returns the_start offset of the rest of the type_annotation structure (i.e. the_offset to the type_index field, which is followed by_num_element_value_pairs and then the name,value pairs).__@param context_information about the class being parsed. This is where the_extracted target_type and target_path must be stored._@param u_the start offset of a type_annotation structure._@return the start offset of the rest of the type_annotation structure.;private int readAnnotationTarget(final Context context, int u) {_        int target = readInt(u)__        switch (target >>> 24) {_        case 0x00: _        case 0x01: _        case 0x16: _            target &= 0xFFFF0000__            u += 2__            break__        case 0x13: _        case 0x14: _        case 0x15: _            target &= 0xFF000000__            u += 1__            break__        case 0x40: _        case 0x41: { _            target &= 0xFF000000__            int n = readUnsignedShort(u + 1)__            context.start = new Label[n]__            context.end = new Label[n]__            context.index = new int[n]__            u += 3__            for (int i = 0_ i < n_ ++i) {_                int start = readUnsignedShort(u)__                int length = readUnsignedShort(u + 2)__                context.start[i] = readLabel(start, context.labels)__                context.end[i] = readLabel(start + length, context.labels)__                context.index[i] = readUnsignedShort(u + 4)__                u += 6__            }_            break__        }_        case 0x47: _        case 0x48: _        case 0x49: _        case 0x4A: _        case 0x4B: _            target &= 0xFF0000FF__            u += 4__            break__        _        _        _        _        _        _        _        _        _        default:_            target &= (target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000__            u += 3__            break__        }_        int pathLength = readByte(u)__        context.typeRef = target__        context.typePath = pathLength == 0 ? null : new TypePath(b, u)__        return u + 1 + 2 * pathLength__    };parses,the,header,of,a,type,annotation,to,extract,its,and,the,result,is,stored,in,the,given,context,and,returns,the,start,offset,of,the,rest,of,the,structure,i,e,the,offset,to,the,field,which,is,followed,by,and,then,the,name,value,pairs,param,context,information,about,the,class,being,parsed,this,is,where,the,extracted,and,must,be,stored,param,u,the,start,offset,of,a,structure,return,the,start,offset,of,the,rest,of,the,structure;private,int,read,annotation,target,final,context,context,int,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,target,0x,ffff0000,u,2,break,case,0x13,case,0x14,case,0x15,target,0x,ff000000,u,1,break,case,0x40,case,0x41,target,0x,ff000000,int,n,read,unsigned,short,u,1,context,start,new,label,n,context,end,new,label,n,context,index,new,int,n,u,3,for,int,i,0,i,n,i,int,start,read,unsigned,short,u,int,length,read,unsigned,short,u,2,context,start,i,read,label,start,context,labels,context,end,i,read,label,start,length,context,labels,context,index,i,read,unsigned,short,u,4,u,6,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,target,0x,ff0000ff,u,4,break,default,target,target,24,0x43,0x,ffffff00,0x,ff000000,u,3,break,int,path,length,read,byte,u,context,type,ref,target,context,type,path,path,length,0,null,new,type,path,b,u,return,u,1,2,path,length
ClassReader -> public String getClassName();1366718246;Returns the internal name of the class (see_{@link Type#getInternalName() getInternalName}).__@return the internal class name__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_        return readClass(header + 2, new char[maxStringLength])__    };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1395273982;Returns the internal name of the class (see_{@link Type#getInternalName() getInternalName}).__@return the internal class name__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_        return readClass(header + 2, new char[maxStringLength])__    };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1414067099;Returns the internal name of the class (see_{@link Type#getInternalName() getInternalName}).__@return the internal class name__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_        return readClass(header + 2, new char[maxStringLength])__    };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1414499035;Returns the internal name of the class (see_{@link Type#getInternalName() getInternalName}).__@return the internal class name__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_        return readClass(header + 2, new char[maxStringLength])__    };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1416998550;Returns the internal name of the class (see_{@link Type#getInternalName() getInternalName}).__@return the internal class name__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_        return readClass(header + 2, new char[maxStringLength])__    };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1457705343;Returns the internal name of the class (see_{@link Type#getInternalName() getInternalName}).__@return the internal class name__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_        return readClass(header + 2, new char[maxStringLength])__    };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1459258703;Returns the internal name of the class (see_{@link Type#getInternalName() getInternalName}).__@return the internal class name__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_        return readClass(header + 2, new char[maxStringLength])__    };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1478623137;Returns the internal name of the class (see_{@link Type#getInternalName() getInternalName}).__@return the internal class name__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_        return readClass(header + 2, new char[maxStringLength])__    };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1483093254;Returns the internal name of the class (see_{@link Type#getInternalName() getInternalName}).__@return the internal class name__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_        return readClass(header + 2, new char[maxStringLength])__    };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1505821772;Returns the internal name of the class (see_{@link Type#getInternalName() getInternalName}).__@return the internal class name__@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_        return readClass(header + 2, new char[maxStringLength])__    };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1531241461;Returns the internal name of the class (see {@link Type#getInternalName()}).__@return the internal class name._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_    _    return readClass(header + 2, new char[maxStringLength])__  };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1536664245;Returns the internal name of the class (see {@link Type#getInternalName()}).__@return the internal class name._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_    _    return readClass(header + 2, new char[maxStringLength])__  };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1536747989;Returns the internal name of the class (see {@link Type#getInternalName()}).__@return the internal class name._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_    _    return readClass(header + 2, new char[maxStringLength])__  };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1537204147;Returns the internal name of the class (see {@link Type#getInternalName()}).__@return the internal class name._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_    _    return readClass(header + 2, new char[maxStringLength])__  };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1539119582;Returns the internal name of the class (see {@link Type#getInternalName()}).__@return the internal class name._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_    _    return readClass(header + 2, new char[maxStringLength])__  };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> public String getClassName();1541436263;Returns the internal name of the class (see {@link Type#getInternalName()}).__@return the internal class name._@see ClassVisitor#visit(int, int, String, String, String, String[]);public String getClassName() {_    _    return readClass(header + 2, new char[maxStringLength])__  };returns,the,internal,name,of,the,class,see,link,type,get,internal,name,return,the,internal,class,name,see,class,visitor,visit,int,int,string,string,string,string;public,string,get,class,name,return,read,class,header,2,new,char,max,string,length
ClassReader -> private int[] readTypeAnnotations(final MethodVisitor mv,             final Context context, int u, boolean visible);1395273982;Parses a type annotation table to find the labels, and to visit the try_catch block annotations.__@param u_the start offset of a type annotation table._@param mv_the method visitor to be used to visit the try catch block_annotations._@param context_information about the class being parsed._@param visible_if the type annotation table to parse contains runtime visible_annotations._@return the start offset of each type annotation in the parsed table.;private int[] readTypeAnnotations(final MethodVisitor mv,_            final Context context, int u, boolean visible) {_        char[] c = context.buffer__        int[] offsets = new int[readUnsignedShort(u)]__        u += 2__        for (int i = 0_ i < offsets.length_ ++i) {_            offsets[i] = u__            int target = readInt(u)__            switch (target >>> 24) {_            case 0x00: _            case 0x01: _            case 0x16: _                u += 2__                break__            case 0x13: _            case 0x14: _            case 0x15: _                u += 1__                break__            case 0x40: _            case 0x41: _                for (int j = readUnsignedShort(u + 1)_ j > 0_ --j) {_                    int start = readUnsignedShort(u + 3)__                    int length = readUnsignedShort(u + 5)__                    readLabel(start, context.labels)__                    readLabel(start + length, context.labels)__                    u += 6__                }_                u += 3__                break__            case 0x47: _            case 0x48: _            case 0x49: _            case 0x4A: _            case 0x4B: _                u += 4__                break__            _            _            _            _            _            _            _            _            _            default:_                u += 3__                break__            }_            int pathLength = readByte(u)__            if ((target >>> 24) == 0x42) {_                TypePath path = pathLength == 0 ? null : new TypePath(b, u)__                u += 1 + 2 * pathLength__                u = readAnnotationValues(u + 2, c, true,_                        mv.visitTryCatchAnnotation(target, path,_                                readUTF8(u, c), visible))__            } else {_                u = readAnnotationValues(u + 3 + 2 * pathLength, c, true, null)__            }_        }_        return offsets__    };parses,a,type,annotation,table,to,find,the,labels,and,to,visit,the,try,catch,block,annotations,param,u,the,start,offset,of,a,type,annotation,table,param,mv,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,visible,if,the,type,annotation,table,to,parse,contains,runtime,visible,annotations,return,the,start,offset,of,each,type,annotation,in,the,parsed,table;private,int,read,type,annotations,final,method,visitor,mv,final,context,context,int,u,boolean,visible,char,c,context,buffer,int,offsets,new,int,read,unsigned,short,u,u,2,for,int,i,0,i,offsets,length,i,offsets,i,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,u,2,break,case,0x13,case,0x14,case,0x15,u,1,break,case,0x40,case,0x41,for,int,j,read,unsigned,short,u,1,j,0,j,int,start,read,unsigned,short,u,3,int,length,read,unsigned,short,u,5,read,label,start,context,labels,read,label,start,length,context,labels,u,6,u,3,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,u,4,break,default,u,3,break,int,path,length,read,byte,u,if,target,24,0x42,type,path,path,path,length,0,null,new,type,path,b,u,u,1,2,path,length,u,read,annotation,values,u,2,c,true,mv,visit,try,catch,annotation,target,path,read,utf8,u,c,visible,else,u,read,annotation,values,u,3,2,path,length,c,true,null,return,offsets
ClassReader -> private int[] readTypeAnnotations(final MethodVisitor mv,             final Context context, int u, boolean visible);1414067099;Parses a type annotation table to find the labels, and to visit the try_catch block annotations.__@param u_the start offset of a type annotation table._@param mv_the method visitor to be used to visit the try catch block_annotations._@param context_information about the class being parsed._@param visible_if the type annotation table to parse contains runtime visible_annotations._@return the start offset of each type annotation in the parsed table.;private int[] readTypeAnnotations(final MethodVisitor mv,_            final Context context, int u, boolean visible) {_        char[] c = context.buffer__        int[] offsets = new int[readUnsignedShort(u)]__        u += 2__        for (int i = 0_ i < offsets.length_ ++i) {_            offsets[i] = u__            int target = readInt(u)__            switch (target >>> 24) {_            case 0x00: _            case 0x01: _            case 0x16: _                u += 2__                break__            case 0x13: _            case 0x14: _            case 0x15: _                u += 1__                break__            case 0x40: _            case 0x41: _                for (int j = readUnsignedShort(u + 1)_ j > 0_ --j) {_                    int start = readUnsignedShort(u + 3)__                    int length = readUnsignedShort(u + 5)__                    readLabel(start, context.labels)__                    readLabel(start + length, context.labels)__                    u += 6__                }_                u += 3__                break__            case 0x47: _            case 0x48: _            case 0x49: _            case 0x4A: _            case 0x4B: _                u += 4__                break__            _            _            _            _            _            _            _            _            _            default:_                u += 3__                break__            }_            int pathLength = readByte(u)__            if ((target >>> 24) == 0x42) {_                TypePath path = pathLength == 0 ? null : new TypePath(b, u)__                u += 1 + 2 * pathLength__                u = readAnnotationValues(u + 2, c, true,_                        mv.visitTryCatchAnnotation(target, path,_                                readUTF8(u, c), visible))__            } else {_                u = readAnnotationValues(u + 3 + 2 * pathLength, c, true, null)__            }_        }_        return offsets__    };parses,a,type,annotation,table,to,find,the,labels,and,to,visit,the,try,catch,block,annotations,param,u,the,start,offset,of,a,type,annotation,table,param,mv,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,visible,if,the,type,annotation,table,to,parse,contains,runtime,visible,annotations,return,the,start,offset,of,each,type,annotation,in,the,parsed,table;private,int,read,type,annotations,final,method,visitor,mv,final,context,context,int,u,boolean,visible,char,c,context,buffer,int,offsets,new,int,read,unsigned,short,u,u,2,for,int,i,0,i,offsets,length,i,offsets,i,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,u,2,break,case,0x13,case,0x14,case,0x15,u,1,break,case,0x40,case,0x41,for,int,j,read,unsigned,short,u,1,j,0,j,int,start,read,unsigned,short,u,3,int,length,read,unsigned,short,u,5,read,label,start,context,labels,read,label,start,length,context,labels,u,6,u,3,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,u,4,break,default,u,3,break,int,path,length,read,byte,u,if,target,24,0x42,type,path,path,path,length,0,null,new,type,path,b,u,u,1,2,path,length,u,read,annotation,values,u,2,c,true,mv,visit,try,catch,annotation,target,path,read,utf8,u,c,visible,else,u,read,annotation,values,u,3,2,path,length,c,true,null,return,offsets
ClassReader -> private int[] readTypeAnnotations(final MethodVisitor mv,             final Context context, int u, boolean visible);1414499035;Parses a type annotation table to find the labels, and to visit the try_catch block annotations.__@param u_the start offset of a type annotation table._@param mv_the method visitor to be used to visit the try catch block_annotations._@param context_information about the class being parsed._@param visible_if the type annotation table to parse contains runtime visible_annotations._@return the start offset of each type annotation in the parsed table.;private int[] readTypeAnnotations(final MethodVisitor mv,_            final Context context, int u, boolean visible) {_        char[] c = context.buffer__        int[] offsets = new int[readUnsignedShort(u)]__        u += 2__        for (int i = 0_ i < offsets.length_ ++i) {_            offsets[i] = u__            int target = readInt(u)__            switch (target >>> 24) {_            case 0x00: _            case 0x01: _            case 0x16: _                u += 2__                break__            case 0x13: _            case 0x14: _            case 0x15: _                u += 1__                break__            case 0x40: _            case 0x41: _                for (int j = readUnsignedShort(u + 1)_ j > 0_ --j) {_                    int start = readUnsignedShort(u + 3)__                    int length = readUnsignedShort(u + 5)__                    readLabel(start, context.labels)__                    readLabel(start + length, context.labels)__                    u += 6__                }_                u += 3__                break__            case 0x47: _            case 0x48: _            case 0x49: _            case 0x4A: _            case 0x4B: _                u += 4__                break__            _            _            _            _            _            _            _            _            _            default:_                u += 3__                break__            }_            int pathLength = readByte(u)__            if ((target >>> 24) == 0x42) {_                TypePath path = pathLength == 0 ? null : new TypePath(b, u)__                u += 1 + 2 * pathLength__                u = readAnnotationValues(u + 2, c, true,_                        mv.visitTryCatchAnnotation(target, path,_                                readUTF8(u, c), visible))__            } else {_                u = readAnnotationValues(u + 3 + 2 * pathLength, c, true, null)__            }_        }_        return offsets__    };parses,a,type,annotation,table,to,find,the,labels,and,to,visit,the,try,catch,block,annotations,param,u,the,start,offset,of,a,type,annotation,table,param,mv,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,visible,if,the,type,annotation,table,to,parse,contains,runtime,visible,annotations,return,the,start,offset,of,each,type,annotation,in,the,parsed,table;private,int,read,type,annotations,final,method,visitor,mv,final,context,context,int,u,boolean,visible,char,c,context,buffer,int,offsets,new,int,read,unsigned,short,u,u,2,for,int,i,0,i,offsets,length,i,offsets,i,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,u,2,break,case,0x13,case,0x14,case,0x15,u,1,break,case,0x40,case,0x41,for,int,j,read,unsigned,short,u,1,j,0,j,int,start,read,unsigned,short,u,3,int,length,read,unsigned,short,u,5,read,label,start,context,labels,read,label,start,length,context,labels,u,6,u,3,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,u,4,break,default,u,3,break,int,path,length,read,byte,u,if,target,24,0x42,type,path,path,path,length,0,null,new,type,path,b,u,u,1,2,path,length,u,read,annotation,values,u,2,c,true,mv,visit,try,catch,annotation,target,path,read,utf8,u,c,visible,else,u,read,annotation,values,u,3,2,path,length,c,true,null,return,offsets
ClassReader -> private int[] readTypeAnnotations(final MethodVisitor mv,             final Context context, int u, boolean visible);1416998550;Parses a type annotation table to find the labels, and to visit the try_catch block annotations.__@param u_the start offset of a type annotation table._@param mv_the method visitor to be used to visit the try catch block_annotations._@param context_information about the class being parsed._@param visible_if the type annotation table to parse contains runtime visible_annotations._@return the start offset of each type annotation in the parsed table.;private int[] readTypeAnnotations(final MethodVisitor mv,_            final Context context, int u, boolean visible) {_        char[] c = context.buffer__        int[] offsets = new int[readUnsignedShort(u)]__        u += 2__        for (int i = 0_ i < offsets.length_ ++i) {_            offsets[i] = u__            int target = readInt(u)__            switch (target >>> 24) {_            case 0x00: _            case 0x01: _            case 0x16: _                u += 2__                break__            case 0x13: _            case 0x14: _            case 0x15: _                u += 1__                break__            case 0x40: _            case 0x41: _                for (int j = readUnsignedShort(u + 1)_ j > 0_ --j) {_                    int start = readUnsignedShort(u + 3)__                    int length = readUnsignedShort(u + 5)__                    readLabel(start, context.labels)__                    readLabel(start + length, context.labels)__                    u += 6__                }_                u += 3__                break__            case 0x47: _            case 0x48: _            case 0x49: _            case 0x4A: _            case 0x4B: _                u += 4__                break__            _            _            _            _            _            _            _            _            _            default:_                u += 3__                break__            }_            int pathLength = readByte(u)__            if ((target >>> 24) == 0x42) {_                TypePath path = pathLength == 0 ? null : new TypePath(b, u)__                u += 1 + 2 * pathLength__                u = readAnnotationValues(u + 2, c, true,_                        mv.visitTryCatchAnnotation(target, path,_                                readUTF8(u, c), visible))__            } else {_                u = readAnnotationValues(u + 3 + 2 * pathLength, c, true, null)__            }_        }_        return offsets__    };parses,a,type,annotation,table,to,find,the,labels,and,to,visit,the,try,catch,block,annotations,param,u,the,start,offset,of,a,type,annotation,table,param,mv,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,visible,if,the,type,annotation,table,to,parse,contains,runtime,visible,annotations,return,the,start,offset,of,each,type,annotation,in,the,parsed,table;private,int,read,type,annotations,final,method,visitor,mv,final,context,context,int,u,boolean,visible,char,c,context,buffer,int,offsets,new,int,read,unsigned,short,u,u,2,for,int,i,0,i,offsets,length,i,offsets,i,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,u,2,break,case,0x13,case,0x14,case,0x15,u,1,break,case,0x40,case,0x41,for,int,j,read,unsigned,short,u,1,j,0,j,int,start,read,unsigned,short,u,3,int,length,read,unsigned,short,u,5,read,label,start,context,labels,read,label,start,length,context,labels,u,6,u,3,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,u,4,break,default,u,3,break,int,path,length,read,byte,u,if,target,24,0x42,type,path,path,path,length,0,null,new,type,path,b,u,u,1,2,path,length,u,read,annotation,values,u,2,c,true,mv,visit,try,catch,annotation,target,path,read,utf8,u,c,visible,else,u,read,annotation,values,u,3,2,path,length,c,true,null,return,offsets
ClassReader -> private int[] readTypeAnnotations(final MethodVisitor mv,             final Context context, int u, boolean visible);1457705343;Parses a type annotation table to find the labels, and to visit the try_catch block annotations.__@param u_the start offset of a type annotation table._@param mv_the method visitor to be used to visit the try catch block_annotations._@param context_information about the class being parsed._@param visible_if the type annotation table to parse contains runtime visible_annotations._@return the start offset of each type annotation in the parsed table.;private int[] readTypeAnnotations(final MethodVisitor mv,_            final Context context, int u, boolean visible) {_        char[] c = context.buffer__        int[] offsets = new int[readUnsignedShort(u)]__        u += 2__        for (int i = 0_ i < offsets.length_ ++i) {_            offsets[i] = u__            int target = readInt(u)__            switch (target >>> 24) {_            case 0x00: _            case 0x01: _            case 0x16: _                u += 2__                break__            case 0x13: _            case 0x14: _            case 0x15: _                u += 1__                break__            case 0x40: _            case 0x41: _                for (int j = readUnsignedShort(u + 1)_ j > 0_ --j) {_                    int start = readUnsignedShort(u + 3)__                    int length = readUnsignedShort(u + 5)__                    readLabel(start, context.labels)__                    readLabel(start + length, context.labels)__                    u += 6__                }_                u += 3__                break__            case 0x47: _            case 0x48: _            case 0x49: _            case 0x4A: _            case 0x4B: _                u += 4__                break__            _            _            _            _            _            _            _            _            _            default:_                u += 3__                break__            }_            int pathLength = readByte(u)__            if ((target >>> 24) == 0x42) {_                TypePath path = pathLength == 0 ? null : new TypePath(b, u)__                u += 1 + 2 * pathLength__                u = readAnnotationValues(u + 2, c, true,_                        mv.visitTryCatchAnnotation(target, path,_                                readUTF8(u, c), visible))__            } else {_                u = readAnnotationValues(u + 3 + 2 * pathLength, c, true, null)__            }_        }_        return offsets__    };parses,a,type,annotation,table,to,find,the,labels,and,to,visit,the,try,catch,block,annotations,param,u,the,start,offset,of,a,type,annotation,table,param,mv,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,visible,if,the,type,annotation,table,to,parse,contains,runtime,visible,annotations,return,the,start,offset,of,each,type,annotation,in,the,parsed,table;private,int,read,type,annotations,final,method,visitor,mv,final,context,context,int,u,boolean,visible,char,c,context,buffer,int,offsets,new,int,read,unsigned,short,u,u,2,for,int,i,0,i,offsets,length,i,offsets,i,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,u,2,break,case,0x13,case,0x14,case,0x15,u,1,break,case,0x40,case,0x41,for,int,j,read,unsigned,short,u,1,j,0,j,int,start,read,unsigned,short,u,3,int,length,read,unsigned,short,u,5,read,label,start,context,labels,read,label,start,length,context,labels,u,6,u,3,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,u,4,break,default,u,3,break,int,path,length,read,byte,u,if,target,24,0x42,type,path,path,path,length,0,null,new,type,path,b,u,u,1,2,path,length,u,read,annotation,values,u,2,c,true,mv,visit,try,catch,annotation,target,path,read,utf8,u,c,visible,else,u,read,annotation,values,u,3,2,path,length,c,true,null,return,offsets
ClassReader -> private int[] readTypeAnnotations(final MethodVisitor mv,             final Context context, int u, boolean visible);1459258703;Parses a type annotation table to find the labels, and to visit the try_catch block annotations.__@param u_the start offset of a type annotation table._@param mv_the method visitor to be used to visit the try catch block_annotations._@param context_information about the class being parsed._@param visible_if the type annotation table to parse contains runtime visible_annotations._@return the start offset of each type annotation in the parsed table.;private int[] readTypeAnnotations(final MethodVisitor mv,_            final Context context, int u, boolean visible) {_        char[] c = context.buffer__        int[] offsets = new int[readUnsignedShort(u)]__        u += 2__        for (int i = 0_ i < offsets.length_ ++i) {_            offsets[i] = u__            int target = readInt(u)__            switch (target >>> 24) {_            case 0x00: _            case 0x01: _            case 0x16: _                u += 2__                break__            case 0x13: _            case 0x14: _            case 0x15: _                u += 1__                break__            case 0x40: _            case 0x41: _                for (int j = readUnsignedShort(u + 1)_ j > 0_ --j) {_                    int start = readUnsignedShort(u + 3)__                    int length = readUnsignedShort(u + 5)__                    readLabel(start, context.labels)__                    readLabel(start + length, context.labels)__                    u += 6__                }_                u += 3__                break__            case 0x47: _            case 0x48: _            case 0x49: _            case 0x4A: _            case 0x4B: _                u += 4__                break__            _            _            _            _            _            _            _            _            _            default:_                u += 3__                break__            }_            int pathLength = readByte(u)__            if ((target >>> 24) == 0x42) {_                TypePath path = pathLength == 0 ? null : new TypePath(b, u)__                u += 1 + 2 * pathLength__                u = readAnnotationValues(u + 2, c, true,_                        mv.visitTryCatchAnnotation(target, path,_                                readUTF8(u, c), visible))__            } else {_                u = readAnnotationValues(u + 3 + 2 * pathLength, c, true, null)__            }_        }_        return offsets__    };parses,a,type,annotation,table,to,find,the,labels,and,to,visit,the,try,catch,block,annotations,param,u,the,start,offset,of,a,type,annotation,table,param,mv,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,visible,if,the,type,annotation,table,to,parse,contains,runtime,visible,annotations,return,the,start,offset,of,each,type,annotation,in,the,parsed,table;private,int,read,type,annotations,final,method,visitor,mv,final,context,context,int,u,boolean,visible,char,c,context,buffer,int,offsets,new,int,read,unsigned,short,u,u,2,for,int,i,0,i,offsets,length,i,offsets,i,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,u,2,break,case,0x13,case,0x14,case,0x15,u,1,break,case,0x40,case,0x41,for,int,j,read,unsigned,short,u,1,j,0,j,int,start,read,unsigned,short,u,3,int,length,read,unsigned,short,u,5,read,label,start,context,labels,read,label,start,length,context,labels,u,6,u,3,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,u,4,break,default,u,3,break,int,path,length,read,byte,u,if,target,24,0x42,type,path,path,path,length,0,null,new,type,path,b,u,u,1,2,path,length,u,read,annotation,values,u,2,c,true,mv,visit,try,catch,annotation,target,path,read,utf8,u,c,visible,else,u,read,annotation,values,u,3,2,path,length,c,true,null,return,offsets
ClassReader -> private int[] readTypeAnnotations(final MethodVisitor mv,             final Context context, int u, boolean visible);1478623137;Parses a type annotation table to find the labels, and to visit the try_catch block annotations.__@param u_the start offset of a type annotation table._@param mv_the method visitor to be used to visit the try catch block_annotations._@param context_information about the class being parsed._@param visible_if the type annotation table to parse contains runtime visible_annotations._@return the start offset of each type annotation in the parsed table.;private int[] readTypeAnnotations(final MethodVisitor mv,_            final Context context, int u, boolean visible) {_        char[] c = context.buffer__        int[] offsets = new int[readUnsignedShort(u)]__        u += 2__        for (int i = 0_ i < offsets.length_ ++i) {_            offsets[i] = u__            int target = readInt(u)__            switch (target >>> 24) {_            case 0x00: _            case 0x01: _            case 0x16: _                u += 2__                break__            case 0x13: _            case 0x14: _            case 0x15: _                u += 1__                break__            case 0x40: _            case 0x41: _                for (int j = readUnsignedShort(u + 1)_ j > 0_ --j) {_                    int start = readUnsignedShort(u + 3)__                    int length = readUnsignedShort(u + 5)__                    readLabel(start, context.labels)__                    readLabel(start + length, context.labels)__                    u += 6__                }_                u += 3__                break__            case 0x47: _            case 0x48: _            case 0x49: _            case 0x4A: _            case 0x4B: _                u += 4__                break__            _            _            _            _            _            _            _            _            _            default:_                u += 3__                break__            }_            int pathLength = readByte(u)__            if ((target >>> 24) == 0x42) {_                TypePath path = pathLength == 0 ? null : new TypePath(b, u)__                u += 1 + 2 * pathLength__                u = readAnnotationValues(u + 2, c, true,_                        mv.visitTryCatchAnnotation(target, path,_                                readUTF8(u, c), visible))__            } else {_                u = readAnnotationValues(u + 3 + 2 * pathLength, c, true, null)__            }_        }_        return offsets__    };parses,a,type,annotation,table,to,find,the,labels,and,to,visit,the,try,catch,block,annotations,param,u,the,start,offset,of,a,type,annotation,table,param,mv,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,visible,if,the,type,annotation,table,to,parse,contains,runtime,visible,annotations,return,the,start,offset,of,each,type,annotation,in,the,parsed,table;private,int,read,type,annotations,final,method,visitor,mv,final,context,context,int,u,boolean,visible,char,c,context,buffer,int,offsets,new,int,read,unsigned,short,u,u,2,for,int,i,0,i,offsets,length,i,offsets,i,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,u,2,break,case,0x13,case,0x14,case,0x15,u,1,break,case,0x40,case,0x41,for,int,j,read,unsigned,short,u,1,j,0,j,int,start,read,unsigned,short,u,3,int,length,read,unsigned,short,u,5,read,label,start,context,labels,read,label,start,length,context,labels,u,6,u,3,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,u,4,break,default,u,3,break,int,path,length,read,byte,u,if,target,24,0x42,type,path,path,path,length,0,null,new,type,path,b,u,u,1,2,path,length,u,read,annotation,values,u,2,c,true,mv,visit,try,catch,annotation,target,path,read,utf8,u,c,visible,else,u,read,annotation,values,u,3,2,path,length,c,true,null,return,offsets
ClassReader -> private int[] readTypeAnnotations(final MethodVisitor mv,             final Context context, int u, boolean visible);1483093254;Parses a type annotation table to find the labels, and to visit the try_catch block annotations.__@param u_the start offset of a type annotation table._@param mv_the method visitor to be used to visit the try catch block_annotations._@param context_information about the class being parsed._@param visible_if the type annotation table to parse contains runtime visible_annotations._@return the start offset of each type annotation in the parsed table.;private int[] readTypeAnnotations(final MethodVisitor mv,_            final Context context, int u, boolean visible) {_        char[] c = context.buffer__        int[] offsets = new int[readUnsignedShort(u)]__        u += 2__        for (int i = 0_ i < offsets.length_ ++i) {_            offsets[i] = u__            int target = readInt(u)__            switch (target >>> 24) {_            case 0x00: _            case 0x01: _            case 0x16: _                u += 2__                break__            case 0x13: _            case 0x14: _            case 0x15: _                u += 1__                break__            case 0x40: _            case 0x41: _                for (int j = readUnsignedShort(u + 1)_ j > 0_ --j) {_                    int start = readUnsignedShort(u + 3)__                    int length = readUnsignedShort(u + 5)__                    readLabel(start, context.labels)__                    readLabel(start + length, context.labels)__                    u += 6__                }_                u += 3__                break__            case 0x47: _            case 0x48: _            case 0x49: _            case 0x4A: _            case 0x4B: _                u += 4__                break__            _            _            _            _            _            _            _            _            _            default:_                u += 3__                break__            }_            int pathLength = readByte(u)__            if ((target >>> 24) == 0x42) {_                TypePath path = pathLength == 0 ? null : new TypePath(b, u)__                u += 1 + 2 * pathLength__                u = readAnnotationValues(u + 2, c, true,_                        mv.visitTryCatchAnnotation(target, path,_                                readUTF8(u, c), visible))__            } else {_                u = readAnnotationValues(u + 3 + 2 * pathLength, c, true, null)__            }_        }_        return offsets__    };parses,a,type,annotation,table,to,find,the,labels,and,to,visit,the,try,catch,block,annotations,param,u,the,start,offset,of,a,type,annotation,table,param,mv,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,visible,if,the,type,annotation,table,to,parse,contains,runtime,visible,annotations,return,the,start,offset,of,each,type,annotation,in,the,parsed,table;private,int,read,type,annotations,final,method,visitor,mv,final,context,context,int,u,boolean,visible,char,c,context,buffer,int,offsets,new,int,read,unsigned,short,u,u,2,for,int,i,0,i,offsets,length,i,offsets,i,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,u,2,break,case,0x13,case,0x14,case,0x15,u,1,break,case,0x40,case,0x41,for,int,j,read,unsigned,short,u,1,j,0,j,int,start,read,unsigned,short,u,3,int,length,read,unsigned,short,u,5,read,label,start,context,labels,read,label,start,length,context,labels,u,6,u,3,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,u,4,break,default,u,3,break,int,path,length,read,byte,u,if,target,24,0x42,type,path,path,path,length,0,null,new,type,path,b,u,u,1,2,path,length,u,read,annotation,values,u,2,c,true,mv,visit,try,catch,annotation,target,path,read,utf8,u,c,visible,else,u,read,annotation,values,u,3,2,path,length,c,true,null,return,offsets
ClassReader -> private int[] readTypeAnnotations(final MethodVisitor mv,             final Context context, int u, boolean visible);1505821772;Parses a type annotation table to find the labels, and to visit the try_catch block annotations.__@param u_the start offset of a type annotation table._@param mv_the method visitor to be used to visit the try catch block_annotations._@param context_information about the class being parsed._@param visible_if the type annotation table to parse contains runtime visible_annotations._@return the start offset of each type annotation in the parsed table.;private int[] readTypeAnnotations(final MethodVisitor mv,_            final Context context, int u, boolean visible) {_        char[] c = context.buffer__        int[] offsets = new int[readUnsignedShort(u)]__        u += 2__        for (int i = 0_ i < offsets.length_ ++i) {_            offsets[i] = u__            int target = readInt(u)__            switch (target >>> 24) {_            case 0x00: _            case 0x01: _            case 0x16: _                u += 2__                break__            case 0x13: _            case 0x14: _            case 0x15: _                u += 1__                break__            case 0x40: _            case 0x41: _                for (int j = readUnsignedShort(u + 1)_ j > 0_ --j) {_                    int start = readUnsignedShort(u + 3)__                    int length = readUnsignedShort(u + 5)__                    readLabel(start, context.labels)__                    readLabel(start + length, context.labels)__                    u += 6__                }_                u += 3__                break__            case 0x47: _            case 0x48: _            case 0x49: _            case 0x4A: _            case 0x4B: _                u += 4__                break__            _            _            _            _            _            _            _            _            _            default:_                u += 3__                break__            }_            int pathLength = readByte(u)__            if ((target >>> 24) == 0x42) {_                TypePath path = pathLength == 0 ? null : new TypePath(b, u)__                u += 1 + 2 * pathLength__                u = readAnnotationValues(u + 2, c, true,_                        mv.visitTryCatchAnnotation(target, path,_                                readUTF8(u, c), visible))__            } else {_                u = readAnnotationValues(u + 3 + 2 * pathLength, c, true, null)__            }_        }_        return offsets__    };parses,a,type,annotation,table,to,find,the,labels,and,to,visit,the,try,catch,block,annotations,param,u,the,start,offset,of,a,type,annotation,table,param,mv,the,method,visitor,to,be,used,to,visit,the,try,catch,block,annotations,param,context,information,about,the,class,being,parsed,param,visible,if,the,type,annotation,table,to,parse,contains,runtime,visible,annotations,return,the,start,offset,of,each,type,annotation,in,the,parsed,table;private,int,read,type,annotations,final,method,visitor,mv,final,context,context,int,u,boolean,visible,char,c,context,buffer,int,offsets,new,int,read,unsigned,short,u,u,2,for,int,i,0,i,offsets,length,i,offsets,i,u,int,target,read,int,u,switch,target,24,case,0x00,case,0x01,case,0x16,u,2,break,case,0x13,case,0x14,case,0x15,u,1,break,case,0x40,case,0x41,for,int,j,read,unsigned,short,u,1,j,0,j,int,start,read,unsigned,short,u,3,int,length,read,unsigned,short,u,5,read,label,start,context,labels,read,label,start,length,context,labels,u,6,u,3,break,case,0x47,case,0x48,case,0x49,case,0x4a,case,0x4b,u,4,break,default,u,3,break,int,path,length,read,byte,u,if,target,24,0x42,type,path,path,path,length,0,null,new,type,path,b,u,u,1,2,path,length,u,read,annotation,values,u,2,c,true,mv,visit,try,catch,annotation,target,path,read,utf8,u,c,visible,else,u,read,annotation,values,u,3,2,path,length,c,true,null,return,offsets
ClassReader -> private void readCode(       final MethodVisitor methodVisitor, final Context context, final int codeOffset);1531241461;Reads a JVMS 'Code' attribute and makes the given visitor visit it.__@param methodVisitor the visitor that must visit the Code attribute._@param context information about the class being parsed._@param codeOffset the start offset in {@link #b} of the Code attribute, excluding its_attribute_name_index and attribute_length fields.;private void readCode(_      final MethodVisitor methodVisitor, final Context context, final int codeOffset) {_    int currentOffset = codeOffset___    _    final byte[] classFileBuffer = b__    final char[] charBuffer = context.charBuffer__    final int maxStack = readUnsignedShort(currentOffset)__    final int maxLocals = readUnsignedShort(currentOffset + 2)__    final int codeLength = readInt(currentOffset + 4)__    currentOffset += 8___    _    final int bytecodeStartOffset = currentOffset__    final int bytecodeEndOffset = currentOffset + codeLength__    final Label[] labels = context.currentMethodLabels = new Label[codeLength + 1]__    while (currentOffset < bytecodeEndOffset) {_      final int bytecodeOffset = currentOffset - bytecodeStartOffset__      final int opcode = classFileBuffer[currentOffset] & 0xFF__      switch (opcode) {_        case Constants.NOP:_        case Constants.ACONST_NULL:_        case Constants.ICONST_M1:_        case Constants.ICONST_0:_        case Constants.ICONST_1:_        case Constants.ICONST_2:_        case Constants.ICONST_3:_        case Constants.ICONST_4:_        case Constants.ICONST_5:_        case Constants.LCONST_0:_        case Constants.LCONST_1:_        case Constants.FCONST_0:_        case Constants.FCONST_1:_        case Constants.FCONST_2:_        case Constants.DCONST_0:_        case Constants.DCONST_1:_        case Constants.IALOAD:_        case Constants.LALOAD:_        case Constants.FALOAD:_        case Constants.DALOAD:_        case Constants.AALOAD:_        case Constants.BALOAD:_        case Constants.CALOAD:_        case Constants.SALOAD:_        case Constants.IASTORE:_        case Constants.LASTORE:_        case Constants.FASTORE:_        case Constants.DASTORE:_        case Constants.AASTORE:_        case Constants.BASTORE:_        case Constants.CASTORE:_        case Constants.SASTORE:_        case Constants.POP:_        case Constants.POP2:_        case Constants.DUP:_        case Constants.DUP_X1:_        case Constants.DUP_X2:_        case Constants.DUP2:_        case Constants.DUP2_X1:_        case Constants.DUP2_X2:_        case Constants.SWAP:_        case Constants.IADD:_        case Constants.LADD:_        case Constants.FADD:_        case Constants.DADD:_        case Constants.ISUB:_        case Constants.LSUB:_        case Constants.FSUB:_        case Constants.DSUB:_        case Constants.IMUL:_        case Constants.LMUL:_        case Constants.FMUL:_        case Constants.DMUL:_        case Constants.IDIV:_        case Constants.LDIV:_        case Constants.FDIV:_        case Constants.DDIV:_        case Constants.IREM:_        case Constants.LREM:_        case Constants.FREM:_        case Constants.DREM:_        case Constants.INEG:_        case Constants.LNEG:_        case Constants.FNEG:_        case Constants.DNEG:_        case Constants.ISHL:_        case Constants.LSHL:_        case Constants.ISHR:_        case Constants.LSHR:_        case Constants.IUSHR:_        case Constants.LUSHR:_        case Constants.IAND:_        case Constants.LAND:_        case Constants.IOR:_        case Constants.LOR:_        case Constants.IXOR:_        case Constants.LXOR:_        case Constants.I2L:_        case Constants.I2F:_        case Constants.I2D:_        case Constants.L2I:_        case Constants.L2F:_        case Constants.L2D:_        case Constants.F2I:_        case Constants.F2L:_        case Constants.F2D:_        case Constants.D2I:_        case Constants.D2L:_        case Constants.D2F:_        case Constants.I2B:_        case Constants.I2C:_        case Constants.I2S:_        case Constants.LCMP:_        case Constants.FCMPL:_        case Constants.FCMPG:_        case Constants.DCMPL:_        case Constants.DCMPG:_        case Constants.IRETURN:_        case Constants.LRETURN:_        case Constants.FRETURN:_        case Constants.DRETURN:_        case Constants.ARETURN:_        case Constants.RETURN:_        case Constants.ARRAYLENGTH:_        case Constants.ATHROW:_        case Constants.MONITORENTER:_        case Constants.MONITOREXIT:_        case Constants.ILOAD_0:_        case Constants.ILOAD_1:_        case Constants.ILOAD_2:_        case Constants.ILOAD_3:_        case Constants.LLOAD_0:_        case Constants.LLOAD_1:_        case Constants.LLOAD_2:_        case Constants.LLOAD_3:_        case Constants.FLOAD_0:_        case Constants.FLOAD_1:_        case Constants.FLOAD_2:_        case Constants.FLOAD_3:_        case Constants.DLOAD_0:_        case Constants.DLOAD_1:_        case Constants.DLOAD_2:_        case Constants.DLOAD_3:_        case Constants.ALOAD_0:_        case Constants.ALOAD_1:_        case Constants.ALOAD_2:_        case Constants.ALOAD_3:_        case Constants.ISTORE_0:_        case Constants.ISTORE_1:_        case Constants.ISTORE_2:_        case Constants.ISTORE_3:_        case Constants.LSTORE_0:_        case Constants.LSTORE_1:_        case Constants.LSTORE_2:_        case Constants.LSTORE_3:_        case Constants.FSTORE_0:_        case Constants.FSTORE_1:_        case Constants.FSTORE_2:_        case Constants.FSTORE_3:_        case Constants.DSTORE_0:_        case Constants.DSTORE_1:_        case Constants.DSTORE_2:_        case Constants.DSTORE_3:_        case Constants.ASTORE_0:_        case Constants.ASTORE_1:_        case Constants.ASTORE_2:_        case Constants.ASTORE_3:_          currentOffset += 1__          break__        case Constants.IFEQ:_        case Constants.IFNE:_        case Constants.IFLT:_        case Constants.IFGE:_        case Constants.IFGT:_        case Constants.IFLE:_        case Constants.IF_ICMPEQ:_        case Constants.IF_ICMPNE:_        case Constants.IF_ICMPLT:_        case Constants.IF_ICMPGE:_        case Constants.IF_ICMPGT:_        case Constants.IF_ICMPLE:_        case Constants.IF_ACMPEQ:_        case Constants.IF_ACMPNE:_        case Constants.GOTO:_        case Constants.JSR:_        case Constants.IFNULL:_        case Constants.IFNONNULL:_          createLabel(bytecodeOffset + readShort(currentOffset + 1), labels)__          currentOffset += 3__          break__        case Constants.ASM_IFEQ:_        case Constants.ASM_IFNE:_        case Constants.ASM_IFLT:_        case Constants.ASM_IFGE:_        case Constants.ASM_IFGT:_        case Constants.ASM_IFLE:_        case Constants.ASM_IF_ICMPEQ:_        case Constants.ASM_IF_ICMPNE:_        case Constants.ASM_IF_ICMPLT:_        case Constants.ASM_IF_ICMPGE:_        case Constants.ASM_IF_ICMPGT:_        case Constants.ASM_IF_ICMPLE:_        case Constants.ASM_IF_ACMPEQ:_        case Constants.ASM_IF_ACMPNE:_        case Constants.ASM_GOTO:_        case Constants.ASM_JSR:_        case Constants.ASM_IFNULL:_        case Constants.ASM_IFNONNULL:_          createLabel(bytecodeOffset + readUnsignedShort(currentOffset + 1), labels)__          currentOffset += 3__          break__        case Constants.GOTO_W:_        case Constants.JSR_W:_        case Constants.ASM_GOTO_W:_          createLabel(bytecodeOffset + readInt(currentOffset + 1), labels)__          currentOffset += 5__          break__        case Constants.WIDE:_          switch (classFileBuffer[currentOffset + 1] & 0xFF) {_            case Constants.ILOAD:_            case Constants.FLOAD:_            case Constants.ALOAD:_            case Constants.LLOAD:_            case Constants.DLOAD:_            case Constants.ISTORE:_            case Constants.FSTORE:_            case Constants.ASTORE:_            case Constants.LSTORE:_            case Constants.DSTORE:_            case Constants.RET:_              currentOffset += 4__              break__            case Constants.IINC:_              currentOffset += 6__              break__            default:_              throw new IllegalArgumentException()__          }_          break__        case Constants.TABLESWITCH:_          _          currentOffset += 4 - (bytecodeOffset & 3)__          _          createLabel(bytecodeOffset + readInt(currentOffset), labels)__          int numTableEntries = readInt(currentOffset + 8) - readInt(currentOffset + 4) + 1__          currentOffset += 12__          _          while (numTableEntries-- > 0) {_            createLabel(bytecodeOffset + readInt(currentOffset), labels)__            currentOffset += 4__          }_          break__        case Constants.LOOKUPSWITCH:_          _          currentOffset += 4 - (bytecodeOffset & 3)__          _          createLabel(bytecodeOffset + readInt(currentOffset), labels)__          int numSwitchCases = readInt(currentOffset + 4)__          currentOffset += 8__          _          while (numSwitchCases-- > 0) {_            createLabel(bytecodeOffset + readInt(currentOffset + 4), labels)__            currentOffset += 8__          }_          break__        case Constants.ILOAD:_        case Constants.LLOAD:_        case Constants.FLOAD:_        case Constants.DLOAD:_        case Constants.ALOAD:_        case Constants.ISTORE:_        case Constants.LSTORE:_        case Constants.FSTORE:_        case Constants.DSTORE:_        case Constants.ASTORE:_        case Constants.RET:_        case Constants.BIPUSH:_        case Constants.NEWARRAY:_        case Constants.LDC:_          currentOffset += 2__          break__        case Constants.SIPUSH:_        case Constants.LDC_W:_        case Constants.LDC2_W:_        case Constants.GETSTATIC:_        case Constants.PUTSTATIC:_        case Constants.GETFIELD:_        case Constants.PUTFIELD:_        case Constants.INVOKEVIRTUAL:_        case Constants.INVOKESPECIAL:_        case Constants.INVOKESTATIC:_        case Constants.NEW:_        case Constants.ANEWARRAY:_        case Constants.CHECKCAST:_        case Constants.INSTANCEOF:_        case Constants.IINC:_          currentOffset += 3__          break__        case Constants.INVOKEINTERFACE:_        case Constants.INVOKEDYNAMIC:_          currentOffset += 5__          break__        case Constants.MULTIANEWARRAY:_          currentOffset += 4__          break__        default:_          throw new IllegalArgumentException()__      }_    }__    _    _    {_      int exceptionTableLength = readUnsignedShort(currentOffset)__      currentOffset += 2__      while (exceptionTableLength-- > 0) {_        Label start = createLabel(readUnsignedShort(currentOffset), labels)__        Label end = createLabel(readUnsignedShort(currentOffset + 2), labels)__        Label handler = createLabel(readUnsignedShort(currentOffset + 4), labels)__        String catchType =_            readUTF8(cpInfoOffsets[readUnsignedShort(currentOffset + 6)], charBuffer)__        currentOffset += 8__        methodVisitor.visitTryCatchBlock(start, end, handler, catchType)__      }_    }__    _    _    _    _    _    _    int stackMapFrameOffset = 0__    _    int stackMapTableEndOffset = 0__    _    boolean compressedFrames = true__    _    int localVariableTableOffset = 0__    _    int localVariableTypeTableOffset = 0__    _    _    int[] visibleTypeAnnotationOffsets = null__    _    _    int[] invisibleTypeAnnotationOffsets = null__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      if (Constants.LOCAL_VARIABLE_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_DEBUG) == 0) {_          localVariableTableOffset = currentOffset__          _          int currentLocalVariableTableOffset = currentOffset__          int localVariableTableLength = readUnsignedShort(currentLocalVariableTableOffset)__          currentLocalVariableTableOffset += 2__          while (localVariableTableLength-- > 0) {_            int startPc = readUnsignedShort(currentLocalVariableTableOffset)__            createDebugLabel(startPc, labels)__            int length = readUnsignedShort(currentLocalVariableTableOffset + 2)__            createDebugLabel(startPc + length, labels)__            _            currentLocalVariableTableOffset += 10__          }_        }_      } else if (Constants.LOCAL_VARIABLE_TYPE_TABLE.equals(attributeName)) {_        localVariableTypeTableOffset = currentOffset__        _        _      } else if (Constants.LINE_NUMBER_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_DEBUG) == 0) {_          _          int currentLineNumberTableOffset = currentOffset__          int lineNumberTableLength = readUnsignedShort(currentLineNumberTableOffset)__          currentLineNumberTableOffset += 2__          while (lineNumberTableLength-- > 0) {_            int startPc = readUnsignedShort(currentLineNumberTableOffset)__            int lineNumber = readUnsignedShort(currentLineNumberTableOffset + 2)__            currentLineNumberTableOffset += 4__            createDebugLabel(startPc, labels)__            labels[startPc].addLineNumber(lineNumber)__          }_        }_      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        visibleTypeAnnotationOffsets =_            readTypeAnnotations(methodVisitor, context, currentOffset,  true)__        _        _        _        _        _        _      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        invisibleTypeAnnotationOffsets =_            readTypeAnnotations(methodVisitor, context, currentOffset,  false)__        _      } else if (Constants.STACK_MAP_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_FRAMES) == 0) {_          stackMapFrameOffset = currentOffset + 2__          stackMapTableEndOffset = currentOffset + attributeLength__        }_        _        _        _        _        _        _        _        _        _      } else if ("StackMap".equals(attributeName)) {_        if ((context.parsingOptions & SKIP_FRAMES) == 0) {_          stackMapFrameOffset = currentOffset + 2__          stackMapTableEndOffset = currentOffset + attributeLength__          compressedFrames = false__        }_        _        _        _        _      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                codeOffset,_                labels)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    _    final boolean expandFrames = (context.parsingOptions & EXPAND_FRAMES) != 0__    if (stackMapFrameOffset != 0) {_      _      _      _      context.currentFrameOffset = -1__      context.currentFrameType = 0__      context.currentFrameLocalCount = 0__      context.currentFrameLocalCountDelta = 0__      context.currentFrameLocalTypes = new Object[maxLocals]__      context.currentFrameStackCount = 0__      context.currentFrameStackTypes = new Object[maxStack]__      if (expandFrames) {_        computeImplicitFrame(context)__      }_      _      _      _      _      _      _      _      for (int offset = stackMapFrameOffset_ offset < stackMapTableEndOffset - 2_ ++offset) {_        if (classFileBuffer[offset] == Frame.ITEM_UNINITIALIZED) {_          int potentialBytecodeOffset = readUnsignedShort(offset + 1)__          if (potentialBytecodeOffset >= 0_              && potentialBytecodeOffset < codeLength_              && (classFileBuffer[bytecodeStartOffset + potentialBytecodeOffset] & 0xFF)_                  == Opcodes.NEW) {_            createLabel(potentialBytecodeOffset, labels)__          }_        }_      }_    }_    if (expandFrames && (context.parsingOptions & EXPAND_ASM_INSNS) != 0) {_      _      _      _      _      _      _      methodVisitor.visitFrame(Opcodes.F_NEW, maxLocals, null, 0, null)__    }__    _    __    _    _    int currentVisibleTypeAnnotationIndex = 0__    _    int currentVisibleTypeAnnotationBytecodeOffset =_        getTypeAnnotationBytecodeOffset(visibleTypeAnnotationOffsets, 0)__    _    _    int currentInvisibleTypeAnnotationIndex = 0__    _    int currentInvisibleTypeAnnotationBytecodeOffset =_        getTypeAnnotationBytecodeOffset(invisibleTypeAnnotationOffsets, 0)___    _    boolean insertFrame = false___    _    _    _    final int wideJumpOpcodeDelta =_        (context.parsingOptions & EXPAND_ASM_INSNS) == 0 ? Constants.WIDE_JUMP_OPCODE_DELTA : 0___    currentOffset = bytecodeStartOffset__    while (currentOffset < bytecodeEndOffset) {_      final int currentBytecodeOffset = currentOffset - bytecodeStartOffset___      _      Label currentLabel = labels[currentBytecodeOffset]__      if (currentLabel != null) {_        currentLabel.accept(methodVisitor, (context.parsingOptions & SKIP_DEBUG) == 0)__      }__      _      while (stackMapFrameOffset != 0_          && (context.currentFrameOffset == currentBytecodeOffset_              || context.currentFrameOffset == -1)) {_        _        _        if (context.currentFrameOffset != -1) {_          if (!compressedFrames || expandFrames) {_            methodVisitor.visitFrame(_                Opcodes.F_NEW,_                context.currentFrameLocalCount,_                context.currentFrameLocalTypes,_                context.currentFrameStackCount,_                context.currentFrameStackTypes)__          } else {_            methodVisitor.visitFrame(_                context.currentFrameType,_                context.currentFrameLocalCountDelta,_                context.currentFrameLocalTypes,_                context.currentFrameStackCount,_                context.currentFrameStackTypes)__          }_          _          _          insertFrame = false__        }_        if (stackMapFrameOffset < stackMapTableEndOffset) {_          stackMapFrameOffset =_              readStackMapFrame(stackMapFrameOffset, compressedFrames, expandFrames, context)__        } else {_          stackMapFrameOffset = 0__        }_      }__      _      _      if (insertFrame) {_        if ((context.parsingOptions & EXPAND_FRAMES) != 0) {_          methodVisitor.visitFrame(Constants.F_INSERT, 0, null, 0, null)__        }_        insertFrame = false__      }__      _      int opcode = classFileBuffer[currentOffset] & 0xFF__      switch (opcode) {_        case Constants.NOP:_        case Constants.ACONST_NULL:_        case Constants.ICONST_M1:_        case Constants.ICONST_0:_        case Constants.ICONST_1:_        case Constants.ICONST_2:_        case Constants.ICONST_3:_        case Constants.ICONST_4:_        case Constants.ICONST_5:_        case Constants.LCONST_0:_        case Constants.LCONST_1:_        case Constants.FCONST_0:_        case Constants.FCONST_1:_        case Constants.FCONST_2:_        case Constants.DCONST_0:_        case Constants.DCONST_1:_        case Constants.IALOAD:_        case Constants.LALOAD:_        case Constants.FALOAD:_        case Constants.DALOAD:_        case Constants.AALOAD:_        case Constants.BALOAD:_        case Constants.CALOAD:_        case Constants.SALOAD:_        case Constants.IASTORE:_        case Constants.LASTORE:_        case Constants.FASTORE:_        case Constants.DASTORE:_        case Constants.AASTORE:_        case Constants.BASTORE:_        case Constants.CASTORE:_        case Constants.SASTORE:_        case Constants.POP:_        case Constants.POP2:_        case Constants.DUP:_        case Constants.DUP_X1:_        case Constants.DUP_X2:_        case Constants.DUP2:_        case Constants.DUP2_X1:_        case Constants.DUP2_X2:_        case Constants.SWAP:_        case Constants.IADD:_        case Constants.LADD:_        case Constants.FADD:_        case Constants.DADD:_        case Constants.ISUB:_        case Constants.LSUB:_        case Constants.FSUB:_        case Constants.DSUB:_        case Constants.IMUL:_        case Constants.LMUL:_        case Constants.FMUL:_        case Constants.DMUL:_        case Constants.IDIV:_        case Constants.LDIV:_        case Constants.FDIV:_        case Constants.DDIV:_        case Constants.IREM:_        case Constants.LREM:_        case Constants.FREM:_        case Constants.DREM:_        case Constants.INEG:_        case Constants.LNEG:_        case Constants.FNEG:_        case Constants.DNEG:_        case Constants.ISHL:_        case Constants.LSHL:_        case Constants.ISHR:_        case Constants.LSHR:_        case Constants.IUSHR:_        case Constants.LUSHR:_        case Constants.IAND:_        case Constants.LAND:_        case Constants.IOR:_        case Constants.LOR:_        case Constants.IXOR:_        case Constants.LXOR:_        case Constants.I2L:_        case Constants.I2F:_        case Constants.I2D:_        case Constants.L2I:_        case Constants.L2F:_        case Constants.L2D:_        case Constants.F2I:_        case Constants.F2L:_        case Constants.F2D:_        case Constants.D2I:_        case Constants.D2L:_        case Constants.D2F:_        case Constants.I2B:_        case Constants.I2C:_        case Constants.I2S:_        case Constants.LCMP:_        case Constants.FCMPL:_        case Constants.FCMPG:_        case Constants.DCMPL:_        case Constants.DCMPG:_        case Constants.IRETURN:_        case Constants.LRETURN:_        case Constants.FRETURN:_        case Constants.DRETURN:_        case Constants.ARETURN:_        case Constants.RETURN:_        case Constants.ARRAYLENGTH:_        case Constants.ATHROW:_        case Constants.MONITORENTER:_        case Constants.MONITOREXIT:_          methodVisitor.visitInsn(opcode)__          currentOffset += 1__          break__        case Constants.ILOAD_0:_        case Constants.ILOAD_1:_        case Constants.ILOAD_2:_        case Constants.ILOAD_3:_        case Constants.LLOAD_0:_        case Constants.LLOAD_1:_        case Constants.LLOAD_2:_        case Constants.LLOAD_3:_        case Constants.FLOAD_0:_        case Constants.FLOAD_1:_        case Constants.FLOAD_2:_        case Constants.FLOAD_3:_        case Constants.DLOAD_0:_        case Constants.DLOAD_1:_        case Constants.DLOAD_2:_        case Constants.DLOAD_3:_        case Constants.ALOAD_0:_        case Constants.ALOAD_1:_        case Constants.ALOAD_2:_        case Constants.ALOAD_3:_          opcode -= Constants.ILOAD_0__          methodVisitor.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__          currentOffset += 1__          break__        case Constants.ISTORE_0:_        case Constants.ISTORE_1:_        case Constants.ISTORE_2:_        case Constants.ISTORE_3:_        case Constants.LSTORE_0:_        case Constants.LSTORE_1:_        case Constants.LSTORE_2:_        case Constants.LSTORE_3:_        case Constants.FSTORE_0:_        case Constants.FSTORE_1:_        case Constants.FSTORE_2:_        case Constants.FSTORE_3:_        case Constants.DSTORE_0:_        case Constants.DSTORE_1:_        case Constants.DSTORE_2:_        case Constants.DSTORE_3:_        case Constants.ASTORE_0:_        case Constants.ASTORE_1:_        case Constants.ASTORE_2:_        case Constants.ASTORE_3:_          opcode -= Constants.ISTORE_0__          methodVisitor.visitVarInsn(Opcodes.ISTORE + (opcode >> 2), opcode & 0x3)__          currentOffset += 1__          break__        case Constants.IFEQ:_        case Constants.IFNE:_        case Constants.IFLT:_        case Constants.IFGE:_        case Constants.IFGT:_        case Constants.IFLE:_        case Constants.IF_ICMPEQ:_        case Constants.IF_ICMPNE:_        case Constants.IF_ICMPLT:_        case Constants.IF_ICMPGE:_        case Constants.IF_ICMPGT:_        case Constants.IF_ICMPLE:_        case Constants.IF_ACMPEQ:_        case Constants.IF_ACMPNE:_        case Constants.GOTO:_        case Constants.JSR:_        case Constants.IFNULL:_        case Constants.IFNONNULL:_          methodVisitor.visitJumpInsn(_              opcode, labels[currentBytecodeOffset + readShort(currentOffset + 1)])__          currentOffset += 3__          break__        case Constants.GOTO_W:_        case Constants.JSR_W:_          methodVisitor.visitJumpInsn(_              opcode - wideJumpOpcodeDelta,_              labels[currentBytecodeOffset + readInt(currentOffset + 1)])__          currentOffset += 5__          break__        case Constants.ASM_IFEQ:_        case Constants.ASM_IFNE:_        case Constants.ASM_IFLT:_        case Constants.ASM_IFGE:_        case Constants.ASM_IFGT:_        case Constants.ASM_IFLE:_        case Constants.ASM_IF_ICMPEQ:_        case Constants.ASM_IF_ICMPNE:_        case Constants.ASM_IF_ICMPLT:_        case Constants.ASM_IF_ICMPGE:_        case Constants.ASM_IF_ICMPGT:_        case Constants.ASM_IF_ICMPLE:_        case Constants.ASM_IF_ACMPEQ:_        case Constants.ASM_IF_ACMPNE:_        case Constants.ASM_GOTO:_        case Constants.ASM_JSR:_        case Constants.ASM_IFNULL:_        case Constants.ASM_IFNONNULL:_          {_            _            _            _            _            _            _            opcode =_                opcode < Constants.ASM_IFNULL_                    ? opcode - Constants.ASM_OPCODE_DELTA_                    : opcode - Constants.ASM_IFNULL_OPCODE_DELTA__            Label target = labels[currentBytecodeOffset + readUnsignedShort(currentOffset + 1)]__            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_              _              methodVisitor.visitJumpInsn(opcode + Constants.WIDE_JUMP_OPCODE_DELTA, target)__            } else {_              _              _              _              opcode = opcode < Opcodes.GOTO ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1__              Label endif = createLabel(currentBytecodeOffset + 3, labels)__              methodVisitor.visitJumpInsn(opcode, endif)__              methodVisitor.visitJumpInsn(Constants.GOTO_W, target)__              _              _              insertFrame = true__            }_            currentOffset += 3__            break__          }_        case Constants.ASM_GOTO_W:_          {_            _            methodVisitor.visitJumpInsn(_                Constants.GOTO_W, labels[currentBytecodeOffset + readInt(currentOffset + 1)])__            _            _            _            insertFrame = true__            currentOffset += 5__            break__          }_        case Constants.WIDE:_          opcode = classFileBuffer[currentOffset + 1] & 0xFF__          if (opcode == Opcodes.IINC) {_            methodVisitor.visitIincInsn(_                readUnsignedShort(currentOffset + 2), readShort(currentOffset + 4))__            currentOffset += 6__          } else {_            methodVisitor.visitVarInsn(opcode, readUnsignedShort(currentOffset + 2))__            currentOffset += 4__          }_          break__        case Constants.TABLESWITCH:_          {_            _            currentOffset += 4 - (currentBytecodeOffset & 3)__            _            Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)]__            int low = readInt(currentOffset + 4)__            int high = readInt(currentOffset + 8)__            currentOffset += 12__            Label[] table = new Label[high - low + 1]__            for (int i = 0_ i < table.length_ ++i) {_              table[i] = labels[currentBytecodeOffset + readInt(currentOffset)]__              currentOffset += 4__            }_            methodVisitor.visitTableSwitchInsn(low, high, defaultLabel, table)__            break__          }_        case Constants.LOOKUPSWITCH:_          {_            _            currentOffset += 4 - (currentBytecodeOffset & 3)__            _            Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)]__            int nPairs = readInt(currentOffset + 4)__            currentOffset += 8__            int[] keys = new int[nPairs]__            Label[] values = new Label[nPairs]__            for (int i = 0_ i < nPairs_ ++i) {_              keys[i] = readInt(currentOffset)__              values[i] = labels[currentBytecodeOffset + readInt(currentOffset + 4)]__              currentOffset += 8__            }_            methodVisitor.visitLookupSwitchInsn(defaultLabel, keys, values)__            break__          }_        case Constants.ILOAD:_        case Constants.LLOAD:_        case Constants.FLOAD:_        case Constants.DLOAD:_        case Constants.ALOAD:_        case Constants.ISTORE:_        case Constants.LSTORE:_        case Constants.FSTORE:_        case Constants.DSTORE:_        case Constants.ASTORE:_        case Constants.RET:_          methodVisitor.visitVarInsn(opcode, classFileBuffer[currentOffset + 1] & 0xFF)__          currentOffset += 2__          break__        case Constants.BIPUSH:_        case Constants.NEWARRAY:_          methodVisitor.visitIntInsn(opcode, classFileBuffer[currentOffset + 1])__          currentOffset += 2__          break__        case Constants.SIPUSH:_          methodVisitor.visitIntInsn(opcode, readShort(currentOffset + 1))__          currentOffset += 3__          break__        case Constants.LDC:_          methodVisitor.visitLdcInsn(_              readConst(classFileBuffer[currentOffset + 1] & 0xFF, charBuffer))__          currentOffset += 2__          break__        case Constants.LDC_W:_        case Constants.LDC2_W:_          methodVisitor.visitLdcInsn(readConst(readUnsignedShort(currentOffset + 1), charBuffer))__          currentOffset += 3__          break__        case Constants.GETSTATIC:_        case Constants.PUTSTATIC:_        case Constants.GETFIELD:_        case Constants.PUTFIELD:_        case Constants.INVOKEVIRTUAL:_        case Constants.INVOKESPECIAL:_        case Constants.INVOKESTATIC:_        case Constants.INVOKEINTERFACE:_          {_            int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)]__            int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__            String owner = readClass(cpInfoOffset, charBuffer)__            String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__            String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__            if (opcode < Opcodes.INVOKEVIRTUAL) {_              methodVisitor.visitFieldInsn(opcode, owner, name, descriptor)__            } else {_              boolean isInterface =_                  classFileBuffer[cpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG__              methodVisitor.visitMethodInsn(opcode, owner, name, descriptor, isInterface)__            }_            if (opcode == Opcodes.INVOKEINTERFACE) {_              currentOffset += 5__            } else {_              currentOffset += 3__            }_            break__          }_        case Constants.INVOKEDYNAMIC:_          {_            int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)]__            int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__            String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__            String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__            int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)]__            Handle handle =_                (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__            Object[] bootstrapMethodArguments =_                new Object[readUnsignedShort(bootstrapMethodOffset + 2)]__            bootstrapMethodOffset += 4__            for (int i = 0_ i < bootstrapMethodArguments.length_ i++) {_              bootstrapMethodArguments[i] =_                  readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__              bootstrapMethodOffset += 2__            }_            methodVisitor.visitInvokeDynamicInsn(_                name, descriptor, handle, bootstrapMethodArguments)__            currentOffset += 5__            break__          }_        case Constants.NEW:_        case Constants.ANEWARRAY:_        case Constants.CHECKCAST:_        case Constants.INSTANCEOF:_          methodVisitor.visitTypeInsn(opcode, readClass(currentOffset + 1, charBuffer))__          currentOffset += 3__          break__        case Constants.IINC:_          methodVisitor.visitIincInsn(_              classFileBuffer[currentOffset + 1] & 0xFF, classFileBuffer[currentOffset + 2])__          currentOffset += 3__          break__        case Constants.MULTIANEWARRAY:_          methodVisitor.visitMultiANewArrayInsn(_              readClass(currentOffset + 1, charBuffer), classFileBuffer[currentOffset + 3] & 0xFF)__          currentOffset += 4__          break__        default:_          throw new AssertionError()__      }__      _      while (visibleTypeAnnotationOffsets != null_          && currentVisibleTypeAnnotationIndex < visibleTypeAnnotationOffsets.length_          && currentVisibleTypeAnnotationBytecodeOffset <= currentBytecodeOffset) {_        if (currentVisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {_          _          int currentAnnotationOffset =_              readTypeAnnotationTarget(_                  context, visibleTypeAnnotationOffsets[currentVisibleTypeAnnotationIndex])__          _          String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__          currentAnnotationOffset += 2__          _          readElementValues(_              methodVisitor.visitInsnAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  annotationDescriptor,_                   true),_              currentAnnotationOffset,_               true,_              charBuffer)__        }_        currentVisibleTypeAnnotationBytecodeOffset =_            getTypeAnnotationBytecodeOffset(_                visibleTypeAnnotationOffsets, ++currentVisibleTypeAnnotationIndex)__      }__      _      while (invisibleTypeAnnotationOffsets != null_          && currentInvisibleTypeAnnotationIndex < invisibleTypeAnnotationOffsets.length_          && currentInvisibleTypeAnnotationBytecodeOffset <= currentBytecodeOffset) {_        if (currentInvisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {_          _          int currentAnnotationOffset =_              readTypeAnnotationTarget(_                  context, invisibleTypeAnnotationOffsets[currentInvisibleTypeAnnotationIndex])__          _          String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__          currentAnnotationOffset += 2__          _          readElementValues(_              methodVisitor.visitInsnAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  annotationDescriptor,_                   false),_              currentAnnotationOffset,_               true,_              charBuffer)__        }_        currentInvisibleTypeAnnotationBytecodeOffset =_            getTypeAnnotationBytecodeOffset(_                invisibleTypeAnnotationOffsets, ++currentInvisibleTypeAnnotationIndex)__      }_    }_    if (labels[codeLength] != null) {_      methodVisitor.visitLabel(labels[codeLength])__    }__    _    if (localVariableTableOffset != 0 && (context.parsingOptions & SKIP_DEBUG) == 0) {_      _      int[] typeTable = null__      if (localVariableTypeTableOffset != 0) {_        typeTable = new int[readUnsignedShort(localVariableTypeTableOffset) * 3]__        currentOffset = localVariableTypeTableOffset + 2__        int typeTableIndex = typeTable.length__        while (typeTableIndex > 0) {_          _          typeTable[--typeTableIndex] = currentOffset + 6__          typeTable[--typeTableIndex] = readUnsignedShort(currentOffset + 8)__          typeTable[--typeTableIndex] = readUnsignedShort(currentOffset)__          currentOffset += 10__        }_      }_      int localVariableTableLength = readUnsignedShort(localVariableTableOffset)__      currentOffset = localVariableTableOffset + 2__      while (localVariableTableLength-- > 0) {_        int startPc = readUnsignedShort(currentOffset)__        int length = readUnsignedShort(currentOffset + 2)__        String name = readUTF8(currentOffset + 4, charBuffer)__        String descriptor = readUTF8(currentOffset + 6, charBuffer)__        int index = readUnsignedShort(currentOffset + 8)__        currentOffset += 10__        String signature = null__        if (typeTable != null) {_          for (int i = 0_ i < typeTable.length_ i += 3) {_            if (typeTable[i] == startPc && typeTable[i + 1] == index) {_              signature = readUTF8(typeTable[i + 2], charBuffer)__              break__            }_          }_        }_        methodVisitor.visitLocalVariable(_            name, descriptor, signature, labels[startPc], labels[startPc + length], index)__      }_    }__    _    if (visibleTypeAnnotationOffsets != null) {_      for (int i = 0_ i < visibleTypeAnnotationOffsets.length_ ++i) {_        int targetType = readByte(visibleTypeAnnotationOffsets[i])__        if (targetType == TypeReference.LOCAL_VARIABLE_            || targetType == TypeReference.RESOURCE_VARIABLE) {_          _          currentOffset = readTypeAnnotationTarget(context, visibleTypeAnnotationOffsets[i])__          _          String annotationDescriptor = readUTF8(currentOffset, charBuffer)__          currentOffset += 2__          _          readElementValues(_              methodVisitor.visitLocalVariableAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  context.currentLocalVariableAnnotationRangeStarts,_                  context.currentLocalVariableAnnotationRangeEnds,_                  context.currentLocalVariableAnnotationRangeIndices,_                  annotationDescriptor,_                   true),_              currentOffset,_               true,_              charBuffer)__        }_      }_    }__    _    if (invisibleTypeAnnotationOffsets != null) {_      for (int i = 0_ i < invisibleTypeAnnotationOffsets.length_ ++i) {_        int targetType = readByte(invisibleTypeAnnotationOffsets[i])__        if (targetType == TypeReference.LOCAL_VARIABLE_            || targetType == TypeReference.RESOURCE_VARIABLE) {_          _          currentOffset = readTypeAnnotationTarget(context, invisibleTypeAnnotationOffsets[i])__          _          String annotationDescriptor = readUTF8(currentOffset, charBuffer)__          currentOffset += 2__          _          readElementValues(_              methodVisitor.visitLocalVariableAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  context.currentLocalVariableAnnotationRangeStarts,_                  context.currentLocalVariableAnnotationRangeEnds,_                  context.currentLocalVariableAnnotationRangeIndices,_                  annotationDescriptor,_                   false),_              currentOffset,_               true,_              charBuffer)__        }_      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      methodVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    methodVisitor.visitMaxs(maxStack, maxLocals)__  };reads,a,jvms,code,attribute,and,makes,the,given,visitor,visit,it,param,method,visitor,the,visitor,that,must,visit,the,code,attribute,param,context,information,about,the,class,being,parsed,param,code,offset,the,start,offset,in,link,b,of,the,code,attribute,excluding,its,and,fields;private,void,read,code,final,method,visitor,method,visitor,final,context,context,final,int,code,offset,int,current,offset,code,offset,final,byte,class,file,buffer,b,final,char,char,buffer,context,char,buffer,final,int,max,stack,read,unsigned,short,current,offset,final,int,max,locals,read,unsigned,short,current,offset,2,final,int,code,length,read,int,current,offset,4,current,offset,8,final,int,bytecode,start,offset,current,offset,final,int,bytecode,end,offset,current,offset,code,length,final,label,labels,context,current,method,labels,new,label,code,length,1,while,current,offset,bytecode,end,offset,final,int,bytecode,offset,current,offset,bytecode,start,offset,final,int,opcode,class,file,buffer,current,offset,0x,ff,switch,opcode,case,constants,nop,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,iaload,case,constants,laload,case,constants,faload,case,constants,daload,case,constants,aaload,case,constants,baload,case,constants,caload,case,constants,saload,case,constants,iastore,case,constants,lastore,case,constants,fastore,case,constants,dastore,case,constants,aastore,case,constants,bastore,case,constants,castore,case,constants,sastore,case,constants,pop,case,constants,pop2,case,constants,dup,case,constants,case,constants,case,constants,dup2,case,constants,case,constants,case,constants,swap,case,constants,iadd,case,constants,ladd,case,constants,fadd,case,constants,dadd,case,constants,isub,case,constants,lsub,case,constants,fsub,case,constants,dsub,case,constants,imul,case,constants,lmul,case,constants,fmul,case,constants,dmul,case,constants,idiv,case,constants,ldiv,case,constants,fdiv,case,constants,ddiv,case,constants,irem,case,constants,lrem,case,constants,frem,case,constants,drem,case,constants,ineg,case,constants,lneg,case,constants,fneg,case,constants,dneg,case,constants,ishl,case,constants,lshl,case,constants,ishr,case,constants,lshr,case,constants,iushr,case,constants,lushr,case,constants,iand,case,constants,land,case,constants,ior,case,constants,lor,case,constants,ixor,case,constants,lxor,case,constants,i2l,case,constants,i2f,case,constants,i2d,case,constants,l2i,case,constants,l2f,case,constants,l2d,case,constants,f2i,case,constants,f2l,case,constants,f2d,case,constants,d2i,case,constants,d2l,case,constants,d2f,case,constants,i2b,case,constants,i2c,case,constants,i2s,case,constants,lcmp,case,constants,fcmpl,case,constants,fcmpg,case,constants,dcmpl,case,constants,dcmpg,case,constants,ireturn,case,constants,lreturn,case,constants,freturn,case,constants,dreturn,case,constants,areturn,case,constants,return,case,constants,arraylength,case,constants,athrow,case,constants,monitorenter,case,constants,monitorexit,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,current,offset,1,break,case,constants,ifeq,case,constants,ifne,case,constants,iflt,case,constants,ifge,case,constants,ifgt,case,constants,ifle,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,goto,case,constants,jsr,case,constants,ifnull,case,constants,ifnonnull,create,label,bytecode,offset,read,short,current,offset,1,labels,current,offset,3,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,create,label,bytecode,offset,read,unsigned,short,current,offset,1,labels,current,offset,3,break,case,constants,case,constants,case,constants,create,label,bytecode,offset,read,int,current,offset,1,labels,current,offset,5,break,case,constants,wide,switch,class,file,buffer,current,offset,1,0x,ff,case,constants,iload,case,constants,fload,case,constants,aload,case,constants,lload,case,constants,dload,case,constants,istore,case,constants,fstore,case,constants,astore,case,constants,lstore,case,constants,dstore,case,constants,ret,current,offset,4,break,case,constants,iinc,current,offset,6,break,default,throw,new,illegal,argument,exception,break,case,constants,tableswitch,current,offset,4,bytecode,offset,3,create,label,bytecode,offset,read,int,current,offset,labels,int,num,table,entries,read,int,current,offset,8,read,int,current,offset,4,1,current,offset,12,while,num,table,entries,0,create,label,bytecode,offset,read,int,current,offset,labels,current,offset,4,break,case,constants,lookupswitch,current,offset,4,bytecode,offset,3,create,label,bytecode,offset,read,int,current,offset,labels,int,num,switch,cases,read,int,current,offset,4,current,offset,8,while,num,switch,cases,0,create,label,bytecode,offset,read,int,current,offset,4,labels,current,offset,8,break,case,constants,iload,case,constants,lload,case,constants,fload,case,constants,dload,case,constants,aload,case,constants,istore,case,constants,lstore,case,constants,fstore,case,constants,dstore,case,constants,astore,case,constants,ret,case,constants,bipush,case,constants,newarray,case,constants,ldc,current,offset,2,break,case,constants,sipush,case,constants,case,constants,case,constants,getstatic,case,constants,putstatic,case,constants,getfield,case,constants,putfield,case,constants,invokevirtual,case,constants,invokespecial,case,constants,invokestatic,case,constants,new,case,constants,anewarray,case,constants,checkcast,case,constants,instanceof,case,constants,iinc,current,offset,3,break,case,constants,invokeinterface,case,constants,invokedynamic,current,offset,5,break,case,constants,multianewarray,current,offset,4,break,default,throw,new,illegal,argument,exception,int,exception,table,length,read,unsigned,short,current,offset,current,offset,2,while,exception,table,length,0,label,start,create,label,read,unsigned,short,current,offset,labels,label,end,create,label,read,unsigned,short,current,offset,2,labels,label,handler,create,label,read,unsigned,short,current,offset,4,labels,string,catch,type,read,utf8,cp,info,offsets,read,unsigned,short,current,offset,6,char,buffer,current,offset,8,method,visitor,visit,try,catch,block,start,end,handler,catch,type,int,stack,map,frame,offset,0,int,stack,map,table,end,offset,0,boolean,compressed,frames,true,int,local,variable,table,offset,0,int,local,variable,type,table,offset,0,int,visible,type,annotation,offsets,null,int,invisible,type,annotation,offsets,null,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,equals,attribute,name,if,context,parsing,options,0,local,variable,table,offset,current,offset,int,current,local,variable,table,offset,current,offset,int,local,variable,table,length,read,unsigned,short,current,local,variable,table,offset,current,local,variable,table,offset,2,while,local,variable,table,length,0,int,start,pc,read,unsigned,short,current,local,variable,table,offset,create,debug,label,start,pc,labels,int,length,read,unsigned,short,current,local,variable,table,offset,2,create,debug,label,start,pc,length,labels,current,local,variable,table,offset,10,else,if,constants,equals,attribute,name,local,variable,type,table,offset,current,offset,else,if,constants,equals,attribute,name,if,context,parsing,options,0,int,current,line,number,table,offset,current,offset,int,line,number,table,length,read,unsigned,short,current,line,number,table,offset,current,line,number,table,offset,2,while,line,number,table,length,0,int,start,pc,read,unsigned,short,current,line,number,table,offset,int,line,number,read,unsigned,short,current,line,number,table,offset,2,current,line,number,table,offset,4,create,debug,label,start,pc,labels,labels,start,pc,add,line,number,line,number,else,if,constants,equals,attribute,name,visible,type,annotation,offsets,read,type,annotations,method,visitor,context,current,offset,true,else,if,constants,equals,attribute,name,invisible,type,annotation,offsets,read,type,annotations,method,visitor,context,current,offset,false,else,if,constants,equals,attribute,name,if,context,parsing,options,0,stack,map,frame,offset,current,offset,2,stack,map,table,end,offset,current,offset,attribute,length,else,if,stack,map,equals,attribute,name,if,context,parsing,options,0,stack,map,frame,offset,current,offset,2,stack,map,table,end,offset,current,offset,attribute,length,compressed,frames,false,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,code,offset,labels,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,final,boolean,expand,frames,context,parsing,options,0,if,stack,map,frame,offset,0,context,current,frame,offset,1,context,current,frame,type,0,context,current,frame,local,count,0,context,current,frame,local,count,delta,0,context,current,frame,local,types,new,object,max,locals,context,current,frame,stack,count,0,context,current,frame,stack,types,new,object,max,stack,if,expand,frames,compute,implicit,frame,context,for,int,offset,stack,map,frame,offset,offset,stack,map,table,end,offset,2,offset,if,class,file,buffer,offset,frame,int,potential,bytecode,offset,read,unsigned,short,offset,1,if,potential,bytecode,offset,0,potential,bytecode,offset,code,length,class,file,buffer,bytecode,start,offset,potential,bytecode,offset,0x,ff,opcodes,new,create,label,potential,bytecode,offset,labels,if,expand,frames,context,parsing,options,0,method,visitor,visit,frame,opcodes,max,locals,null,0,null,int,current,visible,type,annotation,index,0,int,current,visible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,visible,type,annotation,offsets,0,int,current,invisible,type,annotation,index,0,int,current,invisible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,invisible,type,annotation,offsets,0,boolean,insert,frame,false,final,int,wide,jump,opcode,delta,context,parsing,options,0,constants,0,current,offset,bytecode,start,offset,while,current,offset,bytecode,end,offset,final,int,current,bytecode,offset,current,offset,bytecode,start,offset,label,current,label,labels,current,bytecode,offset,if,current,label,null,current,label,accept,method,visitor,context,parsing,options,0,while,stack,map,frame,offset,0,context,current,frame,offset,current,bytecode,offset,context,current,frame,offset,1,if,context,current,frame,offset,1,if,compressed,frames,expand,frames,method,visitor,visit,frame,opcodes,context,current,frame,local,count,context,current,frame,local,types,context,current,frame,stack,count,context,current,frame,stack,types,else,method,visitor,visit,frame,context,current,frame,type,context,current,frame,local,count,delta,context,current,frame,local,types,context,current,frame,stack,count,context,current,frame,stack,types,insert,frame,false,if,stack,map,frame,offset,stack,map,table,end,offset,stack,map,frame,offset,read,stack,map,frame,stack,map,frame,offset,compressed,frames,expand,frames,context,else,stack,map,frame,offset,0,if,insert,frame,if,context,parsing,options,0,method,visitor,visit,frame,constants,0,null,0,null,insert,frame,false,int,opcode,class,file,buffer,current,offset,0x,ff,switch,opcode,case,constants,nop,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,iaload,case,constants,laload,case,constants,faload,case,constants,daload,case,constants,aaload,case,constants,baload,case,constants,caload,case,constants,saload,case,constants,iastore,case,constants,lastore,case,constants,fastore,case,constants,dastore,case,constants,aastore,case,constants,bastore,case,constants,castore,case,constants,sastore,case,constants,pop,case,constants,pop2,case,constants,dup,case,constants,case,constants,case,constants,dup2,case,constants,case,constants,case,constants,swap,case,constants,iadd,case,constants,ladd,case,constants,fadd,case,constants,dadd,case,constants,isub,case,constants,lsub,case,constants,fsub,case,constants,dsub,case,constants,imul,case,constants,lmul,case,constants,fmul,case,constants,dmul,case,constants,idiv,case,constants,ldiv,case,constants,fdiv,case,constants,ddiv,case,constants,irem,case,constants,lrem,case,constants,frem,case,constants,drem,case,constants,ineg,case,constants,lneg,case,constants,fneg,case,constants,dneg,case,constants,ishl,case,constants,lshl,case,constants,ishr,case,constants,lshr,case,constants,iushr,case,constants,lushr,case,constants,iand,case,constants,land,case,constants,ior,case,constants,lor,case,constants,ixor,case,constants,lxor,case,constants,i2l,case,constants,i2f,case,constants,i2d,case,constants,l2i,case,constants,l2f,case,constants,l2d,case,constants,f2i,case,constants,f2l,case,constants,f2d,case,constants,d2i,case,constants,d2l,case,constants,d2f,case,constants,i2b,case,constants,i2c,case,constants,i2s,case,constants,lcmp,case,constants,fcmpl,case,constants,fcmpg,case,constants,dcmpl,case,constants,dcmpg,case,constants,ireturn,case,constants,lreturn,case,constants,freturn,case,constants,dreturn,case,constants,areturn,case,constants,return,case,constants,arraylength,case,constants,athrow,case,constants,monitorenter,case,constants,monitorexit,method,visitor,visit,insn,opcode,current,offset,1,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,constants,method,visitor,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,current,offset,1,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,constants,method,visitor,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,current,offset,1,break,case,constants,ifeq,case,constants,ifne,case,constants,iflt,case,constants,ifge,case,constants,ifgt,case,constants,ifle,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,goto,case,constants,jsr,case,constants,ifnull,case,constants,ifnonnull,method,visitor,visit,jump,insn,opcode,labels,current,bytecode,offset,read,short,current,offset,1,current,offset,3,break,case,constants,case,constants,method,visitor,visit,jump,insn,opcode,wide,jump,opcode,delta,labels,current,bytecode,offset,read,int,current,offset,1,current,offset,5,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,opcode,constants,opcode,constants,opcode,constants,label,target,labels,current,bytecode,offset,read,unsigned,short,current,offset,1,if,opcode,opcodes,goto,opcode,opcodes,jsr,method,visitor,visit,jump,insn,opcode,constants,target,else,opcode,opcode,opcodes,goto,opcode,1,1,1,opcode,1,label,endif,create,label,current,bytecode,offset,3,labels,method,visitor,visit,jump,insn,opcode,endif,method,visitor,visit,jump,insn,constants,target,insert,frame,true,current,offset,3,break,case,constants,method,visitor,visit,jump,insn,constants,labels,current,bytecode,offset,read,int,current,offset,1,insert,frame,true,current,offset,5,break,case,constants,wide,opcode,class,file,buffer,current,offset,1,0x,ff,if,opcode,opcodes,iinc,method,visitor,visit,iinc,insn,read,unsigned,short,current,offset,2,read,short,current,offset,4,current,offset,6,else,method,visitor,visit,var,insn,opcode,read,unsigned,short,current,offset,2,current,offset,4,break,case,constants,tableswitch,current,offset,4,current,bytecode,offset,3,label,default,label,labels,current,bytecode,offset,read,int,current,offset,int,low,read,int,current,offset,4,int,high,read,int,current,offset,8,current,offset,12,label,table,new,label,high,low,1,for,int,i,0,i,table,length,i,table,i,labels,current,bytecode,offset,read,int,current,offset,current,offset,4,method,visitor,visit,table,switch,insn,low,high,default,label,table,break,case,constants,lookupswitch,current,offset,4,current,bytecode,offset,3,label,default,label,labels,current,bytecode,offset,read,int,current,offset,int,n,pairs,read,int,current,offset,4,current,offset,8,int,keys,new,int,n,pairs,label,values,new,label,n,pairs,for,int,i,0,i,n,pairs,i,keys,i,read,int,current,offset,values,i,labels,current,bytecode,offset,read,int,current,offset,4,current,offset,8,method,visitor,visit,lookup,switch,insn,default,label,keys,values,break,case,constants,iload,case,constants,lload,case,constants,fload,case,constants,dload,case,constants,aload,case,constants,istore,case,constants,lstore,case,constants,fstore,case,constants,dstore,case,constants,astore,case,constants,ret,method,visitor,visit,var,insn,opcode,class,file,buffer,current,offset,1,0x,ff,current,offset,2,break,case,constants,bipush,case,constants,newarray,method,visitor,visit,int,insn,opcode,class,file,buffer,current,offset,1,current,offset,2,break,case,constants,sipush,method,visitor,visit,int,insn,opcode,read,short,current,offset,1,current,offset,3,break,case,constants,ldc,method,visitor,visit,ldc,insn,read,const,class,file,buffer,current,offset,1,0x,ff,char,buffer,current,offset,2,break,case,constants,case,constants,method,visitor,visit,ldc,insn,read,const,read,unsigned,short,current,offset,1,char,buffer,current,offset,3,break,case,constants,getstatic,case,constants,putstatic,case,constants,getfield,case,constants,putfield,case,constants,invokevirtual,case,constants,invokespecial,case,constants,invokestatic,case,constants,invokeinterface,int,cp,info,offset,cp,info,offsets,read,unsigned,short,current,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,owner,read,class,cp,info,offset,char,buffer,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,if,opcode,opcodes,invokevirtual,method,visitor,visit,field,insn,opcode,owner,name,descriptor,else,boolean,is,interface,class,file,buffer,cp,info,offset,1,symbol,method,visitor,visit,method,insn,opcode,owner,name,descriptor,is,interface,if,opcode,opcodes,invokeinterface,current,offset,5,else,current,offset,3,break,case,constants,invokedynamic,int,cp,info,offset,cp,info,offsets,read,unsigned,short,current,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,int,bootstrap,method,offset,bootstrap,method,offsets,read,unsigned,short,cp,info,offset,handle,handle,handle,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,object,bootstrap,method,arguments,new,object,read,unsigned,short,bootstrap,method,offset,2,bootstrap,method,offset,4,for,int,i,0,i,bootstrap,method,arguments,length,i,bootstrap,method,arguments,i,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,bootstrap,method,offset,2,method,visitor,visit,invoke,dynamic,insn,name,descriptor,handle,bootstrap,method,arguments,current,offset,5,break,case,constants,new,case,constants,anewarray,case,constants,checkcast,case,constants,instanceof,method,visitor,visit,type,insn,opcode,read,class,current,offset,1,char,buffer,current,offset,3,break,case,constants,iinc,method,visitor,visit,iinc,insn,class,file,buffer,current,offset,1,0x,ff,class,file,buffer,current,offset,2,current,offset,3,break,case,constants,multianewarray,method,visitor,visit,multi,anew,array,insn,read,class,current,offset,1,char,buffer,class,file,buffer,current,offset,3,0x,ff,current,offset,4,break,default,throw,new,assertion,error,while,visible,type,annotation,offsets,null,current,visible,type,annotation,index,visible,type,annotation,offsets,length,current,visible,type,annotation,bytecode,offset,current,bytecode,offset,if,current,visible,type,annotation,bytecode,offset,current,bytecode,offset,int,current,annotation,offset,read,type,annotation,target,context,visible,type,annotation,offsets,current,visible,type,annotation,index,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,read,element,values,method,visitor,visit,insn,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,current,visible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,visible,type,annotation,offsets,current,visible,type,annotation,index,while,invisible,type,annotation,offsets,null,current,invisible,type,annotation,index,invisible,type,annotation,offsets,length,current,invisible,type,annotation,bytecode,offset,current,bytecode,offset,if,current,invisible,type,annotation,bytecode,offset,current,bytecode,offset,int,current,annotation,offset,read,type,annotation,target,context,invisible,type,annotation,offsets,current,invisible,type,annotation,index,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,read,element,values,method,visitor,visit,insn,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,current,invisible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,invisible,type,annotation,offsets,current,invisible,type,annotation,index,if,labels,code,length,null,method,visitor,visit,label,labels,code,length,if,local,variable,table,offset,0,context,parsing,options,0,int,type,table,null,if,local,variable,type,table,offset,0,type,table,new,int,read,unsigned,short,local,variable,type,table,offset,3,current,offset,local,variable,type,table,offset,2,int,type,table,index,type,table,length,while,type,table,index,0,type,table,type,table,index,current,offset,6,type,table,type,table,index,read,unsigned,short,current,offset,8,type,table,type,table,index,read,unsigned,short,current,offset,current,offset,10,int,local,variable,table,length,read,unsigned,short,local,variable,table,offset,current,offset,local,variable,table,offset,2,while,local,variable,table,length,0,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,string,name,read,utf8,current,offset,4,char,buffer,string,descriptor,read,utf8,current,offset,6,char,buffer,int,index,read,unsigned,short,current,offset,8,current,offset,10,string,signature,null,if,type,table,null,for,int,i,0,i,type,table,length,i,3,if,type,table,i,start,pc,type,table,i,1,index,signature,read,utf8,type,table,i,2,char,buffer,break,method,visitor,visit,local,variable,name,descriptor,signature,labels,start,pc,labels,start,pc,length,index,if,visible,type,annotation,offsets,null,for,int,i,0,i,visible,type,annotation,offsets,length,i,int,target,type,read,byte,visible,type,annotation,offsets,i,if,target,type,type,reference,target,type,type,reference,current,offset,read,type,annotation,target,context,visible,type,annotation,offsets,i,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,read,element,values,method,visitor,visit,local,variable,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,context,current,local,variable,annotation,range,starts,context,current,local,variable,annotation,range,ends,context,current,local,variable,annotation,range,indices,annotation,descriptor,true,current,offset,true,char,buffer,if,invisible,type,annotation,offsets,null,for,int,i,0,i,invisible,type,annotation,offsets,length,i,int,target,type,read,byte,invisible,type,annotation,offsets,i,if,target,type,type,reference,target,type,type,reference,current,offset,read,type,annotation,target,context,invisible,type,annotation,offsets,i,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,read,element,values,method,visitor,visit,local,variable,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,context,current,local,variable,annotation,range,starts,context,current,local,variable,annotation,range,ends,context,current,local,variable,annotation,range,indices,annotation,descriptor,false,current,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,method,visitor,visit,attribute,attributes,attributes,next,attribute,method,visitor,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(       final MethodVisitor methodVisitor, final Context context, final int codeOffset);1536664245;Reads a JVMS 'Code' attribute and makes the given visitor visit it.__@param methodVisitor the visitor that must visit the Code attribute._@param context information about the class being parsed._@param codeOffset the start offset in {@link #b} of the Code attribute, excluding its_attribute_name_index and attribute_length fields.;private void readCode(_      final MethodVisitor methodVisitor, final Context context, final int codeOffset) {_    int currentOffset = codeOffset___    _    final byte[] classFileBuffer = b__    final char[] charBuffer = context.charBuffer__    final int maxStack = readUnsignedShort(currentOffset)__    final int maxLocals = readUnsignedShort(currentOffset + 2)__    final int codeLength = readInt(currentOffset + 4)__    currentOffset += 8___    _    final int bytecodeStartOffset = currentOffset__    final int bytecodeEndOffset = currentOffset + codeLength__    final Label[] labels = context.currentMethodLabels = new Label[codeLength + 1]__    while (currentOffset < bytecodeEndOffset) {_      final int bytecodeOffset = currentOffset - bytecodeStartOffset__      final int opcode = classFileBuffer[currentOffset] & 0xFF__      switch (opcode) {_        case Constants.NOP:_        case Constants.ACONST_NULL:_        case Constants.ICONST_M1:_        case Constants.ICONST_0:_        case Constants.ICONST_1:_        case Constants.ICONST_2:_        case Constants.ICONST_3:_        case Constants.ICONST_4:_        case Constants.ICONST_5:_        case Constants.LCONST_0:_        case Constants.LCONST_1:_        case Constants.FCONST_0:_        case Constants.FCONST_1:_        case Constants.FCONST_2:_        case Constants.DCONST_0:_        case Constants.DCONST_1:_        case Constants.IALOAD:_        case Constants.LALOAD:_        case Constants.FALOAD:_        case Constants.DALOAD:_        case Constants.AALOAD:_        case Constants.BALOAD:_        case Constants.CALOAD:_        case Constants.SALOAD:_        case Constants.IASTORE:_        case Constants.LASTORE:_        case Constants.FASTORE:_        case Constants.DASTORE:_        case Constants.AASTORE:_        case Constants.BASTORE:_        case Constants.CASTORE:_        case Constants.SASTORE:_        case Constants.POP:_        case Constants.POP2:_        case Constants.DUP:_        case Constants.DUP_X1:_        case Constants.DUP_X2:_        case Constants.DUP2:_        case Constants.DUP2_X1:_        case Constants.DUP2_X2:_        case Constants.SWAP:_        case Constants.IADD:_        case Constants.LADD:_        case Constants.FADD:_        case Constants.DADD:_        case Constants.ISUB:_        case Constants.LSUB:_        case Constants.FSUB:_        case Constants.DSUB:_        case Constants.IMUL:_        case Constants.LMUL:_        case Constants.FMUL:_        case Constants.DMUL:_        case Constants.IDIV:_        case Constants.LDIV:_        case Constants.FDIV:_        case Constants.DDIV:_        case Constants.IREM:_        case Constants.LREM:_        case Constants.FREM:_        case Constants.DREM:_        case Constants.INEG:_        case Constants.LNEG:_        case Constants.FNEG:_        case Constants.DNEG:_        case Constants.ISHL:_        case Constants.LSHL:_        case Constants.ISHR:_        case Constants.LSHR:_        case Constants.IUSHR:_        case Constants.LUSHR:_        case Constants.IAND:_        case Constants.LAND:_        case Constants.IOR:_        case Constants.LOR:_        case Constants.IXOR:_        case Constants.LXOR:_        case Constants.I2L:_        case Constants.I2F:_        case Constants.I2D:_        case Constants.L2I:_        case Constants.L2F:_        case Constants.L2D:_        case Constants.F2I:_        case Constants.F2L:_        case Constants.F2D:_        case Constants.D2I:_        case Constants.D2L:_        case Constants.D2F:_        case Constants.I2B:_        case Constants.I2C:_        case Constants.I2S:_        case Constants.LCMP:_        case Constants.FCMPL:_        case Constants.FCMPG:_        case Constants.DCMPL:_        case Constants.DCMPG:_        case Constants.IRETURN:_        case Constants.LRETURN:_        case Constants.FRETURN:_        case Constants.DRETURN:_        case Constants.ARETURN:_        case Constants.RETURN:_        case Constants.ARRAYLENGTH:_        case Constants.ATHROW:_        case Constants.MONITORENTER:_        case Constants.MONITOREXIT:_        case Constants.ILOAD_0:_        case Constants.ILOAD_1:_        case Constants.ILOAD_2:_        case Constants.ILOAD_3:_        case Constants.LLOAD_0:_        case Constants.LLOAD_1:_        case Constants.LLOAD_2:_        case Constants.LLOAD_3:_        case Constants.FLOAD_0:_        case Constants.FLOAD_1:_        case Constants.FLOAD_2:_        case Constants.FLOAD_3:_        case Constants.DLOAD_0:_        case Constants.DLOAD_1:_        case Constants.DLOAD_2:_        case Constants.DLOAD_3:_        case Constants.ALOAD_0:_        case Constants.ALOAD_1:_        case Constants.ALOAD_2:_        case Constants.ALOAD_3:_        case Constants.ISTORE_0:_        case Constants.ISTORE_1:_        case Constants.ISTORE_2:_        case Constants.ISTORE_3:_        case Constants.LSTORE_0:_        case Constants.LSTORE_1:_        case Constants.LSTORE_2:_        case Constants.LSTORE_3:_        case Constants.FSTORE_0:_        case Constants.FSTORE_1:_        case Constants.FSTORE_2:_        case Constants.FSTORE_3:_        case Constants.DSTORE_0:_        case Constants.DSTORE_1:_        case Constants.DSTORE_2:_        case Constants.DSTORE_3:_        case Constants.ASTORE_0:_        case Constants.ASTORE_1:_        case Constants.ASTORE_2:_        case Constants.ASTORE_3:_          currentOffset += 1__          break__        case Constants.IFEQ:_        case Constants.IFNE:_        case Constants.IFLT:_        case Constants.IFGE:_        case Constants.IFGT:_        case Constants.IFLE:_        case Constants.IF_ICMPEQ:_        case Constants.IF_ICMPNE:_        case Constants.IF_ICMPLT:_        case Constants.IF_ICMPGE:_        case Constants.IF_ICMPGT:_        case Constants.IF_ICMPLE:_        case Constants.IF_ACMPEQ:_        case Constants.IF_ACMPNE:_        case Constants.GOTO:_        case Constants.JSR:_        case Constants.IFNULL:_        case Constants.IFNONNULL:_          createLabel(bytecodeOffset + readShort(currentOffset + 1), labels)__          currentOffset += 3__          break__        case Constants.ASM_IFEQ:_        case Constants.ASM_IFNE:_        case Constants.ASM_IFLT:_        case Constants.ASM_IFGE:_        case Constants.ASM_IFGT:_        case Constants.ASM_IFLE:_        case Constants.ASM_IF_ICMPEQ:_        case Constants.ASM_IF_ICMPNE:_        case Constants.ASM_IF_ICMPLT:_        case Constants.ASM_IF_ICMPGE:_        case Constants.ASM_IF_ICMPGT:_        case Constants.ASM_IF_ICMPLE:_        case Constants.ASM_IF_ACMPEQ:_        case Constants.ASM_IF_ACMPNE:_        case Constants.ASM_GOTO:_        case Constants.ASM_JSR:_        case Constants.ASM_IFNULL:_        case Constants.ASM_IFNONNULL:_          createLabel(bytecodeOffset + readUnsignedShort(currentOffset + 1), labels)__          currentOffset += 3__          break__        case Constants.GOTO_W:_        case Constants.JSR_W:_        case Constants.ASM_GOTO_W:_          createLabel(bytecodeOffset + readInt(currentOffset + 1), labels)__          currentOffset += 5__          break__        case Constants.WIDE:_          switch (classFileBuffer[currentOffset + 1] & 0xFF) {_            case Constants.ILOAD:_            case Constants.FLOAD:_            case Constants.ALOAD:_            case Constants.LLOAD:_            case Constants.DLOAD:_            case Constants.ISTORE:_            case Constants.FSTORE:_            case Constants.ASTORE:_            case Constants.LSTORE:_            case Constants.DSTORE:_            case Constants.RET:_              currentOffset += 4__              break__            case Constants.IINC:_              currentOffset += 6__              break__            default:_              throw new IllegalArgumentException()__          }_          break__        case Constants.TABLESWITCH:_          _          currentOffset += 4 - (bytecodeOffset & 3)__          _          createLabel(bytecodeOffset + readInt(currentOffset), labels)__          int numTableEntries = readInt(currentOffset + 8) - readInt(currentOffset + 4) + 1__          currentOffset += 12__          _          while (numTableEntries-- > 0) {_            createLabel(bytecodeOffset + readInt(currentOffset), labels)__            currentOffset += 4__          }_          break__        case Constants.LOOKUPSWITCH:_          _          currentOffset += 4 - (bytecodeOffset & 3)__          _          createLabel(bytecodeOffset + readInt(currentOffset), labels)__          int numSwitchCases = readInt(currentOffset + 4)__          currentOffset += 8__          _          while (numSwitchCases-- > 0) {_            createLabel(bytecodeOffset + readInt(currentOffset + 4), labels)__            currentOffset += 8__          }_          break__        case Constants.ILOAD:_        case Constants.LLOAD:_        case Constants.FLOAD:_        case Constants.DLOAD:_        case Constants.ALOAD:_        case Constants.ISTORE:_        case Constants.LSTORE:_        case Constants.FSTORE:_        case Constants.DSTORE:_        case Constants.ASTORE:_        case Constants.RET:_        case Constants.BIPUSH:_        case Constants.NEWARRAY:_        case Constants.LDC:_          currentOffset += 2__          break__        case Constants.SIPUSH:_        case Constants.LDC_W:_        case Constants.LDC2_W:_        case Constants.GETSTATIC:_        case Constants.PUTSTATIC:_        case Constants.GETFIELD:_        case Constants.PUTFIELD:_        case Constants.INVOKEVIRTUAL:_        case Constants.INVOKESPECIAL:_        case Constants.INVOKESTATIC:_        case Constants.NEW:_        case Constants.ANEWARRAY:_        case Constants.CHECKCAST:_        case Constants.INSTANCEOF:_        case Constants.IINC:_          currentOffset += 3__          break__        case Constants.INVOKEINTERFACE:_        case Constants.INVOKEDYNAMIC:_          currentOffset += 5__          break__        case Constants.MULTIANEWARRAY:_          currentOffset += 4__          break__        default:_          throw new IllegalArgumentException()__      }_    }__    _    _    {_      int exceptionTableLength = readUnsignedShort(currentOffset)__      currentOffset += 2__      while (exceptionTableLength-- > 0) {_        Label start = createLabel(readUnsignedShort(currentOffset), labels)__        Label end = createLabel(readUnsignedShort(currentOffset + 2), labels)__        Label handler = createLabel(readUnsignedShort(currentOffset + 4), labels)__        String catchType =_            readUTF8(cpInfoOffsets[readUnsignedShort(currentOffset + 6)], charBuffer)__        currentOffset += 8__        methodVisitor.visitTryCatchBlock(start, end, handler, catchType)__      }_    }__    _    _    _    _    _    _    int stackMapFrameOffset = 0__    _    int stackMapTableEndOffset = 0__    _    boolean compressedFrames = true__    _    int localVariableTableOffset = 0__    _    int localVariableTypeTableOffset = 0__    _    _    int[] visibleTypeAnnotationOffsets = null__    _    _    int[] invisibleTypeAnnotationOffsets = null__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      if (Constants.LOCAL_VARIABLE_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_DEBUG) == 0) {_          localVariableTableOffset = currentOffset__          _          int currentLocalVariableTableOffset = currentOffset__          int localVariableTableLength = readUnsignedShort(currentLocalVariableTableOffset)__          currentLocalVariableTableOffset += 2__          while (localVariableTableLength-- > 0) {_            int startPc = readUnsignedShort(currentLocalVariableTableOffset)__            createDebugLabel(startPc, labels)__            int length = readUnsignedShort(currentLocalVariableTableOffset + 2)__            createDebugLabel(startPc + length, labels)__            _            currentLocalVariableTableOffset += 10__          }_        }_      } else if (Constants.LOCAL_VARIABLE_TYPE_TABLE.equals(attributeName)) {_        localVariableTypeTableOffset = currentOffset__        _        _      } else if (Constants.LINE_NUMBER_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_DEBUG) == 0) {_          _          int currentLineNumberTableOffset = currentOffset__          int lineNumberTableLength = readUnsignedShort(currentLineNumberTableOffset)__          currentLineNumberTableOffset += 2__          while (lineNumberTableLength-- > 0) {_            int startPc = readUnsignedShort(currentLineNumberTableOffset)__            int lineNumber = readUnsignedShort(currentLineNumberTableOffset + 2)__            currentLineNumberTableOffset += 4__            createDebugLabel(startPc, labels)__            labels[startPc].addLineNumber(lineNumber)__          }_        }_      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        visibleTypeAnnotationOffsets =_            readTypeAnnotations(methodVisitor, context, currentOffset,  true)__        _        _        _        _        _        _      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        invisibleTypeAnnotationOffsets =_            readTypeAnnotations(methodVisitor, context, currentOffset,  false)__        _      } else if (Constants.STACK_MAP_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_FRAMES) == 0) {_          stackMapFrameOffset = currentOffset + 2__          stackMapTableEndOffset = currentOffset + attributeLength__        }_        _        _        _        _        _        _        _        _        _      } else if ("StackMap".equals(attributeName)) {_        if ((context.parsingOptions & SKIP_FRAMES) == 0) {_          stackMapFrameOffset = currentOffset + 2__          stackMapTableEndOffset = currentOffset + attributeLength__          compressedFrames = false__        }_        _        _        _        _      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                codeOffset,_                labels)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    _    final boolean expandFrames = (context.parsingOptions & EXPAND_FRAMES) != 0__    if (stackMapFrameOffset != 0) {_      _      _      _      context.currentFrameOffset = -1__      context.currentFrameType = 0__      context.currentFrameLocalCount = 0__      context.currentFrameLocalCountDelta = 0__      context.currentFrameLocalTypes = new Object[maxLocals]__      context.currentFrameStackCount = 0__      context.currentFrameStackTypes = new Object[maxStack]__      if (expandFrames) {_        computeImplicitFrame(context)__      }_      _      _      _      _      _      _      _      for (int offset = stackMapFrameOffset_ offset < stackMapTableEndOffset - 2_ ++offset) {_        if (classFileBuffer[offset] == Frame.ITEM_UNINITIALIZED) {_          int potentialBytecodeOffset = readUnsignedShort(offset + 1)__          if (potentialBytecodeOffset >= 0_              && potentialBytecodeOffset < codeLength_              && (classFileBuffer[bytecodeStartOffset + potentialBytecodeOffset] & 0xFF)_                  == Opcodes.NEW) {_            createLabel(potentialBytecodeOffset, labels)__          }_        }_      }_    }_    if (expandFrames && (context.parsingOptions & EXPAND_ASM_INSNS) != 0) {_      _      _      _      _      _      _      methodVisitor.visitFrame(Opcodes.F_NEW, maxLocals, null, 0, null)__    }__    _    __    _    _    int currentVisibleTypeAnnotationIndex = 0__    _    int currentVisibleTypeAnnotationBytecodeOffset =_        getTypeAnnotationBytecodeOffset(visibleTypeAnnotationOffsets, 0)__    _    _    int currentInvisibleTypeAnnotationIndex = 0__    _    int currentInvisibleTypeAnnotationBytecodeOffset =_        getTypeAnnotationBytecodeOffset(invisibleTypeAnnotationOffsets, 0)___    _    boolean insertFrame = false___    _    _    _    final int wideJumpOpcodeDelta =_        (context.parsingOptions & EXPAND_ASM_INSNS) == 0 ? Constants.WIDE_JUMP_OPCODE_DELTA : 0___    currentOffset = bytecodeStartOffset__    while (currentOffset < bytecodeEndOffset) {_      final int currentBytecodeOffset = currentOffset - bytecodeStartOffset___      _      Label currentLabel = labels[currentBytecodeOffset]__      if (currentLabel != null) {_        currentLabel.accept(methodVisitor, (context.parsingOptions & SKIP_DEBUG) == 0)__      }__      _      while (stackMapFrameOffset != 0_          && (context.currentFrameOffset == currentBytecodeOffset_              || context.currentFrameOffset == -1)) {_        _        _        if (context.currentFrameOffset != -1) {_          if (!compressedFrames || expandFrames) {_            methodVisitor.visitFrame(_                Opcodes.F_NEW,_                context.currentFrameLocalCount,_                context.currentFrameLocalTypes,_                context.currentFrameStackCount,_                context.currentFrameStackTypes)__          } else {_            methodVisitor.visitFrame(_                context.currentFrameType,_                context.currentFrameLocalCountDelta,_                context.currentFrameLocalTypes,_                context.currentFrameStackCount,_                context.currentFrameStackTypes)__          }_          _          _          insertFrame = false__        }_        if (stackMapFrameOffset < stackMapTableEndOffset) {_          stackMapFrameOffset =_              readStackMapFrame(stackMapFrameOffset, compressedFrames, expandFrames, context)__        } else {_          stackMapFrameOffset = 0__        }_      }__      _      _      if (insertFrame) {_        if ((context.parsingOptions & EXPAND_FRAMES) != 0) {_          methodVisitor.visitFrame(Constants.F_INSERT, 0, null, 0, null)__        }_        insertFrame = false__      }__      _      int opcode = classFileBuffer[currentOffset] & 0xFF__      switch (opcode) {_        case Constants.NOP:_        case Constants.ACONST_NULL:_        case Constants.ICONST_M1:_        case Constants.ICONST_0:_        case Constants.ICONST_1:_        case Constants.ICONST_2:_        case Constants.ICONST_3:_        case Constants.ICONST_4:_        case Constants.ICONST_5:_        case Constants.LCONST_0:_        case Constants.LCONST_1:_        case Constants.FCONST_0:_        case Constants.FCONST_1:_        case Constants.FCONST_2:_        case Constants.DCONST_0:_        case Constants.DCONST_1:_        case Constants.IALOAD:_        case Constants.LALOAD:_        case Constants.FALOAD:_        case Constants.DALOAD:_        case Constants.AALOAD:_        case Constants.BALOAD:_        case Constants.CALOAD:_        case Constants.SALOAD:_        case Constants.IASTORE:_        case Constants.LASTORE:_        case Constants.FASTORE:_        case Constants.DASTORE:_        case Constants.AASTORE:_        case Constants.BASTORE:_        case Constants.CASTORE:_        case Constants.SASTORE:_        case Constants.POP:_        case Constants.POP2:_        case Constants.DUP:_        case Constants.DUP_X1:_        case Constants.DUP_X2:_        case Constants.DUP2:_        case Constants.DUP2_X1:_        case Constants.DUP2_X2:_        case Constants.SWAP:_        case Constants.IADD:_        case Constants.LADD:_        case Constants.FADD:_        case Constants.DADD:_        case Constants.ISUB:_        case Constants.LSUB:_        case Constants.FSUB:_        case Constants.DSUB:_        case Constants.IMUL:_        case Constants.LMUL:_        case Constants.FMUL:_        case Constants.DMUL:_        case Constants.IDIV:_        case Constants.LDIV:_        case Constants.FDIV:_        case Constants.DDIV:_        case Constants.IREM:_        case Constants.LREM:_        case Constants.FREM:_        case Constants.DREM:_        case Constants.INEG:_        case Constants.LNEG:_        case Constants.FNEG:_        case Constants.DNEG:_        case Constants.ISHL:_        case Constants.LSHL:_        case Constants.ISHR:_        case Constants.LSHR:_        case Constants.IUSHR:_        case Constants.LUSHR:_        case Constants.IAND:_        case Constants.LAND:_        case Constants.IOR:_        case Constants.LOR:_        case Constants.IXOR:_        case Constants.LXOR:_        case Constants.I2L:_        case Constants.I2F:_        case Constants.I2D:_        case Constants.L2I:_        case Constants.L2F:_        case Constants.L2D:_        case Constants.F2I:_        case Constants.F2L:_        case Constants.F2D:_        case Constants.D2I:_        case Constants.D2L:_        case Constants.D2F:_        case Constants.I2B:_        case Constants.I2C:_        case Constants.I2S:_        case Constants.LCMP:_        case Constants.FCMPL:_        case Constants.FCMPG:_        case Constants.DCMPL:_        case Constants.DCMPG:_        case Constants.IRETURN:_        case Constants.LRETURN:_        case Constants.FRETURN:_        case Constants.DRETURN:_        case Constants.ARETURN:_        case Constants.RETURN:_        case Constants.ARRAYLENGTH:_        case Constants.ATHROW:_        case Constants.MONITORENTER:_        case Constants.MONITOREXIT:_          methodVisitor.visitInsn(opcode)__          currentOffset += 1__          break__        case Constants.ILOAD_0:_        case Constants.ILOAD_1:_        case Constants.ILOAD_2:_        case Constants.ILOAD_3:_        case Constants.LLOAD_0:_        case Constants.LLOAD_1:_        case Constants.LLOAD_2:_        case Constants.LLOAD_3:_        case Constants.FLOAD_0:_        case Constants.FLOAD_1:_        case Constants.FLOAD_2:_        case Constants.FLOAD_3:_        case Constants.DLOAD_0:_        case Constants.DLOAD_1:_        case Constants.DLOAD_2:_        case Constants.DLOAD_3:_        case Constants.ALOAD_0:_        case Constants.ALOAD_1:_        case Constants.ALOAD_2:_        case Constants.ALOAD_3:_          opcode -= Constants.ILOAD_0__          methodVisitor.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__          currentOffset += 1__          break__        case Constants.ISTORE_0:_        case Constants.ISTORE_1:_        case Constants.ISTORE_2:_        case Constants.ISTORE_3:_        case Constants.LSTORE_0:_        case Constants.LSTORE_1:_        case Constants.LSTORE_2:_        case Constants.LSTORE_3:_        case Constants.FSTORE_0:_        case Constants.FSTORE_1:_        case Constants.FSTORE_2:_        case Constants.FSTORE_3:_        case Constants.DSTORE_0:_        case Constants.DSTORE_1:_        case Constants.DSTORE_2:_        case Constants.DSTORE_3:_        case Constants.ASTORE_0:_        case Constants.ASTORE_1:_        case Constants.ASTORE_2:_        case Constants.ASTORE_3:_          opcode -= Constants.ISTORE_0__          methodVisitor.visitVarInsn(Opcodes.ISTORE + (opcode >> 2), opcode & 0x3)__          currentOffset += 1__          break__        case Constants.IFEQ:_        case Constants.IFNE:_        case Constants.IFLT:_        case Constants.IFGE:_        case Constants.IFGT:_        case Constants.IFLE:_        case Constants.IF_ICMPEQ:_        case Constants.IF_ICMPNE:_        case Constants.IF_ICMPLT:_        case Constants.IF_ICMPGE:_        case Constants.IF_ICMPGT:_        case Constants.IF_ICMPLE:_        case Constants.IF_ACMPEQ:_        case Constants.IF_ACMPNE:_        case Constants.GOTO:_        case Constants.JSR:_        case Constants.IFNULL:_        case Constants.IFNONNULL:_          methodVisitor.visitJumpInsn(_              opcode, labels[currentBytecodeOffset + readShort(currentOffset + 1)])__          currentOffset += 3__          break__        case Constants.GOTO_W:_        case Constants.JSR_W:_          methodVisitor.visitJumpInsn(_              opcode - wideJumpOpcodeDelta,_              labels[currentBytecodeOffset + readInt(currentOffset + 1)])__          currentOffset += 5__          break__        case Constants.ASM_IFEQ:_        case Constants.ASM_IFNE:_        case Constants.ASM_IFLT:_        case Constants.ASM_IFGE:_        case Constants.ASM_IFGT:_        case Constants.ASM_IFLE:_        case Constants.ASM_IF_ICMPEQ:_        case Constants.ASM_IF_ICMPNE:_        case Constants.ASM_IF_ICMPLT:_        case Constants.ASM_IF_ICMPGE:_        case Constants.ASM_IF_ICMPGT:_        case Constants.ASM_IF_ICMPLE:_        case Constants.ASM_IF_ACMPEQ:_        case Constants.ASM_IF_ACMPNE:_        case Constants.ASM_GOTO:_        case Constants.ASM_JSR:_        case Constants.ASM_IFNULL:_        case Constants.ASM_IFNONNULL:_          {_            _            _            _            _            _            _            opcode =_                opcode < Constants.ASM_IFNULL_                    ? opcode - Constants.ASM_OPCODE_DELTA_                    : opcode - Constants.ASM_IFNULL_OPCODE_DELTA__            Label target = labels[currentBytecodeOffset + readUnsignedShort(currentOffset + 1)]__            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_              _              methodVisitor.visitJumpInsn(opcode + Constants.WIDE_JUMP_OPCODE_DELTA, target)__            } else {_              _              _              _              opcode = opcode < Opcodes.GOTO ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1__              Label endif = createLabel(currentBytecodeOffset + 3, labels)__              methodVisitor.visitJumpInsn(opcode, endif)__              methodVisitor.visitJumpInsn(Constants.GOTO_W, target)__              _              _              insertFrame = true__            }_            currentOffset += 3__            break__          }_        case Constants.ASM_GOTO_W:_          {_            _            methodVisitor.visitJumpInsn(_                Constants.GOTO_W, labels[currentBytecodeOffset + readInt(currentOffset + 1)])__            _            _            _            insertFrame = true__            currentOffset += 5__            break__          }_        case Constants.WIDE:_          opcode = classFileBuffer[currentOffset + 1] & 0xFF__          if (opcode == Opcodes.IINC) {_            methodVisitor.visitIincInsn(_                readUnsignedShort(currentOffset + 2), readShort(currentOffset + 4))__            currentOffset += 6__          } else {_            methodVisitor.visitVarInsn(opcode, readUnsignedShort(currentOffset + 2))__            currentOffset += 4__          }_          break__        case Constants.TABLESWITCH:_          {_            _            currentOffset += 4 - (currentBytecodeOffset & 3)__            _            Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)]__            int low = readInt(currentOffset + 4)__            int high = readInt(currentOffset + 8)__            currentOffset += 12__            Label[] table = new Label[high - low + 1]__            for (int i = 0_ i < table.length_ ++i) {_              table[i] = labels[currentBytecodeOffset + readInt(currentOffset)]__              currentOffset += 4__            }_            methodVisitor.visitTableSwitchInsn(low, high, defaultLabel, table)__            break__          }_        case Constants.LOOKUPSWITCH:_          {_            _            currentOffset += 4 - (currentBytecodeOffset & 3)__            _            Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)]__            int nPairs = readInt(currentOffset + 4)__            currentOffset += 8__            int[] keys = new int[nPairs]__            Label[] values = new Label[nPairs]__            for (int i = 0_ i < nPairs_ ++i) {_              keys[i] = readInt(currentOffset)__              values[i] = labels[currentBytecodeOffset + readInt(currentOffset + 4)]__              currentOffset += 8__            }_            methodVisitor.visitLookupSwitchInsn(defaultLabel, keys, values)__            break__          }_        case Constants.ILOAD:_        case Constants.LLOAD:_        case Constants.FLOAD:_        case Constants.DLOAD:_        case Constants.ALOAD:_        case Constants.ISTORE:_        case Constants.LSTORE:_        case Constants.FSTORE:_        case Constants.DSTORE:_        case Constants.ASTORE:_        case Constants.RET:_          methodVisitor.visitVarInsn(opcode, classFileBuffer[currentOffset + 1] & 0xFF)__          currentOffset += 2__          break__        case Constants.BIPUSH:_        case Constants.NEWARRAY:_          methodVisitor.visitIntInsn(opcode, classFileBuffer[currentOffset + 1])__          currentOffset += 2__          break__        case Constants.SIPUSH:_          methodVisitor.visitIntInsn(opcode, readShort(currentOffset + 1))__          currentOffset += 3__          break__        case Constants.LDC:_          methodVisitor.visitLdcInsn(_              readConst(classFileBuffer[currentOffset + 1] & 0xFF, charBuffer))__          currentOffset += 2__          break__        case Constants.LDC_W:_        case Constants.LDC2_W:_          methodVisitor.visitLdcInsn(readConst(readUnsignedShort(currentOffset + 1), charBuffer))__          currentOffset += 3__          break__        case Constants.GETSTATIC:_        case Constants.PUTSTATIC:_        case Constants.GETFIELD:_        case Constants.PUTFIELD:_        case Constants.INVOKEVIRTUAL:_        case Constants.INVOKESPECIAL:_        case Constants.INVOKESTATIC:_        case Constants.INVOKEINTERFACE:_          {_            int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)]__            int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__            String owner = readClass(cpInfoOffset, charBuffer)__            String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__            String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__            if (opcode < Opcodes.INVOKEVIRTUAL) {_              methodVisitor.visitFieldInsn(opcode, owner, name, descriptor)__            } else {_              boolean isInterface =_                  classFileBuffer[cpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG__              methodVisitor.visitMethodInsn(opcode, owner, name, descriptor, isInterface)__            }_            if (opcode == Opcodes.INVOKEINTERFACE) {_              currentOffset += 5__            } else {_              currentOffset += 3__            }_            break__          }_        case Constants.INVOKEDYNAMIC:_          {_            int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)]__            int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__            String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__            String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__            int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)]__            Handle handle =_                (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__            Object[] bootstrapMethodArguments =_                new Object[readUnsignedShort(bootstrapMethodOffset + 2)]__            bootstrapMethodOffset += 4__            for (int i = 0_ i < bootstrapMethodArguments.length_ i++) {_              bootstrapMethodArguments[i] =_                  readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__              bootstrapMethodOffset += 2__            }_            methodVisitor.visitInvokeDynamicInsn(_                name, descriptor, handle, bootstrapMethodArguments)__            currentOffset += 5__            break__          }_        case Constants.NEW:_        case Constants.ANEWARRAY:_        case Constants.CHECKCAST:_        case Constants.INSTANCEOF:_          methodVisitor.visitTypeInsn(opcode, readClass(currentOffset + 1, charBuffer))__          currentOffset += 3__          break__        case Constants.IINC:_          methodVisitor.visitIincInsn(_              classFileBuffer[currentOffset + 1] & 0xFF, classFileBuffer[currentOffset + 2])__          currentOffset += 3__          break__        case Constants.MULTIANEWARRAY:_          methodVisitor.visitMultiANewArrayInsn(_              readClass(currentOffset + 1, charBuffer), classFileBuffer[currentOffset + 3] & 0xFF)__          currentOffset += 4__          break__        default:_          throw new AssertionError()__      }__      _      while (visibleTypeAnnotationOffsets != null_          && currentVisibleTypeAnnotationIndex < visibleTypeAnnotationOffsets.length_          && currentVisibleTypeAnnotationBytecodeOffset <= currentBytecodeOffset) {_        if (currentVisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {_          _          int currentAnnotationOffset =_              readTypeAnnotationTarget(_                  context, visibleTypeAnnotationOffsets[currentVisibleTypeAnnotationIndex])__          _          String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__          currentAnnotationOffset += 2__          _          readElementValues(_              methodVisitor.visitInsnAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  annotationDescriptor,_                   true),_              currentAnnotationOffset,_               true,_              charBuffer)__        }_        currentVisibleTypeAnnotationBytecodeOffset =_            getTypeAnnotationBytecodeOffset(_                visibleTypeAnnotationOffsets, ++currentVisibleTypeAnnotationIndex)__      }__      _      while (invisibleTypeAnnotationOffsets != null_          && currentInvisibleTypeAnnotationIndex < invisibleTypeAnnotationOffsets.length_          && currentInvisibleTypeAnnotationBytecodeOffset <= currentBytecodeOffset) {_        if (currentInvisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {_          _          int currentAnnotationOffset =_              readTypeAnnotationTarget(_                  context, invisibleTypeAnnotationOffsets[currentInvisibleTypeAnnotationIndex])__          _          String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__          currentAnnotationOffset += 2__          _          readElementValues(_              methodVisitor.visitInsnAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  annotationDescriptor,_                   false),_              currentAnnotationOffset,_               true,_              charBuffer)__        }_        currentInvisibleTypeAnnotationBytecodeOffset =_            getTypeAnnotationBytecodeOffset(_                invisibleTypeAnnotationOffsets, ++currentInvisibleTypeAnnotationIndex)__      }_    }_    if (labels[codeLength] != null) {_      methodVisitor.visitLabel(labels[codeLength])__    }__    _    if (localVariableTableOffset != 0 && (context.parsingOptions & SKIP_DEBUG) == 0) {_      _      int[] typeTable = null__      if (localVariableTypeTableOffset != 0) {_        typeTable = new int[readUnsignedShort(localVariableTypeTableOffset) * 3]__        currentOffset = localVariableTypeTableOffset + 2__        int typeTableIndex = typeTable.length__        while (typeTableIndex > 0) {_          _          typeTable[--typeTableIndex] = currentOffset + 6__          typeTable[--typeTableIndex] = readUnsignedShort(currentOffset + 8)__          typeTable[--typeTableIndex] = readUnsignedShort(currentOffset)__          currentOffset += 10__        }_      }_      int localVariableTableLength = readUnsignedShort(localVariableTableOffset)__      currentOffset = localVariableTableOffset + 2__      while (localVariableTableLength-- > 0) {_        int startPc = readUnsignedShort(currentOffset)__        int length = readUnsignedShort(currentOffset + 2)__        String name = readUTF8(currentOffset + 4, charBuffer)__        String descriptor = readUTF8(currentOffset + 6, charBuffer)__        int index = readUnsignedShort(currentOffset + 8)__        currentOffset += 10__        String signature = null__        if (typeTable != null) {_          for (int i = 0_ i < typeTable.length_ i += 3) {_            if (typeTable[i] == startPc && typeTable[i + 1] == index) {_              signature = readUTF8(typeTable[i + 2], charBuffer)__              break__            }_          }_        }_        methodVisitor.visitLocalVariable(_            name, descriptor, signature, labels[startPc], labels[startPc + length], index)__      }_    }__    _    if (visibleTypeAnnotationOffsets != null) {_      for (int i = 0_ i < visibleTypeAnnotationOffsets.length_ ++i) {_        int targetType = readByte(visibleTypeAnnotationOffsets[i])__        if (targetType == TypeReference.LOCAL_VARIABLE_            || targetType == TypeReference.RESOURCE_VARIABLE) {_          _          currentOffset = readTypeAnnotationTarget(context, visibleTypeAnnotationOffsets[i])__          _          String annotationDescriptor = readUTF8(currentOffset, charBuffer)__          currentOffset += 2__          _          readElementValues(_              methodVisitor.visitLocalVariableAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  context.currentLocalVariableAnnotationRangeStarts,_                  context.currentLocalVariableAnnotationRangeEnds,_                  context.currentLocalVariableAnnotationRangeIndices,_                  annotationDescriptor,_                   true),_              currentOffset,_               true,_              charBuffer)__        }_      }_    }__    _    if (invisibleTypeAnnotationOffsets != null) {_      for (int i = 0_ i < invisibleTypeAnnotationOffsets.length_ ++i) {_        int targetType = readByte(invisibleTypeAnnotationOffsets[i])__        if (targetType == TypeReference.LOCAL_VARIABLE_            || targetType == TypeReference.RESOURCE_VARIABLE) {_          _          currentOffset = readTypeAnnotationTarget(context, invisibleTypeAnnotationOffsets[i])__          _          String annotationDescriptor = readUTF8(currentOffset, charBuffer)__          currentOffset += 2__          _          readElementValues(_              methodVisitor.visitLocalVariableAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  context.currentLocalVariableAnnotationRangeStarts,_                  context.currentLocalVariableAnnotationRangeEnds,_                  context.currentLocalVariableAnnotationRangeIndices,_                  annotationDescriptor,_                   false),_              currentOffset,_               true,_              charBuffer)__        }_      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      methodVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    methodVisitor.visitMaxs(maxStack, maxLocals)__  };reads,a,jvms,code,attribute,and,makes,the,given,visitor,visit,it,param,method,visitor,the,visitor,that,must,visit,the,code,attribute,param,context,information,about,the,class,being,parsed,param,code,offset,the,start,offset,in,link,b,of,the,code,attribute,excluding,its,and,fields;private,void,read,code,final,method,visitor,method,visitor,final,context,context,final,int,code,offset,int,current,offset,code,offset,final,byte,class,file,buffer,b,final,char,char,buffer,context,char,buffer,final,int,max,stack,read,unsigned,short,current,offset,final,int,max,locals,read,unsigned,short,current,offset,2,final,int,code,length,read,int,current,offset,4,current,offset,8,final,int,bytecode,start,offset,current,offset,final,int,bytecode,end,offset,current,offset,code,length,final,label,labels,context,current,method,labels,new,label,code,length,1,while,current,offset,bytecode,end,offset,final,int,bytecode,offset,current,offset,bytecode,start,offset,final,int,opcode,class,file,buffer,current,offset,0x,ff,switch,opcode,case,constants,nop,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,iaload,case,constants,laload,case,constants,faload,case,constants,daload,case,constants,aaload,case,constants,baload,case,constants,caload,case,constants,saload,case,constants,iastore,case,constants,lastore,case,constants,fastore,case,constants,dastore,case,constants,aastore,case,constants,bastore,case,constants,castore,case,constants,sastore,case,constants,pop,case,constants,pop2,case,constants,dup,case,constants,case,constants,case,constants,dup2,case,constants,case,constants,case,constants,swap,case,constants,iadd,case,constants,ladd,case,constants,fadd,case,constants,dadd,case,constants,isub,case,constants,lsub,case,constants,fsub,case,constants,dsub,case,constants,imul,case,constants,lmul,case,constants,fmul,case,constants,dmul,case,constants,idiv,case,constants,ldiv,case,constants,fdiv,case,constants,ddiv,case,constants,irem,case,constants,lrem,case,constants,frem,case,constants,drem,case,constants,ineg,case,constants,lneg,case,constants,fneg,case,constants,dneg,case,constants,ishl,case,constants,lshl,case,constants,ishr,case,constants,lshr,case,constants,iushr,case,constants,lushr,case,constants,iand,case,constants,land,case,constants,ior,case,constants,lor,case,constants,ixor,case,constants,lxor,case,constants,i2l,case,constants,i2f,case,constants,i2d,case,constants,l2i,case,constants,l2f,case,constants,l2d,case,constants,f2i,case,constants,f2l,case,constants,f2d,case,constants,d2i,case,constants,d2l,case,constants,d2f,case,constants,i2b,case,constants,i2c,case,constants,i2s,case,constants,lcmp,case,constants,fcmpl,case,constants,fcmpg,case,constants,dcmpl,case,constants,dcmpg,case,constants,ireturn,case,constants,lreturn,case,constants,freturn,case,constants,dreturn,case,constants,areturn,case,constants,return,case,constants,arraylength,case,constants,athrow,case,constants,monitorenter,case,constants,monitorexit,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,current,offset,1,break,case,constants,ifeq,case,constants,ifne,case,constants,iflt,case,constants,ifge,case,constants,ifgt,case,constants,ifle,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,goto,case,constants,jsr,case,constants,ifnull,case,constants,ifnonnull,create,label,bytecode,offset,read,short,current,offset,1,labels,current,offset,3,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,create,label,bytecode,offset,read,unsigned,short,current,offset,1,labels,current,offset,3,break,case,constants,case,constants,case,constants,create,label,bytecode,offset,read,int,current,offset,1,labels,current,offset,5,break,case,constants,wide,switch,class,file,buffer,current,offset,1,0x,ff,case,constants,iload,case,constants,fload,case,constants,aload,case,constants,lload,case,constants,dload,case,constants,istore,case,constants,fstore,case,constants,astore,case,constants,lstore,case,constants,dstore,case,constants,ret,current,offset,4,break,case,constants,iinc,current,offset,6,break,default,throw,new,illegal,argument,exception,break,case,constants,tableswitch,current,offset,4,bytecode,offset,3,create,label,bytecode,offset,read,int,current,offset,labels,int,num,table,entries,read,int,current,offset,8,read,int,current,offset,4,1,current,offset,12,while,num,table,entries,0,create,label,bytecode,offset,read,int,current,offset,labels,current,offset,4,break,case,constants,lookupswitch,current,offset,4,bytecode,offset,3,create,label,bytecode,offset,read,int,current,offset,labels,int,num,switch,cases,read,int,current,offset,4,current,offset,8,while,num,switch,cases,0,create,label,bytecode,offset,read,int,current,offset,4,labels,current,offset,8,break,case,constants,iload,case,constants,lload,case,constants,fload,case,constants,dload,case,constants,aload,case,constants,istore,case,constants,lstore,case,constants,fstore,case,constants,dstore,case,constants,astore,case,constants,ret,case,constants,bipush,case,constants,newarray,case,constants,ldc,current,offset,2,break,case,constants,sipush,case,constants,case,constants,case,constants,getstatic,case,constants,putstatic,case,constants,getfield,case,constants,putfield,case,constants,invokevirtual,case,constants,invokespecial,case,constants,invokestatic,case,constants,new,case,constants,anewarray,case,constants,checkcast,case,constants,instanceof,case,constants,iinc,current,offset,3,break,case,constants,invokeinterface,case,constants,invokedynamic,current,offset,5,break,case,constants,multianewarray,current,offset,4,break,default,throw,new,illegal,argument,exception,int,exception,table,length,read,unsigned,short,current,offset,current,offset,2,while,exception,table,length,0,label,start,create,label,read,unsigned,short,current,offset,labels,label,end,create,label,read,unsigned,short,current,offset,2,labels,label,handler,create,label,read,unsigned,short,current,offset,4,labels,string,catch,type,read,utf8,cp,info,offsets,read,unsigned,short,current,offset,6,char,buffer,current,offset,8,method,visitor,visit,try,catch,block,start,end,handler,catch,type,int,stack,map,frame,offset,0,int,stack,map,table,end,offset,0,boolean,compressed,frames,true,int,local,variable,table,offset,0,int,local,variable,type,table,offset,0,int,visible,type,annotation,offsets,null,int,invisible,type,annotation,offsets,null,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,equals,attribute,name,if,context,parsing,options,0,local,variable,table,offset,current,offset,int,current,local,variable,table,offset,current,offset,int,local,variable,table,length,read,unsigned,short,current,local,variable,table,offset,current,local,variable,table,offset,2,while,local,variable,table,length,0,int,start,pc,read,unsigned,short,current,local,variable,table,offset,create,debug,label,start,pc,labels,int,length,read,unsigned,short,current,local,variable,table,offset,2,create,debug,label,start,pc,length,labels,current,local,variable,table,offset,10,else,if,constants,equals,attribute,name,local,variable,type,table,offset,current,offset,else,if,constants,equals,attribute,name,if,context,parsing,options,0,int,current,line,number,table,offset,current,offset,int,line,number,table,length,read,unsigned,short,current,line,number,table,offset,current,line,number,table,offset,2,while,line,number,table,length,0,int,start,pc,read,unsigned,short,current,line,number,table,offset,int,line,number,read,unsigned,short,current,line,number,table,offset,2,current,line,number,table,offset,4,create,debug,label,start,pc,labels,labels,start,pc,add,line,number,line,number,else,if,constants,equals,attribute,name,visible,type,annotation,offsets,read,type,annotations,method,visitor,context,current,offset,true,else,if,constants,equals,attribute,name,invisible,type,annotation,offsets,read,type,annotations,method,visitor,context,current,offset,false,else,if,constants,equals,attribute,name,if,context,parsing,options,0,stack,map,frame,offset,current,offset,2,stack,map,table,end,offset,current,offset,attribute,length,else,if,stack,map,equals,attribute,name,if,context,parsing,options,0,stack,map,frame,offset,current,offset,2,stack,map,table,end,offset,current,offset,attribute,length,compressed,frames,false,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,code,offset,labels,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,final,boolean,expand,frames,context,parsing,options,0,if,stack,map,frame,offset,0,context,current,frame,offset,1,context,current,frame,type,0,context,current,frame,local,count,0,context,current,frame,local,count,delta,0,context,current,frame,local,types,new,object,max,locals,context,current,frame,stack,count,0,context,current,frame,stack,types,new,object,max,stack,if,expand,frames,compute,implicit,frame,context,for,int,offset,stack,map,frame,offset,offset,stack,map,table,end,offset,2,offset,if,class,file,buffer,offset,frame,int,potential,bytecode,offset,read,unsigned,short,offset,1,if,potential,bytecode,offset,0,potential,bytecode,offset,code,length,class,file,buffer,bytecode,start,offset,potential,bytecode,offset,0x,ff,opcodes,new,create,label,potential,bytecode,offset,labels,if,expand,frames,context,parsing,options,0,method,visitor,visit,frame,opcodes,max,locals,null,0,null,int,current,visible,type,annotation,index,0,int,current,visible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,visible,type,annotation,offsets,0,int,current,invisible,type,annotation,index,0,int,current,invisible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,invisible,type,annotation,offsets,0,boolean,insert,frame,false,final,int,wide,jump,opcode,delta,context,parsing,options,0,constants,0,current,offset,bytecode,start,offset,while,current,offset,bytecode,end,offset,final,int,current,bytecode,offset,current,offset,bytecode,start,offset,label,current,label,labels,current,bytecode,offset,if,current,label,null,current,label,accept,method,visitor,context,parsing,options,0,while,stack,map,frame,offset,0,context,current,frame,offset,current,bytecode,offset,context,current,frame,offset,1,if,context,current,frame,offset,1,if,compressed,frames,expand,frames,method,visitor,visit,frame,opcodes,context,current,frame,local,count,context,current,frame,local,types,context,current,frame,stack,count,context,current,frame,stack,types,else,method,visitor,visit,frame,context,current,frame,type,context,current,frame,local,count,delta,context,current,frame,local,types,context,current,frame,stack,count,context,current,frame,stack,types,insert,frame,false,if,stack,map,frame,offset,stack,map,table,end,offset,stack,map,frame,offset,read,stack,map,frame,stack,map,frame,offset,compressed,frames,expand,frames,context,else,stack,map,frame,offset,0,if,insert,frame,if,context,parsing,options,0,method,visitor,visit,frame,constants,0,null,0,null,insert,frame,false,int,opcode,class,file,buffer,current,offset,0x,ff,switch,opcode,case,constants,nop,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,iaload,case,constants,laload,case,constants,faload,case,constants,daload,case,constants,aaload,case,constants,baload,case,constants,caload,case,constants,saload,case,constants,iastore,case,constants,lastore,case,constants,fastore,case,constants,dastore,case,constants,aastore,case,constants,bastore,case,constants,castore,case,constants,sastore,case,constants,pop,case,constants,pop2,case,constants,dup,case,constants,case,constants,case,constants,dup2,case,constants,case,constants,case,constants,swap,case,constants,iadd,case,constants,ladd,case,constants,fadd,case,constants,dadd,case,constants,isub,case,constants,lsub,case,constants,fsub,case,constants,dsub,case,constants,imul,case,constants,lmul,case,constants,fmul,case,constants,dmul,case,constants,idiv,case,constants,ldiv,case,constants,fdiv,case,constants,ddiv,case,constants,irem,case,constants,lrem,case,constants,frem,case,constants,drem,case,constants,ineg,case,constants,lneg,case,constants,fneg,case,constants,dneg,case,constants,ishl,case,constants,lshl,case,constants,ishr,case,constants,lshr,case,constants,iushr,case,constants,lushr,case,constants,iand,case,constants,land,case,constants,ior,case,constants,lor,case,constants,ixor,case,constants,lxor,case,constants,i2l,case,constants,i2f,case,constants,i2d,case,constants,l2i,case,constants,l2f,case,constants,l2d,case,constants,f2i,case,constants,f2l,case,constants,f2d,case,constants,d2i,case,constants,d2l,case,constants,d2f,case,constants,i2b,case,constants,i2c,case,constants,i2s,case,constants,lcmp,case,constants,fcmpl,case,constants,fcmpg,case,constants,dcmpl,case,constants,dcmpg,case,constants,ireturn,case,constants,lreturn,case,constants,freturn,case,constants,dreturn,case,constants,areturn,case,constants,return,case,constants,arraylength,case,constants,athrow,case,constants,monitorenter,case,constants,monitorexit,method,visitor,visit,insn,opcode,current,offset,1,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,constants,method,visitor,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,current,offset,1,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,constants,method,visitor,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,current,offset,1,break,case,constants,ifeq,case,constants,ifne,case,constants,iflt,case,constants,ifge,case,constants,ifgt,case,constants,ifle,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,goto,case,constants,jsr,case,constants,ifnull,case,constants,ifnonnull,method,visitor,visit,jump,insn,opcode,labels,current,bytecode,offset,read,short,current,offset,1,current,offset,3,break,case,constants,case,constants,method,visitor,visit,jump,insn,opcode,wide,jump,opcode,delta,labels,current,bytecode,offset,read,int,current,offset,1,current,offset,5,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,opcode,constants,opcode,constants,opcode,constants,label,target,labels,current,bytecode,offset,read,unsigned,short,current,offset,1,if,opcode,opcodes,goto,opcode,opcodes,jsr,method,visitor,visit,jump,insn,opcode,constants,target,else,opcode,opcode,opcodes,goto,opcode,1,1,1,opcode,1,label,endif,create,label,current,bytecode,offset,3,labels,method,visitor,visit,jump,insn,opcode,endif,method,visitor,visit,jump,insn,constants,target,insert,frame,true,current,offset,3,break,case,constants,method,visitor,visit,jump,insn,constants,labels,current,bytecode,offset,read,int,current,offset,1,insert,frame,true,current,offset,5,break,case,constants,wide,opcode,class,file,buffer,current,offset,1,0x,ff,if,opcode,opcodes,iinc,method,visitor,visit,iinc,insn,read,unsigned,short,current,offset,2,read,short,current,offset,4,current,offset,6,else,method,visitor,visit,var,insn,opcode,read,unsigned,short,current,offset,2,current,offset,4,break,case,constants,tableswitch,current,offset,4,current,bytecode,offset,3,label,default,label,labels,current,bytecode,offset,read,int,current,offset,int,low,read,int,current,offset,4,int,high,read,int,current,offset,8,current,offset,12,label,table,new,label,high,low,1,for,int,i,0,i,table,length,i,table,i,labels,current,bytecode,offset,read,int,current,offset,current,offset,4,method,visitor,visit,table,switch,insn,low,high,default,label,table,break,case,constants,lookupswitch,current,offset,4,current,bytecode,offset,3,label,default,label,labels,current,bytecode,offset,read,int,current,offset,int,n,pairs,read,int,current,offset,4,current,offset,8,int,keys,new,int,n,pairs,label,values,new,label,n,pairs,for,int,i,0,i,n,pairs,i,keys,i,read,int,current,offset,values,i,labels,current,bytecode,offset,read,int,current,offset,4,current,offset,8,method,visitor,visit,lookup,switch,insn,default,label,keys,values,break,case,constants,iload,case,constants,lload,case,constants,fload,case,constants,dload,case,constants,aload,case,constants,istore,case,constants,lstore,case,constants,fstore,case,constants,dstore,case,constants,astore,case,constants,ret,method,visitor,visit,var,insn,opcode,class,file,buffer,current,offset,1,0x,ff,current,offset,2,break,case,constants,bipush,case,constants,newarray,method,visitor,visit,int,insn,opcode,class,file,buffer,current,offset,1,current,offset,2,break,case,constants,sipush,method,visitor,visit,int,insn,opcode,read,short,current,offset,1,current,offset,3,break,case,constants,ldc,method,visitor,visit,ldc,insn,read,const,class,file,buffer,current,offset,1,0x,ff,char,buffer,current,offset,2,break,case,constants,case,constants,method,visitor,visit,ldc,insn,read,const,read,unsigned,short,current,offset,1,char,buffer,current,offset,3,break,case,constants,getstatic,case,constants,putstatic,case,constants,getfield,case,constants,putfield,case,constants,invokevirtual,case,constants,invokespecial,case,constants,invokestatic,case,constants,invokeinterface,int,cp,info,offset,cp,info,offsets,read,unsigned,short,current,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,owner,read,class,cp,info,offset,char,buffer,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,if,opcode,opcodes,invokevirtual,method,visitor,visit,field,insn,opcode,owner,name,descriptor,else,boolean,is,interface,class,file,buffer,cp,info,offset,1,symbol,method,visitor,visit,method,insn,opcode,owner,name,descriptor,is,interface,if,opcode,opcodes,invokeinterface,current,offset,5,else,current,offset,3,break,case,constants,invokedynamic,int,cp,info,offset,cp,info,offsets,read,unsigned,short,current,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,int,bootstrap,method,offset,bootstrap,method,offsets,read,unsigned,short,cp,info,offset,handle,handle,handle,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,object,bootstrap,method,arguments,new,object,read,unsigned,short,bootstrap,method,offset,2,bootstrap,method,offset,4,for,int,i,0,i,bootstrap,method,arguments,length,i,bootstrap,method,arguments,i,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,bootstrap,method,offset,2,method,visitor,visit,invoke,dynamic,insn,name,descriptor,handle,bootstrap,method,arguments,current,offset,5,break,case,constants,new,case,constants,anewarray,case,constants,checkcast,case,constants,instanceof,method,visitor,visit,type,insn,opcode,read,class,current,offset,1,char,buffer,current,offset,3,break,case,constants,iinc,method,visitor,visit,iinc,insn,class,file,buffer,current,offset,1,0x,ff,class,file,buffer,current,offset,2,current,offset,3,break,case,constants,multianewarray,method,visitor,visit,multi,anew,array,insn,read,class,current,offset,1,char,buffer,class,file,buffer,current,offset,3,0x,ff,current,offset,4,break,default,throw,new,assertion,error,while,visible,type,annotation,offsets,null,current,visible,type,annotation,index,visible,type,annotation,offsets,length,current,visible,type,annotation,bytecode,offset,current,bytecode,offset,if,current,visible,type,annotation,bytecode,offset,current,bytecode,offset,int,current,annotation,offset,read,type,annotation,target,context,visible,type,annotation,offsets,current,visible,type,annotation,index,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,read,element,values,method,visitor,visit,insn,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,current,visible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,visible,type,annotation,offsets,current,visible,type,annotation,index,while,invisible,type,annotation,offsets,null,current,invisible,type,annotation,index,invisible,type,annotation,offsets,length,current,invisible,type,annotation,bytecode,offset,current,bytecode,offset,if,current,invisible,type,annotation,bytecode,offset,current,bytecode,offset,int,current,annotation,offset,read,type,annotation,target,context,invisible,type,annotation,offsets,current,invisible,type,annotation,index,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,read,element,values,method,visitor,visit,insn,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,current,invisible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,invisible,type,annotation,offsets,current,invisible,type,annotation,index,if,labels,code,length,null,method,visitor,visit,label,labels,code,length,if,local,variable,table,offset,0,context,parsing,options,0,int,type,table,null,if,local,variable,type,table,offset,0,type,table,new,int,read,unsigned,short,local,variable,type,table,offset,3,current,offset,local,variable,type,table,offset,2,int,type,table,index,type,table,length,while,type,table,index,0,type,table,type,table,index,current,offset,6,type,table,type,table,index,read,unsigned,short,current,offset,8,type,table,type,table,index,read,unsigned,short,current,offset,current,offset,10,int,local,variable,table,length,read,unsigned,short,local,variable,table,offset,current,offset,local,variable,table,offset,2,while,local,variable,table,length,0,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,string,name,read,utf8,current,offset,4,char,buffer,string,descriptor,read,utf8,current,offset,6,char,buffer,int,index,read,unsigned,short,current,offset,8,current,offset,10,string,signature,null,if,type,table,null,for,int,i,0,i,type,table,length,i,3,if,type,table,i,start,pc,type,table,i,1,index,signature,read,utf8,type,table,i,2,char,buffer,break,method,visitor,visit,local,variable,name,descriptor,signature,labels,start,pc,labels,start,pc,length,index,if,visible,type,annotation,offsets,null,for,int,i,0,i,visible,type,annotation,offsets,length,i,int,target,type,read,byte,visible,type,annotation,offsets,i,if,target,type,type,reference,target,type,type,reference,current,offset,read,type,annotation,target,context,visible,type,annotation,offsets,i,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,read,element,values,method,visitor,visit,local,variable,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,context,current,local,variable,annotation,range,starts,context,current,local,variable,annotation,range,ends,context,current,local,variable,annotation,range,indices,annotation,descriptor,true,current,offset,true,char,buffer,if,invisible,type,annotation,offsets,null,for,int,i,0,i,invisible,type,annotation,offsets,length,i,int,target,type,read,byte,invisible,type,annotation,offsets,i,if,target,type,type,reference,target,type,type,reference,current,offset,read,type,annotation,target,context,invisible,type,annotation,offsets,i,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,read,element,values,method,visitor,visit,local,variable,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,context,current,local,variable,annotation,range,starts,context,current,local,variable,annotation,range,ends,context,current,local,variable,annotation,range,indices,annotation,descriptor,false,current,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,method,visitor,visit,attribute,attributes,attributes,next,attribute,method,visitor,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(       final MethodVisitor methodVisitor, final Context context, final int codeOffset);1536747989;Reads a JVMS 'Code' attribute and makes the given visitor visit it.__@param methodVisitor the visitor that must visit the Code attribute._@param context information about the class being parsed._@param codeOffset the start offset in {@link #b} of the Code attribute, excluding its_attribute_name_index and attribute_length fields.;private void readCode(_      final MethodVisitor methodVisitor, final Context context, final int codeOffset) {_    int currentOffset = codeOffset___    _    final byte[] classFileBuffer = b__    final char[] charBuffer = context.charBuffer__    final int maxStack = readUnsignedShort(currentOffset)__    final int maxLocals = readUnsignedShort(currentOffset + 2)__    final int codeLength = readInt(currentOffset + 4)__    currentOffset += 8___    _    final int bytecodeStartOffset = currentOffset__    final int bytecodeEndOffset = currentOffset + codeLength__    final Label[] labels = context.currentMethodLabels = new Label[codeLength + 1]__    while (currentOffset < bytecodeEndOffset) {_      final int bytecodeOffset = currentOffset - bytecodeStartOffset__      final int opcode = classFileBuffer[currentOffset] & 0xFF__      switch (opcode) {_        case Constants.NOP:_        case Constants.ACONST_NULL:_        case Constants.ICONST_M1:_        case Constants.ICONST_0:_        case Constants.ICONST_1:_        case Constants.ICONST_2:_        case Constants.ICONST_3:_        case Constants.ICONST_4:_        case Constants.ICONST_5:_        case Constants.LCONST_0:_        case Constants.LCONST_1:_        case Constants.FCONST_0:_        case Constants.FCONST_1:_        case Constants.FCONST_2:_        case Constants.DCONST_0:_        case Constants.DCONST_1:_        case Constants.IALOAD:_        case Constants.LALOAD:_        case Constants.FALOAD:_        case Constants.DALOAD:_        case Constants.AALOAD:_        case Constants.BALOAD:_        case Constants.CALOAD:_        case Constants.SALOAD:_        case Constants.IASTORE:_        case Constants.LASTORE:_        case Constants.FASTORE:_        case Constants.DASTORE:_        case Constants.AASTORE:_        case Constants.BASTORE:_        case Constants.CASTORE:_        case Constants.SASTORE:_        case Constants.POP:_        case Constants.POP2:_        case Constants.DUP:_        case Constants.DUP_X1:_        case Constants.DUP_X2:_        case Constants.DUP2:_        case Constants.DUP2_X1:_        case Constants.DUP2_X2:_        case Constants.SWAP:_        case Constants.IADD:_        case Constants.LADD:_        case Constants.FADD:_        case Constants.DADD:_        case Constants.ISUB:_        case Constants.LSUB:_        case Constants.FSUB:_        case Constants.DSUB:_        case Constants.IMUL:_        case Constants.LMUL:_        case Constants.FMUL:_        case Constants.DMUL:_        case Constants.IDIV:_        case Constants.LDIV:_        case Constants.FDIV:_        case Constants.DDIV:_        case Constants.IREM:_        case Constants.LREM:_        case Constants.FREM:_        case Constants.DREM:_        case Constants.INEG:_        case Constants.LNEG:_        case Constants.FNEG:_        case Constants.DNEG:_        case Constants.ISHL:_        case Constants.LSHL:_        case Constants.ISHR:_        case Constants.LSHR:_        case Constants.IUSHR:_        case Constants.LUSHR:_        case Constants.IAND:_        case Constants.LAND:_        case Constants.IOR:_        case Constants.LOR:_        case Constants.IXOR:_        case Constants.LXOR:_        case Constants.I2L:_        case Constants.I2F:_        case Constants.I2D:_        case Constants.L2I:_        case Constants.L2F:_        case Constants.L2D:_        case Constants.F2I:_        case Constants.F2L:_        case Constants.F2D:_        case Constants.D2I:_        case Constants.D2L:_        case Constants.D2F:_        case Constants.I2B:_        case Constants.I2C:_        case Constants.I2S:_        case Constants.LCMP:_        case Constants.FCMPL:_        case Constants.FCMPG:_        case Constants.DCMPL:_        case Constants.DCMPG:_        case Constants.IRETURN:_        case Constants.LRETURN:_        case Constants.FRETURN:_        case Constants.DRETURN:_        case Constants.ARETURN:_        case Constants.RETURN:_        case Constants.ARRAYLENGTH:_        case Constants.ATHROW:_        case Constants.MONITORENTER:_        case Constants.MONITOREXIT:_        case Constants.ILOAD_0:_        case Constants.ILOAD_1:_        case Constants.ILOAD_2:_        case Constants.ILOAD_3:_        case Constants.LLOAD_0:_        case Constants.LLOAD_1:_        case Constants.LLOAD_2:_        case Constants.LLOAD_3:_        case Constants.FLOAD_0:_        case Constants.FLOAD_1:_        case Constants.FLOAD_2:_        case Constants.FLOAD_3:_        case Constants.DLOAD_0:_        case Constants.DLOAD_1:_        case Constants.DLOAD_2:_        case Constants.DLOAD_3:_        case Constants.ALOAD_0:_        case Constants.ALOAD_1:_        case Constants.ALOAD_2:_        case Constants.ALOAD_3:_        case Constants.ISTORE_0:_        case Constants.ISTORE_1:_        case Constants.ISTORE_2:_        case Constants.ISTORE_3:_        case Constants.LSTORE_0:_        case Constants.LSTORE_1:_        case Constants.LSTORE_2:_        case Constants.LSTORE_3:_        case Constants.FSTORE_0:_        case Constants.FSTORE_1:_        case Constants.FSTORE_2:_        case Constants.FSTORE_3:_        case Constants.DSTORE_0:_        case Constants.DSTORE_1:_        case Constants.DSTORE_2:_        case Constants.DSTORE_3:_        case Constants.ASTORE_0:_        case Constants.ASTORE_1:_        case Constants.ASTORE_2:_        case Constants.ASTORE_3:_          currentOffset += 1__          break__        case Constants.IFEQ:_        case Constants.IFNE:_        case Constants.IFLT:_        case Constants.IFGE:_        case Constants.IFGT:_        case Constants.IFLE:_        case Constants.IF_ICMPEQ:_        case Constants.IF_ICMPNE:_        case Constants.IF_ICMPLT:_        case Constants.IF_ICMPGE:_        case Constants.IF_ICMPGT:_        case Constants.IF_ICMPLE:_        case Constants.IF_ACMPEQ:_        case Constants.IF_ACMPNE:_        case Constants.GOTO:_        case Constants.JSR:_        case Constants.IFNULL:_        case Constants.IFNONNULL:_          createLabel(bytecodeOffset + readShort(currentOffset + 1), labels)__          currentOffset += 3__          break__        case Constants.ASM_IFEQ:_        case Constants.ASM_IFNE:_        case Constants.ASM_IFLT:_        case Constants.ASM_IFGE:_        case Constants.ASM_IFGT:_        case Constants.ASM_IFLE:_        case Constants.ASM_IF_ICMPEQ:_        case Constants.ASM_IF_ICMPNE:_        case Constants.ASM_IF_ICMPLT:_        case Constants.ASM_IF_ICMPGE:_        case Constants.ASM_IF_ICMPGT:_        case Constants.ASM_IF_ICMPLE:_        case Constants.ASM_IF_ACMPEQ:_        case Constants.ASM_IF_ACMPNE:_        case Constants.ASM_GOTO:_        case Constants.ASM_JSR:_        case Constants.ASM_IFNULL:_        case Constants.ASM_IFNONNULL:_          createLabel(bytecodeOffset + readUnsignedShort(currentOffset + 1), labels)__          currentOffset += 3__          break__        case Constants.GOTO_W:_        case Constants.JSR_W:_        case Constants.ASM_GOTO_W:_          createLabel(bytecodeOffset + readInt(currentOffset + 1), labels)__          currentOffset += 5__          break__        case Constants.WIDE:_          switch (classFileBuffer[currentOffset + 1] & 0xFF) {_            case Constants.ILOAD:_            case Constants.FLOAD:_            case Constants.ALOAD:_            case Constants.LLOAD:_            case Constants.DLOAD:_            case Constants.ISTORE:_            case Constants.FSTORE:_            case Constants.ASTORE:_            case Constants.LSTORE:_            case Constants.DSTORE:_            case Constants.RET:_              currentOffset += 4__              break__            case Constants.IINC:_              currentOffset += 6__              break__            default:_              throw new IllegalArgumentException()__          }_          break__        case Constants.TABLESWITCH:_          _          currentOffset += 4 - (bytecodeOffset & 3)__          _          createLabel(bytecodeOffset + readInt(currentOffset), labels)__          int numTableEntries = readInt(currentOffset + 8) - readInt(currentOffset + 4) + 1__          currentOffset += 12__          _          while (numTableEntries-- > 0) {_            createLabel(bytecodeOffset + readInt(currentOffset), labels)__            currentOffset += 4__          }_          break__        case Constants.LOOKUPSWITCH:_          _          currentOffset += 4 - (bytecodeOffset & 3)__          _          createLabel(bytecodeOffset + readInt(currentOffset), labels)__          int numSwitchCases = readInt(currentOffset + 4)__          currentOffset += 8__          _          while (numSwitchCases-- > 0) {_            createLabel(bytecodeOffset + readInt(currentOffset + 4), labels)__            currentOffset += 8__          }_          break__        case Constants.ILOAD:_        case Constants.LLOAD:_        case Constants.FLOAD:_        case Constants.DLOAD:_        case Constants.ALOAD:_        case Constants.ISTORE:_        case Constants.LSTORE:_        case Constants.FSTORE:_        case Constants.DSTORE:_        case Constants.ASTORE:_        case Constants.RET:_        case Constants.BIPUSH:_        case Constants.NEWARRAY:_        case Constants.LDC:_          currentOffset += 2__          break__        case Constants.SIPUSH:_        case Constants.LDC_W:_        case Constants.LDC2_W:_        case Constants.GETSTATIC:_        case Constants.PUTSTATIC:_        case Constants.GETFIELD:_        case Constants.PUTFIELD:_        case Constants.INVOKEVIRTUAL:_        case Constants.INVOKESPECIAL:_        case Constants.INVOKESTATIC:_        case Constants.NEW:_        case Constants.ANEWARRAY:_        case Constants.CHECKCAST:_        case Constants.INSTANCEOF:_        case Constants.IINC:_          currentOffset += 3__          break__        case Constants.INVOKEINTERFACE:_        case Constants.INVOKEDYNAMIC:_          currentOffset += 5__          break__        case Constants.MULTIANEWARRAY:_          currentOffset += 4__          break__        default:_          throw new IllegalArgumentException()__      }_    }__    _    _    {_      int exceptionTableLength = readUnsignedShort(currentOffset)__      currentOffset += 2__      while (exceptionTableLength-- > 0) {_        Label start = createLabel(readUnsignedShort(currentOffset), labels)__        Label end = createLabel(readUnsignedShort(currentOffset + 2), labels)__        Label handler = createLabel(readUnsignedShort(currentOffset + 4), labels)__        String catchType =_            readUTF8(cpInfoOffsets[readUnsignedShort(currentOffset + 6)], charBuffer)__        currentOffset += 8__        methodVisitor.visitTryCatchBlock(start, end, handler, catchType)__      }_    }__    _    _    _    _    _    _    int stackMapFrameOffset = 0__    _    int stackMapTableEndOffset = 0__    _    boolean compressedFrames = true__    _    int localVariableTableOffset = 0__    _    int localVariableTypeTableOffset = 0__    _    _    int[] visibleTypeAnnotationOffsets = null__    _    _    int[] invisibleTypeAnnotationOffsets = null__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      if (Constants.LOCAL_VARIABLE_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_DEBUG) == 0) {_          localVariableTableOffset = currentOffset__          _          int currentLocalVariableTableOffset = currentOffset__          int localVariableTableLength = readUnsignedShort(currentLocalVariableTableOffset)__          currentLocalVariableTableOffset += 2__          while (localVariableTableLength-- > 0) {_            int startPc = readUnsignedShort(currentLocalVariableTableOffset)__            createDebugLabel(startPc, labels)__            int length = readUnsignedShort(currentLocalVariableTableOffset + 2)__            createDebugLabel(startPc + length, labels)__            _            currentLocalVariableTableOffset += 10__          }_        }_      } else if (Constants.LOCAL_VARIABLE_TYPE_TABLE.equals(attributeName)) {_        localVariableTypeTableOffset = currentOffset__        _        _      } else if (Constants.LINE_NUMBER_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_DEBUG) == 0) {_          _          int currentLineNumberTableOffset = currentOffset__          int lineNumberTableLength = readUnsignedShort(currentLineNumberTableOffset)__          currentLineNumberTableOffset += 2__          while (lineNumberTableLength-- > 0) {_            int startPc = readUnsignedShort(currentLineNumberTableOffset)__            int lineNumber = readUnsignedShort(currentLineNumberTableOffset + 2)__            currentLineNumberTableOffset += 4__            createDebugLabel(startPc, labels)__            labels[startPc].addLineNumber(lineNumber)__          }_        }_      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        visibleTypeAnnotationOffsets =_            readTypeAnnotations(methodVisitor, context, currentOffset,  true)__        _        _        _        _        _        _      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        invisibleTypeAnnotationOffsets =_            readTypeAnnotations(methodVisitor, context, currentOffset,  false)__        _      } else if (Constants.STACK_MAP_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_FRAMES) == 0) {_          stackMapFrameOffset = currentOffset + 2__          stackMapTableEndOffset = currentOffset + attributeLength__        }_        _        _        _        _        _        _        _        _        _      } else if ("StackMap".equals(attributeName)) {_        if ((context.parsingOptions & SKIP_FRAMES) == 0) {_          stackMapFrameOffset = currentOffset + 2__          stackMapTableEndOffset = currentOffset + attributeLength__          compressedFrames = false__        }_        _        _        _        _      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                codeOffset,_                labels)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    _    final boolean expandFrames = (context.parsingOptions & EXPAND_FRAMES) != 0__    if (stackMapFrameOffset != 0) {_      _      _      _      context.currentFrameOffset = -1__      context.currentFrameType = 0__      context.currentFrameLocalCount = 0__      context.currentFrameLocalCountDelta = 0__      context.currentFrameLocalTypes = new Object[maxLocals]__      context.currentFrameStackCount = 0__      context.currentFrameStackTypes = new Object[maxStack]__      if (expandFrames) {_        computeImplicitFrame(context)__      }_      _      _      _      _      _      _      _      for (int offset = stackMapFrameOffset_ offset < stackMapTableEndOffset - 2_ ++offset) {_        if (classFileBuffer[offset] == Frame.ITEM_UNINITIALIZED) {_          int potentialBytecodeOffset = readUnsignedShort(offset + 1)__          if (potentialBytecodeOffset >= 0_              && potentialBytecodeOffset < codeLength_              && (classFileBuffer[bytecodeStartOffset + potentialBytecodeOffset] & 0xFF)_                  == Opcodes.NEW) {_            createLabel(potentialBytecodeOffset, labels)__          }_        }_      }_    }_    if (expandFrames && (context.parsingOptions & EXPAND_ASM_INSNS) != 0) {_      _      _      _      _      _      _      methodVisitor.visitFrame(Opcodes.F_NEW, maxLocals, null, 0, null)__    }__    _    __    _    _    int currentVisibleTypeAnnotationIndex = 0__    _    int currentVisibleTypeAnnotationBytecodeOffset =_        getTypeAnnotationBytecodeOffset(visibleTypeAnnotationOffsets, 0)__    _    _    int currentInvisibleTypeAnnotationIndex = 0__    _    int currentInvisibleTypeAnnotationBytecodeOffset =_        getTypeAnnotationBytecodeOffset(invisibleTypeAnnotationOffsets, 0)___    _    boolean insertFrame = false___    _    _    _    final int wideJumpOpcodeDelta =_        (context.parsingOptions & EXPAND_ASM_INSNS) == 0 ? Constants.WIDE_JUMP_OPCODE_DELTA : 0___    currentOffset = bytecodeStartOffset__    while (currentOffset < bytecodeEndOffset) {_      final int currentBytecodeOffset = currentOffset - bytecodeStartOffset___      _      Label currentLabel = labels[currentBytecodeOffset]__      if (currentLabel != null) {_        currentLabel.accept(methodVisitor, (context.parsingOptions & SKIP_DEBUG) == 0)__      }__      _      while (stackMapFrameOffset != 0_          && (context.currentFrameOffset == currentBytecodeOffset_              || context.currentFrameOffset == -1)) {_        _        _        if (context.currentFrameOffset != -1) {_          if (!compressedFrames || expandFrames) {_            methodVisitor.visitFrame(_                Opcodes.F_NEW,_                context.currentFrameLocalCount,_                context.currentFrameLocalTypes,_                context.currentFrameStackCount,_                context.currentFrameStackTypes)__          } else {_            methodVisitor.visitFrame(_                context.currentFrameType,_                context.currentFrameLocalCountDelta,_                context.currentFrameLocalTypes,_                context.currentFrameStackCount,_                context.currentFrameStackTypes)__          }_          _          _          insertFrame = false__        }_        if (stackMapFrameOffset < stackMapTableEndOffset) {_          stackMapFrameOffset =_              readStackMapFrame(stackMapFrameOffset, compressedFrames, expandFrames, context)__        } else {_          stackMapFrameOffset = 0__        }_      }__      _      _      if (insertFrame) {_        if ((context.parsingOptions & EXPAND_FRAMES) != 0) {_          methodVisitor.visitFrame(Constants.F_INSERT, 0, null, 0, null)__        }_        insertFrame = false__      }__      _      int opcode = classFileBuffer[currentOffset] & 0xFF__      switch (opcode) {_        case Constants.NOP:_        case Constants.ACONST_NULL:_        case Constants.ICONST_M1:_        case Constants.ICONST_0:_        case Constants.ICONST_1:_        case Constants.ICONST_2:_        case Constants.ICONST_3:_        case Constants.ICONST_4:_        case Constants.ICONST_5:_        case Constants.LCONST_0:_        case Constants.LCONST_1:_        case Constants.FCONST_0:_        case Constants.FCONST_1:_        case Constants.FCONST_2:_        case Constants.DCONST_0:_        case Constants.DCONST_1:_        case Constants.IALOAD:_        case Constants.LALOAD:_        case Constants.FALOAD:_        case Constants.DALOAD:_        case Constants.AALOAD:_        case Constants.BALOAD:_        case Constants.CALOAD:_        case Constants.SALOAD:_        case Constants.IASTORE:_        case Constants.LASTORE:_        case Constants.FASTORE:_        case Constants.DASTORE:_        case Constants.AASTORE:_        case Constants.BASTORE:_        case Constants.CASTORE:_        case Constants.SASTORE:_        case Constants.POP:_        case Constants.POP2:_        case Constants.DUP:_        case Constants.DUP_X1:_        case Constants.DUP_X2:_        case Constants.DUP2:_        case Constants.DUP2_X1:_        case Constants.DUP2_X2:_        case Constants.SWAP:_        case Constants.IADD:_        case Constants.LADD:_        case Constants.FADD:_        case Constants.DADD:_        case Constants.ISUB:_        case Constants.LSUB:_        case Constants.FSUB:_        case Constants.DSUB:_        case Constants.IMUL:_        case Constants.LMUL:_        case Constants.FMUL:_        case Constants.DMUL:_        case Constants.IDIV:_        case Constants.LDIV:_        case Constants.FDIV:_        case Constants.DDIV:_        case Constants.IREM:_        case Constants.LREM:_        case Constants.FREM:_        case Constants.DREM:_        case Constants.INEG:_        case Constants.LNEG:_        case Constants.FNEG:_        case Constants.DNEG:_        case Constants.ISHL:_        case Constants.LSHL:_        case Constants.ISHR:_        case Constants.LSHR:_        case Constants.IUSHR:_        case Constants.LUSHR:_        case Constants.IAND:_        case Constants.LAND:_        case Constants.IOR:_        case Constants.LOR:_        case Constants.IXOR:_        case Constants.LXOR:_        case Constants.I2L:_        case Constants.I2F:_        case Constants.I2D:_        case Constants.L2I:_        case Constants.L2F:_        case Constants.L2D:_        case Constants.F2I:_        case Constants.F2L:_        case Constants.F2D:_        case Constants.D2I:_        case Constants.D2L:_        case Constants.D2F:_        case Constants.I2B:_        case Constants.I2C:_        case Constants.I2S:_        case Constants.LCMP:_        case Constants.FCMPL:_        case Constants.FCMPG:_        case Constants.DCMPL:_        case Constants.DCMPG:_        case Constants.IRETURN:_        case Constants.LRETURN:_        case Constants.FRETURN:_        case Constants.DRETURN:_        case Constants.ARETURN:_        case Constants.RETURN:_        case Constants.ARRAYLENGTH:_        case Constants.ATHROW:_        case Constants.MONITORENTER:_        case Constants.MONITOREXIT:_          methodVisitor.visitInsn(opcode)__          currentOffset += 1__          break__        case Constants.ILOAD_0:_        case Constants.ILOAD_1:_        case Constants.ILOAD_2:_        case Constants.ILOAD_3:_        case Constants.LLOAD_0:_        case Constants.LLOAD_1:_        case Constants.LLOAD_2:_        case Constants.LLOAD_3:_        case Constants.FLOAD_0:_        case Constants.FLOAD_1:_        case Constants.FLOAD_2:_        case Constants.FLOAD_3:_        case Constants.DLOAD_0:_        case Constants.DLOAD_1:_        case Constants.DLOAD_2:_        case Constants.DLOAD_3:_        case Constants.ALOAD_0:_        case Constants.ALOAD_1:_        case Constants.ALOAD_2:_        case Constants.ALOAD_3:_          opcode -= Constants.ILOAD_0__          methodVisitor.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__          currentOffset += 1__          break__        case Constants.ISTORE_0:_        case Constants.ISTORE_1:_        case Constants.ISTORE_2:_        case Constants.ISTORE_3:_        case Constants.LSTORE_0:_        case Constants.LSTORE_1:_        case Constants.LSTORE_2:_        case Constants.LSTORE_3:_        case Constants.FSTORE_0:_        case Constants.FSTORE_1:_        case Constants.FSTORE_2:_        case Constants.FSTORE_3:_        case Constants.DSTORE_0:_        case Constants.DSTORE_1:_        case Constants.DSTORE_2:_        case Constants.DSTORE_3:_        case Constants.ASTORE_0:_        case Constants.ASTORE_1:_        case Constants.ASTORE_2:_        case Constants.ASTORE_3:_          opcode -= Constants.ISTORE_0__          methodVisitor.visitVarInsn(Opcodes.ISTORE + (opcode >> 2), opcode & 0x3)__          currentOffset += 1__          break__        case Constants.IFEQ:_        case Constants.IFNE:_        case Constants.IFLT:_        case Constants.IFGE:_        case Constants.IFGT:_        case Constants.IFLE:_        case Constants.IF_ICMPEQ:_        case Constants.IF_ICMPNE:_        case Constants.IF_ICMPLT:_        case Constants.IF_ICMPGE:_        case Constants.IF_ICMPGT:_        case Constants.IF_ICMPLE:_        case Constants.IF_ACMPEQ:_        case Constants.IF_ACMPNE:_        case Constants.GOTO:_        case Constants.JSR:_        case Constants.IFNULL:_        case Constants.IFNONNULL:_          methodVisitor.visitJumpInsn(_              opcode, labels[currentBytecodeOffset + readShort(currentOffset + 1)])__          currentOffset += 3__          break__        case Constants.GOTO_W:_        case Constants.JSR_W:_          methodVisitor.visitJumpInsn(_              opcode - wideJumpOpcodeDelta,_              labels[currentBytecodeOffset + readInt(currentOffset + 1)])__          currentOffset += 5__          break__        case Constants.ASM_IFEQ:_        case Constants.ASM_IFNE:_        case Constants.ASM_IFLT:_        case Constants.ASM_IFGE:_        case Constants.ASM_IFGT:_        case Constants.ASM_IFLE:_        case Constants.ASM_IF_ICMPEQ:_        case Constants.ASM_IF_ICMPNE:_        case Constants.ASM_IF_ICMPLT:_        case Constants.ASM_IF_ICMPGE:_        case Constants.ASM_IF_ICMPGT:_        case Constants.ASM_IF_ICMPLE:_        case Constants.ASM_IF_ACMPEQ:_        case Constants.ASM_IF_ACMPNE:_        case Constants.ASM_GOTO:_        case Constants.ASM_JSR:_        case Constants.ASM_IFNULL:_        case Constants.ASM_IFNONNULL:_          {_            _            _            _            _            _            _            opcode =_                opcode < Constants.ASM_IFNULL_                    ? opcode - Constants.ASM_OPCODE_DELTA_                    : opcode - Constants.ASM_IFNULL_OPCODE_DELTA__            Label target = labels[currentBytecodeOffset + readUnsignedShort(currentOffset + 1)]__            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_              _              methodVisitor.visitJumpInsn(opcode + Constants.WIDE_JUMP_OPCODE_DELTA, target)__            } else {_              _              _              _              opcode = opcode < Opcodes.GOTO ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1__              Label endif = createLabel(currentBytecodeOffset + 3, labels)__              methodVisitor.visitJumpInsn(opcode, endif)__              methodVisitor.visitJumpInsn(Constants.GOTO_W, target)__              _              _              insertFrame = true__            }_            currentOffset += 3__            break__          }_        case Constants.ASM_GOTO_W:_          {_            _            methodVisitor.visitJumpInsn(_                Constants.GOTO_W, labels[currentBytecodeOffset + readInt(currentOffset + 1)])__            _            _            _            insertFrame = true__            currentOffset += 5__            break__          }_        case Constants.WIDE:_          opcode = classFileBuffer[currentOffset + 1] & 0xFF__          if (opcode == Opcodes.IINC) {_            methodVisitor.visitIincInsn(_                readUnsignedShort(currentOffset + 2), readShort(currentOffset + 4))__            currentOffset += 6__          } else {_            methodVisitor.visitVarInsn(opcode, readUnsignedShort(currentOffset + 2))__            currentOffset += 4__          }_          break__        case Constants.TABLESWITCH:_          {_            _            currentOffset += 4 - (currentBytecodeOffset & 3)__            _            Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)]__            int low = readInt(currentOffset + 4)__            int high = readInt(currentOffset + 8)__            currentOffset += 12__            Label[] table = new Label[high - low + 1]__            for (int i = 0_ i < table.length_ ++i) {_              table[i] = labels[currentBytecodeOffset + readInt(currentOffset)]__              currentOffset += 4__            }_            methodVisitor.visitTableSwitchInsn(low, high, defaultLabel, table)__            break__          }_        case Constants.LOOKUPSWITCH:_          {_            _            currentOffset += 4 - (currentBytecodeOffset & 3)__            _            Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)]__            int nPairs = readInt(currentOffset + 4)__            currentOffset += 8__            int[] keys = new int[nPairs]__            Label[] values = new Label[nPairs]__            for (int i = 0_ i < nPairs_ ++i) {_              keys[i] = readInt(currentOffset)__              values[i] = labels[currentBytecodeOffset + readInt(currentOffset + 4)]__              currentOffset += 8__            }_            methodVisitor.visitLookupSwitchInsn(defaultLabel, keys, values)__            break__          }_        case Constants.ILOAD:_        case Constants.LLOAD:_        case Constants.FLOAD:_        case Constants.DLOAD:_        case Constants.ALOAD:_        case Constants.ISTORE:_        case Constants.LSTORE:_        case Constants.FSTORE:_        case Constants.DSTORE:_        case Constants.ASTORE:_        case Constants.RET:_          methodVisitor.visitVarInsn(opcode, classFileBuffer[currentOffset + 1] & 0xFF)__          currentOffset += 2__          break__        case Constants.BIPUSH:_        case Constants.NEWARRAY:_          methodVisitor.visitIntInsn(opcode, classFileBuffer[currentOffset + 1])__          currentOffset += 2__          break__        case Constants.SIPUSH:_          methodVisitor.visitIntInsn(opcode, readShort(currentOffset + 1))__          currentOffset += 3__          break__        case Constants.LDC:_          methodVisitor.visitLdcInsn(_              readConst(classFileBuffer[currentOffset + 1] & 0xFF, charBuffer))__          currentOffset += 2__          break__        case Constants.LDC_W:_        case Constants.LDC2_W:_          methodVisitor.visitLdcInsn(readConst(readUnsignedShort(currentOffset + 1), charBuffer))__          currentOffset += 3__          break__        case Constants.GETSTATIC:_        case Constants.PUTSTATIC:_        case Constants.GETFIELD:_        case Constants.PUTFIELD:_        case Constants.INVOKEVIRTUAL:_        case Constants.INVOKESPECIAL:_        case Constants.INVOKESTATIC:_        case Constants.INVOKEINTERFACE:_          {_            int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)]__            int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__            String owner = readClass(cpInfoOffset, charBuffer)__            String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__            String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__            if (opcode < Opcodes.INVOKEVIRTUAL) {_              methodVisitor.visitFieldInsn(opcode, owner, name, descriptor)__            } else {_              boolean isInterface =_                  classFileBuffer[cpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG__              methodVisitor.visitMethodInsn(opcode, owner, name, descriptor, isInterface)__            }_            if (opcode == Opcodes.INVOKEINTERFACE) {_              currentOffset += 5__            } else {_              currentOffset += 3__            }_            break__          }_        case Constants.INVOKEDYNAMIC:_          {_            int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)]__            int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__            String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__            String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__            int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)]__            Handle handle =_                (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__            Object[] bootstrapMethodArguments =_                new Object[readUnsignedShort(bootstrapMethodOffset + 2)]__            bootstrapMethodOffset += 4__            for (int i = 0_ i < bootstrapMethodArguments.length_ i++) {_              bootstrapMethodArguments[i] =_                  readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__              bootstrapMethodOffset += 2__            }_            methodVisitor.visitInvokeDynamicInsn(_                name, descriptor, handle, bootstrapMethodArguments)__            currentOffset += 5__            break__          }_        case Constants.NEW:_        case Constants.ANEWARRAY:_        case Constants.CHECKCAST:_        case Constants.INSTANCEOF:_          methodVisitor.visitTypeInsn(opcode, readClass(currentOffset + 1, charBuffer))__          currentOffset += 3__          break__        case Constants.IINC:_          methodVisitor.visitIincInsn(_              classFileBuffer[currentOffset + 1] & 0xFF, classFileBuffer[currentOffset + 2])__          currentOffset += 3__          break__        case Constants.MULTIANEWARRAY:_          methodVisitor.visitMultiANewArrayInsn(_              readClass(currentOffset + 1, charBuffer), classFileBuffer[currentOffset + 3] & 0xFF)__          currentOffset += 4__          break__        default:_          throw new AssertionError()__      }__      _      while (visibleTypeAnnotationOffsets != null_          && currentVisibleTypeAnnotationIndex < visibleTypeAnnotationOffsets.length_          && currentVisibleTypeAnnotationBytecodeOffset <= currentBytecodeOffset) {_        if (currentVisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {_          _          int currentAnnotationOffset =_              readTypeAnnotationTarget(_                  context, visibleTypeAnnotationOffsets[currentVisibleTypeAnnotationIndex])__          _          String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__          currentAnnotationOffset += 2__          _          readElementValues(_              methodVisitor.visitInsnAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  annotationDescriptor,_                   true),_              currentAnnotationOffset,_               true,_              charBuffer)__        }_        currentVisibleTypeAnnotationBytecodeOffset =_            getTypeAnnotationBytecodeOffset(_                visibleTypeAnnotationOffsets, ++currentVisibleTypeAnnotationIndex)__      }__      _      while (invisibleTypeAnnotationOffsets != null_          && currentInvisibleTypeAnnotationIndex < invisibleTypeAnnotationOffsets.length_          && currentInvisibleTypeAnnotationBytecodeOffset <= currentBytecodeOffset) {_        if (currentInvisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {_          _          int currentAnnotationOffset =_              readTypeAnnotationTarget(_                  context, invisibleTypeAnnotationOffsets[currentInvisibleTypeAnnotationIndex])__          _          String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__          currentAnnotationOffset += 2__          _          readElementValues(_              methodVisitor.visitInsnAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  annotationDescriptor,_                   false),_              currentAnnotationOffset,_               true,_              charBuffer)__        }_        currentInvisibleTypeAnnotationBytecodeOffset =_            getTypeAnnotationBytecodeOffset(_                invisibleTypeAnnotationOffsets, ++currentInvisibleTypeAnnotationIndex)__      }_    }_    if (labels[codeLength] != null) {_      methodVisitor.visitLabel(labels[codeLength])__    }__    _    if (localVariableTableOffset != 0 && (context.parsingOptions & SKIP_DEBUG) == 0) {_      _      int[] typeTable = null__      if (localVariableTypeTableOffset != 0) {_        typeTable = new int[readUnsignedShort(localVariableTypeTableOffset) * 3]__        currentOffset = localVariableTypeTableOffset + 2__        int typeTableIndex = typeTable.length__        while (typeTableIndex > 0) {_          _          typeTable[--typeTableIndex] = currentOffset + 6__          typeTable[--typeTableIndex] = readUnsignedShort(currentOffset + 8)__          typeTable[--typeTableIndex] = readUnsignedShort(currentOffset)__          currentOffset += 10__        }_      }_      int localVariableTableLength = readUnsignedShort(localVariableTableOffset)__      currentOffset = localVariableTableOffset + 2__      while (localVariableTableLength-- > 0) {_        int startPc = readUnsignedShort(currentOffset)__        int length = readUnsignedShort(currentOffset + 2)__        String name = readUTF8(currentOffset + 4, charBuffer)__        String descriptor = readUTF8(currentOffset + 6, charBuffer)__        int index = readUnsignedShort(currentOffset + 8)__        currentOffset += 10__        String signature = null__        if (typeTable != null) {_          for (int i = 0_ i < typeTable.length_ i += 3) {_            if (typeTable[i] == startPc && typeTable[i + 1] == index) {_              signature = readUTF8(typeTable[i + 2], charBuffer)__              break__            }_          }_        }_        methodVisitor.visitLocalVariable(_            name, descriptor, signature, labels[startPc], labels[startPc + length], index)__      }_    }__    _    if (visibleTypeAnnotationOffsets != null) {_      for (int i = 0_ i < visibleTypeAnnotationOffsets.length_ ++i) {_        int targetType = readByte(visibleTypeAnnotationOffsets[i])__        if (targetType == TypeReference.LOCAL_VARIABLE_            || targetType == TypeReference.RESOURCE_VARIABLE) {_          _          currentOffset = readTypeAnnotationTarget(context, visibleTypeAnnotationOffsets[i])__          _          String annotationDescriptor = readUTF8(currentOffset, charBuffer)__          currentOffset += 2__          _          readElementValues(_              methodVisitor.visitLocalVariableAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  context.currentLocalVariableAnnotationRangeStarts,_                  context.currentLocalVariableAnnotationRangeEnds,_                  context.currentLocalVariableAnnotationRangeIndices,_                  annotationDescriptor,_                   true),_              currentOffset,_               true,_              charBuffer)__        }_      }_    }__    _    if (invisibleTypeAnnotationOffsets != null) {_      for (int i = 0_ i < invisibleTypeAnnotationOffsets.length_ ++i) {_        int targetType = readByte(invisibleTypeAnnotationOffsets[i])__        if (targetType == TypeReference.LOCAL_VARIABLE_            || targetType == TypeReference.RESOURCE_VARIABLE) {_          _          currentOffset = readTypeAnnotationTarget(context, invisibleTypeAnnotationOffsets[i])__          _          String annotationDescriptor = readUTF8(currentOffset, charBuffer)__          currentOffset += 2__          _          readElementValues(_              methodVisitor.visitLocalVariableAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  context.currentLocalVariableAnnotationRangeStarts,_                  context.currentLocalVariableAnnotationRangeEnds,_                  context.currentLocalVariableAnnotationRangeIndices,_                  annotationDescriptor,_                   false),_              currentOffset,_               true,_              charBuffer)__        }_      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      methodVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    methodVisitor.visitMaxs(maxStack, maxLocals)__  };reads,a,jvms,code,attribute,and,makes,the,given,visitor,visit,it,param,method,visitor,the,visitor,that,must,visit,the,code,attribute,param,context,information,about,the,class,being,parsed,param,code,offset,the,start,offset,in,link,b,of,the,code,attribute,excluding,its,and,fields;private,void,read,code,final,method,visitor,method,visitor,final,context,context,final,int,code,offset,int,current,offset,code,offset,final,byte,class,file,buffer,b,final,char,char,buffer,context,char,buffer,final,int,max,stack,read,unsigned,short,current,offset,final,int,max,locals,read,unsigned,short,current,offset,2,final,int,code,length,read,int,current,offset,4,current,offset,8,final,int,bytecode,start,offset,current,offset,final,int,bytecode,end,offset,current,offset,code,length,final,label,labels,context,current,method,labels,new,label,code,length,1,while,current,offset,bytecode,end,offset,final,int,bytecode,offset,current,offset,bytecode,start,offset,final,int,opcode,class,file,buffer,current,offset,0x,ff,switch,opcode,case,constants,nop,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,iaload,case,constants,laload,case,constants,faload,case,constants,daload,case,constants,aaload,case,constants,baload,case,constants,caload,case,constants,saload,case,constants,iastore,case,constants,lastore,case,constants,fastore,case,constants,dastore,case,constants,aastore,case,constants,bastore,case,constants,castore,case,constants,sastore,case,constants,pop,case,constants,pop2,case,constants,dup,case,constants,case,constants,case,constants,dup2,case,constants,case,constants,case,constants,swap,case,constants,iadd,case,constants,ladd,case,constants,fadd,case,constants,dadd,case,constants,isub,case,constants,lsub,case,constants,fsub,case,constants,dsub,case,constants,imul,case,constants,lmul,case,constants,fmul,case,constants,dmul,case,constants,idiv,case,constants,ldiv,case,constants,fdiv,case,constants,ddiv,case,constants,irem,case,constants,lrem,case,constants,frem,case,constants,drem,case,constants,ineg,case,constants,lneg,case,constants,fneg,case,constants,dneg,case,constants,ishl,case,constants,lshl,case,constants,ishr,case,constants,lshr,case,constants,iushr,case,constants,lushr,case,constants,iand,case,constants,land,case,constants,ior,case,constants,lor,case,constants,ixor,case,constants,lxor,case,constants,i2l,case,constants,i2f,case,constants,i2d,case,constants,l2i,case,constants,l2f,case,constants,l2d,case,constants,f2i,case,constants,f2l,case,constants,f2d,case,constants,d2i,case,constants,d2l,case,constants,d2f,case,constants,i2b,case,constants,i2c,case,constants,i2s,case,constants,lcmp,case,constants,fcmpl,case,constants,fcmpg,case,constants,dcmpl,case,constants,dcmpg,case,constants,ireturn,case,constants,lreturn,case,constants,freturn,case,constants,dreturn,case,constants,areturn,case,constants,return,case,constants,arraylength,case,constants,athrow,case,constants,monitorenter,case,constants,monitorexit,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,current,offset,1,break,case,constants,ifeq,case,constants,ifne,case,constants,iflt,case,constants,ifge,case,constants,ifgt,case,constants,ifle,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,goto,case,constants,jsr,case,constants,ifnull,case,constants,ifnonnull,create,label,bytecode,offset,read,short,current,offset,1,labels,current,offset,3,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,create,label,bytecode,offset,read,unsigned,short,current,offset,1,labels,current,offset,3,break,case,constants,case,constants,case,constants,create,label,bytecode,offset,read,int,current,offset,1,labels,current,offset,5,break,case,constants,wide,switch,class,file,buffer,current,offset,1,0x,ff,case,constants,iload,case,constants,fload,case,constants,aload,case,constants,lload,case,constants,dload,case,constants,istore,case,constants,fstore,case,constants,astore,case,constants,lstore,case,constants,dstore,case,constants,ret,current,offset,4,break,case,constants,iinc,current,offset,6,break,default,throw,new,illegal,argument,exception,break,case,constants,tableswitch,current,offset,4,bytecode,offset,3,create,label,bytecode,offset,read,int,current,offset,labels,int,num,table,entries,read,int,current,offset,8,read,int,current,offset,4,1,current,offset,12,while,num,table,entries,0,create,label,bytecode,offset,read,int,current,offset,labels,current,offset,4,break,case,constants,lookupswitch,current,offset,4,bytecode,offset,3,create,label,bytecode,offset,read,int,current,offset,labels,int,num,switch,cases,read,int,current,offset,4,current,offset,8,while,num,switch,cases,0,create,label,bytecode,offset,read,int,current,offset,4,labels,current,offset,8,break,case,constants,iload,case,constants,lload,case,constants,fload,case,constants,dload,case,constants,aload,case,constants,istore,case,constants,lstore,case,constants,fstore,case,constants,dstore,case,constants,astore,case,constants,ret,case,constants,bipush,case,constants,newarray,case,constants,ldc,current,offset,2,break,case,constants,sipush,case,constants,case,constants,case,constants,getstatic,case,constants,putstatic,case,constants,getfield,case,constants,putfield,case,constants,invokevirtual,case,constants,invokespecial,case,constants,invokestatic,case,constants,new,case,constants,anewarray,case,constants,checkcast,case,constants,instanceof,case,constants,iinc,current,offset,3,break,case,constants,invokeinterface,case,constants,invokedynamic,current,offset,5,break,case,constants,multianewarray,current,offset,4,break,default,throw,new,illegal,argument,exception,int,exception,table,length,read,unsigned,short,current,offset,current,offset,2,while,exception,table,length,0,label,start,create,label,read,unsigned,short,current,offset,labels,label,end,create,label,read,unsigned,short,current,offset,2,labels,label,handler,create,label,read,unsigned,short,current,offset,4,labels,string,catch,type,read,utf8,cp,info,offsets,read,unsigned,short,current,offset,6,char,buffer,current,offset,8,method,visitor,visit,try,catch,block,start,end,handler,catch,type,int,stack,map,frame,offset,0,int,stack,map,table,end,offset,0,boolean,compressed,frames,true,int,local,variable,table,offset,0,int,local,variable,type,table,offset,0,int,visible,type,annotation,offsets,null,int,invisible,type,annotation,offsets,null,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,equals,attribute,name,if,context,parsing,options,0,local,variable,table,offset,current,offset,int,current,local,variable,table,offset,current,offset,int,local,variable,table,length,read,unsigned,short,current,local,variable,table,offset,current,local,variable,table,offset,2,while,local,variable,table,length,0,int,start,pc,read,unsigned,short,current,local,variable,table,offset,create,debug,label,start,pc,labels,int,length,read,unsigned,short,current,local,variable,table,offset,2,create,debug,label,start,pc,length,labels,current,local,variable,table,offset,10,else,if,constants,equals,attribute,name,local,variable,type,table,offset,current,offset,else,if,constants,equals,attribute,name,if,context,parsing,options,0,int,current,line,number,table,offset,current,offset,int,line,number,table,length,read,unsigned,short,current,line,number,table,offset,current,line,number,table,offset,2,while,line,number,table,length,0,int,start,pc,read,unsigned,short,current,line,number,table,offset,int,line,number,read,unsigned,short,current,line,number,table,offset,2,current,line,number,table,offset,4,create,debug,label,start,pc,labels,labels,start,pc,add,line,number,line,number,else,if,constants,equals,attribute,name,visible,type,annotation,offsets,read,type,annotations,method,visitor,context,current,offset,true,else,if,constants,equals,attribute,name,invisible,type,annotation,offsets,read,type,annotations,method,visitor,context,current,offset,false,else,if,constants,equals,attribute,name,if,context,parsing,options,0,stack,map,frame,offset,current,offset,2,stack,map,table,end,offset,current,offset,attribute,length,else,if,stack,map,equals,attribute,name,if,context,parsing,options,0,stack,map,frame,offset,current,offset,2,stack,map,table,end,offset,current,offset,attribute,length,compressed,frames,false,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,code,offset,labels,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,final,boolean,expand,frames,context,parsing,options,0,if,stack,map,frame,offset,0,context,current,frame,offset,1,context,current,frame,type,0,context,current,frame,local,count,0,context,current,frame,local,count,delta,0,context,current,frame,local,types,new,object,max,locals,context,current,frame,stack,count,0,context,current,frame,stack,types,new,object,max,stack,if,expand,frames,compute,implicit,frame,context,for,int,offset,stack,map,frame,offset,offset,stack,map,table,end,offset,2,offset,if,class,file,buffer,offset,frame,int,potential,bytecode,offset,read,unsigned,short,offset,1,if,potential,bytecode,offset,0,potential,bytecode,offset,code,length,class,file,buffer,bytecode,start,offset,potential,bytecode,offset,0x,ff,opcodes,new,create,label,potential,bytecode,offset,labels,if,expand,frames,context,parsing,options,0,method,visitor,visit,frame,opcodes,max,locals,null,0,null,int,current,visible,type,annotation,index,0,int,current,visible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,visible,type,annotation,offsets,0,int,current,invisible,type,annotation,index,0,int,current,invisible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,invisible,type,annotation,offsets,0,boolean,insert,frame,false,final,int,wide,jump,opcode,delta,context,parsing,options,0,constants,0,current,offset,bytecode,start,offset,while,current,offset,bytecode,end,offset,final,int,current,bytecode,offset,current,offset,bytecode,start,offset,label,current,label,labels,current,bytecode,offset,if,current,label,null,current,label,accept,method,visitor,context,parsing,options,0,while,stack,map,frame,offset,0,context,current,frame,offset,current,bytecode,offset,context,current,frame,offset,1,if,context,current,frame,offset,1,if,compressed,frames,expand,frames,method,visitor,visit,frame,opcodes,context,current,frame,local,count,context,current,frame,local,types,context,current,frame,stack,count,context,current,frame,stack,types,else,method,visitor,visit,frame,context,current,frame,type,context,current,frame,local,count,delta,context,current,frame,local,types,context,current,frame,stack,count,context,current,frame,stack,types,insert,frame,false,if,stack,map,frame,offset,stack,map,table,end,offset,stack,map,frame,offset,read,stack,map,frame,stack,map,frame,offset,compressed,frames,expand,frames,context,else,stack,map,frame,offset,0,if,insert,frame,if,context,parsing,options,0,method,visitor,visit,frame,constants,0,null,0,null,insert,frame,false,int,opcode,class,file,buffer,current,offset,0x,ff,switch,opcode,case,constants,nop,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,iaload,case,constants,laload,case,constants,faload,case,constants,daload,case,constants,aaload,case,constants,baload,case,constants,caload,case,constants,saload,case,constants,iastore,case,constants,lastore,case,constants,fastore,case,constants,dastore,case,constants,aastore,case,constants,bastore,case,constants,castore,case,constants,sastore,case,constants,pop,case,constants,pop2,case,constants,dup,case,constants,case,constants,case,constants,dup2,case,constants,case,constants,case,constants,swap,case,constants,iadd,case,constants,ladd,case,constants,fadd,case,constants,dadd,case,constants,isub,case,constants,lsub,case,constants,fsub,case,constants,dsub,case,constants,imul,case,constants,lmul,case,constants,fmul,case,constants,dmul,case,constants,idiv,case,constants,ldiv,case,constants,fdiv,case,constants,ddiv,case,constants,irem,case,constants,lrem,case,constants,frem,case,constants,drem,case,constants,ineg,case,constants,lneg,case,constants,fneg,case,constants,dneg,case,constants,ishl,case,constants,lshl,case,constants,ishr,case,constants,lshr,case,constants,iushr,case,constants,lushr,case,constants,iand,case,constants,land,case,constants,ior,case,constants,lor,case,constants,ixor,case,constants,lxor,case,constants,i2l,case,constants,i2f,case,constants,i2d,case,constants,l2i,case,constants,l2f,case,constants,l2d,case,constants,f2i,case,constants,f2l,case,constants,f2d,case,constants,d2i,case,constants,d2l,case,constants,d2f,case,constants,i2b,case,constants,i2c,case,constants,i2s,case,constants,lcmp,case,constants,fcmpl,case,constants,fcmpg,case,constants,dcmpl,case,constants,dcmpg,case,constants,ireturn,case,constants,lreturn,case,constants,freturn,case,constants,dreturn,case,constants,areturn,case,constants,return,case,constants,arraylength,case,constants,athrow,case,constants,monitorenter,case,constants,monitorexit,method,visitor,visit,insn,opcode,current,offset,1,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,constants,method,visitor,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,current,offset,1,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,constants,method,visitor,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,current,offset,1,break,case,constants,ifeq,case,constants,ifne,case,constants,iflt,case,constants,ifge,case,constants,ifgt,case,constants,ifle,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,goto,case,constants,jsr,case,constants,ifnull,case,constants,ifnonnull,method,visitor,visit,jump,insn,opcode,labels,current,bytecode,offset,read,short,current,offset,1,current,offset,3,break,case,constants,case,constants,method,visitor,visit,jump,insn,opcode,wide,jump,opcode,delta,labels,current,bytecode,offset,read,int,current,offset,1,current,offset,5,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,opcode,constants,opcode,constants,opcode,constants,label,target,labels,current,bytecode,offset,read,unsigned,short,current,offset,1,if,opcode,opcodes,goto,opcode,opcodes,jsr,method,visitor,visit,jump,insn,opcode,constants,target,else,opcode,opcode,opcodes,goto,opcode,1,1,1,opcode,1,label,endif,create,label,current,bytecode,offset,3,labels,method,visitor,visit,jump,insn,opcode,endif,method,visitor,visit,jump,insn,constants,target,insert,frame,true,current,offset,3,break,case,constants,method,visitor,visit,jump,insn,constants,labels,current,bytecode,offset,read,int,current,offset,1,insert,frame,true,current,offset,5,break,case,constants,wide,opcode,class,file,buffer,current,offset,1,0x,ff,if,opcode,opcodes,iinc,method,visitor,visit,iinc,insn,read,unsigned,short,current,offset,2,read,short,current,offset,4,current,offset,6,else,method,visitor,visit,var,insn,opcode,read,unsigned,short,current,offset,2,current,offset,4,break,case,constants,tableswitch,current,offset,4,current,bytecode,offset,3,label,default,label,labels,current,bytecode,offset,read,int,current,offset,int,low,read,int,current,offset,4,int,high,read,int,current,offset,8,current,offset,12,label,table,new,label,high,low,1,for,int,i,0,i,table,length,i,table,i,labels,current,bytecode,offset,read,int,current,offset,current,offset,4,method,visitor,visit,table,switch,insn,low,high,default,label,table,break,case,constants,lookupswitch,current,offset,4,current,bytecode,offset,3,label,default,label,labels,current,bytecode,offset,read,int,current,offset,int,n,pairs,read,int,current,offset,4,current,offset,8,int,keys,new,int,n,pairs,label,values,new,label,n,pairs,for,int,i,0,i,n,pairs,i,keys,i,read,int,current,offset,values,i,labels,current,bytecode,offset,read,int,current,offset,4,current,offset,8,method,visitor,visit,lookup,switch,insn,default,label,keys,values,break,case,constants,iload,case,constants,lload,case,constants,fload,case,constants,dload,case,constants,aload,case,constants,istore,case,constants,lstore,case,constants,fstore,case,constants,dstore,case,constants,astore,case,constants,ret,method,visitor,visit,var,insn,opcode,class,file,buffer,current,offset,1,0x,ff,current,offset,2,break,case,constants,bipush,case,constants,newarray,method,visitor,visit,int,insn,opcode,class,file,buffer,current,offset,1,current,offset,2,break,case,constants,sipush,method,visitor,visit,int,insn,opcode,read,short,current,offset,1,current,offset,3,break,case,constants,ldc,method,visitor,visit,ldc,insn,read,const,class,file,buffer,current,offset,1,0x,ff,char,buffer,current,offset,2,break,case,constants,case,constants,method,visitor,visit,ldc,insn,read,const,read,unsigned,short,current,offset,1,char,buffer,current,offset,3,break,case,constants,getstatic,case,constants,putstatic,case,constants,getfield,case,constants,putfield,case,constants,invokevirtual,case,constants,invokespecial,case,constants,invokestatic,case,constants,invokeinterface,int,cp,info,offset,cp,info,offsets,read,unsigned,short,current,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,owner,read,class,cp,info,offset,char,buffer,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,if,opcode,opcodes,invokevirtual,method,visitor,visit,field,insn,opcode,owner,name,descriptor,else,boolean,is,interface,class,file,buffer,cp,info,offset,1,symbol,method,visitor,visit,method,insn,opcode,owner,name,descriptor,is,interface,if,opcode,opcodes,invokeinterface,current,offset,5,else,current,offset,3,break,case,constants,invokedynamic,int,cp,info,offset,cp,info,offsets,read,unsigned,short,current,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,int,bootstrap,method,offset,bootstrap,method,offsets,read,unsigned,short,cp,info,offset,handle,handle,handle,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,object,bootstrap,method,arguments,new,object,read,unsigned,short,bootstrap,method,offset,2,bootstrap,method,offset,4,for,int,i,0,i,bootstrap,method,arguments,length,i,bootstrap,method,arguments,i,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,bootstrap,method,offset,2,method,visitor,visit,invoke,dynamic,insn,name,descriptor,handle,bootstrap,method,arguments,current,offset,5,break,case,constants,new,case,constants,anewarray,case,constants,checkcast,case,constants,instanceof,method,visitor,visit,type,insn,opcode,read,class,current,offset,1,char,buffer,current,offset,3,break,case,constants,iinc,method,visitor,visit,iinc,insn,class,file,buffer,current,offset,1,0x,ff,class,file,buffer,current,offset,2,current,offset,3,break,case,constants,multianewarray,method,visitor,visit,multi,anew,array,insn,read,class,current,offset,1,char,buffer,class,file,buffer,current,offset,3,0x,ff,current,offset,4,break,default,throw,new,assertion,error,while,visible,type,annotation,offsets,null,current,visible,type,annotation,index,visible,type,annotation,offsets,length,current,visible,type,annotation,bytecode,offset,current,bytecode,offset,if,current,visible,type,annotation,bytecode,offset,current,bytecode,offset,int,current,annotation,offset,read,type,annotation,target,context,visible,type,annotation,offsets,current,visible,type,annotation,index,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,read,element,values,method,visitor,visit,insn,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,current,visible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,visible,type,annotation,offsets,current,visible,type,annotation,index,while,invisible,type,annotation,offsets,null,current,invisible,type,annotation,index,invisible,type,annotation,offsets,length,current,invisible,type,annotation,bytecode,offset,current,bytecode,offset,if,current,invisible,type,annotation,bytecode,offset,current,bytecode,offset,int,current,annotation,offset,read,type,annotation,target,context,invisible,type,annotation,offsets,current,invisible,type,annotation,index,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,read,element,values,method,visitor,visit,insn,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,current,invisible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,invisible,type,annotation,offsets,current,invisible,type,annotation,index,if,labels,code,length,null,method,visitor,visit,label,labels,code,length,if,local,variable,table,offset,0,context,parsing,options,0,int,type,table,null,if,local,variable,type,table,offset,0,type,table,new,int,read,unsigned,short,local,variable,type,table,offset,3,current,offset,local,variable,type,table,offset,2,int,type,table,index,type,table,length,while,type,table,index,0,type,table,type,table,index,current,offset,6,type,table,type,table,index,read,unsigned,short,current,offset,8,type,table,type,table,index,read,unsigned,short,current,offset,current,offset,10,int,local,variable,table,length,read,unsigned,short,local,variable,table,offset,current,offset,local,variable,table,offset,2,while,local,variable,table,length,0,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,string,name,read,utf8,current,offset,4,char,buffer,string,descriptor,read,utf8,current,offset,6,char,buffer,int,index,read,unsigned,short,current,offset,8,current,offset,10,string,signature,null,if,type,table,null,for,int,i,0,i,type,table,length,i,3,if,type,table,i,start,pc,type,table,i,1,index,signature,read,utf8,type,table,i,2,char,buffer,break,method,visitor,visit,local,variable,name,descriptor,signature,labels,start,pc,labels,start,pc,length,index,if,visible,type,annotation,offsets,null,for,int,i,0,i,visible,type,annotation,offsets,length,i,int,target,type,read,byte,visible,type,annotation,offsets,i,if,target,type,type,reference,target,type,type,reference,current,offset,read,type,annotation,target,context,visible,type,annotation,offsets,i,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,read,element,values,method,visitor,visit,local,variable,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,context,current,local,variable,annotation,range,starts,context,current,local,variable,annotation,range,ends,context,current,local,variable,annotation,range,indices,annotation,descriptor,true,current,offset,true,char,buffer,if,invisible,type,annotation,offsets,null,for,int,i,0,i,invisible,type,annotation,offsets,length,i,int,target,type,read,byte,invisible,type,annotation,offsets,i,if,target,type,type,reference,target,type,type,reference,current,offset,read,type,annotation,target,context,invisible,type,annotation,offsets,i,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,read,element,values,method,visitor,visit,local,variable,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,context,current,local,variable,annotation,range,starts,context,current,local,variable,annotation,range,ends,context,current,local,variable,annotation,range,indices,annotation,descriptor,false,current,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,method,visitor,visit,attribute,attributes,attributes,next,attribute,method,visitor,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(       final MethodVisitor methodVisitor, final Context context, final int codeOffset);1537204147;Reads a JVMS 'Code' attribute and makes the given visitor visit it.__@param methodVisitor the visitor that must visit the Code attribute._@param context information about the class being parsed._@param codeOffset the start offset in {@link #b} of the Code attribute, excluding its_attribute_name_index and attribute_length fields.;private void readCode(_      final MethodVisitor methodVisitor, final Context context, final int codeOffset) {_    int currentOffset = codeOffset___    _    final byte[] classFileBuffer = b__    final char[] charBuffer = context.charBuffer__    final int maxStack = readUnsignedShort(currentOffset)__    final int maxLocals = readUnsignedShort(currentOffset + 2)__    final int codeLength = readInt(currentOffset + 4)__    currentOffset += 8___    _    final int bytecodeStartOffset = currentOffset__    final int bytecodeEndOffset = currentOffset + codeLength__    final Label[] labels = context.currentMethodLabels = new Label[codeLength + 1]__    while (currentOffset < bytecodeEndOffset) {_      final int bytecodeOffset = currentOffset - bytecodeStartOffset__      final int opcode = classFileBuffer[currentOffset] & 0xFF__      switch (opcode) {_        case Constants.NOP:_        case Constants.ACONST_NULL:_        case Constants.ICONST_M1:_        case Constants.ICONST_0:_        case Constants.ICONST_1:_        case Constants.ICONST_2:_        case Constants.ICONST_3:_        case Constants.ICONST_4:_        case Constants.ICONST_5:_        case Constants.LCONST_0:_        case Constants.LCONST_1:_        case Constants.FCONST_0:_        case Constants.FCONST_1:_        case Constants.FCONST_2:_        case Constants.DCONST_0:_        case Constants.DCONST_1:_        case Constants.IALOAD:_        case Constants.LALOAD:_        case Constants.FALOAD:_        case Constants.DALOAD:_        case Constants.AALOAD:_        case Constants.BALOAD:_        case Constants.CALOAD:_        case Constants.SALOAD:_        case Constants.IASTORE:_        case Constants.LASTORE:_        case Constants.FASTORE:_        case Constants.DASTORE:_        case Constants.AASTORE:_        case Constants.BASTORE:_        case Constants.CASTORE:_        case Constants.SASTORE:_        case Constants.POP:_        case Constants.POP2:_        case Constants.DUP:_        case Constants.DUP_X1:_        case Constants.DUP_X2:_        case Constants.DUP2:_        case Constants.DUP2_X1:_        case Constants.DUP2_X2:_        case Constants.SWAP:_        case Constants.IADD:_        case Constants.LADD:_        case Constants.FADD:_        case Constants.DADD:_        case Constants.ISUB:_        case Constants.LSUB:_        case Constants.FSUB:_        case Constants.DSUB:_        case Constants.IMUL:_        case Constants.LMUL:_        case Constants.FMUL:_        case Constants.DMUL:_        case Constants.IDIV:_        case Constants.LDIV:_        case Constants.FDIV:_        case Constants.DDIV:_        case Constants.IREM:_        case Constants.LREM:_        case Constants.FREM:_        case Constants.DREM:_        case Constants.INEG:_        case Constants.LNEG:_        case Constants.FNEG:_        case Constants.DNEG:_        case Constants.ISHL:_        case Constants.LSHL:_        case Constants.ISHR:_        case Constants.LSHR:_        case Constants.IUSHR:_        case Constants.LUSHR:_        case Constants.IAND:_        case Constants.LAND:_        case Constants.IOR:_        case Constants.LOR:_        case Constants.IXOR:_        case Constants.LXOR:_        case Constants.I2L:_        case Constants.I2F:_        case Constants.I2D:_        case Constants.L2I:_        case Constants.L2F:_        case Constants.L2D:_        case Constants.F2I:_        case Constants.F2L:_        case Constants.F2D:_        case Constants.D2I:_        case Constants.D2L:_        case Constants.D2F:_        case Constants.I2B:_        case Constants.I2C:_        case Constants.I2S:_        case Constants.LCMP:_        case Constants.FCMPL:_        case Constants.FCMPG:_        case Constants.DCMPL:_        case Constants.DCMPG:_        case Constants.IRETURN:_        case Constants.LRETURN:_        case Constants.FRETURN:_        case Constants.DRETURN:_        case Constants.ARETURN:_        case Constants.RETURN:_        case Constants.ARRAYLENGTH:_        case Constants.ATHROW:_        case Constants.MONITORENTER:_        case Constants.MONITOREXIT:_        case Constants.ILOAD_0:_        case Constants.ILOAD_1:_        case Constants.ILOAD_2:_        case Constants.ILOAD_3:_        case Constants.LLOAD_0:_        case Constants.LLOAD_1:_        case Constants.LLOAD_2:_        case Constants.LLOAD_3:_        case Constants.FLOAD_0:_        case Constants.FLOAD_1:_        case Constants.FLOAD_2:_        case Constants.FLOAD_3:_        case Constants.DLOAD_0:_        case Constants.DLOAD_1:_        case Constants.DLOAD_2:_        case Constants.DLOAD_3:_        case Constants.ALOAD_0:_        case Constants.ALOAD_1:_        case Constants.ALOAD_2:_        case Constants.ALOAD_3:_        case Constants.ISTORE_0:_        case Constants.ISTORE_1:_        case Constants.ISTORE_2:_        case Constants.ISTORE_3:_        case Constants.LSTORE_0:_        case Constants.LSTORE_1:_        case Constants.LSTORE_2:_        case Constants.LSTORE_3:_        case Constants.FSTORE_0:_        case Constants.FSTORE_1:_        case Constants.FSTORE_2:_        case Constants.FSTORE_3:_        case Constants.DSTORE_0:_        case Constants.DSTORE_1:_        case Constants.DSTORE_2:_        case Constants.DSTORE_3:_        case Constants.ASTORE_0:_        case Constants.ASTORE_1:_        case Constants.ASTORE_2:_        case Constants.ASTORE_3:_          currentOffset += 1__          break__        case Constants.IFEQ:_        case Constants.IFNE:_        case Constants.IFLT:_        case Constants.IFGE:_        case Constants.IFGT:_        case Constants.IFLE:_        case Constants.IF_ICMPEQ:_        case Constants.IF_ICMPNE:_        case Constants.IF_ICMPLT:_        case Constants.IF_ICMPGE:_        case Constants.IF_ICMPGT:_        case Constants.IF_ICMPLE:_        case Constants.IF_ACMPEQ:_        case Constants.IF_ACMPNE:_        case Constants.GOTO:_        case Constants.JSR:_        case Constants.IFNULL:_        case Constants.IFNONNULL:_          createLabel(bytecodeOffset + readShort(currentOffset + 1), labels)__          currentOffset += 3__          break__        case Constants.ASM_IFEQ:_        case Constants.ASM_IFNE:_        case Constants.ASM_IFLT:_        case Constants.ASM_IFGE:_        case Constants.ASM_IFGT:_        case Constants.ASM_IFLE:_        case Constants.ASM_IF_ICMPEQ:_        case Constants.ASM_IF_ICMPNE:_        case Constants.ASM_IF_ICMPLT:_        case Constants.ASM_IF_ICMPGE:_        case Constants.ASM_IF_ICMPGT:_        case Constants.ASM_IF_ICMPLE:_        case Constants.ASM_IF_ACMPEQ:_        case Constants.ASM_IF_ACMPNE:_        case Constants.ASM_GOTO:_        case Constants.ASM_JSR:_        case Constants.ASM_IFNULL:_        case Constants.ASM_IFNONNULL:_          createLabel(bytecodeOffset + readUnsignedShort(currentOffset + 1), labels)__          currentOffset += 3__          break__        case Constants.GOTO_W:_        case Constants.JSR_W:_        case Constants.ASM_GOTO_W:_          createLabel(bytecodeOffset + readInt(currentOffset + 1), labels)__          currentOffset += 5__          break__        case Constants.WIDE:_          switch (classFileBuffer[currentOffset + 1] & 0xFF) {_            case Constants.ILOAD:_            case Constants.FLOAD:_            case Constants.ALOAD:_            case Constants.LLOAD:_            case Constants.DLOAD:_            case Constants.ISTORE:_            case Constants.FSTORE:_            case Constants.ASTORE:_            case Constants.LSTORE:_            case Constants.DSTORE:_            case Constants.RET:_              currentOffset += 4__              break__            case Constants.IINC:_              currentOffset += 6__              break__            default:_              throw new IllegalArgumentException()__          }_          break__        case Constants.TABLESWITCH:_          _          currentOffset += 4 - (bytecodeOffset & 3)__          _          createLabel(bytecodeOffset + readInt(currentOffset), labels)__          int numTableEntries = readInt(currentOffset + 8) - readInt(currentOffset + 4) + 1__          currentOffset += 12__          _          while (numTableEntries-- > 0) {_            createLabel(bytecodeOffset + readInt(currentOffset), labels)__            currentOffset += 4__          }_          break__        case Constants.LOOKUPSWITCH:_          _          currentOffset += 4 - (bytecodeOffset & 3)__          _          createLabel(bytecodeOffset + readInt(currentOffset), labels)__          int numSwitchCases = readInt(currentOffset + 4)__          currentOffset += 8__          _          while (numSwitchCases-- > 0) {_            createLabel(bytecodeOffset + readInt(currentOffset + 4), labels)__            currentOffset += 8__          }_          break__        case Constants.ILOAD:_        case Constants.LLOAD:_        case Constants.FLOAD:_        case Constants.DLOAD:_        case Constants.ALOAD:_        case Constants.ISTORE:_        case Constants.LSTORE:_        case Constants.FSTORE:_        case Constants.DSTORE:_        case Constants.ASTORE:_        case Constants.RET:_        case Constants.BIPUSH:_        case Constants.NEWARRAY:_        case Constants.LDC:_          currentOffset += 2__          break__        case Constants.SIPUSH:_        case Constants.LDC_W:_        case Constants.LDC2_W:_        case Constants.GETSTATIC:_        case Constants.PUTSTATIC:_        case Constants.GETFIELD:_        case Constants.PUTFIELD:_        case Constants.INVOKEVIRTUAL:_        case Constants.INVOKESPECIAL:_        case Constants.INVOKESTATIC:_        case Constants.NEW:_        case Constants.ANEWARRAY:_        case Constants.CHECKCAST:_        case Constants.INSTANCEOF:_        case Constants.IINC:_          currentOffset += 3__          break__        case Constants.INVOKEINTERFACE:_        case Constants.INVOKEDYNAMIC:_          currentOffset += 5__          break__        case Constants.MULTIANEWARRAY:_          currentOffset += 4__          break__        default:_          throw new IllegalArgumentException()__      }_    }__    _    _    int exceptionTableLength = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (exceptionTableLength-- > 0) {_      Label start = createLabel(readUnsignedShort(currentOffset), labels)__      Label end = createLabel(readUnsignedShort(currentOffset + 2), labels)__      Label handler = createLabel(readUnsignedShort(currentOffset + 4), labels)__      String catchType = readUTF8(cpInfoOffsets[readUnsignedShort(currentOffset + 6)], charBuffer)__      currentOffset += 8__      methodVisitor.visitTryCatchBlock(start, end, handler, catchType)__    }__    _    _    _    _    _    _    int stackMapFrameOffset = 0__    _    int stackMapTableEndOffset = 0__    _    boolean compressedFrames = true__    _    int localVariableTableOffset = 0__    _    int localVariableTypeTableOffset = 0__    _    _    int[] visibleTypeAnnotationOffsets = null__    _    _    int[] invisibleTypeAnnotationOffsets = null__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      if (Constants.LOCAL_VARIABLE_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_DEBUG) == 0) {_          localVariableTableOffset = currentOffset__          _          int currentLocalVariableTableOffset = currentOffset__          int localVariableTableLength = readUnsignedShort(currentLocalVariableTableOffset)__          currentLocalVariableTableOffset += 2__          while (localVariableTableLength-- > 0) {_            int startPc = readUnsignedShort(currentLocalVariableTableOffset)__            createDebugLabel(startPc, labels)__            int length = readUnsignedShort(currentLocalVariableTableOffset + 2)__            createDebugLabel(startPc + length, labels)__            _            currentLocalVariableTableOffset += 10__          }_        }_      } else if (Constants.LOCAL_VARIABLE_TYPE_TABLE.equals(attributeName)) {_        localVariableTypeTableOffset = currentOffset__        _        _      } else if (Constants.LINE_NUMBER_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_DEBUG) == 0) {_          _          int currentLineNumberTableOffset = currentOffset__          int lineNumberTableLength = readUnsignedShort(currentLineNumberTableOffset)__          currentLineNumberTableOffset += 2__          while (lineNumberTableLength-- > 0) {_            int startPc = readUnsignedShort(currentLineNumberTableOffset)__            int lineNumber = readUnsignedShort(currentLineNumberTableOffset + 2)__            currentLineNumberTableOffset += 4__            createDebugLabel(startPc, labels)__            labels[startPc].addLineNumber(lineNumber)__          }_        }_      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        visibleTypeAnnotationOffsets =_            readTypeAnnotations(methodVisitor, context, currentOffset,  true)__        _        _        _        _        _        _      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        invisibleTypeAnnotationOffsets =_            readTypeAnnotations(methodVisitor, context, currentOffset,  false)__        _      } else if (Constants.STACK_MAP_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_FRAMES) == 0) {_          stackMapFrameOffset = currentOffset + 2__          stackMapTableEndOffset = currentOffset + attributeLength__        }_        _        _        _        _        _        _        _        _        _      } else if ("StackMap".equals(attributeName)) {_        if ((context.parsingOptions & SKIP_FRAMES) == 0) {_          stackMapFrameOffset = currentOffset + 2__          stackMapTableEndOffset = currentOffset + attributeLength__          compressedFrames = false__        }_        _        _        _        _      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                codeOffset,_                labels)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    _    final boolean expandFrames = (context.parsingOptions & EXPAND_FRAMES) != 0__    if (stackMapFrameOffset != 0) {_      _      _      _      context.currentFrameOffset = -1__      context.currentFrameType = 0__      context.currentFrameLocalCount = 0__      context.currentFrameLocalCountDelta = 0__      context.currentFrameLocalTypes = new Object[maxLocals]__      context.currentFrameStackCount = 0__      context.currentFrameStackTypes = new Object[maxStack]__      if (expandFrames) {_        computeImplicitFrame(context)__      }_      _      _      _      _      _      _      _      for (int offset = stackMapFrameOffset_ offset < stackMapTableEndOffset - 2_ ++offset) {_        if (classFileBuffer[offset] == Frame.ITEM_UNINITIALIZED) {_          int potentialBytecodeOffset = readUnsignedShort(offset + 1)__          if (potentialBytecodeOffset >= 0_              && potentialBytecodeOffset < codeLength_              && (classFileBuffer[bytecodeStartOffset + potentialBytecodeOffset] & 0xFF)_                  == Opcodes.NEW) {_            createLabel(potentialBytecodeOffset, labels)__          }_        }_      }_    }_    if (expandFrames && (context.parsingOptions & EXPAND_ASM_INSNS) != 0) {_      _      _      _      _      _      _      methodVisitor.visitFrame(Opcodes.F_NEW, maxLocals, null, 0, null)__    }__    _    __    _    _    int currentVisibleTypeAnnotationIndex = 0__    _    int currentVisibleTypeAnnotationBytecodeOffset =_        getTypeAnnotationBytecodeOffset(visibleTypeAnnotationOffsets, 0)__    _    _    int currentInvisibleTypeAnnotationIndex = 0__    _    int currentInvisibleTypeAnnotationBytecodeOffset =_        getTypeAnnotationBytecodeOffset(invisibleTypeAnnotationOffsets, 0)___    _    boolean insertFrame = false___    _    _    _    final int wideJumpOpcodeDelta =_        (context.parsingOptions & EXPAND_ASM_INSNS) == 0 ? Constants.WIDE_JUMP_OPCODE_DELTA : 0___    currentOffset = bytecodeStartOffset__    while (currentOffset < bytecodeEndOffset) {_      final int currentBytecodeOffset = currentOffset - bytecodeStartOffset___      _      Label currentLabel = labels[currentBytecodeOffset]__      if (currentLabel != null) {_        currentLabel.accept(methodVisitor, (context.parsingOptions & SKIP_DEBUG) == 0)__      }__      _      while (stackMapFrameOffset != 0_          && (context.currentFrameOffset == currentBytecodeOffset_              || context.currentFrameOffset == -1)) {_        _        _        if (context.currentFrameOffset != -1) {_          if (!compressedFrames || expandFrames) {_            methodVisitor.visitFrame(_                Opcodes.F_NEW,_                context.currentFrameLocalCount,_                context.currentFrameLocalTypes,_                context.currentFrameStackCount,_                context.currentFrameStackTypes)__          } else {_            methodVisitor.visitFrame(_                context.currentFrameType,_                context.currentFrameLocalCountDelta,_                context.currentFrameLocalTypes,_                context.currentFrameStackCount,_                context.currentFrameStackTypes)__          }_          _          _          insertFrame = false__        }_        if (stackMapFrameOffset < stackMapTableEndOffset) {_          stackMapFrameOffset =_              readStackMapFrame(stackMapFrameOffset, compressedFrames, expandFrames, context)__        } else {_          stackMapFrameOffset = 0__        }_      }__      _      _      if (insertFrame) {_        if ((context.parsingOptions & EXPAND_FRAMES) != 0) {_          methodVisitor.visitFrame(Constants.F_INSERT, 0, null, 0, null)__        }_        insertFrame = false__      }__      _      int opcode = classFileBuffer[currentOffset] & 0xFF__      switch (opcode) {_        case Constants.NOP:_        case Constants.ACONST_NULL:_        case Constants.ICONST_M1:_        case Constants.ICONST_0:_        case Constants.ICONST_1:_        case Constants.ICONST_2:_        case Constants.ICONST_3:_        case Constants.ICONST_4:_        case Constants.ICONST_5:_        case Constants.LCONST_0:_        case Constants.LCONST_1:_        case Constants.FCONST_0:_        case Constants.FCONST_1:_        case Constants.FCONST_2:_        case Constants.DCONST_0:_        case Constants.DCONST_1:_        case Constants.IALOAD:_        case Constants.LALOAD:_        case Constants.FALOAD:_        case Constants.DALOAD:_        case Constants.AALOAD:_        case Constants.BALOAD:_        case Constants.CALOAD:_        case Constants.SALOAD:_        case Constants.IASTORE:_        case Constants.LASTORE:_        case Constants.FASTORE:_        case Constants.DASTORE:_        case Constants.AASTORE:_        case Constants.BASTORE:_        case Constants.CASTORE:_        case Constants.SASTORE:_        case Constants.POP:_        case Constants.POP2:_        case Constants.DUP:_        case Constants.DUP_X1:_        case Constants.DUP_X2:_        case Constants.DUP2:_        case Constants.DUP2_X1:_        case Constants.DUP2_X2:_        case Constants.SWAP:_        case Constants.IADD:_        case Constants.LADD:_        case Constants.FADD:_        case Constants.DADD:_        case Constants.ISUB:_        case Constants.LSUB:_        case Constants.FSUB:_        case Constants.DSUB:_        case Constants.IMUL:_        case Constants.LMUL:_        case Constants.FMUL:_        case Constants.DMUL:_        case Constants.IDIV:_        case Constants.LDIV:_        case Constants.FDIV:_        case Constants.DDIV:_        case Constants.IREM:_        case Constants.LREM:_        case Constants.FREM:_        case Constants.DREM:_        case Constants.INEG:_        case Constants.LNEG:_        case Constants.FNEG:_        case Constants.DNEG:_        case Constants.ISHL:_        case Constants.LSHL:_        case Constants.ISHR:_        case Constants.LSHR:_        case Constants.IUSHR:_        case Constants.LUSHR:_        case Constants.IAND:_        case Constants.LAND:_        case Constants.IOR:_        case Constants.LOR:_        case Constants.IXOR:_        case Constants.LXOR:_        case Constants.I2L:_        case Constants.I2F:_        case Constants.I2D:_        case Constants.L2I:_        case Constants.L2F:_        case Constants.L2D:_        case Constants.F2I:_        case Constants.F2L:_        case Constants.F2D:_        case Constants.D2I:_        case Constants.D2L:_        case Constants.D2F:_        case Constants.I2B:_        case Constants.I2C:_        case Constants.I2S:_        case Constants.LCMP:_        case Constants.FCMPL:_        case Constants.FCMPG:_        case Constants.DCMPL:_        case Constants.DCMPG:_        case Constants.IRETURN:_        case Constants.LRETURN:_        case Constants.FRETURN:_        case Constants.DRETURN:_        case Constants.ARETURN:_        case Constants.RETURN:_        case Constants.ARRAYLENGTH:_        case Constants.ATHROW:_        case Constants.MONITORENTER:_        case Constants.MONITOREXIT:_          methodVisitor.visitInsn(opcode)__          currentOffset += 1__          break__        case Constants.ILOAD_0:_        case Constants.ILOAD_1:_        case Constants.ILOAD_2:_        case Constants.ILOAD_3:_        case Constants.LLOAD_0:_        case Constants.LLOAD_1:_        case Constants.LLOAD_2:_        case Constants.LLOAD_3:_        case Constants.FLOAD_0:_        case Constants.FLOAD_1:_        case Constants.FLOAD_2:_        case Constants.FLOAD_3:_        case Constants.DLOAD_0:_        case Constants.DLOAD_1:_        case Constants.DLOAD_2:_        case Constants.DLOAD_3:_        case Constants.ALOAD_0:_        case Constants.ALOAD_1:_        case Constants.ALOAD_2:_        case Constants.ALOAD_3:_          opcode -= Constants.ILOAD_0__          methodVisitor.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__          currentOffset += 1__          break__        case Constants.ISTORE_0:_        case Constants.ISTORE_1:_        case Constants.ISTORE_2:_        case Constants.ISTORE_3:_        case Constants.LSTORE_0:_        case Constants.LSTORE_1:_        case Constants.LSTORE_2:_        case Constants.LSTORE_3:_        case Constants.FSTORE_0:_        case Constants.FSTORE_1:_        case Constants.FSTORE_2:_        case Constants.FSTORE_3:_        case Constants.DSTORE_0:_        case Constants.DSTORE_1:_        case Constants.DSTORE_2:_        case Constants.DSTORE_3:_        case Constants.ASTORE_0:_        case Constants.ASTORE_1:_        case Constants.ASTORE_2:_        case Constants.ASTORE_3:_          opcode -= Constants.ISTORE_0__          methodVisitor.visitVarInsn(Opcodes.ISTORE + (opcode >> 2), opcode & 0x3)__          currentOffset += 1__          break__        case Constants.IFEQ:_        case Constants.IFNE:_        case Constants.IFLT:_        case Constants.IFGE:_        case Constants.IFGT:_        case Constants.IFLE:_        case Constants.IF_ICMPEQ:_        case Constants.IF_ICMPNE:_        case Constants.IF_ICMPLT:_        case Constants.IF_ICMPGE:_        case Constants.IF_ICMPGT:_        case Constants.IF_ICMPLE:_        case Constants.IF_ACMPEQ:_        case Constants.IF_ACMPNE:_        case Constants.GOTO:_        case Constants.JSR:_        case Constants.IFNULL:_        case Constants.IFNONNULL:_          methodVisitor.visitJumpInsn(_              opcode, labels[currentBytecodeOffset + readShort(currentOffset + 1)])__          currentOffset += 3__          break__        case Constants.GOTO_W:_        case Constants.JSR_W:_          methodVisitor.visitJumpInsn(_              opcode - wideJumpOpcodeDelta,_              labels[currentBytecodeOffset + readInt(currentOffset + 1)])__          currentOffset += 5__          break__        case Constants.ASM_IFEQ:_        case Constants.ASM_IFNE:_        case Constants.ASM_IFLT:_        case Constants.ASM_IFGE:_        case Constants.ASM_IFGT:_        case Constants.ASM_IFLE:_        case Constants.ASM_IF_ICMPEQ:_        case Constants.ASM_IF_ICMPNE:_        case Constants.ASM_IF_ICMPLT:_        case Constants.ASM_IF_ICMPGE:_        case Constants.ASM_IF_ICMPGT:_        case Constants.ASM_IF_ICMPLE:_        case Constants.ASM_IF_ACMPEQ:_        case Constants.ASM_IF_ACMPNE:_        case Constants.ASM_GOTO:_        case Constants.ASM_JSR:_        case Constants.ASM_IFNULL:_        case Constants.ASM_IFNONNULL:_          {_            _            _            _            _            _            _            opcode =_                opcode < Constants.ASM_IFNULL_                    ? opcode - Constants.ASM_OPCODE_DELTA_                    : opcode - Constants.ASM_IFNULL_OPCODE_DELTA__            Label target = labels[currentBytecodeOffset + readUnsignedShort(currentOffset + 1)]__            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_              _              methodVisitor.visitJumpInsn(opcode + Constants.WIDE_JUMP_OPCODE_DELTA, target)__            } else {_              _              _              _              opcode = opcode < Opcodes.GOTO ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1__              Label endif = createLabel(currentBytecodeOffset + 3, labels)__              methodVisitor.visitJumpInsn(opcode, endif)__              methodVisitor.visitJumpInsn(Constants.GOTO_W, target)__              _              _              insertFrame = true__            }_            currentOffset += 3__            break__          }_        case Constants.ASM_GOTO_W:_          {_            _            methodVisitor.visitJumpInsn(_                Constants.GOTO_W, labels[currentBytecodeOffset + readInt(currentOffset + 1)])__            _            _            _            insertFrame = true__            currentOffset += 5__            break__          }_        case Constants.WIDE:_          opcode = classFileBuffer[currentOffset + 1] & 0xFF__          if (opcode == Opcodes.IINC) {_            methodVisitor.visitIincInsn(_                readUnsignedShort(currentOffset + 2), readShort(currentOffset + 4))__            currentOffset += 6__          } else {_            methodVisitor.visitVarInsn(opcode, readUnsignedShort(currentOffset + 2))__            currentOffset += 4__          }_          break__        case Constants.TABLESWITCH:_          {_            _            currentOffset += 4 - (currentBytecodeOffset & 3)__            _            Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)]__            int low = readInt(currentOffset + 4)__            int high = readInt(currentOffset + 8)__            currentOffset += 12__            Label[] table = new Label[high - low + 1]__            for (int i = 0_ i < table.length_ ++i) {_              table[i] = labels[currentBytecodeOffset + readInt(currentOffset)]__              currentOffset += 4__            }_            methodVisitor.visitTableSwitchInsn(low, high, defaultLabel, table)__            break__          }_        case Constants.LOOKUPSWITCH:_          {_            _            currentOffset += 4 - (currentBytecodeOffset & 3)__            _            Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)]__            int numPairs = readInt(currentOffset + 4)__            currentOffset += 8__            int[] keys = new int[numPairs]__            Label[] values = new Label[numPairs]__            for (int i = 0_ i < numPairs_ ++i) {_              keys[i] = readInt(currentOffset)__              values[i] = labels[currentBytecodeOffset + readInt(currentOffset + 4)]__              currentOffset += 8__            }_            methodVisitor.visitLookupSwitchInsn(defaultLabel, keys, values)__            break__          }_        case Constants.ILOAD:_        case Constants.LLOAD:_        case Constants.FLOAD:_        case Constants.DLOAD:_        case Constants.ALOAD:_        case Constants.ISTORE:_        case Constants.LSTORE:_        case Constants.FSTORE:_        case Constants.DSTORE:_        case Constants.ASTORE:_        case Constants.RET:_          methodVisitor.visitVarInsn(opcode, classFileBuffer[currentOffset + 1] & 0xFF)__          currentOffset += 2__          break__        case Constants.BIPUSH:_        case Constants.NEWARRAY:_          methodVisitor.visitIntInsn(opcode, classFileBuffer[currentOffset + 1])__          currentOffset += 2__          break__        case Constants.SIPUSH:_          methodVisitor.visitIntInsn(opcode, readShort(currentOffset + 1))__          currentOffset += 3__          break__        case Constants.LDC:_          methodVisitor.visitLdcInsn(_              readConst(classFileBuffer[currentOffset + 1] & 0xFF, charBuffer))__          currentOffset += 2__          break__        case Constants.LDC_W:_        case Constants.LDC2_W:_          methodVisitor.visitLdcInsn(readConst(readUnsignedShort(currentOffset + 1), charBuffer))__          currentOffset += 3__          break__        case Constants.GETSTATIC:_        case Constants.PUTSTATIC:_        case Constants.GETFIELD:_        case Constants.PUTFIELD:_        case Constants.INVOKEVIRTUAL:_        case Constants.INVOKESPECIAL:_        case Constants.INVOKESTATIC:_        case Constants.INVOKEINTERFACE:_          {_            int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)]__            int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__            String owner = readClass(cpInfoOffset, charBuffer)__            String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__            String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__            if (opcode < Opcodes.INVOKEVIRTUAL) {_              methodVisitor.visitFieldInsn(opcode, owner, name, descriptor)__            } else {_              boolean isInterface =_                  classFileBuffer[cpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG__              methodVisitor.visitMethodInsn(opcode, owner, name, descriptor, isInterface)__            }_            if (opcode == Opcodes.INVOKEINTERFACE) {_              currentOffset += 5__            } else {_              currentOffset += 3__            }_            break__          }_        case Constants.INVOKEDYNAMIC:_          {_            int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)]__            int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__            String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__            String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__            int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)]__            Handle handle =_                (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__            Object[] bootstrapMethodArguments =_                new Object[readUnsignedShort(bootstrapMethodOffset + 2)]__            bootstrapMethodOffset += 4__            for (int i = 0_ i < bootstrapMethodArguments.length_ i++) {_              bootstrapMethodArguments[i] =_                  readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__              bootstrapMethodOffset += 2__            }_            methodVisitor.visitInvokeDynamicInsn(_                name, descriptor, handle, bootstrapMethodArguments)__            currentOffset += 5__            break__          }_        case Constants.NEW:_        case Constants.ANEWARRAY:_        case Constants.CHECKCAST:_        case Constants.INSTANCEOF:_          methodVisitor.visitTypeInsn(opcode, readClass(currentOffset + 1, charBuffer))__          currentOffset += 3__          break__        case Constants.IINC:_          methodVisitor.visitIincInsn(_              classFileBuffer[currentOffset + 1] & 0xFF, classFileBuffer[currentOffset + 2])__          currentOffset += 3__          break__        case Constants.MULTIANEWARRAY:_          methodVisitor.visitMultiANewArrayInsn(_              readClass(currentOffset + 1, charBuffer), classFileBuffer[currentOffset + 3] & 0xFF)__          currentOffset += 4__          break__        default:_          throw new AssertionError()__      }__      _      while (visibleTypeAnnotationOffsets != null_          && currentVisibleTypeAnnotationIndex < visibleTypeAnnotationOffsets.length_          && currentVisibleTypeAnnotationBytecodeOffset <= currentBytecodeOffset) {_        if (currentVisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {_          _          int currentAnnotationOffset =_              readTypeAnnotationTarget(_                  context, visibleTypeAnnotationOffsets[currentVisibleTypeAnnotationIndex])__          _          String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__          currentAnnotationOffset += 2__          _          readElementValues(_              methodVisitor.visitInsnAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  annotationDescriptor,_                   true),_              currentAnnotationOffset,_               true,_              charBuffer)__        }_        currentVisibleTypeAnnotationBytecodeOffset =_            getTypeAnnotationBytecodeOffset(_                visibleTypeAnnotationOffsets, ++currentVisibleTypeAnnotationIndex)__      }__      _      while (invisibleTypeAnnotationOffsets != null_          && currentInvisibleTypeAnnotationIndex < invisibleTypeAnnotationOffsets.length_          && currentInvisibleTypeAnnotationBytecodeOffset <= currentBytecodeOffset) {_        if (currentInvisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {_          _          int currentAnnotationOffset =_              readTypeAnnotationTarget(_                  context, invisibleTypeAnnotationOffsets[currentInvisibleTypeAnnotationIndex])__          _          String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__          currentAnnotationOffset += 2__          _          readElementValues(_              methodVisitor.visitInsnAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  annotationDescriptor,_                   false),_              currentAnnotationOffset,_               true,_              charBuffer)__        }_        currentInvisibleTypeAnnotationBytecodeOffset =_            getTypeAnnotationBytecodeOffset(_                invisibleTypeAnnotationOffsets, ++currentInvisibleTypeAnnotationIndex)__      }_    }_    if (labels[codeLength] != null) {_      methodVisitor.visitLabel(labels[codeLength])__    }__    _    if (localVariableTableOffset != 0 && (context.parsingOptions & SKIP_DEBUG) == 0) {_      _      int[] typeTable = null__      if (localVariableTypeTableOffset != 0) {_        typeTable = new int[readUnsignedShort(localVariableTypeTableOffset) * 3]__        currentOffset = localVariableTypeTableOffset + 2__        int typeTableIndex = typeTable.length__        while (typeTableIndex > 0) {_          _          typeTable[--typeTableIndex] = currentOffset + 6__          typeTable[--typeTableIndex] = readUnsignedShort(currentOffset + 8)__          typeTable[--typeTableIndex] = readUnsignedShort(currentOffset)__          currentOffset += 10__        }_      }_      int localVariableTableLength = readUnsignedShort(localVariableTableOffset)__      currentOffset = localVariableTableOffset + 2__      while (localVariableTableLength-- > 0) {_        int startPc = readUnsignedShort(currentOffset)__        int length = readUnsignedShort(currentOffset + 2)__        String name = readUTF8(currentOffset + 4, charBuffer)__        String descriptor = readUTF8(currentOffset + 6, charBuffer)__        int index = readUnsignedShort(currentOffset + 8)__        currentOffset += 10__        String signature = null__        if (typeTable != null) {_          for (int i = 0_ i < typeTable.length_ i += 3) {_            if (typeTable[i] == startPc && typeTable[i + 1] == index) {_              signature = readUTF8(typeTable[i + 2], charBuffer)__              break__            }_          }_        }_        methodVisitor.visitLocalVariable(_            name, descriptor, signature, labels[startPc], labels[startPc + length], index)__      }_    }__    _    if (visibleTypeAnnotationOffsets != null) {_      for (int i = 0_ i < visibleTypeAnnotationOffsets.length_ ++i) {_        int targetType = readByte(visibleTypeAnnotationOffsets[i])__        if (targetType == TypeReference.LOCAL_VARIABLE_            || targetType == TypeReference.RESOURCE_VARIABLE) {_          _          currentOffset = readTypeAnnotationTarget(context, visibleTypeAnnotationOffsets[i])__          _          String annotationDescriptor = readUTF8(currentOffset, charBuffer)__          currentOffset += 2__          _          readElementValues(_              methodVisitor.visitLocalVariableAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  context.currentLocalVariableAnnotationRangeStarts,_                  context.currentLocalVariableAnnotationRangeEnds,_                  context.currentLocalVariableAnnotationRangeIndices,_                  annotationDescriptor,_                   true),_              currentOffset,_               true,_              charBuffer)__        }_      }_    }__    _    if (invisibleTypeAnnotationOffsets != null) {_      for (int i = 0_ i < invisibleTypeAnnotationOffsets.length_ ++i) {_        int targetType = readByte(invisibleTypeAnnotationOffsets[i])__        if (targetType == TypeReference.LOCAL_VARIABLE_            || targetType == TypeReference.RESOURCE_VARIABLE) {_          _          currentOffset = readTypeAnnotationTarget(context, invisibleTypeAnnotationOffsets[i])__          _          String annotationDescriptor = readUTF8(currentOffset, charBuffer)__          currentOffset += 2__          _          readElementValues(_              methodVisitor.visitLocalVariableAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  context.currentLocalVariableAnnotationRangeStarts,_                  context.currentLocalVariableAnnotationRangeEnds,_                  context.currentLocalVariableAnnotationRangeIndices,_                  annotationDescriptor,_                   false),_              currentOffset,_               true,_              charBuffer)__        }_      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      methodVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    methodVisitor.visitMaxs(maxStack, maxLocals)__  };reads,a,jvms,code,attribute,and,makes,the,given,visitor,visit,it,param,method,visitor,the,visitor,that,must,visit,the,code,attribute,param,context,information,about,the,class,being,parsed,param,code,offset,the,start,offset,in,link,b,of,the,code,attribute,excluding,its,and,fields;private,void,read,code,final,method,visitor,method,visitor,final,context,context,final,int,code,offset,int,current,offset,code,offset,final,byte,class,file,buffer,b,final,char,char,buffer,context,char,buffer,final,int,max,stack,read,unsigned,short,current,offset,final,int,max,locals,read,unsigned,short,current,offset,2,final,int,code,length,read,int,current,offset,4,current,offset,8,final,int,bytecode,start,offset,current,offset,final,int,bytecode,end,offset,current,offset,code,length,final,label,labels,context,current,method,labels,new,label,code,length,1,while,current,offset,bytecode,end,offset,final,int,bytecode,offset,current,offset,bytecode,start,offset,final,int,opcode,class,file,buffer,current,offset,0x,ff,switch,opcode,case,constants,nop,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,iaload,case,constants,laload,case,constants,faload,case,constants,daload,case,constants,aaload,case,constants,baload,case,constants,caload,case,constants,saload,case,constants,iastore,case,constants,lastore,case,constants,fastore,case,constants,dastore,case,constants,aastore,case,constants,bastore,case,constants,castore,case,constants,sastore,case,constants,pop,case,constants,pop2,case,constants,dup,case,constants,case,constants,case,constants,dup2,case,constants,case,constants,case,constants,swap,case,constants,iadd,case,constants,ladd,case,constants,fadd,case,constants,dadd,case,constants,isub,case,constants,lsub,case,constants,fsub,case,constants,dsub,case,constants,imul,case,constants,lmul,case,constants,fmul,case,constants,dmul,case,constants,idiv,case,constants,ldiv,case,constants,fdiv,case,constants,ddiv,case,constants,irem,case,constants,lrem,case,constants,frem,case,constants,drem,case,constants,ineg,case,constants,lneg,case,constants,fneg,case,constants,dneg,case,constants,ishl,case,constants,lshl,case,constants,ishr,case,constants,lshr,case,constants,iushr,case,constants,lushr,case,constants,iand,case,constants,land,case,constants,ior,case,constants,lor,case,constants,ixor,case,constants,lxor,case,constants,i2l,case,constants,i2f,case,constants,i2d,case,constants,l2i,case,constants,l2f,case,constants,l2d,case,constants,f2i,case,constants,f2l,case,constants,f2d,case,constants,d2i,case,constants,d2l,case,constants,d2f,case,constants,i2b,case,constants,i2c,case,constants,i2s,case,constants,lcmp,case,constants,fcmpl,case,constants,fcmpg,case,constants,dcmpl,case,constants,dcmpg,case,constants,ireturn,case,constants,lreturn,case,constants,freturn,case,constants,dreturn,case,constants,areturn,case,constants,return,case,constants,arraylength,case,constants,athrow,case,constants,monitorenter,case,constants,monitorexit,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,current,offset,1,break,case,constants,ifeq,case,constants,ifne,case,constants,iflt,case,constants,ifge,case,constants,ifgt,case,constants,ifle,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,goto,case,constants,jsr,case,constants,ifnull,case,constants,ifnonnull,create,label,bytecode,offset,read,short,current,offset,1,labels,current,offset,3,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,create,label,bytecode,offset,read,unsigned,short,current,offset,1,labels,current,offset,3,break,case,constants,case,constants,case,constants,create,label,bytecode,offset,read,int,current,offset,1,labels,current,offset,5,break,case,constants,wide,switch,class,file,buffer,current,offset,1,0x,ff,case,constants,iload,case,constants,fload,case,constants,aload,case,constants,lload,case,constants,dload,case,constants,istore,case,constants,fstore,case,constants,astore,case,constants,lstore,case,constants,dstore,case,constants,ret,current,offset,4,break,case,constants,iinc,current,offset,6,break,default,throw,new,illegal,argument,exception,break,case,constants,tableswitch,current,offset,4,bytecode,offset,3,create,label,bytecode,offset,read,int,current,offset,labels,int,num,table,entries,read,int,current,offset,8,read,int,current,offset,4,1,current,offset,12,while,num,table,entries,0,create,label,bytecode,offset,read,int,current,offset,labels,current,offset,4,break,case,constants,lookupswitch,current,offset,4,bytecode,offset,3,create,label,bytecode,offset,read,int,current,offset,labels,int,num,switch,cases,read,int,current,offset,4,current,offset,8,while,num,switch,cases,0,create,label,bytecode,offset,read,int,current,offset,4,labels,current,offset,8,break,case,constants,iload,case,constants,lload,case,constants,fload,case,constants,dload,case,constants,aload,case,constants,istore,case,constants,lstore,case,constants,fstore,case,constants,dstore,case,constants,astore,case,constants,ret,case,constants,bipush,case,constants,newarray,case,constants,ldc,current,offset,2,break,case,constants,sipush,case,constants,case,constants,case,constants,getstatic,case,constants,putstatic,case,constants,getfield,case,constants,putfield,case,constants,invokevirtual,case,constants,invokespecial,case,constants,invokestatic,case,constants,new,case,constants,anewarray,case,constants,checkcast,case,constants,instanceof,case,constants,iinc,current,offset,3,break,case,constants,invokeinterface,case,constants,invokedynamic,current,offset,5,break,case,constants,multianewarray,current,offset,4,break,default,throw,new,illegal,argument,exception,int,exception,table,length,read,unsigned,short,current,offset,current,offset,2,while,exception,table,length,0,label,start,create,label,read,unsigned,short,current,offset,labels,label,end,create,label,read,unsigned,short,current,offset,2,labels,label,handler,create,label,read,unsigned,short,current,offset,4,labels,string,catch,type,read,utf8,cp,info,offsets,read,unsigned,short,current,offset,6,char,buffer,current,offset,8,method,visitor,visit,try,catch,block,start,end,handler,catch,type,int,stack,map,frame,offset,0,int,stack,map,table,end,offset,0,boolean,compressed,frames,true,int,local,variable,table,offset,0,int,local,variable,type,table,offset,0,int,visible,type,annotation,offsets,null,int,invisible,type,annotation,offsets,null,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,equals,attribute,name,if,context,parsing,options,0,local,variable,table,offset,current,offset,int,current,local,variable,table,offset,current,offset,int,local,variable,table,length,read,unsigned,short,current,local,variable,table,offset,current,local,variable,table,offset,2,while,local,variable,table,length,0,int,start,pc,read,unsigned,short,current,local,variable,table,offset,create,debug,label,start,pc,labels,int,length,read,unsigned,short,current,local,variable,table,offset,2,create,debug,label,start,pc,length,labels,current,local,variable,table,offset,10,else,if,constants,equals,attribute,name,local,variable,type,table,offset,current,offset,else,if,constants,equals,attribute,name,if,context,parsing,options,0,int,current,line,number,table,offset,current,offset,int,line,number,table,length,read,unsigned,short,current,line,number,table,offset,current,line,number,table,offset,2,while,line,number,table,length,0,int,start,pc,read,unsigned,short,current,line,number,table,offset,int,line,number,read,unsigned,short,current,line,number,table,offset,2,current,line,number,table,offset,4,create,debug,label,start,pc,labels,labels,start,pc,add,line,number,line,number,else,if,constants,equals,attribute,name,visible,type,annotation,offsets,read,type,annotations,method,visitor,context,current,offset,true,else,if,constants,equals,attribute,name,invisible,type,annotation,offsets,read,type,annotations,method,visitor,context,current,offset,false,else,if,constants,equals,attribute,name,if,context,parsing,options,0,stack,map,frame,offset,current,offset,2,stack,map,table,end,offset,current,offset,attribute,length,else,if,stack,map,equals,attribute,name,if,context,parsing,options,0,stack,map,frame,offset,current,offset,2,stack,map,table,end,offset,current,offset,attribute,length,compressed,frames,false,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,code,offset,labels,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,final,boolean,expand,frames,context,parsing,options,0,if,stack,map,frame,offset,0,context,current,frame,offset,1,context,current,frame,type,0,context,current,frame,local,count,0,context,current,frame,local,count,delta,0,context,current,frame,local,types,new,object,max,locals,context,current,frame,stack,count,0,context,current,frame,stack,types,new,object,max,stack,if,expand,frames,compute,implicit,frame,context,for,int,offset,stack,map,frame,offset,offset,stack,map,table,end,offset,2,offset,if,class,file,buffer,offset,frame,int,potential,bytecode,offset,read,unsigned,short,offset,1,if,potential,bytecode,offset,0,potential,bytecode,offset,code,length,class,file,buffer,bytecode,start,offset,potential,bytecode,offset,0x,ff,opcodes,new,create,label,potential,bytecode,offset,labels,if,expand,frames,context,parsing,options,0,method,visitor,visit,frame,opcodes,max,locals,null,0,null,int,current,visible,type,annotation,index,0,int,current,visible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,visible,type,annotation,offsets,0,int,current,invisible,type,annotation,index,0,int,current,invisible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,invisible,type,annotation,offsets,0,boolean,insert,frame,false,final,int,wide,jump,opcode,delta,context,parsing,options,0,constants,0,current,offset,bytecode,start,offset,while,current,offset,bytecode,end,offset,final,int,current,bytecode,offset,current,offset,bytecode,start,offset,label,current,label,labels,current,bytecode,offset,if,current,label,null,current,label,accept,method,visitor,context,parsing,options,0,while,stack,map,frame,offset,0,context,current,frame,offset,current,bytecode,offset,context,current,frame,offset,1,if,context,current,frame,offset,1,if,compressed,frames,expand,frames,method,visitor,visit,frame,opcodes,context,current,frame,local,count,context,current,frame,local,types,context,current,frame,stack,count,context,current,frame,stack,types,else,method,visitor,visit,frame,context,current,frame,type,context,current,frame,local,count,delta,context,current,frame,local,types,context,current,frame,stack,count,context,current,frame,stack,types,insert,frame,false,if,stack,map,frame,offset,stack,map,table,end,offset,stack,map,frame,offset,read,stack,map,frame,stack,map,frame,offset,compressed,frames,expand,frames,context,else,stack,map,frame,offset,0,if,insert,frame,if,context,parsing,options,0,method,visitor,visit,frame,constants,0,null,0,null,insert,frame,false,int,opcode,class,file,buffer,current,offset,0x,ff,switch,opcode,case,constants,nop,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,iaload,case,constants,laload,case,constants,faload,case,constants,daload,case,constants,aaload,case,constants,baload,case,constants,caload,case,constants,saload,case,constants,iastore,case,constants,lastore,case,constants,fastore,case,constants,dastore,case,constants,aastore,case,constants,bastore,case,constants,castore,case,constants,sastore,case,constants,pop,case,constants,pop2,case,constants,dup,case,constants,case,constants,case,constants,dup2,case,constants,case,constants,case,constants,swap,case,constants,iadd,case,constants,ladd,case,constants,fadd,case,constants,dadd,case,constants,isub,case,constants,lsub,case,constants,fsub,case,constants,dsub,case,constants,imul,case,constants,lmul,case,constants,fmul,case,constants,dmul,case,constants,idiv,case,constants,ldiv,case,constants,fdiv,case,constants,ddiv,case,constants,irem,case,constants,lrem,case,constants,frem,case,constants,drem,case,constants,ineg,case,constants,lneg,case,constants,fneg,case,constants,dneg,case,constants,ishl,case,constants,lshl,case,constants,ishr,case,constants,lshr,case,constants,iushr,case,constants,lushr,case,constants,iand,case,constants,land,case,constants,ior,case,constants,lor,case,constants,ixor,case,constants,lxor,case,constants,i2l,case,constants,i2f,case,constants,i2d,case,constants,l2i,case,constants,l2f,case,constants,l2d,case,constants,f2i,case,constants,f2l,case,constants,f2d,case,constants,d2i,case,constants,d2l,case,constants,d2f,case,constants,i2b,case,constants,i2c,case,constants,i2s,case,constants,lcmp,case,constants,fcmpl,case,constants,fcmpg,case,constants,dcmpl,case,constants,dcmpg,case,constants,ireturn,case,constants,lreturn,case,constants,freturn,case,constants,dreturn,case,constants,areturn,case,constants,return,case,constants,arraylength,case,constants,athrow,case,constants,monitorenter,case,constants,monitorexit,method,visitor,visit,insn,opcode,current,offset,1,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,constants,method,visitor,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,current,offset,1,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,constants,method,visitor,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,current,offset,1,break,case,constants,ifeq,case,constants,ifne,case,constants,iflt,case,constants,ifge,case,constants,ifgt,case,constants,ifle,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,goto,case,constants,jsr,case,constants,ifnull,case,constants,ifnonnull,method,visitor,visit,jump,insn,opcode,labels,current,bytecode,offset,read,short,current,offset,1,current,offset,3,break,case,constants,case,constants,method,visitor,visit,jump,insn,opcode,wide,jump,opcode,delta,labels,current,bytecode,offset,read,int,current,offset,1,current,offset,5,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,opcode,constants,opcode,constants,opcode,constants,label,target,labels,current,bytecode,offset,read,unsigned,short,current,offset,1,if,opcode,opcodes,goto,opcode,opcodes,jsr,method,visitor,visit,jump,insn,opcode,constants,target,else,opcode,opcode,opcodes,goto,opcode,1,1,1,opcode,1,label,endif,create,label,current,bytecode,offset,3,labels,method,visitor,visit,jump,insn,opcode,endif,method,visitor,visit,jump,insn,constants,target,insert,frame,true,current,offset,3,break,case,constants,method,visitor,visit,jump,insn,constants,labels,current,bytecode,offset,read,int,current,offset,1,insert,frame,true,current,offset,5,break,case,constants,wide,opcode,class,file,buffer,current,offset,1,0x,ff,if,opcode,opcodes,iinc,method,visitor,visit,iinc,insn,read,unsigned,short,current,offset,2,read,short,current,offset,4,current,offset,6,else,method,visitor,visit,var,insn,opcode,read,unsigned,short,current,offset,2,current,offset,4,break,case,constants,tableswitch,current,offset,4,current,bytecode,offset,3,label,default,label,labels,current,bytecode,offset,read,int,current,offset,int,low,read,int,current,offset,4,int,high,read,int,current,offset,8,current,offset,12,label,table,new,label,high,low,1,for,int,i,0,i,table,length,i,table,i,labels,current,bytecode,offset,read,int,current,offset,current,offset,4,method,visitor,visit,table,switch,insn,low,high,default,label,table,break,case,constants,lookupswitch,current,offset,4,current,bytecode,offset,3,label,default,label,labels,current,bytecode,offset,read,int,current,offset,int,num,pairs,read,int,current,offset,4,current,offset,8,int,keys,new,int,num,pairs,label,values,new,label,num,pairs,for,int,i,0,i,num,pairs,i,keys,i,read,int,current,offset,values,i,labels,current,bytecode,offset,read,int,current,offset,4,current,offset,8,method,visitor,visit,lookup,switch,insn,default,label,keys,values,break,case,constants,iload,case,constants,lload,case,constants,fload,case,constants,dload,case,constants,aload,case,constants,istore,case,constants,lstore,case,constants,fstore,case,constants,dstore,case,constants,astore,case,constants,ret,method,visitor,visit,var,insn,opcode,class,file,buffer,current,offset,1,0x,ff,current,offset,2,break,case,constants,bipush,case,constants,newarray,method,visitor,visit,int,insn,opcode,class,file,buffer,current,offset,1,current,offset,2,break,case,constants,sipush,method,visitor,visit,int,insn,opcode,read,short,current,offset,1,current,offset,3,break,case,constants,ldc,method,visitor,visit,ldc,insn,read,const,class,file,buffer,current,offset,1,0x,ff,char,buffer,current,offset,2,break,case,constants,case,constants,method,visitor,visit,ldc,insn,read,const,read,unsigned,short,current,offset,1,char,buffer,current,offset,3,break,case,constants,getstatic,case,constants,putstatic,case,constants,getfield,case,constants,putfield,case,constants,invokevirtual,case,constants,invokespecial,case,constants,invokestatic,case,constants,invokeinterface,int,cp,info,offset,cp,info,offsets,read,unsigned,short,current,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,owner,read,class,cp,info,offset,char,buffer,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,if,opcode,opcodes,invokevirtual,method,visitor,visit,field,insn,opcode,owner,name,descriptor,else,boolean,is,interface,class,file,buffer,cp,info,offset,1,symbol,method,visitor,visit,method,insn,opcode,owner,name,descriptor,is,interface,if,opcode,opcodes,invokeinterface,current,offset,5,else,current,offset,3,break,case,constants,invokedynamic,int,cp,info,offset,cp,info,offsets,read,unsigned,short,current,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,int,bootstrap,method,offset,bootstrap,method,offsets,read,unsigned,short,cp,info,offset,handle,handle,handle,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,object,bootstrap,method,arguments,new,object,read,unsigned,short,bootstrap,method,offset,2,bootstrap,method,offset,4,for,int,i,0,i,bootstrap,method,arguments,length,i,bootstrap,method,arguments,i,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,bootstrap,method,offset,2,method,visitor,visit,invoke,dynamic,insn,name,descriptor,handle,bootstrap,method,arguments,current,offset,5,break,case,constants,new,case,constants,anewarray,case,constants,checkcast,case,constants,instanceof,method,visitor,visit,type,insn,opcode,read,class,current,offset,1,char,buffer,current,offset,3,break,case,constants,iinc,method,visitor,visit,iinc,insn,class,file,buffer,current,offset,1,0x,ff,class,file,buffer,current,offset,2,current,offset,3,break,case,constants,multianewarray,method,visitor,visit,multi,anew,array,insn,read,class,current,offset,1,char,buffer,class,file,buffer,current,offset,3,0x,ff,current,offset,4,break,default,throw,new,assertion,error,while,visible,type,annotation,offsets,null,current,visible,type,annotation,index,visible,type,annotation,offsets,length,current,visible,type,annotation,bytecode,offset,current,bytecode,offset,if,current,visible,type,annotation,bytecode,offset,current,bytecode,offset,int,current,annotation,offset,read,type,annotation,target,context,visible,type,annotation,offsets,current,visible,type,annotation,index,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,read,element,values,method,visitor,visit,insn,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,current,visible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,visible,type,annotation,offsets,current,visible,type,annotation,index,while,invisible,type,annotation,offsets,null,current,invisible,type,annotation,index,invisible,type,annotation,offsets,length,current,invisible,type,annotation,bytecode,offset,current,bytecode,offset,if,current,invisible,type,annotation,bytecode,offset,current,bytecode,offset,int,current,annotation,offset,read,type,annotation,target,context,invisible,type,annotation,offsets,current,invisible,type,annotation,index,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,read,element,values,method,visitor,visit,insn,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,current,invisible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,invisible,type,annotation,offsets,current,invisible,type,annotation,index,if,labels,code,length,null,method,visitor,visit,label,labels,code,length,if,local,variable,table,offset,0,context,parsing,options,0,int,type,table,null,if,local,variable,type,table,offset,0,type,table,new,int,read,unsigned,short,local,variable,type,table,offset,3,current,offset,local,variable,type,table,offset,2,int,type,table,index,type,table,length,while,type,table,index,0,type,table,type,table,index,current,offset,6,type,table,type,table,index,read,unsigned,short,current,offset,8,type,table,type,table,index,read,unsigned,short,current,offset,current,offset,10,int,local,variable,table,length,read,unsigned,short,local,variable,table,offset,current,offset,local,variable,table,offset,2,while,local,variable,table,length,0,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,string,name,read,utf8,current,offset,4,char,buffer,string,descriptor,read,utf8,current,offset,6,char,buffer,int,index,read,unsigned,short,current,offset,8,current,offset,10,string,signature,null,if,type,table,null,for,int,i,0,i,type,table,length,i,3,if,type,table,i,start,pc,type,table,i,1,index,signature,read,utf8,type,table,i,2,char,buffer,break,method,visitor,visit,local,variable,name,descriptor,signature,labels,start,pc,labels,start,pc,length,index,if,visible,type,annotation,offsets,null,for,int,i,0,i,visible,type,annotation,offsets,length,i,int,target,type,read,byte,visible,type,annotation,offsets,i,if,target,type,type,reference,target,type,type,reference,current,offset,read,type,annotation,target,context,visible,type,annotation,offsets,i,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,read,element,values,method,visitor,visit,local,variable,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,context,current,local,variable,annotation,range,starts,context,current,local,variable,annotation,range,ends,context,current,local,variable,annotation,range,indices,annotation,descriptor,true,current,offset,true,char,buffer,if,invisible,type,annotation,offsets,null,for,int,i,0,i,invisible,type,annotation,offsets,length,i,int,target,type,read,byte,invisible,type,annotation,offsets,i,if,target,type,type,reference,target,type,type,reference,current,offset,read,type,annotation,target,context,invisible,type,annotation,offsets,i,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,read,element,values,method,visitor,visit,local,variable,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,context,current,local,variable,annotation,range,starts,context,current,local,variable,annotation,range,ends,context,current,local,variable,annotation,range,indices,annotation,descriptor,false,current,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,method,visitor,visit,attribute,attributes,attributes,next,attribute,method,visitor,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(       final MethodVisitor methodVisitor, final Context context, final int codeOffset);1539119582;Reads a JVMS 'Code' attribute and makes the given visitor visit it.__@param methodVisitor the visitor that must visit the Code attribute._@param context information about the class being parsed._@param codeOffset the start offset in {@link #b} of the Code attribute, excluding its_attribute_name_index and attribute_length fields.;private void readCode(_      final MethodVisitor methodVisitor, final Context context, final int codeOffset) {_    int currentOffset = codeOffset___    _    final byte[] classFileBuffer = b__    final char[] charBuffer = context.charBuffer__    final int maxStack = readUnsignedShort(currentOffset)__    final int maxLocals = readUnsignedShort(currentOffset + 2)__    final int codeLength = readInt(currentOffset + 4)__    currentOffset += 8___    _    final int bytecodeStartOffset = currentOffset__    final int bytecodeEndOffset = currentOffset + codeLength__    final Label[] labels = context.currentMethodLabels = new Label[codeLength + 1]__    while (currentOffset < bytecodeEndOffset) {_      final int bytecodeOffset = currentOffset - bytecodeStartOffset__      final int opcode = classFileBuffer[currentOffset] & 0xFF__      switch (opcode) {_        case Constants.NOP:_        case Constants.ACONST_NULL:_        case Constants.ICONST_M1:_        case Constants.ICONST_0:_        case Constants.ICONST_1:_        case Constants.ICONST_2:_        case Constants.ICONST_3:_        case Constants.ICONST_4:_        case Constants.ICONST_5:_        case Constants.LCONST_0:_        case Constants.LCONST_1:_        case Constants.FCONST_0:_        case Constants.FCONST_1:_        case Constants.FCONST_2:_        case Constants.DCONST_0:_        case Constants.DCONST_1:_        case Constants.IALOAD:_        case Constants.LALOAD:_        case Constants.FALOAD:_        case Constants.DALOAD:_        case Constants.AALOAD:_        case Constants.BALOAD:_        case Constants.CALOAD:_        case Constants.SALOAD:_        case Constants.IASTORE:_        case Constants.LASTORE:_        case Constants.FASTORE:_        case Constants.DASTORE:_        case Constants.AASTORE:_        case Constants.BASTORE:_        case Constants.CASTORE:_        case Constants.SASTORE:_        case Constants.POP:_        case Constants.POP2:_        case Constants.DUP:_        case Constants.DUP_X1:_        case Constants.DUP_X2:_        case Constants.DUP2:_        case Constants.DUP2_X1:_        case Constants.DUP2_X2:_        case Constants.SWAP:_        case Constants.IADD:_        case Constants.LADD:_        case Constants.FADD:_        case Constants.DADD:_        case Constants.ISUB:_        case Constants.LSUB:_        case Constants.FSUB:_        case Constants.DSUB:_        case Constants.IMUL:_        case Constants.LMUL:_        case Constants.FMUL:_        case Constants.DMUL:_        case Constants.IDIV:_        case Constants.LDIV:_        case Constants.FDIV:_        case Constants.DDIV:_        case Constants.IREM:_        case Constants.LREM:_        case Constants.FREM:_        case Constants.DREM:_        case Constants.INEG:_        case Constants.LNEG:_        case Constants.FNEG:_        case Constants.DNEG:_        case Constants.ISHL:_        case Constants.LSHL:_        case Constants.ISHR:_        case Constants.LSHR:_        case Constants.IUSHR:_        case Constants.LUSHR:_        case Constants.IAND:_        case Constants.LAND:_        case Constants.IOR:_        case Constants.LOR:_        case Constants.IXOR:_        case Constants.LXOR:_        case Constants.I2L:_        case Constants.I2F:_        case Constants.I2D:_        case Constants.L2I:_        case Constants.L2F:_        case Constants.L2D:_        case Constants.F2I:_        case Constants.F2L:_        case Constants.F2D:_        case Constants.D2I:_        case Constants.D2L:_        case Constants.D2F:_        case Constants.I2B:_        case Constants.I2C:_        case Constants.I2S:_        case Constants.LCMP:_        case Constants.FCMPL:_        case Constants.FCMPG:_        case Constants.DCMPL:_        case Constants.DCMPG:_        case Constants.IRETURN:_        case Constants.LRETURN:_        case Constants.FRETURN:_        case Constants.DRETURN:_        case Constants.ARETURN:_        case Constants.RETURN:_        case Constants.ARRAYLENGTH:_        case Constants.ATHROW:_        case Constants.MONITORENTER:_        case Constants.MONITOREXIT:_        case Constants.ILOAD_0:_        case Constants.ILOAD_1:_        case Constants.ILOAD_2:_        case Constants.ILOAD_3:_        case Constants.LLOAD_0:_        case Constants.LLOAD_1:_        case Constants.LLOAD_2:_        case Constants.LLOAD_3:_        case Constants.FLOAD_0:_        case Constants.FLOAD_1:_        case Constants.FLOAD_2:_        case Constants.FLOAD_3:_        case Constants.DLOAD_0:_        case Constants.DLOAD_1:_        case Constants.DLOAD_2:_        case Constants.DLOAD_3:_        case Constants.ALOAD_0:_        case Constants.ALOAD_1:_        case Constants.ALOAD_2:_        case Constants.ALOAD_3:_        case Constants.ISTORE_0:_        case Constants.ISTORE_1:_        case Constants.ISTORE_2:_        case Constants.ISTORE_3:_        case Constants.LSTORE_0:_        case Constants.LSTORE_1:_        case Constants.LSTORE_2:_        case Constants.LSTORE_3:_        case Constants.FSTORE_0:_        case Constants.FSTORE_1:_        case Constants.FSTORE_2:_        case Constants.FSTORE_3:_        case Constants.DSTORE_0:_        case Constants.DSTORE_1:_        case Constants.DSTORE_2:_        case Constants.DSTORE_3:_        case Constants.ASTORE_0:_        case Constants.ASTORE_1:_        case Constants.ASTORE_2:_        case Constants.ASTORE_3:_          currentOffset += 1__          break__        case Constants.IFEQ:_        case Constants.IFNE:_        case Constants.IFLT:_        case Constants.IFGE:_        case Constants.IFGT:_        case Constants.IFLE:_        case Constants.IF_ICMPEQ:_        case Constants.IF_ICMPNE:_        case Constants.IF_ICMPLT:_        case Constants.IF_ICMPGE:_        case Constants.IF_ICMPGT:_        case Constants.IF_ICMPLE:_        case Constants.IF_ACMPEQ:_        case Constants.IF_ACMPNE:_        case Constants.GOTO:_        case Constants.JSR:_        case Constants.IFNULL:_        case Constants.IFNONNULL:_          createLabel(bytecodeOffset + readShort(currentOffset + 1), labels)__          currentOffset += 3__          break__        case Constants.ASM_IFEQ:_        case Constants.ASM_IFNE:_        case Constants.ASM_IFLT:_        case Constants.ASM_IFGE:_        case Constants.ASM_IFGT:_        case Constants.ASM_IFLE:_        case Constants.ASM_IF_ICMPEQ:_        case Constants.ASM_IF_ICMPNE:_        case Constants.ASM_IF_ICMPLT:_        case Constants.ASM_IF_ICMPGE:_        case Constants.ASM_IF_ICMPGT:_        case Constants.ASM_IF_ICMPLE:_        case Constants.ASM_IF_ACMPEQ:_        case Constants.ASM_IF_ACMPNE:_        case Constants.ASM_GOTO:_        case Constants.ASM_JSR:_        case Constants.ASM_IFNULL:_        case Constants.ASM_IFNONNULL:_          createLabel(bytecodeOffset + readUnsignedShort(currentOffset + 1), labels)__          currentOffset += 3__          break__        case Constants.GOTO_W:_        case Constants.JSR_W:_        case Constants.ASM_GOTO_W:_          createLabel(bytecodeOffset + readInt(currentOffset + 1), labels)__          currentOffset += 5__          break__        case Constants.WIDE:_          switch (classFileBuffer[currentOffset + 1] & 0xFF) {_            case Constants.ILOAD:_            case Constants.FLOAD:_            case Constants.ALOAD:_            case Constants.LLOAD:_            case Constants.DLOAD:_            case Constants.ISTORE:_            case Constants.FSTORE:_            case Constants.ASTORE:_            case Constants.LSTORE:_            case Constants.DSTORE:_            case Constants.RET:_              currentOffset += 4__              break__            case Constants.IINC:_              currentOffset += 6__              break__            default:_              throw new IllegalArgumentException()__          }_          break__        case Constants.TABLESWITCH:_          _          currentOffset += 4 - (bytecodeOffset & 3)__          _          createLabel(bytecodeOffset + readInt(currentOffset), labels)__          int numTableEntries = readInt(currentOffset + 8) - readInt(currentOffset + 4) + 1__          currentOffset += 12__          _          while (numTableEntries-- > 0) {_            createLabel(bytecodeOffset + readInt(currentOffset), labels)__            currentOffset += 4__          }_          break__        case Constants.LOOKUPSWITCH:_          _          currentOffset += 4 - (bytecodeOffset & 3)__          _          createLabel(bytecodeOffset + readInt(currentOffset), labels)__          int numSwitchCases = readInt(currentOffset + 4)__          currentOffset += 8__          _          while (numSwitchCases-- > 0) {_            createLabel(bytecodeOffset + readInt(currentOffset + 4), labels)__            currentOffset += 8__          }_          break__        case Constants.ILOAD:_        case Constants.LLOAD:_        case Constants.FLOAD:_        case Constants.DLOAD:_        case Constants.ALOAD:_        case Constants.ISTORE:_        case Constants.LSTORE:_        case Constants.FSTORE:_        case Constants.DSTORE:_        case Constants.ASTORE:_        case Constants.RET:_        case Constants.BIPUSH:_        case Constants.NEWARRAY:_        case Constants.LDC:_          currentOffset += 2__          break__        case Constants.SIPUSH:_        case Constants.LDC_W:_        case Constants.LDC2_W:_        case Constants.GETSTATIC:_        case Constants.PUTSTATIC:_        case Constants.GETFIELD:_        case Constants.PUTFIELD:_        case Constants.INVOKEVIRTUAL:_        case Constants.INVOKESPECIAL:_        case Constants.INVOKESTATIC:_        case Constants.NEW:_        case Constants.ANEWARRAY:_        case Constants.CHECKCAST:_        case Constants.INSTANCEOF:_        case Constants.IINC:_          currentOffset += 3__          break__        case Constants.INVOKEINTERFACE:_        case Constants.INVOKEDYNAMIC:_          currentOffset += 5__          break__        case Constants.MULTIANEWARRAY:_          currentOffset += 4__          break__        default:_          throw new IllegalArgumentException()__      }_    }__    _    _    int exceptionTableLength = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (exceptionTableLength-- > 0) {_      Label start = createLabel(readUnsignedShort(currentOffset), labels)__      Label end = createLabel(readUnsignedShort(currentOffset + 2), labels)__      Label handler = createLabel(readUnsignedShort(currentOffset + 4), labels)__      String catchType = readUTF8(cpInfoOffsets[readUnsignedShort(currentOffset + 6)], charBuffer)__      currentOffset += 8__      methodVisitor.visitTryCatchBlock(start, end, handler, catchType)__    }__    _    _    _    _    _    _    int stackMapFrameOffset = 0__    _    int stackMapTableEndOffset = 0__    _    boolean compressedFrames = true__    _    int localVariableTableOffset = 0__    _    int localVariableTypeTableOffset = 0__    _    _    int[] visibleTypeAnnotationOffsets = null__    _    _    int[] invisibleTypeAnnotationOffsets = null__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      if (Constants.LOCAL_VARIABLE_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_DEBUG) == 0) {_          localVariableTableOffset = currentOffset__          _          int currentLocalVariableTableOffset = currentOffset__          int localVariableTableLength = readUnsignedShort(currentLocalVariableTableOffset)__          currentLocalVariableTableOffset += 2__          while (localVariableTableLength-- > 0) {_            int startPc = readUnsignedShort(currentLocalVariableTableOffset)__            createDebugLabel(startPc, labels)__            int length = readUnsignedShort(currentLocalVariableTableOffset + 2)__            createDebugLabel(startPc + length, labels)__            _            currentLocalVariableTableOffset += 10__          }_        }_      } else if (Constants.LOCAL_VARIABLE_TYPE_TABLE.equals(attributeName)) {_        localVariableTypeTableOffset = currentOffset__        _        _      } else if (Constants.LINE_NUMBER_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_DEBUG) == 0) {_          _          int currentLineNumberTableOffset = currentOffset__          int lineNumberTableLength = readUnsignedShort(currentLineNumberTableOffset)__          currentLineNumberTableOffset += 2__          while (lineNumberTableLength-- > 0) {_            int startPc = readUnsignedShort(currentLineNumberTableOffset)__            int lineNumber = readUnsignedShort(currentLineNumberTableOffset + 2)__            currentLineNumberTableOffset += 4__            createDebugLabel(startPc, labels)__            labels[startPc].addLineNumber(lineNumber)__          }_        }_      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        visibleTypeAnnotationOffsets =_            readTypeAnnotations(methodVisitor, context, currentOffset,  true)__        _        _        _        _        _        _      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        invisibleTypeAnnotationOffsets =_            readTypeAnnotations(methodVisitor, context, currentOffset,  false)__        _      } else if (Constants.STACK_MAP_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_FRAMES) == 0) {_          stackMapFrameOffset = currentOffset + 2__          stackMapTableEndOffset = currentOffset + attributeLength__        }_        _        _        _        _        _        _        _        _        _      } else if ("StackMap".equals(attributeName)) {_        if ((context.parsingOptions & SKIP_FRAMES) == 0) {_          stackMapFrameOffset = currentOffset + 2__          stackMapTableEndOffset = currentOffset + attributeLength__          compressedFrames = false__        }_        _        _        _        _      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                codeOffset,_                labels)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    _    final boolean expandFrames = (context.parsingOptions & EXPAND_FRAMES) != 0__    if (stackMapFrameOffset != 0) {_      _      _      _      context.currentFrameOffset = -1__      context.currentFrameType = 0__      context.currentFrameLocalCount = 0__      context.currentFrameLocalCountDelta = 0__      context.currentFrameLocalTypes = new Object[maxLocals]__      context.currentFrameStackCount = 0__      context.currentFrameStackTypes = new Object[maxStack]__      if (expandFrames) {_        computeImplicitFrame(context)__      }_      _      _      _      _      _      _      _      for (int offset = stackMapFrameOffset_ offset < stackMapTableEndOffset - 2_ ++offset) {_        if (classFileBuffer[offset] == Frame.ITEM_UNINITIALIZED) {_          int potentialBytecodeOffset = readUnsignedShort(offset + 1)__          if (potentialBytecodeOffset >= 0_              && potentialBytecodeOffset < codeLength_              && (classFileBuffer[bytecodeStartOffset + potentialBytecodeOffset] & 0xFF)_                  == Opcodes.NEW) {_            createLabel(potentialBytecodeOffset, labels)__          }_        }_      }_    }_    if (expandFrames && (context.parsingOptions & EXPAND_ASM_INSNS) != 0) {_      _      _      _      _      _      _      methodVisitor.visitFrame(Opcodes.F_NEW, maxLocals, null, 0, null)__    }__    _    __    _    _    int currentVisibleTypeAnnotationIndex = 0__    _    int currentVisibleTypeAnnotationBytecodeOffset =_        getTypeAnnotationBytecodeOffset(visibleTypeAnnotationOffsets, 0)__    _    _    int currentInvisibleTypeAnnotationIndex = 0__    _    int currentInvisibleTypeAnnotationBytecodeOffset =_        getTypeAnnotationBytecodeOffset(invisibleTypeAnnotationOffsets, 0)___    _    boolean insertFrame = false___    _    _    _    final int wideJumpOpcodeDelta =_        (context.parsingOptions & EXPAND_ASM_INSNS) == 0 ? Constants.WIDE_JUMP_OPCODE_DELTA : 0___    currentOffset = bytecodeStartOffset__    while (currentOffset < bytecodeEndOffset) {_      final int currentBytecodeOffset = currentOffset - bytecodeStartOffset___      _      Label currentLabel = labels[currentBytecodeOffset]__      if (currentLabel != null) {_        currentLabel.accept(methodVisitor, (context.parsingOptions & SKIP_DEBUG) == 0)__      }__      _      while (stackMapFrameOffset != 0_          && (context.currentFrameOffset == currentBytecodeOffset_              || context.currentFrameOffset == -1)) {_        _        _        if (context.currentFrameOffset != -1) {_          if (!compressedFrames || expandFrames) {_            methodVisitor.visitFrame(_                Opcodes.F_NEW,_                context.currentFrameLocalCount,_                context.currentFrameLocalTypes,_                context.currentFrameStackCount,_                context.currentFrameStackTypes)__          } else {_            methodVisitor.visitFrame(_                context.currentFrameType,_                context.currentFrameLocalCountDelta,_                context.currentFrameLocalTypes,_                context.currentFrameStackCount,_                context.currentFrameStackTypes)__          }_          _          _          insertFrame = false__        }_        if (stackMapFrameOffset < stackMapTableEndOffset) {_          stackMapFrameOffset =_              readStackMapFrame(stackMapFrameOffset, compressedFrames, expandFrames, context)__        } else {_          stackMapFrameOffset = 0__        }_      }__      _      _      if (insertFrame) {_        if ((context.parsingOptions & EXPAND_FRAMES) != 0) {_          methodVisitor.visitFrame(Constants.F_INSERT, 0, null, 0, null)__        }_        insertFrame = false__      }__      _      int opcode = classFileBuffer[currentOffset] & 0xFF__      switch (opcode) {_        case Constants.NOP:_        case Constants.ACONST_NULL:_        case Constants.ICONST_M1:_        case Constants.ICONST_0:_        case Constants.ICONST_1:_        case Constants.ICONST_2:_        case Constants.ICONST_3:_        case Constants.ICONST_4:_        case Constants.ICONST_5:_        case Constants.LCONST_0:_        case Constants.LCONST_1:_        case Constants.FCONST_0:_        case Constants.FCONST_1:_        case Constants.FCONST_2:_        case Constants.DCONST_0:_        case Constants.DCONST_1:_        case Constants.IALOAD:_        case Constants.LALOAD:_        case Constants.FALOAD:_        case Constants.DALOAD:_        case Constants.AALOAD:_        case Constants.BALOAD:_        case Constants.CALOAD:_        case Constants.SALOAD:_        case Constants.IASTORE:_        case Constants.LASTORE:_        case Constants.FASTORE:_        case Constants.DASTORE:_        case Constants.AASTORE:_        case Constants.BASTORE:_        case Constants.CASTORE:_        case Constants.SASTORE:_        case Constants.POP:_        case Constants.POP2:_        case Constants.DUP:_        case Constants.DUP_X1:_        case Constants.DUP_X2:_        case Constants.DUP2:_        case Constants.DUP2_X1:_        case Constants.DUP2_X2:_        case Constants.SWAP:_        case Constants.IADD:_        case Constants.LADD:_        case Constants.FADD:_        case Constants.DADD:_        case Constants.ISUB:_        case Constants.LSUB:_        case Constants.FSUB:_        case Constants.DSUB:_        case Constants.IMUL:_        case Constants.LMUL:_        case Constants.FMUL:_        case Constants.DMUL:_        case Constants.IDIV:_        case Constants.LDIV:_        case Constants.FDIV:_        case Constants.DDIV:_        case Constants.IREM:_        case Constants.LREM:_        case Constants.FREM:_        case Constants.DREM:_        case Constants.INEG:_        case Constants.LNEG:_        case Constants.FNEG:_        case Constants.DNEG:_        case Constants.ISHL:_        case Constants.LSHL:_        case Constants.ISHR:_        case Constants.LSHR:_        case Constants.IUSHR:_        case Constants.LUSHR:_        case Constants.IAND:_        case Constants.LAND:_        case Constants.IOR:_        case Constants.LOR:_        case Constants.IXOR:_        case Constants.LXOR:_        case Constants.I2L:_        case Constants.I2F:_        case Constants.I2D:_        case Constants.L2I:_        case Constants.L2F:_        case Constants.L2D:_        case Constants.F2I:_        case Constants.F2L:_        case Constants.F2D:_        case Constants.D2I:_        case Constants.D2L:_        case Constants.D2F:_        case Constants.I2B:_        case Constants.I2C:_        case Constants.I2S:_        case Constants.LCMP:_        case Constants.FCMPL:_        case Constants.FCMPG:_        case Constants.DCMPL:_        case Constants.DCMPG:_        case Constants.IRETURN:_        case Constants.LRETURN:_        case Constants.FRETURN:_        case Constants.DRETURN:_        case Constants.ARETURN:_        case Constants.RETURN:_        case Constants.ARRAYLENGTH:_        case Constants.ATHROW:_        case Constants.MONITORENTER:_        case Constants.MONITOREXIT:_          methodVisitor.visitInsn(opcode)__          currentOffset += 1__          break__        case Constants.ILOAD_0:_        case Constants.ILOAD_1:_        case Constants.ILOAD_2:_        case Constants.ILOAD_3:_        case Constants.LLOAD_0:_        case Constants.LLOAD_1:_        case Constants.LLOAD_2:_        case Constants.LLOAD_3:_        case Constants.FLOAD_0:_        case Constants.FLOAD_1:_        case Constants.FLOAD_2:_        case Constants.FLOAD_3:_        case Constants.DLOAD_0:_        case Constants.DLOAD_1:_        case Constants.DLOAD_2:_        case Constants.DLOAD_3:_        case Constants.ALOAD_0:_        case Constants.ALOAD_1:_        case Constants.ALOAD_2:_        case Constants.ALOAD_3:_          opcode -= Constants.ILOAD_0__          methodVisitor.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__          currentOffset += 1__          break__        case Constants.ISTORE_0:_        case Constants.ISTORE_1:_        case Constants.ISTORE_2:_        case Constants.ISTORE_3:_        case Constants.LSTORE_0:_        case Constants.LSTORE_1:_        case Constants.LSTORE_2:_        case Constants.LSTORE_3:_        case Constants.FSTORE_0:_        case Constants.FSTORE_1:_        case Constants.FSTORE_2:_        case Constants.FSTORE_3:_        case Constants.DSTORE_0:_        case Constants.DSTORE_1:_        case Constants.DSTORE_2:_        case Constants.DSTORE_3:_        case Constants.ASTORE_0:_        case Constants.ASTORE_1:_        case Constants.ASTORE_2:_        case Constants.ASTORE_3:_          opcode -= Constants.ISTORE_0__          methodVisitor.visitVarInsn(Opcodes.ISTORE + (opcode >> 2), opcode & 0x3)__          currentOffset += 1__          break__        case Constants.IFEQ:_        case Constants.IFNE:_        case Constants.IFLT:_        case Constants.IFGE:_        case Constants.IFGT:_        case Constants.IFLE:_        case Constants.IF_ICMPEQ:_        case Constants.IF_ICMPNE:_        case Constants.IF_ICMPLT:_        case Constants.IF_ICMPGE:_        case Constants.IF_ICMPGT:_        case Constants.IF_ICMPLE:_        case Constants.IF_ACMPEQ:_        case Constants.IF_ACMPNE:_        case Constants.GOTO:_        case Constants.JSR:_        case Constants.IFNULL:_        case Constants.IFNONNULL:_          methodVisitor.visitJumpInsn(_              opcode, labels[currentBytecodeOffset + readShort(currentOffset + 1)])__          currentOffset += 3__          break__        case Constants.GOTO_W:_        case Constants.JSR_W:_          methodVisitor.visitJumpInsn(_              opcode - wideJumpOpcodeDelta,_              labels[currentBytecodeOffset + readInt(currentOffset + 1)])__          currentOffset += 5__          break__        case Constants.ASM_IFEQ:_        case Constants.ASM_IFNE:_        case Constants.ASM_IFLT:_        case Constants.ASM_IFGE:_        case Constants.ASM_IFGT:_        case Constants.ASM_IFLE:_        case Constants.ASM_IF_ICMPEQ:_        case Constants.ASM_IF_ICMPNE:_        case Constants.ASM_IF_ICMPLT:_        case Constants.ASM_IF_ICMPGE:_        case Constants.ASM_IF_ICMPGT:_        case Constants.ASM_IF_ICMPLE:_        case Constants.ASM_IF_ACMPEQ:_        case Constants.ASM_IF_ACMPNE:_        case Constants.ASM_GOTO:_        case Constants.ASM_JSR:_        case Constants.ASM_IFNULL:_        case Constants.ASM_IFNONNULL:_          {_            _            _            _            _            _            _            opcode =_                opcode < Constants.ASM_IFNULL_                    ? opcode - Constants.ASM_OPCODE_DELTA_                    : opcode - Constants.ASM_IFNULL_OPCODE_DELTA__            Label target = labels[currentBytecodeOffset + readUnsignedShort(currentOffset + 1)]__            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_              _              methodVisitor.visitJumpInsn(opcode + Constants.WIDE_JUMP_OPCODE_DELTA, target)__            } else {_              _              _              _              opcode = opcode < Opcodes.GOTO ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1__              Label endif = createLabel(currentBytecodeOffset + 3, labels)__              methodVisitor.visitJumpInsn(opcode, endif)__              methodVisitor.visitJumpInsn(Constants.GOTO_W, target)__              _              _              insertFrame = true__            }_            currentOffset += 3__            break__          }_        case Constants.ASM_GOTO_W:_          {_            _            methodVisitor.visitJumpInsn(_                Constants.GOTO_W, labels[currentBytecodeOffset + readInt(currentOffset + 1)])__            _            _            _            insertFrame = true__            currentOffset += 5__            break__          }_        case Constants.WIDE:_          opcode = classFileBuffer[currentOffset + 1] & 0xFF__          if (opcode == Opcodes.IINC) {_            methodVisitor.visitIincInsn(_                readUnsignedShort(currentOffset + 2), readShort(currentOffset + 4))__            currentOffset += 6__          } else {_            methodVisitor.visitVarInsn(opcode, readUnsignedShort(currentOffset + 2))__            currentOffset += 4__          }_          break__        case Constants.TABLESWITCH:_          {_            _            currentOffset += 4 - (currentBytecodeOffset & 3)__            _            Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)]__            int low = readInt(currentOffset + 4)__            int high = readInt(currentOffset + 8)__            currentOffset += 12__            Label[] table = new Label[high - low + 1]__            for (int i = 0_ i < table.length_ ++i) {_              table[i] = labels[currentBytecodeOffset + readInt(currentOffset)]__              currentOffset += 4__            }_            methodVisitor.visitTableSwitchInsn(low, high, defaultLabel, table)__            break__          }_        case Constants.LOOKUPSWITCH:_          {_            _            currentOffset += 4 - (currentBytecodeOffset & 3)__            _            Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)]__            int numPairs = readInt(currentOffset + 4)__            currentOffset += 8__            int[] keys = new int[numPairs]__            Label[] values = new Label[numPairs]__            for (int i = 0_ i < numPairs_ ++i) {_              keys[i] = readInt(currentOffset)__              values[i] = labels[currentBytecodeOffset + readInt(currentOffset + 4)]__              currentOffset += 8__            }_            methodVisitor.visitLookupSwitchInsn(defaultLabel, keys, values)__            break__          }_        case Constants.ILOAD:_        case Constants.LLOAD:_        case Constants.FLOAD:_        case Constants.DLOAD:_        case Constants.ALOAD:_        case Constants.ISTORE:_        case Constants.LSTORE:_        case Constants.FSTORE:_        case Constants.DSTORE:_        case Constants.ASTORE:_        case Constants.RET:_          methodVisitor.visitVarInsn(opcode, classFileBuffer[currentOffset + 1] & 0xFF)__          currentOffset += 2__          break__        case Constants.BIPUSH:_        case Constants.NEWARRAY:_          methodVisitor.visitIntInsn(opcode, classFileBuffer[currentOffset + 1])__          currentOffset += 2__          break__        case Constants.SIPUSH:_          methodVisitor.visitIntInsn(opcode, readShort(currentOffset + 1))__          currentOffset += 3__          break__        case Constants.LDC:_          methodVisitor.visitLdcInsn(_              readConst(classFileBuffer[currentOffset + 1] & 0xFF, charBuffer))__          currentOffset += 2__          break__        case Constants.LDC_W:_        case Constants.LDC2_W:_          methodVisitor.visitLdcInsn(readConst(readUnsignedShort(currentOffset + 1), charBuffer))__          currentOffset += 3__          break__        case Constants.GETSTATIC:_        case Constants.PUTSTATIC:_        case Constants.GETFIELD:_        case Constants.PUTFIELD:_        case Constants.INVOKEVIRTUAL:_        case Constants.INVOKESPECIAL:_        case Constants.INVOKESTATIC:_        case Constants.INVOKEINTERFACE:_          {_            int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)]__            int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__            String owner = readClass(cpInfoOffset, charBuffer)__            String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__            String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__            if (opcode < Opcodes.INVOKEVIRTUAL) {_              methodVisitor.visitFieldInsn(opcode, owner, name, descriptor)__            } else {_              boolean isInterface =_                  classFileBuffer[cpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG__              methodVisitor.visitMethodInsn(opcode, owner, name, descriptor, isInterface)__            }_            if (opcode == Opcodes.INVOKEINTERFACE) {_              currentOffset += 5__            } else {_              currentOffset += 3__            }_            break__          }_        case Constants.INVOKEDYNAMIC:_          {_            int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)]__            int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__            String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__            String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__            int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)]__            Handle handle =_                (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__            Object[] bootstrapMethodArguments =_                new Object[readUnsignedShort(bootstrapMethodOffset + 2)]__            bootstrapMethodOffset += 4__            for (int i = 0_ i < bootstrapMethodArguments.length_ i++) {_              bootstrapMethodArguments[i] =_                  readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__              bootstrapMethodOffset += 2__            }_            methodVisitor.visitInvokeDynamicInsn(_                name, descriptor, handle, bootstrapMethodArguments)__            currentOffset += 5__            break__          }_        case Constants.NEW:_        case Constants.ANEWARRAY:_        case Constants.CHECKCAST:_        case Constants.INSTANCEOF:_          methodVisitor.visitTypeInsn(opcode, readClass(currentOffset + 1, charBuffer))__          currentOffset += 3__          break__        case Constants.IINC:_          methodVisitor.visitIincInsn(_              classFileBuffer[currentOffset + 1] & 0xFF, classFileBuffer[currentOffset + 2])__          currentOffset += 3__          break__        case Constants.MULTIANEWARRAY:_          methodVisitor.visitMultiANewArrayInsn(_              readClass(currentOffset + 1, charBuffer), classFileBuffer[currentOffset + 3] & 0xFF)__          currentOffset += 4__          break__        default:_          throw new AssertionError()__      }__      _      while (visibleTypeAnnotationOffsets != null_          && currentVisibleTypeAnnotationIndex < visibleTypeAnnotationOffsets.length_          && currentVisibleTypeAnnotationBytecodeOffset <= currentBytecodeOffset) {_        if (currentVisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {_          _          int currentAnnotationOffset =_              readTypeAnnotationTarget(_                  context, visibleTypeAnnotationOffsets[currentVisibleTypeAnnotationIndex])__          _          String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__          currentAnnotationOffset += 2__          _          readElementValues(_              methodVisitor.visitInsnAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  annotationDescriptor,_                   true),_              currentAnnotationOffset,_               true,_              charBuffer)__        }_        currentVisibleTypeAnnotationBytecodeOffset =_            getTypeAnnotationBytecodeOffset(_                visibleTypeAnnotationOffsets, ++currentVisibleTypeAnnotationIndex)__      }__      _      while (invisibleTypeAnnotationOffsets != null_          && currentInvisibleTypeAnnotationIndex < invisibleTypeAnnotationOffsets.length_          && currentInvisibleTypeAnnotationBytecodeOffset <= currentBytecodeOffset) {_        if (currentInvisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {_          _          int currentAnnotationOffset =_              readTypeAnnotationTarget(_                  context, invisibleTypeAnnotationOffsets[currentInvisibleTypeAnnotationIndex])__          _          String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__          currentAnnotationOffset += 2__          _          readElementValues(_              methodVisitor.visitInsnAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  annotationDescriptor,_                   false),_              currentAnnotationOffset,_               true,_              charBuffer)__        }_        currentInvisibleTypeAnnotationBytecodeOffset =_            getTypeAnnotationBytecodeOffset(_                invisibleTypeAnnotationOffsets, ++currentInvisibleTypeAnnotationIndex)__      }_    }_    if (labels[codeLength] != null) {_      methodVisitor.visitLabel(labels[codeLength])__    }__    _    if (localVariableTableOffset != 0 && (context.parsingOptions & SKIP_DEBUG) == 0) {_      _      int[] typeTable = null__      if (localVariableTypeTableOffset != 0) {_        typeTable = new int[readUnsignedShort(localVariableTypeTableOffset) * 3]__        currentOffset = localVariableTypeTableOffset + 2__        int typeTableIndex = typeTable.length__        while (typeTableIndex > 0) {_          _          typeTable[--typeTableIndex] = currentOffset + 6__          typeTable[--typeTableIndex] = readUnsignedShort(currentOffset + 8)__          typeTable[--typeTableIndex] = readUnsignedShort(currentOffset)__          currentOffset += 10__        }_      }_      int localVariableTableLength = readUnsignedShort(localVariableTableOffset)__      currentOffset = localVariableTableOffset + 2__      while (localVariableTableLength-- > 0) {_        int startPc = readUnsignedShort(currentOffset)__        int length = readUnsignedShort(currentOffset + 2)__        String name = readUTF8(currentOffset + 4, charBuffer)__        String descriptor = readUTF8(currentOffset + 6, charBuffer)__        int index = readUnsignedShort(currentOffset + 8)__        currentOffset += 10__        String signature = null__        if (typeTable != null) {_          for (int i = 0_ i < typeTable.length_ i += 3) {_            if (typeTable[i] == startPc && typeTable[i + 1] == index) {_              signature = readUTF8(typeTable[i + 2], charBuffer)__              break__            }_          }_        }_        methodVisitor.visitLocalVariable(_            name, descriptor, signature, labels[startPc], labels[startPc + length], index)__      }_    }__    _    if (visibleTypeAnnotationOffsets != null) {_      for (int typeAnnotationOffset : visibleTypeAnnotationOffsets) {_        int targetType = readByte(typeAnnotationOffset)__        if (targetType == TypeReference.LOCAL_VARIABLE_            || targetType == TypeReference.RESOURCE_VARIABLE) {_          _          currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset)__          _          String annotationDescriptor = readUTF8(currentOffset, charBuffer)__          currentOffset += 2__          _          readElementValues(_              methodVisitor.visitLocalVariableAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  context.currentLocalVariableAnnotationRangeStarts,_                  context.currentLocalVariableAnnotationRangeEnds,_                  context.currentLocalVariableAnnotationRangeIndices,_                  annotationDescriptor,_                   true),_              currentOffset,_               true,_              charBuffer)__        }_      }_    }__    _    if (invisibleTypeAnnotationOffsets != null) {_      for (int typeAnnotationOffset : invisibleTypeAnnotationOffsets) {_        int targetType = readByte(typeAnnotationOffset)__        if (targetType == TypeReference.LOCAL_VARIABLE_            || targetType == TypeReference.RESOURCE_VARIABLE) {_          _          currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset)__          _          String annotationDescriptor = readUTF8(currentOffset, charBuffer)__          currentOffset += 2__          _          readElementValues(_              methodVisitor.visitLocalVariableAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  context.currentLocalVariableAnnotationRangeStarts,_                  context.currentLocalVariableAnnotationRangeEnds,_                  context.currentLocalVariableAnnotationRangeIndices,_                  annotationDescriptor,_                   false),_              currentOffset,_               true,_              charBuffer)__        }_      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      methodVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    methodVisitor.visitMaxs(maxStack, maxLocals)__  };reads,a,jvms,code,attribute,and,makes,the,given,visitor,visit,it,param,method,visitor,the,visitor,that,must,visit,the,code,attribute,param,context,information,about,the,class,being,parsed,param,code,offset,the,start,offset,in,link,b,of,the,code,attribute,excluding,its,and,fields;private,void,read,code,final,method,visitor,method,visitor,final,context,context,final,int,code,offset,int,current,offset,code,offset,final,byte,class,file,buffer,b,final,char,char,buffer,context,char,buffer,final,int,max,stack,read,unsigned,short,current,offset,final,int,max,locals,read,unsigned,short,current,offset,2,final,int,code,length,read,int,current,offset,4,current,offset,8,final,int,bytecode,start,offset,current,offset,final,int,bytecode,end,offset,current,offset,code,length,final,label,labels,context,current,method,labels,new,label,code,length,1,while,current,offset,bytecode,end,offset,final,int,bytecode,offset,current,offset,bytecode,start,offset,final,int,opcode,class,file,buffer,current,offset,0x,ff,switch,opcode,case,constants,nop,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,iaload,case,constants,laload,case,constants,faload,case,constants,daload,case,constants,aaload,case,constants,baload,case,constants,caload,case,constants,saload,case,constants,iastore,case,constants,lastore,case,constants,fastore,case,constants,dastore,case,constants,aastore,case,constants,bastore,case,constants,castore,case,constants,sastore,case,constants,pop,case,constants,pop2,case,constants,dup,case,constants,case,constants,case,constants,dup2,case,constants,case,constants,case,constants,swap,case,constants,iadd,case,constants,ladd,case,constants,fadd,case,constants,dadd,case,constants,isub,case,constants,lsub,case,constants,fsub,case,constants,dsub,case,constants,imul,case,constants,lmul,case,constants,fmul,case,constants,dmul,case,constants,idiv,case,constants,ldiv,case,constants,fdiv,case,constants,ddiv,case,constants,irem,case,constants,lrem,case,constants,frem,case,constants,drem,case,constants,ineg,case,constants,lneg,case,constants,fneg,case,constants,dneg,case,constants,ishl,case,constants,lshl,case,constants,ishr,case,constants,lshr,case,constants,iushr,case,constants,lushr,case,constants,iand,case,constants,land,case,constants,ior,case,constants,lor,case,constants,ixor,case,constants,lxor,case,constants,i2l,case,constants,i2f,case,constants,i2d,case,constants,l2i,case,constants,l2f,case,constants,l2d,case,constants,f2i,case,constants,f2l,case,constants,f2d,case,constants,d2i,case,constants,d2l,case,constants,d2f,case,constants,i2b,case,constants,i2c,case,constants,i2s,case,constants,lcmp,case,constants,fcmpl,case,constants,fcmpg,case,constants,dcmpl,case,constants,dcmpg,case,constants,ireturn,case,constants,lreturn,case,constants,freturn,case,constants,dreturn,case,constants,areturn,case,constants,return,case,constants,arraylength,case,constants,athrow,case,constants,monitorenter,case,constants,monitorexit,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,current,offset,1,break,case,constants,ifeq,case,constants,ifne,case,constants,iflt,case,constants,ifge,case,constants,ifgt,case,constants,ifle,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,goto,case,constants,jsr,case,constants,ifnull,case,constants,ifnonnull,create,label,bytecode,offset,read,short,current,offset,1,labels,current,offset,3,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,create,label,bytecode,offset,read,unsigned,short,current,offset,1,labels,current,offset,3,break,case,constants,case,constants,case,constants,create,label,bytecode,offset,read,int,current,offset,1,labels,current,offset,5,break,case,constants,wide,switch,class,file,buffer,current,offset,1,0x,ff,case,constants,iload,case,constants,fload,case,constants,aload,case,constants,lload,case,constants,dload,case,constants,istore,case,constants,fstore,case,constants,astore,case,constants,lstore,case,constants,dstore,case,constants,ret,current,offset,4,break,case,constants,iinc,current,offset,6,break,default,throw,new,illegal,argument,exception,break,case,constants,tableswitch,current,offset,4,bytecode,offset,3,create,label,bytecode,offset,read,int,current,offset,labels,int,num,table,entries,read,int,current,offset,8,read,int,current,offset,4,1,current,offset,12,while,num,table,entries,0,create,label,bytecode,offset,read,int,current,offset,labels,current,offset,4,break,case,constants,lookupswitch,current,offset,4,bytecode,offset,3,create,label,bytecode,offset,read,int,current,offset,labels,int,num,switch,cases,read,int,current,offset,4,current,offset,8,while,num,switch,cases,0,create,label,bytecode,offset,read,int,current,offset,4,labels,current,offset,8,break,case,constants,iload,case,constants,lload,case,constants,fload,case,constants,dload,case,constants,aload,case,constants,istore,case,constants,lstore,case,constants,fstore,case,constants,dstore,case,constants,astore,case,constants,ret,case,constants,bipush,case,constants,newarray,case,constants,ldc,current,offset,2,break,case,constants,sipush,case,constants,case,constants,case,constants,getstatic,case,constants,putstatic,case,constants,getfield,case,constants,putfield,case,constants,invokevirtual,case,constants,invokespecial,case,constants,invokestatic,case,constants,new,case,constants,anewarray,case,constants,checkcast,case,constants,instanceof,case,constants,iinc,current,offset,3,break,case,constants,invokeinterface,case,constants,invokedynamic,current,offset,5,break,case,constants,multianewarray,current,offset,4,break,default,throw,new,illegal,argument,exception,int,exception,table,length,read,unsigned,short,current,offset,current,offset,2,while,exception,table,length,0,label,start,create,label,read,unsigned,short,current,offset,labels,label,end,create,label,read,unsigned,short,current,offset,2,labels,label,handler,create,label,read,unsigned,short,current,offset,4,labels,string,catch,type,read,utf8,cp,info,offsets,read,unsigned,short,current,offset,6,char,buffer,current,offset,8,method,visitor,visit,try,catch,block,start,end,handler,catch,type,int,stack,map,frame,offset,0,int,stack,map,table,end,offset,0,boolean,compressed,frames,true,int,local,variable,table,offset,0,int,local,variable,type,table,offset,0,int,visible,type,annotation,offsets,null,int,invisible,type,annotation,offsets,null,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,equals,attribute,name,if,context,parsing,options,0,local,variable,table,offset,current,offset,int,current,local,variable,table,offset,current,offset,int,local,variable,table,length,read,unsigned,short,current,local,variable,table,offset,current,local,variable,table,offset,2,while,local,variable,table,length,0,int,start,pc,read,unsigned,short,current,local,variable,table,offset,create,debug,label,start,pc,labels,int,length,read,unsigned,short,current,local,variable,table,offset,2,create,debug,label,start,pc,length,labels,current,local,variable,table,offset,10,else,if,constants,equals,attribute,name,local,variable,type,table,offset,current,offset,else,if,constants,equals,attribute,name,if,context,parsing,options,0,int,current,line,number,table,offset,current,offset,int,line,number,table,length,read,unsigned,short,current,line,number,table,offset,current,line,number,table,offset,2,while,line,number,table,length,0,int,start,pc,read,unsigned,short,current,line,number,table,offset,int,line,number,read,unsigned,short,current,line,number,table,offset,2,current,line,number,table,offset,4,create,debug,label,start,pc,labels,labels,start,pc,add,line,number,line,number,else,if,constants,equals,attribute,name,visible,type,annotation,offsets,read,type,annotations,method,visitor,context,current,offset,true,else,if,constants,equals,attribute,name,invisible,type,annotation,offsets,read,type,annotations,method,visitor,context,current,offset,false,else,if,constants,equals,attribute,name,if,context,parsing,options,0,stack,map,frame,offset,current,offset,2,stack,map,table,end,offset,current,offset,attribute,length,else,if,stack,map,equals,attribute,name,if,context,parsing,options,0,stack,map,frame,offset,current,offset,2,stack,map,table,end,offset,current,offset,attribute,length,compressed,frames,false,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,code,offset,labels,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,final,boolean,expand,frames,context,parsing,options,0,if,stack,map,frame,offset,0,context,current,frame,offset,1,context,current,frame,type,0,context,current,frame,local,count,0,context,current,frame,local,count,delta,0,context,current,frame,local,types,new,object,max,locals,context,current,frame,stack,count,0,context,current,frame,stack,types,new,object,max,stack,if,expand,frames,compute,implicit,frame,context,for,int,offset,stack,map,frame,offset,offset,stack,map,table,end,offset,2,offset,if,class,file,buffer,offset,frame,int,potential,bytecode,offset,read,unsigned,short,offset,1,if,potential,bytecode,offset,0,potential,bytecode,offset,code,length,class,file,buffer,bytecode,start,offset,potential,bytecode,offset,0x,ff,opcodes,new,create,label,potential,bytecode,offset,labels,if,expand,frames,context,parsing,options,0,method,visitor,visit,frame,opcodes,max,locals,null,0,null,int,current,visible,type,annotation,index,0,int,current,visible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,visible,type,annotation,offsets,0,int,current,invisible,type,annotation,index,0,int,current,invisible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,invisible,type,annotation,offsets,0,boolean,insert,frame,false,final,int,wide,jump,opcode,delta,context,parsing,options,0,constants,0,current,offset,bytecode,start,offset,while,current,offset,bytecode,end,offset,final,int,current,bytecode,offset,current,offset,bytecode,start,offset,label,current,label,labels,current,bytecode,offset,if,current,label,null,current,label,accept,method,visitor,context,parsing,options,0,while,stack,map,frame,offset,0,context,current,frame,offset,current,bytecode,offset,context,current,frame,offset,1,if,context,current,frame,offset,1,if,compressed,frames,expand,frames,method,visitor,visit,frame,opcodes,context,current,frame,local,count,context,current,frame,local,types,context,current,frame,stack,count,context,current,frame,stack,types,else,method,visitor,visit,frame,context,current,frame,type,context,current,frame,local,count,delta,context,current,frame,local,types,context,current,frame,stack,count,context,current,frame,stack,types,insert,frame,false,if,stack,map,frame,offset,stack,map,table,end,offset,stack,map,frame,offset,read,stack,map,frame,stack,map,frame,offset,compressed,frames,expand,frames,context,else,stack,map,frame,offset,0,if,insert,frame,if,context,parsing,options,0,method,visitor,visit,frame,constants,0,null,0,null,insert,frame,false,int,opcode,class,file,buffer,current,offset,0x,ff,switch,opcode,case,constants,nop,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,iaload,case,constants,laload,case,constants,faload,case,constants,daload,case,constants,aaload,case,constants,baload,case,constants,caload,case,constants,saload,case,constants,iastore,case,constants,lastore,case,constants,fastore,case,constants,dastore,case,constants,aastore,case,constants,bastore,case,constants,castore,case,constants,sastore,case,constants,pop,case,constants,pop2,case,constants,dup,case,constants,case,constants,case,constants,dup2,case,constants,case,constants,case,constants,swap,case,constants,iadd,case,constants,ladd,case,constants,fadd,case,constants,dadd,case,constants,isub,case,constants,lsub,case,constants,fsub,case,constants,dsub,case,constants,imul,case,constants,lmul,case,constants,fmul,case,constants,dmul,case,constants,idiv,case,constants,ldiv,case,constants,fdiv,case,constants,ddiv,case,constants,irem,case,constants,lrem,case,constants,frem,case,constants,drem,case,constants,ineg,case,constants,lneg,case,constants,fneg,case,constants,dneg,case,constants,ishl,case,constants,lshl,case,constants,ishr,case,constants,lshr,case,constants,iushr,case,constants,lushr,case,constants,iand,case,constants,land,case,constants,ior,case,constants,lor,case,constants,ixor,case,constants,lxor,case,constants,i2l,case,constants,i2f,case,constants,i2d,case,constants,l2i,case,constants,l2f,case,constants,l2d,case,constants,f2i,case,constants,f2l,case,constants,f2d,case,constants,d2i,case,constants,d2l,case,constants,d2f,case,constants,i2b,case,constants,i2c,case,constants,i2s,case,constants,lcmp,case,constants,fcmpl,case,constants,fcmpg,case,constants,dcmpl,case,constants,dcmpg,case,constants,ireturn,case,constants,lreturn,case,constants,freturn,case,constants,dreturn,case,constants,areturn,case,constants,return,case,constants,arraylength,case,constants,athrow,case,constants,monitorenter,case,constants,monitorexit,method,visitor,visit,insn,opcode,current,offset,1,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,constants,method,visitor,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,current,offset,1,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,constants,method,visitor,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,current,offset,1,break,case,constants,ifeq,case,constants,ifne,case,constants,iflt,case,constants,ifge,case,constants,ifgt,case,constants,ifle,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,goto,case,constants,jsr,case,constants,ifnull,case,constants,ifnonnull,method,visitor,visit,jump,insn,opcode,labels,current,bytecode,offset,read,short,current,offset,1,current,offset,3,break,case,constants,case,constants,method,visitor,visit,jump,insn,opcode,wide,jump,opcode,delta,labels,current,bytecode,offset,read,int,current,offset,1,current,offset,5,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,opcode,constants,opcode,constants,opcode,constants,label,target,labels,current,bytecode,offset,read,unsigned,short,current,offset,1,if,opcode,opcodes,goto,opcode,opcodes,jsr,method,visitor,visit,jump,insn,opcode,constants,target,else,opcode,opcode,opcodes,goto,opcode,1,1,1,opcode,1,label,endif,create,label,current,bytecode,offset,3,labels,method,visitor,visit,jump,insn,opcode,endif,method,visitor,visit,jump,insn,constants,target,insert,frame,true,current,offset,3,break,case,constants,method,visitor,visit,jump,insn,constants,labels,current,bytecode,offset,read,int,current,offset,1,insert,frame,true,current,offset,5,break,case,constants,wide,opcode,class,file,buffer,current,offset,1,0x,ff,if,opcode,opcodes,iinc,method,visitor,visit,iinc,insn,read,unsigned,short,current,offset,2,read,short,current,offset,4,current,offset,6,else,method,visitor,visit,var,insn,opcode,read,unsigned,short,current,offset,2,current,offset,4,break,case,constants,tableswitch,current,offset,4,current,bytecode,offset,3,label,default,label,labels,current,bytecode,offset,read,int,current,offset,int,low,read,int,current,offset,4,int,high,read,int,current,offset,8,current,offset,12,label,table,new,label,high,low,1,for,int,i,0,i,table,length,i,table,i,labels,current,bytecode,offset,read,int,current,offset,current,offset,4,method,visitor,visit,table,switch,insn,low,high,default,label,table,break,case,constants,lookupswitch,current,offset,4,current,bytecode,offset,3,label,default,label,labels,current,bytecode,offset,read,int,current,offset,int,num,pairs,read,int,current,offset,4,current,offset,8,int,keys,new,int,num,pairs,label,values,new,label,num,pairs,for,int,i,0,i,num,pairs,i,keys,i,read,int,current,offset,values,i,labels,current,bytecode,offset,read,int,current,offset,4,current,offset,8,method,visitor,visit,lookup,switch,insn,default,label,keys,values,break,case,constants,iload,case,constants,lload,case,constants,fload,case,constants,dload,case,constants,aload,case,constants,istore,case,constants,lstore,case,constants,fstore,case,constants,dstore,case,constants,astore,case,constants,ret,method,visitor,visit,var,insn,opcode,class,file,buffer,current,offset,1,0x,ff,current,offset,2,break,case,constants,bipush,case,constants,newarray,method,visitor,visit,int,insn,opcode,class,file,buffer,current,offset,1,current,offset,2,break,case,constants,sipush,method,visitor,visit,int,insn,opcode,read,short,current,offset,1,current,offset,3,break,case,constants,ldc,method,visitor,visit,ldc,insn,read,const,class,file,buffer,current,offset,1,0x,ff,char,buffer,current,offset,2,break,case,constants,case,constants,method,visitor,visit,ldc,insn,read,const,read,unsigned,short,current,offset,1,char,buffer,current,offset,3,break,case,constants,getstatic,case,constants,putstatic,case,constants,getfield,case,constants,putfield,case,constants,invokevirtual,case,constants,invokespecial,case,constants,invokestatic,case,constants,invokeinterface,int,cp,info,offset,cp,info,offsets,read,unsigned,short,current,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,owner,read,class,cp,info,offset,char,buffer,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,if,opcode,opcodes,invokevirtual,method,visitor,visit,field,insn,opcode,owner,name,descriptor,else,boolean,is,interface,class,file,buffer,cp,info,offset,1,symbol,method,visitor,visit,method,insn,opcode,owner,name,descriptor,is,interface,if,opcode,opcodes,invokeinterface,current,offset,5,else,current,offset,3,break,case,constants,invokedynamic,int,cp,info,offset,cp,info,offsets,read,unsigned,short,current,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,int,bootstrap,method,offset,bootstrap,method,offsets,read,unsigned,short,cp,info,offset,handle,handle,handle,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,object,bootstrap,method,arguments,new,object,read,unsigned,short,bootstrap,method,offset,2,bootstrap,method,offset,4,for,int,i,0,i,bootstrap,method,arguments,length,i,bootstrap,method,arguments,i,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,bootstrap,method,offset,2,method,visitor,visit,invoke,dynamic,insn,name,descriptor,handle,bootstrap,method,arguments,current,offset,5,break,case,constants,new,case,constants,anewarray,case,constants,checkcast,case,constants,instanceof,method,visitor,visit,type,insn,opcode,read,class,current,offset,1,char,buffer,current,offset,3,break,case,constants,iinc,method,visitor,visit,iinc,insn,class,file,buffer,current,offset,1,0x,ff,class,file,buffer,current,offset,2,current,offset,3,break,case,constants,multianewarray,method,visitor,visit,multi,anew,array,insn,read,class,current,offset,1,char,buffer,class,file,buffer,current,offset,3,0x,ff,current,offset,4,break,default,throw,new,assertion,error,while,visible,type,annotation,offsets,null,current,visible,type,annotation,index,visible,type,annotation,offsets,length,current,visible,type,annotation,bytecode,offset,current,bytecode,offset,if,current,visible,type,annotation,bytecode,offset,current,bytecode,offset,int,current,annotation,offset,read,type,annotation,target,context,visible,type,annotation,offsets,current,visible,type,annotation,index,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,read,element,values,method,visitor,visit,insn,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,current,visible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,visible,type,annotation,offsets,current,visible,type,annotation,index,while,invisible,type,annotation,offsets,null,current,invisible,type,annotation,index,invisible,type,annotation,offsets,length,current,invisible,type,annotation,bytecode,offset,current,bytecode,offset,if,current,invisible,type,annotation,bytecode,offset,current,bytecode,offset,int,current,annotation,offset,read,type,annotation,target,context,invisible,type,annotation,offsets,current,invisible,type,annotation,index,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,read,element,values,method,visitor,visit,insn,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,current,invisible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,invisible,type,annotation,offsets,current,invisible,type,annotation,index,if,labels,code,length,null,method,visitor,visit,label,labels,code,length,if,local,variable,table,offset,0,context,parsing,options,0,int,type,table,null,if,local,variable,type,table,offset,0,type,table,new,int,read,unsigned,short,local,variable,type,table,offset,3,current,offset,local,variable,type,table,offset,2,int,type,table,index,type,table,length,while,type,table,index,0,type,table,type,table,index,current,offset,6,type,table,type,table,index,read,unsigned,short,current,offset,8,type,table,type,table,index,read,unsigned,short,current,offset,current,offset,10,int,local,variable,table,length,read,unsigned,short,local,variable,table,offset,current,offset,local,variable,table,offset,2,while,local,variable,table,length,0,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,string,name,read,utf8,current,offset,4,char,buffer,string,descriptor,read,utf8,current,offset,6,char,buffer,int,index,read,unsigned,short,current,offset,8,current,offset,10,string,signature,null,if,type,table,null,for,int,i,0,i,type,table,length,i,3,if,type,table,i,start,pc,type,table,i,1,index,signature,read,utf8,type,table,i,2,char,buffer,break,method,visitor,visit,local,variable,name,descriptor,signature,labels,start,pc,labels,start,pc,length,index,if,visible,type,annotation,offsets,null,for,int,type,annotation,offset,visible,type,annotation,offsets,int,target,type,read,byte,type,annotation,offset,if,target,type,type,reference,target,type,type,reference,current,offset,read,type,annotation,target,context,type,annotation,offset,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,read,element,values,method,visitor,visit,local,variable,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,context,current,local,variable,annotation,range,starts,context,current,local,variable,annotation,range,ends,context,current,local,variable,annotation,range,indices,annotation,descriptor,true,current,offset,true,char,buffer,if,invisible,type,annotation,offsets,null,for,int,type,annotation,offset,invisible,type,annotation,offsets,int,target,type,read,byte,type,annotation,offset,if,target,type,type,reference,target,type,type,reference,current,offset,read,type,annotation,target,context,type,annotation,offset,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,read,element,values,method,visitor,visit,local,variable,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,context,current,local,variable,annotation,range,starts,context,current,local,variable,annotation,range,ends,context,current,local,variable,annotation,range,indices,annotation,descriptor,false,current,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,method,visitor,visit,attribute,attributes,attributes,next,attribute,method,visitor,visit,maxs,max,stack,max,locals
ClassReader -> private void readCode(       final MethodVisitor methodVisitor, final Context context, final int codeOffset);1541436263;Reads a JVMS 'Code' attribute and makes the given visitor visit it.__@param methodVisitor the visitor that must visit the Code attribute._@param context information about the class being parsed._@param codeOffset the start offset in {@link #b} of the Code attribute, excluding its_attribute_name_index and attribute_length fields.;private void readCode(_      final MethodVisitor methodVisitor, final Context context, final int codeOffset) {_    int currentOffset = codeOffset___    _    final byte[] classFileBuffer = b__    final char[] charBuffer = context.charBuffer__    final int maxStack = readUnsignedShort(currentOffset)__    final int maxLocals = readUnsignedShort(currentOffset + 2)__    final int codeLength = readInt(currentOffset + 4)__    currentOffset += 8___    _    final int bytecodeStartOffset = currentOffset__    final int bytecodeEndOffset = currentOffset + codeLength__    final Label[] labels = context.currentMethodLabels = new Label[codeLength + 1]__    while (currentOffset < bytecodeEndOffset) {_      final int bytecodeOffset = currentOffset - bytecodeStartOffset__      final int opcode = classFileBuffer[currentOffset] & 0xFF__      switch (opcode) {_        case Constants.NOP:_        case Constants.ACONST_NULL:_        case Constants.ICONST_M1:_        case Constants.ICONST_0:_        case Constants.ICONST_1:_        case Constants.ICONST_2:_        case Constants.ICONST_3:_        case Constants.ICONST_4:_        case Constants.ICONST_5:_        case Constants.LCONST_0:_        case Constants.LCONST_1:_        case Constants.FCONST_0:_        case Constants.FCONST_1:_        case Constants.FCONST_2:_        case Constants.DCONST_0:_        case Constants.DCONST_1:_        case Constants.IALOAD:_        case Constants.LALOAD:_        case Constants.FALOAD:_        case Constants.DALOAD:_        case Constants.AALOAD:_        case Constants.BALOAD:_        case Constants.CALOAD:_        case Constants.SALOAD:_        case Constants.IASTORE:_        case Constants.LASTORE:_        case Constants.FASTORE:_        case Constants.DASTORE:_        case Constants.AASTORE:_        case Constants.BASTORE:_        case Constants.CASTORE:_        case Constants.SASTORE:_        case Constants.POP:_        case Constants.POP2:_        case Constants.DUP:_        case Constants.DUP_X1:_        case Constants.DUP_X2:_        case Constants.DUP2:_        case Constants.DUP2_X1:_        case Constants.DUP2_X2:_        case Constants.SWAP:_        case Constants.IADD:_        case Constants.LADD:_        case Constants.FADD:_        case Constants.DADD:_        case Constants.ISUB:_        case Constants.LSUB:_        case Constants.FSUB:_        case Constants.DSUB:_        case Constants.IMUL:_        case Constants.LMUL:_        case Constants.FMUL:_        case Constants.DMUL:_        case Constants.IDIV:_        case Constants.LDIV:_        case Constants.FDIV:_        case Constants.DDIV:_        case Constants.IREM:_        case Constants.LREM:_        case Constants.FREM:_        case Constants.DREM:_        case Constants.INEG:_        case Constants.LNEG:_        case Constants.FNEG:_        case Constants.DNEG:_        case Constants.ISHL:_        case Constants.LSHL:_        case Constants.ISHR:_        case Constants.LSHR:_        case Constants.IUSHR:_        case Constants.LUSHR:_        case Constants.IAND:_        case Constants.LAND:_        case Constants.IOR:_        case Constants.LOR:_        case Constants.IXOR:_        case Constants.LXOR:_        case Constants.I2L:_        case Constants.I2F:_        case Constants.I2D:_        case Constants.L2I:_        case Constants.L2F:_        case Constants.L2D:_        case Constants.F2I:_        case Constants.F2L:_        case Constants.F2D:_        case Constants.D2I:_        case Constants.D2L:_        case Constants.D2F:_        case Constants.I2B:_        case Constants.I2C:_        case Constants.I2S:_        case Constants.LCMP:_        case Constants.FCMPL:_        case Constants.FCMPG:_        case Constants.DCMPL:_        case Constants.DCMPG:_        case Constants.IRETURN:_        case Constants.LRETURN:_        case Constants.FRETURN:_        case Constants.DRETURN:_        case Constants.ARETURN:_        case Constants.RETURN:_        case Constants.ARRAYLENGTH:_        case Constants.ATHROW:_        case Constants.MONITORENTER:_        case Constants.MONITOREXIT:_        case Constants.ILOAD_0:_        case Constants.ILOAD_1:_        case Constants.ILOAD_2:_        case Constants.ILOAD_3:_        case Constants.LLOAD_0:_        case Constants.LLOAD_1:_        case Constants.LLOAD_2:_        case Constants.LLOAD_3:_        case Constants.FLOAD_0:_        case Constants.FLOAD_1:_        case Constants.FLOAD_2:_        case Constants.FLOAD_3:_        case Constants.DLOAD_0:_        case Constants.DLOAD_1:_        case Constants.DLOAD_2:_        case Constants.DLOAD_3:_        case Constants.ALOAD_0:_        case Constants.ALOAD_1:_        case Constants.ALOAD_2:_        case Constants.ALOAD_3:_        case Constants.ISTORE_0:_        case Constants.ISTORE_1:_        case Constants.ISTORE_2:_        case Constants.ISTORE_3:_        case Constants.LSTORE_0:_        case Constants.LSTORE_1:_        case Constants.LSTORE_2:_        case Constants.LSTORE_3:_        case Constants.FSTORE_0:_        case Constants.FSTORE_1:_        case Constants.FSTORE_2:_        case Constants.FSTORE_3:_        case Constants.DSTORE_0:_        case Constants.DSTORE_1:_        case Constants.DSTORE_2:_        case Constants.DSTORE_3:_        case Constants.ASTORE_0:_        case Constants.ASTORE_1:_        case Constants.ASTORE_2:_        case Constants.ASTORE_3:_          currentOffset += 1__          break__        case Constants.IFEQ:_        case Constants.IFNE:_        case Constants.IFLT:_        case Constants.IFGE:_        case Constants.IFGT:_        case Constants.IFLE:_        case Constants.IF_ICMPEQ:_        case Constants.IF_ICMPNE:_        case Constants.IF_ICMPLT:_        case Constants.IF_ICMPGE:_        case Constants.IF_ICMPGT:_        case Constants.IF_ICMPLE:_        case Constants.IF_ACMPEQ:_        case Constants.IF_ACMPNE:_        case Constants.GOTO:_        case Constants.JSR:_        case Constants.IFNULL:_        case Constants.IFNONNULL:_          createLabel(bytecodeOffset + readShort(currentOffset + 1), labels)__          currentOffset += 3__          break__        case Constants.ASM_IFEQ:_        case Constants.ASM_IFNE:_        case Constants.ASM_IFLT:_        case Constants.ASM_IFGE:_        case Constants.ASM_IFGT:_        case Constants.ASM_IFLE:_        case Constants.ASM_IF_ICMPEQ:_        case Constants.ASM_IF_ICMPNE:_        case Constants.ASM_IF_ICMPLT:_        case Constants.ASM_IF_ICMPGE:_        case Constants.ASM_IF_ICMPGT:_        case Constants.ASM_IF_ICMPLE:_        case Constants.ASM_IF_ACMPEQ:_        case Constants.ASM_IF_ACMPNE:_        case Constants.ASM_GOTO:_        case Constants.ASM_JSR:_        case Constants.ASM_IFNULL:_        case Constants.ASM_IFNONNULL:_          createLabel(bytecodeOffset + readUnsignedShort(currentOffset + 1), labels)__          currentOffset += 3__          break__        case Constants.GOTO_W:_        case Constants.JSR_W:_        case Constants.ASM_GOTO_W:_          createLabel(bytecodeOffset + readInt(currentOffset + 1), labels)__          currentOffset += 5__          break__        case Constants.WIDE:_          switch (classFileBuffer[currentOffset + 1] & 0xFF) {_            case Constants.ILOAD:_            case Constants.FLOAD:_            case Constants.ALOAD:_            case Constants.LLOAD:_            case Constants.DLOAD:_            case Constants.ISTORE:_            case Constants.FSTORE:_            case Constants.ASTORE:_            case Constants.LSTORE:_            case Constants.DSTORE:_            case Constants.RET:_              currentOffset += 4__              break__            case Constants.IINC:_              currentOffset += 6__              break__            default:_              throw new IllegalArgumentException()__          }_          break__        case Constants.TABLESWITCH:_          _          currentOffset += 4 - (bytecodeOffset & 3)__          _          createLabel(bytecodeOffset + readInt(currentOffset), labels)__          int numTableEntries = readInt(currentOffset + 8) - readInt(currentOffset + 4) + 1__          currentOffset += 12__          _          while (numTableEntries-- > 0) {_            createLabel(bytecodeOffset + readInt(currentOffset), labels)__            currentOffset += 4__          }_          break__        case Constants.LOOKUPSWITCH:_          _          currentOffset += 4 - (bytecodeOffset & 3)__          _          createLabel(bytecodeOffset + readInt(currentOffset), labels)__          int numSwitchCases = readInt(currentOffset + 4)__          currentOffset += 8__          _          while (numSwitchCases-- > 0) {_            createLabel(bytecodeOffset + readInt(currentOffset + 4), labels)__            currentOffset += 8__          }_          break__        case Constants.ILOAD:_        case Constants.LLOAD:_        case Constants.FLOAD:_        case Constants.DLOAD:_        case Constants.ALOAD:_        case Constants.ISTORE:_        case Constants.LSTORE:_        case Constants.FSTORE:_        case Constants.DSTORE:_        case Constants.ASTORE:_        case Constants.RET:_        case Constants.BIPUSH:_        case Constants.NEWARRAY:_        case Constants.LDC:_          currentOffset += 2__          break__        case Constants.SIPUSH:_        case Constants.LDC_W:_        case Constants.LDC2_W:_        case Constants.GETSTATIC:_        case Constants.PUTSTATIC:_        case Constants.GETFIELD:_        case Constants.PUTFIELD:_        case Constants.INVOKEVIRTUAL:_        case Constants.INVOKESPECIAL:_        case Constants.INVOKESTATIC:_        case Constants.NEW:_        case Constants.ANEWARRAY:_        case Constants.CHECKCAST:_        case Constants.INSTANCEOF:_        case Constants.IINC:_          currentOffset += 3__          break__        case Constants.INVOKEINTERFACE:_        case Constants.INVOKEDYNAMIC:_          currentOffset += 5__          break__        case Constants.MULTIANEWARRAY:_          currentOffset += 4__          break__        default:_          throw new IllegalArgumentException()__      }_    }__    _    _    int exceptionTableLength = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (exceptionTableLength-- > 0) {_      Label start = createLabel(readUnsignedShort(currentOffset), labels)__      Label end = createLabel(readUnsignedShort(currentOffset + 2), labels)__      Label handler = createLabel(readUnsignedShort(currentOffset + 4), labels)__      String catchType = readUTF8(cpInfoOffsets[readUnsignedShort(currentOffset + 6)], charBuffer)__      currentOffset += 8__      methodVisitor.visitTryCatchBlock(start, end, handler, catchType)__    }__    _    _    _    _    _    _    int stackMapFrameOffset = 0__    _    int stackMapTableEndOffset = 0__    _    boolean compressedFrames = true__    _    int localVariableTableOffset = 0__    _    int localVariableTypeTableOffset = 0__    _    _    int[] visibleTypeAnnotationOffsets = null__    _    _    int[] invisibleTypeAnnotationOffsets = null__    _    _    Attribute attributes = null___    int attributesCount = readUnsignedShort(currentOffset)__    currentOffset += 2__    while (attributesCount-- > 0) {_      _      String attributeName = readUTF8(currentOffset, charBuffer)__      int attributeLength = readInt(currentOffset + 2)__      currentOffset += 6__      if (Constants.LOCAL_VARIABLE_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_DEBUG) == 0) {_          localVariableTableOffset = currentOffset__          _          int currentLocalVariableTableOffset = currentOffset__          int localVariableTableLength = readUnsignedShort(currentLocalVariableTableOffset)__          currentLocalVariableTableOffset += 2__          while (localVariableTableLength-- > 0) {_            int startPc = readUnsignedShort(currentLocalVariableTableOffset)__            createDebugLabel(startPc, labels)__            int length = readUnsignedShort(currentLocalVariableTableOffset + 2)__            createDebugLabel(startPc + length, labels)__            _            currentLocalVariableTableOffset += 10__          }_        }_      } else if (Constants.LOCAL_VARIABLE_TYPE_TABLE.equals(attributeName)) {_        localVariableTypeTableOffset = currentOffset__        _        _      } else if (Constants.LINE_NUMBER_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_DEBUG) == 0) {_          _          int currentLineNumberTableOffset = currentOffset__          int lineNumberTableLength = readUnsignedShort(currentLineNumberTableOffset)__          currentLineNumberTableOffset += 2__          while (lineNumberTableLength-- > 0) {_            int startPc = readUnsignedShort(currentLineNumberTableOffset)__            int lineNumber = readUnsignedShort(currentLineNumberTableOffset + 2)__            currentLineNumberTableOffset += 4__            createDebugLabel(startPc, labels)__            labels[startPc].addLineNumber(lineNumber)__          }_        }_      } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        visibleTypeAnnotationOffsets =_            readTypeAnnotations(methodVisitor, context, currentOffset,  true)__        _        _        _        _        _        _      } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {_        invisibleTypeAnnotationOffsets =_            readTypeAnnotations(methodVisitor, context, currentOffset,  false)__        _      } else if (Constants.STACK_MAP_TABLE.equals(attributeName)) {_        if ((context.parsingOptions & SKIP_FRAMES) == 0) {_          stackMapFrameOffset = currentOffset + 2__          stackMapTableEndOffset = currentOffset + attributeLength__        }_        _        _        _        _        _        _        _        _        _      } else if ("StackMap".equals(attributeName)) {_        if ((context.parsingOptions & SKIP_FRAMES) == 0) {_          stackMapFrameOffset = currentOffset + 2__          stackMapTableEndOffset = currentOffset + attributeLength__          compressedFrames = false__        }_        _        _        _        _      } else {_        Attribute attribute =_            readAttribute(_                context.attributePrototypes,_                attributeName,_                currentOffset,_                attributeLength,_                charBuffer,_                codeOffset,_                labels)__        attribute.nextAttribute = attributes__        attributes = attribute__      }_      currentOffset += attributeLength__    }__    _    _    final boolean expandFrames = (context.parsingOptions & EXPAND_FRAMES) != 0__    if (stackMapFrameOffset != 0) {_      _      _      _      context.currentFrameOffset = -1__      context.currentFrameType = 0__      context.currentFrameLocalCount = 0__      context.currentFrameLocalCountDelta = 0__      context.currentFrameLocalTypes = new Object[maxLocals]__      context.currentFrameStackCount = 0__      context.currentFrameStackTypes = new Object[maxStack]__      if (expandFrames) {_        computeImplicitFrame(context)__      }_      _      _      _      _      _      _      _      for (int offset = stackMapFrameOffset_ offset < stackMapTableEndOffset - 2_ ++offset) {_        if (classFileBuffer[offset] == Frame.ITEM_UNINITIALIZED) {_          int potentialBytecodeOffset = readUnsignedShort(offset + 1)__          if (potentialBytecodeOffset >= 0_              && potentialBytecodeOffset < codeLength_              && (classFileBuffer[bytecodeStartOffset + potentialBytecodeOffset] & 0xFF)_                  == Opcodes.NEW) {_            createLabel(potentialBytecodeOffset, labels)__          }_        }_      }_    }_    if (expandFrames && (context.parsingOptions & EXPAND_ASM_INSNS) != 0) {_      _      _      _      _      _      _      methodVisitor.visitFrame(Opcodes.F_NEW, maxLocals, null, 0, null)__    }__    _    __    _    _    int currentVisibleTypeAnnotationIndex = 0__    _    int currentVisibleTypeAnnotationBytecodeOffset =_        getTypeAnnotationBytecodeOffset(visibleTypeAnnotationOffsets, 0)__    _    _    int currentInvisibleTypeAnnotationIndex = 0__    _    int currentInvisibleTypeAnnotationBytecodeOffset =_        getTypeAnnotationBytecodeOffset(invisibleTypeAnnotationOffsets, 0)___    _    boolean insertFrame = false___    _    _    _    final int wideJumpOpcodeDelta =_        (context.parsingOptions & EXPAND_ASM_INSNS) == 0 ? Constants.WIDE_JUMP_OPCODE_DELTA : 0___    currentOffset = bytecodeStartOffset__    while (currentOffset < bytecodeEndOffset) {_      final int currentBytecodeOffset = currentOffset - bytecodeStartOffset___      _      Label currentLabel = labels[currentBytecodeOffset]__      if (currentLabel != null) {_        currentLabel.accept(methodVisitor, (context.parsingOptions & SKIP_DEBUG) == 0)__      }__      _      while (stackMapFrameOffset != 0_          && (context.currentFrameOffset == currentBytecodeOffset_              || context.currentFrameOffset == -1)) {_        _        _        if (context.currentFrameOffset != -1) {_          if (!compressedFrames || expandFrames) {_            methodVisitor.visitFrame(_                Opcodes.F_NEW,_                context.currentFrameLocalCount,_                context.currentFrameLocalTypes,_                context.currentFrameStackCount,_                context.currentFrameStackTypes)__          } else {_            methodVisitor.visitFrame(_                context.currentFrameType,_                context.currentFrameLocalCountDelta,_                context.currentFrameLocalTypes,_                context.currentFrameStackCount,_                context.currentFrameStackTypes)__          }_          _          _          insertFrame = false__        }_        if (stackMapFrameOffset < stackMapTableEndOffset) {_          stackMapFrameOffset =_              readStackMapFrame(stackMapFrameOffset, compressedFrames, expandFrames, context)__        } else {_          stackMapFrameOffset = 0__        }_      }__      _      _      if (insertFrame) {_        if ((context.parsingOptions & EXPAND_FRAMES) != 0) {_          methodVisitor.visitFrame(Constants.F_INSERT, 0, null, 0, null)__        }_        insertFrame = false__      }__      _      int opcode = classFileBuffer[currentOffset] & 0xFF__      switch (opcode) {_        case Constants.NOP:_        case Constants.ACONST_NULL:_        case Constants.ICONST_M1:_        case Constants.ICONST_0:_        case Constants.ICONST_1:_        case Constants.ICONST_2:_        case Constants.ICONST_3:_        case Constants.ICONST_4:_        case Constants.ICONST_5:_        case Constants.LCONST_0:_        case Constants.LCONST_1:_        case Constants.FCONST_0:_        case Constants.FCONST_1:_        case Constants.FCONST_2:_        case Constants.DCONST_0:_        case Constants.DCONST_1:_        case Constants.IALOAD:_        case Constants.LALOAD:_        case Constants.FALOAD:_        case Constants.DALOAD:_        case Constants.AALOAD:_        case Constants.BALOAD:_        case Constants.CALOAD:_        case Constants.SALOAD:_        case Constants.IASTORE:_        case Constants.LASTORE:_        case Constants.FASTORE:_        case Constants.DASTORE:_        case Constants.AASTORE:_        case Constants.BASTORE:_        case Constants.CASTORE:_        case Constants.SASTORE:_        case Constants.POP:_        case Constants.POP2:_        case Constants.DUP:_        case Constants.DUP_X1:_        case Constants.DUP_X2:_        case Constants.DUP2:_        case Constants.DUP2_X1:_        case Constants.DUP2_X2:_        case Constants.SWAP:_        case Constants.IADD:_        case Constants.LADD:_        case Constants.FADD:_        case Constants.DADD:_        case Constants.ISUB:_        case Constants.LSUB:_        case Constants.FSUB:_        case Constants.DSUB:_        case Constants.IMUL:_        case Constants.LMUL:_        case Constants.FMUL:_        case Constants.DMUL:_        case Constants.IDIV:_        case Constants.LDIV:_        case Constants.FDIV:_        case Constants.DDIV:_        case Constants.IREM:_        case Constants.LREM:_        case Constants.FREM:_        case Constants.DREM:_        case Constants.INEG:_        case Constants.LNEG:_        case Constants.FNEG:_        case Constants.DNEG:_        case Constants.ISHL:_        case Constants.LSHL:_        case Constants.ISHR:_        case Constants.LSHR:_        case Constants.IUSHR:_        case Constants.LUSHR:_        case Constants.IAND:_        case Constants.LAND:_        case Constants.IOR:_        case Constants.LOR:_        case Constants.IXOR:_        case Constants.LXOR:_        case Constants.I2L:_        case Constants.I2F:_        case Constants.I2D:_        case Constants.L2I:_        case Constants.L2F:_        case Constants.L2D:_        case Constants.F2I:_        case Constants.F2L:_        case Constants.F2D:_        case Constants.D2I:_        case Constants.D2L:_        case Constants.D2F:_        case Constants.I2B:_        case Constants.I2C:_        case Constants.I2S:_        case Constants.LCMP:_        case Constants.FCMPL:_        case Constants.FCMPG:_        case Constants.DCMPL:_        case Constants.DCMPG:_        case Constants.IRETURN:_        case Constants.LRETURN:_        case Constants.FRETURN:_        case Constants.DRETURN:_        case Constants.ARETURN:_        case Constants.RETURN:_        case Constants.ARRAYLENGTH:_        case Constants.ATHROW:_        case Constants.MONITORENTER:_        case Constants.MONITOREXIT:_          methodVisitor.visitInsn(opcode)__          currentOffset += 1__          break__        case Constants.ILOAD_0:_        case Constants.ILOAD_1:_        case Constants.ILOAD_2:_        case Constants.ILOAD_3:_        case Constants.LLOAD_0:_        case Constants.LLOAD_1:_        case Constants.LLOAD_2:_        case Constants.LLOAD_3:_        case Constants.FLOAD_0:_        case Constants.FLOAD_1:_        case Constants.FLOAD_2:_        case Constants.FLOAD_3:_        case Constants.DLOAD_0:_        case Constants.DLOAD_1:_        case Constants.DLOAD_2:_        case Constants.DLOAD_3:_        case Constants.ALOAD_0:_        case Constants.ALOAD_1:_        case Constants.ALOAD_2:_        case Constants.ALOAD_3:_          opcode -= Constants.ILOAD_0__          methodVisitor.visitVarInsn(Opcodes.ILOAD + (opcode >> 2), opcode & 0x3)__          currentOffset += 1__          break__        case Constants.ISTORE_0:_        case Constants.ISTORE_1:_        case Constants.ISTORE_2:_        case Constants.ISTORE_3:_        case Constants.LSTORE_0:_        case Constants.LSTORE_1:_        case Constants.LSTORE_2:_        case Constants.LSTORE_3:_        case Constants.FSTORE_0:_        case Constants.FSTORE_1:_        case Constants.FSTORE_2:_        case Constants.FSTORE_3:_        case Constants.DSTORE_0:_        case Constants.DSTORE_1:_        case Constants.DSTORE_2:_        case Constants.DSTORE_3:_        case Constants.ASTORE_0:_        case Constants.ASTORE_1:_        case Constants.ASTORE_2:_        case Constants.ASTORE_3:_          opcode -= Constants.ISTORE_0__          methodVisitor.visitVarInsn(Opcodes.ISTORE + (opcode >> 2), opcode & 0x3)__          currentOffset += 1__          break__        case Constants.IFEQ:_        case Constants.IFNE:_        case Constants.IFLT:_        case Constants.IFGE:_        case Constants.IFGT:_        case Constants.IFLE:_        case Constants.IF_ICMPEQ:_        case Constants.IF_ICMPNE:_        case Constants.IF_ICMPLT:_        case Constants.IF_ICMPGE:_        case Constants.IF_ICMPGT:_        case Constants.IF_ICMPLE:_        case Constants.IF_ACMPEQ:_        case Constants.IF_ACMPNE:_        case Constants.GOTO:_        case Constants.JSR:_        case Constants.IFNULL:_        case Constants.IFNONNULL:_          methodVisitor.visitJumpInsn(_              opcode, labels[currentBytecodeOffset + readShort(currentOffset + 1)])__          currentOffset += 3__          break__        case Constants.GOTO_W:_        case Constants.JSR_W:_          methodVisitor.visitJumpInsn(_              opcode - wideJumpOpcodeDelta,_              labels[currentBytecodeOffset + readInt(currentOffset + 1)])__          currentOffset += 5__          break__        case Constants.ASM_IFEQ:_        case Constants.ASM_IFNE:_        case Constants.ASM_IFLT:_        case Constants.ASM_IFGE:_        case Constants.ASM_IFGT:_        case Constants.ASM_IFLE:_        case Constants.ASM_IF_ICMPEQ:_        case Constants.ASM_IF_ICMPNE:_        case Constants.ASM_IF_ICMPLT:_        case Constants.ASM_IF_ICMPGE:_        case Constants.ASM_IF_ICMPGT:_        case Constants.ASM_IF_ICMPLE:_        case Constants.ASM_IF_ACMPEQ:_        case Constants.ASM_IF_ACMPNE:_        case Constants.ASM_GOTO:_        case Constants.ASM_JSR:_        case Constants.ASM_IFNULL:_        case Constants.ASM_IFNONNULL:_          {_            _            _            _            _            _            _            opcode =_                opcode < Constants.ASM_IFNULL_                    ? opcode - Constants.ASM_OPCODE_DELTA_                    : opcode - Constants.ASM_IFNULL_OPCODE_DELTA__            Label target = labels[currentBytecodeOffset + readUnsignedShort(currentOffset + 1)]__            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_              _              methodVisitor.visitJumpInsn(opcode + Constants.WIDE_JUMP_OPCODE_DELTA, target)__            } else {_              _              _              _              opcode = opcode < Opcodes.GOTO ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1__              Label endif = createLabel(currentBytecodeOffset + 3, labels)__              methodVisitor.visitJumpInsn(opcode, endif)__              methodVisitor.visitJumpInsn(Constants.GOTO_W, target)__              _              _              insertFrame = true__            }_            currentOffset += 3__            break__          }_        case Constants.ASM_GOTO_W:_          {_            _            methodVisitor.visitJumpInsn(_                Constants.GOTO_W, labels[currentBytecodeOffset + readInt(currentOffset + 1)])__            _            _            _            insertFrame = true__            currentOffset += 5__            break__          }_        case Constants.WIDE:_          opcode = classFileBuffer[currentOffset + 1] & 0xFF__          if (opcode == Opcodes.IINC) {_            methodVisitor.visitIincInsn(_                readUnsignedShort(currentOffset + 2), readShort(currentOffset + 4))__            currentOffset += 6__          } else {_            methodVisitor.visitVarInsn(opcode, readUnsignedShort(currentOffset + 2))__            currentOffset += 4__          }_          break__        case Constants.TABLESWITCH:_          {_            _            currentOffset += 4 - (currentBytecodeOffset & 3)__            _            Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)]__            int low = readInt(currentOffset + 4)__            int high = readInt(currentOffset + 8)__            currentOffset += 12__            Label[] table = new Label[high - low + 1]__            for (int i = 0_ i < table.length_ ++i) {_              table[i] = labels[currentBytecodeOffset + readInt(currentOffset)]__              currentOffset += 4__            }_            methodVisitor.visitTableSwitchInsn(low, high, defaultLabel, table)__            break__          }_        case Constants.LOOKUPSWITCH:_          {_            _            currentOffset += 4 - (currentBytecodeOffset & 3)__            _            Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)]__            int numPairs = readInt(currentOffset + 4)__            currentOffset += 8__            int[] keys = new int[numPairs]__            Label[] values = new Label[numPairs]__            for (int i = 0_ i < numPairs_ ++i) {_              keys[i] = readInt(currentOffset)__              values[i] = labels[currentBytecodeOffset + readInt(currentOffset + 4)]__              currentOffset += 8__            }_            methodVisitor.visitLookupSwitchInsn(defaultLabel, keys, values)__            break__          }_        case Constants.ILOAD:_        case Constants.LLOAD:_        case Constants.FLOAD:_        case Constants.DLOAD:_        case Constants.ALOAD:_        case Constants.ISTORE:_        case Constants.LSTORE:_        case Constants.FSTORE:_        case Constants.DSTORE:_        case Constants.ASTORE:_        case Constants.RET:_          methodVisitor.visitVarInsn(opcode, classFileBuffer[currentOffset + 1] & 0xFF)__          currentOffset += 2__          break__        case Constants.BIPUSH:_        case Constants.NEWARRAY:_          methodVisitor.visitIntInsn(opcode, classFileBuffer[currentOffset + 1])__          currentOffset += 2__          break__        case Constants.SIPUSH:_          methodVisitor.visitIntInsn(opcode, readShort(currentOffset + 1))__          currentOffset += 3__          break__        case Constants.LDC:_          methodVisitor.visitLdcInsn(_              readConst(classFileBuffer[currentOffset + 1] & 0xFF, charBuffer))__          currentOffset += 2__          break__        case Constants.LDC_W:_        case Constants.LDC2_W:_          methodVisitor.visitLdcInsn(readConst(readUnsignedShort(currentOffset + 1), charBuffer))__          currentOffset += 3__          break__        case Constants.GETSTATIC:_        case Constants.PUTSTATIC:_        case Constants.GETFIELD:_        case Constants.PUTFIELD:_        case Constants.INVOKEVIRTUAL:_        case Constants.INVOKESPECIAL:_        case Constants.INVOKESTATIC:_        case Constants.INVOKEINTERFACE:_          {_            int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)]__            int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__            String owner = readClass(cpInfoOffset, charBuffer)__            String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__            String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__            if (opcode < Opcodes.INVOKEVIRTUAL) {_              methodVisitor.visitFieldInsn(opcode, owner, name, descriptor)__            } else {_              boolean isInterface =_                  classFileBuffer[cpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG__              methodVisitor.visitMethodInsn(opcode, owner, name, descriptor, isInterface)__            }_            if (opcode == Opcodes.INVOKEINTERFACE) {_              currentOffset += 5__            } else {_              currentOffset += 3__            }_            break__          }_        case Constants.INVOKEDYNAMIC:_          {_            int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)]__            int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)]__            String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer)__            String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer)__            int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)]__            Handle handle =_                (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__            Object[] bootstrapMethodArguments =_                new Object[readUnsignedShort(bootstrapMethodOffset + 2)]__            bootstrapMethodOffset += 4__            for (int i = 0_ i < bootstrapMethodArguments.length_ i++) {_              bootstrapMethodArguments[i] =_                  readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer)__              bootstrapMethodOffset += 2__            }_            methodVisitor.visitInvokeDynamicInsn(_                name, descriptor, handle, bootstrapMethodArguments)__            currentOffset += 5__            break__          }_        case Constants.NEW:_        case Constants.ANEWARRAY:_        case Constants.CHECKCAST:_        case Constants.INSTANCEOF:_          methodVisitor.visitTypeInsn(opcode, readClass(currentOffset + 1, charBuffer))__          currentOffset += 3__          break__        case Constants.IINC:_          methodVisitor.visitIincInsn(_              classFileBuffer[currentOffset + 1] & 0xFF, classFileBuffer[currentOffset + 2])__          currentOffset += 3__          break__        case Constants.MULTIANEWARRAY:_          methodVisitor.visitMultiANewArrayInsn(_              readClass(currentOffset + 1, charBuffer), classFileBuffer[currentOffset + 3] & 0xFF)__          currentOffset += 4__          break__        default:_          throw new AssertionError()__      }__      _      while (visibleTypeAnnotationOffsets != null_          && currentVisibleTypeAnnotationIndex < visibleTypeAnnotationOffsets.length_          && currentVisibleTypeAnnotationBytecodeOffset <= currentBytecodeOffset) {_        if (currentVisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {_          _          int currentAnnotationOffset =_              readTypeAnnotationTarget(_                  context, visibleTypeAnnotationOffsets[currentVisibleTypeAnnotationIndex])__          _          String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__          currentAnnotationOffset += 2__          _          readElementValues(_              methodVisitor.visitInsnAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  annotationDescriptor,_                   true),_              currentAnnotationOffset,_               true,_              charBuffer)__        }_        currentVisibleTypeAnnotationBytecodeOffset =_            getTypeAnnotationBytecodeOffset(_                visibleTypeAnnotationOffsets, ++currentVisibleTypeAnnotationIndex)__      }__      _      while (invisibleTypeAnnotationOffsets != null_          && currentInvisibleTypeAnnotationIndex < invisibleTypeAnnotationOffsets.length_          && currentInvisibleTypeAnnotationBytecodeOffset <= currentBytecodeOffset) {_        if (currentInvisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {_          _          int currentAnnotationOffset =_              readTypeAnnotationTarget(_                  context, invisibleTypeAnnotationOffsets[currentInvisibleTypeAnnotationIndex])__          _          String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer)__          currentAnnotationOffset += 2__          _          readElementValues(_              methodVisitor.visitInsnAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  annotationDescriptor,_                   false),_              currentAnnotationOffset,_               true,_              charBuffer)__        }_        currentInvisibleTypeAnnotationBytecodeOffset =_            getTypeAnnotationBytecodeOffset(_                invisibleTypeAnnotationOffsets, ++currentInvisibleTypeAnnotationIndex)__      }_    }_    if (labels[codeLength] != null) {_      methodVisitor.visitLabel(labels[codeLength])__    }__    _    if (localVariableTableOffset != 0 && (context.parsingOptions & SKIP_DEBUG) == 0) {_      _      int[] typeTable = null__      if (localVariableTypeTableOffset != 0) {_        typeTable = new int[readUnsignedShort(localVariableTypeTableOffset) * 3]__        currentOffset = localVariableTypeTableOffset + 2__        int typeTableIndex = typeTable.length__        while (typeTableIndex > 0) {_          _          typeTable[--typeTableIndex] = currentOffset + 6__          typeTable[--typeTableIndex] = readUnsignedShort(currentOffset + 8)__          typeTable[--typeTableIndex] = readUnsignedShort(currentOffset)__          currentOffset += 10__        }_      }_      int localVariableTableLength = readUnsignedShort(localVariableTableOffset)__      currentOffset = localVariableTableOffset + 2__      while (localVariableTableLength-- > 0) {_        int startPc = readUnsignedShort(currentOffset)__        int length = readUnsignedShort(currentOffset + 2)__        String name = readUTF8(currentOffset + 4, charBuffer)__        String descriptor = readUTF8(currentOffset + 6, charBuffer)__        int index = readUnsignedShort(currentOffset + 8)__        currentOffset += 10__        String signature = null__        if (typeTable != null) {_          for (int i = 0_ i < typeTable.length_ i += 3) {_            if (typeTable[i] == startPc && typeTable[i + 1] == index) {_              signature = readUTF8(typeTable[i + 2], charBuffer)__              break__            }_          }_        }_        methodVisitor.visitLocalVariable(_            name, descriptor, signature, labels[startPc], labels[startPc + length], index)__      }_    }__    _    if (visibleTypeAnnotationOffsets != null) {_      for (int typeAnnotationOffset : visibleTypeAnnotationOffsets) {_        int targetType = readByte(typeAnnotationOffset)__        if (targetType == TypeReference.LOCAL_VARIABLE_            || targetType == TypeReference.RESOURCE_VARIABLE) {_          _          currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset)__          _          String annotationDescriptor = readUTF8(currentOffset, charBuffer)__          currentOffset += 2__          _          readElementValues(_              methodVisitor.visitLocalVariableAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  context.currentLocalVariableAnnotationRangeStarts,_                  context.currentLocalVariableAnnotationRangeEnds,_                  context.currentLocalVariableAnnotationRangeIndices,_                  annotationDescriptor,_                   true),_              currentOffset,_               true,_              charBuffer)__        }_      }_    }__    _    if (invisibleTypeAnnotationOffsets != null) {_      for (int typeAnnotationOffset : invisibleTypeAnnotationOffsets) {_        int targetType = readByte(typeAnnotationOffset)__        if (targetType == TypeReference.LOCAL_VARIABLE_            || targetType == TypeReference.RESOURCE_VARIABLE) {_          _          currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset)__          _          String annotationDescriptor = readUTF8(currentOffset, charBuffer)__          currentOffset += 2__          _          readElementValues(_              methodVisitor.visitLocalVariableAnnotation(_                  context.currentTypeAnnotationTarget,_                  context.currentTypeAnnotationTargetPath,_                  context.currentLocalVariableAnnotationRangeStarts,_                  context.currentLocalVariableAnnotationRangeEnds,_                  context.currentLocalVariableAnnotationRangeIndices,_                  annotationDescriptor,_                   false),_              currentOffset,_               true,_              charBuffer)__        }_      }_    }__    _    while (attributes != null) {_      _      Attribute nextAttribute = attributes.nextAttribute__      attributes.nextAttribute = null__      methodVisitor.visitAttribute(attributes)__      attributes = nextAttribute__    }__    _    methodVisitor.visitMaxs(maxStack, maxLocals)__  };reads,a,jvms,code,attribute,and,makes,the,given,visitor,visit,it,param,method,visitor,the,visitor,that,must,visit,the,code,attribute,param,context,information,about,the,class,being,parsed,param,code,offset,the,start,offset,in,link,b,of,the,code,attribute,excluding,its,and,fields;private,void,read,code,final,method,visitor,method,visitor,final,context,context,final,int,code,offset,int,current,offset,code,offset,final,byte,class,file,buffer,b,final,char,char,buffer,context,char,buffer,final,int,max,stack,read,unsigned,short,current,offset,final,int,max,locals,read,unsigned,short,current,offset,2,final,int,code,length,read,int,current,offset,4,current,offset,8,final,int,bytecode,start,offset,current,offset,final,int,bytecode,end,offset,current,offset,code,length,final,label,labels,context,current,method,labels,new,label,code,length,1,while,current,offset,bytecode,end,offset,final,int,bytecode,offset,current,offset,bytecode,start,offset,final,int,opcode,class,file,buffer,current,offset,0x,ff,switch,opcode,case,constants,nop,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,iaload,case,constants,laload,case,constants,faload,case,constants,daload,case,constants,aaload,case,constants,baload,case,constants,caload,case,constants,saload,case,constants,iastore,case,constants,lastore,case,constants,fastore,case,constants,dastore,case,constants,aastore,case,constants,bastore,case,constants,castore,case,constants,sastore,case,constants,pop,case,constants,pop2,case,constants,dup,case,constants,case,constants,case,constants,dup2,case,constants,case,constants,case,constants,swap,case,constants,iadd,case,constants,ladd,case,constants,fadd,case,constants,dadd,case,constants,isub,case,constants,lsub,case,constants,fsub,case,constants,dsub,case,constants,imul,case,constants,lmul,case,constants,fmul,case,constants,dmul,case,constants,idiv,case,constants,ldiv,case,constants,fdiv,case,constants,ddiv,case,constants,irem,case,constants,lrem,case,constants,frem,case,constants,drem,case,constants,ineg,case,constants,lneg,case,constants,fneg,case,constants,dneg,case,constants,ishl,case,constants,lshl,case,constants,ishr,case,constants,lshr,case,constants,iushr,case,constants,lushr,case,constants,iand,case,constants,land,case,constants,ior,case,constants,lor,case,constants,ixor,case,constants,lxor,case,constants,i2l,case,constants,i2f,case,constants,i2d,case,constants,l2i,case,constants,l2f,case,constants,l2d,case,constants,f2i,case,constants,f2l,case,constants,f2d,case,constants,d2i,case,constants,d2l,case,constants,d2f,case,constants,i2b,case,constants,i2c,case,constants,i2s,case,constants,lcmp,case,constants,fcmpl,case,constants,fcmpg,case,constants,dcmpl,case,constants,dcmpg,case,constants,ireturn,case,constants,lreturn,case,constants,freturn,case,constants,dreturn,case,constants,areturn,case,constants,return,case,constants,arraylength,case,constants,athrow,case,constants,monitorenter,case,constants,monitorexit,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,current,offset,1,break,case,constants,ifeq,case,constants,ifne,case,constants,iflt,case,constants,ifge,case,constants,ifgt,case,constants,ifle,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,goto,case,constants,jsr,case,constants,ifnull,case,constants,ifnonnull,create,label,bytecode,offset,read,short,current,offset,1,labels,current,offset,3,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,create,label,bytecode,offset,read,unsigned,short,current,offset,1,labels,current,offset,3,break,case,constants,case,constants,case,constants,create,label,bytecode,offset,read,int,current,offset,1,labels,current,offset,5,break,case,constants,wide,switch,class,file,buffer,current,offset,1,0x,ff,case,constants,iload,case,constants,fload,case,constants,aload,case,constants,lload,case,constants,dload,case,constants,istore,case,constants,fstore,case,constants,astore,case,constants,lstore,case,constants,dstore,case,constants,ret,current,offset,4,break,case,constants,iinc,current,offset,6,break,default,throw,new,illegal,argument,exception,break,case,constants,tableswitch,current,offset,4,bytecode,offset,3,create,label,bytecode,offset,read,int,current,offset,labels,int,num,table,entries,read,int,current,offset,8,read,int,current,offset,4,1,current,offset,12,while,num,table,entries,0,create,label,bytecode,offset,read,int,current,offset,labels,current,offset,4,break,case,constants,lookupswitch,current,offset,4,bytecode,offset,3,create,label,bytecode,offset,read,int,current,offset,labels,int,num,switch,cases,read,int,current,offset,4,current,offset,8,while,num,switch,cases,0,create,label,bytecode,offset,read,int,current,offset,4,labels,current,offset,8,break,case,constants,iload,case,constants,lload,case,constants,fload,case,constants,dload,case,constants,aload,case,constants,istore,case,constants,lstore,case,constants,fstore,case,constants,dstore,case,constants,astore,case,constants,ret,case,constants,bipush,case,constants,newarray,case,constants,ldc,current,offset,2,break,case,constants,sipush,case,constants,case,constants,case,constants,getstatic,case,constants,putstatic,case,constants,getfield,case,constants,putfield,case,constants,invokevirtual,case,constants,invokespecial,case,constants,invokestatic,case,constants,new,case,constants,anewarray,case,constants,checkcast,case,constants,instanceof,case,constants,iinc,current,offset,3,break,case,constants,invokeinterface,case,constants,invokedynamic,current,offset,5,break,case,constants,multianewarray,current,offset,4,break,default,throw,new,illegal,argument,exception,int,exception,table,length,read,unsigned,short,current,offset,current,offset,2,while,exception,table,length,0,label,start,create,label,read,unsigned,short,current,offset,labels,label,end,create,label,read,unsigned,short,current,offset,2,labels,label,handler,create,label,read,unsigned,short,current,offset,4,labels,string,catch,type,read,utf8,cp,info,offsets,read,unsigned,short,current,offset,6,char,buffer,current,offset,8,method,visitor,visit,try,catch,block,start,end,handler,catch,type,int,stack,map,frame,offset,0,int,stack,map,table,end,offset,0,boolean,compressed,frames,true,int,local,variable,table,offset,0,int,local,variable,type,table,offset,0,int,visible,type,annotation,offsets,null,int,invisible,type,annotation,offsets,null,attribute,attributes,null,int,attributes,count,read,unsigned,short,current,offset,current,offset,2,while,attributes,count,0,string,attribute,name,read,utf8,current,offset,char,buffer,int,attribute,length,read,int,current,offset,2,current,offset,6,if,constants,equals,attribute,name,if,context,parsing,options,0,local,variable,table,offset,current,offset,int,current,local,variable,table,offset,current,offset,int,local,variable,table,length,read,unsigned,short,current,local,variable,table,offset,current,local,variable,table,offset,2,while,local,variable,table,length,0,int,start,pc,read,unsigned,short,current,local,variable,table,offset,create,debug,label,start,pc,labels,int,length,read,unsigned,short,current,local,variable,table,offset,2,create,debug,label,start,pc,length,labels,current,local,variable,table,offset,10,else,if,constants,equals,attribute,name,local,variable,type,table,offset,current,offset,else,if,constants,equals,attribute,name,if,context,parsing,options,0,int,current,line,number,table,offset,current,offset,int,line,number,table,length,read,unsigned,short,current,line,number,table,offset,current,line,number,table,offset,2,while,line,number,table,length,0,int,start,pc,read,unsigned,short,current,line,number,table,offset,int,line,number,read,unsigned,short,current,line,number,table,offset,2,current,line,number,table,offset,4,create,debug,label,start,pc,labels,labels,start,pc,add,line,number,line,number,else,if,constants,equals,attribute,name,visible,type,annotation,offsets,read,type,annotations,method,visitor,context,current,offset,true,else,if,constants,equals,attribute,name,invisible,type,annotation,offsets,read,type,annotations,method,visitor,context,current,offset,false,else,if,constants,equals,attribute,name,if,context,parsing,options,0,stack,map,frame,offset,current,offset,2,stack,map,table,end,offset,current,offset,attribute,length,else,if,stack,map,equals,attribute,name,if,context,parsing,options,0,stack,map,frame,offset,current,offset,2,stack,map,table,end,offset,current,offset,attribute,length,compressed,frames,false,else,attribute,attribute,read,attribute,context,attribute,prototypes,attribute,name,current,offset,attribute,length,char,buffer,code,offset,labels,attribute,next,attribute,attributes,attributes,attribute,current,offset,attribute,length,final,boolean,expand,frames,context,parsing,options,0,if,stack,map,frame,offset,0,context,current,frame,offset,1,context,current,frame,type,0,context,current,frame,local,count,0,context,current,frame,local,count,delta,0,context,current,frame,local,types,new,object,max,locals,context,current,frame,stack,count,0,context,current,frame,stack,types,new,object,max,stack,if,expand,frames,compute,implicit,frame,context,for,int,offset,stack,map,frame,offset,offset,stack,map,table,end,offset,2,offset,if,class,file,buffer,offset,frame,int,potential,bytecode,offset,read,unsigned,short,offset,1,if,potential,bytecode,offset,0,potential,bytecode,offset,code,length,class,file,buffer,bytecode,start,offset,potential,bytecode,offset,0x,ff,opcodes,new,create,label,potential,bytecode,offset,labels,if,expand,frames,context,parsing,options,0,method,visitor,visit,frame,opcodes,max,locals,null,0,null,int,current,visible,type,annotation,index,0,int,current,visible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,visible,type,annotation,offsets,0,int,current,invisible,type,annotation,index,0,int,current,invisible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,invisible,type,annotation,offsets,0,boolean,insert,frame,false,final,int,wide,jump,opcode,delta,context,parsing,options,0,constants,0,current,offset,bytecode,start,offset,while,current,offset,bytecode,end,offset,final,int,current,bytecode,offset,current,offset,bytecode,start,offset,label,current,label,labels,current,bytecode,offset,if,current,label,null,current,label,accept,method,visitor,context,parsing,options,0,while,stack,map,frame,offset,0,context,current,frame,offset,current,bytecode,offset,context,current,frame,offset,1,if,context,current,frame,offset,1,if,compressed,frames,expand,frames,method,visitor,visit,frame,opcodes,context,current,frame,local,count,context,current,frame,local,types,context,current,frame,stack,count,context,current,frame,stack,types,else,method,visitor,visit,frame,context,current,frame,type,context,current,frame,local,count,delta,context,current,frame,local,types,context,current,frame,stack,count,context,current,frame,stack,types,insert,frame,false,if,stack,map,frame,offset,stack,map,table,end,offset,stack,map,frame,offset,read,stack,map,frame,stack,map,frame,offset,compressed,frames,expand,frames,context,else,stack,map,frame,offset,0,if,insert,frame,if,context,parsing,options,0,method,visitor,visit,frame,constants,0,null,0,null,insert,frame,false,int,opcode,class,file,buffer,current,offset,0x,ff,switch,opcode,case,constants,nop,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,iaload,case,constants,laload,case,constants,faload,case,constants,daload,case,constants,aaload,case,constants,baload,case,constants,caload,case,constants,saload,case,constants,iastore,case,constants,lastore,case,constants,fastore,case,constants,dastore,case,constants,aastore,case,constants,bastore,case,constants,castore,case,constants,sastore,case,constants,pop,case,constants,pop2,case,constants,dup,case,constants,case,constants,case,constants,dup2,case,constants,case,constants,case,constants,swap,case,constants,iadd,case,constants,ladd,case,constants,fadd,case,constants,dadd,case,constants,isub,case,constants,lsub,case,constants,fsub,case,constants,dsub,case,constants,imul,case,constants,lmul,case,constants,fmul,case,constants,dmul,case,constants,idiv,case,constants,ldiv,case,constants,fdiv,case,constants,ddiv,case,constants,irem,case,constants,lrem,case,constants,frem,case,constants,drem,case,constants,ineg,case,constants,lneg,case,constants,fneg,case,constants,dneg,case,constants,ishl,case,constants,lshl,case,constants,ishr,case,constants,lshr,case,constants,iushr,case,constants,lushr,case,constants,iand,case,constants,land,case,constants,ior,case,constants,lor,case,constants,ixor,case,constants,lxor,case,constants,i2l,case,constants,i2f,case,constants,i2d,case,constants,l2i,case,constants,l2f,case,constants,l2d,case,constants,f2i,case,constants,f2l,case,constants,f2d,case,constants,d2i,case,constants,d2l,case,constants,d2f,case,constants,i2b,case,constants,i2c,case,constants,i2s,case,constants,lcmp,case,constants,fcmpl,case,constants,fcmpg,case,constants,dcmpl,case,constants,dcmpg,case,constants,ireturn,case,constants,lreturn,case,constants,freturn,case,constants,dreturn,case,constants,areturn,case,constants,return,case,constants,arraylength,case,constants,athrow,case,constants,monitorenter,case,constants,monitorexit,method,visitor,visit,insn,opcode,current,offset,1,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,constants,method,visitor,visit,var,insn,opcodes,iload,opcode,2,opcode,0x3,current,offset,1,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,constants,method,visitor,visit,var,insn,opcodes,istore,opcode,2,opcode,0x3,current,offset,1,break,case,constants,ifeq,case,constants,ifne,case,constants,iflt,case,constants,ifge,case,constants,ifgt,case,constants,ifle,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,goto,case,constants,jsr,case,constants,ifnull,case,constants,ifnonnull,method,visitor,visit,jump,insn,opcode,labels,current,bytecode,offset,read,short,current,offset,1,current,offset,3,break,case,constants,case,constants,method,visitor,visit,jump,insn,opcode,wide,jump,opcode,delta,labels,current,bytecode,offset,read,int,current,offset,1,current,offset,5,break,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,case,constants,opcode,opcode,constants,opcode,constants,opcode,constants,label,target,labels,current,bytecode,offset,read,unsigned,short,current,offset,1,if,opcode,opcodes,goto,opcode,opcodes,jsr,method,visitor,visit,jump,insn,opcode,constants,target,else,opcode,opcode,opcodes,goto,opcode,1,1,1,opcode,1,label,endif,create,label,current,bytecode,offset,3,labels,method,visitor,visit,jump,insn,opcode,endif,method,visitor,visit,jump,insn,constants,target,insert,frame,true,current,offset,3,break,case,constants,method,visitor,visit,jump,insn,constants,labels,current,bytecode,offset,read,int,current,offset,1,insert,frame,true,current,offset,5,break,case,constants,wide,opcode,class,file,buffer,current,offset,1,0x,ff,if,opcode,opcodes,iinc,method,visitor,visit,iinc,insn,read,unsigned,short,current,offset,2,read,short,current,offset,4,current,offset,6,else,method,visitor,visit,var,insn,opcode,read,unsigned,short,current,offset,2,current,offset,4,break,case,constants,tableswitch,current,offset,4,current,bytecode,offset,3,label,default,label,labels,current,bytecode,offset,read,int,current,offset,int,low,read,int,current,offset,4,int,high,read,int,current,offset,8,current,offset,12,label,table,new,label,high,low,1,for,int,i,0,i,table,length,i,table,i,labels,current,bytecode,offset,read,int,current,offset,current,offset,4,method,visitor,visit,table,switch,insn,low,high,default,label,table,break,case,constants,lookupswitch,current,offset,4,current,bytecode,offset,3,label,default,label,labels,current,bytecode,offset,read,int,current,offset,int,num,pairs,read,int,current,offset,4,current,offset,8,int,keys,new,int,num,pairs,label,values,new,label,num,pairs,for,int,i,0,i,num,pairs,i,keys,i,read,int,current,offset,values,i,labels,current,bytecode,offset,read,int,current,offset,4,current,offset,8,method,visitor,visit,lookup,switch,insn,default,label,keys,values,break,case,constants,iload,case,constants,lload,case,constants,fload,case,constants,dload,case,constants,aload,case,constants,istore,case,constants,lstore,case,constants,fstore,case,constants,dstore,case,constants,astore,case,constants,ret,method,visitor,visit,var,insn,opcode,class,file,buffer,current,offset,1,0x,ff,current,offset,2,break,case,constants,bipush,case,constants,newarray,method,visitor,visit,int,insn,opcode,class,file,buffer,current,offset,1,current,offset,2,break,case,constants,sipush,method,visitor,visit,int,insn,opcode,read,short,current,offset,1,current,offset,3,break,case,constants,ldc,method,visitor,visit,ldc,insn,read,const,class,file,buffer,current,offset,1,0x,ff,char,buffer,current,offset,2,break,case,constants,case,constants,method,visitor,visit,ldc,insn,read,const,read,unsigned,short,current,offset,1,char,buffer,current,offset,3,break,case,constants,getstatic,case,constants,putstatic,case,constants,getfield,case,constants,putfield,case,constants,invokevirtual,case,constants,invokespecial,case,constants,invokestatic,case,constants,invokeinterface,int,cp,info,offset,cp,info,offsets,read,unsigned,short,current,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,owner,read,class,cp,info,offset,char,buffer,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,if,opcode,opcodes,invokevirtual,method,visitor,visit,field,insn,opcode,owner,name,descriptor,else,boolean,is,interface,class,file,buffer,cp,info,offset,1,symbol,method,visitor,visit,method,insn,opcode,owner,name,descriptor,is,interface,if,opcode,opcodes,invokeinterface,current,offset,5,else,current,offset,3,break,case,constants,invokedynamic,int,cp,info,offset,cp,info,offsets,read,unsigned,short,current,offset,1,int,name,and,type,cp,info,offset,cp,info,offsets,read,unsigned,short,cp,info,offset,2,string,name,read,utf8,name,and,type,cp,info,offset,char,buffer,string,descriptor,read,utf8,name,and,type,cp,info,offset,2,char,buffer,int,bootstrap,method,offset,bootstrap,method,offsets,read,unsigned,short,cp,info,offset,handle,handle,handle,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,object,bootstrap,method,arguments,new,object,read,unsigned,short,bootstrap,method,offset,2,bootstrap,method,offset,4,for,int,i,0,i,bootstrap,method,arguments,length,i,bootstrap,method,arguments,i,read,const,read,unsigned,short,bootstrap,method,offset,char,buffer,bootstrap,method,offset,2,method,visitor,visit,invoke,dynamic,insn,name,descriptor,handle,bootstrap,method,arguments,current,offset,5,break,case,constants,new,case,constants,anewarray,case,constants,checkcast,case,constants,instanceof,method,visitor,visit,type,insn,opcode,read,class,current,offset,1,char,buffer,current,offset,3,break,case,constants,iinc,method,visitor,visit,iinc,insn,class,file,buffer,current,offset,1,0x,ff,class,file,buffer,current,offset,2,current,offset,3,break,case,constants,multianewarray,method,visitor,visit,multi,anew,array,insn,read,class,current,offset,1,char,buffer,class,file,buffer,current,offset,3,0x,ff,current,offset,4,break,default,throw,new,assertion,error,while,visible,type,annotation,offsets,null,current,visible,type,annotation,index,visible,type,annotation,offsets,length,current,visible,type,annotation,bytecode,offset,current,bytecode,offset,if,current,visible,type,annotation,bytecode,offset,current,bytecode,offset,int,current,annotation,offset,read,type,annotation,target,context,visible,type,annotation,offsets,current,visible,type,annotation,index,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,read,element,values,method,visitor,visit,insn,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,true,current,annotation,offset,true,char,buffer,current,visible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,visible,type,annotation,offsets,current,visible,type,annotation,index,while,invisible,type,annotation,offsets,null,current,invisible,type,annotation,index,invisible,type,annotation,offsets,length,current,invisible,type,annotation,bytecode,offset,current,bytecode,offset,if,current,invisible,type,annotation,bytecode,offset,current,bytecode,offset,int,current,annotation,offset,read,type,annotation,target,context,invisible,type,annotation,offsets,current,invisible,type,annotation,index,string,annotation,descriptor,read,utf8,current,annotation,offset,char,buffer,current,annotation,offset,2,read,element,values,method,visitor,visit,insn,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,annotation,descriptor,false,current,annotation,offset,true,char,buffer,current,invisible,type,annotation,bytecode,offset,get,type,annotation,bytecode,offset,invisible,type,annotation,offsets,current,invisible,type,annotation,index,if,labels,code,length,null,method,visitor,visit,label,labels,code,length,if,local,variable,table,offset,0,context,parsing,options,0,int,type,table,null,if,local,variable,type,table,offset,0,type,table,new,int,read,unsigned,short,local,variable,type,table,offset,3,current,offset,local,variable,type,table,offset,2,int,type,table,index,type,table,length,while,type,table,index,0,type,table,type,table,index,current,offset,6,type,table,type,table,index,read,unsigned,short,current,offset,8,type,table,type,table,index,read,unsigned,short,current,offset,current,offset,10,int,local,variable,table,length,read,unsigned,short,local,variable,table,offset,current,offset,local,variable,table,offset,2,while,local,variable,table,length,0,int,start,pc,read,unsigned,short,current,offset,int,length,read,unsigned,short,current,offset,2,string,name,read,utf8,current,offset,4,char,buffer,string,descriptor,read,utf8,current,offset,6,char,buffer,int,index,read,unsigned,short,current,offset,8,current,offset,10,string,signature,null,if,type,table,null,for,int,i,0,i,type,table,length,i,3,if,type,table,i,start,pc,type,table,i,1,index,signature,read,utf8,type,table,i,2,char,buffer,break,method,visitor,visit,local,variable,name,descriptor,signature,labels,start,pc,labels,start,pc,length,index,if,visible,type,annotation,offsets,null,for,int,type,annotation,offset,visible,type,annotation,offsets,int,target,type,read,byte,type,annotation,offset,if,target,type,type,reference,target,type,type,reference,current,offset,read,type,annotation,target,context,type,annotation,offset,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,read,element,values,method,visitor,visit,local,variable,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,context,current,local,variable,annotation,range,starts,context,current,local,variable,annotation,range,ends,context,current,local,variable,annotation,range,indices,annotation,descriptor,true,current,offset,true,char,buffer,if,invisible,type,annotation,offsets,null,for,int,type,annotation,offset,invisible,type,annotation,offsets,int,target,type,read,byte,type,annotation,offset,if,target,type,type,reference,target,type,type,reference,current,offset,read,type,annotation,target,context,type,annotation,offset,string,annotation,descriptor,read,utf8,current,offset,char,buffer,current,offset,2,read,element,values,method,visitor,visit,local,variable,annotation,context,current,type,annotation,target,context,current,type,annotation,target,path,context,current,local,variable,annotation,range,starts,context,current,local,variable,annotation,range,ends,context,current,local,variable,annotation,range,indices,annotation,descriptor,false,current,offset,true,char,buffer,while,attributes,null,attribute,next,attribute,attributes,next,attribute,attributes,next,attribute,null,method,visitor,visit,attribute,attributes,attributes,next,attribute,method,visitor,visit,maxs,max,stack,max,locals
