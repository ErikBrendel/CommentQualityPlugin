commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(Object.class, Object.class)). }
false;public;2;6;;@Override public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     Method finder = getFinder(targetType.getType()).     return (finder != null && this.conversionService.canConvert(sourceType, TypeDescriptor.valueOf(finder.getParameterTypes()[0]))). }
false;public;3;12;;@Override @Nullable public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null.     }     Method finder = getFinder(targetType.getType()).     Assert.state(finder != null, "No finder method").     Object id = this.conversionService.convert(source, sourceType, TypeDescriptor.valueOf(finder.getParameterTypes()[0])).     return ReflectionUtils.invokeMethod(finder, source, id). }
false;private;1;24;;@Nullable private Method getFinder(Class<?> entityClass) {     String finderMethod = "find" + getEntityName(entityClass).     Method[] methods.     boolean localOnlyFiltered.     try {         methods = entityClass.getDeclaredMethods().         localOnlyFiltered = true.     } catch (SecurityException ex) {         // Not allowed to access non-public methods...         // Fallback: check locally declared public methods only.         methods = entityClass.getMethods().         localOnlyFiltered = false.     }     for (Method method : methods) {         if (Modifier.isStatic(method.getModifiers()) && method.getName().equals(finderMethod) && method.getParameterCount() == 1 && method.getReturnType().equals(entityClass) && (localOnlyFiltered || method.getDeclaringClass().equals(entityClass))) {             return method.         }     }     return null. }
false;private;1;10;;private String getEntityName(Class<?> entityClass) {     String shortName = ClassUtils.getShortName(entityClass).     int lastDot = shortName.lastIndexOf('.').     if (lastDot != -1) {         return shortName.substring(lastDot + 1).     } else {         return shortName.     } }
