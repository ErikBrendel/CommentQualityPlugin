commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(Collection.class, Object[].class)). }
false;public;2;5;;@Override public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     return ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), this.conversionService). }
false;public;3;18;;@Override @Nullable public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null.     }     Collection<?> sourceCollection = (Collection<?>) source.     TypeDescriptor targetElementType = targetType.getElementTypeDescriptor().     Assert.state(targetElementType != null, "No target element type").     Object array = Array.newInstance(targetElementType.getType(), sourceCollection.size()).     int i = 0.     for (Object sourceElement : sourceCollection) {         Object targetElement = this.conversionService.convert(sourceElement, sourceType.elementTypeDescriptor(sourceElement), targetElementType).         Array.set(array, i++, targetElement).     }     return array. }
