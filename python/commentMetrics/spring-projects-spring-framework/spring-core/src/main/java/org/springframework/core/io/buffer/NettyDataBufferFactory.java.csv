commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the {@code ByteBufAllocator} used by this factory.  */ ;/**  * Return the {@code ByteBufAllocator} used by this factory.  */ public ByteBufAllocator getByteBufAllocator() {     return this.byteBufAllocator. }
false;public;0;5;;@Override public NettyDataBuffer allocateBuffer() {     ByteBuf byteBuf = this.byteBufAllocator.buffer().     return new NettyDataBuffer(byteBuf, this). }
false;public;1;5;;@Override public NettyDataBuffer allocateBuffer(int initialCapacity) {     ByteBuf byteBuf = this.byteBufAllocator.buffer(initialCapacity).     return new NettyDataBuffer(byteBuf, this). }
false;public;1;5;;@Override public NettyDataBuffer wrap(ByteBuffer byteBuffer) {     ByteBuf byteBuf = Unpooled.wrappedBuffer(byteBuffer).     return new NettyDataBuffer(byteBuf, this). }
false;public;1;5;;@Override public DataBuffer wrap(byte[] bytes) {     ByteBuf byteBuf = Unpooled.wrappedBuffer(bytes).     return new NettyDataBuffer(byteBuf, this). }
true;public;1;3;/**  * Wrap the given Netty {@link ByteBuf} in a {@code NettyDataBuffer}.  * @param byteBuf the Netty byte buffer to wrap  * @return the wrapped buffer  */ ;/**  * Wrap the given Netty {@link ByteBuf} in a {@code NettyDataBuffer}.  * @param byteBuf the Netty byte buffer to wrap  * @return the wrapped buffer  */ public NettyDataBuffer wrap(ByteBuf byteBuf) {     return new NettyDataBuffer(byteBuf, this). }
true;public;1;14;/**  * {@inheritDoc}  * <p>This implementation uses Netty's {@link CompositeByteBuf}.  */ ;/**  * {@inheritDoc}  * <p>This implementation uses Netty's {@link CompositeByteBuf}.  */ @Override public DataBuffer join(List<? extends DataBuffer> dataBuffers) {     Assert.notEmpty(dataBuffers, "DataBuffer List must not be empty").     int bufferCount = dataBuffers.size().     if (bufferCount == 1) {         return dataBuffers.get(0).     }     CompositeByteBuf composite = this.byteBufAllocator.compositeBuffer(bufferCount).     for (DataBuffer dataBuffer : dataBuffers) {         Assert.isInstanceOf(NettyDataBuffer.class, dataBuffer).         composite.addComponent(true, ((NettyDataBuffer) dataBuffer).getNativeBuffer()).     }     return new NettyDataBuffer(composite, this). }
true;public,static;1;8;/**  * Return the given Netty {@link DataBuffer} as a {@link ByteBuf}.  * <p>Returns the {@linkplain NettyDataBuffer#getNativeBuffer() native buffer}  * if {@code buffer} is a {@link NettyDataBuffer}. returns  * {@link Unpooled#wrappedBuffer(ByteBuffer)} otherwise.  * @param buffer the {@code DataBuffer} to return a {@code ByteBuf} for  * @return the netty {@code ByteBuf}  */ ;/**  * Return the given Netty {@link DataBuffer} as a {@link ByteBuf}.  * <p>Returns the {@linkplain NettyDataBuffer#getNativeBuffer() native buffer}  * if {@code buffer} is a {@link NettyDataBuffer}. returns  * {@link Unpooled#wrappedBuffer(ByteBuffer)} otherwise.  * @param buffer the {@code DataBuffer} to return a {@code ByteBuf} for  * @return the netty {@code ByteBuf}  */ public static ByteBuf toByteBuf(DataBuffer buffer) {     if (buffer instanceof NettyDataBuffer) {         return ((NettyDataBuffer) buffer).getNativeBuffer().     } else {         return Unpooled.wrappedBuffer(buffer.asByteBuffer()).     } }
false;public;0;4;;@Override public String toString() {     return "NettyDataBufferFactory (" + this.byteBufAllocator + ")". }
