# id;timestamp;commentText;codeText;commentWords;codeWords
MethodWriter -> private void addSuccessorToCurrentBasicBlock(final int info, final Label successor);1531241461;Adds a successor to {@link #currentBasicBlock} in the control flow graph.__@param info information about the control flow edge to be added._@param successor the successor block to be added to the current basic block.;private void addSuccessorToCurrentBasicBlock(final int info, final Label successor) {_    currentBasicBlock.outgoingEdges = new Edge(info, successor, currentBasicBlock.outgoingEdges)__  };adds,a,successor,to,link,current,basic,block,in,the,control,flow,graph,param,info,information,about,the,control,flow,edge,to,be,added,param,successor,the,successor,block,to,be,added,to,the,current,basic,block;private,void,add,successor,to,current,basic,block,final,int,info,final,label,successor,current,basic,block,outgoing,edges,new,edge,info,successor,current,basic,block,outgoing,edges
MethodWriter -> private void addSuccessorToCurrentBasicBlock(final int info, final Label successor);1536664245;Adds a successor to {@link #currentBasicBlock} in the control flow graph.__@param info information about the control flow edge to be added._@param successor the successor block to be added to the current basic block.;private void addSuccessorToCurrentBasicBlock(final int info, final Label successor) {_    currentBasicBlock.outgoingEdges = new Edge(info, successor, currentBasicBlock.outgoingEdges)__  };adds,a,successor,to,link,current,basic,block,in,the,control,flow,graph,param,info,information,about,the,control,flow,edge,to,be,added,param,successor,the,successor,block,to,be,added,to,the,current,basic,block;private,void,add,successor,to,current,basic,block,final,int,info,final,label,successor,current,basic,block,outgoing,edges,new,edge,info,successor,current,basic,block,outgoing,edges
MethodWriter -> private void addSuccessorToCurrentBasicBlock(final int info, final Label successor);1537204147;Adds a successor to {@link #currentBasicBlock} in the control flow graph.__@param info information about the control flow edge to be added._@param successor the successor block to be added to the current basic block.;private void addSuccessorToCurrentBasicBlock(final int info, final Label successor) {_    currentBasicBlock.outgoingEdges = new Edge(info, successor, currentBasicBlock.outgoingEdges)__  };adds,a,successor,to,link,current,basic,block,in,the,control,flow,graph,param,info,information,about,the,control,flow,edge,to,be,added,param,successor,the,successor,block,to,be,added,to,the,current,basic,block;private,void,add,successor,to,current,basic,block,final,int,info,final,label,successor,current,basic,block,outgoing,edges,new,edge,info,successor,current,basic,block,outgoing,edges
MethodWriter -> private void addSuccessorToCurrentBasicBlock(final int info, final Label successor);1539119582;Adds a successor to {@link #currentBasicBlock} in the control flow graph.__@param info information about the control flow edge to be added._@param successor the successor block to be added to the current basic block.;private void addSuccessorToCurrentBasicBlock(final int info, final Label successor) {_    currentBasicBlock.outgoingEdges = new Edge(info, successor, currentBasicBlock.outgoingEdges)__  };adds,a,successor,to,link,current,basic,block,in,the,control,flow,graph,param,info,information,about,the,control,flow,edge,to,be,added,param,successor,the,successor,block,to,be,added,to,the,current,basic,block;private,void,add,successor,to,current,basic,block,final,int,info,final,label,successor,current,basic,block,outgoing,edges,new,edge,info,successor,current,basic,block,outgoing,edges
MethodWriter -> void putMethodInfo(final ByteVector output);1531241461;Puts the content of the method_info JVMS structure generated by this MethodWriter into the_given ByteVector.__@param output where the method_info structure must be put.;void putMethodInfo(final ByteVector output) {_    boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5__    int mask = useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0__    output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex)__    _    if (sourceOffset != 0) {_      output.putByteArray(symbolTable.getSource().b, sourceOffset, sourceLength)__      return__    }_    _    int attributeCount = 0__    if (code.length > 0) {_      ++attributeCount__    }_    if (numberOfExceptions > 0) {_      ++attributeCount__    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {_      ++attributeCount__    }_    if (signatureIndex != 0) {_      ++attributeCount__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      ++attributeCount__    }_    if (lastRuntimeVisibleAnnotation != null) {_      ++attributeCount__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      ++attributeCount__    }_    if (lastRuntimeVisibleParameterAnnotations != null) {_      ++attributeCount__    }_    if (lastRuntimeInvisibleParameterAnnotations != null) {_      ++attributeCount__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      ++attributeCount__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      ++attributeCount__    }_    if (defaultValue != null) {_      ++attributeCount__    }_    if (parameters != null) {_      ++attributeCount__    }_    if (firstAttribute != null) {_      attributeCount += firstAttribute.getAttributeCount()__    }_    _    output.putShort(attributeCount)__    if (code.length > 0) {_      _      _      int size = 10 + code.length + Handler.getExceptionTableSize(firstHandler)__      int codeAttributeCount = 0__      if (stackMapTableEntries != null) {_        _        size += 8 + stackMapTableEntries.length__        ++codeAttributeCount__      }_      if (lineNumberTable != null) {_        _        size += 8 + lineNumberTable.length__        ++codeAttributeCount__      }_      if (localVariableTable != null) {_        _        size += 8 + localVariableTable.length__        ++codeAttributeCount__      }_      if (localVariableTypeTable != null) {_        _        size += 8 + localVariableTypeTable.length__        ++codeAttributeCount__      }_      if (lastCodeRuntimeVisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__        ++codeAttributeCount__      }_      if (lastCodeRuntimeInvisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__        ++codeAttributeCount__      }_      if (firstCodeAttribute != null) {_        size +=_            firstCodeAttribute.computeAttributesSize(_                symbolTable, code.data, code.length, maxStack, maxLocals)__        codeAttributeCount += firstCodeAttribute.getAttributeCount()__      }_      output_          .putShort(symbolTable.addConstantUtf8(Constants.CODE))_          .putInt(size)_          .putShort(maxStack)_          .putShort(maxLocals)_          .putInt(code.length)_          .putByteArray(code.data, 0, code.length)__      Handler.putExceptionTable(firstHandler, output)__      output.putShort(codeAttributeCount)__      if (stackMapTableEntries != null) {_        boolean useStackMapTable = symbolTable.getMajorVersion() >= Opcodes.V1_6__        output_            .putShort(_                symbolTable.addConstantUtf8(_                    useStackMapTable ? Constants.STACK_MAP_TABLE : "StackMap"))_            .putInt(2 + stackMapTableEntries.length)_            .putShort(stackMapTableNumberOfEntries)_            .putByteArray(stackMapTableEntries.data, 0, stackMapTableEntries.length)__      }_      if (lineNumberTable != null) {_        output_            .putShort(symbolTable.addConstantUtf8(Constants.LINE_NUMBER_TABLE))_            .putInt(2 + lineNumberTable.length)_            .putShort(lineNumberTableLength)_            .putByteArray(lineNumberTable.data, 0, lineNumberTable.length)__      }_      if (localVariableTable != null) {_        output_            .putShort(symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TABLE))_            .putInt(2 + localVariableTable.length)_            .putShort(localVariableTableLength)_            .putByteArray(localVariableTable.data, 0, localVariableTable.length)__      }_      if (localVariableTypeTable != null) {_        output_            .putShort(symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TYPE_TABLE))_            .putInt(2 + localVariableTypeTable.length)_            .putShort(localVariableTypeTableLength)_            .putByteArray(localVariableTypeTable.data, 0, localVariableTypeTable.length)__      }_      if (lastCodeRuntimeVisibleTypeAnnotation != null) {_        lastCodeRuntimeVisibleTypeAnnotation.putAnnotations(_            symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output)__      }_      if (lastCodeRuntimeInvisibleTypeAnnotation != null) {_        lastCodeRuntimeInvisibleTypeAnnotation.putAnnotations(_            symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output)__      }_      if (firstCodeAttribute != null) {_        firstCodeAttribute.putAttributes(_            symbolTable, code.data, code.length, maxStack, maxLocals, output)__      }_    }_    if (numberOfExceptions > 0) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.EXCEPTIONS))_          .putInt(2 + 2 * numberOfExceptions)_          .putShort(numberOfExceptions)__      for (int exceptionIndex : exceptionIndexTable) {_        output.putShort(exceptionIndex)__      }_    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {_      output.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0)__    }_    if (signatureIndex != 0) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE))_          .putInt(2)_          .putShort(signatureIndex)__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      output.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0)__    }_    if (lastRuntimeVisibleAnnotation != null) {_      lastRuntimeVisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), output)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      lastRuntimeInvisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), output)__    }_    if (lastRuntimeVisibleParameterAnnotations != null) {_      AnnotationWriter.putParameterAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS),_          lastRuntimeVisibleParameterAnnotations,_          visibleAnnotableParameterCount == 0_              ? lastRuntimeVisibleParameterAnnotations.length_              : visibleAnnotableParameterCount,_          output)__    }_    if (lastRuntimeInvisibleParameterAnnotations != null) {_      AnnotationWriter.putParameterAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS),_          lastRuntimeInvisibleParameterAnnotations,_          invisibleAnnotableParameterCount == 0_              ? lastRuntimeInvisibleParameterAnnotations.length_              : invisibleAnnotableParameterCount,_          output)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      lastRuntimeVisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      lastRuntimeInvisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output)__    }_    if (defaultValue != null) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.ANNOTATION_DEFAULT))_          .putInt(defaultValue.length)_          .putByteArray(defaultValue.data, 0, defaultValue.length)__    }_    if (parameters != null) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.METHOD_PARAMETERS))_          .putInt(1 + parameters.length)_          .putByte(parametersCount)_          .putByteArray(parameters.data, 0, parameters.length)__    }_    if (firstAttribute != null) {_      firstAttribute.putAttributes(symbolTable, output)__    }_  };puts,the,content,of,the,jvms,structure,generated,by,this,method,writer,into,the,given,byte,vector,param,output,where,the,structure,must,be,put;void,put,method,info,final,byte,vector,output,boolean,use,synthetic,attribute,symbol,table,get,major,version,opcodes,int,mask,use,synthetic,attribute,opcodes,0,output,put,short,access,flags,mask,put,short,name,index,put,short,descriptor,index,if,source,offset,0,output,put,byte,array,symbol,table,get,source,b,source,offset,source,length,return,int,attribute,count,0,if,code,length,0,attribute,count,if,number,of,exceptions,0,attribute,count,if,access,flags,opcodes,0,use,synthetic,attribute,attribute,count,if,signature,index,0,attribute,count,if,access,flags,opcodes,0,attribute,count,if,last,runtime,visible,annotation,null,attribute,count,if,last,runtime,invisible,annotation,null,attribute,count,if,last,runtime,visible,parameter,annotations,null,attribute,count,if,last,runtime,invisible,parameter,annotations,null,attribute,count,if,last,runtime,visible,type,annotation,null,attribute,count,if,last,runtime,invisible,type,annotation,null,attribute,count,if,default,value,null,attribute,count,if,parameters,null,attribute,count,if,first,attribute,null,attribute,count,first,attribute,get,attribute,count,output,put,short,attribute,count,if,code,length,0,int,size,10,code,length,handler,get,exception,table,size,first,handler,int,code,attribute,count,0,if,stack,map,table,entries,null,size,8,stack,map,table,entries,length,code,attribute,count,if,line,number,table,null,size,8,line,number,table,length,code,attribute,count,if,local,variable,table,null,size,8,local,variable,table,length,code,attribute,count,if,local,variable,type,table,null,size,8,local,variable,type,table,length,code,attribute,count,if,last,code,runtime,visible,type,annotation,null,size,last,code,runtime,visible,type,annotation,compute,annotations,size,constants,code,attribute,count,if,last,code,runtime,invisible,type,annotation,null,size,last,code,runtime,invisible,type,annotation,compute,annotations,size,constants,code,attribute,count,if,first,code,attribute,null,size,first,code,attribute,compute,attributes,size,symbol,table,code,data,code,length,max,stack,max,locals,code,attribute,count,first,code,attribute,get,attribute,count,output,put,short,symbol,table,add,constant,utf8,constants,code,put,int,size,put,short,max,stack,put,short,max,locals,put,int,code,length,put,byte,array,code,data,0,code,length,handler,put,exception,table,first,handler,output,output,put,short,code,attribute,count,if,stack,map,table,entries,null,boolean,use,stack,map,table,symbol,table,get,major,version,opcodes,output,put,short,symbol,table,add,constant,utf8,use,stack,map,table,constants,stack,map,put,int,2,stack,map,table,entries,length,put,short,stack,map,table,number,of,entries,put,byte,array,stack,map,table,entries,data,0,stack,map,table,entries,length,if,line,number,table,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,line,number,table,length,put,short,line,number,table,length,put,byte,array,line,number,table,data,0,line,number,table,length,if,local,variable,table,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,local,variable,table,length,put,short,local,variable,table,length,put,byte,array,local,variable,table,data,0,local,variable,table,length,if,local,variable,type,table,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,local,variable,type,table,length,put,short,local,variable,type,table,length,put,byte,array,local,variable,type,table,data,0,local,variable,type,table,length,if,last,code,runtime,visible,type,annotation,null,last,code,runtime,visible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,code,runtime,invisible,type,annotation,null,last,code,runtime,invisible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,first,code,attribute,null,first,code,attribute,put,attributes,symbol,table,code,data,code,length,max,stack,max,locals,output,if,number,of,exceptions,0,output,put,short,symbol,table,add,constant,utf8,constants,exceptions,put,int,2,2,number,of,exceptions,put,short,number,of,exceptions,for,int,exception,index,exception,index,table,output,put,short,exception,index,if,access,flags,opcodes,0,use,synthetic,attribute,output,put,short,symbol,table,add,constant,utf8,constants,synthetic,put,int,0,if,signature,index,0,output,put,short,symbol,table,add,constant,utf8,constants,signature,put,int,2,put,short,signature,index,if,access,flags,opcodes,0,output,put,short,symbol,table,add,constant,utf8,constants,deprecated,put,int,0,if,last,runtime,visible,annotation,null,last,runtime,visible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,runtime,invisible,annotation,null,last,runtime,invisible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,runtime,visible,parameter,annotations,null,annotation,writer,put,parameter,annotations,symbol,table,add,constant,utf8,constants,last,runtime,visible,parameter,annotations,visible,annotable,parameter,count,0,last,runtime,visible,parameter,annotations,length,visible,annotable,parameter,count,output,if,last,runtime,invisible,parameter,annotations,null,annotation,writer,put,parameter,annotations,symbol,table,add,constant,utf8,constants,last,runtime,invisible,parameter,annotations,invisible,annotable,parameter,count,0,last,runtime,invisible,parameter,annotations,length,invisible,annotable,parameter,count,output,if,last,runtime,visible,type,annotation,null,last,runtime,visible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,runtime,invisible,type,annotation,null,last,runtime,invisible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,default,value,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,default,value,length,put,byte,array,default,value,data,0,default,value,length,if,parameters,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,1,parameters,length,put,byte,parameters,count,put,byte,array,parameters,data,0,parameters,length,if,first,attribute,null,first,attribute,put,attributes,symbol,table,output
MethodWriter -> void putMethodInfo(final ByteVector output);1536664245;Puts the content of the method_info JVMS structure generated by this MethodWriter into the_given ByteVector.__@param output where the method_info structure must be put.;void putMethodInfo(final ByteVector output) {_    boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5__    int mask = useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0__    output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex)__    _    if (sourceOffset != 0) {_      output.putByteArray(symbolTable.getSource().b, sourceOffset, sourceLength)__      return__    }_    _    int attributeCount = 0__    if (code.length > 0) {_      ++attributeCount__    }_    if (numberOfExceptions > 0) {_      ++attributeCount__    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {_      ++attributeCount__    }_    if (signatureIndex != 0) {_      ++attributeCount__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      ++attributeCount__    }_    if (lastRuntimeVisibleAnnotation != null) {_      ++attributeCount__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      ++attributeCount__    }_    if (lastRuntimeVisibleParameterAnnotations != null) {_      ++attributeCount__    }_    if (lastRuntimeInvisibleParameterAnnotations != null) {_      ++attributeCount__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      ++attributeCount__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      ++attributeCount__    }_    if (defaultValue != null) {_      ++attributeCount__    }_    if (parameters != null) {_      ++attributeCount__    }_    if (firstAttribute != null) {_      attributeCount += firstAttribute.getAttributeCount()__    }_    _    output.putShort(attributeCount)__    if (code.length > 0) {_      _      _      int size = 10 + code.length + Handler.getExceptionTableSize(firstHandler)__      int codeAttributeCount = 0__      if (stackMapTableEntries != null) {_        _        size += 8 + stackMapTableEntries.length__        ++codeAttributeCount__      }_      if (lineNumberTable != null) {_        _        size += 8 + lineNumberTable.length__        ++codeAttributeCount__      }_      if (localVariableTable != null) {_        _        size += 8 + localVariableTable.length__        ++codeAttributeCount__      }_      if (localVariableTypeTable != null) {_        _        size += 8 + localVariableTypeTable.length__        ++codeAttributeCount__      }_      if (lastCodeRuntimeVisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__        ++codeAttributeCount__      }_      if (lastCodeRuntimeInvisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__        ++codeAttributeCount__      }_      if (firstCodeAttribute != null) {_        size +=_            firstCodeAttribute.computeAttributesSize(_                symbolTable, code.data, code.length, maxStack, maxLocals)__        codeAttributeCount += firstCodeAttribute.getAttributeCount()__      }_      output_          .putShort(symbolTable.addConstantUtf8(Constants.CODE))_          .putInt(size)_          .putShort(maxStack)_          .putShort(maxLocals)_          .putInt(code.length)_          .putByteArray(code.data, 0, code.length)__      Handler.putExceptionTable(firstHandler, output)__      output.putShort(codeAttributeCount)__      if (stackMapTableEntries != null) {_        boolean useStackMapTable = symbolTable.getMajorVersion() >= Opcodes.V1_6__        output_            .putShort(_                symbolTable.addConstantUtf8(_                    useStackMapTable ? Constants.STACK_MAP_TABLE : "StackMap"))_            .putInt(2 + stackMapTableEntries.length)_            .putShort(stackMapTableNumberOfEntries)_            .putByteArray(stackMapTableEntries.data, 0, stackMapTableEntries.length)__      }_      if (lineNumberTable != null) {_        output_            .putShort(symbolTable.addConstantUtf8(Constants.LINE_NUMBER_TABLE))_            .putInt(2 + lineNumberTable.length)_            .putShort(lineNumberTableLength)_            .putByteArray(lineNumberTable.data, 0, lineNumberTable.length)__      }_      if (localVariableTable != null) {_        output_            .putShort(symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TABLE))_            .putInt(2 + localVariableTable.length)_            .putShort(localVariableTableLength)_            .putByteArray(localVariableTable.data, 0, localVariableTable.length)__      }_      if (localVariableTypeTable != null) {_        output_            .putShort(symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TYPE_TABLE))_            .putInt(2 + localVariableTypeTable.length)_            .putShort(localVariableTypeTableLength)_            .putByteArray(localVariableTypeTable.data, 0, localVariableTypeTable.length)__      }_      if (lastCodeRuntimeVisibleTypeAnnotation != null) {_        lastCodeRuntimeVisibleTypeAnnotation.putAnnotations(_            symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output)__      }_      if (lastCodeRuntimeInvisibleTypeAnnotation != null) {_        lastCodeRuntimeInvisibleTypeAnnotation.putAnnotations(_            symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output)__      }_      if (firstCodeAttribute != null) {_        firstCodeAttribute.putAttributes(_            symbolTable, code.data, code.length, maxStack, maxLocals, output)__      }_    }_    if (numberOfExceptions > 0) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.EXCEPTIONS))_          .putInt(2 + 2 * numberOfExceptions)_          .putShort(numberOfExceptions)__      for (int exceptionIndex : exceptionIndexTable) {_        output.putShort(exceptionIndex)__      }_    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {_      output.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0)__    }_    if (signatureIndex != 0) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE))_          .putInt(2)_          .putShort(signatureIndex)__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      output.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0)__    }_    if (lastRuntimeVisibleAnnotation != null) {_      lastRuntimeVisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), output)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      lastRuntimeInvisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), output)__    }_    if (lastRuntimeVisibleParameterAnnotations != null) {_      AnnotationWriter.putParameterAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS),_          lastRuntimeVisibleParameterAnnotations,_          visibleAnnotableParameterCount == 0_              ? lastRuntimeVisibleParameterAnnotations.length_              : visibleAnnotableParameterCount,_          output)__    }_    if (lastRuntimeInvisibleParameterAnnotations != null) {_      AnnotationWriter.putParameterAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS),_          lastRuntimeInvisibleParameterAnnotations,_          invisibleAnnotableParameterCount == 0_              ? lastRuntimeInvisibleParameterAnnotations.length_              : invisibleAnnotableParameterCount,_          output)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      lastRuntimeVisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      lastRuntimeInvisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output)__    }_    if (defaultValue != null) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.ANNOTATION_DEFAULT))_          .putInt(defaultValue.length)_          .putByteArray(defaultValue.data, 0, defaultValue.length)__    }_    if (parameters != null) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.METHOD_PARAMETERS))_          .putInt(1 + parameters.length)_          .putByte(parametersCount)_          .putByteArray(parameters.data, 0, parameters.length)__    }_    if (firstAttribute != null) {_      firstAttribute.putAttributes(symbolTable, output)__    }_  };puts,the,content,of,the,jvms,structure,generated,by,this,method,writer,into,the,given,byte,vector,param,output,where,the,structure,must,be,put;void,put,method,info,final,byte,vector,output,boolean,use,synthetic,attribute,symbol,table,get,major,version,opcodes,int,mask,use,synthetic,attribute,opcodes,0,output,put,short,access,flags,mask,put,short,name,index,put,short,descriptor,index,if,source,offset,0,output,put,byte,array,symbol,table,get,source,b,source,offset,source,length,return,int,attribute,count,0,if,code,length,0,attribute,count,if,number,of,exceptions,0,attribute,count,if,access,flags,opcodes,0,use,synthetic,attribute,attribute,count,if,signature,index,0,attribute,count,if,access,flags,opcodes,0,attribute,count,if,last,runtime,visible,annotation,null,attribute,count,if,last,runtime,invisible,annotation,null,attribute,count,if,last,runtime,visible,parameter,annotations,null,attribute,count,if,last,runtime,invisible,parameter,annotations,null,attribute,count,if,last,runtime,visible,type,annotation,null,attribute,count,if,last,runtime,invisible,type,annotation,null,attribute,count,if,default,value,null,attribute,count,if,parameters,null,attribute,count,if,first,attribute,null,attribute,count,first,attribute,get,attribute,count,output,put,short,attribute,count,if,code,length,0,int,size,10,code,length,handler,get,exception,table,size,first,handler,int,code,attribute,count,0,if,stack,map,table,entries,null,size,8,stack,map,table,entries,length,code,attribute,count,if,line,number,table,null,size,8,line,number,table,length,code,attribute,count,if,local,variable,table,null,size,8,local,variable,table,length,code,attribute,count,if,local,variable,type,table,null,size,8,local,variable,type,table,length,code,attribute,count,if,last,code,runtime,visible,type,annotation,null,size,last,code,runtime,visible,type,annotation,compute,annotations,size,constants,code,attribute,count,if,last,code,runtime,invisible,type,annotation,null,size,last,code,runtime,invisible,type,annotation,compute,annotations,size,constants,code,attribute,count,if,first,code,attribute,null,size,first,code,attribute,compute,attributes,size,symbol,table,code,data,code,length,max,stack,max,locals,code,attribute,count,first,code,attribute,get,attribute,count,output,put,short,symbol,table,add,constant,utf8,constants,code,put,int,size,put,short,max,stack,put,short,max,locals,put,int,code,length,put,byte,array,code,data,0,code,length,handler,put,exception,table,first,handler,output,output,put,short,code,attribute,count,if,stack,map,table,entries,null,boolean,use,stack,map,table,symbol,table,get,major,version,opcodes,output,put,short,symbol,table,add,constant,utf8,use,stack,map,table,constants,stack,map,put,int,2,stack,map,table,entries,length,put,short,stack,map,table,number,of,entries,put,byte,array,stack,map,table,entries,data,0,stack,map,table,entries,length,if,line,number,table,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,line,number,table,length,put,short,line,number,table,length,put,byte,array,line,number,table,data,0,line,number,table,length,if,local,variable,table,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,local,variable,table,length,put,short,local,variable,table,length,put,byte,array,local,variable,table,data,0,local,variable,table,length,if,local,variable,type,table,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,local,variable,type,table,length,put,short,local,variable,type,table,length,put,byte,array,local,variable,type,table,data,0,local,variable,type,table,length,if,last,code,runtime,visible,type,annotation,null,last,code,runtime,visible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,code,runtime,invisible,type,annotation,null,last,code,runtime,invisible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,first,code,attribute,null,first,code,attribute,put,attributes,symbol,table,code,data,code,length,max,stack,max,locals,output,if,number,of,exceptions,0,output,put,short,symbol,table,add,constant,utf8,constants,exceptions,put,int,2,2,number,of,exceptions,put,short,number,of,exceptions,for,int,exception,index,exception,index,table,output,put,short,exception,index,if,access,flags,opcodes,0,use,synthetic,attribute,output,put,short,symbol,table,add,constant,utf8,constants,synthetic,put,int,0,if,signature,index,0,output,put,short,symbol,table,add,constant,utf8,constants,signature,put,int,2,put,short,signature,index,if,access,flags,opcodes,0,output,put,short,symbol,table,add,constant,utf8,constants,deprecated,put,int,0,if,last,runtime,visible,annotation,null,last,runtime,visible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,runtime,invisible,annotation,null,last,runtime,invisible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,runtime,visible,parameter,annotations,null,annotation,writer,put,parameter,annotations,symbol,table,add,constant,utf8,constants,last,runtime,visible,parameter,annotations,visible,annotable,parameter,count,0,last,runtime,visible,parameter,annotations,length,visible,annotable,parameter,count,output,if,last,runtime,invisible,parameter,annotations,null,annotation,writer,put,parameter,annotations,symbol,table,add,constant,utf8,constants,last,runtime,invisible,parameter,annotations,invisible,annotable,parameter,count,0,last,runtime,invisible,parameter,annotations,length,invisible,annotable,parameter,count,output,if,last,runtime,visible,type,annotation,null,last,runtime,visible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,runtime,invisible,type,annotation,null,last,runtime,invisible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,default,value,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,default,value,length,put,byte,array,default,value,data,0,default,value,length,if,parameters,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,1,parameters,length,put,byte,parameters,count,put,byte,array,parameters,data,0,parameters,length,if,first,attribute,null,first,attribute,put,attributes,symbol,table,output
MethodWriter -> void putMethodInfo(final ByteVector output);1537204147;Puts the content of the method_info JVMS structure generated by this MethodWriter into the_given ByteVector.__@param output where the method_info structure must be put.;void putMethodInfo(final ByteVector output) {_    boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5__    int mask = useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0__    output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex)__    _    if (sourceOffset != 0) {_      output.putByteArray(symbolTable.getSource().b, sourceOffset, sourceLength)__      return__    }_    _    int attributeCount = 0__    if (code.length > 0) {_      ++attributeCount__    }_    if (numberOfExceptions > 0) {_      ++attributeCount__    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {_      ++attributeCount__    }_    if (signatureIndex != 0) {_      ++attributeCount__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      ++attributeCount__    }_    if (lastRuntimeVisibleAnnotation != null) {_      ++attributeCount__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      ++attributeCount__    }_    if (lastRuntimeVisibleParameterAnnotations != null) {_      ++attributeCount__    }_    if (lastRuntimeInvisibleParameterAnnotations != null) {_      ++attributeCount__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      ++attributeCount__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      ++attributeCount__    }_    if (defaultValue != null) {_      ++attributeCount__    }_    if (parameters != null) {_      ++attributeCount__    }_    if (firstAttribute != null) {_      attributeCount += firstAttribute.getAttributeCount()__    }_    _    output.putShort(attributeCount)__    if (code.length > 0) {_      _      _      int size = 10 + code.length + Handler.getExceptionTableSize(firstHandler)__      int codeAttributeCount = 0__      if (stackMapTableEntries != null) {_        _        size += 8 + stackMapTableEntries.length__        ++codeAttributeCount__      }_      if (lineNumberTable != null) {_        _        size += 8 + lineNumberTable.length__        ++codeAttributeCount__      }_      if (localVariableTable != null) {_        _        size += 8 + localVariableTable.length__        ++codeAttributeCount__      }_      if (localVariableTypeTable != null) {_        _        size += 8 + localVariableTypeTable.length__        ++codeAttributeCount__      }_      if (lastCodeRuntimeVisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__        ++codeAttributeCount__      }_      if (lastCodeRuntimeInvisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__        ++codeAttributeCount__      }_      if (firstCodeAttribute != null) {_        size +=_            firstCodeAttribute.computeAttributesSize(_                symbolTable, code.data, code.length, maxStack, maxLocals)__        codeAttributeCount += firstCodeAttribute.getAttributeCount()__      }_      output_          .putShort(symbolTable.addConstantUtf8(Constants.CODE))_          .putInt(size)_          .putShort(maxStack)_          .putShort(maxLocals)_          .putInt(code.length)_          .putByteArray(code.data, 0, code.length)__      Handler.putExceptionTable(firstHandler, output)__      output.putShort(codeAttributeCount)__      if (stackMapTableEntries != null) {_        boolean useStackMapTable = symbolTable.getMajorVersion() >= Opcodes.V1_6__        output_            .putShort(_                symbolTable.addConstantUtf8(_                    useStackMapTable ? Constants.STACK_MAP_TABLE : "StackMap"))_            .putInt(2 + stackMapTableEntries.length)_            .putShort(stackMapTableNumberOfEntries)_            .putByteArray(stackMapTableEntries.data, 0, stackMapTableEntries.length)__      }_      if (lineNumberTable != null) {_        output_            .putShort(symbolTable.addConstantUtf8(Constants.LINE_NUMBER_TABLE))_            .putInt(2 + lineNumberTable.length)_            .putShort(lineNumberTableLength)_            .putByteArray(lineNumberTable.data, 0, lineNumberTable.length)__      }_      if (localVariableTable != null) {_        output_            .putShort(symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TABLE))_            .putInt(2 + localVariableTable.length)_            .putShort(localVariableTableLength)_            .putByteArray(localVariableTable.data, 0, localVariableTable.length)__      }_      if (localVariableTypeTable != null) {_        output_            .putShort(symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TYPE_TABLE))_            .putInt(2 + localVariableTypeTable.length)_            .putShort(localVariableTypeTableLength)_            .putByteArray(localVariableTypeTable.data, 0, localVariableTypeTable.length)__      }_      if (lastCodeRuntimeVisibleTypeAnnotation != null) {_        lastCodeRuntimeVisibleTypeAnnotation.putAnnotations(_            symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output)__      }_      if (lastCodeRuntimeInvisibleTypeAnnotation != null) {_        lastCodeRuntimeInvisibleTypeAnnotation.putAnnotations(_            symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output)__      }_      if (firstCodeAttribute != null) {_        firstCodeAttribute.putAttributes(_            symbolTable, code.data, code.length, maxStack, maxLocals, output)__      }_    }_    if (numberOfExceptions > 0) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.EXCEPTIONS))_          .putInt(2 + 2 * numberOfExceptions)_          .putShort(numberOfExceptions)__      for (int exceptionIndex : exceptionIndexTable) {_        output.putShort(exceptionIndex)__      }_    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {_      output.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0)__    }_    if (signatureIndex != 0) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE))_          .putInt(2)_          .putShort(signatureIndex)__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      output.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0)__    }_    if (lastRuntimeVisibleAnnotation != null) {_      lastRuntimeVisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), output)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      lastRuntimeInvisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), output)__    }_    if (lastRuntimeVisibleParameterAnnotations != null) {_      AnnotationWriter.putParameterAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS),_          lastRuntimeVisibleParameterAnnotations,_          visibleAnnotableParameterCount == 0_              ? lastRuntimeVisibleParameterAnnotations.length_              : visibleAnnotableParameterCount,_          output)__    }_    if (lastRuntimeInvisibleParameterAnnotations != null) {_      AnnotationWriter.putParameterAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS),_          lastRuntimeInvisibleParameterAnnotations,_          invisibleAnnotableParameterCount == 0_              ? lastRuntimeInvisibleParameterAnnotations.length_              : invisibleAnnotableParameterCount,_          output)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      lastRuntimeVisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      lastRuntimeInvisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output)__    }_    if (defaultValue != null) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.ANNOTATION_DEFAULT))_          .putInt(defaultValue.length)_          .putByteArray(defaultValue.data, 0, defaultValue.length)__    }_    if (parameters != null) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.METHOD_PARAMETERS))_          .putInt(1 + parameters.length)_          .putByte(parametersCount)_          .putByteArray(parameters.data, 0, parameters.length)__    }_    if (firstAttribute != null) {_      firstAttribute.putAttributes(symbolTable, output)__    }_  };puts,the,content,of,the,jvms,structure,generated,by,this,method,writer,into,the,given,byte,vector,param,output,where,the,structure,must,be,put;void,put,method,info,final,byte,vector,output,boolean,use,synthetic,attribute,symbol,table,get,major,version,opcodes,int,mask,use,synthetic,attribute,opcodes,0,output,put,short,access,flags,mask,put,short,name,index,put,short,descriptor,index,if,source,offset,0,output,put,byte,array,symbol,table,get,source,b,source,offset,source,length,return,int,attribute,count,0,if,code,length,0,attribute,count,if,number,of,exceptions,0,attribute,count,if,access,flags,opcodes,0,use,synthetic,attribute,attribute,count,if,signature,index,0,attribute,count,if,access,flags,opcodes,0,attribute,count,if,last,runtime,visible,annotation,null,attribute,count,if,last,runtime,invisible,annotation,null,attribute,count,if,last,runtime,visible,parameter,annotations,null,attribute,count,if,last,runtime,invisible,parameter,annotations,null,attribute,count,if,last,runtime,visible,type,annotation,null,attribute,count,if,last,runtime,invisible,type,annotation,null,attribute,count,if,default,value,null,attribute,count,if,parameters,null,attribute,count,if,first,attribute,null,attribute,count,first,attribute,get,attribute,count,output,put,short,attribute,count,if,code,length,0,int,size,10,code,length,handler,get,exception,table,size,first,handler,int,code,attribute,count,0,if,stack,map,table,entries,null,size,8,stack,map,table,entries,length,code,attribute,count,if,line,number,table,null,size,8,line,number,table,length,code,attribute,count,if,local,variable,table,null,size,8,local,variable,table,length,code,attribute,count,if,local,variable,type,table,null,size,8,local,variable,type,table,length,code,attribute,count,if,last,code,runtime,visible,type,annotation,null,size,last,code,runtime,visible,type,annotation,compute,annotations,size,constants,code,attribute,count,if,last,code,runtime,invisible,type,annotation,null,size,last,code,runtime,invisible,type,annotation,compute,annotations,size,constants,code,attribute,count,if,first,code,attribute,null,size,first,code,attribute,compute,attributes,size,symbol,table,code,data,code,length,max,stack,max,locals,code,attribute,count,first,code,attribute,get,attribute,count,output,put,short,symbol,table,add,constant,utf8,constants,code,put,int,size,put,short,max,stack,put,short,max,locals,put,int,code,length,put,byte,array,code,data,0,code,length,handler,put,exception,table,first,handler,output,output,put,short,code,attribute,count,if,stack,map,table,entries,null,boolean,use,stack,map,table,symbol,table,get,major,version,opcodes,output,put,short,symbol,table,add,constant,utf8,use,stack,map,table,constants,stack,map,put,int,2,stack,map,table,entries,length,put,short,stack,map,table,number,of,entries,put,byte,array,stack,map,table,entries,data,0,stack,map,table,entries,length,if,line,number,table,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,line,number,table,length,put,short,line,number,table,length,put,byte,array,line,number,table,data,0,line,number,table,length,if,local,variable,table,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,local,variable,table,length,put,short,local,variable,table,length,put,byte,array,local,variable,table,data,0,local,variable,table,length,if,local,variable,type,table,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,local,variable,type,table,length,put,short,local,variable,type,table,length,put,byte,array,local,variable,type,table,data,0,local,variable,type,table,length,if,last,code,runtime,visible,type,annotation,null,last,code,runtime,visible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,code,runtime,invisible,type,annotation,null,last,code,runtime,invisible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,first,code,attribute,null,first,code,attribute,put,attributes,symbol,table,code,data,code,length,max,stack,max,locals,output,if,number,of,exceptions,0,output,put,short,symbol,table,add,constant,utf8,constants,exceptions,put,int,2,2,number,of,exceptions,put,short,number,of,exceptions,for,int,exception,index,exception,index,table,output,put,short,exception,index,if,access,flags,opcodes,0,use,synthetic,attribute,output,put,short,symbol,table,add,constant,utf8,constants,synthetic,put,int,0,if,signature,index,0,output,put,short,symbol,table,add,constant,utf8,constants,signature,put,int,2,put,short,signature,index,if,access,flags,opcodes,0,output,put,short,symbol,table,add,constant,utf8,constants,deprecated,put,int,0,if,last,runtime,visible,annotation,null,last,runtime,visible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,runtime,invisible,annotation,null,last,runtime,invisible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,runtime,visible,parameter,annotations,null,annotation,writer,put,parameter,annotations,symbol,table,add,constant,utf8,constants,last,runtime,visible,parameter,annotations,visible,annotable,parameter,count,0,last,runtime,visible,parameter,annotations,length,visible,annotable,parameter,count,output,if,last,runtime,invisible,parameter,annotations,null,annotation,writer,put,parameter,annotations,symbol,table,add,constant,utf8,constants,last,runtime,invisible,parameter,annotations,invisible,annotable,parameter,count,0,last,runtime,invisible,parameter,annotations,length,invisible,annotable,parameter,count,output,if,last,runtime,visible,type,annotation,null,last,runtime,visible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,runtime,invisible,type,annotation,null,last,runtime,invisible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,default,value,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,default,value,length,put,byte,array,default,value,data,0,default,value,length,if,parameters,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,1,parameters,length,put,byte,parameters,count,put,byte,array,parameters,data,0,parameters,length,if,first,attribute,null,first,attribute,put,attributes,symbol,table,output
MethodWriter -> void putMethodInfo(final ByteVector output);1539119582;Puts the content of the method_info JVMS structure generated by this MethodWriter into the_given ByteVector.__@param output where the method_info structure must be put.;void putMethodInfo(final ByteVector output) {_    boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5__    int mask = useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0__    output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex)__    _    if (sourceOffset != 0) {_      output.putByteArray(symbolTable.getSource().b, sourceOffset, sourceLength)__      return__    }_    _    int attributeCount = 0__    if (code.length > 0) {_      ++attributeCount__    }_    if (numberOfExceptions > 0) {_      ++attributeCount__    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {_      ++attributeCount__    }_    if (signatureIndex != 0) {_      ++attributeCount__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      ++attributeCount__    }_    if (lastRuntimeVisibleAnnotation != null) {_      ++attributeCount__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      ++attributeCount__    }_    if (lastRuntimeVisibleParameterAnnotations != null) {_      ++attributeCount__    }_    if (lastRuntimeInvisibleParameterAnnotations != null) {_      ++attributeCount__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      ++attributeCount__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      ++attributeCount__    }_    if (defaultValue != null) {_      ++attributeCount__    }_    if (parameters != null) {_      ++attributeCount__    }_    if (firstAttribute != null) {_      attributeCount += firstAttribute.getAttributeCount()__    }_    _    output.putShort(attributeCount)__    if (code.length > 0) {_      _      _      int size = 10 + code.length + Handler.getExceptionTableSize(firstHandler)__      int codeAttributeCount = 0__      if (stackMapTableEntries != null) {_        _        size += 8 + stackMapTableEntries.length__        ++codeAttributeCount__      }_      if (lineNumberTable != null) {_        _        size += 8 + lineNumberTable.length__        ++codeAttributeCount__      }_      if (localVariableTable != null) {_        _        size += 8 + localVariableTable.length__        ++codeAttributeCount__      }_      if (localVariableTypeTable != null) {_        _        size += 8 + localVariableTypeTable.length__        ++codeAttributeCount__      }_      if (lastCodeRuntimeVisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__        ++codeAttributeCount__      }_      if (lastCodeRuntimeInvisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__        ++codeAttributeCount__      }_      if (firstCodeAttribute != null) {_        size +=_            firstCodeAttribute.computeAttributesSize(_                symbolTable, code.data, code.length, maxStack, maxLocals)__        codeAttributeCount += firstCodeAttribute.getAttributeCount()__      }_      output_          .putShort(symbolTable.addConstantUtf8(Constants.CODE))_          .putInt(size)_          .putShort(maxStack)_          .putShort(maxLocals)_          .putInt(code.length)_          .putByteArray(code.data, 0, code.length)__      Handler.putExceptionTable(firstHandler, output)__      output.putShort(codeAttributeCount)__      if (stackMapTableEntries != null) {_        boolean useStackMapTable = symbolTable.getMajorVersion() >= Opcodes.V1_6__        output_            .putShort(_                symbolTable.addConstantUtf8(_                    useStackMapTable ? Constants.STACK_MAP_TABLE : "StackMap"))_            .putInt(2 + stackMapTableEntries.length)_            .putShort(stackMapTableNumberOfEntries)_            .putByteArray(stackMapTableEntries.data, 0, stackMapTableEntries.length)__      }_      if (lineNumberTable != null) {_        output_            .putShort(symbolTable.addConstantUtf8(Constants.LINE_NUMBER_TABLE))_            .putInt(2 + lineNumberTable.length)_            .putShort(lineNumberTableLength)_            .putByteArray(lineNumberTable.data, 0, lineNumberTable.length)__      }_      if (localVariableTable != null) {_        output_            .putShort(symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TABLE))_            .putInt(2 + localVariableTable.length)_            .putShort(localVariableTableLength)_            .putByteArray(localVariableTable.data, 0, localVariableTable.length)__      }_      if (localVariableTypeTable != null) {_        output_            .putShort(symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TYPE_TABLE))_            .putInt(2 + localVariableTypeTable.length)_            .putShort(localVariableTypeTableLength)_            .putByteArray(localVariableTypeTable.data, 0, localVariableTypeTable.length)__      }_      if (lastCodeRuntimeVisibleTypeAnnotation != null) {_        lastCodeRuntimeVisibleTypeAnnotation.putAnnotations(_            symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output)__      }_      if (lastCodeRuntimeInvisibleTypeAnnotation != null) {_        lastCodeRuntimeInvisibleTypeAnnotation.putAnnotations(_            symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output)__      }_      if (firstCodeAttribute != null) {_        firstCodeAttribute.putAttributes(_            symbolTable, code.data, code.length, maxStack, maxLocals, output)__      }_    }_    if (numberOfExceptions > 0) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.EXCEPTIONS))_          .putInt(2 + 2 * numberOfExceptions)_          .putShort(numberOfExceptions)__      for (int exceptionIndex : exceptionIndexTable) {_        output.putShort(exceptionIndex)__      }_    }_    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {_      output.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0)__    }_    if (signatureIndex != 0) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE))_          .putInt(2)_          .putShort(signatureIndex)__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      output.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0)__    }_    if (lastRuntimeVisibleAnnotation != null) {_      lastRuntimeVisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), output)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      lastRuntimeInvisibleAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), output)__    }_    if (lastRuntimeVisibleParameterAnnotations != null) {_      AnnotationWriter.putParameterAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS),_          lastRuntimeVisibleParameterAnnotations,_          visibleAnnotableParameterCount == 0_              ? lastRuntimeVisibleParameterAnnotations.length_              : visibleAnnotableParameterCount,_          output)__    }_    if (lastRuntimeInvisibleParameterAnnotations != null) {_      AnnotationWriter.putParameterAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS),_          lastRuntimeInvisibleParameterAnnotations,_          invisibleAnnotableParameterCount == 0_              ? lastRuntimeInvisibleParameterAnnotations.length_              : invisibleAnnotableParameterCount,_          output)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      lastRuntimeVisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      lastRuntimeInvisibleTypeAnnotation.putAnnotations(_          symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output)__    }_    if (defaultValue != null) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.ANNOTATION_DEFAULT))_          .putInt(defaultValue.length)_          .putByteArray(defaultValue.data, 0, defaultValue.length)__    }_    if (parameters != null) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.METHOD_PARAMETERS))_          .putInt(1 + parameters.length)_          .putByte(parametersCount)_          .putByteArray(parameters.data, 0, parameters.length)__    }_    if (firstAttribute != null) {_      firstAttribute.putAttributes(symbolTable, output)__    }_  };puts,the,content,of,the,jvms,structure,generated,by,this,method,writer,into,the,given,byte,vector,param,output,where,the,structure,must,be,put;void,put,method,info,final,byte,vector,output,boolean,use,synthetic,attribute,symbol,table,get,major,version,opcodes,int,mask,use,synthetic,attribute,opcodes,0,output,put,short,access,flags,mask,put,short,name,index,put,short,descriptor,index,if,source,offset,0,output,put,byte,array,symbol,table,get,source,b,source,offset,source,length,return,int,attribute,count,0,if,code,length,0,attribute,count,if,number,of,exceptions,0,attribute,count,if,access,flags,opcodes,0,use,synthetic,attribute,attribute,count,if,signature,index,0,attribute,count,if,access,flags,opcodes,0,attribute,count,if,last,runtime,visible,annotation,null,attribute,count,if,last,runtime,invisible,annotation,null,attribute,count,if,last,runtime,visible,parameter,annotations,null,attribute,count,if,last,runtime,invisible,parameter,annotations,null,attribute,count,if,last,runtime,visible,type,annotation,null,attribute,count,if,last,runtime,invisible,type,annotation,null,attribute,count,if,default,value,null,attribute,count,if,parameters,null,attribute,count,if,first,attribute,null,attribute,count,first,attribute,get,attribute,count,output,put,short,attribute,count,if,code,length,0,int,size,10,code,length,handler,get,exception,table,size,first,handler,int,code,attribute,count,0,if,stack,map,table,entries,null,size,8,stack,map,table,entries,length,code,attribute,count,if,line,number,table,null,size,8,line,number,table,length,code,attribute,count,if,local,variable,table,null,size,8,local,variable,table,length,code,attribute,count,if,local,variable,type,table,null,size,8,local,variable,type,table,length,code,attribute,count,if,last,code,runtime,visible,type,annotation,null,size,last,code,runtime,visible,type,annotation,compute,annotations,size,constants,code,attribute,count,if,last,code,runtime,invisible,type,annotation,null,size,last,code,runtime,invisible,type,annotation,compute,annotations,size,constants,code,attribute,count,if,first,code,attribute,null,size,first,code,attribute,compute,attributes,size,symbol,table,code,data,code,length,max,stack,max,locals,code,attribute,count,first,code,attribute,get,attribute,count,output,put,short,symbol,table,add,constant,utf8,constants,code,put,int,size,put,short,max,stack,put,short,max,locals,put,int,code,length,put,byte,array,code,data,0,code,length,handler,put,exception,table,first,handler,output,output,put,short,code,attribute,count,if,stack,map,table,entries,null,boolean,use,stack,map,table,symbol,table,get,major,version,opcodes,output,put,short,symbol,table,add,constant,utf8,use,stack,map,table,constants,stack,map,put,int,2,stack,map,table,entries,length,put,short,stack,map,table,number,of,entries,put,byte,array,stack,map,table,entries,data,0,stack,map,table,entries,length,if,line,number,table,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,line,number,table,length,put,short,line,number,table,length,put,byte,array,line,number,table,data,0,line,number,table,length,if,local,variable,table,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,local,variable,table,length,put,short,local,variable,table,length,put,byte,array,local,variable,table,data,0,local,variable,table,length,if,local,variable,type,table,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,local,variable,type,table,length,put,short,local,variable,type,table,length,put,byte,array,local,variable,type,table,data,0,local,variable,type,table,length,if,last,code,runtime,visible,type,annotation,null,last,code,runtime,visible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,code,runtime,invisible,type,annotation,null,last,code,runtime,invisible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,first,code,attribute,null,first,code,attribute,put,attributes,symbol,table,code,data,code,length,max,stack,max,locals,output,if,number,of,exceptions,0,output,put,short,symbol,table,add,constant,utf8,constants,exceptions,put,int,2,2,number,of,exceptions,put,short,number,of,exceptions,for,int,exception,index,exception,index,table,output,put,short,exception,index,if,access,flags,opcodes,0,use,synthetic,attribute,output,put,short,symbol,table,add,constant,utf8,constants,synthetic,put,int,0,if,signature,index,0,output,put,short,symbol,table,add,constant,utf8,constants,signature,put,int,2,put,short,signature,index,if,access,flags,opcodes,0,output,put,short,symbol,table,add,constant,utf8,constants,deprecated,put,int,0,if,last,runtime,visible,annotation,null,last,runtime,visible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,runtime,invisible,annotation,null,last,runtime,invisible,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,runtime,visible,parameter,annotations,null,annotation,writer,put,parameter,annotations,symbol,table,add,constant,utf8,constants,last,runtime,visible,parameter,annotations,visible,annotable,parameter,count,0,last,runtime,visible,parameter,annotations,length,visible,annotable,parameter,count,output,if,last,runtime,invisible,parameter,annotations,null,annotation,writer,put,parameter,annotations,symbol,table,add,constant,utf8,constants,last,runtime,invisible,parameter,annotations,invisible,annotable,parameter,count,0,last,runtime,invisible,parameter,annotations,length,invisible,annotable,parameter,count,output,if,last,runtime,visible,type,annotation,null,last,runtime,visible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,last,runtime,invisible,type,annotation,null,last,runtime,invisible,type,annotation,put,annotations,symbol,table,add,constant,utf8,constants,output,if,default,value,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,default,value,length,put,byte,array,default,value,data,0,default,value,length,if,parameters,null,output,put,short,symbol,table,add,constant,utf8,constants,put,int,1,parameters,length,put,byte,parameters,count,put,byte,array,parameters,data,0,parameters,length,if,first,attribute,null,first,attribute,put,attributes,symbol,table,output
MethodWriter -> final void collectAttributePrototypes(final Attribute.Set attributePrototypes);1531241461;Collects the attributes of this method into the given set of attribute prototypes.__@param attributePrototypes a set of attribute prototypes.;final void collectAttributePrototypes(final Attribute.Set attributePrototypes) {_    attributePrototypes.addAttributes(firstAttribute)__    attributePrototypes.addAttributes(firstCodeAttribute)__  };collects,the,attributes,of,this,method,into,the,given,set,of,attribute,prototypes,param,attribute,prototypes,a,set,of,attribute,prototypes;final,void,collect,attribute,prototypes,final,attribute,set,attribute,prototypes,attribute,prototypes,add,attributes,first,attribute,attribute,prototypes,add,attributes,first,code,attribute
MethodWriter -> final void collectAttributePrototypes(final Attribute.Set attributePrototypes);1536664245;Collects the attributes of this method into the given set of attribute prototypes.__@param attributePrototypes a set of attribute prototypes.;final void collectAttributePrototypes(final Attribute.Set attributePrototypes) {_    attributePrototypes.addAttributes(firstAttribute)__    attributePrototypes.addAttributes(firstCodeAttribute)__  };collects,the,attributes,of,this,method,into,the,given,set,of,attribute,prototypes,param,attribute,prototypes,a,set,of,attribute,prototypes;final,void,collect,attribute,prototypes,final,attribute,set,attribute,prototypes,attribute,prototypes,add,attributes,first,attribute,attribute,prototypes,add,attributes,first,code,attribute
MethodWriter -> final void collectAttributePrototypes(final Attribute.Set attributePrototypes);1537204147;Collects the attributes of this method into the given set of attribute prototypes.__@param attributePrototypes a set of attribute prototypes.;final void collectAttributePrototypes(final Attribute.Set attributePrototypes) {_    attributePrototypes.addAttributes(firstAttribute)__    attributePrototypes.addAttributes(firstCodeAttribute)__  };collects,the,attributes,of,this,method,into,the,given,set,of,attribute,prototypes,param,attribute,prototypes,a,set,of,attribute,prototypes;final,void,collect,attribute,prototypes,final,attribute,set,attribute,prototypes,attribute,prototypes,add,attributes,first,attribute,attribute,prototypes,add,attributes,first,code,attribute
MethodWriter -> final void collectAttributePrototypes(final Attribute.Set attributePrototypes);1539119582;Collects the attributes of this method into the given set of attribute prototypes.__@param attributePrototypes a set of attribute prototypes.;final void collectAttributePrototypes(final Attribute.Set attributePrototypes) {_    attributePrototypes.addAttributes(firstAttribute)__    attributePrototypes.addAttributes(firstCodeAttribute)__  };collects,the,attributes,of,this,method,into,the,given,set,of,attribute,prototypes,param,attribute,prototypes,a,set,of,attribute,prototypes;final,void,collect,attribute,prototypes,final,attribute,set,attribute,prototypes,attribute,prototypes,add,attributes,first,attribute,attribute,prototypes,add,attributes,first,code,attribute
MethodWriter -> MethodWriter(final ClassWriter cw, final int access, final String name,             final String desc, final String signature,             final String[] exceptions, final int compute);1483093254;Constructs a new {@link MethodWriter}.__@param cw_the class writer in which the method must be added._@param access_the method's access flags (see {@link Opcodes})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type})._@param signature_the method's signature. May be <tt>null</tt>._@param exceptions_the internal names of the method's exceptions. May be_<tt>null</tt>._@param compute_Indicates what must be automatically computed (see #compute).;MethodWriter(final ClassWriter cw, final int access, final String name,_            final String desc, final String signature,_            final String[] exceptions, final int compute) {_        super(Opcodes.ASM5)__        if (cw.firstMethod == null) {_            cw.firstMethod = this__        } else {_            cw.lastMethod.mv = this__        }_        cw.lastMethod = this__        this.cw = cw__        this.access = access__        if ("<init>".equals(name)) {_            this.access |= ACC_CONSTRUCTOR__        }_        this.name = cw.newUTF8(name)__        this.desc = cw.newUTF8(desc)__        this.descriptor = desc__        if (ClassReader.SIGNATURES) {_            this.signature = signature__        }_        if (exceptions != null && exceptions.length > 0) {_            exceptionCount = exceptions.length__            this.exceptions = new int[exceptionCount]__            for (int i = 0_ i < exceptionCount_ ++i) {_                this.exceptions[i] = cw.newClass(exceptions[i])__            }_        }_        this.compute = compute__        if (compute != NOTHING) {_            _            int size = Type.getArgumentsAndReturnSizes(descriptor) >> 2__            if ((access & Opcodes.ACC_STATIC) != 0) {_                --size__            }_            maxLocals = size__            currentLocals = size__            _            labels = new Label()__            labels.status |= Label.PUSHED__            visitLabel(labels)__        }_    };constructs,a,new,link,method,writer,param,cw,the,class,writer,in,which,the,method,must,be,added,param,access,the,method,s,access,flags,see,link,opcodes,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,tt,null,tt,param,exceptions,the,internal,names,of,the,method,s,exceptions,may,be,tt,null,tt,param,compute,indicates,what,must,be,automatically,computed,see,compute;method,writer,final,class,writer,cw,final,int,access,final,string,name,final,string,desc,final,string,signature,final,string,exceptions,final,int,compute,super,opcodes,asm5,if,cw,first,method,null,cw,first,method,this,else,cw,last,method,mv,this,cw,last,method,this,this,cw,cw,this,access,access,if,init,equals,name,this,access,this,name,cw,new,utf8,name,this,desc,cw,new,utf8,desc,this,descriptor,desc,if,class,reader,signatures,this,signature,signature,if,exceptions,null,exceptions,length,0,exception,count,exceptions,length,this,exceptions,new,int,exception,count,for,int,i,0,i,exception,count,i,this,exceptions,i,cw,new,class,exceptions,i,this,compute,compute,if,compute,nothing,int,size,type,get,arguments,and,return,sizes,descriptor,2,if,access,opcodes,0,size,max,locals,size,current,locals,size,labels,new,label,labels,status,label,pushed,visit,label,labels
MethodWriter -> MethodWriter(final ClassWriter cw, final int access, final String name,             final String desc, final String signature,             final String[] exceptions, final int compute);1505821772;Constructs a new {@link MethodWriter}.__@param cw_the class writer in which the method must be added._@param access_the method's access flags (see {@link Opcodes})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type})._@param signature_the method's signature. May be <tt>null</tt>._@param exceptions_the internal names of the method's exceptions. May be_<tt>null</tt>._@param compute_Indicates what must be automatically computed (see #compute).;MethodWriter(final ClassWriter cw, final int access, final String name,_            final String desc, final String signature,_            final String[] exceptions, final int compute) {_        super(Opcodes.ASM6)__        if (cw.firstMethod == null) {_            cw.firstMethod = this__        } else {_            cw.lastMethod.mv = this__        }_        cw.lastMethod = this__        this.cw = cw__        this.access = access__        if ("<init>".equals(name)) {_            this.access |= ACC_CONSTRUCTOR__        }_        this.name = cw.newUTF8(name)__        this.desc = cw.newUTF8(desc)__        this.descriptor = desc__        if (ClassReader.SIGNATURES) {_            this.signature = signature__        }_        if (exceptions != null && exceptions.length > 0) {_            exceptionCount = exceptions.length__            this.exceptions = new int[exceptionCount]__            for (int i = 0_ i < exceptionCount_ ++i) {_                this.exceptions[i] = cw.newClass(exceptions[i])__            }_        }_        this.compute = compute__        if (compute != NOTHING) {_            _            int size = Type.getArgumentsAndReturnSizes(descriptor) >> 2__            if ((access & Opcodes.ACC_STATIC) != 0) {_                --size__            }_            maxLocals = size__            currentLocals = size__            _            labels = new Label()__            labels.status |= Label.PUSHED__            visitLabel(labels)__        }_    };constructs,a,new,link,method,writer,param,cw,the,class,writer,in,which,the,method,must,be,added,param,access,the,method,s,access,flags,see,link,opcodes,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,tt,null,tt,param,exceptions,the,internal,names,of,the,method,s,exceptions,may,be,tt,null,tt,param,compute,indicates,what,must,be,automatically,computed,see,compute;method,writer,final,class,writer,cw,final,int,access,final,string,name,final,string,desc,final,string,signature,final,string,exceptions,final,int,compute,super,opcodes,asm6,if,cw,first,method,null,cw,first,method,this,else,cw,last,method,mv,this,cw,last,method,this,this,cw,cw,this,access,access,if,init,equals,name,this,access,this,name,cw,new,utf8,name,this,desc,cw,new,utf8,desc,this,descriptor,desc,if,class,reader,signatures,this,signature,signature,if,exceptions,null,exceptions,length,0,exception,count,exceptions,length,this,exceptions,new,int,exception,count,for,int,i,0,i,exception,count,i,this,exceptions,i,cw,new,class,exceptions,i,this,compute,compute,if,compute,nothing,int,size,type,get,arguments,and,return,sizes,descriptor,2,if,access,opcodes,0,size,max,locals,size,current,locals,size,labels,new,label,labels,status,label,pushed,visit,label,labels
MethodWriter -> private void computeAllFrames();1531241461;Computes all the stack map frames of the method, from scratch.;private void computeAllFrames() {_    _    Handler handler = firstHandler__    while (handler != null) {_      String catchTypeDescriptor =_          handler.catchTypeDescriptor == null ? "java/lang/Throwable" : handler.catchTypeDescriptor__      int catchType = Frame.getAbstractTypeFromInternalName(symbolTable, catchTypeDescriptor)__      _      Label handlerBlock = handler.handlerPc.getCanonicalInstance()__      handlerBlock.flags |= Label.FLAG_JUMP_TARGET__      _      Label handlerRangeBlock = handler.startPc.getCanonicalInstance()__      Label handlerRangeEnd = handler.endPc.getCanonicalInstance()__      while (handlerRangeBlock != handlerRangeEnd) {_        handlerRangeBlock.outgoingEdges =_            new Edge(catchType, handlerBlock, handlerRangeBlock.outgoingEdges)__        handlerRangeBlock = handlerRangeBlock.nextBasicBlock__      }_      handler = handler.nextHandler__    }__    _    Frame firstFrame = firstBasicBlock.frame__    firstFrame.setInputFrameFromDescriptor(symbolTable, accessFlags, descriptor, this.maxLocals)__    firstFrame.accept(this)___    _    _    _    _    _    _    Label listOfBlocksToProcess = firstBasicBlock__    listOfBlocksToProcess.nextListElement = Label.EMPTY_LIST__    int maxStackSize = 0__    while (listOfBlocksToProcess != Label.EMPTY_LIST) {_      _      Label basicBlock = listOfBlocksToProcess__      listOfBlocksToProcess = listOfBlocksToProcess.nextListElement__      basicBlock.nextListElement = null__      _      basicBlock.flags |= Label.FLAG_REACHABLE__      _      int maxBlockStackSize = basicBlock.frame.getInputStackSize() + basicBlock.outputStackMax__      if (maxBlockStackSize > maxStackSize) {_        maxStackSize = maxBlockStackSize__      }_      _      Edge outgoingEdge = basicBlock.outgoingEdges__      while (outgoingEdge != null) {_        Label successorBlock = outgoingEdge.successor.getCanonicalInstance()__        boolean successorBlockChanged =_            basicBlock.frame.merge(symbolTable, successorBlock.frame, outgoingEdge.info)__        if (successorBlockChanged && successorBlock.nextListElement == null) {_          _          _          successorBlock.nextListElement = listOfBlocksToProcess__          listOfBlocksToProcess = successorBlock__        }_        outgoingEdge = outgoingEdge.nextEdge__      }_    }__    _    _    _    Label basicBlock = firstBasicBlock__    while (basicBlock != null) {_      if ((basicBlock.flags & (Label.FLAG_JUMP_TARGET | Label.FLAG_REACHABLE))_          == (Label.FLAG_JUMP_TARGET | Label.FLAG_REACHABLE)) {_        basicBlock.frame.accept(this)__      }_      if ((basicBlock.flags & Label.FLAG_REACHABLE) == 0) {_        _        Label nextBasicBlock = basicBlock.nextBasicBlock__        int startOffset = basicBlock.bytecodeOffset__        int endOffset = (nextBasicBlock == null ? code.length : nextBasicBlock.bytecodeOffset) - 1__        if (endOffset >= startOffset) {_          _          for (int i = startOffset_ i < endOffset_ ++i) {_            code.data[i] = Opcodes.NOP__          }_          code.data[endOffset] = (byte) Opcodes.ATHROW__          _          _          int frameIndex = visitFrameStart(startOffset,  0,  1)__          currentFrame[frameIndex] =_              Frame.getAbstractTypeFromInternalName(symbolTable, "java/lang/Throwable")__          visitFrameEnd()__          _          firstHandler = Handler.removeRange(firstHandler, basicBlock, nextBasicBlock)__          _          maxStackSize = Math.max(maxStackSize, 1)__        }_      }_      basicBlock = basicBlock.nextBasicBlock__    }__    this.maxStack = maxStackSize__  };computes,all,the,stack,map,frames,of,the,method,from,scratch;private,void,compute,all,frames,handler,handler,first,handler,while,handler,null,string,catch,type,descriptor,handler,catch,type,descriptor,null,java,lang,throwable,handler,catch,type,descriptor,int,catch,type,frame,get,abstract,type,from,internal,name,symbol,table,catch,type,descriptor,label,handler,block,handler,handler,pc,get,canonical,instance,handler,block,flags,label,label,handler,range,block,handler,start,pc,get,canonical,instance,label,handler,range,end,handler,end,pc,get,canonical,instance,while,handler,range,block,handler,range,end,handler,range,block,outgoing,edges,new,edge,catch,type,handler,block,handler,range,block,outgoing,edges,handler,range,block,handler,range,block,next,basic,block,handler,handler,next,handler,frame,first,frame,first,basic,block,frame,first,frame,set,input,frame,from,descriptor,symbol,table,access,flags,descriptor,this,max,locals,first,frame,accept,this,label,list,of,blocks,to,process,first,basic,block,list,of,blocks,to,process,next,list,element,label,int,max,stack,size,0,while,list,of,blocks,to,process,label,label,basic,block,list,of,blocks,to,process,list,of,blocks,to,process,list,of,blocks,to,process,next,list,element,basic,block,next,list,element,null,basic,block,flags,label,int,max,block,stack,size,basic,block,frame,get,input,stack,size,basic,block,output,stack,max,if,max,block,stack,size,max,stack,size,max,stack,size,max,block,stack,size,edge,outgoing,edge,basic,block,outgoing,edges,while,outgoing,edge,null,label,successor,block,outgoing,edge,successor,get,canonical,instance,boolean,successor,block,changed,basic,block,frame,merge,symbol,table,successor,block,frame,outgoing,edge,info,if,successor,block,changed,successor,block,next,list,element,null,successor,block,next,list,element,list,of,blocks,to,process,list,of,blocks,to,process,successor,block,outgoing,edge,outgoing,edge,next,edge,label,basic,block,first,basic,block,while,basic,block,null,if,basic,block,flags,label,label,label,label,basic,block,frame,accept,this,if,basic,block,flags,label,0,label,next,basic,block,basic,block,next,basic,block,int,start,offset,basic,block,bytecode,offset,int,end,offset,next,basic,block,null,code,length,next,basic,block,bytecode,offset,1,if,end,offset,start,offset,for,int,i,start,offset,i,end,offset,i,code,data,i,opcodes,nop,code,data,end,offset,byte,opcodes,athrow,int,frame,index,visit,frame,start,start,offset,0,1,current,frame,frame,index,frame,get,abstract,type,from,internal,name,symbol,table,java,lang,throwable,visit,frame,end,first,handler,handler,remove,range,first,handler,basic,block,next,basic,block,max,stack,size,math,max,max,stack,size,1,basic,block,basic,block,next,basic,block,this,max,stack,max,stack,size
MethodWriter -> private void computeAllFrames();1536664245;Computes all the stack map frames of the method, from scratch.;private void computeAllFrames() {_    _    Handler handler = firstHandler__    while (handler != null) {_      String catchTypeDescriptor =_          handler.catchTypeDescriptor == null ? "java/lang/Throwable" : handler.catchTypeDescriptor__      int catchType = Frame.getAbstractTypeFromInternalName(symbolTable, catchTypeDescriptor)__      _      Label handlerBlock = handler.handlerPc.getCanonicalInstance()__      handlerBlock.flags |= Label.FLAG_JUMP_TARGET__      _      Label handlerRangeBlock = handler.startPc.getCanonicalInstance()__      Label handlerRangeEnd = handler.endPc.getCanonicalInstance()__      while (handlerRangeBlock != handlerRangeEnd) {_        handlerRangeBlock.outgoingEdges =_            new Edge(catchType, handlerBlock, handlerRangeBlock.outgoingEdges)__        handlerRangeBlock = handlerRangeBlock.nextBasicBlock__      }_      handler = handler.nextHandler__    }__    _    Frame firstFrame = firstBasicBlock.frame__    firstFrame.setInputFrameFromDescriptor(symbolTable, accessFlags, descriptor, this.maxLocals)__    firstFrame.accept(this)___    _    _    _    _    _    _    Label listOfBlocksToProcess = firstBasicBlock__    listOfBlocksToProcess.nextListElement = Label.EMPTY_LIST__    int maxStackSize = 0__    while (listOfBlocksToProcess != Label.EMPTY_LIST) {_      _      Label basicBlock = listOfBlocksToProcess__      listOfBlocksToProcess = listOfBlocksToProcess.nextListElement__      basicBlock.nextListElement = null__      _      basicBlock.flags |= Label.FLAG_REACHABLE__      _      int maxBlockStackSize = basicBlock.frame.getInputStackSize() + basicBlock.outputStackMax__      if (maxBlockStackSize > maxStackSize) {_        maxStackSize = maxBlockStackSize__      }_      _      Edge outgoingEdge = basicBlock.outgoingEdges__      while (outgoingEdge != null) {_        Label successorBlock = outgoingEdge.successor.getCanonicalInstance()__        boolean successorBlockChanged =_            basicBlock.frame.merge(symbolTable, successorBlock.frame, outgoingEdge.info)__        if (successorBlockChanged && successorBlock.nextListElement == null) {_          _          _          successorBlock.nextListElement = listOfBlocksToProcess__          listOfBlocksToProcess = successorBlock__        }_        outgoingEdge = outgoingEdge.nextEdge__      }_    }__    _    _    _    Label basicBlock = firstBasicBlock__    while (basicBlock != null) {_      if ((basicBlock.flags & (Label.FLAG_JUMP_TARGET | Label.FLAG_REACHABLE))_          == (Label.FLAG_JUMP_TARGET | Label.FLAG_REACHABLE)) {_        basicBlock.frame.accept(this)__      }_      if ((basicBlock.flags & Label.FLAG_REACHABLE) == 0) {_        _        Label nextBasicBlock = basicBlock.nextBasicBlock__        int startOffset = basicBlock.bytecodeOffset__        int endOffset = (nextBasicBlock == null ? code.length : nextBasicBlock.bytecodeOffset) - 1__        if (endOffset >= startOffset) {_          _          for (int i = startOffset_ i < endOffset_ ++i) {_            code.data[i] = Opcodes.NOP__          }_          code.data[endOffset] = (byte) Opcodes.ATHROW__          _          _          int frameIndex = visitFrameStart(startOffset,  0,  1)__          currentFrame[frameIndex] =_              Frame.getAbstractTypeFromInternalName(symbolTable, "java/lang/Throwable")__          visitFrameEnd()__          _          firstHandler = Handler.removeRange(firstHandler, basicBlock, nextBasicBlock)__          _          maxStackSize = Math.max(maxStackSize, 1)__        }_      }_      basicBlock = basicBlock.nextBasicBlock__    }__    this.maxStack = maxStackSize__  };computes,all,the,stack,map,frames,of,the,method,from,scratch;private,void,compute,all,frames,handler,handler,first,handler,while,handler,null,string,catch,type,descriptor,handler,catch,type,descriptor,null,java,lang,throwable,handler,catch,type,descriptor,int,catch,type,frame,get,abstract,type,from,internal,name,symbol,table,catch,type,descriptor,label,handler,block,handler,handler,pc,get,canonical,instance,handler,block,flags,label,label,handler,range,block,handler,start,pc,get,canonical,instance,label,handler,range,end,handler,end,pc,get,canonical,instance,while,handler,range,block,handler,range,end,handler,range,block,outgoing,edges,new,edge,catch,type,handler,block,handler,range,block,outgoing,edges,handler,range,block,handler,range,block,next,basic,block,handler,handler,next,handler,frame,first,frame,first,basic,block,frame,first,frame,set,input,frame,from,descriptor,symbol,table,access,flags,descriptor,this,max,locals,first,frame,accept,this,label,list,of,blocks,to,process,first,basic,block,list,of,blocks,to,process,next,list,element,label,int,max,stack,size,0,while,list,of,blocks,to,process,label,label,basic,block,list,of,blocks,to,process,list,of,blocks,to,process,list,of,blocks,to,process,next,list,element,basic,block,next,list,element,null,basic,block,flags,label,int,max,block,stack,size,basic,block,frame,get,input,stack,size,basic,block,output,stack,max,if,max,block,stack,size,max,stack,size,max,stack,size,max,block,stack,size,edge,outgoing,edge,basic,block,outgoing,edges,while,outgoing,edge,null,label,successor,block,outgoing,edge,successor,get,canonical,instance,boolean,successor,block,changed,basic,block,frame,merge,symbol,table,successor,block,frame,outgoing,edge,info,if,successor,block,changed,successor,block,next,list,element,null,successor,block,next,list,element,list,of,blocks,to,process,list,of,blocks,to,process,successor,block,outgoing,edge,outgoing,edge,next,edge,label,basic,block,first,basic,block,while,basic,block,null,if,basic,block,flags,label,label,label,label,basic,block,frame,accept,this,if,basic,block,flags,label,0,label,next,basic,block,basic,block,next,basic,block,int,start,offset,basic,block,bytecode,offset,int,end,offset,next,basic,block,null,code,length,next,basic,block,bytecode,offset,1,if,end,offset,start,offset,for,int,i,start,offset,i,end,offset,i,code,data,i,opcodes,nop,code,data,end,offset,byte,opcodes,athrow,int,frame,index,visit,frame,start,start,offset,0,1,current,frame,frame,index,frame,get,abstract,type,from,internal,name,symbol,table,java,lang,throwable,visit,frame,end,first,handler,handler,remove,range,first,handler,basic,block,next,basic,block,max,stack,size,math,max,max,stack,size,1,basic,block,basic,block,next,basic,block,this,max,stack,max,stack,size
MethodWriter -> private void computeAllFrames();1537204147;Computes all the stack map frames of the method, from scratch.;private void computeAllFrames() {_    _    Handler handler = firstHandler__    while (handler != null) {_      String catchTypeDescriptor =_          handler.catchTypeDescriptor == null ? "java/lang/Throwable" : handler.catchTypeDescriptor__      int catchType = Frame.getAbstractTypeFromInternalName(symbolTable, catchTypeDescriptor)__      _      Label handlerBlock = handler.handlerPc.getCanonicalInstance()__      handlerBlock.flags |= Label.FLAG_JUMP_TARGET__      _      Label handlerRangeBlock = handler.startPc.getCanonicalInstance()__      Label handlerRangeEnd = handler.endPc.getCanonicalInstance()__      while (handlerRangeBlock != handlerRangeEnd) {_        handlerRangeBlock.outgoingEdges =_            new Edge(catchType, handlerBlock, handlerRangeBlock.outgoingEdges)__        handlerRangeBlock = handlerRangeBlock.nextBasicBlock__      }_      handler = handler.nextHandler__    }__    _    Frame firstFrame = firstBasicBlock.frame__    firstFrame.setInputFrameFromDescriptor(symbolTable, accessFlags, descriptor, this.maxLocals)__    firstFrame.accept(this)___    _    _    _    _    _    _    Label listOfBlocksToProcess = firstBasicBlock__    listOfBlocksToProcess.nextListElement = Label.EMPTY_LIST__    int maxStackSize = 0__    while (listOfBlocksToProcess != Label.EMPTY_LIST) {_      _      Label basicBlock = listOfBlocksToProcess__      listOfBlocksToProcess = listOfBlocksToProcess.nextListElement__      basicBlock.nextListElement = null__      _      basicBlock.flags |= Label.FLAG_REACHABLE__      _      int maxBlockStackSize = basicBlock.frame.getInputStackSize() + basicBlock.outputStackMax__      if (maxBlockStackSize > maxStackSize) {_        maxStackSize = maxBlockStackSize__      }_      _      Edge outgoingEdge = basicBlock.outgoingEdges__      while (outgoingEdge != null) {_        Label successorBlock = outgoingEdge.successor.getCanonicalInstance()__        boolean successorBlockChanged =_            basicBlock.frame.merge(symbolTable, successorBlock.frame, outgoingEdge.info)__        if (successorBlockChanged && successorBlock.nextListElement == null) {_          _          _          successorBlock.nextListElement = listOfBlocksToProcess__          listOfBlocksToProcess = successorBlock__        }_        outgoingEdge = outgoingEdge.nextEdge__      }_    }__    _    _    _    Label basicBlock = firstBasicBlock__    while (basicBlock != null) {_      if ((basicBlock.flags & (Label.FLAG_JUMP_TARGET | Label.FLAG_REACHABLE))_          == (Label.FLAG_JUMP_TARGET | Label.FLAG_REACHABLE)) {_        basicBlock.frame.accept(this)__      }_      if ((basicBlock.flags & Label.FLAG_REACHABLE) == 0) {_        _        Label nextBasicBlock = basicBlock.nextBasicBlock__        int startOffset = basicBlock.bytecodeOffset__        int endOffset = (nextBasicBlock == null ? code.length : nextBasicBlock.bytecodeOffset) - 1__        if (endOffset >= startOffset) {_          _          for (int i = startOffset_ i < endOffset_ ++i) {_            code.data[i] = Opcodes.NOP__          }_          code.data[endOffset] = (byte) Opcodes.ATHROW__          _          _          int frameIndex = visitFrameStart(startOffset,  0,  1)__          currentFrame[frameIndex] =_              Frame.getAbstractTypeFromInternalName(symbolTable, "java/lang/Throwable")__          visitFrameEnd()__          _          firstHandler = Handler.removeRange(firstHandler, basicBlock, nextBasicBlock)__          _          maxStackSize = Math.max(maxStackSize, 1)__        }_      }_      basicBlock = basicBlock.nextBasicBlock__    }__    this.maxStack = maxStackSize__  };computes,all,the,stack,map,frames,of,the,method,from,scratch;private,void,compute,all,frames,handler,handler,first,handler,while,handler,null,string,catch,type,descriptor,handler,catch,type,descriptor,null,java,lang,throwable,handler,catch,type,descriptor,int,catch,type,frame,get,abstract,type,from,internal,name,symbol,table,catch,type,descriptor,label,handler,block,handler,handler,pc,get,canonical,instance,handler,block,flags,label,label,handler,range,block,handler,start,pc,get,canonical,instance,label,handler,range,end,handler,end,pc,get,canonical,instance,while,handler,range,block,handler,range,end,handler,range,block,outgoing,edges,new,edge,catch,type,handler,block,handler,range,block,outgoing,edges,handler,range,block,handler,range,block,next,basic,block,handler,handler,next,handler,frame,first,frame,first,basic,block,frame,first,frame,set,input,frame,from,descriptor,symbol,table,access,flags,descriptor,this,max,locals,first,frame,accept,this,label,list,of,blocks,to,process,first,basic,block,list,of,blocks,to,process,next,list,element,label,int,max,stack,size,0,while,list,of,blocks,to,process,label,label,basic,block,list,of,blocks,to,process,list,of,blocks,to,process,list,of,blocks,to,process,next,list,element,basic,block,next,list,element,null,basic,block,flags,label,int,max,block,stack,size,basic,block,frame,get,input,stack,size,basic,block,output,stack,max,if,max,block,stack,size,max,stack,size,max,stack,size,max,block,stack,size,edge,outgoing,edge,basic,block,outgoing,edges,while,outgoing,edge,null,label,successor,block,outgoing,edge,successor,get,canonical,instance,boolean,successor,block,changed,basic,block,frame,merge,symbol,table,successor,block,frame,outgoing,edge,info,if,successor,block,changed,successor,block,next,list,element,null,successor,block,next,list,element,list,of,blocks,to,process,list,of,blocks,to,process,successor,block,outgoing,edge,outgoing,edge,next,edge,label,basic,block,first,basic,block,while,basic,block,null,if,basic,block,flags,label,label,label,label,basic,block,frame,accept,this,if,basic,block,flags,label,0,label,next,basic,block,basic,block,next,basic,block,int,start,offset,basic,block,bytecode,offset,int,end,offset,next,basic,block,null,code,length,next,basic,block,bytecode,offset,1,if,end,offset,start,offset,for,int,i,start,offset,i,end,offset,i,code,data,i,opcodes,nop,code,data,end,offset,byte,opcodes,athrow,int,frame,index,visit,frame,start,start,offset,0,1,current,frame,frame,index,frame,get,abstract,type,from,internal,name,symbol,table,java,lang,throwable,visit,frame,end,first,handler,handler,remove,range,first,handler,basic,block,next,basic,block,max,stack,size,math,max,max,stack,size,1,basic,block,basic,block,next,basic,block,this,max,stack,max,stack,size
MethodWriter -> private void computeAllFrames();1539119582;Computes all the stack map frames of the method, from scratch.;private void computeAllFrames() {_    _    Handler handler = firstHandler__    while (handler != null) {_      String catchTypeDescriptor =_          handler.catchTypeDescriptor == null ? "java/lang/Throwable" : handler.catchTypeDescriptor__      int catchType = Frame.getAbstractTypeFromInternalName(symbolTable, catchTypeDescriptor)__      _      Label handlerBlock = handler.handlerPc.getCanonicalInstance()__      handlerBlock.flags |= Label.FLAG_JUMP_TARGET__      _      Label handlerRangeBlock = handler.startPc.getCanonicalInstance()__      Label handlerRangeEnd = handler.endPc.getCanonicalInstance()__      while (handlerRangeBlock != handlerRangeEnd) {_        handlerRangeBlock.outgoingEdges =_            new Edge(catchType, handlerBlock, handlerRangeBlock.outgoingEdges)__        handlerRangeBlock = handlerRangeBlock.nextBasicBlock__      }_      handler = handler.nextHandler__    }__    _    Frame firstFrame = firstBasicBlock.frame__    firstFrame.setInputFrameFromDescriptor(symbolTable, accessFlags, descriptor, this.maxLocals)__    firstFrame.accept(this)___    _    _    _    _    _    _    Label listOfBlocksToProcess = firstBasicBlock__    listOfBlocksToProcess.nextListElement = Label.EMPTY_LIST__    int maxStackSize = 0__    while (listOfBlocksToProcess != Label.EMPTY_LIST) {_      _      Label basicBlock = listOfBlocksToProcess__      listOfBlocksToProcess = listOfBlocksToProcess.nextListElement__      basicBlock.nextListElement = null__      _      basicBlock.flags |= Label.FLAG_REACHABLE__      _      int maxBlockStackSize = basicBlock.frame.getInputStackSize() + basicBlock.outputStackMax__      if (maxBlockStackSize > maxStackSize) {_        maxStackSize = maxBlockStackSize__      }_      _      Edge outgoingEdge = basicBlock.outgoingEdges__      while (outgoingEdge != null) {_        Label successorBlock = outgoingEdge.successor.getCanonicalInstance()__        boolean successorBlockChanged =_            basicBlock.frame.merge(symbolTable, successorBlock.frame, outgoingEdge.info)__        if (successorBlockChanged && successorBlock.nextListElement == null) {_          _          _          successorBlock.nextListElement = listOfBlocksToProcess__          listOfBlocksToProcess = successorBlock__        }_        outgoingEdge = outgoingEdge.nextEdge__      }_    }__    _    _    _    Label basicBlock = firstBasicBlock__    while (basicBlock != null) {_      if ((basicBlock.flags & (Label.FLAG_JUMP_TARGET | Label.FLAG_REACHABLE))_          == (Label.FLAG_JUMP_TARGET | Label.FLAG_REACHABLE)) {_        basicBlock.frame.accept(this)__      }_      if ((basicBlock.flags & Label.FLAG_REACHABLE) == 0) {_        _        Label nextBasicBlock = basicBlock.nextBasicBlock__        int startOffset = basicBlock.bytecodeOffset__        int endOffset = (nextBasicBlock == null ? code.length : nextBasicBlock.bytecodeOffset) - 1__        if (endOffset >= startOffset) {_          _          for (int i = startOffset_ i < endOffset_ ++i) {_            code.data[i] = Opcodes.NOP__          }_          code.data[endOffset] = (byte) Opcodes.ATHROW__          _          _          int frameIndex = visitFrameStart(startOffset,  0,  1)__          currentFrame[frameIndex] =_              Frame.getAbstractTypeFromInternalName(symbolTable, "java/lang/Throwable")__          visitFrameEnd()__          _          firstHandler = Handler.removeRange(firstHandler, basicBlock, nextBasicBlock)__          _          maxStackSize = Math.max(maxStackSize, 1)__        }_      }_      basicBlock = basicBlock.nextBasicBlock__    }__    this.maxStack = maxStackSize__  };computes,all,the,stack,map,frames,of,the,method,from,scratch;private,void,compute,all,frames,handler,handler,first,handler,while,handler,null,string,catch,type,descriptor,handler,catch,type,descriptor,null,java,lang,throwable,handler,catch,type,descriptor,int,catch,type,frame,get,abstract,type,from,internal,name,symbol,table,catch,type,descriptor,label,handler,block,handler,handler,pc,get,canonical,instance,handler,block,flags,label,label,handler,range,block,handler,start,pc,get,canonical,instance,label,handler,range,end,handler,end,pc,get,canonical,instance,while,handler,range,block,handler,range,end,handler,range,block,outgoing,edges,new,edge,catch,type,handler,block,handler,range,block,outgoing,edges,handler,range,block,handler,range,block,next,basic,block,handler,handler,next,handler,frame,first,frame,first,basic,block,frame,first,frame,set,input,frame,from,descriptor,symbol,table,access,flags,descriptor,this,max,locals,first,frame,accept,this,label,list,of,blocks,to,process,first,basic,block,list,of,blocks,to,process,next,list,element,label,int,max,stack,size,0,while,list,of,blocks,to,process,label,label,basic,block,list,of,blocks,to,process,list,of,blocks,to,process,list,of,blocks,to,process,next,list,element,basic,block,next,list,element,null,basic,block,flags,label,int,max,block,stack,size,basic,block,frame,get,input,stack,size,basic,block,output,stack,max,if,max,block,stack,size,max,stack,size,max,stack,size,max,block,stack,size,edge,outgoing,edge,basic,block,outgoing,edges,while,outgoing,edge,null,label,successor,block,outgoing,edge,successor,get,canonical,instance,boolean,successor,block,changed,basic,block,frame,merge,symbol,table,successor,block,frame,outgoing,edge,info,if,successor,block,changed,successor,block,next,list,element,null,successor,block,next,list,element,list,of,blocks,to,process,list,of,blocks,to,process,successor,block,outgoing,edge,outgoing,edge,next,edge,label,basic,block,first,basic,block,while,basic,block,null,if,basic,block,flags,label,label,label,label,basic,block,frame,accept,this,if,basic,block,flags,label,0,label,next,basic,block,basic,block,next,basic,block,int,start,offset,basic,block,bytecode,offset,int,end,offset,next,basic,block,null,code,length,next,basic,block,bytecode,offset,1,if,end,offset,start,offset,for,int,i,start,offset,i,end,offset,i,code,data,i,opcodes,nop,code,data,end,offset,byte,opcodes,athrow,int,frame,index,visit,frame,start,start,offset,0,1,current,frame,frame,index,frame,get,abstract,type,from,internal,name,symbol,table,java,lang,throwable,visit,frame,end,first,handler,handler,remove,range,first,handler,basic,block,next,basic,block,max,stack,size,math,max,max,stack,size,1,basic,block,basic,block,next,basic,block,this,max,stack,max,stack,size
MethodWriter -> static void writeShort(final byte[] b, final int index, final int s);1366718246;Writes a short value in the given byte array.__@param b_a byte array._@param index_where the first byte of the short value must be written._@param s_the value to be written in the given byte array.;static void writeShort(final byte[] b, final int index, final int s) {_        b[index] = (byte) (s >>> 8)__        b[index + 1] = (byte) s__    };writes,a,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,where,the,first,byte,of,the,short,value,must,be,written,param,s,the,value,to,be,written,in,the,given,byte,array;static,void,write,short,final,byte,b,final,int,index,final,int,s,b,index,byte,s,8,b,index,1,byte,s
MethodWriter -> static void writeShort(final byte[] b, final int index, final int s);1395273982;Writes a short value in the given byte array.__@param b_a byte array._@param index_where the first byte of the short value must be written._@param s_the value to be written in the given byte array.;static void writeShort(final byte[] b, final int index, final int s) {_        b[index] = (byte) (s >>> 8)__        b[index + 1] = (byte) s__    };writes,a,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,where,the,first,byte,of,the,short,value,must,be,written,param,s,the,value,to,be,written,in,the,given,byte,array;static,void,write,short,final,byte,b,final,int,index,final,int,s,b,index,byte,s,8,b,index,1,byte,s
MethodWriter -> static void writeShort(final byte[] b, final int index, final int s);1395744691;Writes a short value in the given byte array.__@param b_a byte array._@param index_where the first byte of the short value must be written._@param s_the value to be written in the given byte array.;static void writeShort(final byte[] b, final int index, final int s) {_        b[index] = (byte) (s >>> 8)__        b[index + 1] = (byte) s__    };writes,a,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,where,the,first,byte,of,the,short,value,must,be,written,param,s,the,value,to,be,written,in,the,given,byte,array;static,void,write,short,final,byte,b,final,int,index,final,int,s,b,index,byte,s,8,b,index,1,byte,s
MethodWriter -> static void writeShort(final byte[] b, final int index, final int s);1400531367;Writes a short value in the given byte array.__@param b_a byte array._@param index_where the first byte of the short value must be written._@param s_the value to be written in the given byte array.;static void writeShort(final byte[] b, final int index, final int s) {_        b[index] = (byte) (s >>> 8)__        b[index + 1] = (byte) s__    };writes,a,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,where,the,first,byte,of,the,short,value,must,be,written,param,s,the,value,to,be,written,in,the,given,byte,array;static,void,write,short,final,byte,b,final,int,index,final,int,s,b,index,byte,s,8,b,index,1,byte,s
MethodWriter -> static void writeShort(final byte[] b, final int index, final int s);1431006084;Writes a short value in the given byte array.__@param b_a byte array._@param index_where the first byte of the short value must be written._@param s_the value to be written in the given byte array.;static void writeShort(final byte[] b, final int index, final int s) {_        b[index] = (byte) (s >>> 8)__        b[index + 1] = (byte) s__    };writes,a,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,where,the,first,byte,of,the,short,value,must,be,written,param,s,the,value,to,be,written,in,the,given,byte,array;static,void,write,short,final,byte,b,final,int,index,final,int,s,b,index,byte,s,8,b,index,1,byte,s
MethodWriter -> static void writeShort(final byte[] b, final int index, final int s);1440705816;Writes a short value in the given byte array.__@param b_a byte array._@param index_where the first byte of the short value must be written._@param s_the value to be written in the given byte array.;static void writeShort(final byte[] b, final int index, final int s) {_        b[index] = (byte) (s >>> 8)__        b[index + 1] = (byte) s__    };writes,a,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,where,the,first,byte,of,the,short,value,must,be,written,param,s,the,value,to,be,written,in,the,given,byte,array;static,void,write,short,final,byte,b,final,int,index,final,int,s,b,index,byte,s,8,b,index,1,byte,s
MethodWriter -> boolean canCopyMethodAttributes(       final ClassReader source,       final int methodInfoOffset,       final int methodInfoLength,       final boolean hasSyntheticAttribute,       final boolean hasDeprecatedAttribute,       final int descriptorIndex,       final int signatureIndex,       final int exceptionsOffset);1531241461;Returns whether the attributes of this method can be copied from the attributes of the given_method (assuming there is no method visitor between the given ClassReader and this_MethodWriter). This method should only be called just after this MethodWriter has been created,_and before any content is visited. It returns true if the attributes corresponding to the_constructor arguments (at most a Signature, an Exception, a Deprecated and a Synthetic_attribute) are the same as the corresponding attributes in the given method.__@param source the source ClassReader from which the attributes of this method might be copied._@param methodInfoOffset the offset in 'source.b' of the method_info JVMS structure from which_the attributes of this method might be copied._@param methodInfoLength the length in 'source.b' of the method_info JVMS structure from which_the attributes of this method might be copied._@param hasSyntheticAttribute whether the method_info JVMS structure from which the attributes_of this method might be copied contains a Synthetic attribute._@param hasDeprecatedAttribute whether the method_info JVMS structure from which the attributes_of this method might be copied contains a Deprecated attribute._@param descriptorIndex the descriptor_index field of the method_info JVMS structure from which_the attributes of this method might be copied._@param signatureIndex the constant pool index contained in the Signature attribute of the_method_info JVMS structure from which the attributes of this method might be copied, or 0._@param exceptionsOffset the offset in 'source.b' of the Exceptions attribute of the method_info_JVMS structure from which the attributes of this method might be copied, or 0._@return whether the attributes of this method can be copied from the attributes of the_method_info JVMS structure in 'source.b', between 'methodInfoOffset' and 'methodInfoOffset'_+ 'methodInfoLength'.;boolean canCopyMethodAttributes(_      final ClassReader source,_      final int methodInfoOffset,_      final int methodInfoLength,_      final boolean hasSyntheticAttribute,_      final boolean hasDeprecatedAttribute,_      final int descriptorIndex,_      final int signatureIndex,_      final int exceptionsOffset) {_    _    _    _    _    _    if (source != symbolTable.getSource()_        || descriptorIndex != this.descriptorIndex_        || signatureIndex != this.signatureIndex_        || hasDeprecatedAttribute != ((accessFlags & Opcodes.ACC_DEPRECATED) != 0)) {_      return false__    }_    boolean needSyntheticAttribute =_        symbolTable.getMajorVersion() < Opcodes.V1_5 && (accessFlags & Opcodes.ACC_SYNTHETIC) != 0__    if (hasSyntheticAttribute != needSyntheticAttribute) {_      return false__    }_    if (exceptionsOffset == 0) {_      if (numberOfExceptions != 0) {_        return false__      }_    } else if (source.readUnsignedShort(exceptionsOffset) == numberOfExceptions) {_      int currentExceptionOffset = exceptionsOffset + 2__      for (int i = 0_ i < numberOfExceptions_ ++i) {_        if (source.readUnsignedShort(currentExceptionOffset) != exceptionIndexTable[i]) {_          return false__        }_        currentExceptionOffset += 2__      }_    }_    _    _    _    this.sourceOffset = methodInfoOffset + 6__    this.sourceLength = methodInfoLength - 6__    return true__  };returns,whether,the,attributes,of,this,method,can,be,copied,from,the,attributes,of,the,given,method,assuming,there,is,no,method,visitor,between,the,given,class,reader,and,this,method,writer,this,method,should,only,be,called,just,after,this,method,writer,has,been,created,and,before,any,content,is,visited,it,returns,true,if,the,attributes,corresponding,to,the,constructor,arguments,at,most,a,signature,an,exception,a,deprecated,and,a,synthetic,attribute,are,the,same,as,the,corresponding,attributes,in,the,given,method,param,source,the,source,class,reader,from,which,the,attributes,of,this,method,might,be,copied,param,method,info,offset,the,offset,in,source,b,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,param,method,info,length,the,length,in,source,b,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,param,has,synthetic,attribute,whether,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,contains,a,synthetic,attribute,param,has,deprecated,attribute,whether,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,contains,a,deprecated,attribute,param,descriptor,index,the,field,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,param,signature,index,the,constant,pool,index,contained,in,the,signature,attribute,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,or,0,param,exceptions,offset,the,offset,in,source,b,of,the,exceptions,attribute,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,or,0,return,whether,the,attributes,of,this,method,can,be,copied,from,the,attributes,of,the,jvms,structure,in,source,b,between,method,info,offset,and,method,info,offset,method,info,length;boolean,can,copy,method,attributes,final,class,reader,source,final,int,method,info,offset,final,int,method,info,length,final,boolean,has,synthetic,attribute,final,boolean,has,deprecated,attribute,final,int,descriptor,index,final,int,signature,index,final,int,exceptions,offset,if,source,symbol,table,get,source,descriptor,index,this,descriptor,index,signature,index,this,signature,index,has,deprecated,attribute,access,flags,opcodes,0,return,false,boolean,need,synthetic,attribute,symbol,table,get,major,version,opcodes,access,flags,opcodes,0,if,has,synthetic,attribute,need,synthetic,attribute,return,false,if,exceptions,offset,0,if,number,of,exceptions,0,return,false,else,if,source,read,unsigned,short,exceptions,offset,number,of,exceptions,int,current,exception,offset,exceptions,offset,2,for,int,i,0,i,number,of,exceptions,i,if,source,read,unsigned,short,current,exception,offset,exception,index,table,i,return,false,current,exception,offset,2,this,source,offset,method,info,offset,6,this,source,length,method,info,length,6,return,true
MethodWriter -> boolean canCopyMethodAttributes(       final ClassReader source,       final int methodInfoOffset,       final int methodInfoLength,       final boolean hasSyntheticAttribute,       final boolean hasDeprecatedAttribute,       final int descriptorIndex,       final int signatureIndex,       final int exceptionsOffset);1536664245;Returns whether the attributes of this method can be copied from the attributes of the given_method (assuming there is no method visitor between the given ClassReader and this_MethodWriter). This method should only be called just after this MethodWriter has been created,_and before any content is visited. It returns true if the attributes corresponding to the_constructor arguments (at most a Signature, an Exception, a Deprecated and a Synthetic_attribute) are the same as the corresponding attributes in the given method.__@param source the source ClassReader from which the attributes of this method might be copied._@param methodInfoOffset the offset in 'source.b' of the method_info JVMS structure from which_the attributes of this method might be copied._@param methodInfoLength the length in 'source.b' of the method_info JVMS structure from which_the attributes of this method might be copied._@param hasSyntheticAttribute whether the method_info JVMS structure from which the attributes_of this method might be copied contains a Synthetic attribute._@param hasDeprecatedAttribute whether the method_info JVMS structure from which the attributes_of this method might be copied contains a Deprecated attribute._@param descriptorIndex the descriptor_index field of the method_info JVMS structure from which_the attributes of this method might be copied._@param signatureIndex the constant pool index contained in the Signature attribute of the_method_info JVMS structure from which the attributes of this method might be copied, or 0._@param exceptionsOffset the offset in 'source.b' of the Exceptions attribute of the method_info_JVMS structure from which the attributes of this method might be copied, or 0._@return whether the attributes of this method can be copied from the attributes of the_method_info JVMS structure in 'source.b', between 'methodInfoOffset' and 'methodInfoOffset'_+ 'methodInfoLength'.;boolean canCopyMethodAttributes(_      final ClassReader source,_      final int methodInfoOffset,_      final int methodInfoLength,_      final boolean hasSyntheticAttribute,_      final boolean hasDeprecatedAttribute,_      final int descriptorIndex,_      final int signatureIndex,_      final int exceptionsOffset) {_    _    _    _    _    _    if (source != symbolTable.getSource()_        || descriptorIndex != this.descriptorIndex_        || signatureIndex != this.signatureIndex_        || hasDeprecatedAttribute != ((accessFlags & Opcodes.ACC_DEPRECATED) != 0)) {_      return false__    }_    boolean needSyntheticAttribute =_        symbolTable.getMajorVersion() < Opcodes.V1_5 && (accessFlags & Opcodes.ACC_SYNTHETIC) != 0__    if (hasSyntheticAttribute != needSyntheticAttribute) {_      return false__    }_    if (exceptionsOffset == 0) {_      if (numberOfExceptions != 0) {_        return false__      }_    } else if (source.readUnsignedShort(exceptionsOffset) == numberOfExceptions) {_      int currentExceptionOffset = exceptionsOffset + 2__      for (int i = 0_ i < numberOfExceptions_ ++i) {_        if (source.readUnsignedShort(currentExceptionOffset) != exceptionIndexTable[i]) {_          return false__        }_        currentExceptionOffset += 2__      }_    }_    _    _    _    this.sourceOffset = methodInfoOffset + 6__    this.sourceLength = methodInfoLength - 6__    return true__  };returns,whether,the,attributes,of,this,method,can,be,copied,from,the,attributes,of,the,given,method,assuming,there,is,no,method,visitor,between,the,given,class,reader,and,this,method,writer,this,method,should,only,be,called,just,after,this,method,writer,has,been,created,and,before,any,content,is,visited,it,returns,true,if,the,attributes,corresponding,to,the,constructor,arguments,at,most,a,signature,an,exception,a,deprecated,and,a,synthetic,attribute,are,the,same,as,the,corresponding,attributes,in,the,given,method,param,source,the,source,class,reader,from,which,the,attributes,of,this,method,might,be,copied,param,method,info,offset,the,offset,in,source,b,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,param,method,info,length,the,length,in,source,b,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,param,has,synthetic,attribute,whether,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,contains,a,synthetic,attribute,param,has,deprecated,attribute,whether,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,contains,a,deprecated,attribute,param,descriptor,index,the,field,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,param,signature,index,the,constant,pool,index,contained,in,the,signature,attribute,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,or,0,param,exceptions,offset,the,offset,in,source,b,of,the,exceptions,attribute,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,or,0,return,whether,the,attributes,of,this,method,can,be,copied,from,the,attributes,of,the,jvms,structure,in,source,b,between,method,info,offset,and,method,info,offset,method,info,length;boolean,can,copy,method,attributes,final,class,reader,source,final,int,method,info,offset,final,int,method,info,length,final,boolean,has,synthetic,attribute,final,boolean,has,deprecated,attribute,final,int,descriptor,index,final,int,signature,index,final,int,exceptions,offset,if,source,symbol,table,get,source,descriptor,index,this,descriptor,index,signature,index,this,signature,index,has,deprecated,attribute,access,flags,opcodes,0,return,false,boolean,need,synthetic,attribute,symbol,table,get,major,version,opcodes,access,flags,opcodes,0,if,has,synthetic,attribute,need,synthetic,attribute,return,false,if,exceptions,offset,0,if,number,of,exceptions,0,return,false,else,if,source,read,unsigned,short,exceptions,offset,number,of,exceptions,int,current,exception,offset,exceptions,offset,2,for,int,i,0,i,number,of,exceptions,i,if,source,read,unsigned,short,current,exception,offset,exception,index,table,i,return,false,current,exception,offset,2,this,source,offset,method,info,offset,6,this,source,length,method,info,length,6,return,true
MethodWriter -> boolean canCopyMethodAttributes(       final ClassReader source,       final int methodInfoOffset,       final int methodInfoLength,       final boolean hasSyntheticAttribute,       final boolean hasDeprecatedAttribute,       final int descriptorIndex,       final int signatureIndex,       final int exceptionsOffset);1537204147;Returns whether the attributes of this method can be copied from the attributes of the given_method (assuming there is no method visitor between the given ClassReader and this_MethodWriter). This method should only be called just after this MethodWriter has been created,_and before any content is visited. It returns true if the attributes corresponding to the_constructor arguments (at most a Signature, an Exception, a Deprecated and a Synthetic_attribute) are the same as the corresponding attributes in the given method.__@param source the source ClassReader from which the attributes of this method might be copied._@param methodInfoOffset the offset in 'source.b' of the method_info JVMS structure from which_the attributes of this method might be copied._@param methodInfoLength the length in 'source.b' of the method_info JVMS structure from which_the attributes of this method might be copied._@param hasSyntheticAttribute whether the method_info JVMS structure from which the attributes_of this method might be copied contains a Synthetic attribute._@param hasDeprecatedAttribute whether the method_info JVMS structure from which the attributes_of this method might be copied contains a Deprecated attribute._@param descriptorIndex the descriptor_index field of the method_info JVMS structure from which_the attributes of this method might be copied._@param signatureIndex the constant pool index contained in the Signature attribute of the_method_info JVMS structure from which the attributes of this method might be copied, or 0._@param exceptionsOffset the offset in 'source.b' of the Exceptions attribute of the method_info_JVMS structure from which the attributes of this method might be copied, or 0._@return whether the attributes of this method can be copied from the attributes of the_method_info JVMS structure in 'source.b', between 'methodInfoOffset' and 'methodInfoOffset'_+ 'methodInfoLength'.;boolean canCopyMethodAttributes(_      final ClassReader source,_      final int methodInfoOffset,_      final int methodInfoLength,_      final boolean hasSyntheticAttribute,_      final boolean hasDeprecatedAttribute,_      final int descriptorIndex,_      final int signatureIndex,_      final int exceptionsOffset) {_    _    _    _    _    _    if (source != symbolTable.getSource()_        || descriptorIndex != this.descriptorIndex_        || signatureIndex != this.signatureIndex_        || hasDeprecatedAttribute != ((accessFlags & Opcodes.ACC_DEPRECATED) != 0)) {_      return false__    }_    boolean needSyntheticAttribute =_        symbolTable.getMajorVersion() < Opcodes.V1_5 && (accessFlags & Opcodes.ACC_SYNTHETIC) != 0__    if (hasSyntheticAttribute != needSyntheticAttribute) {_      return false__    }_    if (exceptionsOffset == 0) {_      if (numberOfExceptions != 0) {_        return false__      }_    } else if (source.readUnsignedShort(exceptionsOffset) == numberOfExceptions) {_      int currentExceptionOffset = exceptionsOffset + 2__      for (int i = 0_ i < numberOfExceptions_ ++i) {_        if (source.readUnsignedShort(currentExceptionOffset) != exceptionIndexTable[i]) {_          return false__        }_        currentExceptionOffset += 2__      }_    }_    _    _    _    this.sourceOffset = methodInfoOffset + 6__    this.sourceLength = methodInfoLength - 6__    return true__  };returns,whether,the,attributes,of,this,method,can,be,copied,from,the,attributes,of,the,given,method,assuming,there,is,no,method,visitor,between,the,given,class,reader,and,this,method,writer,this,method,should,only,be,called,just,after,this,method,writer,has,been,created,and,before,any,content,is,visited,it,returns,true,if,the,attributes,corresponding,to,the,constructor,arguments,at,most,a,signature,an,exception,a,deprecated,and,a,synthetic,attribute,are,the,same,as,the,corresponding,attributes,in,the,given,method,param,source,the,source,class,reader,from,which,the,attributes,of,this,method,might,be,copied,param,method,info,offset,the,offset,in,source,b,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,param,method,info,length,the,length,in,source,b,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,param,has,synthetic,attribute,whether,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,contains,a,synthetic,attribute,param,has,deprecated,attribute,whether,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,contains,a,deprecated,attribute,param,descriptor,index,the,field,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,param,signature,index,the,constant,pool,index,contained,in,the,signature,attribute,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,or,0,param,exceptions,offset,the,offset,in,source,b,of,the,exceptions,attribute,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,or,0,return,whether,the,attributes,of,this,method,can,be,copied,from,the,attributes,of,the,jvms,structure,in,source,b,between,method,info,offset,and,method,info,offset,method,info,length;boolean,can,copy,method,attributes,final,class,reader,source,final,int,method,info,offset,final,int,method,info,length,final,boolean,has,synthetic,attribute,final,boolean,has,deprecated,attribute,final,int,descriptor,index,final,int,signature,index,final,int,exceptions,offset,if,source,symbol,table,get,source,descriptor,index,this,descriptor,index,signature,index,this,signature,index,has,deprecated,attribute,access,flags,opcodes,0,return,false,boolean,need,synthetic,attribute,symbol,table,get,major,version,opcodes,access,flags,opcodes,0,if,has,synthetic,attribute,need,synthetic,attribute,return,false,if,exceptions,offset,0,if,number,of,exceptions,0,return,false,else,if,source,read,unsigned,short,exceptions,offset,number,of,exceptions,int,current,exception,offset,exceptions,offset,2,for,int,i,0,i,number,of,exceptions,i,if,source,read,unsigned,short,current,exception,offset,exception,index,table,i,return,false,current,exception,offset,2,this,source,offset,method,info,offset,6,this,source,length,method,info,length,6,return,true
MethodWriter -> boolean canCopyMethodAttributes(       final ClassReader source,       final int methodInfoOffset,       final int methodInfoLength,       final boolean hasSyntheticAttribute,       final boolean hasDeprecatedAttribute,       final int descriptorIndex,       final int signatureIndex,       final int exceptionsOffset);1539119582;Returns whether the attributes of this method can be copied from the attributes of the given_method (assuming there is no method visitor between the given ClassReader and this_MethodWriter). This method should only be called just after this MethodWriter has been created,_and before any content is visited. It returns true if the attributes corresponding to the_constructor arguments (at most a Signature, an Exception, a Deprecated and a Synthetic_attribute) are the same as the corresponding attributes in the given method.__@param source the source ClassReader from which the attributes of this method might be copied._@param methodInfoOffset the offset in 'source.b' of the method_info JVMS structure from which_the attributes of this method might be copied._@param methodInfoLength the length in 'source.b' of the method_info JVMS structure from which_the attributes of this method might be copied._@param hasSyntheticAttribute whether the method_info JVMS structure from which the attributes_of this method might be copied contains a Synthetic attribute._@param hasDeprecatedAttribute whether the method_info JVMS structure from which the attributes_of this method might be copied contains a Deprecated attribute._@param descriptorIndex the descriptor_index field of the method_info JVMS structure from which_the attributes of this method might be copied._@param signatureIndex the constant pool index contained in the Signature attribute of the_method_info JVMS structure from which the attributes of this method might be copied, or 0._@param exceptionsOffset the offset in 'source.b' of the Exceptions attribute of the method_info_JVMS structure from which the attributes of this method might be copied, or 0._@return whether the attributes of this method can be copied from the attributes of the_method_info JVMS structure in 'source.b', between 'methodInfoOffset' and 'methodInfoOffset'_+ 'methodInfoLength'.;boolean canCopyMethodAttributes(_      final ClassReader source,_      final int methodInfoOffset,_      final int methodInfoLength,_      final boolean hasSyntheticAttribute,_      final boolean hasDeprecatedAttribute,_      final int descriptorIndex,_      final int signatureIndex,_      final int exceptionsOffset) {_    _    _    _    _    _    if (source != symbolTable.getSource()_        || descriptorIndex != this.descriptorIndex_        || signatureIndex != this.signatureIndex_        || hasDeprecatedAttribute != ((accessFlags & Opcodes.ACC_DEPRECATED) != 0)) {_      return false__    }_    boolean needSyntheticAttribute =_        symbolTable.getMajorVersion() < Opcodes.V1_5 && (accessFlags & Opcodes.ACC_SYNTHETIC) != 0__    if (hasSyntheticAttribute != needSyntheticAttribute) {_      return false__    }_    if (exceptionsOffset == 0) {_      if (numberOfExceptions != 0) {_        return false__      }_    } else if (source.readUnsignedShort(exceptionsOffset) == numberOfExceptions) {_      int currentExceptionOffset = exceptionsOffset + 2__      for (int i = 0_ i < numberOfExceptions_ ++i) {_        if (source.readUnsignedShort(currentExceptionOffset) != exceptionIndexTable[i]) {_          return false__        }_        currentExceptionOffset += 2__      }_    }_    _    _    _    this.sourceOffset = methodInfoOffset + 6__    this.sourceLength = methodInfoLength - 6__    return true__  };returns,whether,the,attributes,of,this,method,can,be,copied,from,the,attributes,of,the,given,method,assuming,there,is,no,method,visitor,between,the,given,class,reader,and,this,method,writer,this,method,should,only,be,called,just,after,this,method,writer,has,been,created,and,before,any,content,is,visited,it,returns,true,if,the,attributes,corresponding,to,the,constructor,arguments,at,most,a,signature,an,exception,a,deprecated,and,a,synthetic,attribute,are,the,same,as,the,corresponding,attributes,in,the,given,method,param,source,the,source,class,reader,from,which,the,attributes,of,this,method,might,be,copied,param,method,info,offset,the,offset,in,source,b,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,param,method,info,length,the,length,in,source,b,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,param,has,synthetic,attribute,whether,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,contains,a,synthetic,attribute,param,has,deprecated,attribute,whether,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,contains,a,deprecated,attribute,param,descriptor,index,the,field,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,param,signature,index,the,constant,pool,index,contained,in,the,signature,attribute,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,or,0,param,exceptions,offset,the,offset,in,source,b,of,the,exceptions,attribute,of,the,jvms,structure,from,which,the,attributes,of,this,method,might,be,copied,or,0,return,whether,the,attributes,of,this,method,can,be,copied,from,the,attributes,of,the,jvms,structure,in,source,b,between,method,info,offset,and,method,info,offset,method,info,length;boolean,can,copy,method,attributes,final,class,reader,source,final,int,method,info,offset,final,int,method,info,length,final,boolean,has,synthetic,attribute,final,boolean,has,deprecated,attribute,final,int,descriptor,index,final,int,signature,index,final,int,exceptions,offset,if,source,symbol,table,get,source,descriptor,index,this,descriptor,index,signature,index,this,signature,index,has,deprecated,attribute,access,flags,opcodes,0,return,false,boolean,need,synthetic,attribute,symbol,table,get,major,version,opcodes,access,flags,opcodes,0,if,has,synthetic,attribute,need,synthetic,attribute,return,false,if,exceptions,offset,0,if,number,of,exceptions,0,return,false,else,if,source,read,unsigned,short,exceptions,offset,number,of,exceptions,int,current,exception,offset,exceptions,offset,2,for,int,i,0,i,number,of,exceptions,i,if,source,read,unsigned,short,current,exception,offset,exception,index,table,i,return,false,current,exception,offset,2,this,source,offset,method,info,offset,6,this,source,length,method,info,length,6,return,true
MethodWriter -> private void putAbstractTypes(final int start, final int end);1531241461;Puts some abstract types of {@link #currentFrame} in {@link #stackMapTableEntries} , using the_JVMS verification_type_info format used in StackMapTable attributes.__@param start index of the first type in {@link #currentFrame} to write._@param end index of last type in {@link #currentFrame} to write (exclusive).;private void putAbstractTypes(final int start, final int end) {_    for (int i = start_ i < end_ ++i) {_      Frame.putAbstractType(symbolTable, currentFrame[i], stackMapTableEntries)__    }_  };puts,some,abstract,types,of,link,current,frame,in,link,stack,map,table,entries,using,the,jvms,format,used,in,stack,map,table,attributes,param,start,index,of,the,first,type,in,link,current,frame,to,write,param,end,index,of,last,type,in,link,current,frame,to,write,exclusive;private,void,put,abstract,types,final,int,start,final,int,end,for,int,i,start,i,end,i,frame,put,abstract,type,symbol,table,current,frame,i,stack,map,table,entries
MethodWriter -> private void putAbstractTypes(final int start, final int end);1536664245;Puts some abstract types of {@link #currentFrame} in {@link #stackMapTableEntries} , using the_JVMS verification_type_info format used in StackMapTable attributes.__@param start index of the first type in {@link #currentFrame} to write._@param end index of last type in {@link #currentFrame} to write (exclusive).;private void putAbstractTypes(final int start, final int end) {_    for (int i = start_ i < end_ ++i) {_      Frame.putAbstractType(symbolTable, currentFrame[i], stackMapTableEntries)__    }_  };puts,some,abstract,types,of,link,current,frame,in,link,stack,map,table,entries,using,the,jvms,format,used,in,stack,map,table,attributes,param,start,index,of,the,first,type,in,link,current,frame,to,write,param,end,index,of,last,type,in,link,current,frame,to,write,exclusive;private,void,put,abstract,types,final,int,start,final,int,end,for,int,i,start,i,end,i,frame,put,abstract,type,symbol,table,current,frame,i,stack,map,table,entries
MethodWriter -> private void putAbstractTypes(final int start, final int end);1537204147;Puts some abstract types of {@link #currentFrame} in {@link #stackMapTableEntries} , using the_JVMS verification_type_info format used in StackMapTable attributes.__@param start index of the first type in {@link #currentFrame} to write._@param end index of last type in {@link #currentFrame} to write (exclusive).;private void putAbstractTypes(final int start, final int end) {_    for (int i = start_ i < end_ ++i) {_      Frame.putAbstractType(symbolTable, currentFrame[i], stackMapTableEntries)__    }_  };puts,some,abstract,types,of,link,current,frame,in,link,stack,map,table,entries,using,the,jvms,format,used,in,stack,map,table,attributes,param,start,index,of,the,first,type,in,link,current,frame,to,write,param,end,index,of,last,type,in,link,current,frame,to,write,exclusive;private,void,put,abstract,types,final,int,start,final,int,end,for,int,i,start,i,end,i,frame,put,abstract,type,symbol,table,current,frame,i,stack,map,table,entries
MethodWriter -> private void putAbstractTypes(final int start, final int end);1539119582;Puts some abstract types of {@link #currentFrame} in {@link #stackMapTableEntries} , using the_JVMS verification_type_info format used in StackMapTable attributes.__@param start index of the first type in {@link #currentFrame} to write._@param end index of last type in {@link #currentFrame} to write (exclusive).;private void putAbstractTypes(final int start, final int end) {_    for (int i = start_ i < end_ ++i) {_      Frame.putAbstractType(symbolTable, currentFrame[i], stackMapTableEntries)__    }_  };puts,some,abstract,types,of,link,current,frame,in,link,stack,map,table,entries,using,the,jvms,format,used,in,stack,map,table,attributes,param,start,index,of,the,first,type,in,link,current,frame,to,write,param,end,index,of,last,type,in,link,current,frame,to,write,exclusive;private,void,put,abstract,types,final,int,start,final,int,end,for,int,i,start,i,end,i,frame,put,abstract,type,symbol,table,current,frame,i,stack,map,table,entries
MethodWriter -> private void computeMaxStackAndLocal();1531241461;Computes the maximum stack size of the method.;private void computeMaxStackAndLocal() {_    _    Handler handler = firstHandler__    while (handler != null) {_      Label handlerBlock = handler.handlerPc__      Label handlerRangeBlock = handler.startPc__      Label handlerRangeEnd = handler.endPc__      _      while (handlerRangeBlock != handlerRangeEnd) {_        if ((handlerRangeBlock.flags & Label.FLAG_SUBROUTINE_CALLER) == 0) {_          handlerRangeBlock.outgoingEdges =_              new Edge(Edge.EXCEPTION, handlerBlock, handlerRangeBlock.outgoingEdges)__        } else {_          _          _          _          handlerRangeBlock.outgoingEdges.nextEdge.nextEdge =_              new Edge(_                  Edge.EXCEPTION, handlerBlock, handlerRangeBlock.outgoingEdges.nextEdge.nextEdge)__        }_        handlerRangeBlock = handlerRangeBlock.nextBasicBlock__      }_      handler = handler.nextHandler__    }__    _    if (hasSubroutines) {_      _      _      short numSubroutines = 1__      firstBasicBlock.markSubroutine(numSubroutines)__      _      _      for (short currentSubroutine = 1_ currentSubroutine <= numSubroutines_ ++currentSubroutine) {_        Label basicBlock = firstBasicBlock__        while (basicBlock != null) {_          if ((basicBlock.flags & Label.FLAG_SUBROUTINE_CALLER) != 0_              && basicBlock.subroutineId == currentSubroutine) {_            Label jsrTarget = basicBlock.outgoingEdges.nextEdge.successor__            if (jsrTarget.subroutineId == 0) {_              _              jsrTarget.markSubroutine(++numSubroutines)__            }_          }_          basicBlock = basicBlock.nextBasicBlock__        }_      }_      _      _      _      Label basicBlock = firstBasicBlock__      while (basicBlock != null) {_        if ((basicBlock.flags & Label.FLAG_SUBROUTINE_CALLER) != 0) {_          _          _          Label subroutine = basicBlock.outgoingEdges.nextEdge.successor__          subroutine.addSubroutineRetSuccessors(basicBlock)__        }_        basicBlock = basicBlock.nextBasicBlock__      }_    }__    _    _    _    _    Label listOfBlocksToProcess = firstBasicBlock__    listOfBlocksToProcess.nextListElement = Label.EMPTY_LIST__    int maxStackSize = maxStack__    while (listOfBlocksToProcess != Label.EMPTY_LIST) {_      _      _      _      Label basicBlock = listOfBlocksToProcess__      listOfBlocksToProcess = listOfBlocksToProcess.nextListElement__      _      int inputStackTop = basicBlock.inputStackSize__      int maxBlockStackSize = inputStackTop + basicBlock.outputStackMax__      _      if (maxBlockStackSize > maxStackSize) {_        maxStackSize = maxBlockStackSize__      }_      _      _      Edge outgoingEdge = basicBlock.outgoingEdges__      if ((basicBlock.flags & Label.FLAG_SUBROUTINE_CALLER) != 0) {_        _        _        _        _        outgoingEdge = outgoingEdge.nextEdge__      }_      while (outgoingEdge != null) {_        Label successorBlock = outgoingEdge.successor__        if (successorBlock.nextListElement == null) {_          successorBlock.inputStackSize =_              (short) (outgoingEdge.info == Edge.EXCEPTION ? 1 : inputStackTop + outgoingEdge.info)__          successorBlock.nextListElement = listOfBlocksToProcess__          listOfBlocksToProcess = successorBlock__        }_        outgoingEdge = outgoingEdge.nextEdge__      }_    }_    this.maxStack = maxStackSize__  };computes,the,maximum,stack,size,of,the,method;private,void,compute,max,stack,and,local,handler,handler,first,handler,while,handler,null,label,handler,block,handler,handler,pc,label,handler,range,block,handler,start,pc,label,handler,range,end,handler,end,pc,while,handler,range,block,handler,range,end,if,handler,range,block,flags,label,0,handler,range,block,outgoing,edges,new,edge,edge,exception,handler,block,handler,range,block,outgoing,edges,else,handler,range,block,outgoing,edges,next,edge,next,edge,new,edge,edge,exception,handler,block,handler,range,block,outgoing,edges,next,edge,next,edge,handler,range,block,handler,range,block,next,basic,block,handler,handler,next,handler,if,has,subroutines,short,num,subroutines,1,first,basic,block,mark,subroutine,num,subroutines,for,short,current,subroutine,1,current,subroutine,num,subroutines,current,subroutine,label,basic,block,first,basic,block,while,basic,block,null,if,basic,block,flags,label,0,basic,block,subroutine,id,current,subroutine,label,jsr,target,basic,block,outgoing,edges,next,edge,successor,if,jsr,target,subroutine,id,0,jsr,target,mark,subroutine,num,subroutines,basic,block,basic,block,next,basic,block,label,basic,block,first,basic,block,while,basic,block,null,if,basic,block,flags,label,0,label,subroutine,basic,block,outgoing,edges,next,edge,successor,subroutine,add,subroutine,ret,successors,basic,block,basic,block,basic,block,next,basic,block,label,list,of,blocks,to,process,first,basic,block,list,of,blocks,to,process,next,list,element,label,int,max,stack,size,max,stack,while,list,of,blocks,to,process,label,label,basic,block,list,of,blocks,to,process,list,of,blocks,to,process,list,of,blocks,to,process,next,list,element,int,input,stack,top,basic,block,input,stack,size,int,max,block,stack,size,input,stack,top,basic,block,output,stack,max,if,max,block,stack,size,max,stack,size,max,stack,size,max,block,stack,size,edge,outgoing,edge,basic,block,outgoing,edges,if,basic,block,flags,label,0,outgoing,edge,outgoing,edge,next,edge,while,outgoing,edge,null,label,successor,block,outgoing,edge,successor,if,successor,block,next,list,element,null,successor,block,input,stack,size,short,outgoing,edge,info,edge,exception,1,input,stack,top,outgoing,edge,info,successor,block,next,list,element,list,of,blocks,to,process,list,of,blocks,to,process,successor,block,outgoing,edge,outgoing,edge,next,edge,this,max,stack,max,stack,size
MethodWriter -> private void computeMaxStackAndLocal();1536664245;Computes the maximum stack size of the method.;private void computeMaxStackAndLocal() {_    _    Handler handler = firstHandler__    while (handler != null) {_      Label handlerBlock = handler.handlerPc__      Label handlerRangeBlock = handler.startPc__      Label handlerRangeEnd = handler.endPc__      _      while (handlerRangeBlock != handlerRangeEnd) {_        if ((handlerRangeBlock.flags & Label.FLAG_SUBROUTINE_CALLER) == 0) {_          handlerRangeBlock.outgoingEdges =_              new Edge(Edge.EXCEPTION, handlerBlock, handlerRangeBlock.outgoingEdges)__        } else {_          _          _          _          handlerRangeBlock.outgoingEdges.nextEdge.nextEdge =_              new Edge(_                  Edge.EXCEPTION, handlerBlock, handlerRangeBlock.outgoingEdges.nextEdge.nextEdge)__        }_        handlerRangeBlock = handlerRangeBlock.nextBasicBlock__      }_      handler = handler.nextHandler__    }__    _    if (hasSubroutines) {_      _      _      short numSubroutines = 1__      firstBasicBlock.markSubroutine(numSubroutines)__      _      _      for (short currentSubroutine = 1_ currentSubroutine <= numSubroutines_ ++currentSubroutine) {_        Label basicBlock = firstBasicBlock__        while (basicBlock != null) {_          if ((basicBlock.flags & Label.FLAG_SUBROUTINE_CALLER) != 0_              && basicBlock.subroutineId == currentSubroutine) {_            Label jsrTarget = basicBlock.outgoingEdges.nextEdge.successor__            if (jsrTarget.subroutineId == 0) {_              _              jsrTarget.markSubroutine(++numSubroutines)__            }_          }_          basicBlock = basicBlock.nextBasicBlock__        }_      }_      _      _      _      Label basicBlock = firstBasicBlock__      while (basicBlock != null) {_        if ((basicBlock.flags & Label.FLAG_SUBROUTINE_CALLER) != 0) {_          _          _          Label subroutine = basicBlock.outgoingEdges.nextEdge.successor__          subroutine.addSubroutineRetSuccessors(basicBlock)__        }_        basicBlock = basicBlock.nextBasicBlock__      }_    }__    _    _    _    _    Label listOfBlocksToProcess = firstBasicBlock__    listOfBlocksToProcess.nextListElement = Label.EMPTY_LIST__    int maxStackSize = maxStack__    while (listOfBlocksToProcess != Label.EMPTY_LIST) {_      _      _      _      Label basicBlock = listOfBlocksToProcess__      listOfBlocksToProcess = listOfBlocksToProcess.nextListElement__      _      int inputStackTop = basicBlock.inputStackSize__      int maxBlockStackSize = inputStackTop + basicBlock.outputStackMax__      _      if (maxBlockStackSize > maxStackSize) {_        maxStackSize = maxBlockStackSize__      }_      _      _      Edge outgoingEdge = basicBlock.outgoingEdges__      if ((basicBlock.flags & Label.FLAG_SUBROUTINE_CALLER) != 0) {_        _        _        _        _        outgoingEdge = outgoingEdge.nextEdge__      }_      while (outgoingEdge != null) {_        Label successorBlock = outgoingEdge.successor__        if (successorBlock.nextListElement == null) {_          successorBlock.inputStackSize =_              (short) (outgoingEdge.info == Edge.EXCEPTION ? 1 : inputStackTop + outgoingEdge.info)__          successorBlock.nextListElement = listOfBlocksToProcess__          listOfBlocksToProcess = successorBlock__        }_        outgoingEdge = outgoingEdge.nextEdge__      }_    }_    this.maxStack = maxStackSize__  };computes,the,maximum,stack,size,of,the,method;private,void,compute,max,stack,and,local,handler,handler,first,handler,while,handler,null,label,handler,block,handler,handler,pc,label,handler,range,block,handler,start,pc,label,handler,range,end,handler,end,pc,while,handler,range,block,handler,range,end,if,handler,range,block,flags,label,0,handler,range,block,outgoing,edges,new,edge,edge,exception,handler,block,handler,range,block,outgoing,edges,else,handler,range,block,outgoing,edges,next,edge,next,edge,new,edge,edge,exception,handler,block,handler,range,block,outgoing,edges,next,edge,next,edge,handler,range,block,handler,range,block,next,basic,block,handler,handler,next,handler,if,has,subroutines,short,num,subroutines,1,first,basic,block,mark,subroutine,num,subroutines,for,short,current,subroutine,1,current,subroutine,num,subroutines,current,subroutine,label,basic,block,first,basic,block,while,basic,block,null,if,basic,block,flags,label,0,basic,block,subroutine,id,current,subroutine,label,jsr,target,basic,block,outgoing,edges,next,edge,successor,if,jsr,target,subroutine,id,0,jsr,target,mark,subroutine,num,subroutines,basic,block,basic,block,next,basic,block,label,basic,block,first,basic,block,while,basic,block,null,if,basic,block,flags,label,0,label,subroutine,basic,block,outgoing,edges,next,edge,successor,subroutine,add,subroutine,ret,successors,basic,block,basic,block,basic,block,next,basic,block,label,list,of,blocks,to,process,first,basic,block,list,of,blocks,to,process,next,list,element,label,int,max,stack,size,max,stack,while,list,of,blocks,to,process,label,label,basic,block,list,of,blocks,to,process,list,of,blocks,to,process,list,of,blocks,to,process,next,list,element,int,input,stack,top,basic,block,input,stack,size,int,max,block,stack,size,input,stack,top,basic,block,output,stack,max,if,max,block,stack,size,max,stack,size,max,stack,size,max,block,stack,size,edge,outgoing,edge,basic,block,outgoing,edges,if,basic,block,flags,label,0,outgoing,edge,outgoing,edge,next,edge,while,outgoing,edge,null,label,successor,block,outgoing,edge,successor,if,successor,block,next,list,element,null,successor,block,input,stack,size,short,outgoing,edge,info,edge,exception,1,input,stack,top,outgoing,edge,info,successor,block,next,list,element,list,of,blocks,to,process,list,of,blocks,to,process,successor,block,outgoing,edge,outgoing,edge,next,edge,this,max,stack,max,stack,size
MethodWriter -> private void computeMaxStackAndLocal();1537204147;Computes the maximum stack size of the method.;private void computeMaxStackAndLocal() {_    _    Handler handler = firstHandler__    while (handler != null) {_      Label handlerBlock = handler.handlerPc__      Label handlerRangeBlock = handler.startPc__      Label handlerRangeEnd = handler.endPc__      _      while (handlerRangeBlock != handlerRangeEnd) {_        if ((handlerRangeBlock.flags & Label.FLAG_SUBROUTINE_CALLER) == 0) {_          handlerRangeBlock.outgoingEdges =_              new Edge(Edge.EXCEPTION, handlerBlock, handlerRangeBlock.outgoingEdges)__        } else {_          _          _          _          handlerRangeBlock.outgoingEdges.nextEdge.nextEdge =_              new Edge(_                  Edge.EXCEPTION, handlerBlock, handlerRangeBlock.outgoingEdges.nextEdge.nextEdge)__        }_        handlerRangeBlock = handlerRangeBlock.nextBasicBlock__      }_      handler = handler.nextHandler__    }__    _    if (hasSubroutines) {_      _      _      short numSubroutines = 1__      firstBasicBlock.markSubroutine(numSubroutines)__      _      _      for (short currentSubroutine = 1_ currentSubroutine <= numSubroutines_ ++currentSubroutine) {_        Label basicBlock = firstBasicBlock__        while (basicBlock != null) {_          if ((basicBlock.flags & Label.FLAG_SUBROUTINE_CALLER) != 0_              && basicBlock.subroutineId == currentSubroutine) {_            Label jsrTarget = basicBlock.outgoingEdges.nextEdge.successor__            if (jsrTarget.subroutineId == 0) {_              _              jsrTarget.markSubroutine(++numSubroutines)__            }_          }_          basicBlock = basicBlock.nextBasicBlock__        }_      }_      _      _      _      Label basicBlock = firstBasicBlock__      while (basicBlock != null) {_        if ((basicBlock.flags & Label.FLAG_SUBROUTINE_CALLER) != 0) {_          _          _          Label subroutine = basicBlock.outgoingEdges.nextEdge.successor__          subroutine.addSubroutineRetSuccessors(basicBlock)__        }_        basicBlock = basicBlock.nextBasicBlock__      }_    }__    _    _    _    _    Label listOfBlocksToProcess = firstBasicBlock__    listOfBlocksToProcess.nextListElement = Label.EMPTY_LIST__    int maxStackSize = maxStack__    while (listOfBlocksToProcess != Label.EMPTY_LIST) {_      _      _      _      Label basicBlock = listOfBlocksToProcess__      listOfBlocksToProcess = listOfBlocksToProcess.nextListElement__      _      int inputStackTop = basicBlock.inputStackSize__      int maxBlockStackSize = inputStackTop + basicBlock.outputStackMax__      _      if (maxBlockStackSize > maxStackSize) {_        maxStackSize = maxBlockStackSize__      }_      _      _      Edge outgoingEdge = basicBlock.outgoingEdges__      if ((basicBlock.flags & Label.FLAG_SUBROUTINE_CALLER) != 0) {_        _        _        _        _        outgoingEdge = outgoingEdge.nextEdge__      }_      while (outgoingEdge != null) {_        Label successorBlock = outgoingEdge.successor__        if (successorBlock.nextListElement == null) {_          successorBlock.inputStackSize =_              (short) (outgoingEdge.info == Edge.EXCEPTION ? 1 : inputStackTop + outgoingEdge.info)__          successorBlock.nextListElement = listOfBlocksToProcess__          listOfBlocksToProcess = successorBlock__        }_        outgoingEdge = outgoingEdge.nextEdge__      }_    }_    this.maxStack = maxStackSize__  };computes,the,maximum,stack,size,of,the,method;private,void,compute,max,stack,and,local,handler,handler,first,handler,while,handler,null,label,handler,block,handler,handler,pc,label,handler,range,block,handler,start,pc,label,handler,range,end,handler,end,pc,while,handler,range,block,handler,range,end,if,handler,range,block,flags,label,0,handler,range,block,outgoing,edges,new,edge,edge,exception,handler,block,handler,range,block,outgoing,edges,else,handler,range,block,outgoing,edges,next,edge,next,edge,new,edge,edge,exception,handler,block,handler,range,block,outgoing,edges,next,edge,next,edge,handler,range,block,handler,range,block,next,basic,block,handler,handler,next,handler,if,has,subroutines,short,num,subroutines,1,first,basic,block,mark,subroutine,num,subroutines,for,short,current,subroutine,1,current,subroutine,num,subroutines,current,subroutine,label,basic,block,first,basic,block,while,basic,block,null,if,basic,block,flags,label,0,basic,block,subroutine,id,current,subroutine,label,jsr,target,basic,block,outgoing,edges,next,edge,successor,if,jsr,target,subroutine,id,0,jsr,target,mark,subroutine,num,subroutines,basic,block,basic,block,next,basic,block,label,basic,block,first,basic,block,while,basic,block,null,if,basic,block,flags,label,0,label,subroutine,basic,block,outgoing,edges,next,edge,successor,subroutine,add,subroutine,ret,successors,basic,block,basic,block,basic,block,next,basic,block,label,list,of,blocks,to,process,first,basic,block,list,of,blocks,to,process,next,list,element,label,int,max,stack,size,max,stack,while,list,of,blocks,to,process,label,label,basic,block,list,of,blocks,to,process,list,of,blocks,to,process,list,of,blocks,to,process,next,list,element,int,input,stack,top,basic,block,input,stack,size,int,max,block,stack,size,input,stack,top,basic,block,output,stack,max,if,max,block,stack,size,max,stack,size,max,stack,size,max,block,stack,size,edge,outgoing,edge,basic,block,outgoing,edges,if,basic,block,flags,label,0,outgoing,edge,outgoing,edge,next,edge,while,outgoing,edge,null,label,successor,block,outgoing,edge,successor,if,successor,block,next,list,element,null,successor,block,input,stack,size,short,outgoing,edge,info,edge,exception,1,input,stack,top,outgoing,edge,info,successor,block,next,list,element,list,of,blocks,to,process,list,of,blocks,to,process,successor,block,outgoing,edge,outgoing,edge,next,edge,this,max,stack,max,stack,size
MethodWriter -> private void computeMaxStackAndLocal();1539119582;Computes the maximum stack size of the method.;private void computeMaxStackAndLocal() {_    _    Handler handler = firstHandler__    while (handler != null) {_      Label handlerBlock = handler.handlerPc__      Label handlerRangeBlock = handler.startPc__      Label handlerRangeEnd = handler.endPc__      _      while (handlerRangeBlock != handlerRangeEnd) {_        if ((handlerRangeBlock.flags & Label.FLAG_SUBROUTINE_CALLER) == 0) {_          handlerRangeBlock.outgoingEdges =_              new Edge(Edge.EXCEPTION, handlerBlock, handlerRangeBlock.outgoingEdges)__        } else {_          _          _          _          handlerRangeBlock.outgoingEdges.nextEdge.nextEdge =_              new Edge(_                  Edge.EXCEPTION, handlerBlock, handlerRangeBlock.outgoingEdges.nextEdge.nextEdge)__        }_        handlerRangeBlock = handlerRangeBlock.nextBasicBlock__      }_      handler = handler.nextHandler__    }__    _    if (hasSubroutines) {_      _      _      short numSubroutines = 1__      firstBasicBlock.markSubroutine(numSubroutines)__      _      _      for (short currentSubroutine = 1_ currentSubroutine <= numSubroutines_ ++currentSubroutine) {_        Label basicBlock = firstBasicBlock__        while (basicBlock != null) {_          if ((basicBlock.flags & Label.FLAG_SUBROUTINE_CALLER) != 0_              && basicBlock.subroutineId == currentSubroutine) {_            Label jsrTarget = basicBlock.outgoingEdges.nextEdge.successor__            if (jsrTarget.subroutineId == 0) {_              _              jsrTarget.markSubroutine(++numSubroutines)__            }_          }_          basicBlock = basicBlock.nextBasicBlock__        }_      }_      _      _      _      Label basicBlock = firstBasicBlock__      while (basicBlock != null) {_        if ((basicBlock.flags & Label.FLAG_SUBROUTINE_CALLER) != 0) {_          _          _          Label subroutine = basicBlock.outgoingEdges.nextEdge.successor__          subroutine.addSubroutineRetSuccessors(basicBlock)__        }_        basicBlock = basicBlock.nextBasicBlock__      }_    }__    _    _    _    _    Label listOfBlocksToProcess = firstBasicBlock__    listOfBlocksToProcess.nextListElement = Label.EMPTY_LIST__    int maxStackSize = maxStack__    while (listOfBlocksToProcess != Label.EMPTY_LIST) {_      _      _      _      Label basicBlock = listOfBlocksToProcess__      listOfBlocksToProcess = listOfBlocksToProcess.nextListElement__      _      int inputStackTop = basicBlock.inputStackSize__      int maxBlockStackSize = inputStackTop + basicBlock.outputStackMax__      _      if (maxBlockStackSize > maxStackSize) {_        maxStackSize = maxBlockStackSize__      }_      _      _      Edge outgoingEdge = basicBlock.outgoingEdges__      if ((basicBlock.flags & Label.FLAG_SUBROUTINE_CALLER) != 0) {_        _        _        _        _        outgoingEdge = outgoingEdge.nextEdge__      }_      while (outgoingEdge != null) {_        Label successorBlock = outgoingEdge.successor__        if (successorBlock.nextListElement == null) {_          successorBlock.inputStackSize =_              (short) (outgoingEdge.info == Edge.EXCEPTION ? 1 : inputStackTop + outgoingEdge.info)__          successorBlock.nextListElement = listOfBlocksToProcess__          listOfBlocksToProcess = successorBlock__        }_        outgoingEdge = outgoingEdge.nextEdge__      }_    }_    this.maxStack = maxStackSize__  };computes,the,maximum,stack,size,of,the,method;private,void,compute,max,stack,and,local,handler,handler,first,handler,while,handler,null,label,handler,block,handler,handler,pc,label,handler,range,block,handler,start,pc,label,handler,range,end,handler,end,pc,while,handler,range,block,handler,range,end,if,handler,range,block,flags,label,0,handler,range,block,outgoing,edges,new,edge,edge,exception,handler,block,handler,range,block,outgoing,edges,else,handler,range,block,outgoing,edges,next,edge,next,edge,new,edge,edge,exception,handler,block,handler,range,block,outgoing,edges,next,edge,next,edge,handler,range,block,handler,range,block,next,basic,block,handler,handler,next,handler,if,has,subroutines,short,num,subroutines,1,first,basic,block,mark,subroutine,num,subroutines,for,short,current,subroutine,1,current,subroutine,num,subroutines,current,subroutine,label,basic,block,first,basic,block,while,basic,block,null,if,basic,block,flags,label,0,basic,block,subroutine,id,current,subroutine,label,jsr,target,basic,block,outgoing,edges,next,edge,successor,if,jsr,target,subroutine,id,0,jsr,target,mark,subroutine,num,subroutines,basic,block,basic,block,next,basic,block,label,basic,block,first,basic,block,while,basic,block,null,if,basic,block,flags,label,0,label,subroutine,basic,block,outgoing,edges,next,edge,successor,subroutine,add,subroutine,ret,successors,basic,block,basic,block,basic,block,next,basic,block,label,list,of,blocks,to,process,first,basic,block,list,of,blocks,to,process,next,list,element,label,int,max,stack,size,max,stack,while,list,of,blocks,to,process,label,label,basic,block,list,of,blocks,to,process,list,of,blocks,to,process,list,of,blocks,to,process,next,list,element,int,input,stack,top,basic,block,input,stack,size,int,max,block,stack,size,input,stack,top,basic,block,output,stack,max,if,max,block,stack,size,max,stack,size,max,stack,size,max,block,stack,size,edge,outgoing,edge,basic,block,outgoing,edges,if,basic,block,flags,label,0,outgoing,edge,outgoing,edge,next,edge,while,outgoing,edge,null,label,successor,block,outgoing,edge,successor,if,successor,block,next,list,element,null,successor,block,input,stack,size,short,outgoing,edge,info,edge,exception,1,input,stack,top,outgoing,edge,info,successor,block,next,list,element,list,of,blocks,to,process,list,of,blocks,to,process,successor,block,outgoing,edge,outgoing,edge,next,edge,this,max,stack,max,stack,size
MethodWriter -> int visitFrameStart(final int offset, final int nLocal, final int nStack);1531241461;Starts the visit of a new stack map frame, stored in {@link #currentFrame}.__@param offset the bytecode offset of the instruction to which the frame corresponds._@param nLocal the number of local variables in the frame._@param nStack the number of stack elements in the frame._@return the index of the next element to be written in this frame.;int visitFrameStart(final int offset, final int nLocal, final int nStack) {_    int frameLength = 3 + nLocal + nStack__    if (currentFrame == null || currentFrame.length < frameLength) {_      currentFrame = new int[frameLength]__    }_    currentFrame[0] = offset__    currentFrame[1] = nLocal__    currentFrame[2] = nStack__    return 3__  };starts,the,visit,of,a,new,stack,map,frame,stored,in,link,current,frame,param,offset,the,bytecode,offset,of,the,instruction,to,which,the,frame,corresponds,param,n,local,the,number,of,local,variables,in,the,frame,param,n,stack,the,number,of,stack,elements,in,the,frame,return,the,index,of,the,next,element,to,be,written,in,this,frame;int,visit,frame,start,final,int,offset,final,int,n,local,final,int,n,stack,int,frame,length,3,n,local,n,stack,if,current,frame,null,current,frame,length,frame,length,current,frame,new,int,frame,length,current,frame,0,offset,current,frame,1,n,local,current,frame,2,n,stack,return,3
MethodWriter -> int visitFrameStart(final int offset, final int nLocal, final int nStack);1536664245;Starts the visit of a new stack map frame, stored in {@link #currentFrame}.__@param offset the bytecode offset of the instruction to which the frame corresponds._@param nLocal the number of local variables in the frame._@param nStack the number of stack elements in the frame._@return the index of the next element to be written in this frame.;int visitFrameStart(final int offset, final int nLocal, final int nStack) {_    int frameLength = 3 + nLocal + nStack__    if (currentFrame == null || currentFrame.length < frameLength) {_      currentFrame = new int[frameLength]__    }_    currentFrame[0] = offset__    currentFrame[1] = nLocal__    currentFrame[2] = nStack__    return 3__  };starts,the,visit,of,a,new,stack,map,frame,stored,in,link,current,frame,param,offset,the,bytecode,offset,of,the,instruction,to,which,the,frame,corresponds,param,n,local,the,number,of,local,variables,in,the,frame,param,n,stack,the,number,of,stack,elements,in,the,frame,return,the,index,of,the,next,element,to,be,written,in,this,frame;int,visit,frame,start,final,int,offset,final,int,n,local,final,int,n,stack,int,frame,length,3,n,local,n,stack,if,current,frame,null,current,frame,length,frame,length,current,frame,new,int,frame,length,current,frame,0,offset,current,frame,1,n,local,current,frame,2,n,stack,return,3
MethodWriter -> final int getSize();1366718246;Returns the size of the bytecode of this method.__@return the size of the bytecode of this method.;final int getSize() {_        if (classReaderOffset != 0) {_            return 6 + classReaderLength__        }_        if (resize) {_            _            if (ClassReader.RESIZE) {_                resizeInstructions()__            } else {_                throw new RuntimeException("Method code too large!")__            }_        }_        int size = 8__        if (code.length > 0) {_            if (code.length > 65536) {_                throw new RuntimeException("Method code too large!")__            }_            cw.newUTF8("Code")__            size += 18 + code.length + 8 * handlerCount__            if (localVar != null) {_                cw.newUTF8("LocalVariableTable")__                size += 8 + localVar.length__            }_            if (localVarType != null) {_                cw.newUTF8("LocalVariableTypeTable")__                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                cw.newUTF8("LineNumberTable")__                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                cw.newUTF8(zip ? "StackMapTable" : "StackMap")__                size += 8 + stackMap.length__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_        }_        if (exceptionCount > 0) {_            cw.newUTF8("Exceptions")__            size += 8 + 2 * exceptionCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                cw.newUTF8("Synthetic")__                size += 6__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            cw.newUTF8("Deprecated")__            size += 6__        }_        if (ClassReader.SIGNATURES && signature != null) {_            cw.newUTF8("Signature")__            cw.newUTF8(signature)__            size += 8__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            cw.newUTF8("AnnotationDefault")__            size += 6 + annd.length__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            cw.newUTF8("RuntimeVisibleAnnotations")__            size += 8 + anns.getSize()__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            cw.newUTF8("RuntimeInvisibleAnnotations")__            size += 8 + ianns.getSize()__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            cw.newUTF8("RuntimeVisibleParameterAnnotations")__            size += 7 + 2 * (panns.length - synthetics)__            for (int i = panns.length - 1_ i >= synthetics_ --i) {_                size += panns[i] == null ? 0 : panns[i].getSize()__            }_        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            cw.newUTF8("RuntimeInvisibleParameterAnnotations")__            size += 7 + 2 * (ipanns.length - synthetics)__            for (int i = ipanns.length - 1_ i >= synthetics_ --i) {_                size += ipanns[i] == null ? 0 : ipanns[i].getSize()__            }_        }_        if (attrs != null) {_            size += attrs.getSize(cw, null, 0, -1, -1)__        }_        return size__    };returns,the,size,of,the,bytecode,of,this,method,return,the,size,of,the,bytecode,of,this,method;final,int,get,size,if,class,reader,offset,0,return,6,class,reader,length,if,resize,if,class,reader,resize,resize,instructions,else,throw,new,runtime,exception,method,code,too,large,int,size,8,if,code,length,0,if,code,length,65536,throw,new,runtime,exception,method,code,too,large,cw,new,utf8,code,size,18,code,length,8,handler,count,if,local,var,null,cw,new,utf8,local,variable,table,size,8,local,var,length,if,local,var,type,null,cw,new,utf8,local,variable,type,table,size,8,local,var,type,length,if,line,number,null,cw,new,utf8,line,number,table,size,8,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,cw,new,utf8,zip,stack,map,table,stack,map,size,8,stack,map,length,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,if,exception,count,0,cw,new,utf8,exceptions,size,8,2,exception,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,cw,new,utf8,synthetic,size,6,if,access,opcodes,0,cw,new,utf8,deprecated,size,6,if,class,reader,signatures,signature,null,cw,new,utf8,signature,cw,new,utf8,signature,size,8,if,class,reader,annotations,annd,null,cw,new,utf8,annotation,default,size,6,annd,length,if,class,reader,annotations,anns,null,cw,new,utf8,runtime,visible,annotations,size,8,anns,get,size,if,class,reader,annotations,ianns,null,cw,new,utf8,runtime,invisible,annotations,size,8,ianns,get,size,if,class,reader,annotations,panns,null,cw,new,utf8,runtime,visible,parameter,annotations,size,7,2,panns,length,synthetics,for,int,i,panns,length,1,i,synthetics,i,size,panns,i,null,0,panns,i,get,size,if,class,reader,annotations,ipanns,null,cw,new,utf8,runtime,invisible,parameter,annotations,size,7,2,ipanns,length,synthetics,for,int,i,ipanns,length,1,i,synthetics,i,size,ipanns,i,null,0,ipanns,i,get,size,if,attrs,null,size,attrs,get,size,cw,null,0,1,1,return,size
MethodWriter -> final int getSize();1395273982;Returns the size of the bytecode of this method.__@return the size of the bytecode of this method.;final int getSize() {_        if (classReaderOffset != 0) {_            return 6 + classReaderLength__        }_        if (resize) {_            _            if (ClassReader.RESIZE) {_                resizeInstructions()__            } else {_                throw new RuntimeException("Method code too large!")__            }_        }_        int size = 8__        if (code.length > 0) {_            if (code.length > 65536) {_                throw new RuntimeException("Method code too large!")__            }_            cw.newUTF8("Code")__            size += 18 + code.length + 8 * handlerCount__            if (localVar != null) {_                cw.newUTF8("LocalVariableTable")__                size += 8 + localVar.length__            }_            if (localVarType != null) {_                cw.newUTF8("LocalVariableTypeTable")__                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                cw.newUTF8("LineNumberTable")__                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                cw.newUTF8(zip ? "StackMapTable" : "StackMap")__                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                cw.newUTF8("RuntimeVisibleTypeAnnotations")__                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                cw.newUTF8("RuntimeInvisibleTypeAnnotations")__                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_        }_        if (exceptionCount > 0) {_            cw.newUTF8("Exceptions")__            size += 8 + 2 * exceptionCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                cw.newUTF8("Synthetic")__                size += 6__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            cw.newUTF8("Deprecated")__            size += 6__        }_        if (ClassReader.SIGNATURES && signature != null) {_            cw.newUTF8("Signature")__            cw.newUTF8(signature)__            size += 8__        }_        if (methodParameters != null) {_            cw.newUTF8("MethodParameters")__            size += 7 + methodParameters.length__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            cw.newUTF8("AnnotationDefault")__            size += 6 + annd.length__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            cw.newUTF8("RuntimeVisibleAnnotations")__            size += 8 + anns.getSize()__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            cw.newUTF8("RuntimeInvisibleAnnotations")__            size += 8 + ianns.getSize()__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            cw.newUTF8("RuntimeVisibleTypeAnnotations")__            size += 8 + tanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            cw.newUTF8("RuntimeInvisibleTypeAnnotations")__            size += 8 + itanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            cw.newUTF8("RuntimeVisibleParameterAnnotations")__            size += 7 + 2 * (panns.length - synthetics)__            for (int i = panns.length - 1_ i >= synthetics_ --i) {_                size += panns[i] == null ? 0 : panns[i].getSize()__            }_        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            cw.newUTF8("RuntimeInvisibleParameterAnnotations")__            size += 7 + 2 * (ipanns.length - synthetics)__            for (int i = ipanns.length - 1_ i >= synthetics_ --i) {_                size += ipanns[i] == null ? 0 : ipanns[i].getSize()__            }_        }_        if (attrs != null) {_            size += attrs.getSize(cw, null, 0, -1, -1)__        }_        return size__    };returns,the,size,of,the,bytecode,of,this,method,return,the,size,of,the,bytecode,of,this,method;final,int,get,size,if,class,reader,offset,0,return,6,class,reader,length,if,resize,if,class,reader,resize,resize,instructions,else,throw,new,runtime,exception,method,code,too,large,int,size,8,if,code,length,0,if,code,length,65536,throw,new,runtime,exception,method,code,too,large,cw,new,utf8,code,size,18,code,length,8,handler,count,if,local,var,null,cw,new,utf8,local,variable,table,size,8,local,var,length,if,local,var,type,null,cw,new,utf8,local,variable,type,table,size,8,local,var,type,length,if,line,number,null,cw,new,utf8,line,number,table,size,8,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,cw,new,utf8,zip,stack,map,table,stack,map,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,if,exception,count,0,cw,new,utf8,exceptions,size,8,2,exception,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,cw,new,utf8,synthetic,size,6,if,access,opcodes,0,cw,new,utf8,deprecated,size,6,if,class,reader,signatures,signature,null,cw,new,utf8,signature,cw,new,utf8,signature,size,8,if,method,parameters,null,cw,new,utf8,method,parameters,size,7,method,parameters,length,if,class,reader,annotations,annd,null,cw,new,utf8,annotation,default,size,6,annd,length,if,class,reader,annotations,anns,null,cw,new,utf8,runtime,visible,annotations,size,8,anns,get,size,if,class,reader,annotations,ianns,null,cw,new,utf8,runtime,invisible,annotations,size,8,ianns,get,size,if,class,reader,annotations,tanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,tanns,get,size,if,class,reader,annotations,itanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,itanns,get,size,if,class,reader,annotations,panns,null,cw,new,utf8,runtime,visible,parameter,annotations,size,7,2,panns,length,synthetics,for,int,i,panns,length,1,i,synthetics,i,size,panns,i,null,0,panns,i,get,size,if,class,reader,annotations,ipanns,null,cw,new,utf8,runtime,invisible,parameter,annotations,size,7,2,ipanns,length,synthetics,for,int,i,ipanns,length,1,i,synthetics,i,size,ipanns,i,null,0,ipanns,i,get,size,if,attrs,null,size,attrs,get,size,cw,null,0,1,1,return,size
MethodWriter -> final int getSize();1395744691;Returns the size of the bytecode of this method.__@return the size of the bytecode of this method.;final int getSize() {_        if (classReaderOffset != 0) {_            return 6 + classReaderLength__        }_        int size = 8__        if (code.length > 0) {_            if (code.length > 65536) {_                throw new RuntimeException("Method code too large!")__            }_            cw.newUTF8("Code")__            size += 18 + code.length + 8 * handlerCount__            if (localVar != null) {_                cw.newUTF8("LocalVariableTable")__                size += 8 + localVar.length__            }_            if (localVarType != null) {_                cw.newUTF8("LocalVariableTypeTable")__                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                cw.newUTF8("LineNumberTable")__                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                cw.newUTF8(zip ? "StackMapTable" : "StackMap")__                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                cw.newUTF8("RuntimeVisibleTypeAnnotations")__                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                cw.newUTF8("RuntimeInvisibleTypeAnnotations")__                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_        }_        if (exceptionCount > 0) {_            cw.newUTF8("Exceptions")__            size += 8 + 2 * exceptionCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                cw.newUTF8("Synthetic")__                size += 6__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            cw.newUTF8("Deprecated")__            size += 6__        }_        if (ClassReader.SIGNATURES && signature != null) {_            cw.newUTF8("Signature")__            cw.newUTF8(signature)__            size += 8__        }_        if (methodParameters != null) {_            cw.newUTF8("MethodParameters")__            size += 7 + methodParameters.length__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            cw.newUTF8("AnnotationDefault")__            size += 6 + annd.length__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            cw.newUTF8("RuntimeVisibleAnnotations")__            size += 8 + anns.getSize()__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            cw.newUTF8("RuntimeInvisibleAnnotations")__            size += 8 + ianns.getSize()__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            cw.newUTF8("RuntimeVisibleTypeAnnotations")__            size += 8 + tanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            cw.newUTF8("RuntimeInvisibleTypeAnnotations")__            size += 8 + itanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            cw.newUTF8("RuntimeVisibleParameterAnnotations")__            size += 7 + 2 * (panns.length - synthetics)__            for (int i = panns.length - 1_ i >= synthetics_ --i) {_                size += panns[i] == null ? 0 : panns[i].getSize()__            }_        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            cw.newUTF8("RuntimeInvisibleParameterAnnotations")__            size += 7 + 2 * (ipanns.length - synthetics)__            for (int i = ipanns.length - 1_ i >= synthetics_ --i) {_                size += ipanns[i] == null ? 0 : ipanns[i].getSize()__            }_        }_        if (attrs != null) {_            size += attrs.getSize(cw, null, 0, -1, -1)__        }_        return size__    };returns,the,size,of,the,bytecode,of,this,method,return,the,size,of,the,bytecode,of,this,method;final,int,get,size,if,class,reader,offset,0,return,6,class,reader,length,int,size,8,if,code,length,0,if,code,length,65536,throw,new,runtime,exception,method,code,too,large,cw,new,utf8,code,size,18,code,length,8,handler,count,if,local,var,null,cw,new,utf8,local,variable,table,size,8,local,var,length,if,local,var,type,null,cw,new,utf8,local,variable,type,table,size,8,local,var,type,length,if,line,number,null,cw,new,utf8,line,number,table,size,8,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,cw,new,utf8,zip,stack,map,table,stack,map,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,if,exception,count,0,cw,new,utf8,exceptions,size,8,2,exception,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,cw,new,utf8,synthetic,size,6,if,access,opcodes,0,cw,new,utf8,deprecated,size,6,if,class,reader,signatures,signature,null,cw,new,utf8,signature,cw,new,utf8,signature,size,8,if,method,parameters,null,cw,new,utf8,method,parameters,size,7,method,parameters,length,if,class,reader,annotations,annd,null,cw,new,utf8,annotation,default,size,6,annd,length,if,class,reader,annotations,anns,null,cw,new,utf8,runtime,visible,annotations,size,8,anns,get,size,if,class,reader,annotations,ianns,null,cw,new,utf8,runtime,invisible,annotations,size,8,ianns,get,size,if,class,reader,annotations,tanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,tanns,get,size,if,class,reader,annotations,itanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,itanns,get,size,if,class,reader,annotations,panns,null,cw,new,utf8,runtime,visible,parameter,annotations,size,7,2,panns,length,synthetics,for,int,i,panns,length,1,i,synthetics,i,size,panns,i,null,0,panns,i,get,size,if,class,reader,annotations,ipanns,null,cw,new,utf8,runtime,invisible,parameter,annotations,size,7,2,ipanns,length,synthetics,for,int,i,ipanns,length,1,i,synthetics,i,size,ipanns,i,null,0,ipanns,i,get,size,if,attrs,null,size,attrs,get,size,cw,null,0,1,1,return,size
MethodWriter -> final int getSize();1400531367;Returns the size of the bytecode of this method.__@return the size of the bytecode of this method.;final int getSize() {_        if (classReaderOffset != 0) {_            return 6 + classReaderLength__        }_        int size = 8__        if (code.length > 0) {_            if (code.length > 65536) {_                throw new RuntimeException("Method code too large!")__            }_            cw.newUTF8("Code")__            size += 18 + code.length + 8 * handlerCount__            if (localVar != null) {_                cw.newUTF8("LocalVariableTable")__                size += 8 + localVar.length__            }_            if (localVarType != null) {_                cw.newUTF8("LocalVariableTypeTable")__                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                cw.newUTF8("LineNumberTable")__                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                cw.newUTF8(zip ? "StackMapTable" : "StackMap")__                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                cw.newUTF8("RuntimeVisibleTypeAnnotations")__                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                cw.newUTF8("RuntimeInvisibleTypeAnnotations")__                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_        }_        if (exceptionCount > 0) {_            cw.newUTF8("Exceptions")__            size += 8 + 2 * exceptionCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                cw.newUTF8("Synthetic")__                size += 6__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            cw.newUTF8("Deprecated")__            size += 6__        }_        if (ClassReader.SIGNATURES && signature != null) {_            cw.newUTF8("Signature")__            cw.newUTF8(signature)__            size += 8__        }_        if (methodParameters != null) {_            cw.newUTF8("MethodParameters")__            size += 7 + methodParameters.length__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            cw.newUTF8("AnnotationDefault")__            size += 6 + annd.length__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            cw.newUTF8("RuntimeVisibleAnnotations")__            size += 8 + anns.getSize()__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            cw.newUTF8("RuntimeInvisibleAnnotations")__            size += 8 + ianns.getSize()__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            cw.newUTF8("RuntimeVisibleTypeAnnotations")__            size += 8 + tanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            cw.newUTF8("RuntimeInvisibleTypeAnnotations")__            size += 8 + itanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            cw.newUTF8("RuntimeVisibleParameterAnnotations")__            size += 7 + 2 * (panns.length - synthetics)__            for (int i = panns.length - 1_ i >= synthetics_ --i) {_                size += panns[i] == null ? 0 : panns[i].getSize()__            }_        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            cw.newUTF8("RuntimeInvisibleParameterAnnotations")__            size += 7 + 2 * (ipanns.length - synthetics)__            for (int i = ipanns.length - 1_ i >= synthetics_ --i) {_                size += ipanns[i] == null ? 0 : ipanns[i].getSize()__            }_        }_        if (attrs != null) {_            size += attrs.getSize(cw, null, 0, -1, -1)__        }_        return size__    };returns,the,size,of,the,bytecode,of,this,method,return,the,size,of,the,bytecode,of,this,method;final,int,get,size,if,class,reader,offset,0,return,6,class,reader,length,int,size,8,if,code,length,0,if,code,length,65536,throw,new,runtime,exception,method,code,too,large,cw,new,utf8,code,size,18,code,length,8,handler,count,if,local,var,null,cw,new,utf8,local,variable,table,size,8,local,var,length,if,local,var,type,null,cw,new,utf8,local,variable,type,table,size,8,local,var,type,length,if,line,number,null,cw,new,utf8,line,number,table,size,8,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,cw,new,utf8,zip,stack,map,table,stack,map,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,if,exception,count,0,cw,new,utf8,exceptions,size,8,2,exception,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,cw,new,utf8,synthetic,size,6,if,access,opcodes,0,cw,new,utf8,deprecated,size,6,if,class,reader,signatures,signature,null,cw,new,utf8,signature,cw,new,utf8,signature,size,8,if,method,parameters,null,cw,new,utf8,method,parameters,size,7,method,parameters,length,if,class,reader,annotations,annd,null,cw,new,utf8,annotation,default,size,6,annd,length,if,class,reader,annotations,anns,null,cw,new,utf8,runtime,visible,annotations,size,8,anns,get,size,if,class,reader,annotations,ianns,null,cw,new,utf8,runtime,invisible,annotations,size,8,ianns,get,size,if,class,reader,annotations,tanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,tanns,get,size,if,class,reader,annotations,itanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,itanns,get,size,if,class,reader,annotations,panns,null,cw,new,utf8,runtime,visible,parameter,annotations,size,7,2,panns,length,synthetics,for,int,i,panns,length,1,i,synthetics,i,size,panns,i,null,0,panns,i,get,size,if,class,reader,annotations,ipanns,null,cw,new,utf8,runtime,invisible,parameter,annotations,size,7,2,ipanns,length,synthetics,for,int,i,ipanns,length,1,i,synthetics,i,size,ipanns,i,null,0,ipanns,i,get,size,if,attrs,null,size,attrs,get,size,cw,null,0,1,1,return,size
MethodWriter -> final int getSize();1431006084;Returns the size of the bytecode of this method.__@return the size of the bytecode of this method.;final int getSize() {_        if (classReaderOffset != 0) {_            return 6 + classReaderLength__        }_        int size = 8__        if (code.length > 0) {_            if (code.length > 65536) {_                throw new RuntimeException("Method code too large!")__            }_            cw.newUTF8("Code")__            size += 18 + code.length + 8 * handlerCount__            if (localVar != null) {_                cw.newUTF8("LocalVariableTable")__                size += 8 + localVar.length__            }_            if (localVarType != null) {_                cw.newUTF8("LocalVariableTypeTable")__                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                cw.newUTF8("LineNumberTable")__                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                cw.newUTF8(zip ? "StackMapTable" : "StackMap")__                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                cw.newUTF8("RuntimeVisibleTypeAnnotations")__                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                cw.newUTF8("RuntimeInvisibleTypeAnnotations")__                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_        }_        if (exceptionCount > 0) {_            cw.newUTF8("Exceptions")__            size += 8 + 2 * exceptionCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                cw.newUTF8("Synthetic")__                size += 6__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            cw.newUTF8("Deprecated")__            size += 6__        }_        if (ClassReader.SIGNATURES && signature != null) {_            cw.newUTF8("Signature")__            cw.newUTF8(signature)__            size += 8__        }_        if (methodParameters != null) {_            cw.newUTF8("MethodParameters")__            size += 7 + methodParameters.length__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            cw.newUTF8("AnnotationDefault")__            size += 6 + annd.length__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            cw.newUTF8("RuntimeVisibleAnnotations")__            size += 8 + anns.getSize()__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            cw.newUTF8("RuntimeInvisibleAnnotations")__            size += 8 + ianns.getSize()__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            cw.newUTF8("RuntimeVisibleTypeAnnotations")__            size += 8 + tanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            cw.newUTF8("RuntimeInvisibleTypeAnnotations")__            size += 8 + itanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            cw.newUTF8("RuntimeVisibleParameterAnnotations")__            size += 7 + 2 * (panns.length - synthetics)__            for (int i = panns.length - 1_ i >= synthetics_ --i) {_                size += panns[i] == null ? 0 : panns[i].getSize()__            }_        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            cw.newUTF8("RuntimeInvisibleParameterAnnotations")__            size += 7 + 2 * (ipanns.length - synthetics)__            for (int i = ipanns.length - 1_ i >= synthetics_ --i) {_                size += ipanns[i] == null ? 0 : ipanns[i].getSize()__            }_        }_        if (attrs != null) {_            size += attrs.getSize(cw, null, 0, -1, -1)__        }_        return size__    };returns,the,size,of,the,bytecode,of,this,method,return,the,size,of,the,bytecode,of,this,method;final,int,get,size,if,class,reader,offset,0,return,6,class,reader,length,int,size,8,if,code,length,0,if,code,length,65536,throw,new,runtime,exception,method,code,too,large,cw,new,utf8,code,size,18,code,length,8,handler,count,if,local,var,null,cw,new,utf8,local,variable,table,size,8,local,var,length,if,local,var,type,null,cw,new,utf8,local,variable,type,table,size,8,local,var,type,length,if,line,number,null,cw,new,utf8,line,number,table,size,8,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,cw,new,utf8,zip,stack,map,table,stack,map,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,if,exception,count,0,cw,new,utf8,exceptions,size,8,2,exception,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,cw,new,utf8,synthetic,size,6,if,access,opcodes,0,cw,new,utf8,deprecated,size,6,if,class,reader,signatures,signature,null,cw,new,utf8,signature,cw,new,utf8,signature,size,8,if,method,parameters,null,cw,new,utf8,method,parameters,size,7,method,parameters,length,if,class,reader,annotations,annd,null,cw,new,utf8,annotation,default,size,6,annd,length,if,class,reader,annotations,anns,null,cw,new,utf8,runtime,visible,annotations,size,8,anns,get,size,if,class,reader,annotations,ianns,null,cw,new,utf8,runtime,invisible,annotations,size,8,ianns,get,size,if,class,reader,annotations,tanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,tanns,get,size,if,class,reader,annotations,itanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,itanns,get,size,if,class,reader,annotations,panns,null,cw,new,utf8,runtime,visible,parameter,annotations,size,7,2,panns,length,synthetics,for,int,i,panns,length,1,i,synthetics,i,size,panns,i,null,0,panns,i,get,size,if,class,reader,annotations,ipanns,null,cw,new,utf8,runtime,invisible,parameter,annotations,size,7,2,ipanns,length,synthetics,for,int,i,ipanns,length,1,i,synthetics,i,size,ipanns,i,null,0,ipanns,i,get,size,if,attrs,null,size,attrs,get,size,cw,null,0,1,1,return,size
MethodWriter -> final int getSize();1440705816;Returns the size of the bytecode of this method.__@return the size of the bytecode of this method.;final int getSize() {_        if (classReaderOffset != 0) {_            return 6 + classReaderLength__        }_        int size = 8__        if (code.length > 0) {_            if (code.length > 65535) {_                throw new RuntimeException("Method code too large!")__            }_            cw.newUTF8("Code")__            size += 18 + code.length + 8 * handlerCount__            if (localVar != null) {_                cw.newUTF8("LocalVariableTable")__                size += 8 + localVar.length__            }_            if (localVarType != null) {_                cw.newUTF8("LocalVariableTypeTable")__                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                cw.newUTF8("LineNumberTable")__                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                cw.newUTF8(zip ? "StackMapTable" : "StackMap")__                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                cw.newUTF8("RuntimeVisibleTypeAnnotations")__                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                cw.newUTF8("RuntimeInvisibleTypeAnnotations")__                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_        }_        if (exceptionCount > 0) {_            cw.newUTF8("Exceptions")__            size += 8 + 2 * exceptionCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                cw.newUTF8("Synthetic")__                size += 6__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            cw.newUTF8("Deprecated")__            size += 6__        }_        if (ClassReader.SIGNATURES && signature != null) {_            cw.newUTF8("Signature")__            cw.newUTF8(signature)__            size += 8__        }_        if (methodParameters != null) {_            cw.newUTF8("MethodParameters")__            size += 7 + methodParameters.length__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            cw.newUTF8("AnnotationDefault")__            size += 6 + annd.length__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            cw.newUTF8("RuntimeVisibleAnnotations")__            size += 8 + anns.getSize()__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            cw.newUTF8("RuntimeInvisibleAnnotations")__            size += 8 + ianns.getSize()__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            cw.newUTF8("RuntimeVisibleTypeAnnotations")__            size += 8 + tanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            cw.newUTF8("RuntimeInvisibleTypeAnnotations")__            size += 8 + itanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            cw.newUTF8("RuntimeVisibleParameterAnnotations")__            size += 7 + 2 * (panns.length - synthetics)__            for (int i = panns.length - 1_ i >= synthetics_ --i) {_                size += panns[i] == null ? 0 : panns[i].getSize()__            }_        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            cw.newUTF8("RuntimeInvisibleParameterAnnotations")__            size += 7 + 2 * (ipanns.length - synthetics)__            for (int i = ipanns.length - 1_ i >= synthetics_ --i) {_                size += ipanns[i] == null ? 0 : ipanns[i].getSize()__            }_        }_        if (attrs != null) {_            size += attrs.getSize(cw, null, 0, -1, -1)__        }_        return size__    };returns,the,size,of,the,bytecode,of,this,method,return,the,size,of,the,bytecode,of,this,method;final,int,get,size,if,class,reader,offset,0,return,6,class,reader,length,int,size,8,if,code,length,0,if,code,length,65535,throw,new,runtime,exception,method,code,too,large,cw,new,utf8,code,size,18,code,length,8,handler,count,if,local,var,null,cw,new,utf8,local,variable,table,size,8,local,var,length,if,local,var,type,null,cw,new,utf8,local,variable,type,table,size,8,local,var,type,length,if,line,number,null,cw,new,utf8,line,number,table,size,8,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,cw,new,utf8,zip,stack,map,table,stack,map,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,if,exception,count,0,cw,new,utf8,exceptions,size,8,2,exception,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,cw,new,utf8,synthetic,size,6,if,access,opcodes,0,cw,new,utf8,deprecated,size,6,if,class,reader,signatures,signature,null,cw,new,utf8,signature,cw,new,utf8,signature,size,8,if,method,parameters,null,cw,new,utf8,method,parameters,size,7,method,parameters,length,if,class,reader,annotations,annd,null,cw,new,utf8,annotation,default,size,6,annd,length,if,class,reader,annotations,anns,null,cw,new,utf8,runtime,visible,annotations,size,8,anns,get,size,if,class,reader,annotations,ianns,null,cw,new,utf8,runtime,invisible,annotations,size,8,ianns,get,size,if,class,reader,annotations,tanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,tanns,get,size,if,class,reader,annotations,itanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,itanns,get,size,if,class,reader,annotations,panns,null,cw,new,utf8,runtime,visible,parameter,annotations,size,7,2,panns,length,synthetics,for,int,i,panns,length,1,i,synthetics,i,size,panns,i,null,0,panns,i,get,size,if,class,reader,annotations,ipanns,null,cw,new,utf8,runtime,invisible,parameter,annotations,size,7,2,ipanns,length,synthetics,for,int,i,ipanns,length,1,i,synthetics,i,size,ipanns,i,null,0,ipanns,i,get,size,if,attrs,null,size,attrs,get,size,cw,null,0,1,1,return,size
MethodWriter -> final int getSize();1483093254;Returns the size of the bytecode of this method.__@return the size of the bytecode of this method.;final int getSize() {_        if (classReaderOffset != 0) {_            return 6 + classReaderLength__        }_        int size = 8__        if (code.length > 0) {_            if (code.length > 65535) {_                throw new RuntimeException("Method code too large!")__            }_            cw.newUTF8("Code")__            size += 18 + code.length + 8 * handlerCount__            if (localVar != null) {_                cw.newUTF8("LocalVariableTable")__                size += 8 + localVar.length__            }_            if (localVarType != null) {_                cw.newUTF8("LocalVariableTypeTable")__                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                cw.newUTF8("LineNumberTable")__                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                cw.newUTF8(zip ? "StackMapTable" : "StackMap")__                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                cw.newUTF8("RuntimeVisibleTypeAnnotations")__                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                cw.newUTF8("RuntimeInvisibleTypeAnnotations")__                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_        }_        if (exceptionCount > 0) {_            cw.newUTF8("Exceptions")__            size += 8 + 2 * exceptionCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                cw.newUTF8("Synthetic")__                size += 6__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            cw.newUTF8("Deprecated")__            size += 6__        }_        if (ClassReader.SIGNATURES && signature != null) {_            cw.newUTF8("Signature")__            cw.newUTF8(signature)__            size += 8__        }_        if (methodParameters != null) {_            cw.newUTF8("MethodParameters")__            size += 7 + methodParameters.length__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            cw.newUTF8("AnnotationDefault")__            size += 6 + annd.length__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            cw.newUTF8("RuntimeVisibleAnnotations")__            size += 8 + anns.getSize()__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            cw.newUTF8("RuntimeInvisibleAnnotations")__            size += 8 + ianns.getSize()__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            cw.newUTF8("RuntimeVisibleTypeAnnotations")__            size += 8 + tanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            cw.newUTF8("RuntimeInvisibleTypeAnnotations")__            size += 8 + itanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            cw.newUTF8("RuntimeVisibleParameterAnnotations")__            size += 7 + 2 * (panns.length - synthetics)__            for (int i = panns.length - 1_ i >= synthetics_ --i) {_                size += panns[i] == null ? 0 : panns[i].getSize()__            }_        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            cw.newUTF8("RuntimeInvisibleParameterAnnotations")__            size += 7 + 2 * (ipanns.length - synthetics)__            for (int i = ipanns.length - 1_ i >= synthetics_ --i) {_                size += ipanns[i] == null ? 0 : ipanns[i].getSize()__            }_        }_        if (attrs != null) {_            size += attrs.getSize(cw, null, 0, -1, -1)__        }_        return size__    };returns,the,size,of,the,bytecode,of,this,method,return,the,size,of,the,bytecode,of,this,method;final,int,get,size,if,class,reader,offset,0,return,6,class,reader,length,int,size,8,if,code,length,0,if,code,length,65535,throw,new,runtime,exception,method,code,too,large,cw,new,utf8,code,size,18,code,length,8,handler,count,if,local,var,null,cw,new,utf8,local,variable,table,size,8,local,var,length,if,local,var,type,null,cw,new,utf8,local,variable,type,table,size,8,local,var,type,length,if,line,number,null,cw,new,utf8,line,number,table,size,8,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,cw,new,utf8,zip,stack,map,table,stack,map,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,if,exception,count,0,cw,new,utf8,exceptions,size,8,2,exception,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,cw,new,utf8,synthetic,size,6,if,access,opcodes,0,cw,new,utf8,deprecated,size,6,if,class,reader,signatures,signature,null,cw,new,utf8,signature,cw,new,utf8,signature,size,8,if,method,parameters,null,cw,new,utf8,method,parameters,size,7,method,parameters,length,if,class,reader,annotations,annd,null,cw,new,utf8,annotation,default,size,6,annd,length,if,class,reader,annotations,anns,null,cw,new,utf8,runtime,visible,annotations,size,8,anns,get,size,if,class,reader,annotations,ianns,null,cw,new,utf8,runtime,invisible,annotations,size,8,ianns,get,size,if,class,reader,annotations,tanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,tanns,get,size,if,class,reader,annotations,itanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,itanns,get,size,if,class,reader,annotations,panns,null,cw,new,utf8,runtime,visible,parameter,annotations,size,7,2,panns,length,synthetics,for,int,i,panns,length,1,i,synthetics,i,size,panns,i,null,0,panns,i,get,size,if,class,reader,annotations,ipanns,null,cw,new,utf8,runtime,invisible,parameter,annotations,size,7,2,ipanns,length,synthetics,for,int,i,ipanns,length,1,i,synthetics,i,size,ipanns,i,null,0,ipanns,i,get,size,if,attrs,null,size,attrs,get,size,cw,null,0,1,1,return,size
MethodWriter -> final int getSize();1505821772;Returns the size of the bytecode of this method.__@return the size of the bytecode of this method.;final int getSize() {_        if (classReaderOffset != 0) {_            return 6 + classReaderLength__        }_        int size = 8__        if (code.length > 0) {_            if (code.length > 65535) {_                throw new RuntimeException("Method code too large!")__            }_            cw.newUTF8("Code")__            size += 18 + code.length + 8 * handlerCount__            if (localVar != null) {_                cw.newUTF8("LocalVariableTable")__                size += 8 + localVar.length__            }_            if (localVarType != null) {_                cw.newUTF8("LocalVariableTypeTable")__                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                cw.newUTF8("LineNumberTable")__                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                cw.newUTF8(zip ? "StackMapTable" : "StackMap")__                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                cw.newUTF8("RuntimeVisibleTypeAnnotations")__                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                cw.newUTF8("RuntimeInvisibleTypeAnnotations")__                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_        }_        if (exceptionCount > 0) {_            cw.newUTF8("Exceptions")__            size += 8 + 2 * exceptionCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                cw.newUTF8("Synthetic")__                size += 6__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            cw.newUTF8("Deprecated")__            size += 6__        }_        if (ClassReader.SIGNATURES && signature != null) {_            cw.newUTF8("Signature")__            cw.newUTF8(signature)__            size += 8__        }_        if (methodParameters != null) {_            cw.newUTF8("MethodParameters")__            size += 7 + methodParameters.length__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            cw.newUTF8("AnnotationDefault")__            size += 6 + annd.length__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            cw.newUTF8("RuntimeVisibleAnnotations")__            size += 8 + anns.getSize()__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            cw.newUTF8("RuntimeInvisibleAnnotations")__            size += 8 + ianns.getSize()__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            cw.newUTF8("RuntimeVisibleTypeAnnotations")__            size += 8 + tanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            cw.newUTF8("RuntimeInvisibleTypeAnnotations")__            size += 8 + itanns.getSize()__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            cw.newUTF8("RuntimeVisibleParameterAnnotations")__            size += 7 + 2 * (panns.length - synthetics)__            for (int i = panns.length - 1_ i >= synthetics_ --i) {_                size += panns[i] == null ? 0 : panns[i].getSize()__            }_        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            cw.newUTF8("RuntimeInvisibleParameterAnnotations")__            size += 7 + 2 * (ipanns.length - synthetics)__            for (int i = ipanns.length - 1_ i >= synthetics_ --i) {_                size += ipanns[i] == null ? 0 : ipanns[i].getSize()__            }_        }_        if (attrs != null) {_            size += attrs.getSize(cw, null, 0, -1, -1)__        }_        return size__    };returns,the,size,of,the,bytecode,of,this,method,return,the,size,of,the,bytecode,of,this,method;final,int,get,size,if,class,reader,offset,0,return,6,class,reader,length,int,size,8,if,code,length,0,if,code,length,65535,throw,new,runtime,exception,method,code,too,large,cw,new,utf8,code,size,18,code,length,8,handler,count,if,local,var,null,cw,new,utf8,local,variable,table,size,8,local,var,length,if,local,var,type,null,cw,new,utf8,local,variable,type,table,size,8,local,var,type,length,if,line,number,null,cw,new,utf8,line,number,table,size,8,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,cw,new,utf8,zip,stack,map,table,stack,map,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,if,exception,count,0,cw,new,utf8,exceptions,size,8,2,exception,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,cw,new,utf8,synthetic,size,6,if,access,opcodes,0,cw,new,utf8,deprecated,size,6,if,class,reader,signatures,signature,null,cw,new,utf8,signature,cw,new,utf8,signature,size,8,if,method,parameters,null,cw,new,utf8,method,parameters,size,7,method,parameters,length,if,class,reader,annotations,annd,null,cw,new,utf8,annotation,default,size,6,annd,length,if,class,reader,annotations,anns,null,cw,new,utf8,runtime,visible,annotations,size,8,anns,get,size,if,class,reader,annotations,ianns,null,cw,new,utf8,runtime,invisible,annotations,size,8,ianns,get,size,if,class,reader,annotations,tanns,null,cw,new,utf8,runtime,visible,type,annotations,size,8,tanns,get,size,if,class,reader,annotations,itanns,null,cw,new,utf8,runtime,invisible,type,annotations,size,8,itanns,get,size,if,class,reader,annotations,panns,null,cw,new,utf8,runtime,visible,parameter,annotations,size,7,2,panns,length,synthetics,for,int,i,panns,length,1,i,synthetics,i,size,panns,i,null,0,panns,i,get,size,if,class,reader,annotations,ipanns,null,cw,new,utf8,runtime,invisible,parameter,annotations,size,7,2,ipanns,length,synthetics,for,int,i,ipanns,length,1,i,synthetics,i,size,ipanns,i,null,0,ipanns,i,get,size,if,attrs,null,size,attrs,get,size,cw,null,0,1,1,return,size
MethodWriter -> private int startFrame(final int offset, final int nLocal, final int nStack);1366718246;Starts the visit of a stack map frame.__@param offset_the offset of the instruction to which the frame corresponds._@param nLocal_the number of local variables in the frame._@param nStack_the number of stack elements in the frame._@return the index of the next element to be written in this frame.;private int startFrame(final int offset, final int nLocal, final int nStack) {_        int n = 3 + nLocal + nStack__        if (frame == null || frame.length < n) {_            frame = new int[n]__        }_        frame[0] = offset__        frame[1] = nLocal__        frame[2] = nStack__        return 3__    };starts,the,visit,of,a,stack,map,frame,param,offset,the,offset,of,the,instruction,to,which,the,frame,corresponds,param,n,local,the,number,of,local,variables,in,the,frame,param,n,stack,the,number,of,stack,elements,in,the,frame,return,the,index,of,the,next,element,to,be,written,in,this,frame;private,int,start,frame,final,int,offset,final,int,n,local,final,int,n,stack,int,n,3,n,local,n,stack,if,frame,null,frame,length,n,frame,new,int,n,frame,0,offset,frame,1,n,local,frame,2,n,stack,return,3
MethodWriter -> private int startFrame(final int offset, final int nLocal, final int nStack);1395273982;Starts the visit of a stack map frame.__@param offset_the offset of the instruction to which the frame corresponds._@param nLocal_the number of local variables in the frame._@param nStack_the number of stack elements in the frame._@return the index of the next element to be written in this frame.;private int startFrame(final int offset, final int nLocal, final int nStack) {_        int n = 3 + nLocal + nStack__        if (frame == null || frame.length < n) {_            frame = new int[n]__        }_        frame[0] = offset__        frame[1] = nLocal__        frame[2] = nStack__        return 3__    };starts,the,visit,of,a,stack,map,frame,param,offset,the,offset,of,the,instruction,to,which,the,frame,corresponds,param,n,local,the,number,of,local,variables,in,the,frame,param,n,stack,the,number,of,stack,elements,in,the,frame,return,the,index,of,the,next,element,to,be,written,in,this,frame;private,int,start,frame,final,int,offset,final,int,n,local,final,int,n,stack,int,n,3,n,local,n,stack,if,frame,null,frame,length,n,frame,new,int,n,frame,0,offset,frame,1,n,local,frame,2,n,stack,return,3
MethodWriter -> private int startFrame(final int offset, final int nLocal, final int nStack);1395744691;Starts the visit of a stack map frame.__@param offset_the offset of the instruction to which the frame corresponds._@param nLocal_the number of local variables in the frame._@param nStack_the number of stack elements in the frame._@return the index of the next element to be written in this frame.;private int startFrame(final int offset, final int nLocal, final int nStack) {_        int n = 3 + nLocal + nStack__        if (frame == null || frame.length < n) {_            frame = new int[n]__        }_        frame[0] = offset__        frame[1] = nLocal__        frame[2] = nStack__        return 3__    };starts,the,visit,of,a,stack,map,frame,param,offset,the,offset,of,the,instruction,to,which,the,frame,corresponds,param,n,local,the,number,of,local,variables,in,the,frame,param,n,stack,the,number,of,stack,elements,in,the,frame,return,the,index,of,the,next,element,to,be,written,in,this,frame;private,int,start,frame,final,int,offset,final,int,n,local,final,int,n,stack,int,n,3,n,local,n,stack,if,frame,null,frame,length,n,frame,new,int,n,frame,0,offset,frame,1,n,local,frame,2,n,stack,return,3
MethodWriter -> private int startFrame(final int offset, final int nLocal, final int nStack);1400531367;Starts the visit of a stack map frame.__@param offset_the offset of the instruction to which the frame corresponds._@param nLocal_the number of local variables in the frame._@param nStack_the number of stack elements in the frame._@return the index of the next element to be written in this frame.;private int startFrame(final int offset, final int nLocal, final int nStack) {_        int n = 3 + nLocal + nStack__        if (frame == null || frame.length < n) {_            frame = new int[n]__        }_        frame[0] = offset__        frame[1] = nLocal__        frame[2] = nStack__        return 3__    };starts,the,visit,of,a,stack,map,frame,param,offset,the,offset,of,the,instruction,to,which,the,frame,corresponds,param,n,local,the,number,of,local,variables,in,the,frame,param,n,stack,the,number,of,stack,elements,in,the,frame,return,the,index,of,the,next,element,to,be,written,in,this,frame;private,int,start,frame,final,int,offset,final,int,n,local,final,int,n,stack,int,n,3,n,local,n,stack,if,frame,null,frame,length,n,frame,new,int,n,frame,0,offset,frame,1,n,local,frame,2,n,stack,return,3
MethodWriter -> private int startFrame(final int offset, final int nLocal, final int nStack);1431006084;Starts the visit of a stack map frame.__@param offset_the offset of the instruction to which the frame corresponds._@param nLocal_the number of local variables in the frame._@param nStack_the number of stack elements in the frame._@return the index of the next element to be written in this frame.;private int startFrame(final int offset, final int nLocal, final int nStack) {_        int n = 3 + nLocal + nStack__        if (frame == null || frame.length < n) {_            frame = new int[n]__        }_        frame[0] = offset__        frame[1] = nLocal__        frame[2] = nStack__        return 3__    };starts,the,visit,of,a,stack,map,frame,param,offset,the,offset,of,the,instruction,to,which,the,frame,corresponds,param,n,local,the,number,of,local,variables,in,the,frame,param,n,stack,the,number,of,stack,elements,in,the,frame,return,the,index,of,the,next,element,to,be,written,in,this,frame;private,int,start,frame,final,int,offset,final,int,n,local,final,int,n,stack,int,n,3,n,local,n,stack,if,frame,null,frame,length,n,frame,new,int,n,frame,0,offset,frame,1,n,local,frame,2,n,stack,return,3
MethodWriter -> private int startFrame(final int offset, final int nLocal, final int nStack);1440705816;Starts the visit of a stack map frame.__@param offset_the offset of the instruction to which the frame corresponds._@param nLocal_the number of local variables in the frame._@param nStack_the number of stack elements in the frame._@return the index of the next element to be written in this frame.;private int startFrame(final int offset, final int nLocal, final int nStack) {_        int n = 3 + nLocal + nStack__        if (frame == null || frame.length < n) {_            frame = new int[n]__        }_        frame[0] = offset__        frame[1] = nLocal__        frame[2] = nStack__        return 3__    };starts,the,visit,of,a,stack,map,frame,param,offset,the,offset,of,the,instruction,to,which,the,frame,corresponds,param,n,local,the,number,of,local,variables,in,the,frame,param,n,stack,the,number,of,stack,elements,in,the,frame,return,the,index,of,the,next,element,to,be,written,in,this,frame;private,int,start,frame,final,int,offset,final,int,n,local,final,int,n,stack,int,n,3,n,local,n,stack,if,frame,null,frame,length,n,frame,new,int,n,frame,0,offset,frame,1,n,local,frame,2,n,stack,return,3
MethodWriter -> private int startFrame(final int offset, final int nLocal, final int nStack);1483093254;Starts the visit of a stack map frame.__@param offset_the offset of the instruction to which the frame corresponds._@param nLocal_the number of local variables in the frame._@param nStack_the number of stack elements in the frame._@return the index of the next element to be written in this frame.;private int startFrame(final int offset, final int nLocal, final int nStack) {_        int n = 3 + nLocal + nStack__        if (frame == null || frame.length < n) {_            frame = new int[n]__        }_        frame[0] = offset__        frame[1] = nLocal__        frame[2] = nStack__        return 3__    };starts,the,visit,of,a,stack,map,frame,param,offset,the,offset,of,the,instruction,to,which,the,frame,corresponds,param,n,local,the,number,of,local,variables,in,the,frame,param,n,stack,the,number,of,stack,elements,in,the,frame,return,the,index,of,the,next,element,to,be,written,in,this,frame;private,int,start,frame,final,int,offset,final,int,n,local,final,int,n,stack,int,n,3,n,local,n,stack,if,frame,null,frame,length,n,frame,new,int,n,frame,0,offset,frame,1,n,local,frame,2,n,stack,return,3
MethodWriter -> private int startFrame(final int offset, final int nLocal, final int nStack);1505821772;Starts the visit of a stack map frame.__@param offset_the offset of the instruction to which the frame corresponds._@param nLocal_the number of local variables in the frame._@param nStack_the number of stack elements in the frame._@return the index of the next element to be written in this frame.;private int startFrame(final int offset, final int nLocal, final int nStack) {_        int n = 3 + nLocal + nStack__        if (frame == null || frame.length < n) {_            frame = new int[n]__        }_        frame[0] = offset__        frame[1] = nLocal__        frame[2] = nStack__        return 3__    };starts,the,visit,of,a,stack,map,frame,param,offset,the,offset,of,the,instruction,to,which,the,frame,corresponds,param,n,local,the,number,of,local,variables,in,the,frame,param,n,stack,the,number,of,stack,elements,in,the,frame,return,the,index,of,the,next,element,to,be,written,in,this,frame;private,int,start,frame,final,int,offset,final,int,n,local,final,int,n,stack,int,n,3,n,local,n,stack,if,frame,null,frame,length,n,frame,new,int,n,frame,0,offset,frame,1,n,local,frame,2,n,stack,return,3
MethodWriter -> private void putFrameType(final Object type);1531241461;Puts the given public API frame element type in {@link #stackMapTableEntries} , using the JVMS_verification_type_info format used in StackMapTable attributes.__@param type a frame element type described using the same format as in {@link_MethodVisitor#visitFrame}, i.e. either {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link_Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL}, or_{@link Opcodes#UNINITIALIZED_THIS}, or the internal name of a class, or a Label designating_a NEW instruction (for uninitialized types).;private void putFrameType(final Object type) {_    if (type instanceof Integer) {_      stackMapTableEntries.putByte(((Integer) type).intValue())__    } else if (type instanceof String) {_      stackMapTableEntries_          .putByte(Frame.ITEM_OBJECT)_          .putShort(symbolTable.addConstantClass((String) type).index)__    } else {_      stackMapTableEntries_          .putByte(Frame.ITEM_UNINITIALIZED)_          .putShort(((Label) type).bytecodeOffset)__    }_  };puts,the,given,public,api,frame,element,type,in,link,stack,map,table,entries,using,the,jvms,format,used,in,stack,map,table,attributes,param,type,a,frame,element,type,described,using,the,same,format,as,in,link,method,visitor,visit,frame,i,e,either,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,or,the,internal,name,of,a,class,or,a,label,designating,a,new,instruction,for,uninitialized,types;private,void,put,frame,type,final,object,type,if,type,instanceof,integer,stack,map,table,entries,put,byte,integer,type,int,value,else,if,type,instanceof,string,stack,map,table,entries,put,byte,frame,put,short,symbol,table,add,constant,class,string,type,index,else,stack,map,table,entries,put,byte,frame,put,short,label,type,bytecode,offset
MethodWriter -> private void putFrameType(final Object type);1536664245;Puts the given public API frame element type in {@link #stackMapTableEntries} , using the JVMS_verification_type_info format used in StackMapTable attributes.__@param type a frame element type described using the same format as in {@link_MethodVisitor#visitFrame}, i.e. either {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link_Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL}, or_{@link Opcodes#UNINITIALIZED_THIS}, or the internal name of a class, or a Label designating_a NEW instruction (for uninitialized types).;private void putFrameType(final Object type) {_    if (type instanceof Integer) {_      stackMapTableEntries.putByte(((Integer) type).intValue())__    } else if (type instanceof String) {_      stackMapTableEntries_          .putByte(Frame.ITEM_OBJECT)_          .putShort(symbolTable.addConstantClass((String) type).index)__    } else {_      stackMapTableEntries_          .putByte(Frame.ITEM_UNINITIALIZED)_          .putShort(((Label) type).bytecodeOffset)__    }_  };puts,the,given,public,api,frame,element,type,in,link,stack,map,table,entries,using,the,jvms,format,used,in,stack,map,table,attributes,param,type,a,frame,element,type,described,using,the,same,format,as,in,link,method,visitor,visit,frame,i,e,either,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,or,the,internal,name,of,a,class,or,a,label,designating,a,new,instruction,for,uninitialized,types;private,void,put,frame,type,final,object,type,if,type,instanceof,integer,stack,map,table,entries,put,byte,integer,type,int,value,else,if,type,instanceof,string,stack,map,table,entries,put,byte,frame,put,short,symbol,table,add,constant,class,string,type,index,else,stack,map,table,entries,put,byte,frame,put,short,label,type,bytecode,offset
MethodWriter -> private void putFrameType(final Object type);1537204147;Puts the given public API frame element type in {@link #stackMapTableEntries} , using the JVMS_verification_type_info format used in StackMapTable attributes.__@param type a frame element type described using the same format as in {@link_MethodVisitor#visitFrame}, i.e. either {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link_Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL}, or_{@link Opcodes#UNINITIALIZED_THIS}, or the internal name of a class, or a Label designating_a NEW instruction (for uninitialized types).;private void putFrameType(final Object type) {_    if (type instanceof Integer) {_      stackMapTableEntries.putByte(((Integer) type).intValue())__    } else if (type instanceof String) {_      stackMapTableEntries_          .putByte(Frame.ITEM_OBJECT)_          .putShort(symbolTable.addConstantClass((String) type).index)__    } else {_      stackMapTableEntries_          .putByte(Frame.ITEM_UNINITIALIZED)_          .putShort(((Label) type).bytecodeOffset)__    }_  };puts,the,given,public,api,frame,element,type,in,link,stack,map,table,entries,using,the,jvms,format,used,in,stack,map,table,attributes,param,type,a,frame,element,type,described,using,the,same,format,as,in,link,method,visitor,visit,frame,i,e,either,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,or,the,internal,name,of,a,class,or,a,label,designating,a,new,instruction,for,uninitialized,types;private,void,put,frame,type,final,object,type,if,type,instanceof,integer,stack,map,table,entries,put,byte,integer,type,int,value,else,if,type,instanceof,string,stack,map,table,entries,put,byte,frame,put,short,symbol,table,add,constant,class,string,type,index,else,stack,map,table,entries,put,byte,frame,put,short,label,type,bytecode,offset
MethodWriter -> private void putFrameType(final Object type);1539119582;Puts the given public API frame element type in {@link #stackMapTableEntries} , using the JVMS_verification_type_info format used in StackMapTable attributes.__@param type a frame element type described using the same format as in {@link_MethodVisitor#visitFrame}, i.e. either {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link_Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL}, or_{@link Opcodes#UNINITIALIZED_THIS}, or the internal name of a class, or a Label designating_a NEW instruction (for uninitialized types).;private void putFrameType(final Object type) {_    if (type instanceof Integer) {_      stackMapTableEntries.putByte(((Integer) type).intValue())__    } else if (type instanceof String) {_      stackMapTableEntries_          .putByte(Frame.ITEM_OBJECT)_          .putShort(symbolTable.addConstantClass((String) type).index)__    } else {_      stackMapTableEntries_          .putByte(Frame.ITEM_UNINITIALIZED)_          .putShort(((Label) type).bytecodeOffset)__    }_  };puts,the,given,public,api,frame,element,type,in,link,stack,map,table,entries,using,the,jvms,format,used,in,stack,map,table,attributes,param,type,a,frame,element,type,described,using,the,same,format,as,in,link,method,visitor,visit,frame,i,e,either,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,or,the,internal,name,of,a,class,or,a,label,designating,a,new,instruction,for,uninitialized,types;private,void,put,frame,type,final,object,type,if,type,instanceof,integer,stack,map,table,entries,put,byte,integer,type,int,value,else,if,type,instanceof,string,stack,map,table,entries,put,byte,frame,put,short,symbol,table,add,constant,class,string,type,index,else,stack,map,table,entries,put,byte,frame,put,short,label,type,bytecode,offset
MethodWriter -> static void getNewOffset(final int[] indexes, final int[] sizes,             final Label label);1366718246;Updates the offset of the given label.__@param indexes_current positions of the instructions to be resized. Each_instruction must be designated by the index of its <i>last</i>_byte, plus one (or, in other words, by the index of the_<i>first</i> byte of the <i>next</i> instruction)._@param sizes_the number of bytes to be <i>added</i> to the above_instructions. More precisely, for each i < <tt>len</tt>,_<tt>sizes</tt>[i] bytes will be added at the end of the_instruction designated by <tt>indexes</tt>[i] or, if_<tt>sizes</tt>[i] is negative, the <i>last</i> |_<tt>sizes[i]</tt>| bytes of the instruction will be removed_(the instruction size <i>must not</i> become negative or_null)._@param label_the label whose offset must be updated.;static void getNewOffset(final int[] indexes, final int[] sizes,_            final Label label) {_        if ((label.status & Label.RESIZED) == 0) {_            label.position = getNewOffset(indexes, sizes, 0, label.position)__            label.status |= Label.RESIZED__        }_    };updates,the,offset,of,the,given,label,param,indexes,current,positions,of,the,instructions,to,be,resized,each,instruction,must,be,designated,by,the,index,of,its,i,last,i,byte,plus,one,or,in,other,words,by,the,index,of,the,i,first,i,byte,of,the,i,next,i,instruction,param,sizes,the,number,of,bytes,to,be,i,added,i,to,the,above,instructions,more,precisely,for,each,i,tt,len,tt,tt,sizes,tt,i,bytes,will,be,added,at,the,end,of,the,instruction,designated,by,tt,indexes,tt,i,or,if,tt,sizes,tt,i,is,negative,the,i,last,i,tt,sizes,i,tt,bytes,of,the,instruction,will,be,removed,the,instruction,size,i,must,not,i,become,negative,or,null,param,label,the,label,whose,offset,must,be,updated;static,void,get,new,offset,final,int,indexes,final,int,sizes,final,label,label,if,label,status,label,resized,0,label,position,get,new,offset,indexes,sizes,0,label,position,label,status,label,resized
MethodWriter -> static void getNewOffset(final int[] indexes, final int[] sizes,             final Label label);1395273982;Updates the offset of the given label.__@param indexes_current positions of the instructions to be resized. Each_instruction must be designated by the index of its <i>last</i>_byte, plus one (or, in other words, by the index of the_<i>first</i> byte of the <i>next</i> instruction)._@param sizes_the number of bytes to be <i>added</i> to the above_instructions. More precisely, for each i < <tt>len</tt>,_<tt>sizes</tt>[i] bytes will be added at the end of the_instruction designated by <tt>indexes</tt>[i] or, if_<tt>sizes</tt>[i] is negative, the <i>last</i> |_<tt>sizes[i]</tt>| bytes of the instruction will be removed_(the instruction size <i>must not</i> become negative or_null)._@param label_the label whose offset must be updated.;static void getNewOffset(final int[] indexes, final int[] sizes,_            final Label label) {_        if ((label.status & Label.RESIZED) == 0) {_            label.position = getNewOffset(indexes, sizes, 0, label.position)__            label.status |= Label.RESIZED__        }_    };updates,the,offset,of,the,given,label,param,indexes,current,positions,of,the,instructions,to,be,resized,each,instruction,must,be,designated,by,the,index,of,its,i,last,i,byte,plus,one,or,in,other,words,by,the,index,of,the,i,first,i,byte,of,the,i,next,i,instruction,param,sizes,the,number,of,bytes,to,be,i,added,i,to,the,above,instructions,more,precisely,for,each,i,tt,len,tt,tt,sizes,tt,i,bytes,will,be,added,at,the,end,of,the,instruction,designated,by,tt,indexes,tt,i,or,if,tt,sizes,tt,i,is,negative,the,i,last,i,tt,sizes,i,tt,bytes,of,the,instruction,will,be,removed,the,instruction,size,i,must,not,i,become,negative,or,null,param,label,the,label,whose,offset,must,be,updated;static,void,get,new,offset,final,int,indexes,final,int,sizes,final,label,label,if,label,status,label,resized,0,label,position,get,new,offset,indexes,sizes,0,label,position,label,status,label,resized
MethodWriter -> static void getNewOffset(final int[] indexes, final int[] sizes,             final Label label);1395744691;Updates the offset of the given label.__@param indexes_current positions of the instructions to be resized. Each_instruction must be designated by the index of its <i>last</i>_byte, plus one (or, in other words, by the index of the_<i>first</i> byte of the <i>next</i> instruction)._@param sizes_the number of bytes to be <i>added</i> to the above_instructions. More precisely, for each i < <tt>len</tt>,_<tt>sizes</tt>[i] bytes will be added at the end of the_instruction designated by <tt>indexes</tt>[i] or, if_<tt>sizes</tt>[i] is negative, the <i>last</i> |_<tt>sizes[i]</tt>| bytes of the instruction will be removed_(the instruction size <i>must not</i> become negative or_null)._@param label_the label whose offset must be updated.;static void getNewOffset(final int[] indexes, final int[] sizes,_            final Label label) {_        if ((label.status & Label.RESIZED) == 0) {_            label.position = getNewOffset(indexes, sizes, 0, label.position)__            label.status |= Label.RESIZED__        }_    };updates,the,offset,of,the,given,label,param,indexes,current,positions,of,the,instructions,to,be,resized,each,instruction,must,be,designated,by,the,index,of,its,i,last,i,byte,plus,one,or,in,other,words,by,the,index,of,the,i,first,i,byte,of,the,i,next,i,instruction,param,sizes,the,number,of,bytes,to,be,i,added,i,to,the,above,instructions,more,precisely,for,each,i,tt,len,tt,tt,sizes,tt,i,bytes,will,be,added,at,the,end,of,the,instruction,designated,by,tt,indexes,tt,i,or,if,tt,sizes,tt,i,is,negative,the,i,last,i,tt,sizes,i,tt,bytes,of,the,instruction,will,be,removed,the,instruction,size,i,must,not,i,become,negative,or,null,param,label,the,label,whose,offset,must,be,updated;static,void,get,new,offset,final,int,indexes,final,int,sizes,final,label,label,if,label,status,label,resized,0,label,position,get,new,offset,indexes,sizes,0,label,position,label,status,label,resized
MethodWriter -> static void getNewOffset(final int[] indexes, final int[] sizes,             final Label label);1400531367;Updates the offset of the given label.__@param indexes_current positions of the instructions to be resized. Each_instruction must be designated by the index of its <i>last</i>_byte, plus one (or, in other words, by the index of the_<i>first</i> byte of the <i>next</i> instruction)._@param sizes_the number of bytes to be <i>added</i> to the above_instructions. More precisely, for each i < <tt>len</tt>,_<tt>sizes</tt>[i] bytes will be added at the end of the_instruction designated by <tt>indexes</tt>[i] or, if_<tt>sizes</tt>[i] is negative, the <i>last</i> |_<tt>sizes[i]</tt>| bytes of the instruction will be removed_(the instruction size <i>must not</i> become negative or_null)._@param label_the label whose offset must be updated.;static void getNewOffset(final int[] indexes, final int[] sizes,_            final Label label) {_        if ((label.status & Label.RESIZED) == 0) {_            label.position = getNewOffset(indexes, sizes, 0, label.position)__            label.status |= Label.RESIZED__        }_    };updates,the,offset,of,the,given,label,param,indexes,current,positions,of,the,instructions,to,be,resized,each,instruction,must,be,designated,by,the,index,of,its,i,last,i,byte,plus,one,or,in,other,words,by,the,index,of,the,i,first,i,byte,of,the,i,next,i,instruction,param,sizes,the,number,of,bytes,to,be,i,added,i,to,the,above,instructions,more,precisely,for,each,i,tt,len,tt,tt,sizes,tt,i,bytes,will,be,added,at,the,end,of,the,instruction,designated,by,tt,indexes,tt,i,or,if,tt,sizes,tt,i,is,negative,the,i,last,i,tt,sizes,i,tt,bytes,of,the,instruction,will,be,removed,the,instruction,size,i,must,not,i,become,negative,or,null,param,label,the,label,whose,offset,must,be,updated;static,void,get,new,offset,final,int,indexes,final,int,sizes,final,label,label,if,label,status,label,resized,0,label,position,get,new,offset,indexes,sizes,0,label,position,label,status,label,resized
MethodWriter -> static void getNewOffset(final int[] indexes, final int[] sizes,             final Label label);1431006084;Updates the offset of the given label.__@param indexes_current positions of the instructions to be resized. Each_instruction must be designated by the index of its <i>last</i>_byte, plus one (or, in other words, by the index of the_<i>first</i> byte of the <i>next</i> instruction)._@param sizes_the number of bytes to be <i>added</i> to the above_instructions. More precisely, for each i < <tt>len</tt>,_<tt>sizes</tt>[i] bytes will be added at the end of the_instruction designated by <tt>indexes</tt>[i] or, if_<tt>sizes</tt>[i] is negative, the <i>last</i> |_<tt>sizes[i]</tt>| bytes of the instruction will be removed_(the instruction size <i>must not</i> become negative or_null)._@param label_the label whose offset must be updated.;static void getNewOffset(final int[] indexes, final int[] sizes,_            final Label label) {_        if ((label.status & Label.RESIZED) == 0) {_            label.position = getNewOffset(indexes, sizes, 0, label.position)__            label.status |= Label.RESIZED__        }_    };updates,the,offset,of,the,given,label,param,indexes,current,positions,of,the,instructions,to,be,resized,each,instruction,must,be,designated,by,the,index,of,its,i,last,i,byte,plus,one,or,in,other,words,by,the,index,of,the,i,first,i,byte,of,the,i,next,i,instruction,param,sizes,the,number,of,bytes,to,be,i,added,i,to,the,above,instructions,more,precisely,for,each,i,tt,len,tt,tt,sizes,tt,i,bytes,will,be,added,at,the,end,of,the,instruction,designated,by,tt,indexes,tt,i,or,if,tt,sizes,tt,i,is,negative,the,i,last,i,tt,sizes,i,tt,bytes,of,the,instruction,will,be,removed,the,instruction,size,i,must,not,i,become,negative,or,null,param,label,the,label,whose,offset,must,be,updated;static,void,get,new,offset,final,int,indexes,final,int,sizes,final,label,label,if,label,status,label,resized,0,label,position,get,new,offset,indexes,sizes,0,label,position,label,status,label,resized
MethodWriter -> static void getNewOffset(final int[] indexes, final int[] sizes,             final Label label);1440705816;Updates the offset of the given label.__@param indexes_current positions of the instructions to be resized. Each_instruction must be designated by the index of its <i>last</i>_byte, plus one (or, in other words, by the index of the_<i>first</i> byte of the <i>next</i> instruction)._@param sizes_the number of bytes to be <i>added</i> to the above_instructions. More precisely, for each i < <tt>len</tt>,_<tt>sizes</tt>[i] bytes will be added at the end of the_instruction designated by <tt>indexes</tt>[i] or, if_<tt>sizes</tt>[i] is negative, the <i>last</i> |_<tt>sizes[i]</tt>| bytes of the instruction will be removed_(the instruction size <i>must not</i> become negative or_null)._@param label_the label whose offset must be updated.;static void getNewOffset(final int[] indexes, final int[] sizes,_            final Label label) {_        if ((label.status & Label.RESIZED) == 0) {_            label.position = getNewOffset(indexes, sizes, 0, label.position)__            label.status |= Label.RESIZED__        }_    };updates,the,offset,of,the,given,label,param,indexes,current,positions,of,the,instructions,to,be,resized,each,instruction,must,be,designated,by,the,index,of,its,i,last,i,byte,plus,one,or,in,other,words,by,the,index,of,the,i,first,i,byte,of,the,i,next,i,instruction,param,sizes,the,number,of,bytes,to,be,i,added,i,to,the,above,instructions,more,precisely,for,each,i,tt,len,tt,tt,sizes,tt,i,bytes,will,be,added,at,the,end,of,the,instruction,designated,by,tt,indexes,tt,i,or,if,tt,sizes,tt,i,is,negative,the,i,last,i,tt,sizes,i,tt,bytes,of,the,instruction,will,be,removed,the,instruction,size,i,must,not,i,become,negative,or,null,param,label,the,label,whose,offset,must,be,updated;static,void,get,new,offset,final,int,indexes,final,int,sizes,final,label,label,if,label,status,label,resized,0,label,position,get,new,offset,indexes,sizes,0,label,position,label,status,label,resized
MethodWriter -> private void endCurrentBasicBlockWithNoSuccessor();1531241461;Ends the current basic block. This method must be used in the case where the current basic_block does not have any successor.__<p>WARNING: this method must be called after the currently visited instruction has been put in_{@link #code} (if frames are computed, this method inserts a new Label to start a new basic_block after the current instruction).;private void endCurrentBasicBlockWithNoSuccessor() {_    if (compute == COMPUTE_ALL_FRAMES) {_      Label nextBasicBlock = new Label()__      nextBasicBlock.frame = new Frame(nextBasicBlock)__      nextBasicBlock.resolve(code.data, code.length)__      lastBasicBlock.nextBasicBlock = nextBasicBlock__      lastBasicBlock = nextBasicBlock__      currentBasicBlock = null__    } else if (compute == COMPUTE_MAX_STACK_AND_LOCAL) {_      currentBasicBlock.outputStackMax = (short) maxRelativeStackSize__      currentBasicBlock = null__    }_  };ends,the,current,basic,block,this,method,must,be,used,in,the,case,where,the,current,basic,block,does,not,have,any,successor,p,warning,this,method,must,be,called,after,the,currently,visited,instruction,has,been,put,in,link,code,if,frames,are,computed,this,method,inserts,a,new,label,to,start,a,new,basic,block,after,the,current,instruction;private,void,end,current,basic,block,with,no,successor,if,compute,label,next,basic,block,new,label,next,basic,block,frame,new,frame,next,basic,block,next,basic,block,resolve,code,data,code,length,last,basic,block,next,basic,block,next,basic,block,last,basic,block,next,basic,block,current,basic,block,null,else,if,compute,current,basic,block,output,stack,max,short,max,relative,stack,size,current,basic,block,null
MethodWriter -> private void endCurrentBasicBlockWithNoSuccessor();1536664245;Ends the current basic block. This method must be used in the case where the current basic_block does not have any successor.__<p>WARNING: this method must be called after the currently visited instruction has been put in_{@link #code} (if frames are computed, this method inserts a new Label to start a new basic_block after the current instruction).;private void endCurrentBasicBlockWithNoSuccessor() {_    if (compute == COMPUTE_ALL_FRAMES) {_      Label nextBasicBlock = new Label()__      nextBasicBlock.frame = new Frame(nextBasicBlock)__      nextBasicBlock.resolve(code.data, code.length)__      lastBasicBlock.nextBasicBlock = nextBasicBlock__      lastBasicBlock = nextBasicBlock__      currentBasicBlock = null__    } else if (compute == COMPUTE_MAX_STACK_AND_LOCAL) {_      currentBasicBlock.outputStackMax = (short) maxRelativeStackSize__      currentBasicBlock = null__    }_  };ends,the,current,basic,block,this,method,must,be,used,in,the,case,where,the,current,basic,block,does,not,have,any,successor,p,warning,this,method,must,be,called,after,the,currently,visited,instruction,has,been,put,in,link,code,if,frames,are,computed,this,method,inserts,a,new,label,to,start,a,new,basic,block,after,the,current,instruction;private,void,end,current,basic,block,with,no,successor,if,compute,label,next,basic,block,new,label,next,basic,block,frame,new,frame,next,basic,block,next,basic,block,resolve,code,data,code,length,last,basic,block,next,basic,block,next,basic,block,last,basic,block,next,basic,block,current,basic,block,null,else,if,compute,current,basic,block,output,stack,max,short,max,relative,stack,size,current,basic,block,null
MethodWriter -> private void endCurrentBasicBlockWithNoSuccessor();1537204147;Ends the current basic block. This method must be used in the case where the current basic_block does not have any successor.__<p>WARNING: this method must be called after the currently visited instruction has been put in_{@link #code} (if frames are computed, this method inserts a new Label to start a new basic_block after the current instruction).;private void endCurrentBasicBlockWithNoSuccessor() {_    if (compute == COMPUTE_ALL_FRAMES) {_      Label nextBasicBlock = new Label()__      nextBasicBlock.frame = new Frame(nextBasicBlock)__      nextBasicBlock.resolve(code.data, code.length)__      lastBasicBlock.nextBasicBlock = nextBasicBlock__      lastBasicBlock = nextBasicBlock__      currentBasicBlock = null__    } else if (compute == COMPUTE_MAX_STACK_AND_LOCAL) {_      currentBasicBlock.outputStackMax = (short) maxRelativeStackSize__      currentBasicBlock = null__    }_  };ends,the,current,basic,block,this,method,must,be,used,in,the,case,where,the,current,basic,block,does,not,have,any,successor,p,warning,this,method,must,be,called,after,the,currently,visited,instruction,has,been,put,in,link,code,if,frames,are,computed,this,method,inserts,a,new,label,to,start,a,new,basic,block,after,the,current,instruction;private,void,end,current,basic,block,with,no,successor,if,compute,label,next,basic,block,new,label,next,basic,block,frame,new,frame,next,basic,block,next,basic,block,resolve,code,data,code,length,last,basic,block,next,basic,block,next,basic,block,last,basic,block,next,basic,block,current,basic,block,null,else,if,compute,current,basic,block,output,stack,max,short,max,relative,stack,size,current,basic,block,null
MethodWriter -> private void endCurrentBasicBlockWithNoSuccessor();1539119582;Ends the current basic block. This method must be used in the case where the current basic_block does not have any successor.__<p>WARNING: this method must be called after the currently visited instruction has been put in_{@link #code} (if frames are computed, this method inserts a new Label to start a new basic_block after the current instruction).;private void endCurrentBasicBlockWithNoSuccessor() {_    if (compute == COMPUTE_ALL_FRAMES) {_      Label nextBasicBlock = new Label()__      nextBasicBlock.frame = new Frame(nextBasicBlock)__      nextBasicBlock.resolve(code.data, code.length)__      lastBasicBlock.nextBasicBlock = nextBasicBlock__      lastBasicBlock = nextBasicBlock__      currentBasicBlock = null__    } else if (compute == COMPUTE_MAX_STACK_AND_LOCAL) {_      currentBasicBlock.outputStackMax = (short) maxRelativeStackSize__      currentBasicBlock = null__    }_  };ends,the,current,basic,block,this,method,must,be,used,in,the,case,where,the,current,basic,block,does,not,have,any,successor,p,warning,this,method,must,be,called,after,the,currently,visited,instruction,has,been,put,in,link,code,if,frames,are,computed,this,method,inserts,a,new,label,to,start,a,new,basic,block,after,the,current,instruction;private,void,end,current,basic,block,with,no,successor,if,compute,label,next,basic,block,new,label,next,basic,block,frame,new,frame,next,basic,block,next,basic,block,resolve,code,data,code,length,last,basic,block,next,basic,block,next,basic,block,last,basic,block,next,basic,block,current,basic,block,null,else,if,compute,current,basic,block,output,stack,max,short,max,relative,stack,size,current,basic,block,null
MethodWriter -> private void endFrame();1366718246;Checks if the visit of the current frame {@link #frame} is finished, and_if yes, write it in the StackMapTable attribute.;private void endFrame() {_        if (previousFrame != null) { _            if (stackMap == null) {_                stackMap = new ByteVector()__            }_            writeFrame()__            ++frameCount__        }_        previousFrame = frame__        frame = null__    };checks,if,the,visit,of,the,current,frame,link,frame,is,finished,and,if,yes,write,it,in,the,stack,map,table,attribute;private,void,end,frame,if,previous,frame,null,if,stack,map,null,stack,map,new,byte,vector,write,frame,frame,count,previous,frame,frame,frame,null
MethodWriter -> private void endFrame();1395273982;Checks if the visit of the current frame {@link #frame} is finished, and_if yes, write it in the StackMapTable attribute.;private void endFrame() {_        if (previousFrame != null) { _            if (stackMap == null) {_                stackMap = new ByteVector()__            }_            writeFrame()__            ++frameCount__        }_        previousFrame = frame__        frame = null__    };checks,if,the,visit,of,the,current,frame,link,frame,is,finished,and,if,yes,write,it,in,the,stack,map,table,attribute;private,void,end,frame,if,previous,frame,null,if,stack,map,null,stack,map,new,byte,vector,write,frame,frame,count,previous,frame,frame,frame,null
MethodWriter -> private void endFrame();1395744691;Checks if the visit of the current frame {@link #frame} is finished, and_if yes, write it in the StackMapTable attribute.;private void endFrame() {_        if (previousFrame != null) { _            if (stackMap == null) {_                stackMap = new ByteVector()__            }_            writeFrame()__            ++frameCount__        }_        previousFrame = frame__        frame = null__    };checks,if,the,visit,of,the,current,frame,link,frame,is,finished,and,if,yes,write,it,in,the,stack,map,table,attribute;private,void,end,frame,if,previous,frame,null,if,stack,map,null,stack,map,new,byte,vector,write,frame,frame,count,previous,frame,frame,frame,null
MethodWriter -> private void endFrame();1400531367;Checks if the visit of the current frame {@link #frame} is finished, and_if yes, write it in the StackMapTable attribute.;private void endFrame() {_        if (previousFrame != null) { _            if (stackMap == null) {_                stackMap = new ByteVector()__            }_            writeFrame()__            ++frameCount__        }_        previousFrame = frame__        frame = null__    };checks,if,the,visit,of,the,current,frame,link,frame,is,finished,and,if,yes,write,it,in,the,stack,map,table,attribute;private,void,end,frame,if,previous,frame,null,if,stack,map,null,stack,map,new,byte,vector,write,frame,frame,count,previous,frame,frame,frame,null
MethodWriter -> private void endFrame();1431006084;Checks if the visit of the current frame {@link #frame} is finished, and_if yes, write it in the StackMapTable attribute.;private void endFrame() {_        if (previousFrame != null) { _            if (stackMap == null) {_                stackMap = new ByteVector()__            }_            writeFrame()__            ++frameCount__        }_        previousFrame = frame__        frame = null__    };checks,if,the,visit,of,the,current,frame,link,frame,is,finished,and,if,yes,write,it,in,the,stack,map,table,attribute;private,void,end,frame,if,previous,frame,null,if,stack,map,null,stack,map,new,byte,vector,write,frame,frame,count,previous,frame,frame,frame,null
MethodWriter -> private void endFrame();1440705816;Checks if the visit of the current frame {@link #frame} is finished, and_if yes, write it in the StackMapTable attribute.;private void endFrame() {_        if (previousFrame != null) { _            if (stackMap == null) {_                stackMap = new ByteVector()__            }_            writeFrame()__            ++frameCount__        }_        previousFrame = frame__        frame = null__    };checks,if,the,visit,of,the,current,frame,link,frame,is,finished,and,if,yes,write,it,in,the,stack,map,table,attribute;private,void,end,frame,if,previous,frame,null,if,stack,map,null,stack,map,new,byte,vector,write,frame,frame,count,previous,frame,frame,frame,null
MethodWriter -> private void endFrame();1483093254;Checks if the visit of the current frame {@link #frame} is finished, and_if yes, write it in the StackMapTable attribute.;private void endFrame() {_        if (previousFrame != null) { _            if (stackMap == null) {_                stackMap = new ByteVector()__            }_            writeFrame()__            ++frameCount__        }_        previousFrame = frame__        frame = null__    };checks,if,the,visit,of,the,current,frame,link,frame,is,finished,and,if,yes,write,it,in,the,stack,map,table,attribute;private,void,end,frame,if,previous,frame,null,if,stack,map,null,stack,map,new,byte,vector,write,frame,frame,count,previous,frame,frame,frame,null
MethodWriter -> private void endFrame();1505821772;Checks if the visit of the current frame {@link #frame} is finished, and_if yes, write it in the StackMapTable attribute.;private void endFrame() {_        if (previousFrame != null) { _            if (stackMap == null) {_                stackMap = new ByteVector()__            }_            writeFrame()__            ++frameCount__        }_        previousFrame = frame__        frame = null__    };checks,if,the,visit,of,the,current,frame,link,frame,is,finished,and,if,yes,write,it,in,the,stack,map,table,attribute;private,void,end,frame,if,previous,frame,null,if,stack,map,null,stack,map,new,byte,vector,write,frame,frame,count,previous,frame,frame,frame,null
MethodWriter -> private void writeFrameTypes(final int start, final int end);1366718246;Writes some types of the current frame {@link #frame} into the_StackMapTableAttribute. This method converts types from the format used_in {@link Label} to the format used in StackMapTable attributes. In_particular, it converts type table indexes to constant pool indexes.__@param start_index of the first type in {@link #frame} to write._@param end_index of last type in {@link #frame} to write (exclusive).;private void writeFrameTypes(final int start, final int end) {_        for (int i = start_ i < end_ ++i) {_            int t = frame[i]__            int d = t & Frame.DIM__            if (d == 0) {_                int v = t & Frame.BASE_VALUE__                switch (t & Frame.BASE_KIND) {_                case Frame.OBJECT:_                    stackMap.putByte(7).putShort(_                            cw.newClass(cw.typeTable[v].strVal1))__                    break__                case Frame.UNINITIALIZED:_                    stackMap.putByte(8).putShort(cw.typeTable[v].intVal)__                    break__                default:_                    stackMap.putByte(v)__                }_            } else {_                StringBuffer buf = new StringBuffer()__                d >>= 28__                while (d-- > 0) {_                    buf.append('[')__                }_                if ((t & Frame.BASE_KIND) == Frame.OBJECT) {_                    buf.append('L')__                    buf.append(cw.typeTable[t & Frame.BASE_VALUE].strVal1)__                    buf.append('_')__                } else {_                    switch (t & 0xF) {_                    case 1:_                        buf.append('I')__                        break__                    case 2:_                        buf.append('F')__                        break__                    case 3:_                        buf.append('D')__                        break__                    case 9:_                        buf.append('Z')__                        break__                    case 10:_                        buf.append('B')__                        break__                    case 11:_                        buf.append('C')__                        break__                    case 12:_                        buf.append('S')__                        break__                    default:_                        buf.append('J')__                    }_                }_                stackMap.putByte(7).putShort(cw.newClass(buf.toString()))__            }_        }_    };writes,some,types,of,the,current,frame,link,frame,into,the,stack,map,table,attribute,this,method,converts,types,from,the,format,used,in,link,label,to,the,format,used,in,stack,map,table,attributes,in,particular,it,converts,type,table,indexes,to,constant,pool,indexes,param,start,index,of,the,first,type,in,link,frame,to,write,param,end,index,of,last,type,in,link,frame,to,write,exclusive;private,void,write,frame,types,final,int,start,final,int,end,for,int,i,start,i,end,i,int,t,frame,i,int,d,t,frame,dim,if,d,0,int,v,t,frame,switch,t,frame,case,frame,object,stack,map,put,byte,7,put,short,cw,new,class,cw,type,table,v,str,val1,break,case,frame,uninitialized,stack,map,put,byte,8,put,short,cw,type,table,v,int,val,break,default,stack,map,put,byte,v,else,string,buffer,buf,new,string,buffer,d,28,while,d,0,buf,append,if,t,frame,frame,object,buf,append,l,buf,append,cw,type,table,t,frame,str,val1,buf,append,else,switch,t,0x,f,case,1,buf,append,i,break,case,2,buf,append,f,break,case,3,buf,append,d,break,case,9,buf,append,z,break,case,10,buf,append,b,break,case,11,buf,append,c,break,case,12,buf,append,s,break,default,buf,append,j,stack,map,put,byte,7,put,short,cw,new,class,buf,to,string
MethodWriter -> private void writeFrameTypes(final int start, final int end);1395273982;Writes some types of the current frame {@link #frame} into the_StackMapTableAttribute. This method converts types from the format used_in {@link Label} to the format used in StackMapTable attributes. In_particular, it converts type table indexes to constant pool indexes.__@param start_index of the first type in {@link #frame} to write._@param end_index of last type in {@link #frame} to write (exclusive).;private void writeFrameTypes(final int start, final int end) {_        for (int i = start_ i < end_ ++i) {_            int t = frame[i]__            int d = t & Frame.DIM__            if (d == 0) {_                int v = t & Frame.BASE_VALUE__                switch (t & Frame.BASE_KIND) {_                case Frame.OBJECT:_                    stackMap.putByte(7).putShort(_                            cw.newClass(cw.typeTable[v].strVal1))__                    break__                case Frame.UNINITIALIZED:_                    stackMap.putByte(8).putShort(cw.typeTable[v].intVal)__                    break__                default:_                    stackMap.putByte(v)__                }_            } else {_                StringBuffer buf = new StringBuffer()__                d >>= 28__                while (d-- > 0) {_                    buf.append('[')__                }_                if ((t & Frame.BASE_KIND) == Frame.OBJECT) {_                    buf.append('L')__                    buf.append(cw.typeTable[t & Frame.BASE_VALUE].strVal1)__                    buf.append('_')__                } else {_                    switch (t & 0xF) {_                    case 1:_                        buf.append('I')__                        break__                    case 2:_                        buf.append('F')__                        break__                    case 3:_                        buf.append('D')__                        break__                    case 9:_                        buf.append('Z')__                        break__                    case 10:_                        buf.append('B')__                        break__                    case 11:_                        buf.append('C')__                        break__                    case 12:_                        buf.append('S')__                        break__                    default:_                        buf.append('J')__                    }_                }_                stackMap.putByte(7).putShort(cw.newClass(buf.toString()))__            }_        }_    };writes,some,types,of,the,current,frame,link,frame,into,the,stack,map,table,attribute,this,method,converts,types,from,the,format,used,in,link,label,to,the,format,used,in,stack,map,table,attributes,in,particular,it,converts,type,table,indexes,to,constant,pool,indexes,param,start,index,of,the,first,type,in,link,frame,to,write,param,end,index,of,last,type,in,link,frame,to,write,exclusive;private,void,write,frame,types,final,int,start,final,int,end,for,int,i,start,i,end,i,int,t,frame,i,int,d,t,frame,dim,if,d,0,int,v,t,frame,switch,t,frame,case,frame,object,stack,map,put,byte,7,put,short,cw,new,class,cw,type,table,v,str,val1,break,case,frame,uninitialized,stack,map,put,byte,8,put,short,cw,type,table,v,int,val,break,default,stack,map,put,byte,v,else,string,buffer,buf,new,string,buffer,d,28,while,d,0,buf,append,if,t,frame,frame,object,buf,append,l,buf,append,cw,type,table,t,frame,str,val1,buf,append,else,switch,t,0x,f,case,1,buf,append,i,break,case,2,buf,append,f,break,case,3,buf,append,d,break,case,9,buf,append,z,break,case,10,buf,append,b,break,case,11,buf,append,c,break,case,12,buf,append,s,break,default,buf,append,j,stack,map,put,byte,7,put,short,cw,new,class,buf,to,string
MethodWriter -> private void writeFrameTypes(final int start, final int end);1395744691;Writes some types of the current frame {@link #frame} into the_StackMapTableAttribute. This method converts types from the format used_in {@link Label} to the format used in StackMapTable attributes. In_particular, it converts type table indexes to constant pool indexes.__@param start_index of the first type in {@link #frame} to write._@param end_index of last type in {@link #frame} to write (exclusive).;private void writeFrameTypes(final int start, final int end) {_        for (int i = start_ i < end_ ++i) {_            int t = frame[i]__            int d = t & Frame.DIM__            if (d == 0) {_                int v = t & Frame.BASE_VALUE__                switch (t & Frame.BASE_KIND) {_                case Frame.OBJECT:_                    stackMap.putByte(7).putShort(_                            cw.newClass(cw.typeTable[v].strVal1))__                    break__                case Frame.UNINITIALIZED:_                    stackMap.putByte(8).putShort(cw.typeTable[v].intVal)__                    break__                default:_                    stackMap.putByte(v)__                }_            } else {_                StringBuffer buf = new StringBuffer()__                d >>= 28__                while (d-- > 0) {_                    buf.append('[')__                }_                if ((t & Frame.BASE_KIND) == Frame.OBJECT) {_                    buf.append('L')__                    buf.append(cw.typeTable[t & Frame.BASE_VALUE].strVal1)__                    buf.append('_')__                } else {_                    switch (t & 0xF) {_                    case 1:_                        buf.append('I')__                        break__                    case 2:_                        buf.append('F')__                        break__                    case 3:_                        buf.append('D')__                        break__                    case 9:_                        buf.append('Z')__                        break__                    case 10:_                        buf.append('B')__                        break__                    case 11:_                        buf.append('C')__                        break__                    case 12:_                        buf.append('S')__                        break__                    default:_                        buf.append('J')__                    }_                }_                stackMap.putByte(7).putShort(cw.newClass(buf.toString()))__            }_        }_    };writes,some,types,of,the,current,frame,link,frame,into,the,stack,map,table,attribute,this,method,converts,types,from,the,format,used,in,link,label,to,the,format,used,in,stack,map,table,attributes,in,particular,it,converts,type,table,indexes,to,constant,pool,indexes,param,start,index,of,the,first,type,in,link,frame,to,write,param,end,index,of,last,type,in,link,frame,to,write,exclusive;private,void,write,frame,types,final,int,start,final,int,end,for,int,i,start,i,end,i,int,t,frame,i,int,d,t,frame,dim,if,d,0,int,v,t,frame,switch,t,frame,case,frame,object,stack,map,put,byte,7,put,short,cw,new,class,cw,type,table,v,str,val1,break,case,frame,uninitialized,stack,map,put,byte,8,put,short,cw,type,table,v,int,val,break,default,stack,map,put,byte,v,else,string,buffer,buf,new,string,buffer,d,28,while,d,0,buf,append,if,t,frame,frame,object,buf,append,l,buf,append,cw,type,table,t,frame,str,val1,buf,append,else,switch,t,0x,f,case,1,buf,append,i,break,case,2,buf,append,f,break,case,3,buf,append,d,break,case,9,buf,append,z,break,case,10,buf,append,b,break,case,11,buf,append,c,break,case,12,buf,append,s,break,default,buf,append,j,stack,map,put,byte,7,put,short,cw,new,class,buf,to,string
MethodWriter -> private void writeFrameTypes(final int start, final int end);1400531367;Writes some types of the current frame {@link #frame} into the_StackMapTableAttribute. This method converts types from the format used_in {@link Label} to the format used in StackMapTable attributes. In_particular, it converts type table indexes to constant pool indexes.__@param start_index of the first type in {@link #frame} to write._@param end_index of last type in {@link #frame} to write (exclusive).;private void writeFrameTypes(final int start, final int end) {_        for (int i = start_ i < end_ ++i) {_            int t = frame[i]__            int d = t & Frame.DIM__            if (d == 0) {_                int v = t & Frame.BASE_VALUE__                switch (t & Frame.BASE_KIND) {_                case Frame.OBJECT:_                    stackMap.putByte(7).putShort(_                            cw.newClass(cw.typeTable[v].strVal1))__                    break__                case Frame.UNINITIALIZED:_                    stackMap.putByte(8).putShort(cw.typeTable[v].intVal)__                    break__                default:_                    stackMap.putByte(v)__                }_            } else {_                StringBuilder sb = new StringBuilder()__                d >>= 28__                while (d-- > 0) {_                    sb.append('[')__                }_                if ((t & Frame.BASE_KIND) == Frame.OBJECT) {_                    sb.append('L')__                    sb.append(cw.typeTable[t & Frame.BASE_VALUE].strVal1)__                    sb.append('_')__                } else {_                    switch (t & 0xF) {_                    case 1:_                        sb.append('I')__                        break__                    case 2:_                        sb.append('F')__                        break__                    case 3:_                        sb.append('D')__                        break__                    case 9:_                        sb.append('Z')__                        break__                    case 10:_                        sb.append('B')__                        break__                    case 11:_                        sb.append('C')__                        break__                    case 12:_                        sb.append('S')__                        break__                    default:_                        sb.append('J')__                    }_                }_                stackMap.putByte(7).putShort(cw.newClass(sb.toString()))__            }_        }_    };writes,some,types,of,the,current,frame,link,frame,into,the,stack,map,table,attribute,this,method,converts,types,from,the,format,used,in,link,label,to,the,format,used,in,stack,map,table,attributes,in,particular,it,converts,type,table,indexes,to,constant,pool,indexes,param,start,index,of,the,first,type,in,link,frame,to,write,param,end,index,of,last,type,in,link,frame,to,write,exclusive;private,void,write,frame,types,final,int,start,final,int,end,for,int,i,start,i,end,i,int,t,frame,i,int,d,t,frame,dim,if,d,0,int,v,t,frame,switch,t,frame,case,frame,object,stack,map,put,byte,7,put,short,cw,new,class,cw,type,table,v,str,val1,break,case,frame,uninitialized,stack,map,put,byte,8,put,short,cw,type,table,v,int,val,break,default,stack,map,put,byte,v,else,string,builder,sb,new,string,builder,d,28,while,d,0,sb,append,if,t,frame,frame,object,sb,append,l,sb,append,cw,type,table,t,frame,str,val1,sb,append,else,switch,t,0x,f,case,1,sb,append,i,break,case,2,sb,append,f,break,case,3,sb,append,d,break,case,9,sb,append,z,break,case,10,sb,append,b,break,case,11,sb,append,c,break,case,12,sb,append,s,break,default,sb,append,j,stack,map,put,byte,7,put,short,cw,new,class,sb,to,string
MethodWriter -> private void writeFrameTypes(final int start, final int end);1431006084;Writes some types of the current frame {@link #frame} into the_StackMapTableAttribute. This method converts types from the format used_in {@link Label} to the format used in StackMapTable attributes. In_particular, it converts type table indexes to constant pool indexes.__@param start_index of the first type in {@link #frame} to write._@param end_index of last type in {@link #frame} to write (exclusive).;private void writeFrameTypes(final int start, final int end) {_        for (int i = start_ i < end_ ++i) {_            int t = frame[i]__            int d = t & Frame.DIM__            if (d == 0) {_                int v = t & Frame.BASE_VALUE__                switch (t & Frame.BASE_KIND) {_                case Frame.OBJECT:_                    stackMap.putByte(7).putShort(_                            cw.newClass(cw.typeTable[v].strVal1))__                    break__                case Frame.UNINITIALIZED:_                    stackMap.putByte(8).putShort(cw.typeTable[v].intVal)__                    break__                default:_                    stackMap.putByte(v)__                }_            } else {_                StringBuilder sb = new StringBuilder()__                d >>= 28__                while (d-- > 0) {_                    sb.append('[')__                }_                if ((t & Frame.BASE_KIND) == Frame.OBJECT) {_                    sb.append('L')__                    sb.append(cw.typeTable[t & Frame.BASE_VALUE].strVal1)__                    sb.append('_')__                } else {_                    switch (t & 0xF) {_                    case 1:_                        sb.append('I')__                        break__                    case 2:_                        sb.append('F')__                        break__                    case 3:_                        sb.append('D')__                        break__                    case 9:_                        sb.append('Z')__                        break__                    case 10:_                        sb.append('B')__                        break__                    case 11:_                        sb.append('C')__                        break__                    case 12:_                        sb.append('S')__                        break__                    default:_                        sb.append('J')__                    }_                }_                stackMap.putByte(7).putShort(cw.newClass(sb.toString()))__            }_        }_    };writes,some,types,of,the,current,frame,link,frame,into,the,stack,map,table,attribute,this,method,converts,types,from,the,format,used,in,link,label,to,the,format,used,in,stack,map,table,attributes,in,particular,it,converts,type,table,indexes,to,constant,pool,indexes,param,start,index,of,the,first,type,in,link,frame,to,write,param,end,index,of,last,type,in,link,frame,to,write,exclusive;private,void,write,frame,types,final,int,start,final,int,end,for,int,i,start,i,end,i,int,t,frame,i,int,d,t,frame,dim,if,d,0,int,v,t,frame,switch,t,frame,case,frame,object,stack,map,put,byte,7,put,short,cw,new,class,cw,type,table,v,str,val1,break,case,frame,uninitialized,stack,map,put,byte,8,put,short,cw,type,table,v,int,val,break,default,stack,map,put,byte,v,else,string,builder,sb,new,string,builder,d,28,while,d,0,sb,append,if,t,frame,frame,object,sb,append,l,sb,append,cw,type,table,t,frame,str,val1,sb,append,else,switch,t,0x,f,case,1,sb,append,i,break,case,2,sb,append,f,break,case,3,sb,append,d,break,case,9,sb,append,z,break,case,10,sb,append,b,break,case,11,sb,append,c,break,case,12,sb,append,s,break,default,sb,append,j,stack,map,put,byte,7,put,short,cw,new,class,sb,to,string
MethodWriter -> private void writeFrameTypes(final int start, final int end);1440705816;Writes some types of the current frame {@link #frame} into the_StackMapTableAttribute. This method converts types from the format used_in {@link Label} to the format used in StackMapTable attributes. In_particular, it converts type table indexes to constant pool indexes.__@param start_index of the first type in {@link #frame} to write._@param end_index of last type in {@link #frame} to write (exclusive).;private void writeFrameTypes(final int start, final int end) {_        for (int i = start_ i < end_ ++i) {_            int t = frame[i]__            int d = t & Frame.DIM__            if (d == 0) {_                int v = t & Frame.BASE_VALUE__                switch (t & Frame.BASE_KIND) {_                case Frame.OBJECT:_                    stackMap.putByte(7).putShort(_                            cw.newClass(cw.typeTable[v].strVal1))__                    break__                case Frame.UNINITIALIZED:_                    stackMap.putByte(8).putShort(cw.typeTable[v].intVal)__                    break__                default:_                    stackMap.putByte(v)__                }_            } else {_                StringBuilder sb = new StringBuilder()__                d >>= 28__                while (d-- > 0) {_                    sb.append('[')__                }_                if ((t & Frame.BASE_KIND) == Frame.OBJECT) {_                    sb.append('L')__                    sb.append(cw.typeTable[t & Frame.BASE_VALUE].strVal1)__                    sb.append('_')__                } else {_                    switch (t & 0xF) {_                    case 1:_                        sb.append('I')__                        break__                    case 2:_                        sb.append('F')__                        break__                    case 3:_                        sb.append('D')__                        break__                    case 9:_                        sb.append('Z')__                        break__                    case 10:_                        sb.append('B')__                        break__                    case 11:_                        sb.append('C')__                        break__                    case 12:_                        sb.append('S')__                        break__                    default:_                        sb.append('J')__                    }_                }_                stackMap.putByte(7).putShort(cw.newClass(sb.toString()))__            }_        }_    };writes,some,types,of,the,current,frame,link,frame,into,the,stack,map,table,attribute,this,method,converts,types,from,the,format,used,in,link,label,to,the,format,used,in,stack,map,table,attributes,in,particular,it,converts,type,table,indexes,to,constant,pool,indexes,param,start,index,of,the,first,type,in,link,frame,to,write,param,end,index,of,last,type,in,link,frame,to,write,exclusive;private,void,write,frame,types,final,int,start,final,int,end,for,int,i,start,i,end,i,int,t,frame,i,int,d,t,frame,dim,if,d,0,int,v,t,frame,switch,t,frame,case,frame,object,stack,map,put,byte,7,put,short,cw,new,class,cw,type,table,v,str,val1,break,case,frame,uninitialized,stack,map,put,byte,8,put,short,cw,type,table,v,int,val,break,default,stack,map,put,byte,v,else,string,builder,sb,new,string,builder,d,28,while,d,0,sb,append,if,t,frame,frame,object,sb,append,l,sb,append,cw,type,table,t,frame,str,val1,sb,append,else,switch,t,0x,f,case,1,sb,append,i,break,case,2,sb,append,f,break,case,3,sb,append,d,break,case,9,sb,append,z,break,case,10,sb,append,b,break,case,11,sb,append,c,break,case,12,sb,append,s,break,default,sb,append,j,stack,map,put,byte,7,put,short,cw,new,class,sb,to,string
MethodWriter -> private void writeFrameTypes(final int start, final int end);1483093254;Writes some types of the current frame {@link #frame} into the_StackMapTableAttribute. This method converts types from the format used_in {@link Label} to the format used in StackMapTable attributes. In_particular, it converts type table indexes to constant pool indexes.__@param start_index of the first type in {@link #frame} to write._@param end_index of last type in {@link #frame} to write (exclusive).;private void writeFrameTypes(final int start, final int end) {_        for (int i = start_ i < end_ ++i) {_            int t = frame[i]__            int d = t & Frame.DIM__            if (d == 0) {_                int v = t & Frame.BASE_VALUE__                switch (t & Frame.BASE_KIND) {_                case Frame.OBJECT:_                    stackMap.putByte(7).putShort(_                            cw.newClass(cw.typeTable[v].strVal1))__                    break__                case Frame.UNINITIALIZED:_                    stackMap.putByte(8).putShort(cw.typeTable[v].intVal)__                    break__                default:_                    stackMap.putByte(v)__                }_            } else {_                StringBuilder sb = new StringBuilder()__                d >>= 28__                while (d-- > 0) {_                    sb.append('[')__                }_                if ((t & Frame.BASE_KIND) == Frame.OBJECT) {_                    sb.append('L')__                    sb.append(cw.typeTable[t & Frame.BASE_VALUE].strVal1)__                    sb.append('_')__                } else {_                    switch (t & 0xF) {_                    case 1:_                        sb.append('I')__                        break__                    case 2:_                        sb.append('F')__                        break__                    case 3:_                        sb.append('D')__                        break__                    case 9:_                        sb.append('Z')__                        break__                    case 10:_                        sb.append('B')__                        break__                    case 11:_                        sb.append('C')__                        break__                    case 12:_                        sb.append('S')__                        break__                    default:_                        sb.append('J')__                    }_                }_                stackMap.putByte(7).putShort(cw.newClass(sb.toString()))__            }_        }_    };writes,some,types,of,the,current,frame,link,frame,into,the,stack,map,table,attribute,this,method,converts,types,from,the,format,used,in,link,label,to,the,format,used,in,stack,map,table,attributes,in,particular,it,converts,type,table,indexes,to,constant,pool,indexes,param,start,index,of,the,first,type,in,link,frame,to,write,param,end,index,of,last,type,in,link,frame,to,write,exclusive;private,void,write,frame,types,final,int,start,final,int,end,for,int,i,start,i,end,i,int,t,frame,i,int,d,t,frame,dim,if,d,0,int,v,t,frame,switch,t,frame,case,frame,object,stack,map,put,byte,7,put,short,cw,new,class,cw,type,table,v,str,val1,break,case,frame,uninitialized,stack,map,put,byte,8,put,short,cw,type,table,v,int,val,break,default,stack,map,put,byte,v,else,string,builder,sb,new,string,builder,d,28,while,d,0,sb,append,if,t,frame,frame,object,sb,append,l,sb,append,cw,type,table,t,frame,str,val1,sb,append,else,switch,t,0x,f,case,1,sb,append,i,break,case,2,sb,append,f,break,case,3,sb,append,d,break,case,9,sb,append,z,break,case,10,sb,append,b,break,case,11,sb,append,c,break,case,12,sb,append,s,break,default,sb,append,j,stack,map,put,byte,7,put,short,cw,new,class,sb,to,string
MethodWriter -> private void writeFrameTypes(final int start, final int end);1505821772;Writes some types of the current frame {@link #frame} into the_StackMapTableAttribute. This method converts types from the format used_in {@link Label} to the format used in StackMapTable attributes. In_particular, it converts type table indexes to constant pool indexes.__@param start_index of the first type in {@link #frame} to write._@param end_index of last type in {@link #frame} to write (exclusive).;private void writeFrameTypes(final int start, final int end) {_        for (int i = start_ i < end_ ++i) {_            int t = frame[i]__            int d = t & Frame.DIM__            if (d == 0) {_                int v = t & Frame.BASE_VALUE__                switch (t & Frame.BASE_KIND) {_                case Frame.OBJECT:_                    stackMap.putByte(7).putShort(_                            cw.newClass(cw.typeTable[v].strVal1))__                    break__                case Frame.UNINITIALIZED:_                    stackMap.putByte(8).putShort(cw.typeTable[v].intVal)__                    break__                default:_                    stackMap.putByte(v)__                }_            } else {_                StringBuilder sb = new StringBuilder()__                d >>= 28__                while (d-- > 0) {_                    sb.append('[')__                }_                if ((t & Frame.BASE_KIND) == Frame.OBJECT) {_                    sb.append('L')__                    sb.append(cw.typeTable[t & Frame.BASE_VALUE].strVal1)__                    sb.append('_')__                } else {_                    switch (t & 0xF) {_                    case 1:_                        sb.append('I')__                        break__                    case 2:_                        sb.append('F')__                        break__                    case 3:_                        sb.append('D')__                        break__                    case 9:_                        sb.append('Z')__                        break__                    case 10:_                        sb.append('B')__                        break__                    case 11:_                        sb.append('C')__                        break__                    case 12:_                        sb.append('S')__                        break__                    default:_                        sb.append('J')__                    }_                }_                stackMap.putByte(7).putShort(cw.newClass(sb.toString()))__            }_        }_    };writes,some,types,of,the,current,frame,link,frame,into,the,stack,map,table,attribute,this,method,converts,types,from,the,format,used,in,link,label,to,the,format,used,in,stack,map,table,attributes,in,particular,it,converts,type,table,indexes,to,constant,pool,indexes,param,start,index,of,the,first,type,in,link,frame,to,write,param,end,index,of,last,type,in,link,frame,to,write,exclusive;private,void,write,frame,types,final,int,start,final,int,end,for,int,i,start,i,end,i,int,t,frame,i,int,d,t,frame,dim,if,d,0,int,v,t,frame,switch,t,frame,case,frame,object,stack,map,put,byte,7,put,short,cw,new,class,cw,type,table,v,str,val1,break,case,frame,uninitialized,stack,map,put,byte,8,put,short,cw,type,table,v,int,val,break,default,stack,map,put,byte,v,else,string,builder,sb,new,string,builder,d,28,while,d,0,sb,append,if,t,frame,frame,object,sb,append,l,sb,append,cw,type,table,t,frame,str,val1,sb,append,else,switch,t,0x,f,case,1,sb,append,i,break,case,2,sb,append,f,break,case,3,sb,append,d,break,case,9,sb,append,z,break,case,10,sb,append,b,break,case,11,sb,append,c,break,case,12,sb,append,s,break,default,sb,append,j,stack,map,put,byte,7,put,short,cw,new,class,sb,to,string
MethodWriter -> MethodWriter(       final SymbolTable symbolTable,       final int access,       final String name,       final String descriptor,       final String signature,       final String[] exceptions,       final int compute);1531241461;Constructs a new {@link MethodWriter}.__@param symbolTable where the constants used in this AnnotationWriter must be stored._@param access the method's access flags (see {@link Opcodes})._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param signature the method's signature. May be <tt>null</tt>._@param exceptions the internal names of the method's exceptions. May be <tt>null</tt>._@param compute indicates what must be computed (see #compute).;MethodWriter(_      final SymbolTable symbolTable,_      final int access,_      final String name,_      final String descriptor,_      final String signature,_      final String[] exceptions,_      final int compute) {_    super(Opcodes.ASM6)__    this.symbolTable = symbolTable__    this.accessFlags = "<init>".equals(name) ? access | Constants.ACC_CONSTRUCTOR : access__    this.nameIndex = symbolTable.addConstantUtf8(name)__    this.name = name__    this.descriptorIndex = symbolTable.addConstantUtf8(descriptor)__    this.descriptor = descriptor__    this.signatureIndex = signature == null ? 0 : symbolTable.addConstantUtf8(signature)__    if (exceptions != null && exceptions.length > 0) {_      numberOfExceptions = exceptions.length__      this.exceptionIndexTable = new int[numberOfExceptions]__      for (int i = 0_ i < numberOfExceptions_ ++i) {_        this.exceptionIndexTable[i] = symbolTable.addConstantClass(exceptions[i]).index__      }_    } else {_      numberOfExceptions = 0__      this.exceptionIndexTable = null__    }_    this.compute = compute__    if (compute != COMPUTE_NOTHING) {_      _      int argumentsSize = Type.getArgumentsAndReturnSizes(descriptor) >> 2__      if ((access & Opcodes.ACC_STATIC) != 0) {_        --argumentsSize__      }_      maxLocals = argumentsSize__      currentLocals = argumentsSize__      _      firstBasicBlock = new Label()__      visitLabel(firstBasicBlock)__    }_  };constructs,a,new,link,method,writer,param,symbol,table,where,the,constants,used,in,this,annotation,writer,must,be,stored,param,access,the,method,s,access,flags,see,link,opcodes,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,tt,null,tt,param,exceptions,the,internal,names,of,the,method,s,exceptions,may,be,tt,null,tt,param,compute,indicates,what,must,be,computed,see,compute;method,writer,final,symbol,table,symbol,table,final,int,access,final,string,name,final,string,descriptor,final,string,signature,final,string,exceptions,final,int,compute,super,opcodes,asm6,this,symbol,table,symbol,table,this,access,flags,init,equals,name,access,constants,access,this,name,index,symbol,table,add,constant,utf8,name,this,name,name,this,descriptor,index,symbol,table,add,constant,utf8,descriptor,this,descriptor,descriptor,this,signature,index,signature,null,0,symbol,table,add,constant,utf8,signature,if,exceptions,null,exceptions,length,0,number,of,exceptions,exceptions,length,this,exception,index,table,new,int,number,of,exceptions,for,int,i,0,i,number,of,exceptions,i,this,exception,index,table,i,symbol,table,add,constant,class,exceptions,i,index,else,number,of,exceptions,0,this,exception,index,table,null,this,compute,compute,if,compute,int,arguments,size,type,get,arguments,and,return,sizes,descriptor,2,if,access,opcodes,0,arguments,size,max,locals,arguments,size,current,locals,arguments,size,first,basic,block,new,label,visit,label,first,basic,block
MethodWriter -> MethodWriter(       final SymbolTable symbolTable,       final int access,       final String name,       final String descriptor,       final String signature,       final String[] exceptions,       final int compute);1536664245;Constructs a new {@link MethodWriter}.__@param symbolTable where the constants used in this AnnotationWriter must be stored._@param access the method's access flags (see {@link Opcodes})._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param signature the method's signature. May be {@literal null}._@param exceptions the internal names of the method's exceptions. May be {@literal null}._@param compute indicates what must be computed (see #compute).;MethodWriter(_      final SymbolTable symbolTable,_      final int access,_      final String name,_      final String descriptor,_      final String signature,_      final String[] exceptions,_      final int compute) {_    super(Opcodes.ASM7)__    this.symbolTable = symbolTable__    this.accessFlags = "<init>".equals(name) ? access | Constants.ACC_CONSTRUCTOR : access__    this.nameIndex = symbolTable.addConstantUtf8(name)__    this.name = name__    this.descriptorIndex = symbolTable.addConstantUtf8(descriptor)__    this.descriptor = descriptor__    this.signatureIndex = signature == null ? 0 : symbolTable.addConstantUtf8(signature)__    if (exceptions != null && exceptions.length > 0) {_      numberOfExceptions = exceptions.length__      this.exceptionIndexTable = new int[numberOfExceptions]__      for (int i = 0_ i < numberOfExceptions_ ++i) {_        this.exceptionIndexTable[i] = symbolTable.addConstantClass(exceptions[i]).index__      }_    } else {_      numberOfExceptions = 0__      this.exceptionIndexTable = null__    }_    this.compute = compute__    if (compute != COMPUTE_NOTHING) {_      _      int argumentsSize = Type.getArgumentsAndReturnSizes(descriptor) >> 2__      if ((access & Opcodes.ACC_STATIC) != 0) {_        --argumentsSize__      }_      maxLocals = argumentsSize__      currentLocals = argumentsSize__      _      firstBasicBlock = new Label()__      visitLabel(firstBasicBlock)__    }_  };constructs,a,new,link,method,writer,param,symbol,table,where,the,constants,used,in,this,annotation,writer,must,be,stored,param,access,the,method,s,access,flags,see,link,opcodes,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,literal,null,param,exceptions,the,internal,names,of,the,method,s,exceptions,may,be,literal,null,param,compute,indicates,what,must,be,computed,see,compute;method,writer,final,symbol,table,symbol,table,final,int,access,final,string,name,final,string,descriptor,final,string,signature,final,string,exceptions,final,int,compute,super,opcodes,asm7,this,symbol,table,symbol,table,this,access,flags,init,equals,name,access,constants,access,this,name,index,symbol,table,add,constant,utf8,name,this,name,name,this,descriptor,index,symbol,table,add,constant,utf8,descriptor,this,descriptor,descriptor,this,signature,index,signature,null,0,symbol,table,add,constant,utf8,signature,if,exceptions,null,exceptions,length,0,number,of,exceptions,exceptions,length,this,exception,index,table,new,int,number,of,exceptions,for,int,i,0,i,number,of,exceptions,i,this,exception,index,table,i,symbol,table,add,constant,class,exceptions,i,index,else,number,of,exceptions,0,this,exception,index,table,null,this,compute,compute,if,compute,int,arguments,size,type,get,arguments,and,return,sizes,descriptor,2,if,access,opcodes,0,arguments,size,max,locals,arguments,size,current,locals,arguments,size,first,basic,block,new,label,visit,label,first,basic,block
MethodWriter -> MethodWriter(       final SymbolTable symbolTable,       final int access,       final String name,       final String descriptor,       final String signature,       final String[] exceptions,       final int compute);1537204147;Constructs a new {@link MethodWriter}.__@param symbolTable where the constants used in this AnnotationWriter must be stored._@param access the method's access flags (see {@link Opcodes})._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param signature the method's signature. May be {@literal null}._@param exceptions the internal names of the method's exceptions. May be {@literal null}._@param compute indicates what must be computed (see #compute).;MethodWriter(_      final SymbolTable symbolTable,_      final int access,_      final String name,_      final String descriptor,_      final String signature,_      final String[] exceptions,_      final int compute) {_    super(Opcodes.ASM7)__    this.symbolTable = symbolTable__    this.accessFlags = "<init>".equals(name) ? access | Constants.ACC_CONSTRUCTOR : access__    this.nameIndex = symbolTable.addConstantUtf8(name)__    this.name = name__    this.descriptorIndex = symbolTable.addConstantUtf8(descriptor)__    this.descriptor = descriptor__    this.signatureIndex = signature == null ? 0 : symbolTable.addConstantUtf8(signature)__    if (exceptions != null && exceptions.length > 0) {_      numberOfExceptions = exceptions.length__      this.exceptionIndexTable = new int[numberOfExceptions]__      for (int i = 0_ i < numberOfExceptions_ ++i) {_        this.exceptionIndexTable[i] = symbolTable.addConstantClass(exceptions[i]).index__      }_    } else {_      numberOfExceptions = 0__      this.exceptionIndexTable = null__    }_    this.compute = compute__    if (compute != COMPUTE_NOTHING) {_      _      int argumentsSize = Type.getArgumentsAndReturnSizes(descriptor) >> 2__      if ((access & Opcodes.ACC_STATIC) != 0) {_        --argumentsSize__      }_      maxLocals = argumentsSize__      currentLocals = argumentsSize__      _      firstBasicBlock = new Label()__      visitLabel(firstBasicBlock)__    }_  };constructs,a,new,link,method,writer,param,symbol,table,where,the,constants,used,in,this,annotation,writer,must,be,stored,param,access,the,method,s,access,flags,see,link,opcodes,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,literal,null,param,exceptions,the,internal,names,of,the,method,s,exceptions,may,be,literal,null,param,compute,indicates,what,must,be,computed,see,compute;method,writer,final,symbol,table,symbol,table,final,int,access,final,string,name,final,string,descriptor,final,string,signature,final,string,exceptions,final,int,compute,super,opcodes,asm7,this,symbol,table,symbol,table,this,access,flags,init,equals,name,access,constants,access,this,name,index,symbol,table,add,constant,utf8,name,this,name,name,this,descriptor,index,symbol,table,add,constant,utf8,descriptor,this,descriptor,descriptor,this,signature,index,signature,null,0,symbol,table,add,constant,utf8,signature,if,exceptions,null,exceptions,length,0,number,of,exceptions,exceptions,length,this,exception,index,table,new,int,number,of,exceptions,for,int,i,0,i,number,of,exceptions,i,this,exception,index,table,i,symbol,table,add,constant,class,exceptions,i,index,else,number,of,exceptions,0,this,exception,index,table,null,this,compute,compute,if,compute,int,arguments,size,type,get,arguments,and,return,sizes,descriptor,2,if,access,opcodes,0,arguments,size,max,locals,arguments,size,current,locals,arguments,size,first,basic,block,new,label,visit,label,first,basic,block
MethodWriter -> MethodWriter(       final SymbolTable symbolTable,       final int access,       final String name,       final String descriptor,       final String signature,       final String[] exceptions,       final int compute);1539119582;Constructs a new {@link MethodWriter}.__@param symbolTable where the constants used in this AnnotationWriter must be stored._@param access the method's access flags (see {@link Opcodes})._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param signature the method's signature. May be {@literal null}._@param exceptions the internal names of the method's exceptions. May be {@literal null}._@param compute indicates what must be computed (see #compute).;MethodWriter(_      final SymbolTable symbolTable,_      final int access,_      final String name,_      final String descriptor,_      final String signature,_      final String[] exceptions,_      final int compute) {_    super(Opcodes.ASM7)__    this.symbolTable = symbolTable__    this.accessFlags = "<init>".equals(name) ? access | Constants.ACC_CONSTRUCTOR : access__    this.nameIndex = symbolTable.addConstantUtf8(name)__    this.name = name__    this.descriptorIndex = symbolTable.addConstantUtf8(descriptor)__    this.descriptor = descriptor__    this.signatureIndex = signature == null ? 0 : symbolTable.addConstantUtf8(signature)__    if (exceptions != null && exceptions.length > 0) {_      numberOfExceptions = exceptions.length__      this.exceptionIndexTable = new int[numberOfExceptions]__      for (int i = 0_ i < numberOfExceptions_ ++i) {_        this.exceptionIndexTable[i] = symbolTable.addConstantClass(exceptions[i]).index__      }_    } else {_      numberOfExceptions = 0__      this.exceptionIndexTable = null__    }_    this.compute = compute__    if (compute != COMPUTE_NOTHING) {_      _      int argumentsSize = Type.getArgumentsAndReturnSizes(descriptor) >> 2__      if ((access & Opcodes.ACC_STATIC) != 0) {_        --argumentsSize__      }_      maxLocals = argumentsSize__      currentLocals = argumentsSize__      _      firstBasicBlock = new Label()__      visitLabel(firstBasicBlock)__    }_  };constructs,a,new,link,method,writer,param,symbol,table,where,the,constants,used,in,this,annotation,writer,must,be,stored,param,access,the,method,s,access,flags,see,link,opcodes,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,literal,null,param,exceptions,the,internal,names,of,the,method,s,exceptions,may,be,literal,null,param,compute,indicates,what,must,be,computed,see,compute;method,writer,final,symbol,table,symbol,table,final,int,access,final,string,name,final,string,descriptor,final,string,signature,final,string,exceptions,final,int,compute,super,opcodes,asm7,this,symbol,table,symbol,table,this,access,flags,init,equals,name,access,constants,access,this,name,index,symbol,table,add,constant,utf8,name,this,name,name,this,descriptor,index,symbol,table,add,constant,utf8,descriptor,this,descriptor,descriptor,this,signature,index,signature,null,0,symbol,table,add,constant,utf8,signature,if,exceptions,null,exceptions,length,0,number,of,exceptions,exceptions,length,this,exception,index,table,new,int,number,of,exceptions,for,int,i,0,i,number,of,exceptions,i,this,exception,index,table,i,symbol,table,add,constant,class,exceptions,i,index,else,number,of,exceptions,0,this,exception,index,table,null,this,compute,compute,if,compute,int,arguments,size,type,get,arguments,and,return,sizes,descriptor,2,if,access,opcodes,0,arguments,size,max,locals,arguments,size,current,locals,arguments,size,first,basic,block,new,label,visit,label,first,basic,block
MethodWriter -> MethodWriter(final ClassWriter cw, final int access, final String name,             final String desc, final String signature,             final String[] exceptions, final boolean computeMaxs,             final boolean computeFrames);1366718246;Constructs a new {@link MethodWriter}.__@param cw_the class writer in which the method must be added._@param access_the method's access flags (see {@link Opcodes})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type})._@param signature_the method's signature. May be <tt>null</tt>._@param exceptions_the internal names of the method's exceptions. May be_<tt>null</tt>._@param computeMaxs_<tt>true</tt> if the maximum stack size and number of local_variables must be automatically computed._@param computeFrames_<tt>true</tt> if the stack map tables must be recomputed from_scratch.;MethodWriter(final ClassWriter cw, final int access, final String name,_            final String desc, final String signature,_            final String[] exceptions, final boolean computeMaxs,_            final boolean computeFrames) {_        super(Opcodes.ASM4)__        if (cw.firstMethod == null) {_            cw.firstMethod = this__        } else {_            cw.lastMethod.mv = this__        }_        cw.lastMethod = this__        this.cw = cw__        this.access = access__        if ("<init>".equals(name)) {_            this.access |= ACC_CONSTRUCTOR__        }_        this.name = cw.newUTF8(name)__        this.desc = cw.newUTF8(desc)__        this.descriptor = desc__        if (ClassReader.SIGNATURES) {_            this.signature = signature__        }_        if (exceptions != null && exceptions.length > 0) {_            exceptionCount = exceptions.length__            this.exceptions = new int[exceptionCount]__            for (int i = 0_ i < exceptionCount_ ++i) {_                this.exceptions[i] = cw.newClass(exceptions[i])__            }_        }_        this.compute = computeFrames ? FRAMES : (computeMaxs ? MAXS : NOTHING)__        if (computeMaxs || computeFrames) {_            _            int size = Type.getArgumentsAndReturnSizes(descriptor) >> 2__            if ((access & Opcodes.ACC_STATIC) != 0) {_                --size__            }_            maxLocals = size__            currentLocals = size__            _            labels = new Label()__            labels.status |= Label.PUSHED__            visitLabel(labels)__        }_    };constructs,a,new,link,method,writer,param,cw,the,class,writer,in,which,the,method,must,be,added,param,access,the,method,s,access,flags,see,link,opcodes,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,tt,null,tt,param,exceptions,the,internal,names,of,the,method,s,exceptions,may,be,tt,null,tt,param,compute,maxs,tt,true,tt,if,the,maximum,stack,size,and,number,of,local,variables,must,be,automatically,computed,param,compute,frames,tt,true,tt,if,the,stack,map,tables,must,be,recomputed,from,scratch;method,writer,final,class,writer,cw,final,int,access,final,string,name,final,string,desc,final,string,signature,final,string,exceptions,final,boolean,compute,maxs,final,boolean,compute,frames,super,opcodes,asm4,if,cw,first,method,null,cw,first,method,this,else,cw,last,method,mv,this,cw,last,method,this,this,cw,cw,this,access,access,if,init,equals,name,this,access,this,name,cw,new,utf8,name,this,desc,cw,new,utf8,desc,this,descriptor,desc,if,class,reader,signatures,this,signature,signature,if,exceptions,null,exceptions,length,0,exception,count,exceptions,length,this,exceptions,new,int,exception,count,for,int,i,0,i,exception,count,i,this,exceptions,i,cw,new,class,exceptions,i,this,compute,compute,frames,frames,compute,maxs,maxs,nothing,if,compute,maxs,compute,frames,int,size,type,get,arguments,and,return,sizes,descriptor,2,if,access,opcodes,0,size,max,locals,size,current,locals,size,labels,new,label,labels,status,label,pushed,visit,label,labels
MethodWriter -> MethodWriter(final ClassWriter cw, final int access, final String name,             final String desc, final String signature,             final String[] exceptions, final boolean computeMaxs,             final boolean computeFrames);1395273982;Constructs a new {@link MethodWriter}.__@param cw_the class writer in which the method must be added._@param access_the method's access flags (see {@link Opcodes})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type})._@param signature_the method's signature. May be <tt>null</tt>._@param exceptions_the internal names of the method's exceptions. May be_<tt>null</tt>._@param computeMaxs_<tt>true</tt> if the maximum stack size and number of local_variables must be automatically computed._@param computeFrames_<tt>true</tt> if the stack map tables must be recomputed from_scratch.;MethodWriter(final ClassWriter cw, final int access, final String name,_            final String desc, final String signature,_            final String[] exceptions, final boolean computeMaxs,_            final boolean computeFrames) {_        super(Opcodes.ASM5)__        if (cw.firstMethod == null) {_            cw.firstMethod = this__        } else {_            cw.lastMethod.mv = this__        }_        cw.lastMethod = this__        this.cw = cw__        this.access = access__        if ("<init>".equals(name)) {_            this.access |= ACC_CONSTRUCTOR__        }_        this.name = cw.newUTF8(name)__        this.desc = cw.newUTF8(desc)__        this.descriptor = desc__        if (ClassReader.SIGNATURES) {_            this.signature = signature__        }_        if (exceptions != null && exceptions.length > 0) {_            exceptionCount = exceptions.length__            this.exceptions = new int[exceptionCount]__            for (int i = 0_ i < exceptionCount_ ++i) {_                this.exceptions[i] = cw.newClass(exceptions[i])__            }_        }_        this.compute = computeFrames ? FRAMES : (computeMaxs ? MAXS : NOTHING)__        if (computeMaxs || computeFrames) {_            _            int size = Type.getArgumentsAndReturnSizes(descriptor) >> 2__            if ((access & Opcodes.ACC_STATIC) != 0) {_                --size__            }_            maxLocals = size__            currentLocals = size__            _            labels = new Label()__            labels.status |= Label.PUSHED__            visitLabel(labels)__        }_    };constructs,a,new,link,method,writer,param,cw,the,class,writer,in,which,the,method,must,be,added,param,access,the,method,s,access,flags,see,link,opcodes,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,tt,null,tt,param,exceptions,the,internal,names,of,the,method,s,exceptions,may,be,tt,null,tt,param,compute,maxs,tt,true,tt,if,the,maximum,stack,size,and,number,of,local,variables,must,be,automatically,computed,param,compute,frames,tt,true,tt,if,the,stack,map,tables,must,be,recomputed,from,scratch;method,writer,final,class,writer,cw,final,int,access,final,string,name,final,string,desc,final,string,signature,final,string,exceptions,final,boolean,compute,maxs,final,boolean,compute,frames,super,opcodes,asm5,if,cw,first,method,null,cw,first,method,this,else,cw,last,method,mv,this,cw,last,method,this,this,cw,cw,this,access,access,if,init,equals,name,this,access,this,name,cw,new,utf8,name,this,desc,cw,new,utf8,desc,this,descriptor,desc,if,class,reader,signatures,this,signature,signature,if,exceptions,null,exceptions,length,0,exception,count,exceptions,length,this,exceptions,new,int,exception,count,for,int,i,0,i,exception,count,i,this,exceptions,i,cw,new,class,exceptions,i,this,compute,compute,frames,frames,compute,maxs,maxs,nothing,if,compute,maxs,compute,frames,int,size,type,get,arguments,and,return,sizes,descriptor,2,if,access,opcodes,0,size,max,locals,size,current,locals,size,labels,new,label,labels,status,label,pushed,visit,label,labels
MethodWriter -> MethodWriter(final ClassWriter cw, final int access, final String name,             final String desc, final String signature,             final String[] exceptions, final boolean computeMaxs,             final boolean computeFrames);1395744691;Constructs a new {@link MethodWriter}.__@param cw_the class writer in which the method must be added._@param access_the method's access flags (see {@link Opcodes})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type})._@param signature_the method's signature. May be <tt>null</tt>._@param exceptions_the internal names of the method's exceptions. May be_<tt>null</tt>._@param computeMaxs_<tt>true</tt> if the maximum stack size and number of local_variables must be automatically computed._@param computeFrames_<tt>true</tt> if the stack map tables must be recomputed from_scratch.;MethodWriter(final ClassWriter cw, final int access, final String name,_            final String desc, final String signature,_            final String[] exceptions, final boolean computeMaxs,_            final boolean computeFrames) {_        super(Opcodes.ASM5)__        if (cw.firstMethod == null) {_            cw.firstMethod = this__        } else {_            cw.lastMethod.mv = this__        }_        cw.lastMethod = this__        this.cw = cw__        this.access = access__        if ("<init>".equals(name)) {_            this.access |= ACC_CONSTRUCTOR__        }_        this.name = cw.newUTF8(name)__        this.desc = cw.newUTF8(desc)__        this.descriptor = desc__        if (ClassReader.SIGNATURES) {_            this.signature = signature__        }_        if (exceptions != null && exceptions.length > 0) {_            exceptionCount = exceptions.length__            this.exceptions = new int[exceptionCount]__            for (int i = 0_ i < exceptionCount_ ++i) {_                this.exceptions[i] = cw.newClass(exceptions[i])__            }_        }_        this.compute = computeFrames ? FRAMES : (computeMaxs ? MAXS : NOTHING)__        if (computeMaxs || computeFrames) {_            _            int size = Type.getArgumentsAndReturnSizes(descriptor) >> 2__            if ((access & Opcodes.ACC_STATIC) != 0) {_                --size__            }_            maxLocals = size__            currentLocals = size__            _            labels = new Label()__            labels.status |= Label.PUSHED__            visitLabel(labels)__        }_    };constructs,a,new,link,method,writer,param,cw,the,class,writer,in,which,the,method,must,be,added,param,access,the,method,s,access,flags,see,link,opcodes,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,tt,null,tt,param,exceptions,the,internal,names,of,the,method,s,exceptions,may,be,tt,null,tt,param,compute,maxs,tt,true,tt,if,the,maximum,stack,size,and,number,of,local,variables,must,be,automatically,computed,param,compute,frames,tt,true,tt,if,the,stack,map,tables,must,be,recomputed,from,scratch;method,writer,final,class,writer,cw,final,int,access,final,string,name,final,string,desc,final,string,signature,final,string,exceptions,final,boolean,compute,maxs,final,boolean,compute,frames,super,opcodes,asm5,if,cw,first,method,null,cw,first,method,this,else,cw,last,method,mv,this,cw,last,method,this,this,cw,cw,this,access,access,if,init,equals,name,this,access,this,name,cw,new,utf8,name,this,desc,cw,new,utf8,desc,this,descriptor,desc,if,class,reader,signatures,this,signature,signature,if,exceptions,null,exceptions,length,0,exception,count,exceptions,length,this,exceptions,new,int,exception,count,for,int,i,0,i,exception,count,i,this,exceptions,i,cw,new,class,exceptions,i,this,compute,compute,frames,frames,compute,maxs,maxs,nothing,if,compute,maxs,compute,frames,int,size,type,get,arguments,and,return,sizes,descriptor,2,if,access,opcodes,0,size,max,locals,size,current,locals,size,labels,new,label,labels,status,label,pushed,visit,label,labels
MethodWriter -> MethodWriter(final ClassWriter cw, final int access, final String name,             final String desc, final String signature,             final String[] exceptions, final boolean computeMaxs,             final boolean computeFrames);1400531367;Constructs a new {@link MethodWriter}.__@param cw_the class writer in which the method must be added._@param access_the method's access flags (see {@link Opcodes})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type})._@param signature_the method's signature. May be <tt>null</tt>._@param exceptions_the internal names of the method's exceptions. May be_<tt>null</tt>._@param computeMaxs_<tt>true</tt> if the maximum stack size and number of local_variables must be automatically computed._@param computeFrames_<tt>true</tt> if the stack map tables must be recomputed from_scratch.;MethodWriter(final ClassWriter cw, final int access, final String name,_            final String desc, final String signature,_            final String[] exceptions, final boolean computeMaxs,_            final boolean computeFrames) {_        super(Opcodes.ASM5)__        if (cw.firstMethod == null) {_            cw.firstMethod = this__        } else {_            cw.lastMethod.mv = this__        }_        cw.lastMethod = this__        this.cw = cw__        this.access = access__        if ("<init>".equals(name)) {_            this.access |= ACC_CONSTRUCTOR__        }_        this.name = cw.newUTF8(name)__        this.desc = cw.newUTF8(desc)__        this.descriptor = desc__        if (ClassReader.SIGNATURES) {_            this.signature = signature__        }_        if (exceptions != null && exceptions.length > 0) {_            exceptionCount = exceptions.length__            this.exceptions = new int[exceptionCount]__            for (int i = 0_ i < exceptionCount_ ++i) {_                this.exceptions[i] = cw.newClass(exceptions[i])__            }_        }_        this.compute = computeFrames ? FRAMES : (computeMaxs ? MAXS : NOTHING)__        if (computeMaxs || computeFrames) {_            _            int size = Type.getArgumentsAndReturnSizes(descriptor) >> 2__            if ((access & Opcodes.ACC_STATIC) != 0) {_                --size__            }_            maxLocals = size__            currentLocals = size__            _            labels = new Label()__            labels.status |= Label.PUSHED__            visitLabel(labels)__        }_    };constructs,a,new,link,method,writer,param,cw,the,class,writer,in,which,the,method,must,be,added,param,access,the,method,s,access,flags,see,link,opcodes,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,tt,null,tt,param,exceptions,the,internal,names,of,the,method,s,exceptions,may,be,tt,null,tt,param,compute,maxs,tt,true,tt,if,the,maximum,stack,size,and,number,of,local,variables,must,be,automatically,computed,param,compute,frames,tt,true,tt,if,the,stack,map,tables,must,be,recomputed,from,scratch;method,writer,final,class,writer,cw,final,int,access,final,string,name,final,string,desc,final,string,signature,final,string,exceptions,final,boolean,compute,maxs,final,boolean,compute,frames,super,opcodes,asm5,if,cw,first,method,null,cw,first,method,this,else,cw,last,method,mv,this,cw,last,method,this,this,cw,cw,this,access,access,if,init,equals,name,this,access,this,name,cw,new,utf8,name,this,desc,cw,new,utf8,desc,this,descriptor,desc,if,class,reader,signatures,this,signature,signature,if,exceptions,null,exceptions,length,0,exception,count,exceptions,length,this,exceptions,new,int,exception,count,for,int,i,0,i,exception,count,i,this,exceptions,i,cw,new,class,exceptions,i,this,compute,compute,frames,frames,compute,maxs,maxs,nothing,if,compute,maxs,compute,frames,int,size,type,get,arguments,and,return,sizes,descriptor,2,if,access,opcodes,0,size,max,locals,size,current,locals,size,labels,new,label,labels,status,label,pushed,visit,label,labels
MethodWriter -> MethodWriter(final ClassWriter cw, final int access, final String name,             final String desc, final String signature,             final String[] exceptions, final boolean computeMaxs,             final boolean computeFrames);1431006084;Constructs a new {@link MethodWriter}.__@param cw_the class writer in which the method must be added._@param access_the method's access flags (see {@link Opcodes})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type})._@param signature_the method's signature. May be <tt>null</tt>._@param exceptions_the internal names of the method's exceptions. May be_<tt>null</tt>._@param computeMaxs_<tt>true</tt> if the maximum stack size and number of local_variables must be automatically computed._@param computeFrames_<tt>true</tt> if the stack map tables must be recomputed from_scratch.;MethodWriter(final ClassWriter cw, final int access, final String name,_            final String desc, final String signature,_            final String[] exceptions, final boolean computeMaxs,_            final boolean computeFrames) {_        super(Opcodes.ASM5)__        if (cw.firstMethod == null) {_            cw.firstMethod = this__        } else {_            cw.lastMethod.mv = this__        }_        cw.lastMethod = this__        this.cw = cw__        this.access = access__        if ("<init>".equals(name)) {_            this.access |= ACC_CONSTRUCTOR__        }_        this.name = cw.newUTF8(name)__        this.desc = cw.newUTF8(desc)__        this.descriptor = desc__        if (ClassReader.SIGNATURES) {_            this.signature = signature__        }_        if (exceptions != null && exceptions.length > 0) {_            exceptionCount = exceptions.length__            this.exceptions = new int[exceptionCount]__            for (int i = 0_ i < exceptionCount_ ++i) {_                this.exceptions[i] = cw.newClass(exceptions[i])__            }_        }_        this.compute = computeFrames ? FRAMES : (computeMaxs ? MAXS : NOTHING)__        if (computeMaxs || computeFrames) {_            _            int size = Type.getArgumentsAndReturnSizes(descriptor) >> 2__            if ((access & Opcodes.ACC_STATIC) != 0) {_                --size__            }_            maxLocals = size__            currentLocals = size__            _            labels = new Label()__            labels.status |= Label.PUSHED__            visitLabel(labels)__        }_    };constructs,a,new,link,method,writer,param,cw,the,class,writer,in,which,the,method,must,be,added,param,access,the,method,s,access,flags,see,link,opcodes,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,tt,null,tt,param,exceptions,the,internal,names,of,the,method,s,exceptions,may,be,tt,null,tt,param,compute,maxs,tt,true,tt,if,the,maximum,stack,size,and,number,of,local,variables,must,be,automatically,computed,param,compute,frames,tt,true,tt,if,the,stack,map,tables,must,be,recomputed,from,scratch;method,writer,final,class,writer,cw,final,int,access,final,string,name,final,string,desc,final,string,signature,final,string,exceptions,final,boolean,compute,maxs,final,boolean,compute,frames,super,opcodes,asm5,if,cw,first,method,null,cw,first,method,this,else,cw,last,method,mv,this,cw,last,method,this,this,cw,cw,this,access,access,if,init,equals,name,this,access,this,name,cw,new,utf8,name,this,desc,cw,new,utf8,desc,this,descriptor,desc,if,class,reader,signatures,this,signature,signature,if,exceptions,null,exceptions,length,0,exception,count,exceptions,length,this,exceptions,new,int,exception,count,for,int,i,0,i,exception,count,i,this,exceptions,i,cw,new,class,exceptions,i,this,compute,compute,frames,frames,compute,maxs,maxs,nothing,if,compute,maxs,compute,frames,int,size,type,get,arguments,and,return,sizes,descriptor,2,if,access,opcodes,0,size,max,locals,size,current,locals,size,labels,new,label,labels,status,label,pushed,visit,label,labels
MethodWriter -> MethodWriter(final ClassWriter cw, final int access, final String name,             final String desc, final String signature,             final String[] exceptions, final boolean computeMaxs,             final boolean computeFrames);1440705816;Constructs a new {@link MethodWriter}.__@param cw_the class writer in which the method must be added._@param access_the method's access flags (see {@link Opcodes})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type})._@param signature_the method's signature. May be <tt>null</tt>._@param exceptions_the internal names of the method's exceptions. May be_<tt>null</tt>._@param computeMaxs_<tt>true</tt> if the maximum stack size and number of local_variables must be automatically computed._@param computeFrames_<tt>true</tt> if the stack map tables must be recomputed from_scratch.;MethodWriter(final ClassWriter cw, final int access, final String name,_            final String desc, final String signature,_            final String[] exceptions, final boolean computeMaxs,_            final boolean computeFrames) {_        super(Opcodes.ASM5)__        if (cw.firstMethod == null) {_            cw.firstMethod = this__        } else {_            cw.lastMethod.mv = this__        }_        cw.lastMethod = this__        this.cw = cw__        this.access = access__        if ("<init>".equals(name)) {_            this.access |= ACC_CONSTRUCTOR__        }_        this.name = cw.newUTF8(name)__        this.desc = cw.newUTF8(desc)__        this.descriptor = desc__        if (ClassReader.SIGNATURES) {_            this.signature = signature__        }_        if (exceptions != null && exceptions.length > 0) {_            exceptionCount = exceptions.length__            this.exceptions = new int[exceptionCount]__            for (int i = 0_ i < exceptionCount_ ++i) {_                this.exceptions[i] = cw.newClass(exceptions[i])__            }_        }_        this.compute = computeFrames ? FRAMES : (computeMaxs ? MAXS : NOTHING)__        if (computeMaxs || computeFrames) {_            _            int size = Type.getArgumentsAndReturnSizes(descriptor) >> 2__            if ((access & Opcodes.ACC_STATIC) != 0) {_                --size__            }_            maxLocals = size__            currentLocals = size__            _            labels = new Label()__            labels.status |= Label.PUSHED__            visitLabel(labels)__        }_    };constructs,a,new,link,method,writer,param,cw,the,class,writer,in,which,the,method,must,be,added,param,access,the,method,s,access,flags,see,link,opcodes,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,tt,null,tt,param,exceptions,the,internal,names,of,the,method,s,exceptions,may,be,tt,null,tt,param,compute,maxs,tt,true,tt,if,the,maximum,stack,size,and,number,of,local,variables,must,be,automatically,computed,param,compute,frames,tt,true,tt,if,the,stack,map,tables,must,be,recomputed,from,scratch;method,writer,final,class,writer,cw,final,int,access,final,string,name,final,string,desc,final,string,signature,final,string,exceptions,final,boolean,compute,maxs,final,boolean,compute,frames,super,opcodes,asm5,if,cw,first,method,null,cw,first,method,this,else,cw,last,method,mv,this,cw,last,method,this,this,cw,cw,this,access,access,if,init,equals,name,this,access,this,name,cw,new,utf8,name,this,desc,cw,new,utf8,desc,this,descriptor,desc,if,class,reader,signatures,this,signature,signature,if,exceptions,null,exceptions,length,0,exception,count,exceptions,length,this,exceptions,new,int,exception,count,for,int,i,0,i,exception,count,i,this,exceptions,i,cw,new,class,exceptions,i,this,compute,compute,frames,frames,compute,maxs,maxs,nothing,if,compute,maxs,compute,frames,int,size,type,get,arguments,and,return,sizes,descriptor,2,if,access,opcodes,0,size,max,locals,size,current,locals,size,labels,new,label,labels,status,label,pushed,visit,label,labels
MethodWriter -> final void put(final ByteVector out);1366718246;Puts the bytecode of this method in the given byte vector.__@param out_the byte vector into which the bytecode of this method must be_copied.;final void put(final ByteVector out) {_        final int FACTOR = ClassWriter.TO_ACC_SYNTHETIC__        int mask = ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED_                | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR)__        out.putShort(access & ~mask).putShort(name).putShort(desc)__        if (classReaderOffset != 0) {_            out.putByteArray(cw.cr.b, classReaderOffset, classReaderLength)__            return__        }_        int attributeCount = 0__        if (code.length > 0) {_            ++attributeCount__        }_        if (exceptionCount > 0) {_            ++attributeCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__        }_        if (ClassReader.SIGNATURES && signature != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            ++attributeCount__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__        }_        out.putShort(attributeCount)__        if (code.length > 0) {_            int size = 12 + code.length + 8 * handlerCount__            if (localVar != null) {_                size += 8 + localVar.length__            }_            if (localVarType != null) {_                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                size += 8 + stackMap.length__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_            out.putShort(cw.newUTF8("Code")).putInt(size)__            out.putShort(maxStack).putShort(maxLocals)__            out.putInt(code.length).putByteArray(code.data, 0, code.length)__            out.putShort(handlerCount)__            if (handlerCount > 0) {_                Handler h = firstHandler__                while (h != null) {_                    out.putShort(h.start.position).putShort(h.end.position)_                            .putShort(h.handler.position).putShort(h.type)__                    h = h.next__                }_            }_            attributeCount = 0__            if (localVar != null) {_                ++attributeCount__            }_            if (localVarType != null) {_                ++attributeCount__            }_            if (lineNumber != null) {_                ++attributeCount__            }_            if (stackMap != null) {_                ++attributeCount__            }_            if (cattrs != null) {_                attributeCount += cattrs.getCount()__            }_            out.putShort(attributeCount)__            if (localVar != null) {_                out.putShort(cw.newUTF8("LocalVariableTable"))__                out.putInt(localVar.length + 2).putShort(localVarCount)__                out.putByteArray(localVar.data, 0, localVar.length)__            }_            if (localVarType != null) {_                out.putShort(cw.newUTF8("LocalVariableTypeTable"))__                out.putInt(localVarType.length + 2).putShort(localVarTypeCount)__                out.putByteArray(localVarType.data, 0, localVarType.length)__            }_            if (lineNumber != null) {_                out.putShort(cw.newUTF8("LineNumberTable"))__                out.putInt(lineNumber.length + 2).putShort(lineNumberCount)__                out.putByteArray(lineNumber.data, 0, lineNumber.length)__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"))__                out.putInt(stackMap.length + 2).putShort(frameCount)__                out.putByteArray(stackMap.data, 0, stackMap.length)__            }_            if (cattrs != null) {_                cattrs.put(cw, code.data, code.length, maxLocals, maxStack, out)__            }_        }_        if (exceptionCount > 0) {_            out.putShort(cw.newUTF8("Exceptions")).putInt(_                    2 * exceptionCount + 2)__            out.putShort(exceptionCount)__            for (int i = 0_ i < exceptionCount_ ++i) {_                out.putShort(exceptions[i])__            }_        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(cw.newUTF8("Synthetic")).putInt(0)__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(cw.newUTF8("Deprecated")).putInt(0)__        }_        if (ClassReader.SIGNATURES && signature != null) {_            out.putShort(cw.newUTF8("Signature")).putInt(2)_                    .putShort(cw.newUTF8(signature))__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            out.putShort(cw.newUTF8("AnnotationDefault"))__            out.putInt(annd.length)__            out.putByteArray(annd.data, 0, annd.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"))__            AnnotationWriter.put(panns, synthetics, out)__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"))__            AnnotationWriter.put(ipanns, synthetics, out)__        }_        if (attrs != null) {_            attrs.put(cw, null, 0, -1, -1, out)__        }_    };puts,the,bytecode,of,this,method,in,the,given,byte,vector,param,out,the,byte,vector,into,which,the,bytecode,of,this,method,must,be,copied;final,void,put,final,byte,vector,out,final,int,factor,class,writer,int,mask,opcodes,class,writer,access,class,writer,factor,out,put,short,access,mask,put,short,name,put,short,desc,if,class,reader,offset,0,out,put,byte,array,cw,cr,b,class,reader,offset,class,reader,length,return,int,attribute,count,0,if,code,length,0,attribute,count,if,exception,count,0,attribute,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,attribute,count,if,access,opcodes,0,attribute,count,if,class,reader,signatures,signature,null,attribute,count,if,class,reader,annotations,annd,null,attribute,count,if,class,reader,annotations,anns,null,attribute,count,if,class,reader,annotations,ianns,null,attribute,count,if,class,reader,annotations,panns,null,attribute,count,if,class,reader,annotations,ipanns,null,attribute,count,if,attrs,null,attribute,count,attrs,get,count,out,put,short,attribute,count,if,code,length,0,int,size,12,code,length,8,handler,count,if,local,var,null,size,8,local,var,length,if,local,var,type,null,size,8,local,var,type,length,if,line,number,null,size,8,line,number,length,if,stack,map,null,size,8,stack,map,length,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,out,put,short,cw,new,utf8,code,put,int,size,out,put,short,max,stack,put,short,max,locals,out,put,int,code,length,put,byte,array,code,data,0,code,length,out,put,short,handler,count,if,handler,count,0,handler,h,first,handler,while,h,null,out,put,short,h,start,position,put,short,h,end,position,put,short,h,handler,position,put,short,h,type,h,h,next,attribute,count,0,if,local,var,null,attribute,count,if,local,var,type,null,attribute,count,if,line,number,null,attribute,count,if,stack,map,null,attribute,count,if,cattrs,null,attribute,count,cattrs,get,count,out,put,short,attribute,count,if,local,var,null,out,put,short,cw,new,utf8,local,variable,table,out,put,int,local,var,length,2,put,short,local,var,count,out,put,byte,array,local,var,data,0,local,var,length,if,local,var,type,null,out,put,short,cw,new,utf8,local,variable,type,table,out,put,int,local,var,type,length,2,put,short,local,var,type,count,out,put,byte,array,local,var,type,data,0,local,var,type,length,if,line,number,null,out,put,short,cw,new,utf8,line,number,table,out,put,int,line,number,length,2,put,short,line,number,count,out,put,byte,array,line,number,data,0,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,out,put,short,cw,new,utf8,zip,stack,map,table,stack,map,out,put,int,stack,map,length,2,put,short,frame,count,out,put,byte,array,stack,map,data,0,stack,map,length,if,cattrs,null,cattrs,put,cw,code,data,code,length,max,locals,max,stack,out,if,exception,count,0,out,put,short,cw,new,utf8,exceptions,put,int,2,exception,count,2,out,put,short,exception,count,for,int,i,0,i,exception,count,i,out,put,short,exceptions,i,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,out,put,short,cw,new,utf8,synthetic,put,int,0,if,access,opcodes,0,out,put,short,cw,new,utf8,deprecated,put,int,0,if,class,reader,signatures,signature,null,out,put,short,cw,new,utf8,signature,put,int,2,put,short,cw,new,utf8,signature,if,class,reader,annotations,annd,null,out,put,short,cw,new,utf8,annotation,default,out,put,int,annd,length,out,put,byte,array,annd,data,0,annd,length,if,class,reader,annotations,anns,null,out,put,short,cw,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,cw,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,panns,null,out,put,short,cw,new,utf8,runtime,visible,parameter,annotations,annotation,writer,put,panns,synthetics,out,if,class,reader,annotations,ipanns,null,out,put,short,cw,new,utf8,runtime,invisible,parameter,annotations,annotation,writer,put,ipanns,synthetics,out,if,attrs,null,attrs,put,cw,null,0,1,1,out
MethodWriter -> final void put(final ByteVector out);1395273982;Puts the bytecode of this method in the given byte vector.__@param out_the byte vector into which the bytecode of this method must be_copied.;final void put(final ByteVector out) {_        final int FACTOR = ClassWriter.TO_ACC_SYNTHETIC__        int mask = ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED_                | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR)__        out.putShort(access & ~mask).putShort(name).putShort(desc)__        if (classReaderOffset != 0) {_            out.putByteArray(cw.cr.b, classReaderOffset, classReaderLength)__            return__        }_        int attributeCount = 0__        if (code.length > 0) {_            ++attributeCount__        }_        if (exceptionCount > 0) {_            ++attributeCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__        }_        if (ClassReader.SIGNATURES && signature != null) {_            ++attributeCount__        }_        if (methodParameters != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            ++attributeCount__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__        }_        out.putShort(attributeCount)__        if (code.length > 0) {_            int size = 12 + code.length + 8 * handlerCount__            if (localVar != null) {_                size += 8 + localVar.length__            }_            if (localVarType != null) {_                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_            out.putShort(cw.newUTF8("Code")).putInt(size)__            out.putShort(maxStack).putShort(maxLocals)__            out.putInt(code.length).putByteArray(code.data, 0, code.length)__            out.putShort(handlerCount)__            if (handlerCount > 0) {_                Handler h = firstHandler__                while (h != null) {_                    out.putShort(h.start.position).putShort(h.end.position)_                            .putShort(h.handler.position).putShort(h.type)__                    h = h.next__                }_            }_            attributeCount = 0__            if (localVar != null) {_                ++attributeCount__            }_            if (localVarType != null) {_                ++attributeCount__            }_            if (lineNumber != null) {_                ++attributeCount__            }_            if (stackMap != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                ++attributeCount__            }_            if (cattrs != null) {_                attributeCount += cattrs.getCount()__            }_            out.putShort(attributeCount)__            if (localVar != null) {_                out.putShort(cw.newUTF8("LocalVariableTable"))__                out.putInt(localVar.length + 2).putShort(localVarCount)__                out.putByteArray(localVar.data, 0, localVar.length)__            }_            if (localVarType != null) {_                out.putShort(cw.newUTF8("LocalVariableTypeTable"))__                out.putInt(localVarType.length + 2).putShort(localVarTypeCount)__                out.putByteArray(localVarType.data, 0, localVarType.length)__            }_            if (lineNumber != null) {_                out.putShort(cw.newUTF8("LineNumberTable"))__                out.putInt(lineNumber.length + 2).putShort(lineNumberCount)__                out.putByteArray(lineNumber.data, 0, lineNumber.length)__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"))__                out.putInt(stackMap.length + 2).putShort(frameCount)__                out.putByteArray(stackMap.data, 0, stackMap.length)__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__                ctanns.put(out)__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__                ictanns.put(out)__            }_            if (cattrs != null) {_                cattrs.put(cw, code.data, code.length, maxLocals, maxStack, out)__            }_        }_        if (exceptionCount > 0) {_            out.putShort(cw.newUTF8("Exceptions")).putInt(_                    2 * exceptionCount + 2)__            out.putShort(exceptionCount)__            for (int i = 0_ i < exceptionCount_ ++i) {_                out.putShort(exceptions[i])__            }_        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(cw.newUTF8("Synthetic")).putInt(0)__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(cw.newUTF8("Deprecated")).putInt(0)__        }_        if (ClassReader.SIGNATURES && signature != null) {_            out.putShort(cw.newUTF8("Signature")).putInt(2)_                    .putShort(cw.newUTF8(signature))__        }_        if (methodParameters != null) {_            out.putShort(cw.newUTF8("MethodParameters"))__            out.putInt(methodParameters.length + 1).putByte(_                    methodParametersCount)__            out.putByteArray(methodParameters.data, 0, methodParameters.length)__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            out.putShort(cw.newUTF8("AnnotationDefault"))__            out.putInt(annd.length)__            out.putByteArray(annd.data, 0, annd.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"))__            AnnotationWriter.put(panns, synthetics, out)__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"))__            AnnotationWriter.put(ipanns, synthetics, out)__        }_        if (attrs != null) {_            attrs.put(cw, null, 0, -1, -1, out)__        }_    };puts,the,bytecode,of,this,method,in,the,given,byte,vector,param,out,the,byte,vector,into,which,the,bytecode,of,this,method,must,be,copied;final,void,put,final,byte,vector,out,final,int,factor,class,writer,int,mask,opcodes,class,writer,access,class,writer,factor,out,put,short,access,mask,put,short,name,put,short,desc,if,class,reader,offset,0,out,put,byte,array,cw,cr,b,class,reader,offset,class,reader,length,return,int,attribute,count,0,if,code,length,0,attribute,count,if,exception,count,0,attribute,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,attribute,count,if,access,opcodes,0,attribute,count,if,class,reader,signatures,signature,null,attribute,count,if,method,parameters,null,attribute,count,if,class,reader,annotations,annd,null,attribute,count,if,class,reader,annotations,anns,null,attribute,count,if,class,reader,annotations,ianns,null,attribute,count,if,class,reader,annotations,tanns,null,attribute,count,if,class,reader,annotations,itanns,null,attribute,count,if,class,reader,annotations,panns,null,attribute,count,if,class,reader,annotations,ipanns,null,attribute,count,if,attrs,null,attribute,count,attrs,get,count,out,put,short,attribute,count,if,code,length,0,int,size,12,code,length,8,handler,count,if,local,var,null,size,8,local,var,length,if,local,var,type,null,size,8,local,var,type,length,if,line,number,null,size,8,line,number,length,if,stack,map,null,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,out,put,short,cw,new,utf8,code,put,int,size,out,put,short,max,stack,put,short,max,locals,out,put,int,code,length,put,byte,array,code,data,0,code,length,out,put,short,handler,count,if,handler,count,0,handler,h,first,handler,while,h,null,out,put,short,h,start,position,put,short,h,end,position,put,short,h,handler,position,put,short,h,type,h,h,next,attribute,count,0,if,local,var,null,attribute,count,if,local,var,type,null,attribute,count,if,line,number,null,attribute,count,if,stack,map,null,attribute,count,if,class,reader,annotations,ctanns,null,attribute,count,if,class,reader,annotations,ictanns,null,attribute,count,if,cattrs,null,attribute,count,cattrs,get,count,out,put,short,attribute,count,if,local,var,null,out,put,short,cw,new,utf8,local,variable,table,out,put,int,local,var,length,2,put,short,local,var,count,out,put,byte,array,local,var,data,0,local,var,length,if,local,var,type,null,out,put,short,cw,new,utf8,local,variable,type,table,out,put,int,local,var,type,length,2,put,short,local,var,type,count,out,put,byte,array,local,var,type,data,0,local,var,type,length,if,line,number,null,out,put,short,cw,new,utf8,line,number,table,out,put,int,line,number,length,2,put,short,line,number,count,out,put,byte,array,line,number,data,0,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,out,put,short,cw,new,utf8,zip,stack,map,table,stack,map,out,put,int,stack,map,length,2,put,short,frame,count,out,put,byte,array,stack,map,data,0,stack,map,length,if,class,reader,annotations,ctanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,ctanns,put,out,if,class,reader,annotations,ictanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,ictanns,put,out,if,cattrs,null,cattrs,put,cw,code,data,code,length,max,locals,max,stack,out,if,exception,count,0,out,put,short,cw,new,utf8,exceptions,put,int,2,exception,count,2,out,put,short,exception,count,for,int,i,0,i,exception,count,i,out,put,short,exceptions,i,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,out,put,short,cw,new,utf8,synthetic,put,int,0,if,access,opcodes,0,out,put,short,cw,new,utf8,deprecated,put,int,0,if,class,reader,signatures,signature,null,out,put,short,cw,new,utf8,signature,put,int,2,put,short,cw,new,utf8,signature,if,method,parameters,null,out,put,short,cw,new,utf8,method,parameters,out,put,int,method,parameters,length,1,put,byte,method,parameters,count,out,put,byte,array,method,parameters,data,0,method,parameters,length,if,class,reader,annotations,annd,null,out,put,short,cw,new,utf8,annotation,default,out,put,int,annd,length,out,put,byte,array,annd,data,0,annd,length,if,class,reader,annotations,anns,null,out,put,short,cw,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,cw,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,class,reader,annotations,panns,null,out,put,short,cw,new,utf8,runtime,visible,parameter,annotations,annotation,writer,put,panns,synthetics,out,if,class,reader,annotations,ipanns,null,out,put,short,cw,new,utf8,runtime,invisible,parameter,annotations,annotation,writer,put,ipanns,synthetics,out,if,attrs,null,attrs,put,cw,null,0,1,1,out
MethodWriter -> final void put(final ByteVector out);1395744691;Puts the bytecode of this method in the given byte vector.__@param out_the byte vector into which the bytecode of this method must be_copied.;final void put(final ByteVector out) {_        final int FACTOR = ClassWriter.TO_ACC_SYNTHETIC__        int mask = ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED_                | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR)__        out.putShort(access & ~mask).putShort(name).putShort(desc)__        if (classReaderOffset != 0) {_            out.putByteArray(cw.cr.b, classReaderOffset, classReaderLength)__            return__        }_        int attributeCount = 0__        if (code.length > 0) {_            ++attributeCount__        }_        if (exceptionCount > 0) {_            ++attributeCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__        }_        if (ClassReader.SIGNATURES && signature != null) {_            ++attributeCount__        }_        if (methodParameters != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            ++attributeCount__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__        }_        out.putShort(attributeCount)__        if (code.length > 0) {_            int size = 12 + code.length + 8 * handlerCount__            if (localVar != null) {_                size += 8 + localVar.length__            }_            if (localVarType != null) {_                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_            out.putShort(cw.newUTF8("Code")).putInt(size)__            out.putShort(maxStack).putShort(maxLocals)__            out.putInt(code.length).putByteArray(code.data, 0, code.length)__            out.putShort(handlerCount)__            if (handlerCount > 0) {_                Handler h = firstHandler__                while (h != null) {_                    out.putShort(h.start.position).putShort(h.end.position)_                            .putShort(h.handler.position).putShort(h.type)__                    h = h.next__                }_            }_            attributeCount = 0__            if (localVar != null) {_                ++attributeCount__            }_            if (localVarType != null) {_                ++attributeCount__            }_            if (lineNumber != null) {_                ++attributeCount__            }_            if (stackMap != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                ++attributeCount__            }_            if (cattrs != null) {_                attributeCount += cattrs.getCount()__            }_            out.putShort(attributeCount)__            if (localVar != null) {_                out.putShort(cw.newUTF8("LocalVariableTable"))__                out.putInt(localVar.length + 2).putShort(localVarCount)__                out.putByteArray(localVar.data, 0, localVar.length)__            }_            if (localVarType != null) {_                out.putShort(cw.newUTF8("LocalVariableTypeTable"))__                out.putInt(localVarType.length + 2).putShort(localVarTypeCount)__                out.putByteArray(localVarType.data, 0, localVarType.length)__            }_            if (lineNumber != null) {_                out.putShort(cw.newUTF8("LineNumberTable"))__                out.putInt(lineNumber.length + 2).putShort(lineNumberCount)__                out.putByteArray(lineNumber.data, 0, lineNumber.length)__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"))__                out.putInt(stackMap.length + 2).putShort(frameCount)__                out.putByteArray(stackMap.data, 0, stackMap.length)__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__                ctanns.put(out)__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__                ictanns.put(out)__            }_            if (cattrs != null) {_                cattrs.put(cw, code.data, code.length, maxLocals, maxStack, out)__            }_        }_        if (exceptionCount > 0) {_            out.putShort(cw.newUTF8("Exceptions")).putInt(_                    2 * exceptionCount + 2)__            out.putShort(exceptionCount)__            for (int i = 0_ i < exceptionCount_ ++i) {_                out.putShort(exceptions[i])__            }_        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(cw.newUTF8("Synthetic")).putInt(0)__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(cw.newUTF8("Deprecated")).putInt(0)__        }_        if (ClassReader.SIGNATURES && signature != null) {_            out.putShort(cw.newUTF8("Signature")).putInt(2)_                    .putShort(cw.newUTF8(signature))__        }_        if (methodParameters != null) {_            out.putShort(cw.newUTF8("MethodParameters"))__            out.putInt(methodParameters.length + 1).putByte(_                    methodParametersCount)__            out.putByteArray(methodParameters.data, 0, methodParameters.length)__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            out.putShort(cw.newUTF8("AnnotationDefault"))__            out.putInt(annd.length)__            out.putByteArray(annd.data, 0, annd.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"))__            AnnotationWriter.put(panns, synthetics, out)__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"))__            AnnotationWriter.put(ipanns, synthetics, out)__        }_        if (attrs != null) {_            attrs.put(cw, null, 0, -1, -1, out)__        }_    };puts,the,bytecode,of,this,method,in,the,given,byte,vector,param,out,the,byte,vector,into,which,the,bytecode,of,this,method,must,be,copied;final,void,put,final,byte,vector,out,final,int,factor,class,writer,int,mask,opcodes,class,writer,access,class,writer,factor,out,put,short,access,mask,put,short,name,put,short,desc,if,class,reader,offset,0,out,put,byte,array,cw,cr,b,class,reader,offset,class,reader,length,return,int,attribute,count,0,if,code,length,0,attribute,count,if,exception,count,0,attribute,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,attribute,count,if,access,opcodes,0,attribute,count,if,class,reader,signatures,signature,null,attribute,count,if,method,parameters,null,attribute,count,if,class,reader,annotations,annd,null,attribute,count,if,class,reader,annotations,anns,null,attribute,count,if,class,reader,annotations,ianns,null,attribute,count,if,class,reader,annotations,tanns,null,attribute,count,if,class,reader,annotations,itanns,null,attribute,count,if,class,reader,annotations,panns,null,attribute,count,if,class,reader,annotations,ipanns,null,attribute,count,if,attrs,null,attribute,count,attrs,get,count,out,put,short,attribute,count,if,code,length,0,int,size,12,code,length,8,handler,count,if,local,var,null,size,8,local,var,length,if,local,var,type,null,size,8,local,var,type,length,if,line,number,null,size,8,line,number,length,if,stack,map,null,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,out,put,short,cw,new,utf8,code,put,int,size,out,put,short,max,stack,put,short,max,locals,out,put,int,code,length,put,byte,array,code,data,0,code,length,out,put,short,handler,count,if,handler,count,0,handler,h,first,handler,while,h,null,out,put,short,h,start,position,put,short,h,end,position,put,short,h,handler,position,put,short,h,type,h,h,next,attribute,count,0,if,local,var,null,attribute,count,if,local,var,type,null,attribute,count,if,line,number,null,attribute,count,if,stack,map,null,attribute,count,if,class,reader,annotations,ctanns,null,attribute,count,if,class,reader,annotations,ictanns,null,attribute,count,if,cattrs,null,attribute,count,cattrs,get,count,out,put,short,attribute,count,if,local,var,null,out,put,short,cw,new,utf8,local,variable,table,out,put,int,local,var,length,2,put,short,local,var,count,out,put,byte,array,local,var,data,0,local,var,length,if,local,var,type,null,out,put,short,cw,new,utf8,local,variable,type,table,out,put,int,local,var,type,length,2,put,short,local,var,type,count,out,put,byte,array,local,var,type,data,0,local,var,type,length,if,line,number,null,out,put,short,cw,new,utf8,line,number,table,out,put,int,line,number,length,2,put,short,line,number,count,out,put,byte,array,line,number,data,0,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,out,put,short,cw,new,utf8,zip,stack,map,table,stack,map,out,put,int,stack,map,length,2,put,short,frame,count,out,put,byte,array,stack,map,data,0,stack,map,length,if,class,reader,annotations,ctanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,ctanns,put,out,if,class,reader,annotations,ictanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,ictanns,put,out,if,cattrs,null,cattrs,put,cw,code,data,code,length,max,locals,max,stack,out,if,exception,count,0,out,put,short,cw,new,utf8,exceptions,put,int,2,exception,count,2,out,put,short,exception,count,for,int,i,0,i,exception,count,i,out,put,short,exceptions,i,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,out,put,short,cw,new,utf8,synthetic,put,int,0,if,access,opcodes,0,out,put,short,cw,new,utf8,deprecated,put,int,0,if,class,reader,signatures,signature,null,out,put,short,cw,new,utf8,signature,put,int,2,put,short,cw,new,utf8,signature,if,method,parameters,null,out,put,short,cw,new,utf8,method,parameters,out,put,int,method,parameters,length,1,put,byte,method,parameters,count,out,put,byte,array,method,parameters,data,0,method,parameters,length,if,class,reader,annotations,annd,null,out,put,short,cw,new,utf8,annotation,default,out,put,int,annd,length,out,put,byte,array,annd,data,0,annd,length,if,class,reader,annotations,anns,null,out,put,short,cw,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,cw,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,class,reader,annotations,panns,null,out,put,short,cw,new,utf8,runtime,visible,parameter,annotations,annotation,writer,put,panns,synthetics,out,if,class,reader,annotations,ipanns,null,out,put,short,cw,new,utf8,runtime,invisible,parameter,annotations,annotation,writer,put,ipanns,synthetics,out,if,attrs,null,attrs,put,cw,null,0,1,1,out
MethodWriter -> final void put(final ByteVector out);1400531367;Puts the bytecode of this method in the given byte vector.__@param out_the byte vector into which the bytecode of this method must be_copied.;final void put(final ByteVector out) {_        final int FACTOR = ClassWriter.TO_ACC_SYNTHETIC__        int mask = ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED_                | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR)__        out.putShort(access & ~mask).putShort(name).putShort(desc)__        if (classReaderOffset != 0) {_            out.putByteArray(cw.cr.b, classReaderOffset, classReaderLength)__            return__        }_        int attributeCount = 0__        if (code.length > 0) {_            ++attributeCount__        }_        if (exceptionCount > 0) {_            ++attributeCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__        }_        if (ClassReader.SIGNATURES && signature != null) {_            ++attributeCount__        }_        if (methodParameters != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            ++attributeCount__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__        }_        out.putShort(attributeCount)__        if (code.length > 0) {_            int size = 12 + code.length + 8 * handlerCount__            if (localVar != null) {_                size += 8 + localVar.length__            }_            if (localVarType != null) {_                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_            out.putShort(cw.newUTF8("Code")).putInt(size)__            out.putShort(maxStack).putShort(maxLocals)__            out.putInt(code.length).putByteArray(code.data, 0, code.length)__            out.putShort(handlerCount)__            if (handlerCount > 0) {_                Handler h = firstHandler__                while (h != null) {_                    out.putShort(h.start.position).putShort(h.end.position)_                            .putShort(h.handler.position).putShort(h.type)__                    h = h.next__                }_            }_            attributeCount = 0__            if (localVar != null) {_                ++attributeCount__            }_            if (localVarType != null) {_                ++attributeCount__            }_            if (lineNumber != null) {_                ++attributeCount__            }_            if (stackMap != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                ++attributeCount__            }_            if (cattrs != null) {_                attributeCount += cattrs.getCount()__            }_            out.putShort(attributeCount)__            if (localVar != null) {_                out.putShort(cw.newUTF8("LocalVariableTable"))__                out.putInt(localVar.length + 2).putShort(localVarCount)__                out.putByteArray(localVar.data, 0, localVar.length)__            }_            if (localVarType != null) {_                out.putShort(cw.newUTF8("LocalVariableTypeTable"))__                out.putInt(localVarType.length + 2).putShort(localVarTypeCount)__                out.putByteArray(localVarType.data, 0, localVarType.length)__            }_            if (lineNumber != null) {_                out.putShort(cw.newUTF8("LineNumberTable"))__                out.putInt(lineNumber.length + 2).putShort(lineNumberCount)__                out.putByteArray(lineNumber.data, 0, lineNumber.length)__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"))__                out.putInt(stackMap.length + 2).putShort(frameCount)__                out.putByteArray(stackMap.data, 0, stackMap.length)__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__                ctanns.put(out)__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__                ictanns.put(out)__            }_            if (cattrs != null) {_                cattrs.put(cw, code.data, code.length, maxLocals, maxStack, out)__            }_        }_        if (exceptionCount > 0) {_            out.putShort(cw.newUTF8("Exceptions")).putInt(_                    2 * exceptionCount + 2)__            out.putShort(exceptionCount)__            for (int i = 0_ i < exceptionCount_ ++i) {_                out.putShort(exceptions[i])__            }_        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(cw.newUTF8("Synthetic")).putInt(0)__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(cw.newUTF8("Deprecated")).putInt(0)__        }_        if (ClassReader.SIGNATURES && signature != null) {_            out.putShort(cw.newUTF8("Signature")).putInt(2)_                    .putShort(cw.newUTF8(signature))__        }_        if (methodParameters != null) {_            out.putShort(cw.newUTF8("MethodParameters"))__            out.putInt(methodParameters.length + 1).putByte(_                    methodParametersCount)__            out.putByteArray(methodParameters.data, 0, methodParameters.length)__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            out.putShort(cw.newUTF8("AnnotationDefault"))__            out.putInt(annd.length)__            out.putByteArray(annd.data, 0, annd.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"))__            AnnotationWriter.put(panns, synthetics, out)__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"))__            AnnotationWriter.put(ipanns, synthetics, out)__        }_        if (attrs != null) {_            attrs.put(cw, null, 0, -1, -1, out)__        }_    };puts,the,bytecode,of,this,method,in,the,given,byte,vector,param,out,the,byte,vector,into,which,the,bytecode,of,this,method,must,be,copied;final,void,put,final,byte,vector,out,final,int,factor,class,writer,int,mask,opcodes,class,writer,access,class,writer,factor,out,put,short,access,mask,put,short,name,put,short,desc,if,class,reader,offset,0,out,put,byte,array,cw,cr,b,class,reader,offset,class,reader,length,return,int,attribute,count,0,if,code,length,0,attribute,count,if,exception,count,0,attribute,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,attribute,count,if,access,opcodes,0,attribute,count,if,class,reader,signatures,signature,null,attribute,count,if,method,parameters,null,attribute,count,if,class,reader,annotations,annd,null,attribute,count,if,class,reader,annotations,anns,null,attribute,count,if,class,reader,annotations,ianns,null,attribute,count,if,class,reader,annotations,tanns,null,attribute,count,if,class,reader,annotations,itanns,null,attribute,count,if,class,reader,annotations,panns,null,attribute,count,if,class,reader,annotations,ipanns,null,attribute,count,if,attrs,null,attribute,count,attrs,get,count,out,put,short,attribute,count,if,code,length,0,int,size,12,code,length,8,handler,count,if,local,var,null,size,8,local,var,length,if,local,var,type,null,size,8,local,var,type,length,if,line,number,null,size,8,line,number,length,if,stack,map,null,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,out,put,short,cw,new,utf8,code,put,int,size,out,put,short,max,stack,put,short,max,locals,out,put,int,code,length,put,byte,array,code,data,0,code,length,out,put,short,handler,count,if,handler,count,0,handler,h,first,handler,while,h,null,out,put,short,h,start,position,put,short,h,end,position,put,short,h,handler,position,put,short,h,type,h,h,next,attribute,count,0,if,local,var,null,attribute,count,if,local,var,type,null,attribute,count,if,line,number,null,attribute,count,if,stack,map,null,attribute,count,if,class,reader,annotations,ctanns,null,attribute,count,if,class,reader,annotations,ictanns,null,attribute,count,if,cattrs,null,attribute,count,cattrs,get,count,out,put,short,attribute,count,if,local,var,null,out,put,short,cw,new,utf8,local,variable,table,out,put,int,local,var,length,2,put,short,local,var,count,out,put,byte,array,local,var,data,0,local,var,length,if,local,var,type,null,out,put,short,cw,new,utf8,local,variable,type,table,out,put,int,local,var,type,length,2,put,short,local,var,type,count,out,put,byte,array,local,var,type,data,0,local,var,type,length,if,line,number,null,out,put,short,cw,new,utf8,line,number,table,out,put,int,line,number,length,2,put,short,line,number,count,out,put,byte,array,line,number,data,0,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,out,put,short,cw,new,utf8,zip,stack,map,table,stack,map,out,put,int,stack,map,length,2,put,short,frame,count,out,put,byte,array,stack,map,data,0,stack,map,length,if,class,reader,annotations,ctanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,ctanns,put,out,if,class,reader,annotations,ictanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,ictanns,put,out,if,cattrs,null,cattrs,put,cw,code,data,code,length,max,locals,max,stack,out,if,exception,count,0,out,put,short,cw,new,utf8,exceptions,put,int,2,exception,count,2,out,put,short,exception,count,for,int,i,0,i,exception,count,i,out,put,short,exceptions,i,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,out,put,short,cw,new,utf8,synthetic,put,int,0,if,access,opcodes,0,out,put,short,cw,new,utf8,deprecated,put,int,0,if,class,reader,signatures,signature,null,out,put,short,cw,new,utf8,signature,put,int,2,put,short,cw,new,utf8,signature,if,method,parameters,null,out,put,short,cw,new,utf8,method,parameters,out,put,int,method,parameters,length,1,put,byte,method,parameters,count,out,put,byte,array,method,parameters,data,0,method,parameters,length,if,class,reader,annotations,annd,null,out,put,short,cw,new,utf8,annotation,default,out,put,int,annd,length,out,put,byte,array,annd,data,0,annd,length,if,class,reader,annotations,anns,null,out,put,short,cw,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,cw,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,class,reader,annotations,panns,null,out,put,short,cw,new,utf8,runtime,visible,parameter,annotations,annotation,writer,put,panns,synthetics,out,if,class,reader,annotations,ipanns,null,out,put,short,cw,new,utf8,runtime,invisible,parameter,annotations,annotation,writer,put,ipanns,synthetics,out,if,attrs,null,attrs,put,cw,null,0,1,1,out
MethodWriter -> final void put(final ByteVector out);1431006084;Puts the bytecode of this method in the given byte vector.__@param out_the byte vector into which the bytecode of this method must be_copied.;final void put(final ByteVector out) {_        final int FACTOR = ClassWriter.TO_ACC_SYNTHETIC__        int mask = ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED_                | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR)__        out.putShort(access & ~mask).putShort(name).putShort(desc)__        if (classReaderOffset != 0) {_            out.putByteArray(cw.cr.b, classReaderOffset, classReaderLength)__            return__        }_        int attributeCount = 0__        if (code.length > 0) {_            ++attributeCount__        }_        if (exceptionCount > 0) {_            ++attributeCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__        }_        if (ClassReader.SIGNATURES && signature != null) {_            ++attributeCount__        }_        if (methodParameters != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            ++attributeCount__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__        }_        out.putShort(attributeCount)__        if (code.length > 0) {_            int size = 12 + code.length + 8 * handlerCount__            if (localVar != null) {_                size += 8 + localVar.length__            }_            if (localVarType != null) {_                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_            out.putShort(cw.newUTF8("Code")).putInt(size)__            out.putShort(maxStack).putShort(maxLocals)__            out.putInt(code.length).putByteArray(code.data, 0, code.length)__            out.putShort(handlerCount)__            if (handlerCount > 0) {_                Handler h = firstHandler__                while (h != null) {_                    out.putShort(h.start.position).putShort(h.end.position)_                            .putShort(h.handler.position).putShort(h.type)__                    h = h.next__                }_            }_            attributeCount = 0__            if (localVar != null) {_                ++attributeCount__            }_            if (localVarType != null) {_                ++attributeCount__            }_            if (lineNumber != null) {_                ++attributeCount__            }_            if (stackMap != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                ++attributeCount__            }_            if (cattrs != null) {_                attributeCount += cattrs.getCount()__            }_            out.putShort(attributeCount)__            if (localVar != null) {_                out.putShort(cw.newUTF8("LocalVariableTable"))__                out.putInt(localVar.length + 2).putShort(localVarCount)__                out.putByteArray(localVar.data, 0, localVar.length)__            }_            if (localVarType != null) {_                out.putShort(cw.newUTF8("LocalVariableTypeTable"))__                out.putInt(localVarType.length + 2).putShort(localVarTypeCount)__                out.putByteArray(localVarType.data, 0, localVarType.length)__            }_            if (lineNumber != null) {_                out.putShort(cw.newUTF8("LineNumberTable"))__                out.putInt(lineNumber.length + 2).putShort(lineNumberCount)__                out.putByteArray(lineNumber.data, 0, lineNumber.length)__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"))__                out.putInt(stackMap.length + 2).putShort(frameCount)__                out.putByteArray(stackMap.data, 0, stackMap.length)__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__                ctanns.put(out)__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__                ictanns.put(out)__            }_            if (cattrs != null) {_                cattrs.put(cw, code.data, code.length, maxLocals, maxStack, out)__            }_        }_        if (exceptionCount > 0) {_            out.putShort(cw.newUTF8("Exceptions")).putInt(_                    2 * exceptionCount + 2)__            out.putShort(exceptionCount)__            for (int i = 0_ i < exceptionCount_ ++i) {_                out.putShort(exceptions[i])__            }_        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(cw.newUTF8("Synthetic")).putInt(0)__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(cw.newUTF8("Deprecated")).putInt(0)__        }_        if (ClassReader.SIGNATURES && signature != null) {_            out.putShort(cw.newUTF8("Signature")).putInt(2)_                    .putShort(cw.newUTF8(signature))__        }_        if (methodParameters != null) {_            out.putShort(cw.newUTF8("MethodParameters"))__            out.putInt(methodParameters.length + 1).putByte(_                    methodParametersCount)__            out.putByteArray(methodParameters.data, 0, methodParameters.length)__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            out.putShort(cw.newUTF8("AnnotationDefault"))__            out.putInt(annd.length)__            out.putByteArray(annd.data, 0, annd.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"))__            AnnotationWriter.put(panns, synthetics, out)__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"))__            AnnotationWriter.put(ipanns, synthetics, out)__        }_        if (attrs != null) {_            attrs.put(cw, null, 0, -1, -1, out)__        }_    };puts,the,bytecode,of,this,method,in,the,given,byte,vector,param,out,the,byte,vector,into,which,the,bytecode,of,this,method,must,be,copied;final,void,put,final,byte,vector,out,final,int,factor,class,writer,int,mask,opcodes,class,writer,access,class,writer,factor,out,put,short,access,mask,put,short,name,put,short,desc,if,class,reader,offset,0,out,put,byte,array,cw,cr,b,class,reader,offset,class,reader,length,return,int,attribute,count,0,if,code,length,0,attribute,count,if,exception,count,0,attribute,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,attribute,count,if,access,opcodes,0,attribute,count,if,class,reader,signatures,signature,null,attribute,count,if,method,parameters,null,attribute,count,if,class,reader,annotations,annd,null,attribute,count,if,class,reader,annotations,anns,null,attribute,count,if,class,reader,annotations,ianns,null,attribute,count,if,class,reader,annotations,tanns,null,attribute,count,if,class,reader,annotations,itanns,null,attribute,count,if,class,reader,annotations,panns,null,attribute,count,if,class,reader,annotations,ipanns,null,attribute,count,if,attrs,null,attribute,count,attrs,get,count,out,put,short,attribute,count,if,code,length,0,int,size,12,code,length,8,handler,count,if,local,var,null,size,8,local,var,length,if,local,var,type,null,size,8,local,var,type,length,if,line,number,null,size,8,line,number,length,if,stack,map,null,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,out,put,short,cw,new,utf8,code,put,int,size,out,put,short,max,stack,put,short,max,locals,out,put,int,code,length,put,byte,array,code,data,0,code,length,out,put,short,handler,count,if,handler,count,0,handler,h,first,handler,while,h,null,out,put,short,h,start,position,put,short,h,end,position,put,short,h,handler,position,put,short,h,type,h,h,next,attribute,count,0,if,local,var,null,attribute,count,if,local,var,type,null,attribute,count,if,line,number,null,attribute,count,if,stack,map,null,attribute,count,if,class,reader,annotations,ctanns,null,attribute,count,if,class,reader,annotations,ictanns,null,attribute,count,if,cattrs,null,attribute,count,cattrs,get,count,out,put,short,attribute,count,if,local,var,null,out,put,short,cw,new,utf8,local,variable,table,out,put,int,local,var,length,2,put,short,local,var,count,out,put,byte,array,local,var,data,0,local,var,length,if,local,var,type,null,out,put,short,cw,new,utf8,local,variable,type,table,out,put,int,local,var,type,length,2,put,short,local,var,type,count,out,put,byte,array,local,var,type,data,0,local,var,type,length,if,line,number,null,out,put,short,cw,new,utf8,line,number,table,out,put,int,line,number,length,2,put,short,line,number,count,out,put,byte,array,line,number,data,0,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,out,put,short,cw,new,utf8,zip,stack,map,table,stack,map,out,put,int,stack,map,length,2,put,short,frame,count,out,put,byte,array,stack,map,data,0,stack,map,length,if,class,reader,annotations,ctanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,ctanns,put,out,if,class,reader,annotations,ictanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,ictanns,put,out,if,cattrs,null,cattrs,put,cw,code,data,code,length,max,locals,max,stack,out,if,exception,count,0,out,put,short,cw,new,utf8,exceptions,put,int,2,exception,count,2,out,put,short,exception,count,for,int,i,0,i,exception,count,i,out,put,short,exceptions,i,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,out,put,short,cw,new,utf8,synthetic,put,int,0,if,access,opcodes,0,out,put,short,cw,new,utf8,deprecated,put,int,0,if,class,reader,signatures,signature,null,out,put,short,cw,new,utf8,signature,put,int,2,put,short,cw,new,utf8,signature,if,method,parameters,null,out,put,short,cw,new,utf8,method,parameters,out,put,int,method,parameters,length,1,put,byte,method,parameters,count,out,put,byte,array,method,parameters,data,0,method,parameters,length,if,class,reader,annotations,annd,null,out,put,short,cw,new,utf8,annotation,default,out,put,int,annd,length,out,put,byte,array,annd,data,0,annd,length,if,class,reader,annotations,anns,null,out,put,short,cw,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,cw,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,class,reader,annotations,panns,null,out,put,short,cw,new,utf8,runtime,visible,parameter,annotations,annotation,writer,put,panns,synthetics,out,if,class,reader,annotations,ipanns,null,out,put,short,cw,new,utf8,runtime,invisible,parameter,annotations,annotation,writer,put,ipanns,synthetics,out,if,attrs,null,attrs,put,cw,null,0,1,1,out
MethodWriter -> final void put(final ByteVector out);1440705816;Puts the bytecode of this method in the given byte vector.__@param out_the byte vector into which the bytecode of this method must be_copied.;final void put(final ByteVector out) {_        final int FACTOR = ClassWriter.TO_ACC_SYNTHETIC__        int mask = ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED_                | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR)__        out.putShort(access & ~mask).putShort(name).putShort(desc)__        if (classReaderOffset != 0) {_            out.putByteArray(cw.cr.b, classReaderOffset, classReaderLength)__            return__        }_        int attributeCount = 0__        if (code.length > 0) {_            ++attributeCount__        }_        if (exceptionCount > 0) {_            ++attributeCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__        }_        if (ClassReader.SIGNATURES && signature != null) {_            ++attributeCount__        }_        if (methodParameters != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            ++attributeCount__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__        }_        out.putShort(attributeCount)__        if (code.length > 0) {_            int size = 12 + code.length + 8 * handlerCount__            if (localVar != null) {_                size += 8 + localVar.length__            }_            if (localVarType != null) {_                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_            out.putShort(cw.newUTF8("Code")).putInt(size)__            out.putShort(maxStack).putShort(maxLocals)__            out.putInt(code.length).putByteArray(code.data, 0, code.length)__            out.putShort(handlerCount)__            if (handlerCount > 0) {_                Handler h = firstHandler__                while (h != null) {_                    out.putShort(h.start.position).putShort(h.end.position)_                            .putShort(h.handler.position).putShort(h.type)__                    h = h.next__                }_            }_            attributeCount = 0__            if (localVar != null) {_                ++attributeCount__            }_            if (localVarType != null) {_                ++attributeCount__            }_            if (lineNumber != null) {_                ++attributeCount__            }_            if (stackMap != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                ++attributeCount__            }_            if (cattrs != null) {_                attributeCount += cattrs.getCount()__            }_            out.putShort(attributeCount)__            if (localVar != null) {_                out.putShort(cw.newUTF8("LocalVariableTable"))__                out.putInt(localVar.length + 2).putShort(localVarCount)__                out.putByteArray(localVar.data, 0, localVar.length)__            }_            if (localVarType != null) {_                out.putShort(cw.newUTF8("LocalVariableTypeTable"))__                out.putInt(localVarType.length + 2).putShort(localVarTypeCount)__                out.putByteArray(localVarType.data, 0, localVarType.length)__            }_            if (lineNumber != null) {_                out.putShort(cw.newUTF8("LineNumberTable"))__                out.putInt(lineNumber.length + 2).putShort(lineNumberCount)__                out.putByteArray(lineNumber.data, 0, lineNumber.length)__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"))__                out.putInt(stackMap.length + 2).putShort(frameCount)__                out.putByteArray(stackMap.data, 0, stackMap.length)__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__                ctanns.put(out)__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__                ictanns.put(out)__            }_            if (cattrs != null) {_                cattrs.put(cw, code.data, code.length, maxLocals, maxStack, out)__            }_        }_        if (exceptionCount > 0) {_            out.putShort(cw.newUTF8("Exceptions")).putInt(_                    2 * exceptionCount + 2)__            out.putShort(exceptionCount)__            for (int i = 0_ i < exceptionCount_ ++i) {_                out.putShort(exceptions[i])__            }_        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(cw.newUTF8("Synthetic")).putInt(0)__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(cw.newUTF8("Deprecated")).putInt(0)__        }_        if (ClassReader.SIGNATURES && signature != null) {_            out.putShort(cw.newUTF8("Signature")).putInt(2)_                    .putShort(cw.newUTF8(signature))__        }_        if (methodParameters != null) {_            out.putShort(cw.newUTF8("MethodParameters"))__            out.putInt(methodParameters.length + 1).putByte(_                    methodParametersCount)__            out.putByteArray(methodParameters.data, 0, methodParameters.length)__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            out.putShort(cw.newUTF8("AnnotationDefault"))__            out.putInt(annd.length)__            out.putByteArray(annd.data, 0, annd.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"))__            AnnotationWriter.put(panns, synthetics, out)__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"))__            AnnotationWriter.put(ipanns, synthetics, out)__        }_        if (attrs != null) {_            attrs.put(cw, null, 0, -1, -1, out)__        }_    };puts,the,bytecode,of,this,method,in,the,given,byte,vector,param,out,the,byte,vector,into,which,the,bytecode,of,this,method,must,be,copied;final,void,put,final,byte,vector,out,final,int,factor,class,writer,int,mask,opcodes,class,writer,access,class,writer,factor,out,put,short,access,mask,put,short,name,put,short,desc,if,class,reader,offset,0,out,put,byte,array,cw,cr,b,class,reader,offset,class,reader,length,return,int,attribute,count,0,if,code,length,0,attribute,count,if,exception,count,0,attribute,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,attribute,count,if,access,opcodes,0,attribute,count,if,class,reader,signatures,signature,null,attribute,count,if,method,parameters,null,attribute,count,if,class,reader,annotations,annd,null,attribute,count,if,class,reader,annotations,anns,null,attribute,count,if,class,reader,annotations,ianns,null,attribute,count,if,class,reader,annotations,tanns,null,attribute,count,if,class,reader,annotations,itanns,null,attribute,count,if,class,reader,annotations,panns,null,attribute,count,if,class,reader,annotations,ipanns,null,attribute,count,if,attrs,null,attribute,count,attrs,get,count,out,put,short,attribute,count,if,code,length,0,int,size,12,code,length,8,handler,count,if,local,var,null,size,8,local,var,length,if,local,var,type,null,size,8,local,var,type,length,if,line,number,null,size,8,line,number,length,if,stack,map,null,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,out,put,short,cw,new,utf8,code,put,int,size,out,put,short,max,stack,put,short,max,locals,out,put,int,code,length,put,byte,array,code,data,0,code,length,out,put,short,handler,count,if,handler,count,0,handler,h,first,handler,while,h,null,out,put,short,h,start,position,put,short,h,end,position,put,short,h,handler,position,put,short,h,type,h,h,next,attribute,count,0,if,local,var,null,attribute,count,if,local,var,type,null,attribute,count,if,line,number,null,attribute,count,if,stack,map,null,attribute,count,if,class,reader,annotations,ctanns,null,attribute,count,if,class,reader,annotations,ictanns,null,attribute,count,if,cattrs,null,attribute,count,cattrs,get,count,out,put,short,attribute,count,if,local,var,null,out,put,short,cw,new,utf8,local,variable,table,out,put,int,local,var,length,2,put,short,local,var,count,out,put,byte,array,local,var,data,0,local,var,length,if,local,var,type,null,out,put,short,cw,new,utf8,local,variable,type,table,out,put,int,local,var,type,length,2,put,short,local,var,type,count,out,put,byte,array,local,var,type,data,0,local,var,type,length,if,line,number,null,out,put,short,cw,new,utf8,line,number,table,out,put,int,line,number,length,2,put,short,line,number,count,out,put,byte,array,line,number,data,0,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,out,put,short,cw,new,utf8,zip,stack,map,table,stack,map,out,put,int,stack,map,length,2,put,short,frame,count,out,put,byte,array,stack,map,data,0,stack,map,length,if,class,reader,annotations,ctanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,ctanns,put,out,if,class,reader,annotations,ictanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,ictanns,put,out,if,cattrs,null,cattrs,put,cw,code,data,code,length,max,locals,max,stack,out,if,exception,count,0,out,put,short,cw,new,utf8,exceptions,put,int,2,exception,count,2,out,put,short,exception,count,for,int,i,0,i,exception,count,i,out,put,short,exceptions,i,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,out,put,short,cw,new,utf8,synthetic,put,int,0,if,access,opcodes,0,out,put,short,cw,new,utf8,deprecated,put,int,0,if,class,reader,signatures,signature,null,out,put,short,cw,new,utf8,signature,put,int,2,put,short,cw,new,utf8,signature,if,method,parameters,null,out,put,short,cw,new,utf8,method,parameters,out,put,int,method,parameters,length,1,put,byte,method,parameters,count,out,put,byte,array,method,parameters,data,0,method,parameters,length,if,class,reader,annotations,annd,null,out,put,short,cw,new,utf8,annotation,default,out,put,int,annd,length,out,put,byte,array,annd,data,0,annd,length,if,class,reader,annotations,anns,null,out,put,short,cw,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,cw,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,class,reader,annotations,panns,null,out,put,short,cw,new,utf8,runtime,visible,parameter,annotations,annotation,writer,put,panns,synthetics,out,if,class,reader,annotations,ipanns,null,out,put,short,cw,new,utf8,runtime,invisible,parameter,annotations,annotation,writer,put,ipanns,synthetics,out,if,attrs,null,attrs,put,cw,null,0,1,1,out
MethodWriter -> final void put(final ByteVector out);1483093254;Puts the bytecode of this method in the given byte vector.__@param out_the byte vector into which the bytecode of this method must be_copied.;final void put(final ByteVector out) {_        final int FACTOR = ClassWriter.TO_ACC_SYNTHETIC__        int mask = ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED_                | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR)__        out.putShort(access & ~mask).putShort(name).putShort(desc)__        if (classReaderOffset != 0) {_            out.putByteArray(cw.cr.b, classReaderOffset, classReaderLength)__            return__        }_        int attributeCount = 0__        if (code.length > 0) {_            ++attributeCount__        }_        if (exceptionCount > 0) {_            ++attributeCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__        }_        if (ClassReader.SIGNATURES && signature != null) {_            ++attributeCount__        }_        if (methodParameters != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            ++attributeCount__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__        }_        out.putShort(attributeCount)__        if (code.length > 0) {_            int size = 12 + code.length + 8 * handlerCount__            if (localVar != null) {_                size += 8 + localVar.length__            }_            if (localVarType != null) {_                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_            out.putShort(cw.newUTF8("Code")).putInt(size)__            out.putShort(maxStack).putShort(maxLocals)__            out.putInt(code.length).putByteArray(code.data, 0, code.length)__            out.putShort(handlerCount)__            if (handlerCount > 0) {_                Handler h = firstHandler__                while (h != null) {_                    out.putShort(h.start.position).putShort(h.end.position)_                            .putShort(h.handler.position).putShort(h.type)__                    h = h.next__                }_            }_            attributeCount = 0__            if (localVar != null) {_                ++attributeCount__            }_            if (localVarType != null) {_                ++attributeCount__            }_            if (lineNumber != null) {_                ++attributeCount__            }_            if (stackMap != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                ++attributeCount__            }_            if (cattrs != null) {_                attributeCount += cattrs.getCount()__            }_            out.putShort(attributeCount)__            if (localVar != null) {_                out.putShort(cw.newUTF8("LocalVariableTable"))__                out.putInt(localVar.length + 2).putShort(localVarCount)__                out.putByteArray(localVar.data, 0, localVar.length)__            }_            if (localVarType != null) {_                out.putShort(cw.newUTF8("LocalVariableTypeTable"))__                out.putInt(localVarType.length + 2).putShort(localVarTypeCount)__                out.putByteArray(localVarType.data, 0, localVarType.length)__            }_            if (lineNumber != null) {_                out.putShort(cw.newUTF8("LineNumberTable"))__                out.putInt(lineNumber.length + 2).putShort(lineNumberCount)__                out.putByteArray(lineNumber.data, 0, lineNumber.length)__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"))__                out.putInt(stackMap.length + 2).putShort(frameCount)__                out.putByteArray(stackMap.data, 0, stackMap.length)__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__                ctanns.put(out)__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__                ictanns.put(out)__            }_            if (cattrs != null) {_                cattrs.put(cw, code.data, code.length, maxLocals, maxStack, out)__            }_        }_        if (exceptionCount > 0) {_            out.putShort(cw.newUTF8("Exceptions")).putInt(_                    2 * exceptionCount + 2)__            out.putShort(exceptionCount)__            for (int i = 0_ i < exceptionCount_ ++i) {_                out.putShort(exceptions[i])__            }_        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(cw.newUTF8("Synthetic")).putInt(0)__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(cw.newUTF8("Deprecated")).putInt(0)__        }_        if (ClassReader.SIGNATURES && signature != null) {_            out.putShort(cw.newUTF8("Signature")).putInt(2)_                    .putShort(cw.newUTF8(signature))__        }_        if (methodParameters != null) {_            out.putShort(cw.newUTF8("MethodParameters"))__            out.putInt(methodParameters.length + 1).putByte(_                    methodParametersCount)__            out.putByteArray(methodParameters.data, 0, methodParameters.length)__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            out.putShort(cw.newUTF8("AnnotationDefault"))__            out.putInt(annd.length)__            out.putByteArray(annd.data, 0, annd.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"))__            AnnotationWriter.put(panns, synthetics, out)__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"))__            AnnotationWriter.put(ipanns, synthetics, out)__        }_        if (attrs != null) {_            attrs.put(cw, null, 0, -1, -1, out)__        }_    };puts,the,bytecode,of,this,method,in,the,given,byte,vector,param,out,the,byte,vector,into,which,the,bytecode,of,this,method,must,be,copied;final,void,put,final,byte,vector,out,final,int,factor,class,writer,int,mask,opcodes,class,writer,access,class,writer,factor,out,put,short,access,mask,put,short,name,put,short,desc,if,class,reader,offset,0,out,put,byte,array,cw,cr,b,class,reader,offset,class,reader,length,return,int,attribute,count,0,if,code,length,0,attribute,count,if,exception,count,0,attribute,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,attribute,count,if,access,opcodes,0,attribute,count,if,class,reader,signatures,signature,null,attribute,count,if,method,parameters,null,attribute,count,if,class,reader,annotations,annd,null,attribute,count,if,class,reader,annotations,anns,null,attribute,count,if,class,reader,annotations,ianns,null,attribute,count,if,class,reader,annotations,tanns,null,attribute,count,if,class,reader,annotations,itanns,null,attribute,count,if,class,reader,annotations,panns,null,attribute,count,if,class,reader,annotations,ipanns,null,attribute,count,if,attrs,null,attribute,count,attrs,get,count,out,put,short,attribute,count,if,code,length,0,int,size,12,code,length,8,handler,count,if,local,var,null,size,8,local,var,length,if,local,var,type,null,size,8,local,var,type,length,if,line,number,null,size,8,line,number,length,if,stack,map,null,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,out,put,short,cw,new,utf8,code,put,int,size,out,put,short,max,stack,put,short,max,locals,out,put,int,code,length,put,byte,array,code,data,0,code,length,out,put,short,handler,count,if,handler,count,0,handler,h,first,handler,while,h,null,out,put,short,h,start,position,put,short,h,end,position,put,short,h,handler,position,put,short,h,type,h,h,next,attribute,count,0,if,local,var,null,attribute,count,if,local,var,type,null,attribute,count,if,line,number,null,attribute,count,if,stack,map,null,attribute,count,if,class,reader,annotations,ctanns,null,attribute,count,if,class,reader,annotations,ictanns,null,attribute,count,if,cattrs,null,attribute,count,cattrs,get,count,out,put,short,attribute,count,if,local,var,null,out,put,short,cw,new,utf8,local,variable,table,out,put,int,local,var,length,2,put,short,local,var,count,out,put,byte,array,local,var,data,0,local,var,length,if,local,var,type,null,out,put,short,cw,new,utf8,local,variable,type,table,out,put,int,local,var,type,length,2,put,short,local,var,type,count,out,put,byte,array,local,var,type,data,0,local,var,type,length,if,line,number,null,out,put,short,cw,new,utf8,line,number,table,out,put,int,line,number,length,2,put,short,line,number,count,out,put,byte,array,line,number,data,0,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,out,put,short,cw,new,utf8,zip,stack,map,table,stack,map,out,put,int,stack,map,length,2,put,short,frame,count,out,put,byte,array,stack,map,data,0,stack,map,length,if,class,reader,annotations,ctanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,ctanns,put,out,if,class,reader,annotations,ictanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,ictanns,put,out,if,cattrs,null,cattrs,put,cw,code,data,code,length,max,locals,max,stack,out,if,exception,count,0,out,put,short,cw,new,utf8,exceptions,put,int,2,exception,count,2,out,put,short,exception,count,for,int,i,0,i,exception,count,i,out,put,short,exceptions,i,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,out,put,short,cw,new,utf8,synthetic,put,int,0,if,access,opcodes,0,out,put,short,cw,new,utf8,deprecated,put,int,0,if,class,reader,signatures,signature,null,out,put,short,cw,new,utf8,signature,put,int,2,put,short,cw,new,utf8,signature,if,method,parameters,null,out,put,short,cw,new,utf8,method,parameters,out,put,int,method,parameters,length,1,put,byte,method,parameters,count,out,put,byte,array,method,parameters,data,0,method,parameters,length,if,class,reader,annotations,annd,null,out,put,short,cw,new,utf8,annotation,default,out,put,int,annd,length,out,put,byte,array,annd,data,0,annd,length,if,class,reader,annotations,anns,null,out,put,short,cw,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,cw,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,class,reader,annotations,panns,null,out,put,short,cw,new,utf8,runtime,visible,parameter,annotations,annotation,writer,put,panns,synthetics,out,if,class,reader,annotations,ipanns,null,out,put,short,cw,new,utf8,runtime,invisible,parameter,annotations,annotation,writer,put,ipanns,synthetics,out,if,attrs,null,attrs,put,cw,null,0,1,1,out
MethodWriter -> final void put(final ByteVector out);1505821772;Puts the bytecode of this method in the given byte vector.__@param out_the byte vector into which the bytecode of this method must be_copied.;final void put(final ByteVector out) {_        final int FACTOR = ClassWriter.TO_ACC_SYNTHETIC__        int mask = ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED_                | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE_                | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR)__        out.putShort(access & ~mask).putShort(name).putShort(desc)__        if (classReaderOffset != 0) {_            out.putByteArray(cw.cr.b, classReaderOffset, classReaderLength)__            return__        }_        int attributeCount = 0__        if (code.length > 0) {_            ++attributeCount__        }_        if (exceptionCount > 0) {_            ++attributeCount__        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                ++attributeCount__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            ++attributeCount__        }_        if (ClassReader.SIGNATURES && signature != null) {_            ++attributeCount__        }_        if (methodParameters != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            ++attributeCount__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            ++attributeCount__        }_        if (attrs != null) {_            attributeCount += attrs.getCount()__        }_        out.putShort(attributeCount)__        if (code.length > 0) {_            int size = 12 + code.length + 8 * handlerCount__            if (localVar != null) {_                size += 8 + localVar.length__            }_            if (localVarType != null) {_                size += 8 + localVarType.length__            }_            if (lineNumber != null) {_                size += 8 + lineNumber.length__            }_            if (stackMap != null) {_                size += 8 + stackMap.length__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                size += 8 + ctanns.getSize()__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                size += 8 + ictanns.getSize()__            }_            if (cattrs != null) {_                size += cattrs.getSize(cw, code.data, code.length, maxStack,_                        maxLocals)__            }_            out.putShort(cw.newUTF8("Code")).putInt(size)__            out.putShort(maxStack).putShort(maxLocals)__            out.putInt(code.length).putByteArray(code.data, 0, code.length)__            out.putShort(handlerCount)__            if (handlerCount > 0) {_                Handler h = firstHandler__                while (h != null) {_                    out.putShort(h.start.position).putShort(h.end.position)_                            .putShort(h.handler.position).putShort(h.type)__                    h = h.next__                }_            }_            attributeCount = 0__            if (localVar != null) {_                ++attributeCount__            }_            if (localVarType != null) {_                ++attributeCount__            }_            if (lineNumber != null) {_                ++attributeCount__            }_            if (stackMap != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                ++attributeCount__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                ++attributeCount__            }_            if (cattrs != null) {_                attributeCount += cattrs.getCount()__            }_            out.putShort(attributeCount)__            if (localVar != null) {_                out.putShort(cw.newUTF8("LocalVariableTable"))__                out.putInt(localVar.length + 2).putShort(localVarCount)__                out.putByteArray(localVar.data, 0, localVar.length)__            }_            if (localVarType != null) {_                out.putShort(cw.newUTF8("LocalVariableTypeTable"))__                out.putInt(localVarType.length + 2).putShort(localVarTypeCount)__                out.putByteArray(localVarType.data, 0, localVarType.length)__            }_            if (lineNumber != null) {_                out.putShort(cw.newUTF8("LineNumberTable"))__                out.putInt(lineNumber.length + 2).putShort(lineNumberCount)__                out.putByteArray(lineNumber.data, 0, lineNumber.length)__            }_            if (stackMap != null) {_                boolean zip = (cw.version & 0xFFFF) >= Opcodes.V1_6__                out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"))__                out.putInt(stackMap.length + 2).putShort(frameCount)__                out.putByteArray(stackMap.data, 0, stackMap.length)__            }_            if (ClassReader.ANNOTATIONS && ctanns != null) {_                out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__                ctanns.put(out)__            }_            if (ClassReader.ANNOTATIONS && ictanns != null) {_                out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__                ictanns.put(out)__            }_            if (cattrs != null) {_                cattrs.put(cw, code.data, code.length, maxLocals, maxStack, out)__            }_        }_        if (exceptionCount > 0) {_            out.putShort(cw.newUTF8("Exceptions")).putInt(_                    2 * exceptionCount + 2)__            out.putShort(exceptionCount)__            for (int i = 0_ i < exceptionCount_ ++i) {_                out.putShort(exceptions[i])__            }_        }_        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {_            if ((cw.version & 0xFFFF) < Opcodes.V1_5_                    || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {_                out.putShort(cw.newUTF8("Synthetic")).putInt(0)__            }_        }_        if ((access & Opcodes.ACC_DEPRECATED) != 0) {_            out.putShort(cw.newUTF8("Deprecated")).putInt(0)__        }_        if (ClassReader.SIGNATURES && signature != null) {_            out.putShort(cw.newUTF8("Signature")).putInt(2)_                    .putShort(cw.newUTF8(signature))__        }_        if (methodParameters != null) {_            out.putShort(cw.newUTF8("MethodParameters"))__            out.putInt(methodParameters.length + 1).putByte(_                    methodParametersCount)__            out.putByteArray(methodParameters.data, 0, methodParameters.length)__        }_        if (ClassReader.ANNOTATIONS && annd != null) {_            out.putShort(cw.newUTF8("AnnotationDefault"))__            out.putInt(annd.length)__            out.putByteArray(annd.data, 0, annd.length)__        }_        if (ClassReader.ANNOTATIONS && anns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"))__            anns.put(out)__        }_        if (ClassReader.ANNOTATIONS && ianns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"))__            ianns.put(out)__        }_        if (ClassReader.ANNOTATIONS && tanns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"))__            tanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && itanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"))__            itanns.put(out)__        }_        if (ClassReader.ANNOTATIONS && panns != null) {_            out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"))__            AnnotationWriter.put(panns, synthetics, out)__        }_        if (ClassReader.ANNOTATIONS && ipanns != null) {_            out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"))__            AnnotationWriter.put(ipanns, synthetics, out)__        }_        if (attrs != null) {_            attrs.put(cw, null, 0, -1, -1, out)__        }_    };puts,the,bytecode,of,this,method,in,the,given,byte,vector,param,out,the,byte,vector,into,which,the,bytecode,of,this,method,must,be,copied;final,void,put,final,byte,vector,out,final,int,factor,class,writer,int,mask,opcodes,class,writer,access,class,writer,factor,out,put,short,access,mask,put,short,name,put,short,desc,if,class,reader,offset,0,out,put,byte,array,cw,cr,b,class,reader,offset,class,reader,length,return,int,attribute,count,0,if,code,length,0,attribute,count,if,exception,count,0,attribute,count,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,attribute,count,if,access,opcodes,0,attribute,count,if,class,reader,signatures,signature,null,attribute,count,if,method,parameters,null,attribute,count,if,class,reader,annotations,annd,null,attribute,count,if,class,reader,annotations,anns,null,attribute,count,if,class,reader,annotations,ianns,null,attribute,count,if,class,reader,annotations,tanns,null,attribute,count,if,class,reader,annotations,itanns,null,attribute,count,if,class,reader,annotations,panns,null,attribute,count,if,class,reader,annotations,ipanns,null,attribute,count,if,attrs,null,attribute,count,attrs,get,count,out,put,short,attribute,count,if,code,length,0,int,size,12,code,length,8,handler,count,if,local,var,null,size,8,local,var,length,if,local,var,type,null,size,8,local,var,type,length,if,line,number,null,size,8,line,number,length,if,stack,map,null,size,8,stack,map,length,if,class,reader,annotations,ctanns,null,size,8,ctanns,get,size,if,class,reader,annotations,ictanns,null,size,8,ictanns,get,size,if,cattrs,null,size,cattrs,get,size,cw,code,data,code,length,max,stack,max,locals,out,put,short,cw,new,utf8,code,put,int,size,out,put,short,max,stack,put,short,max,locals,out,put,int,code,length,put,byte,array,code,data,0,code,length,out,put,short,handler,count,if,handler,count,0,handler,h,first,handler,while,h,null,out,put,short,h,start,position,put,short,h,end,position,put,short,h,handler,position,put,short,h,type,h,h,next,attribute,count,0,if,local,var,null,attribute,count,if,local,var,type,null,attribute,count,if,line,number,null,attribute,count,if,stack,map,null,attribute,count,if,class,reader,annotations,ctanns,null,attribute,count,if,class,reader,annotations,ictanns,null,attribute,count,if,cattrs,null,attribute,count,cattrs,get,count,out,put,short,attribute,count,if,local,var,null,out,put,short,cw,new,utf8,local,variable,table,out,put,int,local,var,length,2,put,short,local,var,count,out,put,byte,array,local,var,data,0,local,var,length,if,local,var,type,null,out,put,short,cw,new,utf8,local,variable,type,table,out,put,int,local,var,type,length,2,put,short,local,var,type,count,out,put,byte,array,local,var,type,data,0,local,var,type,length,if,line,number,null,out,put,short,cw,new,utf8,line,number,table,out,put,int,line,number,length,2,put,short,line,number,count,out,put,byte,array,line,number,data,0,line,number,length,if,stack,map,null,boolean,zip,cw,version,0x,ffff,opcodes,out,put,short,cw,new,utf8,zip,stack,map,table,stack,map,out,put,int,stack,map,length,2,put,short,frame,count,out,put,byte,array,stack,map,data,0,stack,map,length,if,class,reader,annotations,ctanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,ctanns,put,out,if,class,reader,annotations,ictanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,ictanns,put,out,if,cattrs,null,cattrs,put,cw,code,data,code,length,max,locals,max,stack,out,if,exception,count,0,out,put,short,cw,new,utf8,exceptions,put,int,2,exception,count,2,out,put,short,exception,count,for,int,i,0,i,exception,count,i,out,put,short,exceptions,i,if,access,opcodes,0,if,cw,version,0x,ffff,opcodes,access,class,writer,0,out,put,short,cw,new,utf8,synthetic,put,int,0,if,access,opcodes,0,out,put,short,cw,new,utf8,deprecated,put,int,0,if,class,reader,signatures,signature,null,out,put,short,cw,new,utf8,signature,put,int,2,put,short,cw,new,utf8,signature,if,method,parameters,null,out,put,short,cw,new,utf8,method,parameters,out,put,int,method,parameters,length,1,put,byte,method,parameters,count,out,put,byte,array,method,parameters,data,0,method,parameters,length,if,class,reader,annotations,annd,null,out,put,short,cw,new,utf8,annotation,default,out,put,int,annd,length,out,put,byte,array,annd,data,0,annd,length,if,class,reader,annotations,anns,null,out,put,short,cw,new,utf8,runtime,visible,annotations,anns,put,out,if,class,reader,annotations,ianns,null,out,put,short,cw,new,utf8,runtime,invisible,annotations,ianns,put,out,if,class,reader,annotations,tanns,null,out,put,short,cw,new,utf8,runtime,visible,type,annotations,tanns,put,out,if,class,reader,annotations,itanns,null,out,put,short,cw,new,utf8,runtime,invisible,type,annotations,itanns,put,out,if,class,reader,annotations,panns,null,out,put,short,cw,new,utf8,runtime,visible,parameter,annotations,annotation,writer,put,panns,synthetics,out,if,class,reader,annotations,ipanns,null,out,put,short,cw,new,utf8,runtime,invisible,parameter,annotations,annotation,writer,put,ipanns,synthetics,out,if,attrs,null,attrs,put,cw,null,0,1,1,out
MethodWriter -> static int getNewOffset(final int[] indexes, final int[] sizes,             final int begin, final int end);1366718246;Computes the future value of a bytecode offset._<p>_Note: it is possible to have several entries for the same instruction in_the <tt>indexes</tt> and <tt>sizes</tt>: two entries (index=a,size=b) and_(index=a,size=b') are equivalent to a single entry (index=a,size=b+b').__@param indexes_current positions of the instructions to be resized. Each_instruction must be designated by the index of its <i>last</i>_byte, plus one (or, in other words, by the index of the_<i>first</i> byte of the <i>next</i> instruction)._@param sizes_the number of bytes to be <i>added</i> to the above_instructions. More precisely, for each i < <tt>len</tt>,_<tt>sizes</tt>[i] bytes will be added at the end of the_instruction designated by <tt>indexes</tt>[i] or, if_<tt>sizes</tt>[i] is negative, the <i>last</i> |_<tt>sizes[i]</tt>| bytes of the instruction will be removed_(the instruction size <i>must not</i> become negative or_null)._@param begin_index of the first byte of the source instruction._@param end_index of the first byte of the target instruction._@return the future value of the given bytecode offset.;static int getNewOffset(final int[] indexes, final int[] sizes,_            final int begin, final int end) {_        int offset = end - begin__        for (int i = 0_ i < indexes.length_ ++i) {_            if (begin < indexes[i] && indexes[i] <= end) {_                _                offset += sizes[i]__            } else if (end < indexes[i] && indexes[i] <= begin) {_                _                offset -= sizes[i]__            }_        }_        return offset__    };computes,the,future,value,of,a,bytecode,offset,p,note,it,is,possible,to,have,several,entries,for,the,same,instruction,in,the,tt,indexes,tt,and,tt,sizes,tt,two,entries,index,a,size,b,and,index,a,size,b,are,equivalent,to,a,single,entry,index,a,size,b,b,param,indexes,current,positions,of,the,instructions,to,be,resized,each,instruction,must,be,designated,by,the,index,of,its,i,last,i,byte,plus,one,or,in,other,words,by,the,index,of,the,i,first,i,byte,of,the,i,next,i,instruction,param,sizes,the,number,of,bytes,to,be,i,added,i,to,the,above,instructions,more,precisely,for,each,i,tt,len,tt,tt,sizes,tt,i,bytes,will,be,added,at,the,end,of,the,instruction,designated,by,tt,indexes,tt,i,or,if,tt,sizes,tt,i,is,negative,the,i,last,i,tt,sizes,i,tt,bytes,of,the,instruction,will,be,removed,the,instruction,size,i,must,not,i,become,negative,or,null,param,begin,index,of,the,first,byte,of,the,source,instruction,param,end,index,of,the,first,byte,of,the,target,instruction,return,the,future,value,of,the,given,bytecode,offset;static,int,get,new,offset,final,int,indexes,final,int,sizes,final,int,begin,final,int,end,int,offset,end,begin,for,int,i,0,i,indexes,length,i,if,begin,indexes,i,indexes,i,end,offset,sizes,i,else,if,end,indexes,i,indexes,i,begin,offset,sizes,i,return,offset
MethodWriter -> static int getNewOffset(final int[] indexes, final int[] sizes,             final int begin, final int end);1395273982;Computes the future value of a bytecode offset._<p>_Note: it is possible to have several entries for the same instruction in_the <tt>indexes</tt> and <tt>sizes</tt>: two entries (index=a,size=b) and_(index=a,size=b') are equivalent to a single entry (index=a,size=b+b').__@param indexes_current positions of the instructions to be resized. Each_instruction must be designated by the index of its <i>last</i>_byte, plus one (or, in other words, by the index of the_<i>first</i> byte of the <i>next</i> instruction)._@param sizes_the number of bytes to be <i>added</i> to the above_instructions. More precisely, for each i < <tt>len</tt>,_<tt>sizes</tt>[i] bytes will be added at the end of the_instruction designated by <tt>indexes</tt>[i] or, if_<tt>sizes</tt>[i] is negative, the <i>last</i> |_<tt>sizes[i]</tt>| bytes of the instruction will be removed_(the instruction size <i>must not</i> become negative or_null)._@param begin_index of the first byte of the source instruction._@param end_index of the first byte of the target instruction._@return the future value of the given bytecode offset.;static int getNewOffset(final int[] indexes, final int[] sizes,_            final int begin, final int end) {_        int offset = end - begin__        for (int i = 0_ i < indexes.length_ ++i) {_            if (begin < indexes[i] && indexes[i] <= end) {_                _                offset += sizes[i]__            } else if (end < indexes[i] && indexes[i] <= begin) {_                _                offset -= sizes[i]__            }_        }_        return offset__    };computes,the,future,value,of,a,bytecode,offset,p,note,it,is,possible,to,have,several,entries,for,the,same,instruction,in,the,tt,indexes,tt,and,tt,sizes,tt,two,entries,index,a,size,b,and,index,a,size,b,are,equivalent,to,a,single,entry,index,a,size,b,b,param,indexes,current,positions,of,the,instructions,to,be,resized,each,instruction,must,be,designated,by,the,index,of,its,i,last,i,byte,plus,one,or,in,other,words,by,the,index,of,the,i,first,i,byte,of,the,i,next,i,instruction,param,sizes,the,number,of,bytes,to,be,i,added,i,to,the,above,instructions,more,precisely,for,each,i,tt,len,tt,tt,sizes,tt,i,bytes,will,be,added,at,the,end,of,the,instruction,designated,by,tt,indexes,tt,i,or,if,tt,sizes,tt,i,is,negative,the,i,last,i,tt,sizes,i,tt,bytes,of,the,instruction,will,be,removed,the,instruction,size,i,must,not,i,become,negative,or,null,param,begin,index,of,the,first,byte,of,the,source,instruction,param,end,index,of,the,first,byte,of,the,target,instruction,return,the,future,value,of,the,given,bytecode,offset;static,int,get,new,offset,final,int,indexes,final,int,sizes,final,int,begin,final,int,end,int,offset,end,begin,for,int,i,0,i,indexes,length,i,if,begin,indexes,i,indexes,i,end,offset,sizes,i,else,if,end,indexes,i,indexes,i,begin,offset,sizes,i,return,offset
MethodWriter -> static int getNewOffset(final int[] indexes, final int[] sizes,             final int begin, final int end);1395744691;Computes the future value of a bytecode offset._<p>_Note: it is possible to have several entries for the same instruction in_the <tt>indexes</tt> and <tt>sizes</tt>: two entries (index=a,size=b) and_(index=a,size=b') are equivalent to a single entry (index=a,size=b+b').__@param indexes_current positions of the instructions to be resized. Each_instruction must be designated by the index of its <i>last</i>_byte, plus one (or, in other words, by the index of the_<i>first</i> byte of the <i>next</i> instruction)._@param sizes_the number of bytes to be <i>added</i> to the above_instructions. More precisely, for each i < <tt>len</tt>,_<tt>sizes</tt>[i] bytes will be added at the end of the_instruction designated by <tt>indexes</tt>[i] or, if_<tt>sizes</tt>[i] is negative, the <i>last</i> |_<tt>sizes[i]</tt>| bytes of the instruction will be removed_(the instruction size <i>must not</i> become negative or_null)._@param begin_index of the first byte of the source instruction._@param end_index of the first byte of the target instruction._@return the future value of the given bytecode offset.;static int getNewOffset(final int[] indexes, final int[] sizes,_            final int begin, final int end) {_        int offset = end - begin__        for (int i = 0_ i < indexes.length_ ++i) {_            if (begin < indexes[i] && indexes[i] <= end) {_                _                offset += sizes[i]__            } else if (end < indexes[i] && indexes[i] <= begin) {_                _                offset -= sizes[i]__            }_        }_        return offset__    };computes,the,future,value,of,a,bytecode,offset,p,note,it,is,possible,to,have,several,entries,for,the,same,instruction,in,the,tt,indexes,tt,and,tt,sizes,tt,two,entries,index,a,size,b,and,index,a,size,b,are,equivalent,to,a,single,entry,index,a,size,b,b,param,indexes,current,positions,of,the,instructions,to,be,resized,each,instruction,must,be,designated,by,the,index,of,its,i,last,i,byte,plus,one,or,in,other,words,by,the,index,of,the,i,first,i,byte,of,the,i,next,i,instruction,param,sizes,the,number,of,bytes,to,be,i,added,i,to,the,above,instructions,more,precisely,for,each,i,tt,len,tt,tt,sizes,tt,i,bytes,will,be,added,at,the,end,of,the,instruction,designated,by,tt,indexes,tt,i,or,if,tt,sizes,tt,i,is,negative,the,i,last,i,tt,sizes,i,tt,bytes,of,the,instruction,will,be,removed,the,instruction,size,i,must,not,i,become,negative,or,null,param,begin,index,of,the,first,byte,of,the,source,instruction,param,end,index,of,the,first,byte,of,the,target,instruction,return,the,future,value,of,the,given,bytecode,offset;static,int,get,new,offset,final,int,indexes,final,int,sizes,final,int,begin,final,int,end,int,offset,end,begin,for,int,i,0,i,indexes,length,i,if,begin,indexes,i,indexes,i,end,offset,sizes,i,else,if,end,indexes,i,indexes,i,begin,offset,sizes,i,return,offset
MethodWriter -> static int getNewOffset(final int[] indexes, final int[] sizes,             final int begin, final int end);1400531367;Computes the future value of a bytecode offset._<p>_Note: it is possible to have several entries for the same instruction in_the <tt>indexes</tt> and <tt>sizes</tt>: two entries (index=a,size=b) and_(index=a,size=b') are equivalent to a single entry (index=a,size=b+b').__@param indexes_current positions of the instructions to be resized. Each_instruction must be designated by the index of its <i>last</i>_byte, plus one (or, in other words, by the index of the_<i>first</i> byte of the <i>next</i> instruction)._@param sizes_the number of bytes to be <i>added</i> to the above_instructions. More precisely, for each i < <tt>len</tt>,_<tt>sizes</tt>[i] bytes will be added at the end of the_instruction designated by <tt>indexes</tt>[i] or, if_<tt>sizes</tt>[i] is negative, the <i>last</i> |_<tt>sizes[i]</tt>| bytes of the instruction will be removed_(the instruction size <i>must not</i> become negative or_null)._@param begin_index of the first byte of the source instruction._@param end_index of the first byte of the target instruction._@return the future value of the given bytecode offset.;static int getNewOffset(final int[] indexes, final int[] sizes,_            final int begin, final int end) {_        int offset = end - begin__        for (int i = 0_ i < indexes.length_ ++i) {_            if (begin < indexes[i] && indexes[i] <= end) {_                _                offset += sizes[i]__            } else if (end < indexes[i] && indexes[i] <= begin) {_                _                offset -= sizes[i]__            }_        }_        return offset__    };computes,the,future,value,of,a,bytecode,offset,p,note,it,is,possible,to,have,several,entries,for,the,same,instruction,in,the,tt,indexes,tt,and,tt,sizes,tt,two,entries,index,a,size,b,and,index,a,size,b,are,equivalent,to,a,single,entry,index,a,size,b,b,param,indexes,current,positions,of,the,instructions,to,be,resized,each,instruction,must,be,designated,by,the,index,of,its,i,last,i,byte,plus,one,or,in,other,words,by,the,index,of,the,i,first,i,byte,of,the,i,next,i,instruction,param,sizes,the,number,of,bytes,to,be,i,added,i,to,the,above,instructions,more,precisely,for,each,i,tt,len,tt,tt,sizes,tt,i,bytes,will,be,added,at,the,end,of,the,instruction,designated,by,tt,indexes,tt,i,or,if,tt,sizes,tt,i,is,negative,the,i,last,i,tt,sizes,i,tt,bytes,of,the,instruction,will,be,removed,the,instruction,size,i,must,not,i,become,negative,or,null,param,begin,index,of,the,first,byte,of,the,source,instruction,param,end,index,of,the,first,byte,of,the,target,instruction,return,the,future,value,of,the,given,bytecode,offset;static,int,get,new,offset,final,int,indexes,final,int,sizes,final,int,begin,final,int,end,int,offset,end,begin,for,int,i,0,i,indexes,length,i,if,begin,indexes,i,indexes,i,end,offset,sizes,i,else,if,end,indexes,i,indexes,i,begin,offset,sizes,i,return,offset
MethodWriter -> static int getNewOffset(final int[] indexes, final int[] sizes,             final int begin, final int end);1431006084;Computes the future value of a bytecode offset._<p>_Note: it is possible to have several entries for the same instruction in_the <tt>indexes</tt> and <tt>sizes</tt>: two entries (index=a,size=b) and_(index=a,size=b') are equivalent to a single entry (index=a,size=b+b').__@param indexes_current positions of the instructions to be resized. Each_instruction must be designated by the index of its <i>last</i>_byte, plus one (or, in other words, by the index of the_<i>first</i> byte of the <i>next</i> instruction)._@param sizes_the number of bytes to be <i>added</i> to the above_instructions. More precisely, for each i < <tt>len</tt>,_<tt>sizes</tt>[i] bytes will be added at the end of the_instruction designated by <tt>indexes</tt>[i] or, if_<tt>sizes</tt>[i] is negative, the <i>last</i> |_<tt>sizes[i]</tt>| bytes of the instruction will be removed_(the instruction size <i>must not</i> become negative or_null)._@param begin_index of the first byte of the source instruction._@param end_index of the first byte of the target instruction._@return the future value of the given bytecode offset.;static int getNewOffset(final int[] indexes, final int[] sizes,_            final int begin, final int end) {_        int offset = end - begin__        for (int i = 0_ i < indexes.length_ ++i) {_            if (begin < indexes[i] && indexes[i] <= end) {_                _                offset += sizes[i]__            } else if (end < indexes[i] && indexes[i] <= begin) {_                _                offset -= sizes[i]__            }_        }_        return offset__    };computes,the,future,value,of,a,bytecode,offset,p,note,it,is,possible,to,have,several,entries,for,the,same,instruction,in,the,tt,indexes,tt,and,tt,sizes,tt,two,entries,index,a,size,b,and,index,a,size,b,are,equivalent,to,a,single,entry,index,a,size,b,b,param,indexes,current,positions,of,the,instructions,to,be,resized,each,instruction,must,be,designated,by,the,index,of,its,i,last,i,byte,plus,one,or,in,other,words,by,the,index,of,the,i,first,i,byte,of,the,i,next,i,instruction,param,sizes,the,number,of,bytes,to,be,i,added,i,to,the,above,instructions,more,precisely,for,each,i,tt,len,tt,tt,sizes,tt,i,bytes,will,be,added,at,the,end,of,the,instruction,designated,by,tt,indexes,tt,i,or,if,tt,sizes,tt,i,is,negative,the,i,last,i,tt,sizes,i,tt,bytes,of,the,instruction,will,be,removed,the,instruction,size,i,must,not,i,become,negative,or,null,param,begin,index,of,the,first,byte,of,the,source,instruction,param,end,index,of,the,first,byte,of,the,target,instruction,return,the,future,value,of,the,given,bytecode,offset;static,int,get,new,offset,final,int,indexes,final,int,sizes,final,int,begin,final,int,end,int,offset,end,begin,for,int,i,0,i,indexes,length,i,if,begin,indexes,i,indexes,i,end,offset,sizes,i,else,if,end,indexes,i,indexes,i,begin,offset,sizes,i,return,offset
MethodWriter -> static int getNewOffset(final int[] indexes, final int[] sizes,             final int begin, final int end);1440705816;Computes the future value of a bytecode offset._<p>_Note: it is possible to have several entries for the same instruction in_the <tt>indexes</tt> and <tt>sizes</tt>: two entries (index=a,size=b) and_(index=a,size=b') are equivalent to a single entry (index=a,size=b+b').__@param indexes_current positions of the instructions to be resized. Each_instruction must be designated by the index of its <i>last</i>_byte, plus one (or, in other words, by the index of the_<i>first</i> byte of the <i>next</i> instruction)._@param sizes_the number of bytes to be <i>added</i> to the above_instructions. More precisely, for each i < <tt>len</tt>,_<tt>sizes</tt>[i] bytes will be added at the end of the_instruction designated by <tt>indexes</tt>[i] or, if_<tt>sizes</tt>[i] is negative, the <i>last</i> |_<tt>sizes[i]</tt>| bytes of the instruction will be removed_(the instruction size <i>must not</i> become negative or_null)._@param begin_index of the first byte of the source instruction._@param end_index of the first byte of the target instruction._@return the future value of the given bytecode offset.;static int getNewOffset(final int[] indexes, final int[] sizes,_            final int begin, final int end) {_        int offset = end - begin__        for (int i = 0_ i < indexes.length_ ++i) {_            if (begin < indexes[i] && indexes[i] <= end) {_                _                offset += sizes[i]__            } else if (end < indexes[i] && indexes[i] <= begin) {_                _                offset -= sizes[i]__            }_        }_        return offset__    };computes,the,future,value,of,a,bytecode,offset,p,note,it,is,possible,to,have,several,entries,for,the,same,instruction,in,the,tt,indexes,tt,and,tt,sizes,tt,two,entries,index,a,size,b,and,index,a,size,b,are,equivalent,to,a,single,entry,index,a,size,b,b,param,indexes,current,positions,of,the,instructions,to,be,resized,each,instruction,must,be,designated,by,the,index,of,its,i,last,i,byte,plus,one,or,in,other,words,by,the,index,of,the,i,first,i,byte,of,the,i,next,i,instruction,param,sizes,the,number,of,bytes,to,be,i,added,i,to,the,above,instructions,more,precisely,for,each,i,tt,len,tt,tt,sizes,tt,i,bytes,will,be,added,at,the,end,of,the,instruction,designated,by,tt,indexes,tt,i,or,if,tt,sizes,tt,i,is,negative,the,i,last,i,tt,sizes,i,tt,bytes,of,the,instruction,will,be,removed,the,instruction,size,i,must,not,i,become,negative,or,null,param,begin,index,of,the,first,byte,of,the,source,instruction,param,end,index,of,the,first,byte,of,the,target,instruction,return,the,future,value,of,the,given,bytecode,offset;static,int,get,new,offset,final,int,indexes,final,int,sizes,final,int,begin,final,int,end,int,offset,end,begin,for,int,i,0,i,indexes,length,i,if,begin,indexes,i,indexes,i,end,offset,sizes,i,else,if,end,indexes,i,indexes,i,begin,offset,sizes,i,return,offset
MethodWriter -> private void addSuccessor(final int info, final Label successor);1366718246;Adds a successor to the {@link #currentBlock currentBlock} block.__@param info_information about the control flow edge to be added._@param successor_the successor block to be added to the current block.;private void addSuccessor(final int info, final Label successor) {_        _        Edge b = new Edge()__        b.info = info__        b.successor = successor__        _        b.next = currentBlock.successors__        currentBlock.successors = b__    };adds,a,successor,to,the,link,current,block,current,block,block,param,info,information,about,the,control,flow,edge,to,be,added,param,successor,the,successor,block,to,be,added,to,the,current,block;private,void,add,successor,final,int,info,final,label,successor,edge,b,new,edge,b,info,info,b,successor,successor,b,next,current,block,successors,current,block,successors,b
MethodWriter -> private void addSuccessor(final int info, final Label successor);1395273982;Adds a successor to the {@link #currentBlock currentBlock} block.__@param info_information about the control flow edge to be added._@param successor_the successor block to be added to the current block.;private void addSuccessor(final int info, final Label successor) {_        _        Edge b = new Edge()__        b.info = info__        b.successor = successor__        _        b.next = currentBlock.successors__        currentBlock.successors = b__    };adds,a,successor,to,the,link,current,block,current,block,block,param,info,information,about,the,control,flow,edge,to,be,added,param,successor,the,successor,block,to,be,added,to,the,current,block;private,void,add,successor,final,int,info,final,label,successor,edge,b,new,edge,b,info,info,b,successor,successor,b,next,current,block,successors,current,block,successors,b
MethodWriter -> private void addSuccessor(final int info, final Label successor);1395744691;Adds a successor to the {@link #currentBlock currentBlock} block.__@param info_information about the control flow edge to be added._@param successor_the successor block to be added to the current block.;private void addSuccessor(final int info, final Label successor) {_        _        Edge b = new Edge()__        b.info = info__        b.successor = successor__        _        b.next = currentBlock.successors__        currentBlock.successors = b__    };adds,a,successor,to,the,link,current,block,current,block,block,param,info,information,about,the,control,flow,edge,to,be,added,param,successor,the,successor,block,to,be,added,to,the,current,block;private,void,add,successor,final,int,info,final,label,successor,edge,b,new,edge,b,info,info,b,successor,successor,b,next,current,block,successors,current,block,successors,b
MethodWriter -> private void addSuccessor(final int info, final Label successor);1400531367;Adds a successor to the {@link #currentBlock currentBlock} block.__@param info_information about the control flow edge to be added._@param successor_the successor block to be added to the current block.;private void addSuccessor(final int info, final Label successor) {_        _        Edge b = new Edge()__        b.info = info__        b.successor = successor__        _        b.next = currentBlock.successors__        currentBlock.successors = b__    };adds,a,successor,to,the,link,current,block,current,block,block,param,info,information,about,the,control,flow,edge,to,be,added,param,successor,the,successor,block,to,be,added,to,the,current,block;private,void,add,successor,final,int,info,final,label,successor,edge,b,new,edge,b,info,info,b,successor,successor,b,next,current,block,successors,current,block,successors,b
MethodWriter -> private void addSuccessor(final int info, final Label successor);1431006084;Adds a successor to the {@link #currentBlock currentBlock} block.__@param info_information about the control flow edge to be added._@param successor_the successor block to be added to the current block.;private void addSuccessor(final int info, final Label successor) {_        _        Edge b = new Edge()__        b.info = info__        b.successor = successor__        _        b.next = currentBlock.successors__        currentBlock.successors = b__    };adds,a,successor,to,the,link,current,block,current,block,block,param,info,information,about,the,control,flow,edge,to,be,added,param,successor,the,successor,block,to,be,added,to,the,current,block;private,void,add,successor,final,int,info,final,label,successor,edge,b,new,edge,b,info,info,b,successor,successor,b,next,current,block,successors,current,block,successors,b
MethodWriter -> private void addSuccessor(final int info, final Label successor);1440705816;Adds a successor to the {@link #currentBlock currentBlock} block.__@param info_information about the control flow edge to be added._@param successor_the successor block to be added to the current block.;private void addSuccessor(final int info, final Label successor) {_        _        Edge b = new Edge()__        b.info = info__        b.successor = successor__        _        b.next = currentBlock.successors__        currentBlock.successors = b__    };adds,a,successor,to,the,link,current,block,current,block,block,param,info,information,about,the,control,flow,edge,to,be,added,param,successor,the,successor,block,to,be,added,to,the,current,block;private,void,add,successor,final,int,info,final,label,successor,edge,b,new,edge,b,info,info,b,successor,successor,b,next,current,block,successors,current,block,successors,b
MethodWriter -> private void addSuccessor(final int info, final Label successor);1483093254;Adds a successor to the {@link #currentBlock currentBlock} block.__@param info_information about the control flow edge to be added._@param successor_the successor block to be added to the current block.;private void addSuccessor(final int info, final Label successor) {_        _        Edge b = new Edge()__        b.info = info__        b.successor = successor__        _        b.next = currentBlock.successors__        currentBlock.successors = b__    };adds,a,successor,to,the,link,current,block,current,block,block,param,info,information,about,the,control,flow,edge,to,be,added,param,successor,the,successor,block,to,be,added,to,the,current,block;private,void,add,successor,final,int,info,final,label,successor,edge,b,new,edge,b,info,info,b,successor,successor,b,next,current,block,successors,current,block,successors,b
MethodWriter -> private void addSuccessor(final int info, final Label successor);1505821772;Adds a successor to the {@link #currentBlock currentBlock} block.__@param info_information about the control flow edge to be added._@param successor_the successor block to be added to the current block.;private void addSuccessor(final int info, final Label successor) {_        _        Edge b = new Edge()__        b.info = info__        b.successor = successor__        _        b.next = currentBlock.successors__        currentBlock.successors = b__    };adds,a,successor,to,the,link,current,block,current,block,block,param,info,information,about,the,control,flow,edge,to,be,added,param,successor,the,successor,block,to,be,added,to,the,current,block;private,void,add,successor,final,int,info,final,label,successor,edge,b,new,edge,b,info,info,b,successor,successor,b,next,current,block,successors,current,block,successors,b
MethodWriter -> int computeMethodInfoSize();1531241461;Returns the size of the method_info JVMS structure generated by this MethodWriter. Also add the_names of the attributes of this method in the constant pool.__@return the size in bytes of the method_info JVMS structure.;int computeMethodInfoSize() {_    _    if (sourceOffset != 0) {_      _      return 6 + sourceLength__    }_    _    int size = 8__    _    if (code.length > 0) {_      if (code.length > 65535) {_        throw new IndexOutOfBoundsException("Method code too large!")__      }_      symbolTable.addConstantUtf8(Constants.CODE)__      _      _      size += 16 + code.length + Handler.getExceptionTableSize(firstHandler)__      if (stackMapTableEntries != null) {_        boolean useStackMapTable = symbolTable.getMajorVersion() >= Opcodes.V1_6__        symbolTable.addConstantUtf8(useStackMapTable ? Constants.STACK_MAP_TABLE : "StackMap")__        _        size += 8 + stackMapTableEntries.length__      }_      if (lineNumberTable != null) {_        symbolTable.addConstantUtf8(Constants.LINE_NUMBER_TABLE)__        _        size += 8 + lineNumberTable.length__      }_      if (localVariableTable != null) {_        symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TABLE)__        _        size += 8 + localVariableTable.length__      }_      if (localVariableTypeTable != null) {_        symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TYPE_TABLE)__        _        size += 8 + localVariableTypeTable.length__      }_      if (lastCodeRuntimeVisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__      }_      if (lastCodeRuntimeInvisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__      }_      if (firstCodeAttribute != null) {_        size +=_            firstCodeAttribute.computeAttributesSize(_                symbolTable, code.data, code.length, maxStack, maxLocals)__      }_    }_    if (numberOfExceptions > 0) {_      symbolTable.addConstantUtf8(Constants.EXCEPTIONS)__      size += 8 + 2 * numberOfExceptions__    }_    boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5__    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {_      symbolTable.addConstantUtf8(Constants.SYNTHETIC)__      size += 6__    }_    if (signatureIndex != 0) {_      symbolTable.addConstantUtf8(Constants.SIGNATURE)__      size += 8__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      symbolTable.addConstantUtf8(Constants.DEPRECATED)__      size += 6__    }_    if (lastRuntimeVisibleAnnotation != null) {_      size +=_          lastRuntimeVisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      size +=_          lastRuntimeInvisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeVisibleParameterAnnotations != null) {_      size +=_          AnnotationWriter.computeParameterAnnotationsSize(_              Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS,_              lastRuntimeVisibleParameterAnnotations,_              visibleAnnotableParameterCount == 0_                  ? lastRuntimeVisibleParameterAnnotations.length_                  : visibleAnnotableParameterCount)__    }_    if (lastRuntimeInvisibleParameterAnnotations != null) {_      size +=_          AnnotationWriter.computeParameterAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS,_              lastRuntimeInvisibleParameterAnnotations,_              invisibleAnnotableParameterCount == 0_                  ? lastRuntimeInvisibleParameterAnnotations.length_                  : invisibleAnnotableParameterCount)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      size +=_          lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      size +=_          lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__    }_    if (defaultValue != null) {_      symbolTable.addConstantUtf8(Constants.ANNOTATION_DEFAULT)__      size += 6 + defaultValue.length__    }_    if (parameters != null) {_      symbolTable.addConstantUtf8(Constants.METHOD_PARAMETERS)__      _      size += 7 + parameters.length__    }_    if (firstAttribute != null) {_      size += firstAttribute.computeAttributesSize(symbolTable)__    }_    return size__  };returns,the,size,of,the,jvms,structure,generated,by,this,method,writer,also,add,the,names,of,the,attributes,of,this,method,in,the,constant,pool,return,the,size,in,bytes,of,the,jvms,structure;int,compute,method,info,size,if,source,offset,0,return,6,source,length,int,size,8,if,code,length,0,if,code,length,65535,throw,new,index,out,of,bounds,exception,method,code,too,large,symbol,table,add,constant,utf8,constants,code,size,16,code,length,handler,get,exception,table,size,first,handler,if,stack,map,table,entries,null,boolean,use,stack,map,table,symbol,table,get,major,version,opcodes,symbol,table,add,constant,utf8,use,stack,map,table,constants,stack,map,size,8,stack,map,table,entries,length,if,line,number,table,null,symbol,table,add,constant,utf8,constants,size,8,line,number,table,length,if,local,variable,table,null,symbol,table,add,constant,utf8,constants,size,8,local,variable,table,length,if,local,variable,type,table,null,symbol,table,add,constant,utf8,constants,size,8,local,variable,type,table,length,if,last,code,runtime,visible,type,annotation,null,size,last,code,runtime,visible,type,annotation,compute,annotations,size,constants,if,last,code,runtime,invisible,type,annotation,null,size,last,code,runtime,invisible,type,annotation,compute,annotations,size,constants,if,first,code,attribute,null,size,first,code,attribute,compute,attributes,size,symbol,table,code,data,code,length,max,stack,max,locals,if,number,of,exceptions,0,symbol,table,add,constant,utf8,constants,exceptions,size,8,2,number,of,exceptions,boolean,use,synthetic,attribute,symbol,table,get,major,version,opcodes,if,access,flags,opcodes,0,use,synthetic,attribute,symbol,table,add,constant,utf8,constants,synthetic,size,6,if,signature,index,0,symbol,table,add,constant,utf8,constants,signature,size,8,if,access,flags,opcodes,0,symbol,table,add,constant,utf8,constants,deprecated,size,6,if,last,runtime,visible,annotation,null,size,last,runtime,visible,annotation,compute,annotations,size,constants,if,last,runtime,invisible,annotation,null,size,last,runtime,invisible,annotation,compute,annotations,size,constants,if,last,runtime,visible,parameter,annotations,null,size,annotation,writer,compute,parameter,annotations,size,constants,last,runtime,visible,parameter,annotations,visible,annotable,parameter,count,0,last,runtime,visible,parameter,annotations,length,visible,annotable,parameter,count,if,last,runtime,invisible,parameter,annotations,null,size,annotation,writer,compute,parameter,annotations,size,constants,last,runtime,invisible,parameter,annotations,invisible,annotable,parameter,count,0,last,runtime,invisible,parameter,annotations,length,invisible,annotable,parameter,count,if,last,runtime,visible,type,annotation,null,size,last,runtime,visible,type,annotation,compute,annotations,size,constants,if,last,runtime,invisible,type,annotation,null,size,last,runtime,invisible,type,annotation,compute,annotations,size,constants,if,default,value,null,symbol,table,add,constant,utf8,constants,size,6,default,value,length,if,parameters,null,symbol,table,add,constant,utf8,constants,size,7,parameters,length,if,first,attribute,null,size,first,attribute,compute,attributes,size,symbol,table,return,size
MethodWriter -> int computeMethodInfoSize();1536664245;Returns the size of the method_info JVMS structure generated by this MethodWriter. Also add the_names of the attributes of this method in the constant pool.__@return the size in bytes of the method_info JVMS structure.;int computeMethodInfoSize() {_    _    if (sourceOffset != 0) {_      _      return 6 + sourceLength__    }_    _    int size = 8__    _    if (code.length > 0) {_      if (code.length > 65535) {_        throw new MethodTooLargeException(_            symbolTable.getClassName(), name, descriptor, code.length)__      }_      symbolTable.addConstantUtf8(Constants.CODE)__      _      _      size += 16 + code.length + Handler.getExceptionTableSize(firstHandler)__      if (stackMapTableEntries != null) {_        boolean useStackMapTable = symbolTable.getMajorVersion() >= Opcodes.V1_6__        symbolTable.addConstantUtf8(useStackMapTable ? Constants.STACK_MAP_TABLE : "StackMap")__        _        size += 8 + stackMapTableEntries.length__      }_      if (lineNumberTable != null) {_        symbolTable.addConstantUtf8(Constants.LINE_NUMBER_TABLE)__        _        size += 8 + lineNumberTable.length__      }_      if (localVariableTable != null) {_        symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TABLE)__        _        size += 8 + localVariableTable.length__      }_      if (localVariableTypeTable != null) {_        symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TYPE_TABLE)__        _        size += 8 + localVariableTypeTable.length__      }_      if (lastCodeRuntimeVisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__      }_      if (lastCodeRuntimeInvisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__      }_      if (firstCodeAttribute != null) {_        size +=_            firstCodeAttribute.computeAttributesSize(_                symbolTable, code.data, code.length, maxStack, maxLocals)__      }_    }_    if (numberOfExceptions > 0) {_      symbolTable.addConstantUtf8(Constants.EXCEPTIONS)__      size += 8 + 2 * numberOfExceptions__    }_    boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5__    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {_      symbolTable.addConstantUtf8(Constants.SYNTHETIC)__      size += 6__    }_    if (signatureIndex != 0) {_      symbolTable.addConstantUtf8(Constants.SIGNATURE)__      size += 8__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      symbolTable.addConstantUtf8(Constants.DEPRECATED)__      size += 6__    }_    if (lastRuntimeVisibleAnnotation != null) {_      size +=_          lastRuntimeVisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      size +=_          lastRuntimeInvisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeVisibleParameterAnnotations != null) {_      size +=_          AnnotationWriter.computeParameterAnnotationsSize(_              Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS,_              lastRuntimeVisibleParameterAnnotations,_              visibleAnnotableParameterCount == 0_                  ? lastRuntimeVisibleParameterAnnotations.length_                  : visibleAnnotableParameterCount)__    }_    if (lastRuntimeInvisibleParameterAnnotations != null) {_      size +=_          AnnotationWriter.computeParameterAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS,_              lastRuntimeInvisibleParameterAnnotations,_              invisibleAnnotableParameterCount == 0_                  ? lastRuntimeInvisibleParameterAnnotations.length_                  : invisibleAnnotableParameterCount)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      size +=_          lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      size +=_          lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__    }_    if (defaultValue != null) {_      symbolTable.addConstantUtf8(Constants.ANNOTATION_DEFAULT)__      size += 6 + defaultValue.length__    }_    if (parameters != null) {_      symbolTable.addConstantUtf8(Constants.METHOD_PARAMETERS)__      _      size += 7 + parameters.length__    }_    if (firstAttribute != null) {_      size += firstAttribute.computeAttributesSize(symbolTable)__    }_    return size__  };returns,the,size,of,the,jvms,structure,generated,by,this,method,writer,also,add,the,names,of,the,attributes,of,this,method,in,the,constant,pool,return,the,size,in,bytes,of,the,jvms,structure;int,compute,method,info,size,if,source,offset,0,return,6,source,length,int,size,8,if,code,length,0,if,code,length,65535,throw,new,method,too,large,exception,symbol,table,get,class,name,name,descriptor,code,length,symbol,table,add,constant,utf8,constants,code,size,16,code,length,handler,get,exception,table,size,first,handler,if,stack,map,table,entries,null,boolean,use,stack,map,table,symbol,table,get,major,version,opcodes,symbol,table,add,constant,utf8,use,stack,map,table,constants,stack,map,size,8,stack,map,table,entries,length,if,line,number,table,null,symbol,table,add,constant,utf8,constants,size,8,line,number,table,length,if,local,variable,table,null,symbol,table,add,constant,utf8,constants,size,8,local,variable,table,length,if,local,variable,type,table,null,symbol,table,add,constant,utf8,constants,size,8,local,variable,type,table,length,if,last,code,runtime,visible,type,annotation,null,size,last,code,runtime,visible,type,annotation,compute,annotations,size,constants,if,last,code,runtime,invisible,type,annotation,null,size,last,code,runtime,invisible,type,annotation,compute,annotations,size,constants,if,first,code,attribute,null,size,first,code,attribute,compute,attributes,size,symbol,table,code,data,code,length,max,stack,max,locals,if,number,of,exceptions,0,symbol,table,add,constant,utf8,constants,exceptions,size,8,2,number,of,exceptions,boolean,use,synthetic,attribute,symbol,table,get,major,version,opcodes,if,access,flags,opcodes,0,use,synthetic,attribute,symbol,table,add,constant,utf8,constants,synthetic,size,6,if,signature,index,0,symbol,table,add,constant,utf8,constants,signature,size,8,if,access,flags,opcodes,0,symbol,table,add,constant,utf8,constants,deprecated,size,6,if,last,runtime,visible,annotation,null,size,last,runtime,visible,annotation,compute,annotations,size,constants,if,last,runtime,invisible,annotation,null,size,last,runtime,invisible,annotation,compute,annotations,size,constants,if,last,runtime,visible,parameter,annotations,null,size,annotation,writer,compute,parameter,annotations,size,constants,last,runtime,visible,parameter,annotations,visible,annotable,parameter,count,0,last,runtime,visible,parameter,annotations,length,visible,annotable,parameter,count,if,last,runtime,invisible,parameter,annotations,null,size,annotation,writer,compute,parameter,annotations,size,constants,last,runtime,invisible,parameter,annotations,invisible,annotable,parameter,count,0,last,runtime,invisible,parameter,annotations,length,invisible,annotable,parameter,count,if,last,runtime,visible,type,annotation,null,size,last,runtime,visible,type,annotation,compute,annotations,size,constants,if,last,runtime,invisible,type,annotation,null,size,last,runtime,invisible,type,annotation,compute,annotations,size,constants,if,default,value,null,symbol,table,add,constant,utf8,constants,size,6,default,value,length,if,parameters,null,symbol,table,add,constant,utf8,constants,size,7,parameters,length,if,first,attribute,null,size,first,attribute,compute,attributes,size,symbol,table,return,size
MethodWriter -> int computeMethodInfoSize();1537204147;Returns the size of the method_info JVMS structure generated by this MethodWriter. Also add the_names of the attributes of this method in the constant pool.__@return the size in bytes of the method_info JVMS structure.;int computeMethodInfoSize() {_    _    if (sourceOffset != 0) {_      _      return 6 + sourceLength__    }_    _    int size = 8__    _    if (code.length > 0) {_      if (code.length > 65535) {_        throw new MethodTooLargeException(_            symbolTable.getClassName(), name, descriptor, code.length)__      }_      symbolTable.addConstantUtf8(Constants.CODE)__      _      _      size += 16 + code.length + Handler.getExceptionTableSize(firstHandler)__      if (stackMapTableEntries != null) {_        boolean useStackMapTable = symbolTable.getMajorVersion() >= Opcodes.V1_6__        symbolTable.addConstantUtf8(useStackMapTable ? Constants.STACK_MAP_TABLE : "StackMap")__        _        size += 8 + stackMapTableEntries.length__      }_      if (lineNumberTable != null) {_        symbolTable.addConstantUtf8(Constants.LINE_NUMBER_TABLE)__        _        size += 8 + lineNumberTable.length__      }_      if (localVariableTable != null) {_        symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TABLE)__        _        size += 8 + localVariableTable.length__      }_      if (localVariableTypeTable != null) {_        symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TYPE_TABLE)__        _        size += 8 + localVariableTypeTable.length__      }_      if (lastCodeRuntimeVisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__      }_      if (lastCodeRuntimeInvisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__      }_      if (firstCodeAttribute != null) {_        size +=_            firstCodeAttribute.computeAttributesSize(_                symbolTable, code.data, code.length, maxStack, maxLocals)__      }_    }_    if (numberOfExceptions > 0) {_      symbolTable.addConstantUtf8(Constants.EXCEPTIONS)__      size += 8 + 2 * numberOfExceptions__    }_    boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5__    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {_      symbolTable.addConstantUtf8(Constants.SYNTHETIC)__      size += 6__    }_    if (signatureIndex != 0) {_      symbolTable.addConstantUtf8(Constants.SIGNATURE)__      size += 8__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      symbolTable.addConstantUtf8(Constants.DEPRECATED)__      size += 6__    }_    if (lastRuntimeVisibleAnnotation != null) {_      size +=_          lastRuntimeVisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      size +=_          lastRuntimeInvisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeVisibleParameterAnnotations != null) {_      size +=_          AnnotationWriter.computeParameterAnnotationsSize(_              Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS,_              lastRuntimeVisibleParameterAnnotations,_              visibleAnnotableParameterCount == 0_                  ? lastRuntimeVisibleParameterAnnotations.length_                  : visibleAnnotableParameterCount)__    }_    if (lastRuntimeInvisibleParameterAnnotations != null) {_      size +=_          AnnotationWriter.computeParameterAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS,_              lastRuntimeInvisibleParameterAnnotations,_              invisibleAnnotableParameterCount == 0_                  ? lastRuntimeInvisibleParameterAnnotations.length_                  : invisibleAnnotableParameterCount)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      size +=_          lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      size +=_          lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__    }_    if (defaultValue != null) {_      symbolTable.addConstantUtf8(Constants.ANNOTATION_DEFAULT)__      size += 6 + defaultValue.length__    }_    if (parameters != null) {_      symbolTable.addConstantUtf8(Constants.METHOD_PARAMETERS)__      _      size += 7 + parameters.length__    }_    if (firstAttribute != null) {_      size += firstAttribute.computeAttributesSize(symbolTable)__    }_    return size__  };returns,the,size,of,the,jvms,structure,generated,by,this,method,writer,also,add,the,names,of,the,attributes,of,this,method,in,the,constant,pool,return,the,size,in,bytes,of,the,jvms,structure;int,compute,method,info,size,if,source,offset,0,return,6,source,length,int,size,8,if,code,length,0,if,code,length,65535,throw,new,method,too,large,exception,symbol,table,get,class,name,name,descriptor,code,length,symbol,table,add,constant,utf8,constants,code,size,16,code,length,handler,get,exception,table,size,first,handler,if,stack,map,table,entries,null,boolean,use,stack,map,table,symbol,table,get,major,version,opcodes,symbol,table,add,constant,utf8,use,stack,map,table,constants,stack,map,size,8,stack,map,table,entries,length,if,line,number,table,null,symbol,table,add,constant,utf8,constants,size,8,line,number,table,length,if,local,variable,table,null,symbol,table,add,constant,utf8,constants,size,8,local,variable,table,length,if,local,variable,type,table,null,symbol,table,add,constant,utf8,constants,size,8,local,variable,type,table,length,if,last,code,runtime,visible,type,annotation,null,size,last,code,runtime,visible,type,annotation,compute,annotations,size,constants,if,last,code,runtime,invisible,type,annotation,null,size,last,code,runtime,invisible,type,annotation,compute,annotations,size,constants,if,first,code,attribute,null,size,first,code,attribute,compute,attributes,size,symbol,table,code,data,code,length,max,stack,max,locals,if,number,of,exceptions,0,symbol,table,add,constant,utf8,constants,exceptions,size,8,2,number,of,exceptions,boolean,use,synthetic,attribute,symbol,table,get,major,version,opcodes,if,access,flags,opcodes,0,use,synthetic,attribute,symbol,table,add,constant,utf8,constants,synthetic,size,6,if,signature,index,0,symbol,table,add,constant,utf8,constants,signature,size,8,if,access,flags,opcodes,0,symbol,table,add,constant,utf8,constants,deprecated,size,6,if,last,runtime,visible,annotation,null,size,last,runtime,visible,annotation,compute,annotations,size,constants,if,last,runtime,invisible,annotation,null,size,last,runtime,invisible,annotation,compute,annotations,size,constants,if,last,runtime,visible,parameter,annotations,null,size,annotation,writer,compute,parameter,annotations,size,constants,last,runtime,visible,parameter,annotations,visible,annotable,parameter,count,0,last,runtime,visible,parameter,annotations,length,visible,annotable,parameter,count,if,last,runtime,invisible,parameter,annotations,null,size,annotation,writer,compute,parameter,annotations,size,constants,last,runtime,invisible,parameter,annotations,invisible,annotable,parameter,count,0,last,runtime,invisible,parameter,annotations,length,invisible,annotable,parameter,count,if,last,runtime,visible,type,annotation,null,size,last,runtime,visible,type,annotation,compute,annotations,size,constants,if,last,runtime,invisible,type,annotation,null,size,last,runtime,invisible,type,annotation,compute,annotations,size,constants,if,default,value,null,symbol,table,add,constant,utf8,constants,size,6,default,value,length,if,parameters,null,symbol,table,add,constant,utf8,constants,size,7,parameters,length,if,first,attribute,null,size,first,attribute,compute,attributes,size,symbol,table,return,size
MethodWriter -> int computeMethodInfoSize();1539119582;Returns the size of the method_info JVMS structure generated by this MethodWriter. Also add the_names of the attributes of this method in the constant pool.__@return the size in bytes of the method_info JVMS structure.;int computeMethodInfoSize() {_    _    if (sourceOffset != 0) {_      _      return 6 + sourceLength__    }_    _    int size = 8__    _    if (code.length > 0) {_      if (code.length > 65535) {_        throw new MethodTooLargeException(_            symbolTable.getClassName(), name, descriptor, code.length)__      }_      symbolTable.addConstantUtf8(Constants.CODE)__      _      _      size += 16 + code.length + Handler.getExceptionTableSize(firstHandler)__      if (stackMapTableEntries != null) {_        boolean useStackMapTable = symbolTable.getMajorVersion() >= Opcodes.V1_6__        symbolTable.addConstantUtf8(useStackMapTable ? Constants.STACK_MAP_TABLE : "StackMap")__        _        size += 8 + stackMapTableEntries.length__      }_      if (lineNumberTable != null) {_        symbolTable.addConstantUtf8(Constants.LINE_NUMBER_TABLE)__        _        size += 8 + lineNumberTable.length__      }_      if (localVariableTable != null) {_        symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TABLE)__        _        size += 8 + localVariableTable.length__      }_      if (localVariableTypeTable != null) {_        symbolTable.addConstantUtf8(Constants.LOCAL_VARIABLE_TYPE_TABLE)__        _        size += 8 + localVariableTypeTable.length__      }_      if (lastCodeRuntimeVisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__      }_      if (lastCodeRuntimeInvisibleTypeAnnotation != null) {_        size +=_            lastCodeRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_                Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__      }_      if (firstCodeAttribute != null) {_        size +=_            firstCodeAttribute.computeAttributesSize(_                symbolTable, code.data, code.length, maxStack, maxLocals)__      }_    }_    if (numberOfExceptions > 0) {_      symbolTable.addConstantUtf8(Constants.EXCEPTIONS)__      size += 8 + 2 * numberOfExceptions__    }_    boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5__    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {_      symbolTable.addConstantUtf8(Constants.SYNTHETIC)__      size += 6__    }_    if (signatureIndex != 0) {_      symbolTable.addConstantUtf8(Constants.SIGNATURE)__      size += 8__    }_    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {_      symbolTable.addConstantUtf8(Constants.DEPRECATED)__      size += 6__    }_    if (lastRuntimeVisibleAnnotation != null) {_      size +=_          lastRuntimeVisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleAnnotation != null) {_      size +=_          lastRuntimeInvisibleAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_ANNOTATIONS)__    }_    if (lastRuntimeVisibleParameterAnnotations != null) {_      size +=_          AnnotationWriter.computeParameterAnnotationsSize(_              Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS,_              lastRuntimeVisibleParameterAnnotations,_              visibleAnnotableParameterCount == 0_                  ? lastRuntimeVisibleParameterAnnotations.length_                  : visibleAnnotableParameterCount)__    }_    if (lastRuntimeInvisibleParameterAnnotations != null) {_      size +=_          AnnotationWriter.computeParameterAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS,_              lastRuntimeInvisibleParameterAnnotations,_              invisibleAnnotableParameterCount == 0_                  ? lastRuntimeInvisibleParameterAnnotations.length_                  : invisibleAnnotableParameterCount)__    }_    if (lastRuntimeVisibleTypeAnnotation != null) {_      size +=_          lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS)__    }_    if (lastRuntimeInvisibleTypeAnnotation != null) {_      size +=_          lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(_              Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)__    }_    if (defaultValue != null) {_      symbolTable.addConstantUtf8(Constants.ANNOTATION_DEFAULT)__      size += 6 + defaultValue.length__    }_    if (parameters != null) {_      symbolTable.addConstantUtf8(Constants.METHOD_PARAMETERS)__      _      size += 7 + parameters.length__    }_    if (firstAttribute != null) {_      size += firstAttribute.computeAttributesSize(symbolTable)__    }_    return size__  };returns,the,size,of,the,jvms,structure,generated,by,this,method,writer,also,add,the,names,of,the,attributes,of,this,method,in,the,constant,pool,return,the,size,in,bytes,of,the,jvms,structure;int,compute,method,info,size,if,source,offset,0,return,6,source,length,int,size,8,if,code,length,0,if,code,length,65535,throw,new,method,too,large,exception,symbol,table,get,class,name,name,descriptor,code,length,symbol,table,add,constant,utf8,constants,code,size,16,code,length,handler,get,exception,table,size,first,handler,if,stack,map,table,entries,null,boolean,use,stack,map,table,symbol,table,get,major,version,opcodes,symbol,table,add,constant,utf8,use,stack,map,table,constants,stack,map,size,8,stack,map,table,entries,length,if,line,number,table,null,symbol,table,add,constant,utf8,constants,size,8,line,number,table,length,if,local,variable,table,null,symbol,table,add,constant,utf8,constants,size,8,local,variable,table,length,if,local,variable,type,table,null,symbol,table,add,constant,utf8,constants,size,8,local,variable,type,table,length,if,last,code,runtime,visible,type,annotation,null,size,last,code,runtime,visible,type,annotation,compute,annotations,size,constants,if,last,code,runtime,invisible,type,annotation,null,size,last,code,runtime,invisible,type,annotation,compute,annotations,size,constants,if,first,code,attribute,null,size,first,code,attribute,compute,attributes,size,symbol,table,code,data,code,length,max,stack,max,locals,if,number,of,exceptions,0,symbol,table,add,constant,utf8,constants,exceptions,size,8,2,number,of,exceptions,boolean,use,synthetic,attribute,symbol,table,get,major,version,opcodes,if,access,flags,opcodes,0,use,synthetic,attribute,symbol,table,add,constant,utf8,constants,synthetic,size,6,if,signature,index,0,symbol,table,add,constant,utf8,constants,signature,size,8,if,access,flags,opcodes,0,symbol,table,add,constant,utf8,constants,deprecated,size,6,if,last,runtime,visible,annotation,null,size,last,runtime,visible,annotation,compute,annotations,size,constants,if,last,runtime,invisible,annotation,null,size,last,runtime,invisible,annotation,compute,annotations,size,constants,if,last,runtime,visible,parameter,annotations,null,size,annotation,writer,compute,parameter,annotations,size,constants,last,runtime,visible,parameter,annotations,visible,annotable,parameter,count,0,last,runtime,visible,parameter,annotations,length,visible,annotable,parameter,count,if,last,runtime,invisible,parameter,annotations,null,size,annotation,writer,compute,parameter,annotations,size,constants,last,runtime,invisible,parameter,annotations,invisible,annotable,parameter,count,0,last,runtime,invisible,parameter,annotations,length,invisible,annotable,parameter,count,if,last,runtime,visible,type,annotation,null,size,last,runtime,visible,type,annotation,compute,annotations,size,constants,if,last,runtime,invisible,type,annotation,null,size,last,runtime,invisible,type,annotation,compute,annotations,size,constants,if,default,value,null,symbol,table,add,constant,utf8,constants,size,6,default,value,length,if,parameters,null,symbol,table,add,constant,utf8,constants,size,7,parameters,length,if,first,attribute,null,size,first,attribute,compute,attributes,size,symbol,table,return,size
MethodWriter -> int visitFrameStart(final int offset, final int numLocal, final int numStack);1537204147;Starts the visit of a new stack map frame, stored in {@link #currentFrame}.__@param offset the bytecode offset of the instruction to which the frame corresponds._@param numLocal the number of local variables in the frame._@param numStack the number of stack elements in the frame._@return the index of the next element to be written in this frame.;int visitFrameStart(final int offset, final int numLocal, final int numStack) {_    int frameLength = 3 + numLocal + numStack__    if (currentFrame == null || currentFrame.length < frameLength) {_      currentFrame = new int[frameLength]__    }_    currentFrame[0] = offset__    currentFrame[1] = numLocal__    currentFrame[2] = numStack__    return 3__  };starts,the,visit,of,a,new,stack,map,frame,stored,in,link,current,frame,param,offset,the,bytecode,offset,of,the,instruction,to,which,the,frame,corresponds,param,num,local,the,number,of,local,variables,in,the,frame,param,num,stack,the,number,of,stack,elements,in,the,frame,return,the,index,of,the,next,element,to,be,written,in,this,frame;int,visit,frame,start,final,int,offset,final,int,num,local,final,int,num,stack,int,frame,length,3,num,local,num,stack,if,current,frame,null,current,frame,length,frame,length,current,frame,new,int,frame,length,current,frame,0,offset,current,frame,1,num,local,current,frame,2,num,stack,return,3
MethodWriter -> int visitFrameStart(final int offset, final int numLocal, final int numStack);1539119582;Starts the visit of a new stack map frame, stored in {@link #currentFrame}.__@param offset the bytecode offset of the instruction to which the frame corresponds._@param numLocal the number of local variables in the frame._@param numStack the number of stack elements in the frame._@return the index of the next element to be written in this frame.;int visitFrameStart(final int offset, final int numLocal, final int numStack) {_    int frameLength = 3 + numLocal + numStack__    if (currentFrame == null || currentFrame.length < frameLength) {_      currentFrame = new int[frameLength]__    }_    currentFrame[0] = offset__    currentFrame[1] = numLocal__    currentFrame[2] = numStack__    return 3__  };starts,the,visit,of,a,new,stack,map,frame,stored,in,link,current,frame,param,offset,the,bytecode,offset,of,the,instruction,to,which,the,frame,corresponds,param,num,local,the,number,of,local,variables,in,the,frame,param,num,stack,the,number,of,stack,elements,in,the,frame,return,the,index,of,the,next,element,to,be,written,in,this,frame;int,visit,frame,start,final,int,offset,final,int,num,local,final,int,num,stack,int,frame,length,3,num,local,num,stack,if,current,frame,null,current,frame,length,frame,length,current,frame,new,int,frame,length,current,frame,0,offset,current,frame,1,num,local,current,frame,2,num,stack,return,3
MethodWriter -> static int readInt(final byte[] b, final int index);1366718246;Reads a signed int value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static int readInt(final byte[] b, final int index) {_        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,int,read,int,final,byte,b,final,int,index,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
MethodWriter -> static int readInt(final byte[] b, final int index);1395273982;Reads a signed int value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static int readInt(final byte[] b, final int index) {_        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,int,read,int,final,byte,b,final,int,index,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
MethodWriter -> static int readInt(final byte[] b, final int index);1395744691;Reads a signed int value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static int readInt(final byte[] b, final int index) {_        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,int,read,int,final,byte,b,final,int,index,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
MethodWriter -> static int readInt(final byte[] b, final int index);1400531367;Reads a signed int value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static int readInt(final byte[] b, final int index) {_        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,int,read,int,final,byte,b,final,int,index,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
MethodWriter -> static int readInt(final byte[] b, final int index);1431006084;Reads a signed int value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static int readInt(final byte[] b, final int index) {_        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,int,read,int,final,byte,b,final,int,index,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
MethodWriter -> static int readInt(final byte[] b, final int index);1440705816;Reads a signed int value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static int readInt(final byte[] b, final int index) {_        return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16)_                | ((b[index + 2] & 0xFF) << 8) | (b[index + 3] & 0xFF)__    };reads,a,signed,int,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,int,read,int,final,byte,b,final,int,index,return,b,index,0x,ff,24,b,index,1,0x,ff,16,b,index,2,0x,ff,8,b,index,3,0x,ff
MethodWriter -> static short readShort(final byte[] b, final int index);1366718246;Reads a signed short value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static short readShort(final byte[] b, final int index) {_        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,short,read,short,final,byte,b,final,int,index,return,short,b,index,0x,ff,8,b,index,1,0x,ff
MethodWriter -> static short readShort(final byte[] b, final int index);1395273982;Reads a signed short value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static short readShort(final byte[] b, final int index) {_        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,short,read,short,final,byte,b,final,int,index,return,short,b,index,0x,ff,8,b,index,1,0x,ff
MethodWriter -> static short readShort(final byte[] b, final int index);1395744691;Reads a signed short value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static short readShort(final byte[] b, final int index) {_        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,short,read,short,final,byte,b,final,int,index,return,short,b,index,0x,ff,8,b,index,1,0x,ff
MethodWriter -> static short readShort(final byte[] b, final int index);1400531367;Reads a signed short value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static short readShort(final byte[] b, final int index) {_        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,short,read,short,final,byte,b,final,int,index,return,short,b,index,0x,ff,8,b,index,1,0x,ff
MethodWriter -> static short readShort(final byte[] b, final int index);1431006084;Reads a signed short value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static short readShort(final byte[] b, final int index) {_        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,short,read,short,final,byte,b,final,int,index,return,short,b,index,0x,ff,8,b,index,1,0x,ff
MethodWriter -> static short readShort(final byte[] b, final int index);1440705816;Reads a signed short value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static short readShort(final byte[] b, final int index) {_        return (short) (((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF))__    };reads,a,signed,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,short,read,short,final,byte,b,final,int,index,return,short,b,index,0x,ff,8,b,index,1,0x,ff
MethodWriter -> void visitAbstractType(final int frameIndex, final int abstractType);1531241461;Sets an abstract type in {@link #currentFrame}.__@param frameIndex the index of the element to be set in {@link #currentFrame}._@param abstractType an abstract type.;void visitAbstractType(final int frameIndex, final int abstractType) {_    currentFrame[frameIndex] = abstractType__  };sets,an,abstract,type,in,link,current,frame,param,frame,index,the,index,of,the,element,to,be,set,in,link,current,frame,param,abstract,type,an,abstract,type;void,visit,abstract,type,final,int,frame,index,final,int,abstract,type,current,frame,frame,index,abstract,type
MethodWriter -> void visitAbstractType(final int frameIndex, final int abstractType);1536664245;Sets an abstract type in {@link #currentFrame}.__@param frameIndex the index of the element to be set in {@link #currentFrame}._@param abstractType an abstract type.;void visitAbstractType(final int frameIndex, final int abstractType) {_    currentFrame[frameIndex] = abstractType__  };sets,an,abstract,type,in,link,current,frame,param,frame,index,the,index,of,the,element,to,be,set,in,link,current,frame,param,abstract,type,an,abstract,type;void,visit,abstract,type,final,int,frame,index,final,int,abstract,type,current,frame,frame,index,abstract,type
MethodWriter -> void visitAbstractType(final int frameIndex, final int abstractType);1537204147;Sets an abstract type in {@link #currentFrame}.__@param frameIndex the index of the element to be set in {@link #currentFrame}._@param abstractType an abstract type.;void visitAbstractType(final int frameIndex, final int abstractType) {_    currentFrame[frameIndex] = abstractType__  };sets,an,abstract,type,in,link,current,frame,param,frame,index,the,index,of,the,element,to,be,set,in,link,current,frame,param,abstract,type,an,abstract,type;void,visit,abstract,type,final,int,frame,index,final,int,abstract,type,current,frame,frame,index,abstract,type
MethodWriter -> void visitAbstractType(final int frameIndex, final int abstractType);1539119582;Sets an abstract type in {@link #currentFrame}.__@param frameIndex the index of the element to be set in {@link #currentFrame}._@param abstractType an abstract type.;void visitAbstractType(final int frameIndex, final int abstractType) {_    currentFrame[frameIndex] = abstractType__  };sets,an,abstract,type,in,link,current,frame,param,frame,index,the,index,of,the,element,to,be,set,in,link,current,frame,param,abstract,type,an,abstract,type;void,visit,abstract,type,final,int,frame,index,final,int,abstract,type,current,frame,frame,index,abstract,type
MethodWriter -> void visitFrameEnd();1531241461;Ends the visit of {@link #currentFrame} by writing it in the StackMapTable entries and by_updating the StackMapTable number_of_entries (except if the current frame is the first one,_which is implicit in StackMapTable). Then resets {@link #currentFrame} to <tt>null</tt>.;void visitFrameEnd() {_    if (previousFrame != null) {_      if (stackMapTableEntries == null) {_        stackMapTableEntries = new ByteVector()__      }_      putFrame()__      ++stackMapTableNumberOfEntries__    }_    previousFrame = currentFrame__    currentFrame = null__  };ends,the,visit,of,link,current,frame,by,writing,it,in,the,stack,map,table,entries,and,by,updating,the,stack,map,table,except,if,the,current,frame,is,the,first,one,which,is,implicit,in,stack,map,table,then,resets,link,current,frame,to,tt,null,tt;void,visit,frame,end,if,previous,frame,null,if,stack,map,table,entries,null,stack,map,table,entries,new,byte,vector,put,frame,stack,map,table,number,of,entries,previous,frame,current,frame,current,frame,null
MethodWriter -> void visitFrameEnd();1536664245;Ends the visit of {@link #currentFrame} by writing it in the StackMapTable entries and by_updating the StackMapTable number_of_entries (except if the current frame is the first one,_which is implicit in StackMapTable). Then resets {@link #currentFrame} to {@literal null}.;void visitFrameEnd() {_    if (previousFrame != null) {_      if (stackMapTableEntries == null) {_        stackMapTableEntries = new ByteVector()__      }_      putFrame()__      ++stackMapTableNumberOfEntries__    }_    previousFrame = currentFrame__    currentFrame = null__  };ends,the,visit,of,link,current,frame,by,writing,it,in,the,stack,map,table,entries,and,by,updating,the,stack,map,table,except,if,the,current,frame,is,the,first,one,which,is,implicit,in,stack,map,table,then,resets,link,current,frame,to,literal,null;void,visit,frame,end,if,previous,frame,null,if,stack,map,table,entries,null,stack,map,table,entries,new,byte,vector,put,frame,stack,map,table,number,of,entries,previous,frame,current,frame,current,frame,null
MethodWriter -> void visitFrameEnd();1537204147;Ends the visit of {@link #currentFrame} by writing it in the StackMapTable entries and by_updating the StackMapTable number_of_entries (except if the current frame is the first one,_which is implicit in StackMapTable). Then resets {@link #currentFrame} to {@literal null}.;void visitFrameEnd() {_    if (previousFrame != null) {_      if (stackMapTableEntries == null) {_        stackMapTableEntries = new ByteVector()__      }_      putFrame()__      ++stackMapTableNumberOfEntries__    }_    previousFrame = currentFrame__    currentFrame = null__  };ends,the,visit,of,link,current,frame,by,writing,it,in,the,stack,map,table,entries,and,by,updating,the,stack,map,table,except,if,the,current,frame,is,the,first,one,which,is,implicit,in,stack,map,table,then,resets,link,current,frame,to,literal,null;void,visit,frame,end,if,previous,frame,null,if,stack,map,table,entries,null,stack,map,table,entries,new,byte,vector,put,frame,stack,map,table,number,of,entries,previous,frame,current,frame,current,frame,null
MethodWriter -> void visitFrameEnd();1539119582;Ends the visit of {@link #currentFrame} by writing it in the StackMapTable entries and by_updating the StackMapTable number_of_entries (except if the current frame is the first one,_which is implicit in StackMapTable). Then resets {@link #currentFrame} to {@literal null}.;void visitFrameEnd() {_    if (previousFrame != null) {_      if (stackMapTableEntries == null) {_        stackMapTableEntries = new ByteVector()__      }_      putFrame()__      ++stackMapTableNumberOfEntries__    }_    previousFrame = currentFrame__    currentFrame = null__  };ends,the,visit,of,link,current,frame,by,writing,it,in,the,stack,map,table,entries,and,by,updating,the,stack,map,table,except,if,the,current,frame,is,the,first,one,which,is,implicit,in,stack,map,table,then,resets,link,current,frame,to,literal,null;void,visit,frame,end,if,previous,frame,null,if,stack,map,table,entries,null,stack,map,table,entries,new,byte,vector,put,frame,stack,map,table,number,of,entries,previous,frame,current,frame,current,frame,null
MethodWriter -> private void visitFrame(final Frame f);1366718246;Visits a frame that has been computed from scratch.__@param f_the frame that must be visited.;private void visitFrame(final Frame f) {_        int i, t__        int nTop = 0__        int nLocal = 0__        int nStack = 0__        int[] locals = f.inputLocals__        int[] stacks = f.inputStack__        _        _        for (i = 0_ i < locals.length_ ++i) {_            t = locals[i]__            if (t == Frame.TOP) {_                ++nTop__            } else {_                nLocal += nTop + 1__                nTop = 0__            }_            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        _        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            ++nStack__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        int frameIndex = startFrame(f.owner.position, nLocal, nStack)__        for (i = 0_ nLocal > 0_ ++i, --nLocal) {_            t = locals[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        endFrame()__    };visits,a,frame,that,has,been,computed,from,scratch,param,f,the,frame,that,must,be,visited;private,void,visit,frame,final,frame,f,int,i,t,int,n,top,0,int,n,local,0,int,n,stack,0,int,locals,f,input,locals,int,stacks,f,input,stack,for,i,0,i,locals,length,i,t,locals,i,if,t,frame,top,n,top,else,n,local,n,top,1,n,top,0,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,n,stack,if,t,frame,long,t,frame,double,i,int,frame,index,start,frame,f,owner,position,n,local,n,stack,for,i,0,n,local,0,i,n,local,t,locals,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,end,frame
MethodWriter -> private void visitFrame(final Frame f);1395273982;Visits a frame that has been computed from scratch.__@param f_the frame that must be visited.;private void visitFrame(final Frame f) {_        int i, t__        int nTop = 0__        int nLocal = 0__        int nStack = 0__        int[] locals = f.inputLocals__        int[] stacks = f.inputStack__        _        _        for (i = 0_ i < locals.length_ ++i) {_            t = locals[i]__            if (t == Frame.TOP) {_                ++nTop__            } else {_                nLocal += nTop + 1__                nTop = 0__            }_            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        _        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            ++nStack__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        int frameIndex = startFrame(f.owner.position, nLocal, nStack)__        for (i = 0_ nLocal > 0_ ++i, --nLocal) {_            t = locals[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        endFrame()__    };visits,a,frame,that,has,been,computed,from,scratch,param,f,the,frame,that,must,be,visited;private,void,visit,frame,final,frame,f,int,i,t,int,n,top,0,int,n,local,0,int,n,stack,0,int,locals,f,input,locals,int,stacks,f,input,stack,for,i,0,i,locals,length,i,t,locals,i,if,t,frame,top,n,top,else,n,local,n,top,1,n,top,0,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,n,stack,if,t,frame,long,t,frame,double,i,int,frame,index,start,frame,f,owner,position,n,local,n,stack,for,i,0,n,local,0,i,n,local,t,locals,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,end,frame
MethodWriter -> private void visitFrame(final Frame f);1395744691;Visits a frame that has been computed from scratch.__@param f_the frame that must be visited.;private void visitFrame(final Frame f) {_        int i, t__        int nTop = 0__        int nLocal = 0__        int nStack = 0__        int[] locals = f.inputLocals__        int[] stacks = f.inputStack__        _        _        for (i = 0_ i < locals.length_ ++i) {_            t = locals[i]__            if (t == Frame.TOP) {_                ++nTop__            } else {_                nLocal += nTop + 1__                nTop = 0__            }_            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        _        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            ++nStack__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        int frameIndex = startFrame(f.owner.position, nLocal, nStack)__        for (i = 0_ nLocal > 0_ ++i, --nLocal) {_            t = locals[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        endFrame()__    };visits,a,frame,that,has,been,computed,from,scratch,param,f,the,frame,that,must,be,visited;private,void,visit,frame,final,frame,f,int,i,t,int,n,top,0,int,n,local,0,int,n,stack,0,int,locals,f,input,locals,int,stacks,f,input,stack,for,i,0,i,locals,length,i,t,locals,i,if,t,frame,top,n,top,else,n,local,n,top,1,n,top,0,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,n,stack,if,t,frame,long,t,frame,double,i,int,frame,index,start,frame,f,owner,position,n,local,n,stack,for,i,0,n,local,0,i,n,local,t,locals,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,end,frame
MethodWriter -> private void visitFrame(final Frame f);1400531367;Visits a frame that has been computed from scratch.__@param f_the frame that must be visited.;private void visitFrame(final Frame f) {_        int i, t__        int nTop = 0__        int nLocal = 0__        int nStack = 0__        int[] locals = f.inputLocals__        int[] stacks = f.inputStack__        _        _        for (i = 0_ i < locals.length_ ++i) {_            t = locals[i]__            if (t == Frame.TOP) {_                ++nTop__            } else {_                nLocal += nTop + 1__                nTop = 0__            }_            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        _        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            ++nStack__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        int frameIndex = startFrame(f.owner.position, nLocal, nStack)__        for (i = 0_ nLocal > 0_ ++i, --nLocal) {_            t = locals[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        endFrame()__    };visits,a,frame,that,has,been,computed,from,scratch,param,f,the,frame,that,must,be,visited;private,void,visit,frame,final,frame,f,int,i,t,int,n,top,0,int,n,local,0,int,n,stack,0,int,locals,f,input,locals,int,stacks,f,input,stack,for,i,0,i,locals,length,i,t,locals,i,if,t,frame,top,n,top,else,n,local,n,top,1,n,top,0,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,n,stack,if,t,frame,long,t,frame,double,i,int,frame,index,start,frame,f,owner,position,n,local,n,stack,for,i,0,n,local,0,i,n,local,t,locals,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,end,frame
MethodWriter -> private void visitFrame(final Frame f);1431006084;Visits a frame that has been computed from scratch.__@param f_the frame that must be visited.;private void visitFrame(final Frame f) {_        int i, t__        int nTop = 0__        int nLocal = 0__        int nStack = 0__        int[] locals = f.inputLocals__        int[] stacks = f.inputStack__        _        _        for (i = 0_ i < locals.length_ ++i) {_            t = locals[i]__            if (t == Frame.TOP) {_                ++nTop__            } else {_                nLocal += nTop + 1__                nTop = 0__            }_            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        _        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            ++nStack__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        int frameIndex = startFrame(f.owner.position, nLocal, nStack)__        for (i = 0_ nLocal > 0_ ++i, --nLocal) {_            t = locals[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        endFrame()__    };visits,a,frame,that,has,been,computed,from,scratch,param,f,the,frame,that,must,be,visited;private,void,visit,frame,final,frame,f,int,i,t,int,n,top,0,int,n,local,0,int,n,stack,0,int,locals,f,input,locals,int,stacks,f,input,stack,for,i,0,i,locals,length,i,t,locals,i,if,t,frame,top,n,top,else,n,local,n,top,1,n,top,0,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,n,stack,if,t,frame,long,t,frame,double,i,int,frame,index,start,frame,f,owner,position,n,local,n,stack,for,i,0,n,local,0,i,n,local,t,locals,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,end,frame
MethodWriter -> private void visitFrame(final Frame f);1440705816;Visits a frame that has been computed from scratch.__@param f_the frame that must be visited.;private void visitFrame(final Frame f) {_        int i, t__        int nTop = 0__        int nLocal = 0__        int nStack = 0__        int[] locals = f.inputLocals__        int[] stacks = f.inputStack__        _        _        for (i = 0_ i < locals.length_ ++i) {_            t = locals[i]__            if (t == Frame.TOP) {_                ++nTop__            } else {_                nLocal += nTop + 1__                nTop = 0__            }_            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        _        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            ++nStack__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        int frameIndex = startFrame(f.owner.position, nLocal, nStack)__        for (i = 0_ nLocal > 0_ ++i, --nLocal) {_            t = locals[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        endFrame()__    };visits,a,frame,that,has,been,computed,from,scratch,param,f,the,frame,that,must,be,visited;private,void,visit,frame,final,frame,f,int,i,t,int,n,top,0,int,n,local,0,int,n,stack,0,int,locals,f,input,locals,int,stacks,f,input,stack,for,i,0,i,locals,length,i,t,locals,i,if,t,frame,top,n,top,else,n,local,n,top,1,n,top,0,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,n,stack,if,t,frame,long,t,frame,double,i,int,frame,index,start,frame,f,owner,position,n,local,n,stack,for,i,0,n,local,0,i,n,local,t,locals,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,end,frame
MethodWriter -> private void visitFrame(final Frame f);1483093254;Visits a frame that has been computed from scratch.__@param f_the frame that must be visited.;private void visitFrame(final Frame f) {_        int i, t__        int nTop = 0__        int nLocal = 0__        int nStack = 0__        int[] locals = f.inputLocals__        int[] stacks = f.inputStack__        _        _        for (i = 0_ i < locals.length_ ++i) {_            t = locals[i]__            if (t == Frame.TOP) {_                ++nTop__            } else {_                nLocal += nTop + 1__                nTop = 0__            }_            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        _        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            ++nStack__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        int frameIndex = startFrame(f.owner.position, nLocal, nStack)__        for (i = 0_ nLocal > 0_ ++i, --nLocal) {_            t = locals[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        endFrame()__    };visits,a,frame,that,has,been,computed,from,scratch,param,f,the,frame,that,must,be,visited;private,void,visit,frame,final,frame,f,int,i,t,int,n,top,0,int,n,local,0,int,n,stack,0,int,locals,f,input,locals,int,stacks,f,input,stack,for,i,0,i,locals,length,i,t,locals,i,if,t,frame,top,n,top,else,n,local,n,top,1,n,top,0,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,n,stack,if,t,frame,long,t,frame,double,i,int,frame,index,start,frame,f,owner,position,n,local,n,stack,for,i,0,n,local,0,i,n,local,t,locals,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,end,frame
MethodWriter -> private void visitFrame(final Frame f);1505821772;Visits a frame that has been computed from scratch.__@param f_the frame that must be visited.;private void visitFrame(final Frame f) {_        int i, t__        int nTop = 0__        int nLocal = 0__        int nStack = 0__        int[] locals = f.inputLocals__        int[] stacks = f.inputStack__        _        _        for (i = 0_ i < locals.length_ ++i) {_            t = locals[i]__            if (t == Frame.TOP) {_                ++nTop__            } else {_                nLocal += nTop + 1__                nTop = 0__            }_            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        _        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            ++nStack__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        _        int frameIndex = startFrame(f.owner.position, nLocal, nStack)__        for (i = 0_ nLocal > 0_ ++i, --nLocal) {_            t = locals[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        for (i = 0_ i < stacks.length_ ++i) {_            t = stacks[i]__            frame[frameIndex++] = t__            if (t == Frame.LONG || t == Frame.DOUBLE) {_                ++i__            }_        }_        endFrame()__    };visits,a,frame,that,has,been,computed,from,scratch,param,f,the,frame,that,must,be,visited;private,void,visit,frame,final,frame,f,int,i,t,int,n,top,0,int,n,local,0,int,n,stack,0,int,locals,f,input,locals,int,stacks,f,input,stack,for,i,0,i,locals,length,i,t,locals,i,if,t,frame,top,n,top,else,n,local,n,top,1,n,top,0,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,n,stack,if,t,frame,long,t,frame,double,i,int,frame,index,start,frame,f,owner,position,n,local,n,stack,for,i,0,n,local,0,i,n,local,t,locals,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,for,i,0,i,stacks,length,i,t,stacks,i,frame,frame,index,t,if,t,frame,long,t,frame,double,i,end,frame
MethodWriter -> private void resizeInstructions();1366718246;Resizes and replaces the temporary instructions inserted by_{@link Label#resolve} for wide forward jumps, while keeping jump offsets_and instruction addresses consistent. This may require to resize other_existing instructions, or even to introduce new instructions: for_example, increasing the size of an instruction by 2 at the middle of a_method can increases the offset of an IFEQ instruction from 32766 to_32768, in which case IFEQ 32766 must be replaced with IFNEQ 8 GOTO_W_32765. This, in turn, may require to increase the size of another jump_instruction, and so on... All these operations are handled automatically_by this method._<p>_<i>This method must be called after all the method that is being built_has been visited</i>. In particular, the {@link Label Label} objects used_to construct the method are no longer valid after this method has been_called.;private void resizeInstructions() {_        byte[] b = code.data_ _        int u, v, label_ _        int i, j_ _        _        int[] allIndexes = new int[0]_ _        int[] allSizes = new int[0]_ _        boolean[] resize_ _        int newOffset_ __        resize = new boolean[code.length]___        _        int state = 3__        do {_            if (state == 3) {_                state = 2__            }_            u = 0__            while (u < b.length) {_                int opcode = b[u] & 0xFF_ _                int insert = 0_ __                switch (ClassWriter.TYPE[opcode]) {_                case ClassWriter.NOARG_INSN:_                case ClassWriter.IMPLVAR_INSN:_                    u += 1__                    break__                case ClassWriter.LABEL_INSN:_                    if (opcode > 201) {_                        _                        _                        _                        opcode = opcode < 218 ? opcode - 49 : opcode - 20__                        label = u + readUnsignedShort(b, u + 1)__                    } else {_                        label = u + readShort(b, u + 1)__                    }_                    newOffset = getNewOffset(allIndexes, allSizes, u, label)__                    if (newOffset < Short.MIN_VALUE_                            || newOffset > Short.MAX_VALUE) {_                        if (!resize[u]) {_                            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_                                _                                _                                _                                insert = 2__                            } else {_                                _                                _                                _                                _                                _                                _                                insert = 5__                            }_                            resize[u] = true__                        }_                    }_                    u += 3__                    break__                case ClassWriter.LABELW_INSN:_                    u += 5__                    break__                case ClassWriter.TABL_INSN:_                    if (state == 1) {_                        _                        _                        _                        _                        _                        _                        _                        newOffset = getNewOffset(allIndexes, allSizes, 0, u)__                        insert = -(newOffset & 3)__                    } else if (!resize[u]) {_                        _                        _                        _                        insert = u & 3__                        resize[u] = true__                    }_                    _                    u = u + 4 - (u & 3)__                    u += 4 * (readInt(b, u + 8) - readInt(b, u + 4) + 1) + 12__                    break__                case ClassWriter.LOOK_INSN:_                    if (state == 1) {_                        _                        newOffset = getNewOffset(allIndexes, allSizes, 0, u)__                        insert = -(newOffset & 3)__                    } else if (!resize[u]) {_                        _                        insert = u & 3__                        resize[u] = true__                    }_                    _                    u = u + 4 - (u & 3)__                    u += 8 * readInt(b, u + 4) + 8__                    break__                case ClassWriter.WIDE_INSN:_                    opcode = b[u + 1] & 0xFF__                    if (opcode == Opcodes.IINC) {_                        u += 6__                    } else {_                        u += 4__                    }_                    break__                case ClassWriter.VAR_INSN:_                case ClassWriter.SBYTE_INSN:_                case ClassWriter.LDC_INSN:_                    u += 2__                    break__                case ClassWriter.SHORT_INSN:_                case ClassWriter.LDCW_INSN:_                case ClassWriter.FIELDORMETH_INSN:_                case ClassWriter.TYPE_INSN:_                case ClassWriter.IINC_INSN:_                    u += 3__                    break__                case ClassWriter.ITFMETH_INSN:_                case ClassWriter.INDYMETH_INSN:_                    u += 5__                    break__                _                default:_                    u += 4__                    break__                }_                if (insert != 0) {_                    _                    _                    int[] newIndexes = new int[allIndexes.length + 1]__                    int[] newSizes = new int[allSizes.length + 1]__                    System.arraycopy(allIndexes, 0, newIndexes, 0,_                            allIndexes.length)__                    System.arraycopy(allSizes, 0, newSizes, 0, allSizes.length)__                    newIndexes[allIndexes.length] = u__                    newSizes[allSizes.length] = insert__                    allIndexes = newIndexes__                    allSizes = newSizes__                    if (insert > 0) {_                        state = 3__                    }_                }_            }_            if (state < 3) {_                --state__            }_        } while (state != 0)___        _        _        __        ByteVector newCode = new ByteVector(code.length)___        u = 0__        while (u < code.length) {_            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                newCode.putByte(opcode)__                u += 1__                break__            case ClassWriter.LABEL_INSN:_                if (opcode > 201) {_                    _                    _                    _                    opcode = opcode < 218 ? opcode - 49 : opcode - 20__                    label = u + readUnsignedShort(b, u + 1)__                } else {_                    label = u + readShort(b, u + 1)__                }_                newOffset = getNewOffset(allIndexes, allSizes, u, label)__                if (resize[u]) {_                    _                    _                    _                    _                    _                    if (opcode == Opcodes.GOTO) {_                        newCode.putByte(200)_ _                    } else if (opcode == Opcodes.JSR) {_                        newCode.putByte(201)_ _                    } else {_                        newCode.putByte(opcode <= 166 ? ((opcode + 1) ^ 1) - 1_                                : opcode ^ 1)__                        newCode.putShort(8)_ _                        newCode.putByte(200)_ _                        _                        newOffset -= 3__                    }_                    newCode.putInt(newOffset)__                } else {_                    newCode.putByte(opcode)__                    newCode.putShort(newOffset)__                }_                u += 3__                break__            case ClassWriter.LABELW_INSN:_                label = u + readInt(b, u + 1)__                newOffset = getNewOffset(allIndexes, allSizes, u, label)__                newCode.putByte(opcode)__                newCode.putInt(newOffset)__                u += 5__                break__            case ClassWriter.TABL_INSN:_                _                v = u__                u = u + 4 - (v & 3)__                _                newCode.putByte(Opcodes.TABLESWITCH)__                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4)__                label = v + readInt(b, u)__                u += 4__                newOffset = getNewOffset(allIndexes, allSizes, v, label)__                newCode.putInt(newOffset)__                j = readInt(b, u)__                u += 4__                newCode.putInt(j)__                j = readInt(b, u) - j + 1__                u += 4__                newCode.putInt(readInt(b, u - 4))__                for (_ j > 0_ --j) {_                    label = v + readInt(b, u)__                    u += 4__                    newOffset = getNewOffset(allIndexes, allSizes, v, label)__                    newCode.putInt(newOffset)__                }_                break__            case ClassWriter.LOOK_INSN:_                _                v = u__                u = u + 4 - (v & 3)__                _                newCode.putByte(Opcodes.LOOKUPSWITCH)__                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4)__                label = v + readInt(b, u)__                u += 4__                newOffset = getNewOffset(allIndexes, allSizes, v, label)__                newCode.putInt(newOffset)__                j = readInt(b, u)__                u += 4__                newCode.putInt(j)__                for (_ j > 0_ --j) {_                    newCode.putInt(readInt(b, u))__                    u += 4__                    label = v + readInt(b, u)__                    u += 4__                    newOffset = getNewOffset(allIndexes, allSizes, v, label)__                    newCode.putInt(newOffset)__                }_                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    newCode.putByteArray(b, u, 6)__                    u += 6__                } else {_                    newCode.putByteArray(b, u, 4)__                    u += 4__                }_                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                newCode.putByteArray(b, u, 2)__                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                newCode.putByteArray(b, u, 3)__                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                newCode.putByteArray(b, u, 5)__                u += 5__                break__            _            default:_                newCode.putByteArray(b, u, 4)__                u += 4__                break__            }_        }__        _        if (frameCount > 0) {_            if (compute == FRAMES) {_                frameCount = 0__                stackMap = null__                previousFrame = null__                frame = null__                Frame f = new Frame()__                f.owner = labels__                Type[] args = Type.getArgumentTypes(descriptor)__                f.initInputFrame(cw, access, args, maxLocals)__                visitFrame(f)__                Label l = labels__                while (l != null) {_                    _                    u = l.position - 3__                    if ((l.status & Label.STORE) != 0 || (u >= 0 && resize[u])) {_                        getNewOffset(allIndexes, allSizes, l)__                        _                        visitFrame(l.frame)__                    }_                    l = l.successor__                }_            } else {_                _                cw.invalidFrames = true__            }_        }_        _        Handler h = firstHandler__        while (h != null) {_            getNewOffset(allIndexes, allSizes, h.start)__            getNewOffset(allIndexes, allSizes, h.end)__            getNewOffset(allIndexes, allSizes, h.handler)__            h = h.next__        }_        _        _        for (i = 0_ i < 2_ ++i) {_            ByteVector bv = i == 0 ? localVar : localVarType__            if (bv != null) {_                b = bv.data__                u = 0__                while (u < bv.length) {_                    label = readUnsignedShort(b, u)__                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)__                    writeShort(b, u, newOffset)__                    label += readUnsignedShort(b, u + 2)__                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)_                            - newOffset__                    writeShort(b, u + 2, newOffset)__                    u += 10__                }_            }_        }_        if (lineNumber != null) {_            b = lineNumber.data__            u = 0__            while (u < lineNumber.length) {_                writeShort(_                        b,_                        u,_                        getNewOffset(allIndexes, allSizes, 0,_                                readUnsignedShort(b, u)))__                u += 4__            }_        }_        _        Attribute attr = cattrs__        while (attr != null) {_            Label[] labels = attr.getLabels()__            if (labels != null) {_                for (i = labels.length - 1_ i >= 0_ --i) {_                    getNewOffset(allIndexes, allSizes, labels[i])__                }_            }_            attr = attr.next__        }__        _        code = newCode__    };resizes,and,replaces,the,temporary,instructions,inserted,by,link,label,resolve,for,wide,forward,jumps,while,keeping,jump,offsets,and,instruction,addresses,consistent,this,may,require,to,resize,other,existing,instructions,or,even,to,introduce,new,instructions,for,example,increasing,the,size,of,an,instruction,by,2,at,the,middle,of,a,method,can,increases,the,offset,of,an,ifeq,instruction,from,32766,to,32768,in,which,case,ifeq,32766,must,be,replaced,with,ifneq,8,32765,this,in,turn,may,require,to,increase,the,size,of,another,jump,instruction,and,so,on,all,these,operations,are,handled,automatically,by,this,method,p,i,this,method,must,be,called,after,all,the,method,that,is,being,built,has,been,visited,i,in,particular,the,link,label,label,objects,used,to,construct,the,method,are,no,longer,valid,after,this,method,has,been,called;private,void,resize,instructions,byte,b,code,data,int,u,v,label,int,i,j,int,all,indexes,new,int,0,int,all,sizes,new,int,0,boolean,resize,int,new,offset,resize,new,boolean,code,length,int,state,3,do,if,state,3,state,2,u,0,while,u,b,length,int,opcode,b,u,0x,ff,int,insert,0,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,if,opcode,201,opcode,opcode,218,opcode,49,opcode,20,label,u,read,unsigned,short,b,u,1,else,label,u,read,short,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,if,new,offset,short,new,offset,short,if,resize,u,if,opcode,opcodes,goto,opcode,opcodes,jsr,insert,2,else,insert,5,resize,u,true,u,3,break,case,class,writer,u,5,break,case,class,writer,if,state,1,new,offset,get,new,offset,all,indexes,all,sizes,0,u,insert,new,offset,3,else,if,resize,u,insert,u,3,resize,u,true,u,u,4,u,3,u,4,read,int,b,u,8,read,int,b,u,4,1,12,break,case,class,writer,if,state,1,new,offset,get,new,offset,all,indexes,all,sizes,0,u,insert,new,offset,3,else,if,resize,u,insert,u,3,resize,u,true,u,u,4,u,3,u,8,read,int,b,u,4,8,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,if,insert,0,int,new,indexes,new,int,all,indexes,length,1,int,new,sizes,new,int,all,sizes,length,1,system,arraycopy,all,indexes,0,new,indexes,0,all,indexes,length,system,arraycopy,all,sizes,0,new,sizes,0,all,sizes,length,new,indexes,all,indexes,length,u,new,sizes,all,sizes,length,insert,all,indexes,new,indexes,all,sizes,new,sizes,if,insert,0,state,3,if,state,3,state,while,state,0,byte,vector,new,code,new,byte,vector,code,length,u,0,while,u,code,length,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,new,code,put,byte,opcode,u,1,break,case,class,writer,if,opcode,201,opcode,opcode,218,opcode,49,opcode,20,label,u,read,unsigned,short,b,u,1,else,label,u,read,short,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,if,resize,u,if,opcode,opcodes,goto,new,code,put,byte,200,else,if,opcode,opcodes,jsr,new,code,put,byte,201,else,new,code,put,byte,opcode,166,opcode,1,1,1,opcode,1,new,code,put,short,8,new,code,put,byte,200,new,offset,3,new,code,put,int,new,offset,else,new,code,put,byte,opcode,new,code,put,short,new,offset,u,3,break,case,class,writer,label,u,read,int,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,new,code,put,byte,opcode,new,code,put,int,new,offset,u,5,break,case,class,writer,v,u,u,u,4,v,3,new,code,put,byte,opcodes,tableswitch,new,code,put,byte,array,null,0,4,new,code,length,4,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,j,read,int,b,u,u,4,new,code,put,int,j,j,read,int,b,u,j,1,u,4,new,code,put,int,read,int,b,u,4,for,j,0,j,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,break,case,class,writer,v,u,u,u,4,v,3,new,code,put,byte,opcodes,lookupswitch,new,code,put,byte,array,null,0,4,new,code,length,4,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,j,read,int,b,u,u,4,new,code,put,int,j,for,j,0,j,new,code,put,int,read,int,b,u,u,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,new,code,put,byte,array,b,u,6,u,6,else,new,code,put,byte,array,b,u,4,u,4,break,case,class,writer,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,2,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,3,u,3,break,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,5,u,5,break,default,new,code,put,byte,array,b,u,4,u,4,break,if,frame,count,0,if,compute,frames,frame,count,0,stack,map,null,previous,frame,null,frame,null,frame,f,new,frame,f,owner,labels,type,args,type,get,argument,types,descriptor,f,init,input,frame,cw,access,args,max,locals,visit,frame,f,label,l,labels,while,l,null,u,l,position,3,if,l,status,label,store,0,u,0,resize,u,get,new,offset,all,indexes,all,sizes,l,visit,frame,l,frame,l,l,successor,else,cw,invalid,frames,true,handler,h,first,handler,while,h,null,get,new,offset,all,indexes,all,sizes,h,start,get,new,offset,all,indexes,all,sizes,h,end,get,new,offset,all,indexes,all,sizes,h,handler,h,h,next,for,i,0,i,2,i,byte,vector,bv,i,0,local,var,local,var,type,if,bv,null,b,bv,data,u,0,while,u,bv,length,label,read,unsigned,short,b,u,new,offset,get,new,offset,all,indexes,all,sizes,0,label,write,short,b,u,new,offset,label,read,unsigned,short,b,u,2,new,offset,get,new,offset,all,indexes,all,sizes,0,label,new,offset,write,short,b,u,2,new,offset,u,10,if,line,number,null,b,line,number,data,u,0,while,u,line,number,length,write,short,b,u,get,new,offset,all,indexes,all,sizes,0,read,unsigned,short,b,u,u,4,attribute,attr,cattrs,while,attr,null,label,labels,attr,get,labels,if,labels,null,for,i,labels,length,1,i,0,i,get,new,offset,all,indexes,all,sizes,labels,i,attr,attr,next,code,new,code
MethodWriter -> private void resizeInstructions();1395273982;Resizes and replaces the temporary instructions inserted by_{@link Label#resolve} for wide forward jumps, while keeping jump offsets_and instruction addresses consistent. This may require to resize other_existing instructions, or even to introduce new instructions: for_example, increasing the size of an instruction by 2 at the middle of a_method can increases the offset of an IFEQ instruction from 32766 to_32768, in which case IFEQ 32766 must be replaced with IFNEQ 8 GOTO_W_32765. This, in turn, may require to increase the size of another jump_instruction, and so on... All these operations are handled automatically_by this method._<p>_<i>This method must be called after all the method that is being built_has been visited</i>. In particular, the {@link Label Label} objects used_to construct the method are no longer valid after this method has been_called.;private void resizeInstructions() {_        byte[] b = code.data_ _        int u, v, label_ _        int i, j_ _        _        int[] allIndexes = new int[0]_ _        int[] allSizes = new int[0]_ _        boolean[] resize_ _        int newOffset_ __        resize = new boolean[code.length]___        _        int state = 3__        do {_            if (state == 3) {_                state = 2__            }_            u = 0__            while (u < b.length) {_                int opcode = b[u] & 0xFF_ _                int insert = 0_ __                switch (ClassWriter.TYPE[opcode]) {_                case ClassWriter.NOARG_INSN:_                case ClassWriter.IMPLVAR_INSN:_                    u += 1__                    break__                case ClassWriter.LABEL_INSN:_                    if (opcode > 201) {_                        _                        _                        _                        opcode = opcode < 218 ? opcode - 49 : opcode - 20__                        label = u + readUnsignedShort(b, u + 1)__                    } else {_                        label = u + readShort(b, u + 1)__                    }_                    newOffset = getNewOffset(allIndexes, allSizes, u, label)__                    if (newOffset < Short.MIN_VALUE_                            || newOffset > Short.MAX_VALUE) {_                        if (!resize[u]) {_                            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_                                _                                _                                _                                insert = 2__                            } else {_                                _                                _                                _                                _                                _                                _                                insert = 5__                            }_                            resize[u] = true__                        }_                    }_                    u += 3__                    break__                case ClassWriter.LABELW_INSN:_                    u += 5__                    break__                case ClassWriter.TABL_INSN:_                    if (state == 1) {_                        _                        _                        _                        _                        _                        _                        _                        newOffset = getNewOffset(allIndexes, allSizes, 0, u)__                        insert = -(newOffset & 3)__                    } else if (!resize[u]) {_                        _                        _                        _                        insert = u & 3__                        resize[u] = true__                    }_                    _                    u = u + 4 - (u & 3)__                    u += 4 * (readInt(b, u + 8) - readInt(b, u + 4) + 1) + 12__                    break__                case ClassWriter.LOOK_INSN:_                    if (state == 1) {_                        _                        newOffset = getNewOffset(allIndexes, allSizes, 0, u)__                        insert = -(newOffset & 3)__                    } else if (!resize[u]) {_                        _                        insert = u & 3__                        resize[u] = true__                    }_                    _                    u = u + 4 - (u & 3)__                    u += 8 * readInt(b, u + 4) + 8__                    break__                case ClassWriter.WIDE_INSN:_                    opcode = b[u + 1] & 0xFF__                    if (opcode == Opcodes.IINC) {_                        u += 6__                    } else {_                        u += 4__                    }_                    break__                case ClassWriter.VAR_INSN:_                case ClassWriter.SBYTE_INSN:_                case ClassWriter.LDC_INSN:_                    u += 2__                    break__                case ClassWriter.SHORT_INSN:_                case ClassWriter.LDCW_INSN:_                case ClassWriter.FIELDORMETH_INSN:_                case ClassWriter.TYPE_INSN:_                case ClassWriter.IINC_INSN:_                    u += 3__                    break__                case ClassWriter.ITFMETH_INSN:_                case ClassWriter.INDYMETH_INSN:_                    u += 5__                    break__                _                default:_                    u += 4__                    break__                }_                if (insert != 0) {_                    _                    _                    int[] newIndexes = new int[allIndexes.length + 1]__                    int[] newSizes = new int[allSizes.length + 1]__                    System.arraycopy(allIndexes, 0, newIndexes, 0,_                            allIndexes.length)__                    System.arraycopy(allSizes, 0, newSizes, 0, allSizes.length)__                    newIndexes[allIndexes.length] = u__                    newSizes[allSizes.length] = insert__                    allIndexes = newIndexes__                    allSizes = newSizes__                    if (insert > 0) {_                        state = 3__                    }_                }_            }_            if (state < 3) {_                --state__            }_        } while (state != 0)___        _        _        __        ByteVector newCode = new ByteVector(code.length)___        u = 0__        while (u < code.length) {_            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                newCode.putByte(opcode)__                u += 1__                break__            case ClassWriter.LABEL_INSN:_                if (opcode > 201) {_                    _                    _                    _                    opcode = opcode < 218 ? opcode - 49 : opcode - 20__                    label = u + readUnsignedShort(b, u + 1)__                } else {_                    label = u + readShort(b, u + 1)__                }_                newOffset = getNewOffset(allIndexes, allSizes, u, label)__                if (resize[u]) {_                    _                    _                    _                    _                    _                    if (opcode == Opcodes.GOTO) {_                        newCode.putByte(200)_ _                    } else if (opcode == Opcodes.JSR) {_                        newCode.putByte(201)_ _                    } else {_                        newCode.putByte(opcode <= 166 ? ((opcode + 1) ^ 1) - 1_                                : opcode ^ 1)__                        newCode.putShort(8)_ _                        newCode.putByte(200)_ _                        _                        newOffset -= 3__                    }_                    newCode.putInt(newOffset)__                } else {_                    newCode.putByte(opcode)__                    newCode.putShort(newOffset)__                }_                u += 3__                break__            case ClassWriter.LABELW_INSN:_                label = u + readInt(b, u + 1)__                newOffset = getNewOffset(allIndexes, allSizes, u, label)__                newCode.putByte(opcode)__                newCode.putInt(newOffset)__                u += 5__                break__            case ClassWriter.TABL_INSN:_                _                v = u__                u = u + 4 - (v & 3)__                _                newCode.putByte(Opcodes.TABLESWITCH)__                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4)__                label = v + readInt(b, u)__                u += 4__                newOffset = getNewOffset(allIndexes, allSizes, v, label)__                newCode.putInt(newOffset)__                j = readInt(b, u)__                u += 4__                newCode.putInt(j)__                j = readInt(b, u) - j + 1__                u += 4__                newCode.putInt(readInt(b, u - 4))__                for (_ j > 0_ --j) {_                    label = v + readInt(b, u)__                    u += 4__                    newOffset = getNewOffset(allIndexes, allSizes, v, label)__                    newCode.putInt(newOffset)__                }_                break__            case ClassWriter.LOOK_INSN:_                _                v = u__                u = u + 4 - (v & 3)__                _                newCode.putByte(Opcodes.LOOKUPSWITCH)__                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4)__                label = v + readInt(b, u)__                u += 4__                newOffset = getNewOffset(allIndexes, allSizes, v, label)__                newCode.putInt(newOffset)__                j = readInt(b, u)__                u += 4__                newCode.putInt(j)__                for (_ j > 0_ --j) {_                    newCode.putInt(readInt(b, u))__                    u += 4__                    label = v + readInt(b, u)__                    u += 4__                    newOffset = getNewOffset(allIndexes, allSizes, v, label)__                    newCode.putInt(newOffset)__                }_                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    newCode.putByteArray(b, u, 6)__                    u += 6__                } else {_                    newCode.putByteArray(b, u, 4)__                    u += 4__                }_                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                newCode.putByteArray(b, u, 2)__                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                newCode.putByteArray(b, u, 3)__                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                newCode.putByteArray(b, u, 5)__                u += 5__                break__            _            default:_                newCode.putByteArray(b, u, 4)__                u += 4__                break__            }_        }__        _        if (frameCount > 0) {_            if (compute == FRAMES) {_                frameCount = 0__                stackMap = null__                previousFrame = null__                frame = null__                Frame f = new Frame()__                f.owner = labels__                Type[] args = Type.getArgumentTypes(descriptor)__                f.initInputFrame(cw, access, args, maxLocals)__                visitFrame(f)__                Label l = labels__                while (l != null) {_                    _                    u = l.position - 3__                    if ((l.status & Label.STORE) != 0 || (u >= 0 && resize[u])) {_                        getNewOffset(allIndexes, allSizes, l)__                        _                        visitFrame(l.frame)__                    }_                    l = l.successor__                }_            } else {_                _                cw.invalidFrames = true__            }_        }_        _        Handler h = firstHandler__        while (h != null) {_            getNewOffset(allIndexes, allSizes, h.start)__            getNewOffset(allIndexes, allSizes, h.end)__            getNewOffset(allIndexes, allSizes, h.handler)__            h = h.next__        }_        _        _        for (i = 0_ i < 2_ ++i) {_            ByteVector bv = i == 0 ? localVar : localVarType__            if (bv != null) {_                b = bv.data__                u = 0__                while (u < bv.length) {_                    label = readUnsignedShort(b, u)__                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)__                    writeShort(b, u, newOffset)__                    label += readUnsignedShort(b, u + 2)__                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)_                            - newOffset__                    writeShort(b, u + 2, newOffset)__                    u += 10__                }_            }_        }_        if (lineNumber != null) {_            b = lineNumber.data__            u = 0__            while (u < lineNumber.length) {_                writeShort(_                        b,_                        u,_                        getNewOffset(allIndexes, allSizes, 0,_                                readUnsignedShort(b, u)))__                u += 4__            }_        }_        _        Attribute attr = cattrs__        while (attr != null) {_            Label[] labels = attr.getLabels()__            if (labels != null) {_                for (i = labels.length - 1_ i >= 0_ --i) {_                    getNewOffset(allIndexes, allSizes, labels[i])__                }_            }_            attr = attr.next__        }__        _        code = newCode__    };resizes,and,replaces,the,temporary,instructions,inserted,by,link,label,resolve,for,wide,forward,jumps,while,keeping,jump,offsets,and,instruction,addresses,consistent,this,may,require,to,resize,other,existing,instructions,or,even,to,introduce,new,instructions,for,example,increasing,the,size,of,an,instruction,by,2,at,the,middle,of,a,method,can,increases,the,offset,of,an,ifeq,instruction,from,32766,to,32768,in,which,case,ifeq,32766,must,be,replaced,with,ifneq,8,32765,this,in,turn,may,require,to,increase,the,size,of,another,jump,instruction,and,so,on,all,these,operations,are,handled,automatically,by,this,method,p,i,this,method,must,be,called,after,all,the,method,that,is,being,built,has,been,visited,i,in,particular,the,link,label,label,objects,used,to,construct,the,method,are,no,longer,valid,after,this,method,has,been,called;private,void,resize,instructions,byte,b,code,data,int,u,v,label,int,i,j,int,all,indexes,new,int,0,int,all,sizes,new,int,0,boolean,resize,int,new,offset,resize,new,boolean,code,length,int,state,3,do,if,state,3,state,2,u,0,while,u,b,length,int,opcode,b,u,0x,ff,int,insert,0,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,if,opcode,201,opcode,opcode,218,opcode,49,opcode,20,label,u,read,unsigned,short,b,u,1,else,label,u,read,short,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,if,new,offset,short,new,offset,short,if,resize,u,if,opcode,opcodes,goto,opcode,opcodes,jsr,insert,2,else,insert,5,resize,u,true,u,3,break,case,class,writer,u,5,break,case,class,writer,if,state,1,new,offset,get,new,offset,all,indexes,all,sizes,0,u,insert,new,offset,3,else,if,resize,u,insert,u,3,resize,u,true,u,u,4,u,3,u,4,read,int,b,u,8,read,int,b,u,4,1,12,break,case,class,writer,if,state,1,new,offset,get,new,offset,all,indexes,all,sizes,0,u,insert,new,offset,3,else,if,resize,u,insert,u,3,resize,u,true,u,u,4,u,3,u,8,read,int,b,u,4,8,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,if,insert,0,int,new,indexes,new,int,all,indexes,length,1,int,new,sizes,new,int,all,sizes,length,1,system,arraycopy,all,indexes,0,new,indexes,0,all,indexes,length,system,arraycopy,all,sizes,0,new,sizes,0,all,sizes,length,new,indexes,all,indexes,length,u,new,sizes,all,sizes,length,insert,all,indexes,new,indexes,all,sizes,new,sizes,if,insert,0,state,3,if,state,3,state,while,state,0,byte,vector,new,code,new,byte,vector,code,length,u,0,while,u,code,length,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,new,code,put,byte,opcode,u,1,break,case,class,writer,if,opcode,201,opcode,opcode,218,opcode,49,opcode,20,label,u,read,unsigned,short,b,u,1,else,label,u,read,short,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,if,resize,u,if,opcode,opcodes,goto,new,code,put,byte,200,else,if,opcode,opcodes,jsr,new,code,put,byte,201,else,new,code,put,byte,opcode,166,opcode,1,1,1,opcode,1,new,code,put,short,8,new,code,put,byte,200,new,offset,3,new,code,put,int,new,offset,else,new,code,put,byte,opcode,new,code,put,short,new,offset,u,3,break,case,class,writer,label,u,read,int,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,new,code,put,byte,opcode,new,code,put,int,new,offset,u,5,break,case,class,writer,v,u,u,u,4,v,3,new,code,put,byte,opcodes,tableswitch,new,code,put,byte,array,null,0,4,new,code,length,4,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,j,read,int,b,u,u,4,new,code,put,int,j,j,read,int,b,u,j,1,u,4,new,code,put,int,read,int,b,u,4,for,j,0,j,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,break,case,class,writer,v,u,u,u,4,v,3,new,code,put,byte,opcodes,lookupswitch,new,code,put,byte,array,null,0,4,new,code,length,4,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,j,read,int,b,u,u,4,new,code,put,int,j,for,j,0,j,new,code,put,int,read,int,b,u,u,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,new,code,put,byte,array,b,u,6,u,6,else,new,code,put,byte,array,b,u,4,u,4,break,case,class,writer,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,2,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,3,u,3,break,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,5,u,5,break,default,new,code,put,byte,array,b,u,4,u,4,break,if,frame,count,0,if,compute,frames,frame,count,0,stack,map,null,previous,frame,null,frame,null,frame,f,new,frame,f,owner,labels,type,args,type,get,argument,types,descriptor,f,init,input,frame,cw,access,args,max,locals,visit,frame,f,label,l,labels,while,l,null,u,l,position,3,if,l,status,label,store,0,u,0,resize,u,get,new,offset,all,indexes,all,sizes,l,visit,frame,l,frame,l,l,successor,else,cw,invalid,frames,true,handler,h,first,handler,while,h,null,get,new,offset,all,indexes,all,sizes,h,start,get,new,offset,all,indexes,all,sizes,h,end,get,new,offset,all,indexes,all,sizes,h,handler,h,h,next,for,i,0,i,2,i,byte,vector,bv,i,0,local,var,local,var,type,if,bv,null,b,bv,data,u,0,while,u,bv,length,label,read,unsigned,short,b,u,new,offset,get,new,offset,all,indexes,all,sizes,0,label,write,short,b,u,new,offset,label,read,unsigned,short,b,u,2,new,offset,get,new,offset,all,indexes,all,sizes,0,label,new,offset,write,short,b,u,2,new,offset,u,10,if,line,number,null,b,line,number,data,u,0,while,u,line,number,length,write,short,b,u,get,new,offset,all,indexes,all,sizes,0,read,unsigned,short,b,u,u,4,attribute,attr,cattrs,while,attr,null,label,labels,attr,get,labels,if,labels,null,for,i,labels,length,1,i,0,i,get,new,offset,all,indexes,all,sizes,labels,i,attr,attr,next,code,new,code
MethodWriter -> private void resizeInstructions();1395744691;Resizes and replaces the temporary instructions inserted by_{@link Label#resolve} for wide forward jumps, while keeping jump offsets_and instruction addresses consistent. This may require to resize other_existing instructions, or even to introduce new instructions: for_example, increasing the size of an instruction by 2 at the middle of a_method can increases the offset of an IFEQ instruction from 32766 to_32768, in which case IFEQ 32766 must be replaced with IFNEQ 8 GOTO_W_32765. This, in turn, may require to increase the size of another jump_instruction, and so on... All these operations are handled automatically_by this method._<p>_<i>This method must be called after all the method that is being built_has been visited</i>. In particular, the {@link Label Label} objects used_to construct the method are no longer valid after this method has been_called.;private void resizeInstructions() {_        byte[] b = code.data_ _        int u, v, label_ _        int i, j_ _        _        int[] allIndexes = new int[0]_ _        int[] allSizes = new int[0]_ _        boolean[] resize_ _        int newOffset_ __        resize = new boolean[code.length]___        _        int state = 3__        do {_            if (state == 3) {_                state = 2__            }_            u = 0__            while (u < b.length) {_                int opcode = b[u] & 0xFF_ _                int insert = 0_ __                switch (ClassWriter.TYPE[opcode]) {_                case ClassWriter.NOARG_INSN:_                case ClassWriter.IMPLVAR_INSN:_                    u += 1__                    break__                case ClassWriter.LABEL_INSN:_                    if (opcode > 201) {_                        _                        _                        _                        opcode = opcode < 218 ? opcode - 49 : opcode - 20__                        label = u + readUnsignedShort(b, u + 1)__                    } else {_                        label = u + readShort(b, u + 1)__                    }_                    newOffset = getNewOffset(allIndexes, allSizes, u, label)__                    if (newOffset < Short.MIN_VALUE_                            || newOffset > Short.MAX_VALUE) {_                        if (!resize[u]) {_                            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_                                _                                _                                _                                insert = 2__                            } else {_                                _                                _                                _                                _                                _                                _                                insert = 5__                            }_                            resize[u] = true__                        }_                    }_                    u += 3__                    break__                case ClassWriter.LABELW_INSN:_                    u += 5__                    break__                case ClassWriter.TABL_INSN:_                    if (state == 1) {_                        _                        _                        _                        _                        _                        _                        _                        newOffset = getNewOffset(allIndexes, allSizes, 0, u)__                        insert = -(newOffset & 3)__                    } else if (!resize[u]) {_                        _                        _                        _                        insert = u & 3__                        resize[u] = true__                    }_                    _                    u = u + 4 - (u & 3)__                    u += 4 * (readInt(b, u + 8) - readInt(b, u + 4) + 1) + 12__                    break__                case ClassWriter.LOOK_INSN:_                    if (state == 1) {_                        _                        newOffset = getNewOffset(allIndexes, allSizes, 0, u)__                        insert = -(newOffset & 3)__                    } else if (!resize[u]) {_                        _                        insert = u & 3__                        resize[u] = true__                    }_                    _                    u = u + 4 - (u & 3)__                    u += 8 * readInt(b, u + 4) + 8__                    break__                case ClassWriter.WIDE_INSN:_                    opcode = b[u + 1] & 0xFF__                    if (opcode == Opcodes.IINC) {_                        u += 6__                    } else {_                        u += 4__                    }_                    break__                case ClassWriter.VAR_INSN:_                case ClassWriter.SBYTE_INSN:_                case ClassWriter.LDC_INSN:_                    u += 2__                    break__                case ClassWriter.SHORT_INSN:_                case ClassWriter.LDCW_INSN:_                case ClassWriter.FIELDORMETH_INSN:_                case ClassWriter.TYPE_INSN:_                case ClassWriter.IINC_INSN:_                    u += 3__                    break__                case ClassWriter.ITFMETH_INSN:_                case ClassWriter.INDYMETH_INSN:_                    u += 5__                    break__                _                default:_                    u += 4__                    break__                }_                if (insert != 0) {_                    _                    _                    int[] newIndexes = new int[allIndexes.length + 1]__                    int[] newSizes = new int[allSizes.length + 1]__                    System.arraycopy(allIndexes, 0, newIndexes, 0,_                            allIndexes.length)__                    System.arraycopy(allSizes, 0, newSizes, 0, allSizes.length)__                    newIndexes[allIndexes.length] = u__                    newSizes[allSizes.length] = insert__                    allIndexes = newIndexes__                    allSizes = newSizes__                    if (insert > 0) {_                        state = 3__                    }_                }_            }_            if (state < 3) {_                --state__            }_        } while (state != 0)___        _        _        __        ByteVector newCode = new ByteVector(code.length)___        u = 0__        while (u < code.length) {_            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                newCode.putByte(opcode)__                u += 1__                break__            case ClassWriter.LABEL_INSN:_                if (opcode > 201) {_                    _                    _                    _                    opcode = opcode < 218 ? opcode - 49 : opcode - 20__                    label = u + readUnsignedShort(b, u + 1)__                } else {_                    label = u + readShort(b, u + 1)__                }_                newOffset = getNewOffset(allIndexes, allSizes, u, label)__                if (resize[u]) {_                    _                    _                    _                    _                    _                    if (opcode == Opcodes.GOTO) {_                        newCode.putByte(200)_ _                    } else if (opcode == Opcodes.JSR) {_                        newCode.putByte(201)_ _                    } else {_                        newCode.putByte(opcode <= 166 ? ((opcode + 1) ^ 1) - 1_                                : opcode ^ 1)__                        newCode.putShort(8)_ _                        newCode.putByte(200)_ _                        _                        newOffset -= 3__                    }_                    newCode.putInt(newOffset)__                } else {_                    newCode.putByte(opcode)__                    newCode.putShort(newOffset)__                }_                u += 3__                break__            case ClassWriter.LABELW_INSN:_                label = u + readInt(b, u + 1)__                newOffset = getNewOffset(allIndexes, allSizes, u, label)__                newCode.putByte(opcode)__                newCode.putInt(newOffset)__                u += 5__                break__            case ClassWriter.TABL_INSN:_                _                v = u__                u = u + 4 - (v & 3)__                _                newCode.putByte(Opcodes.TABLESWITCH)__                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4)__                label = v + readInt(b, u)__                u += 4__                newOffset = getNewOffset(allIndexes, allSizes, v, label)__                newCode.putInt(newOffset)__                j = readInt(b, u)__                u += 4__                newCode.putInt(j)__                j = readInt(b, u) - j + 1__                u += 4__                newCode.putInt(readInt(b, u - 4))__                for (_ j > 0_ --j) {_                    label = v + readInt(b, u)__                    u += 4__                    newOffset = getNewOffset(allIndexes, allSizes, v, label)__                    newCode.putInt(newOffset)__                }_                break__            case ClassWriter.LOOK_INSN:_                _                v = u__                u = u + 4 - (v & 3)__                _                newCode.putByte(Opcodes.LOOKUPSWITCH)__                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4)__                label = v + readInt(b, u)__                u += 4__                newOffset = getNewOffset(allIndexes, allSizes, v, label)__                newCode.putInt(newOffset)__                j = readInt(b, u)__                u += 4__                newCode.putInt(j)__                for (_ j > 0_ --j) {_                    newCode.putInt(readInt(b, u))__                    u += 4__                    label = v + readInt(b, u)__                    u += 4__                    newOffset = getNewOffset(allIndexes, allSizes, v, label)__                    newCode.putInt(newOffset)__                }_                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    newCode.putByteArray(b, u, 6)__                    u += 6__                } else {_                    newCode.putByteArray(b, u, 4)__                    u += 4__                }_                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                newCode.putByteArray(b, u, 2)__                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                newCode.putByteArray(b, u, 3)__                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                newCode.putByteArray(b, u, 5)__                u += 5__                break__            _            default:_                newCode.putByteArray(b, u, 4)__                u += 4__                break__            }_        }__        _        if (compute == FRAMES) {_            Label l = labels__            while (l != null) {_                _                u = l.position - 3__                if (u >= 0 && resize[u]) {_                    l.status |= Label.TARGET__                }_                getNewOffset(allIndexes, allSizes, l)__                l = l.successor__            }_            _            for (i = 0_ i < cw.typeTable.length_ ++i) {_                Item item = cw.typeTable[i]__                if (item != null && item.type == ClassWriter.TYPE_UNINIT) {_                    item.intVal = getNewOffset(allIndexes, allSizes, 0,_                            item.intVal)__                }_            }_            _            _        } else if (frameCount > 0) {_            _            cw.invalidFrames = true__        }_        _        Handler h = firstHandler__        while (h != null) {_            getNewOffset(allIndexes, allSizes, h.start)__            getNewOffset(allIndexes, allSizes, h.end)__            getNewOffset(allIndexes, allSizes, h.handler)__            h = h.next__        }_        _        _        for (i = 0_ i < 2_ ++i) {_            ByteVector bv = i == 0 ? localVar : localVarType__            if (bv != null) {_                b = bv.data__                u = 0__                while (u < bv.length) {_                    label = readUnsignedShort(b, u)__                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)__                    writeShort(b, u, newOffset)__                    label += readUnsignedShort(b, u + 2)__                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)_                            - newOffset__                    writeShort(b, u + 2, newOffset)__                    u += 10__                }_            }_        }_        if (lineNumber != null) {_            b = lineNumber.data__            u = 0__            while (u < lineNumber.length) {_                writeShort(_                        b,_                        u,_                        getNewOffset(allIndexes, allSizes, 0,_                                readUnsignedShort(b, u)))__                u += 4__            }_        }_        _        Attribute attr = cattrs__        while (attr != null) {_            Label[] labels = attr.getLabels()__            if (labels != null) {_                for (i = labels.length - 1_ i >= 0_ --i) {_                    getNewOffset(allIndexes, allSizes, labels[i])__                }_            }_            attr = attr.next__        }__        _        code = newCode__    };resizes,and,replaces,the,temporary,instructions,inserted,by,link,label,resolve,for,wide,forward,jumps,while,keeping,jump,offsets,and,instruction,addresses,consistent,this,may,require,to,resize,other,existing,instructions,or,even,to,introduce,new,instructions,for,example,increasing,the,size,of,an,instruction,by,2,at,the,middle,of,a,method,can,increases,the,offset,of,an,ifeq,instruction,from,32766,to,32768,in,which,case,ifeq,32766,must,be,replaced,with,ifneq,8,32765,this,in,turn,may,require,to,increase,the,size,of,another,jump,instruction,and,so,on,all,these,operations,are,handled,automatically,by,this,method,p,i,this,method,must,be,called,after,all,the,method,that,is,being,built,has,been,visited,i,in,particular,the,link,label,label,objects,used,to,construct,the,method,are,no,longer,valid,after,this,method,has,been,called;private,void,resize,instructions,byte,b,code,data,int,u,v,label,int,i,j,int,all,indexes,new,int,0,int,all,sizes,new,int,0,boolean,resize,int,new,offset,resize,new,boolean,code,length,int,state,3,do,if,state,3,state,2,u,0,while,u,b,length,int,opcode,b,u,0x,ff,int,insert,0,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,if,opcode,201,opcode,opcode,218,opcode,49,opcode,20,label,u,read,unsigned,short,b,u,1,else,label,u,read,short,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,if,new,offset,short,new,offset,short,if,resize,u,if,opcode,opcodes,goto,opcode,opcodes,jsr,insert,2,else,insert,5,resize,u,true,u,3,break,case,class,writer,u,5,break,case,class,writer,if,state,1,new,offset,get,new,offset,all,indexes,all,sizes,0,u,insert,new,offset,3,else,if,resize,u,insert,u,3,resize,u,true,u,u,4,u,3,u,4,read,int,b,u,8,read,int,b,u,4,1,12,break,case,class,writer,if,state,1,new,offset,get,new,offset,all,indexes,all,sizes,0,u,insert,new,offset,3,else,if,resize,u,insert,u,3,resize,u,true,u,u,4,u,3,u,8,read,int,b,u,4,8,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,if,insert,0,int,new,indexes,new,int,all,indexes,length,1,int,new,sizes,new,int,all,sizes,length,1,system,arraycopy,all,indexes,0,new,indexes,0,all,indexes,length,system,arraycopy,all,sizes,0,new,sizes,0,all,sizes,length,new,indexes,all,indexes,length,u,new,sizes,all,sizes,length,insert,all,indexes,new,indexes,all,sizes,new,sizes,if,insert,0,state,3,if,state,3,state,while,state,0,byte,vector,new,code,new,byte,vector,code,length,u,0,while,u,code,length,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,new,code,put,byte,opcode,u,1,break,case,class,writer,if,opcode,201,opcode,opcode,218,opcode,49,opcode,20,label,u,read,unsigned,short,b,u,1,else,label,u,read,short,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,if,resize,u,if,opcode,opcodes,goto,new,code,put,byte,200,else,if,opcode,opcodes,jsr,new,code,put,byte,201,else,new,code,put,byte,opcode,166,opcode,1,1,1,opcode,1,new,code,put,short,8,new,code,put,byte,200,new,offset,3,new,code,put,int,new,offset,else,new,code,put,byte,opcode,new,code,put,short,new,offset,u,3,break,case,class,writer,label,u,read,int,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,new,code,put,byte,opcode,new,code,put,int,new,offset,u,5,break,case,class,writer,v,u,u,u,4,v,3,new,code,put,byte,opcodes,tableswitch,new,code,put,byte,array,null,0,4,new,code,length,4,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,j,read,int,b,u,u,4,new,code,put,int,j,j,read,int,b,u,j,1,u,4,new,code,put,int,read,int,b,u,4,for,j,0,j,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,break,case,class,writer,v,u,u,u,4,v,3,new,code,put,byte,opcodes,lookupswitch,new,code,put,byte,array,null,0,4,new,code,length,4,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,j,read,int,b,u,u,4,new,code,put,int,j,for,j,0,j,new,code,put,int,read,int,b,u,u,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,new,code,put,byte,array,b,u,6,u,6,else,new,code,put,byte,array,b,u,4,u,4,break,case,class,writer,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,2,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,3,u,3,break,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,5,u,5,break,default,new,code,put,byte,array,b,u,4,u,4,break,if,compute,frames,label,l,labels,while,l,null,u,l,position,3,if,u,0,resize,u,l,status,label,target,get,new,offset,all,indexes,all,sizes,l,l,l,successor,for,i,0,i,cw,type,table,length,i,item,item,cw,type,table,i,if,item,null,item,type,class,writer,item,int,val,get,new,offset,all,indexes,all,sizes,0,item,int,val,else,if,frame,count,0,cw,invalid,frames,true,handler,h,first,handler,while,h,null,get,new,offset,all,indexes,all,sizes,h,start,get,new,offset,all,indexes,all,sizes,h,end,get,new,offset,all,indexes,all,sizes,h,handler,h,h,next,for,i,0,i,2,i,byte,vector,bv,i,0,local,var,local,var,type,if,bv,null,b,bv,data,u,0,while,u,bv,length,label,read,unsigned,short,b,u,new,offset,get,new,offset,all,indexes,all,sizes,0,label,write,short,b,u,new,offset,label,read,unsigned,short,b,u,2,new,offset,get,new,offset,all,indexes,all,sizes,0,label,new,offset,write,short,b,u,2,new,offset,u,10,if,line,number,null,b,line,number,data,u,0,while,u,line,number,length,write,short,b,u,get,new,offset,all,indexes,all,sizes,0,read,unsigned,short,b,u,u,4,attribute,attr,cattrs,while,attr,null,label,labels,attr,get,labels,if,labels,null,for,i,labels,length,1,i,0,i,get,new,offset,all,indexes,all,sizes,labels,i,attr,attr,next,code,new,code
MethodWriter -> private void resizeInstructions();1400531367;Resizes and replaces the temporary instructions inserted by_{@link Label#resolve} for wide forward jumps, while keeping jump offsets_and instruction addresses consistent. This may require to resize other_existing instructions, or even to introduce new instructions: for_example, increasing the size of an instruction by 2 at the middle of a_method can increases the offset of an IFEQ instruction from 32766 to_32768, in which case IFEQ 32766 must be replaced with IFNEQ 8 GOTO_W_32765. This, in turn, may require to increase the size of another jump_instruction, and so on... All these operations are handled automatically_by this method._<p>_<i>This method must be called after all the method that is being built_has been visited</i>. In particular, the {@link Label Label} objects used_to construct the method are no longer valid after this method has been_called.;private void resizeInstructions() {_        byte[] b = code.data_ _        int u, v, label_ _        int i, j_ _        _        int[] allIndexes = new int[0]_ _        int[] allSizes = new int[0]_ _        boolean[] resize_ _        int newOffset_ __        resize = new boolean[code.length]___        _        int state = 3__        do {_            if (state == 3) {_                state = 2__            }_            u = 0__            while (u < b.length) {_                int opcode = b[u] & 0xFF_ _                int insert = 0_ __                switch (ClassWriter.TYPE[opcode]) {_                case ClassWriter.NOARG_INSN:_                case ClassWriter.IMPLVAR_INSN:_                    u += 1__                    break__                case ClassWriter.LABEL_INSN:_                    if (opcode > 201) {_                        _                        _                        _                        opcode = opcode < 218 ? opcode - 49 : opcode - 20__                        label = u + readUnsignedShort(b, u + 1)__                    } else {_                        label = u + readShort(b, u + 1)__                    }_                    newOffset = getNewOffset(allIndexes, allSizes, u, label)__                    if (newOffset < Short.MIN_VALUE_                            || newOffset > Short.MAX_VALUE) {_                        if (!resize[u]) {_                            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_                                _                                _                                _                                insert = 2__                            } else {_                                _                                _                                _                                _                                _                                _                                insert = 5__                            }_                            resize[u] = true__                        }_                    }_                    u += 3__                    break__                case ClassWriter.LABELW_INSN:_                    u += 5__                    break__                case ClassWriter.TABL_INSN:_                    if (state == 1) {_                        _                        _                        _                        _                        _                        _                        _                        newOffset = getNewOffset(allIndexes, allSizes, 0, u)__                        insert = -(newOffset & 3)__                    } else if (!resize[u]) {_                        _                        _                        _                        insert = u & 3__                        resize[u] = true__                    }_                    _                    u = u + 4 - (u & 3)__                    u += 4 * (readInt(b, u + 8) - readInt(b, u + 4) + 1) + 12__                    break__                case ClassWriter.LOOK_INSN:_                    if (state == 1) {_                        _                        newOffset = getNewOffset(allIndexes, allSizes, 0, u)__                        insert = -(newOffset & 3)__                    } else if (!resize[u]) {_                        _                        insert = u & 3__                        resize[u] = true__                    }_                    _                    u = u + 4 - (u & 3)__                    u += 8 * readInt(b, u + 4) + 8__                    break__                case ClassWriter.WIDE_INSN:_                    opcode = b[u + 1] & 0xFF__                    if (opcode == Opcodes.IINC) {_                        u += 6__                    } else {_                        u += 4__                    }_                    break__                case ClassWriter.VAR_INSN:_                case ClassWriter.SBYTE_INSN:_                case ClassWriter.LDC_INSN:_                    u += 2__                    break__                case ClassWriter.SHORT_INSN:_                case ClassWriter.LDCW_INSN:_                case ClassWriter.FIELDORMETH_INSN:_                case ClassWriter.TYPE_INSN:_                case ClassWriter.IINC_INSN:_                    u += 3__                    break__                case ClassWriter.ITFMETH_INSN:_                case ClassWriter.INDYMETH_INSN:_                    u += 5__                    break__                _                default:_                    u += 4__                    break__                }_                if (insert != 0) {_                    _                    _                    int[] newIndexes = new int[allIndexes.length + 1]__                    int[] newSizes = new int[allSizes.length + 1]__                    System.arraycopy(allIndexes, 0, newIndexes, 0,_                            allIndexes.length)__                    System.arraycopy(allSizes, 0, newSizes, 0, allSizes.length)__                    newIndexes[allIndexes.length] = u__                    newSizes[allSizes.length] = insert__                    allIndexes = newIndexes__                    allSizes = newSizes__                    if (insert > 0) {_                        state = 3__                    }_                }_            }_            if (state < 3) {_                --state__            }_        } while (state != 0)___        _        _        __        ByteVector newCode = new ByteVector(code.length)___        u = 0__        while (u < code.length) {_            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                newCode.putByte(opcode)__                u += 1__                break__            case ClassWriter.LABEL_INSN:_                if (opcode > 201) {_                    _                    _                    _                    opcode = opcode < 218 ? opcode - 49 : opcode - 20__                    label = u + readUnsignedShort(b, u + 1)__                } else {_                    label = u + readShort(b, u + 1)__                }_                newOffset = getNewOffset(allIndexes, allSizes, u, label)__                if (resize[u]) {_                    _                    _                    _                    _                    _                    if (opcode == Opcodes.GOTO) {_                        newCode.putByte(200)_ _                    } else if (opcode == Opcodes.JSR) {_                        newCode.putByte(201)_ _                    } else {_                        newCode.putByte(opcode <= 166 ? ((opcode + 1) ^ 1) - 1_                                : opcode ^ 1)__                        newCode.putShort(8)_ _                        newCode.putByte(200)_ _                        _                        newOffset -= 3__                    }_                    newCode.putInt(newOffset)__                } else {_                    newCode.putByte(opcode)__                    newCode.putShort(newOffset)__                }_                u += 3__                break__            case ClassWriter.LABELW_INSN:_                label = u + readInt(b, u + 1)__                newOffset = getNewOffset(allIndexes, allSizes, u, label)__                newCode.putByte(opcode)__                newCode.putInt(newOffset)__                u += 5__                break__            case ClassWriter.TABL_INSN:_                _                v = u__                u = u + 4 - (v & 3)__                _                newCode.putByte(Opcodes.TABLESWITCH)__                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4)__                label = v + readInt(b, u)__                u += 4__                newOffset = getNewOffset(allIndexes, allSizes, v, label)__                newCode.putInt(newOffset)__                j = readInt(b, u)__                u += 4__                newCode.putInt(j)__                j = readInt(b, u) - j + 1__                u += 4__                newCode.putInt(readInt(b, u - 4))__                for (_ j > 0_ --j) {_                    label = v + readInt(b, u)__                    u += 4__                    newOffset = getNewOffset(allIndexes, allSizes, v, label)__                    newCode.putInt(newOffset)__                }_                break__            case ClassWriter.LOOK_INSN:_                _                v = u__                u = u + 4 - (v & 3)__                _                newCode.putByte(Opcodes.LOOKUPSWITCH)__                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4)__                label = v + readInt(b, u)__                u += 4__                newOffset = getNewOffset(allIndexes, allSizes, v, label)__                newCode.putInt(newOffset)__                j = readInt(b, u)__                u += 4__                newCode.putInt(j)__                for (_ j > 0_ --j) {_                    newCode.putInt(readInt(b, u))__                    u += 4__                    label = v + readInt(b, u)__                    u += 4__                    newOffset = getNewOffset(allIndexes, allSizes, v, label)__                    newCode.putInt(newOffset)__                }_                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    newCode.putByteArray(b, u, 6)__                    u += 6__                } else {_                    newCode.putByteArray(b, u, 4)__                    u += 4__                }_                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                newCode.putByteArray(b, u, 2)__                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                newCode.putByteArray(b, u, 3)__                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                newCode.putByteArray(b, u, 5)__                u += 5__                break__            _            default:_                newCode.putByteArray(b, u, 4)__                u += 4__                break__            }_        }__        _        if (compute == FRAMES) {_            Label l = labels__            while (l != null) {_                _                u = l.position - 3__                if (u >= 0 && resize[u]) {_                    l.status |= Label.TARGET__                }_                getNewOffset(allIndexes, allSizes, l)__                l = l.successor__            }_            _            for (i = 0_ i < cw.typeTable.length_ ++i) {_                Item item = cw.typeTable[i]__                if (item != null && item.type == ClassWriter.TYPE_UNINIT) {_                    item.intVal = getNewOffset(allIndexes, allSizes, 0,_                            item.intVal)__                }_            }_            _            _        } else if (frameCount > 0) {_            _            cw.invalidFrames = true__        }_        _        Handler h = firstHandler__        while (h != null) {_            getNewOffset(allIndexes, allSizes, h.start)__            getNewOffset(allIndexes, allSizes, h.end)__            getNewOffset(allIndexes, allSizes, h.handler)__            h = h.next__        }_        _        _        for (i = 0_ i < 2_ ++i) {_            ByteVector bv = i == 0 ? localVar : localVarType__            if (bv != null) {_                b = bv.data__                u = 0__                while (u < bv.length) {_                    label = readUnsignedShort(b, u)__                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)__                    writeShort(b, u, newOffset)__                    label += readUnsignedShort(b, u + 2)__                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)_                            - newOffset__                    writeShort(b, u + 2, newOffset)__                    u += 10__                }_            }_        }_        if (lineNumber != null) {_            b = lineNumber.data__            u = 0__            while (u < lineNumber.length) {_                writeShort(_                        b,_                        u,_                        getNewOffset(allIndexes, allSizes, 0,_                                readUnsignedShort(b, u)))__                u += 4__            }_        }_        _        Attribute attr = cattrs__        while (attr != null) {_            Label[] labels = attr.getLabels()__            if (labels != null) {_                for (i = labels.length - 1_ i >= 0_ --i) {_                    getNewOffset(allIndexes, allSizes, labels[i])__                }_            }_            attr = attr.next__        }__        _        code = newCode__    };resizes,and,replaces,the,temporary,instructions,inserted,by,link,label,resolve,for,wide,forward,jumps,while,keeping,jump,offsets,and,instruction,addresses,consistent,this,may,require,to,resize,other,existing,instructions,or,even,to,introduce,new,instructions,for,example,increasing,the,size,of,an,instruction,by,2,at,the,middle,of,a,method,can,increases,the,offset,of,an,ifeq,instruction,from,32766,to,32768,in,which,case,ifeq,32766,must,be,replaced,with,ifneq,8,32765,this,in,turn,may,require,to,increase,the,size,of,another,jump,instruction,and,so,on,all,these,operations,are,handled,automatically,by,this,method,p,i,this,method,must,be,called,after,all,the,method,that,is,being,built,has,been,visited,i,in,particular,the,link,label,label,objects,used,to,construct,the,method,are,no,longer,valid,after,this,method,has,been,called;private,void,resize,instructions,byte,b,code,data,int,u,v,label,int,i,j,int,all,indexes,new,int,0,int,all,sizes,new,int,0,boolean,resize,int,new,offset,resize,new,boolean,code,length,int,state,3,do,if,state,3,state,2,u,0,while,u,b,length,int,opcode,b,u,0x,ff,int,insert,0,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,if,opcode,201,opcode,opcode,218,opcode,49,opcode,20,label,u,read,unsigned,short,b,u,1,else,label,u,read,short,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,if,new,offset,short,new,offset,short,if,resize,u,if,opcode,opcodes,goto,opcode,opcodes,jsr,insert,2,else,insert,5,resize,u,true,u,3,break,case,class,writer,u,5,break,case,class,writer,if,state,1,new,offset,get,new,offset,all,indexes,all,sizes,0,u,insert,new,offset,3,else,if,resize,u,insert,u,3,resize,u,true,u,u,4,u,3,u,4,read,int,b,u,8,read,int,b,u,4,1,12,break,case,class,writer,if,state,1,new,offset,get,new,offset,all,indexes,all,sizes,0,u,insert,new,offset,3,else,if,resize,u,insert,u,3,resize,u,true,u,u,4,u,3,u,8,read,int,b,u,4,8,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,if,insert,0,int,new,indexes,new,int,all,indexes,length,1,int,new,sizes,new,int,all,sizes,length,1,system,arraycopy,all,indexes,0,new,indexes,0,all,indexes,length,system,arraycopy,all,sizes,0,new,sizes,0,all,sizes,length,new,indexes,all,indexes,length,u,new,sizes,all,sizes,length,insert,all,indexes,new,indexes,all,sizes,new,sizes,if,insert,0,state,3,if,state,3,state,while,state,0,byte,vector,new,code,new,byte,vector,code,length,u,0,while,u,code,length,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,new,code,put,byte,opcode,u,1,break,case,class,writer,if,opcode,201,opcode,opcode,218,opcode,49,opcode,20,label,u,read,unsigned,short,b,u,1,else,label,u,read,short,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,if,resize,u,if,opcode,opcodes,goto,new,code,put,byte,200,else,if,opcode,opcodes,jsr,new,code,put,byte,201,else,new,code,put,byte,opcode,166,opcode,1,1,1,opcode,1,new,code,put,short,8,new,code,put,byte,200,new,offset,3,new,code,put,int,new,offset,else,new,code,put,byte,opcode,new,code,put,short,new,offset,u,3,break,case,class,writer,label,u,read,int,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,new,code,put,byte,opcode,new,code,put,int,new,offset,u,5,break,case,class,writer,v,u,u,u,4,v,3,new,code,put,byte,opcodes,tableswitch,new,code,put,byte,array,null,0,4,new,code,length,4,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,j,read,int,b,u,u,4,new,code,put,int,j,j,read,int,b,u,j,1,u,4,new,code,put,int,read,int,b,u,4,for,j,0,j,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,break,case,class,writer,v,u,u,u,4,v,3,new,code,put,byte,opcodes,lookupswitch,new,code,put,byte,array,null,0,4,new,code,length,4,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,j,read,int,b,u,u,4,new,code,put,int,j,for,j,0,j,new,code,put,int,read,int,b,u,u,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,new,code,put,byte,array,b,u,6,u,6,else,new,code,put,byte,array,b,u,4,u,4,break,case,class,writer,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,2,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,3,u,3,break,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,5,u,5,break,default,new,code,put,byte,array,b,u,4,u,4,break,if,compute,frames,label,l,labels,while,l,null,u,l,position,3,if,u,0,resize,u,l,status,label,target,get,new,offset,all,indexes,all,sizes,l,l,l,successor,for,i,0,i,cw,type,table,length,i,item,item,cw,type,table,i,if,item,null,item,type,class,writer,item,int,val,get,new,offset,all,indexes,all,sizes,0,item,int,val,else,if,frame,count,0,cw,invalid,frames,true,handler,h,first,handler,while,h,null,get,new,offset,all,indexes,all,sizes,h,start,get,new,offset,all,indexes,all,sizes,h,end,get,new,offset,all,indexes,all,sizes,h,handler,h,h,next,for,i,0,i,2,i,byte,vector,bv,i,0,local,var,local,var,type,if,bv,null,b,bv,data,u,0,while,u,bv,length,label,read,unsigned,short,b,u,new,offset,get,new,offset,all,indexes,all,sizes,0,label,write,short,b,u,new,offset,label,read,unsigned,short,b,u,2,new,offset,get,new,offset,all,indexes,all,sizes,0,label,new,offset,write,short,b,u,2,new,offset,u,10,if,line,number,null,b,line,number,data,u,0,while,u,line,number,length,write,short,b,u,get,new,offset,all,indexes,all,sizes,0,read,unsigned,short,b,u,u,4,attribute,attr,cattrs,while,attr,null,label,labels,attr,get,labels,if,labels,null,for,i,labels,length,1,i,0,i,get,new,offset,all,indexes,all,sizes,labels,i,attr,attr,next,code,new,code
MethodWriter -> private void resizeInstructions();1431006084;Resizes and replaces the temporary instructions inserted by_{@link Label#resolve} for wide forward jumps, while keeping jump offsets_and instruction addresses consistent. This may require to resize other_existing instructions, or even to introduce new instructions: for_example, increasing the size of an instruction by 2 at the middle of a_method can increases the offset of an IFEQ instruction from 32766 to_32768, in which case IFEQ 32766 must be replaced with IFNEQ 8 GOTO_W_32765. This, in turn, may require to increase the size of another jump_instruction, and so on... All these operations are handled automatically_by this method._<p>_<i>This method must be called after all the method that is being built_has been visited</i>. In particular, the {@link Label Label} objects used_to construct the method are no longer valid after this method has been_called.;private void resizeInstructions() {_        byte[] b = code.data_ _        int u, v, label_ _        int i, j_ _        _        int[] allIndexes = new int[0]_ _        int[] allSizes = new int[0]_ _        boolean[] resize_ _        int newOffset_ __        resize = new boolean[code.length]___        _        int state = 3__        do {_            if (state == 3) {_                state = 2__            }_            u = 0__            while (u < b.length) {_                int opcode = b[u] & 0xFF_ _                int insert = 0_ __                switch (ClassWriter.TYPE[opcode]) {_                case ClassWriter.NOARG_INSN:_                case ClassWriter.IMPLVAR_INSN:_                    u += 1__                    break__                case ClassWriter.LABEL_INSN:_                    if (opcode > 201) {_                        _                        _                        _                        opcode = opcode < 218 ? opcode - 49 : opcode - 20__                        label = u + readUnsignedShort(b, u + 1)__                    } else {_                        label = u + readShort(b, u + 1)__                    }_                    newOffset = getNewOffset(allIndexes, allSizes, u, label)__                    if (newOffset < Short.MIN_VALUE_                            || newOffset > Short.MAX_VALUE) {_                        if (!resize[u]) {_                            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_                                _                                _                                _                                insert = 2__                            } else {_                                _                                _                                _                                _                                _                                _                                insert = 5__                            }_                            resize[u] = true__                        }_                    }_                    u += 3__                    break__                case ClassWriter.LABELW_INSN:_                    u += 5__                    break__                case ClassWriter.TABL_INSN:_                    if (state == 1) {_                        _                        _                        _                        _                        _                        _                        _                        newOffset = getNewOffset(allIndexes, allSizes, 0, u)__                        insert = -(newOffset & 3)__                    } else if (!resize[u]) {_                        _                        _                        _                        insert = u & 3__                        resize[u] = true__                    }_                    _                    u = u + 4 - (u & 3)__                    u += 4 * (readInt(b, u + 8) - readInt(b, u + 4) + 1) + 12__                    break__                case ClassWriter.LOOK_INSN:_                    if (state == 1) {_                        _                        newOffset = getNewOffset(allIndexes, allSizes, 0, u)__                        insert = -(newOffset & 3)__                    } else if (!resize[u]) {_                        _                        insert = u & 3__                        resize[u] = true__                    }_                    _                    u = u + 4 - (u & 3)__                    u += 8 * readInt(b, u + 4) + 8__                    break__                case ClassWriter.WIDE_INSN:_                    opcode = b[u + 1] & 0xFF__                    if (opcode == Opcodes.IINC) {_                        u += 6__                    } else {_                        u += 4__                    }_                    break__                case ClassWriter.VAR_INSN:_                case ClassWriter.SBYTE_INSN:_                case ClassWriter.LDC_INSN:_                    u += 2__                    break__                case ClassWriter.SHORT_INSN:_                case ClassWriter.LDCW_INSN:_                case ClassWriter.FIELDORMETH_INSN:_                case ClassWriter.TYPE_INSN:_                case ClassWriter.IINC_INSN:_                    u += 3__                    break__                case ClassWriter.ITFMETH_INSN:_                case ClassWriter.INDYMETH_INSN:_                    u += 5__                    break__                _                default:_                    u += 4__                    break__                }_                if (insert != 0) {_                    _                    _                    int[] newIndexes = new int[allIndexes.length + 1]__                    int[] newSizes = new int[allSizes.length + 1]__                    System.arraycopy(allIndexes, 0, newIndexes, 0,_                            allIndexes.length)__                    System.arraycopy(allSizes, 0, newSizes, 0, allSizes.length)__                    newIndexes[allIndexes.length] = u__                    newSizes[allSizes.length] = insert__                    allIndexes = newIndexes__                    allSizes = newSizes__                    if (insert > 0) {_                        state = 3__                    }_                }_            }_            if (state < 3) {_                --state__            }_        } while (state != 0)___        _        _        __        ByteVector newCode = new ByteVector(code.length)___        u = 0__        while (u < code.length) {_            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                newCode.putByte(opcode)__                u += 1__                break__            case ClassWriter.LABEL_INSN:_                if (opcode > 201) {_                    _                    _                    _                    opcode = opcode < 218 ? opcode - 49 : opcode - 20__                    label = u + readUnsignedShort(b, u + 1)__                } else {_                    label = u + readShort(b, u + 1)__                }_                newOffset = getNewOffset(allIndexes, allSizes, u, label)__                if (resize[u]) {_                    _                    _                    _                    _                    _                    if (opcode == Opcodes.GOTO) {_                        newCode.putByte(200)_ _                    } else if (opcode == Opcodes.JSR) {_                        newCode.putByte(201)_ _                    } else {_                        newCode.putByte(opcode <= 166 ? ((opcode + 1) ^ 1) - 1_                                : opcode ^ 1)__                        newCode.putShort(8)_ _                        newCode.putByte(200)_ _                        _                        newOffset -= 3__                    }_                    newCode.putInt(newOffset)__                } else {_                    newCode.putByte(opcode)__                    newCode.putShort(newOffset)__                }_                u += 3__                break__            case ClassWriter.LABELW_INSN:_                label = u + readInt(b, u + 1)__                newOffset = getNewOffset(allIndexes, allSizes, u, label)__                newCode.putByte(opcode)__                newCode.putInt(newOffset)__                u += 5__                break__            case ClassWriter.TABL_INSN:_                _                v = u__                u = u + 4 - (v & 3)__                _                newCode.putByte(Opcodes.TABLESWITCH)__                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4)__                label = v + readInt(b, u)__                u += 4__                newOffset = getNewOffset(allIndexes, allSizes, v, label)__                newCode.putInt(newOffset)__                j = readInt(b, u)__                u += 4__                newCode.putInt(j)__                j = readInt(b, u) - j + 1__                u += 4__                newCode.putInt(readInt(b, u - 4))__                for (_ j > 0_ --j) {_                    label = v + readInt(b, u)__                    u += 4__                    newOffset = getNewOffset(allIndexes, allSizes, v, label)__                    newCode.putInt(newOffset)__                }_                break__            case ClassWriter.LOOK_INSN:_                _                v = u__                u = u + 4 - (v & 3)__                _                newCode.putByte(Opcodes.LOOKUPSWITCH)__                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4)__                label = v + readInt(b, u)__                u += 4__                newOffset = getNewOffset(allIndexes, allSizes, v, label)__                newCode.putInt(newOffset)__                j = readInt(b, u)__                u += 4__                newCode.putInt(j)__                for (_ j > 0_ --j) {_                    newCode.putInt(readInt(b, u))__                    u += 4__                    label = v + readInt(b, u)__                    u += 4__                    newOffset = getNewOffset(allIndexes, allSizes, v, label)__                    newCode.putInt(newOffset)__                }_                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    newCode.putByteArray(b, u, 6)__                    u += 6__                } else {_                    newCode.putByteArray(b, u, 4)__                    u += 4__                }_                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                newCode.putByteArray(b, u, 2)__                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                newCode.putByteArray(b, u, 3)__                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                newCode.putByteArray(b, u, 5)__                u += 5__                break__            _            default:_                newCode.putByteArray(b, u, 4)__                u += 4__                break__            }_        }__        _        if (compute == FRAMES) {_            Label l = labels__            while (l != null) {_                _                u = l.position - 3__                if (u >= 0 && resize[u]) {_                    l.status |= Label.TARGET__                }_                getNewOffset(allIndexes, allSizes, l)__                l = l.successor__            }_            _            if (cw.typeTable != null) {_                for (i = 0_ i < cw.typeTable.length_ ++i) {_                    Item item = cw.typeTable[i]__                    if (item != null && item.type == ClassWriter.TYPE_UNINIT) {_                        item.intVal = getNewOffset(allIndexes, allSizes, 0,_                                item.intVal)__                    }_                }_            }_            _            _        } else if (frameCount > 0) {_            _            cw.invalidFrames = true__        }_        _        Handler h = firstHandler__        while (h != null) {_            getNewOffset(allIndexes, allSizes, h.start)__            getNewOffset(allIndexes, allSizes, h.end)__            getNewOffset(allIndexes, allSizes, h.handler)__            h = h.next__        }_        _        _        for (i = 0_ i < 2_ ++i) {_            ByteVector bv = i == 0 ? localVar : localVarType__            if (bv != null) {_                b = bv.data__                u = 0__                while (u < bv.length) {_                    label = readUnsignedShort(b, u)__                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)__                    writeShort(b, u, newOffset)__                    label += readUnsignedShort(b, u + 2)__                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)_                            - newOffset__                    writeShort(b, u + 2, newOffset)__                    u += 10__                }_            }_        }_        if (lineNumber != null) {_            b = lineNumber.data__            u = 0__            while (u < lineNumber.length) {_                writeShort(_                        b,_                        u,_                        getNewOffset(allIndexes, allSizes, 0,_                                readUnsignedShort(b, u)))__                u += 4__            }_        }_        _        Attribute attr = cattrs__        while (attr != null) {_            Label[] labels = attr.getLabels()__            if (labels != null) {_                for (i = labels.length - 1_ i >= 0_ --i) {_                    getNewOffset(allIndexes, allSizes, labels[i])__                }_            }_            attr = attr.next__        }__        _        code = newCode__    };resizes,and,replaces,the,temporary,instructions,inserted,by,link,label,resolve,for,wide,forward,jumps,while,keeping,jump,offsets,and,instruction,addresses,consistent,this,may,require,to,resize,other,existing,instructions,or,even,to,introduce,new,instructions,for,example,increasing,the,size,of,an,instruction,by,2,at,the,middle,of,a,method,can,increases,the,offset,of,an,ifeq,instruction,from,32766,to,32768,in,which,case,ifeq,32766,must,be,replaced,with,ifneq,8,32765,this,in,turn,may,require,to,increase,the,size,of,another,jump,instruction,and,so,on,all,these,operations,are,handled,automatically,by,this,method,p,i,this,method,must,be,called,after,all,the,method,that,is,being,built,has,been,visited,i,in,particular,the,link,label,label,objects,used,to,construct,the,method,are,no,longer,valid,after,this,method,has,been,called;private,void,resize,instructions,byte,b,code,data,int,u,v,label,int,i,j,int,all,indexes,new,int,0,int,all,sizes,new,int,0,boolean,resize,int,new,offset,resize,new,boolean,code,length,int,state,3,do,if,state,3,state,2,u,0,while,u,b,length,int,opcode,b,u,0x,ff,int,insert,0,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,if,opcode,201,opcode,opcode,218,opcode,49,opcode,20,label,u,read,unsigned,short,b,u,1,else,label,u,read,short,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,if,new,offset,short,new,offset,short,if,resize,u,if,opcode,opcodes,goto,opcode,opcodes,jsr,insert,2,else,insert,5,resize,u,true,u,3,break,case,class,writer,u,5,break,case,class,writer,if,state,1,new,offset,get,new,offset,all,indexes,all,sizes,0,u,insert,new,offset,3,else,if,resize,u,insert,u,3,resize,u,true,u,u,4,u,3,u,4,read,int,b,u,8,read,int,b,u,4,1,12,break,case,class,writer,if,state,1,new,offset,get,new,offset,all,indexes,all,sizes,0,u,insert,new,offset,3,else,if,resize,u,insert,u,3,resize,u,true,u,u,4,u,3,u,8,read,int,b,u,4,8,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,if,insert,0,int,new,indexes,new,int,all,indexes,length,1,int,new,sizes,new,int,all,sizes,length,1,system,arraycopy,all,indexes,0,new,indexes,0,all,indexes,length,system,arraycopy,all,sizes,0,new,sizes,0,all,sizes,length,new,indexes,all,indexes,length,u,new,sizes,all,sizes,length,insert,all,indexes,new,indexes,all,sizes,new,sizes,if,insert,0,state,3,if,state,3,state,while,state,0,byte,vector,new,code,new,byte,vector,code,length,u,0,while,u,code,length,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,new,code,put,byte,opcode,u,1,break,case,class,writer,if,opcode,201,opcode,opcode,218,opcode,49,opcode,20,label,u,read,unsigned,short,b,u,1,else,label,u,read,short,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,if,resize,u,if,opcode,opcodes,goto,new,code,put,byte,200,else,if,opcode,opcodes,jsr,new,code,put,byte,201,else,new,code,put,byte,opcode,166,opcode,1,1,1,opcode,1,new,code,put,short,8,new,code,put,byte,200,new,offset,3,new,code,put,int,new,offset,else,new,code,put,byte,opcode,new,code,put,short,new,offset,u,3,break,case,class,writer,label,u,read,int,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,new,code,put,byte,opcode,new,code,put,int,new,offset,u,5,break,case,class,writer,v,u,u,u,4,v,3,new,code,put,byte,opcodes,tableswitch,new,code,put,byte,array,null,0,4,new,code,length,4,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,j,read,int,b,u,u,4,new,code,put,int,j,j,read,int,b,u,j,1,u,4,new,code,put,int,read,int,b,u,4,for,j,0,j,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,break,case,class,writer,v,u,u,u,4,v,3,new,code,put,byte,opcodes,lookupswitch,new,code,put,byte,array,null,0,4,new,code,length,4,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,j,read,int,b,u,u,4,new,code,put,int,j,for,j,0,j,new,code,put,int,read,int,b,u,u,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,new,code,put,byte,array,b,u,6,u,6,else,new,code,put,byte,array,b,u,4,u,4,break,case,class,writer,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,2,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,3,u,3,break,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,5,u,5,break,default,new,code,put,byte,array,b,u,4,u,4,break,if,compute,frames,label,l,labels,while,l,null,u,l,position,3,if,u,0,resize,u,l,status,label,target,get,new,offset,all,indexes,all,sizes,l,l,l,successor,if,cw,type,table,null,for,i,0,i,cw,type,table,length,i,item,item,cw,type,table,i,if,item,null,item,type,class,writer,item,int,val,get,new,offset,all,indexes,all,sizes,0,item,int,val,else,if,frame,count,0,cw,invalid,frames,true,handler,h,first,handler,while,h,null,get,new,offset,all,indexes,all,sizes,h,start,get,new,offset,all,indexes,all,sizes,h,end,get,new,offset,all,indexes,all,sizes,h,handler,h,h,next,for,i,0,i,2,i,byte,vector,bv,i,0,local,var,local,var,type,if,bv,null,b,bv,data,u,0,while,u,bv,length,label,read,unsigned,short,b,u,new,offset,get,new,offset,all,indexes,all,sizes,0,label,write,short,b,u,new,offset,label,read,unsigned,short,b,u,2,new,offset,get,new,offset,all,indexes,all,sizes,0,label,new,offset,write,short,b,u,2,new,offset,u,10,if,line,number,null,b,line,number,data,u,0,while,u,line,number,length,write,short,b,u,get,new,offset,all,indexes,all,sizes,0,read,unsigned,short,b,u,u,4,attribute,attr,cattrs,while,attr,null,label,labels,attr,get,labels,if,labels,null,for,i,labels,length,1,i,0,i,get,new,offset,all,indexes,all,sizes,labels,i,attr,attr,next,code,new,code
MethodWriter -> private void resizeInstructions();1440705816;Resizes and replaces the temporary instructions inserted by_{@link Label#resolve} for wide forward jumps, while keeping jump offsets_and instruction addresses consistent. This may require to resize other_existing instructions, or even to introduce new instructions: for_example, increasing the size of an instruction by 2 at the middle of a_method can increases the offset of an IFEQ instruction from 32766 to_32768, in which case IFEQ 32766 must be replaced with IFNEQ 8 GOTO_W_32765. This, in turn, may require to increase the size of another jump_instruction, and so on... All these operations are handled automatically_by this method._<p>_<i>This method must be called after all the method that is being built_has been visited</i>. In particular, the {@link Label Label} objects used_to construct the method are no longer valid after this method has been_called.;private void resizeInstructions() {_        byte[] b = code.data_ _        int u, v, label_ _        int i, j_ _        _        int[] allIndexes = new int[0]_ _        int[] allSizes = new int[0]_ _        boolean[] resize_ _        int newOffset_ __        resize = new boolean[code.length]___        _        int state = 3__        do {_            if (state == 3) {_                state = 2__            }_            u = 0__            while (u < b.length) {_                int opcode = b[u] & 0xFF_ _                int insert = 0_ __                switch (ClassWriter.TYPE[opcode]) {_                case ClassWriter.NOARG_INSN:_                case ClassWriter.IMPLVAR_INSN:_                    u += 1__                    break__                case ClassWriter.LABEL_INSN:_                    if (opcode > 201) {_                        _                        _                        _                        opcode = opcode < 218 ? opcode - 49 : opcode - 20__                        label = u + readUnsignedShort(b, u + 1)__                    } else {_                        label = u + readShort(b, u + 1)__                    }_                    newOffset = getNewOffset(allIndexes, allSizes, u, label)__                    if (newOffset < Short.MIN_VALUE_                            || newOffset > Short.MAX_VALUE) {_                        if (!resize[u]) {_                            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {_                                _                                _                                _                                insert = 2__                            } else {_                                _                                _                                _                                _                                _                                _                                insert = 5__                            }_                            resize[u] = true__                        }_                    }_                    u += 3__                    break__                case ClassWriter.LABELW_INSN:_                    u += 5__                    break__                case ClassWriter.TABL_INSN:_                    if (state == 1) {_                        _                        _                        _                        _                        _                        _                        _                        newOffset = getNewOffset(allIndexes, allSizes, 0, u)__                        insert = -(newOffset & 3)__                    } else if (!resize[u]) {_                        _                        _                        _                        insert = u & 3__                        resize[u] = true__                    }_                    _                    u = u + 4 - (u & 3)__                    u += 4 * (readInt(b, u + 8) - readInt(b, u + 4) + 1) + 12__                    break__                case ClassWriter.LOOK_INSN:_                    if (state == 1) {_                        _                        newOffset = getNewOffset(allIndexes, allSizes, 0, u)__                        insert = -(newOffset & 3)__                    } else if (!resize[u]) {_                        _                        insert = u & 3__                        resize[u] = true__                    }_                    _                    u = u + 4 - (u & 3)__                    u += 8 * readInt(b, u + 4) + 8__                    break__                case ClassWriter.WIDE_INSN:_                    opcode = b[u + 1] & 0xFF__                    if (opcode == Opcodes.IINC) {_                        u += 6__                    } else {_                        u += 4__                    }_                    break__                case ClassWriter.VAR_INSN:_                case ClassWriter.SBYTE_INSN:_                case ClassWriter.LDC_INSN:_                    u += 2__                    break__                case ClassWriter.SHORT_INSN:_                case ClassWriter.LDCW_INSN:_                case ClassWriter.FIELDORMETH_INSN:_                case ClassWriter.TYPE_INSN:_                case ClassWriter.IINC_INSN:_                    u += 3__                    break__                case ClassWriter.ITFMETH_INSN:_                case ClassWriter.INDYMETH_INSN:_                    u += 5__                    break__                _                default:_                    u += 4__                    break__                }_                if (insert != 0) {_                    _                    _                    int[] newIndexes = new int[allIndexes.length + 1]__                    int[] newSizes = new int[allSizes.length + 1]__                    System.arraycopy(allIndexes, 0, newIndexes, 0,_                            allIndexes.length)__                    System.arraycopy(allSizes, 0, newSizes, 0, allSizes.length)__                    newIndexes[allIndexes.length] = u__                    newSizes[allSizes.length] = insert__                    allIndexes = newIndexes__                    allSizes = newSizes__                    if (insert > 0) {_                        state = 3__                    }_                }_            }_            if (state < 3) {_                --state__            }_        } while (state != 0)___        _        _        __        ByteVector newCode = new ByteVector(code.length)___        u = 0__        while (u < code.length) {_            int opcode = b[u] & 0xFF__            switch (ClassWriter.TYPE[opcode]) {_            case ClassWriter.NOARG_INSN:_            case ClassWriter.IMPLVAR_INSN:_                newCode.putByte(opcode)__                u += 1__                break__            case ClassWriter.LABEL_INSN:_                if (opcode > 201) {_                    _                    _                    _                    opcode = opcode < 218 ? opcode - 49 : opcode - 20__                    label = u + readUnsignedShort(b, u + 1)__                } else {_                    label = u + readShort(b, u + 1)__                }_                newOffset = getNewOffset(allIndexes, allSizes, u, label)__                if (resize[u]) {_                    _                    _                    _                    _                    _                    if (opcode == Opcodes.GOTO) {_                        newCode.putByte(200)_ _                    } else if (opcode == Opcodes.JSR) {_                        newCode.putByte(201)_ _                    } else {_                        newCode.putByte(opcode <= 166 ? ((opcode + 1) ^ 1) - 1_                                : opcode ^ 1)__                        newCode.putShort(8)_ _                        newCode.putByte(200)_ _                        _                        newOffset -= 3__                    }_                    newCode.putInt(newOffset)__                } else {_                    newCode.putByte(opcode)__                    newCode.putShort(newOffset)__                }_                u += 3__                break__            case ClassWriter.LABELW_INSN:_                label = u + readInt(b, u + 1)__                newOffset = getNewOffset(allIndexes, allSizes, u, label)__                newCode.putByte(opcode)__                newCode.putInt(newOffset)__                u += 5__                break__            case ClassWriter.TABL_INSN:_                _                v = u__                u = u + 4 - (v & 3)__                _                newCode.putByte(Opcodes.TABLESWITCH)__                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4)__                label = v + readInt(b, u)__                u += 4__                newOffset = getNewOffset(allIndexes, allSizes, v, label)__                newCode.putInt(newOffset)__                j = readInt(b, u)__                u += 4__                newCode.putInt(j)__                j = readInt(b, u) - j + 1__                u += 4__                newCode.putInt(readInt(b, u - 4))__                for (_ j > 0_ --j) {_                    label = v + readInt(b, u)__                    u += 4__                    newOffset = getNewOffset(allIndexes, allSizes, v, label)__                    newCode.putInt(newOffset)__                }_                break__            case ClassWriter.LOOK_INSN:_                _                v = u__                u = u + 4 - (v & 3)__                _                newCode.putByte(Opcodes.LOOKUPSWITCH)__                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4)__                label = v + readInt(b, u)__                u += 4__                newOffset = getNewOffset(allIndexes, allSizes, v, label)__                newCode.putInt(newOffset)__                j = readInt(b, u)__                u += 4__                newCode.putInt(j)__                for (_ j > 0_ --j) {_                    newCode.putInt(readInt(b, u))__                    u += 4__                    label = v + readInt(b, u)__                    u += 4__                    newOffset = getNewOffset(allIndexes, allSizes, v, label)__                    newCode.putInt(newOffset)__                }_                break__            case ClassWriter.WIDE_INSN:_                opcode = b[u + 1] & 0xFF__                if (opcode == Opcodes.IINC) {_                    newCode.putByteArray(b, u, 6)__                    u += 6__                } else {_                    newCode.putByteArray(b, u, 4)__                    u += 4__                }_                break__            case ClassWriter.VAR_INSN:_            case ClassWriter.SBYTE_INSN:_            case ClassWriter.LDC_INSN:_                newCode.putByteArray(b, u, 2)__                u += 2__                break__            case ClassWriter.SHORT_INSN:_            case ClassWriter.LDCW_INSN:_            case ClassWriter.FIELDORMETH_INSN:_            case ClassWriter.TYPE_INSN:_            case ClassWriter.IINC_INSN:_                newCode.putByteArray(b, u, 3)__                u += 3__                break__            case ClassWriter.ITFMETH_INSN:_            case ClassWriter.INDYMETH_INSN:_                newCode.putByteArray(b, u, 5)__                u += 5__                break__            _            default:_                newCode.putByteArray(b, u, 4)__                u += 4__                break__            }_        }__        _        if (compute == FRAMES) {_            Label l = labels__            while (l != null) {_                _                u = l.position - 3__                if (u >= 0 && resize[u]) {_                    l.status |= Label.TARGET__                }_                getNewOffset(allIndexes, allSizes, l)__                l = l.successor__            }_            _            if (cw.typeTable != null) {_                for (i = 0_ i < cw.typeTable.length_ ++i) {_                    Item item = cw.typeTable[i]__                    if (item != null && item.type == ClassWriter.TYPE_UNINIT) {_                        item.intVal = getNewOffset(allIndexes, allSizes, 0,_                                item.intVal)__                    }_                }_            }_            _            _        } else if (frameCount > 0) {_            _            cw.invalidFrames = true__        }_        _        Handler h = firstHandler__        while (h != null) {_            getNewOffset(allIndexes, allSizes, h.start)__            getNewOffset(allIndexes, allSizes, h.end)__            getNewOffset(allIndexes, allSizes, h.handler)__            h = h.next__        }_        _        _        for (i = 0_ i < 2_ ++i) {_            ByteVector bv = i == 0 ? localVar : localVarType__            if (bv != null) {_                b = bv.data__                u = 0__                while (u < bv.length) {_                    label = readUnsignedShort(b, u)__                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)__                    writeShort(b, u, newOffset)__                    label += readUnsignedShort(b, u + 2)__                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)_                            - newOffset__                    writeShort(b, u + 2, newOffset)__                    u += 10__                }_            }_        }_        if (lineNumber != null) {_            b = lineNumber.data__            u = 0__            while (u < lineNumber.length) {_                writeShort(_                        b,_                        u,_                        getNewOffset(allIndexes, allSizes, 0,_                                readUnsignedShort(b, u)))__                u += 4__            }_        }_        _        Attribute attr = cattrs__        while (attr != null) {_            Label[] labels = attr.getLabels()__            if (labels != null) {_                for (i = labels.length - 1_ i >= 0_ --i) {_                    getNewOffset(allIndexes, allSizes, labels[i])__                }_            }_            attr = attr.next__        }__        _        code = newCode__    };resizes,and,replaces,the,temporary,instructions,inserted,by,link,label,resolve,for,wide,forward,jumps,while,keeping,jump,offsets,and,instruction,addresses,consistent,this,may,require,to,resize,other,existing,instructions,or,even,to,introduce,new,instructions,for,example,increasing,the,size,of,an,instruction,by,2,at,the,middle,of,a,method,can,increases,the,offset,of,an,ifeq,instruction,from,32766,to,32768,in,which,case,ifeq,32766,must,be,replaced,with,ifneq,8,32765,this,in,turn,may,require,to,increase,the,size,of,another,jump,instruction,and,so,on,all,these,operations,are,handled,automatically,by,this,method,p,i,this,method,must,be,called,after,all,the,method,that,is,being,built,has,been,visited,i,in,particular,the,link,label,label,objects,used,to,construct,the,method,are,no,longer,valid,after,this,method,has,been,called;private,void,resize,instructions,byte,b,code,data,int,u,v,label,int,i,j,int,all,indexes,new,int,0,int,all,sizes,new,int,0,boolean,resize,int,new,offset,resize,new,boolean,code,length,int,state,3,do,if,state,3,state,2,u,0,while,u,b,length,int,opcode,b,u,0x,ff,int,insert,0,switch,class,writer,type,opcode,case,class,writer,case,class,writer,u,1,break,case,class,writer,if,opcode,201,opcode,opcode,218,opcode,49,opcode,20,label,u,read,unsigned,short,b,u,1,else,label,u,read,short,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,if,new,offset,short,new,offset,short,if,resize,u,if,opcode,opcodes,goto,opcode,opcodes,jsr,insert,2,else,insert,5,resize,u,true,u,3,break,case,class,writer,u,5,break,case,class,writer,if,state,1,new,offset,get,new,offset,all,indexes,all,sizes,0,u,insert,new,offset,3,else,if,resize,u,insert,u,3,resize,u,true,u,u,4,u,3,u,4,read,int,b,u,8,read,int,b,u,4,1,12,break,case,class,writer,if,state,1,new,offset,get,new,offset,all,indexes,all,sizes,0,u,insert,new,offset,3,else,if,resize,u,insert,u,3,resize,u,true,u,u,4,u,3,u,8,read,int,b,u,4,8,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,u,6,else,u,4,break,case,class,writer,case,class,writer,case,class,writer,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,u,3,break,case,class,writer,case,class,writer,u,5,break,default,u,4,break,if,insert,0,int,new,indexes,new,int,all,indexes,length,1,int,new,sizes,new,int,all,sizes,length,1,system,arraycopy,all,indexes,0,new,indexes,0,all,indexes,length,system,arraycopy,all,sizes,0,new,sizes,0,all,sizes,length,new,indexes,all,indexes,length,u,new,sizes,all,sizes,length,insert,all,indexes,new,indexes,all,sizes,new,sizes,if,insert,0,state,3,if,state,3,state,while,state,0,byte,vector,new,code,new,byte,vector,code,length,u,0,while,u,code,length,int,opcode,b,u,0x,ff,switch,class,writer,type,opcode,case,class,writer,case,class,writer,new,code,put,byte,opcode,u,1,break,case,class,writer,if,opcode,201,opcode,opcode,218,opcode,49,opcode,20,label,u,read,unsigned,short,b,u,1,else,label,u,read,short,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,if,resize,u,if,opcode,opcodes,goto,new,code,put,byte,200,else,if,opcode,opcodes,jsr,new,code,put,byte,201,else,new,code,put,byte,opcode,166,opcode,1,1,1,opcode,1,new,code,put,short,8,new,code,put,byte,200,new,offset,3,new,code,put,int,new,offset,else,new,code,put,byte,opcode,new,code,put,short,new,offset,u,3,break,case,class,writer,label,u,read,int,b,u,1,new,offset,get,new,offset,all,indexes,all,sizes,u,label,new,code,put,byte,opcode,new,code,put,int,new,offset,u,5,break,case,class,writer,v,u,u,u,4,v,3,new,code,put,byte,opcodes,tableswitch,new,code,put,byte,array,null,0,4,new,code,length,4,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,j,read,int,b,u,u,4,new,code,put,int,j,j,read,int,b,u,j,1,u,4,new,code,put,int,read,int,b,u,4,for,j,0,j,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,break,case,class,writer,v,u,u,u,4,v,3,new,code,put,byte,opcodes,lookupswitch,new,code,put,byte,array,null,0,4,new,code,length,4,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,j,read,int,b,u,u,4,new,code,put,int,j,for,j,0,j,new,code,put,int,read,int,b,u,u,4,label,v,read,int,b,u,u,4,new,offset,get,new,offset,all,indexes,all,sizes,v,label,new,code,put,int,new,offset,break,case,class,writer,opcode,b,u,1,0x,ff,if,opcode,opcodes,iinc,new,code,put,byte,array,b,u,6,u,6,else,new,code,put,byte,array,b,u,4,u,4,break,case,class,writer,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,2,u,2,break,case,class,writer,case,class,writer,case,class,writer,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,3,u,3,break,case,class,writer,case,class,writer,new,code,put,byte,array,b,u,5,u,5,break,default,new,code,put,byte,array,b,u,4,u,4,break,if,compute,frames,label,l,labels,while,l,null,u,l,position,3,if,u,0,resize,u,l,status,label,target,get,new,offset,all,indexes,all,sizes,l,l,l,successor,if,cw,type,table,null,for,i,0,i,cw,type,table,length,i,item,item,cw,type,table,i,if,item,null,item,type,class,writer,item,int,val,get,new,offset,all,indexes,all,sizes,0,item,int,val,else,if,frame,count,0,cw,invalid,frames,true,handler,h,first,handler,while,h,null,get,new,offset,all,indexes,all,sizes,h,start,get,new,offset,all,indexes,all,sizes,h,end,get,new,offset,all,indexes,all,sizes,h,handler,h,h,next,for,i,0,i,2,i,byte,vector,bv,i,0,local,var,local,var,type,if,bv,null,b,bv,data,u,0,while,u,bv,length,label,read,unsigned,short,b,u,new,offset,get,new,offset,all,indexes,all,sizes,0,label,write,short,b,u,new,offset,label,read,unsigned,short,b,u,2,new,offset,get,new,offset,all,indexes,all,sizes,0,label,new,offset,write,short,b,u,2,new,offset,u,10,if,line,number,null,b,line,number,data,u,0,while,u,line,number,length,write,short,b,u,get,new,offset,all,indexes,all,sizes,0,read,unsigned,short,b,u,u,4,attribute,attr,cattrs,while,attr,null,label,labels,attr,get,labels,if,labels,null,for,i,labels,length,1,i,0,i,get,new,offset,all,indexes,all,sizes,labels,i,attr,attr,next,code,new,code
MethodWriter -> static int readUnsignedShort(final byte[] b, final int index);1366718246;Reads an unsigned short value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static int readUnsignedShort(final byte[] b, final int index) {_        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,int,read,unsigned,short,final,byte,b,final,int,index,return,b,index,0x,ff,8,b,index,1,0x,ff
MethodWriter -> static int readUnsignedShort(final byte[] b, final int index);1395273982;Reads an unsigned short value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static int readUnsignedShort(final byte[] b, final int index) {_        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,int,read,unsigned,short,final,byte,b,final,int,index,return,b,index,0x,ff,8,b,index,1,0x,ff
MethodWriter -> static int readUnsignedShort(final byte[] b, final int index);1395744691;Reads an unsigned short value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static int readUnsignedShort(final byte[] b, final int index) {_        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,int,read,unsigned,short,final,byte,b,final,int,index,return,b,index,0x,ff,8,b,index,1,0x,ff
MethodWriter -> static int readUnsignedShort(final byte[] b, final int index);1400531367;Reads an unsigned short value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static int readUnsignedShort(final byte[] b, final int index) {_        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,int,read,unsigned,short,final,byte,b,final,int,index,return,b,index,0x,ff,8,b,index,1,0x,ff
MethodWriter -> static int readUnsignedShort(final byte[] b, final int index);1431006084;Reads an unsigned short value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static int readUnsignedShort(final byte[] b, final int index) {_        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,int,read,unsigned,short,final,byte,b,final,int,index,return,b,index,0x,ff,8,b,index,1,0x,ff
MethodWriter -> static int readUnsignedShort(final byte[] b, final int index);1440705816;Reads an unsigned short value in the given byte array.__@param b_a byte array._@param index_the start index of the value to be read._@return the read value.;static int readUnsignedShort(final byte[] b, final int index) {_        return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)__    };reads,an,unsigned,short,value,in,the,given,byte,array,param,b,a,byte,array,param,index,the,start,index,of,the,value,to,be,read,return,the,read,value;static,int,read,unsigned,short,final,byte,b,final,int,index,return,b,index,0x,ff,8,b,index,1,0x,ff
MethodWriter -> private void putFrame();1531241461;Compresses and writes {@link #currentFrame} in a new StackMapTable entry.;private void putFrame() {_    final int nLocal = currentFrame[1]__    final int nStack = currentFrame[2]__    if (symbolTable.getMajorVersion() < Opcodes.V1_6) {_      _      stackMapTableEntries.putShort(currentFrame[0]).putShort(nLocal)__      putAbstractTypes(3, 3 + nLocal)__      stackMapTableEntries.putShort(nStack)__      putAbstractTypes(3 + nLocal, 3 + nLocal + nStack)__      return__    }_    final int offsetDelta =_        stackMapTableNumberOfEntries == 0_            ? currentFrame[0]_            : currentFrame[0] - previousFrame[0] - 1__    final int previousNlocal = previousFrame[1]__    final int nLocalDelta = nLocal - previousNlocal__    int type = Frame.FULL_FRAME__    if (nStack == 0) {_      switch (nLocalDelta) {_        case -3:_        case -2:_        case -1:_          type = Frame.CHOP_FRAME__          break__        case 0:_          type = offsetDelta < 64 ? Frame.SAME_FRAME : Frame.SAME_FRAME_EXTENDED__          break__        case 1:_        case 2:_        case 3:_          type = Frame.APPEND_FRAME__          break__        default:_          _          break__      }_    } else if (nLocalDelta == 0 && nStack == 1) {_      type =_          offsetDelta < 63_              ? Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_              : Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED__    }_    if (type != Frame.FULL_FRAME) {_      _      int frameIndex = 3__      for (int i = 0_ i < previousNlocal && i < nLocal_ i++) {_        if (currentFrame[frameIndex] != previousFrame[frameIndex]) {_          type = Frame.FULL_FRAME__          break__        }_        frameIndex++__      }_    }_    switch (type) {_      case Frame.SAME_FRAME:_        stackMapTableEntries.putByte(offsetDelta)__        break__      case Frame.SAME_LOCALS_1_STACK_ITEM_FRAME:_        stackMapTableEntries.putByte(Frame.SAME_LOCALS_1_STACK_ITEM_FRAME + offsetDelta)__        putAbstractTypes(3 + nLocal, 4 + nLocal)__        break__      case Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:_        stackMapTableEntries_            .putByte(Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED)_            .putShort(offsetDelta)__        putAbstractTypes(3 + nLocal, 4 + nLocal)__        break__      case Frame.SAME_FRAME_EXTENDED:_        stackMapTableEntries.putByte(Frame.SAME_FRAME_EXTENDED).putShort(offsetDelta)__        break__      case Frame.CHOP_FRAME:_        stackMapTableEntries.putByte(Frame.SAME_FRAME_EXTENDED + nLocalDelta).putShort(offsetDelta)__        break__      case Frame.APPEND_FRAME:_        stackMapTableEntries.putByte(Frame.SAME_FRAME_EXTENDED + nLocalDelta).putShort(offsetDelta)__        putAbstractTypes(3 + previousNlocal, 3 + nLocal)__        break__      case Frame.FULL_FRAME:_      default:_        stackMapTableEntries.putByte(Frame.FULL_FRAME).putShort(offsetDelta).putShort(nLocal)__        putAbstractTypes(3, 3 + nLocal)__        stackMapTableEntries.putShort(nStack)__        putAbstractTypes(3 + nLocal, 3 + nLocal + nStack)__    }_  };compresses,and,writes,link,current,frame,in,a,new,stack,map,table,entry;private,void,put,frame,final,int,n,local,current,frame,1,final,int,n,stack,current,frame,2,if,symbol,table,get,major,version,opcodes,stack,map,table,entries,put,short,current,frame,0,put,short,n,local,put,abstract,types,3,3,n,local,stack,map,table,entries,put,short,n,stack,put,abstract,types,3,n,local,3,n,local,n,stack,return,final,int,offset,delta,stack,map,table,number,of,entries,0,current,frame,0,current,frame,0,previous,frame,0,1,final,int,previous,nlocal,previous,frame,1,final,int,n,local,delta,n,local,previous,nlocal,int,type,frame,if,n,stack,0,switch,n,local,delta,case,3,case,2,case,1,type,frame,break,case,0,type,offset,delta,64,frame,frame,break,case,1,case,2,case,3,type,frame,break,default,break,else,if,n,local,delta,0,n,stack,1,type,offset,delta,63,frame,frame,if,type,frame,int,frame,index,3,for,int,i,0,i,previous,nlocal,i,n,local,i,if,current,frame,frame,index,previous,frame,frame,index,type,frame,break,frame,index,switch,type,case,frame,stack,map,table,entries,put,byte,offset,delta,break,case,frame,stack,map,table,entries,put,byte,frame,offset,delta,put,abstract,types,3,n,local,4,n,local,break,case,frame,stack,map,table,entries,put,byte,frame,put,short,offset,delta,put,abstract,types,3,n,local,4,n,local,break,case,frame,stack,map,table,entries,put,byte,frame,put,short,offset,delta,break,case,frame,stack,map,table,entries,put,byte,frame,n,local,delta,put,short,offset,delta,break,case,frame,stack,map,table,entries,put,byte,frame,n,local,delta,put,short,offset,delta,put,abstract,types,3,previous,nlocal,3,n,local,break,case,frame,default,stack,map,table,entries,put,byte,frame,put,short,offset,delta,put,short,n,local,put,abstract,types,3,3,n,local,stack,map,table,entries,put,short,n,stack,put,abstract,types,3,n,local,3,n,local,n,stack
MethodWriter -> private void putFrame();1536664245;Compresses and writes {@link #currentFrame} in a new StackMapTable entry.;private void putFrame() {_    final int nLocal = currentFrame[1]__    final int nStack = currentFrame[2]__    if (symbolTable.getMajorVersion() < Opcodes.V1_6) {_      _      stackMapTableEntries.putShort(currentFrame[0]).putShort(nLocal)__      putAbstractTypes(3, 3 + nLocal)__      stackMapTableEntries.putShort(nStack)__      putAbstractTypes(3 + nLocal, 3 + nLocal + nStack)__      return__    }_    final int offsetDelta =_        stackMapTableNumberOfEntries == 0_            ? currentFrame[0]_            : currentFrame[0] - previousFrame[0] - 1__    final int previousNlocal = previousFrame[1]__    final int nLocalDelta = nLocal - previousNlocal__    int type = Frame.FULL_FRAME__    if (nStack == 0) {_      switch (nLocalDelta) {_        case -3:_        case -2:_        case -1:_          type = Frame.CHOP_FRAME__          break__        case 0:_          type = offsetDelta < 64 ? Frame.SAME_FRAME : Frame.SAME_FRAME_EXTENDED__          break__        case 1:_        case 2:_        case 3:_          type = Frame.APPEND_FRAME__          break__        default:_          _          break__      }_    } else if (nLocalDelta == 0 && nStack == 1) {_      type =_          offsetDelta < 63_              ? Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_              : Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED__    }_    if (type != Frame.FULL_FRAME) {_      _      int frameIndex = 3__      for (int i = 0_ i < previousNlocal && i < nLocal_ i++) {_        if (currentFrame[frameIndex] != previousFrame[frameIndex]) {_          type = Frame.FULL_FRAME__          break__        }_        frameIndex++__      }_    }_    switch (type) {_      case Frame.SAME_FRAME:_        stackMapTableEntries.putByte(offsetDelta)__        break__      case Frame.SAME_LOCALS_1_STACK_ITEM_FRAME:_        stackMapTableEntries.putByte(Frame.SAME_LOCALS_1_STACK_ITEM_FRAME + offsetDelta)__        putAbstractTypes(3 + nLocal, 4 + nLocal)__        break__      case Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:_        stackMapTableEntries_            .putByte(Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED)_            .putShort(offsetDelta)__        putAbstractTypes(3 + nLocal, 4 + nLocal)__        break__      case Frame.SAME_FRAME_EXTENDED:_        stackMapTableEntries.putByte(Frame.SAME_FRAME_EXTENDED).putShort(offsetDelta)__        break__      case Frame.CHOP_FRAME:_        stackMapTableEntries.putByte(Frame.SAME_FRAME_EXTENDED + nLocalDelta).putShort(offsetDelta)__        break__      case Frame.APPEND_FRAME:_        stackMapTableEntries.putByte(Frame.SAME_FRAME_EXTENDED + nLocalDelta).putShort(offsetDelta)__        putAbstractTypes(3 + previousNlocal, 3 + nLocal)__        break__      case Frame.FULL_FRAME:_      default:_        stackMapTableEntries.putByte(Frame.FULL_FRAME).putShort(offsetDelta).putShort(nLocal)__        putAbstractTypes(3, 3 + nLocal)__        stackMapTableEntries.putShort(nStack)__        putAbstractTypes(3 + nLocal, 3 + nLocal + nStack)__    }_  };compresses,and,writes,link,current,frame,in,a,new,stack,map,table,entry;private,void,put,frame,final,int,n,local,current,frame,1,final,int,n,stack,current,frame,2,if,symbol,table,get,major,version,opcodes,stack,map,table,entries,put,short,current,frame,0,put,short,n,local,put,abstract,types,3,3,n,local,stack,map,table,entries,put,short,n,stack,put,abstract,types,3,n,local,3,n,local,n,stack,return,final,int,offset,delta,stack,map,table,number,of,entries,0,current,frame,0,current,frame,0,previous,frame,0,1,final,int,previous,nlocal,previous,frame,1,final,int,n,local,delta,n,local,previous,nlocal,int,type,frame,if,n,stack,0,switch,n,local,delta,case,3,case,2,case,1,type,frame,break,case,0,type,offset,delta,64,frame,frame,break,case,1,case,2,case,3,type,frame,break,default,break,else,if,n,local,delta,0,n,stack,1,type,offset,delta,63,frame,frame,if,type,frame,int,frame,index,3,for,int,i,0,i,previous,nlocal,i,n,local,i,if,current,frame,frame,index,previous,frame,frame,index,type,frame,break,frame,index,switch,type,case,frame,stack,map,table,entries,put,byte,offset,delta,break,case,frame,stack,map,table,entries,put,byte,frame,offset,delta,put,abstract,types,3,n,local,4,n,local,break,case,frame,stack,map,table,entries,put,byte,frame,put,short,offset,delta,put,abstract,types,3,n,local,4,n,local,break,case,frame,stack,map,table,entries,put,byte,frame,put,short,offset,delta,break,case,frame,stack,map,table,entries,put,byte,frame,n,local,delta,put,short,offset,delta,break,case,frame,stack,map,table,entries,put,byte,frame,n,local,delta,put,short,offset,delta,put,abstract,types,3,previous,nlocal,3,n,local,break,case,frame,default,stack,map,table,entries,put,byte,frame,put,short,offset,delta,put,short,n,local,put,abstract,types,3,3,n,local,stack,map,table,entries,put,short,n,stack,put,abstract,types,3,n,local,3,n,local,n,stack
MethodWriter -> private void putFrame();1537204147;Compresses and writes {@link #currentFrame} in a new StackMapTable entry.;private void putFrame() {_    final int numLocal = currentFrame[1]__    final int numStack = currentFrame[2]__    if (symbolTable.getMajorVersion() < Opcodes.V1_6) {_      _      stackMapTableEntries.putShort(currentFrame[0]).putShort(numLocal)__      putAbstractTypes(3, 3 + numLocal)__      stackMapTableEntries.putShort(numStack)__      putAbstractTypes(3 + numLocal, 3 + numLocal + numStack)__      return__    }_    final int offsetDelta =_        stackMapTableNumberOfEntries == 0_            ? currentFrame[0]_            : currentFrame[0] - previousFrame[0] - 1__    final int previousNumlocal = previousFrame[1]__    final int numLocalDelta = numLocal - previousNumlocal__    int type = Frame.FULL_FRAME__    if (numStack == 0) {_      switch (numLocalDelta) {_        case -3:_        case -2:_        case -1:_          type = Frame.CHOP_FRAME__          break__        case 0:_          type = offsetDelta < 64 ? Frame.SAME_FRAME : Frame.SAME_FRAME_EXTENDED__          break__        case 1:_        case 2:_        case 3:_          type = Frame.APPEND_FRAME__          break__        default:_          _          break__      }_    } else if (numLocalDelta == 0 && numStack == 1) {_      type =_          offsetDelta < 63_              ? Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_              : Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED__    }_    if (type != Frame.FULL_FRAME) {_      _      int frameIndex = 3__      for (int i = 0_ i < previousNumlocal && i < numLocal_ i++) {_        if (currentFrame[frameIndex] != previousFrame[frameIndex]) {_          type = Frame.FULL_FRAME__          break__        }_        frameIndex++__      }_    }_    switch (type) {_      case Frame.SAME_FRAME:_        stackMapTableEntries.putByte(offsetDelta)__        break__      case Frame.SAME_LOCALS_1_STACK_ITEM_FRAME:_        stackMapTableEntries.putByte(Frame.SAME_LOCALS_1_STACK_ITEM_FRAME + offsetDelta)__        putAbstractTypes(3 + numLocal, 4 + numLocal)__        break__      case Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:_        stackMapTableEntries_            .putByte(Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED)_            .putShort(offsetDelta)__        putAbstractTypes(3 + numLocal, 4 + numLocal)__        break__      case Frame.SAME_FRAME_EXTENDED:_        stackMapTableEntries.putByte(Frame.SAME_FRAME_EXTENDED).putShort(offsetDelta)__        break__      case Frame.CHOP_FRAME:_        stackMapTableEntries_            .putByte(Frame.SAME_FRAME_EXTENDED + numLocalDelta)_            .putShort(offsetDelta)__        break__      case Frame.APPEND_FRAME:_        stackMapTableEntries_            .putByte(Frame.SAME_FRAME_EXTENDED + numLocalDelta)_            .putShort(offsetDelta)__        putAbstractTypes(3 + previousNumlocal, 3 + numLocal)__        break__      case Frame.FULL_FRAME:_      default:_        stackMapTableEntries.putByte(Frame.FULL_FRAME).putShort(offsetDelta).putShort(numLocal)__        putAbstractTypes(3, 3 + numLocal)__        stackMapTableEntries.putShort(numStack)__        putAbstractTypes(3 + numLocal, 3 + numLocal + numStack)__    }_  };compresses,and,writes,link,current,frame,in,a,new,stack,map,table,entry;private,void,put,frame,final,int,num,local,current,frame,1,final,int,num,stack,current,frame,2,if,symbol,table,get,major,version,opcodes,stack,map,table,entries,put,short,current,frame,0,put,short,num,local,put,abstract,types,3,3,num,local,stack,map,table,entries,put,short,num,stack,put,abstract,types,3,num,local,3,num,local,num,stack,return,final,int,offset,delta,stack,map,table,number,of,entries,0,current,frame,0,current,frame,0,previous,frame,0,1,final,int,previous,numlocal,previous,frame,1,final,int,num,local,delta,num,local,previous,numlocal,int,type,frame,if,num,stack,0,switch,num,local,delta,case,3,case,2,case,1,type,frame,break,case,0,type,offset,delta,64,frame,frame,break,case,1,case,2,case,3,type,frame,break,default,break,else,if,num,local,delta,0,num,stack,1,type,offset,delta,63,frame,frame,if,type,frame,int,frame,index,3,for,int,i,0,i,previous,numlocal,i,num,local,i,if,current,frame,frame,index,previous,frame,frame,index,type,frame,break,frame,index,switch,type,case,frame,stack,map,table,entries,put,byte,offset,delta,break,case,frame,stack,map,table,entries,put,byte,frame,offset,delta,put,abstract,types,3,num,local,4,num,local,break,case,frame,stack,map,table,entries,put,byte,frame,put,short,offset,delta,put,abstract,types,3,num,local,4,num,local,break,case,frame,stack,map,table,entries,put,byte,frame,put,short,offset,delta,break,case,frame,stack,map,table,entries,put,byte,frame,num,local,delta,put,short,offset,delta,break,case,frame,stack,map,table,entries,put,byte,frame,num,local,delta,put,short,offset,delta,put,abstract,types,3,previous,numlocal,3,num,local,break,case,frame,default,stack,map,table,entries,put,byte,frame,put,short,offset,delta,put,short,num,local,put,abstract,types,3,3,num,local,stack,map,table,entries,put,short,num,stack,put,abstract,types,3,num,local,3,num,local,num,stack
MethodWriter -> private void putFrame();1539119582;Compresses and writes {@link #currentFrame} in a new StackMapTable entry.;private void putFrame() {_    final int numLocal = currentFrame[1]__    final int numStack = currentFrame[2]__    if (symbolTable.getMajorVersion() < Opcodes.V1_6) {_      _      stackMapTableEntries.putShort(currentFrame[0]).putShort(numLocal)__      putAbstractTypes(3, 3 + numLocal)__      stackMapTableEntries.putShort(numStack)__      putAbstractTypes(3 + numLocal, 3 + numLocal + numStack)__      return__    }_    final int offsetDelta =_        stackMapTableNumberOfEntries == 0_            ? currentFrame[0]_            : currentFrame[0] - previousFrame[0] - 1__    final int previousNumlocal = previousFrame[1]__    final int numLocalDelta = numLocal - previousNumlocal__    int type = Frame.FULL_FRAME__    if (numStack == 0) {_      switch (numLocalDelta) {_        case -3:_        case -2:_        case -1:_          type = Frame.CHOP_FRAME__          break__        case 0:_          type = offsetDelta < 64 ? Frame.SAME_FRAME : Frame.SAME_FRAME_EXTENDED__          break__        case 1:_        case 2:_        case 3:_          type = Frame.APPEND_FRAME__          break__        default:_          _          break__      }_    } else if (numLocalDelta == 0 && numStack == 1) {_      type =_          offsetDelta < 63_              ? Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_              : Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED__    }_    if (type != Frame.FULL_FRAME) {_      _      int frameIndex = 3__      for (int i = 0_ i < previousNumlocal && i < numLocal_ i++) {_        if (currentFrame[frameIndex] != previousFrame[frameIndex]) {_          type = Frame.FULL_FRAME__          break__        }_        frameIndex++__      }_    }_    switch (type) {_      case Frame.SAME_FRAME:_        stackMapTableEntries.putByte(offsetDelta)__        break__      case Frame.SAME_LOCALS_1_STACK_ITEM_FRAME:_        stackMapTableEntries.putByte(Frame.SAME_LOCALS_1_STACK_ITEM_FRAME + offsetDelta)__        putAbstractTypes(3 + numLocal, 4 + numLocal)__        break__      case Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:_        stackMapTableEntries_            .putByte(Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED)_            .putShort(offsetDelta)__        putAbstractTypes(3 + numLocal, 4 + numLocal)__        break__      case Frame.SAME_FRAME_EXTENDED:_        stackMapTableEntries.putByte(Frame.SAME_FRAME_EXTENDED).putShort(offsetDelta)__        break__      case Frame.CHOP_FRAME:_        stackMapTableEntries_            .putByte(Frame.SAME_FRAME_EXTENDED + numLocalDelta)_            .putShort(offsetDelta)__        break__      case Frame.APPEND_FRAME:_        stackMapTableEntries_            .putByte(Frame.SAME_FRAME_EXTENDED + numLocalDelta)_            .putShort(offsetDelta)__        putAbstractTypes(3 + previousNumlocal, 3 + numLocal)__        break__      case Frame.FULL_FRAME:_      default:_        stackMapTableEntries.putByte(Frame.FULL_FRAME).putShort(offsetDelta).putShort(numLocal)__        putAbstractTypes(3, 3 + numLocal)__        stackMapTableEntries.putShort(numStack)__        putAbstractTypes(3 + numLocal, 3 + numLocal + numStack)__        break__    }_  };compresses,and,writes,link,current,frame,in,a,new,stack,map,table,entry;private,void,put,frame,final,int,num,local,current,frame,1,final,int,num,stack,current,frame,2,if,symbol,table,get,major,version,opcodes,stack,map,table,entries,put,short,current,frame,0,put,short,num,local,put,abstract,types,3,3,num,local,stack,map,table,entries,put,short,num,stack,put,abstract,types,3,num,local,3,num,local,num,stack,return,final,int,offset,delta,stack,map,table,number,of,entries,0,current,frame,0,current,frame,0,previous,frame,0,1,final,int,previous,numlocal,previous,frame,1,final,int,num,local,delta,num,local,previous,numlocal,int,type,frame,if,num,stack,0,switch,num,local,delta,case,3,case,2,case,1,type,frame,break,case,0,type,offset,delta,64,frame,frame,break,case,1,case,2,case,3,type,frame,break,default,break,else,if,num,local,delta,0,num,stack,1,type,offset,delta,63,frame,frame,if,type,frame,int,frame,index,3,for,int,i,0,i,previous,numlocal,i,num,local,i,if,current,frame,frame,index,previous,frame,frame,index,type,frame,break,frame,index,switch,type,case,frame,stack,map,table,entries,put,byte,offset,delta,break,case,frame,stack,map,table,entries,put,byte,frame,offset,delta,put,abstract,types,3,num,local,4,num,local,break,case,frame,stack,map,table,entries,put,byte,frame,put,short,offset,delta,put,abstract,types,3,num,local,4,num,local,break,case,frame,stack,map,table,entries,put,byte,frame,put,short,offset,delta,break,case,frame,stack,map,table,entries,put,byte,frame,num,local,delta,put,short,offset,delta,break,case,frame,stack,map,table,entries,put,byte,frame,num,local,delta,put,short,offset,delta,put,abstract,types,3,previous,numlocal,3,num,local,break,case,frame,default,stack,map,table,entries,put,byte,frame,put,short,offset,delta,put,short,num,local,put,abstract,types,3,3,num,local,stack,map,table,entries,put,short,num,stack,put,abstract,types,3,num,local,3,num,local,num,stack,break
MethodWriter -> private void noSuccessor();1366718246;Ends the current basic block. This method must be used in the case where_the current basic block does not have any successor.;private void noSuccessor() {_        if (compute == FRAMES) {_            Label l = new Label()__            l.frame = new Frame()__            l.frame.owner = l__            l.resolve(this, code.length, code.data)__            previousBlock.successor = l__            previousBlock = l__        } else {_            currentBlock.outputStackMax = maxStackSize__        }_        currentBlock = null__    };ends,the,current,basic,block,this,method,must,be,used,in,the,case,where,the,current,basic,block,does,not,have,any,successor;private,void,no,successor,if,compute,frames,label,l,new,label,l,frame,new,frame,l,frame,owner,l,l,resolve,this,code,length,code,data,previous,block,successor,l,previous,block,l,else,current,block,output,stack,max,max,stack,size,current,block,null
MethodWriter -> private void noSuccessor();1395273982;Ends the current basic block. This method must be used in the case where_the current basic block does not have any successor.;private void noSuccessor() {_        if (compute == FRAMES) {_            Label l = new Label()__            l.frame = new Frame()__            l.frame.owner = l__            l.resolve(this, code.length, code.data)__            previousBlock.successor = l__            previousBlock = l__        } else {_            currentBlock.outputStackMax = maxStackSize__        }_        currentBlock = null__    };ends,the,current,basic,block,this,method,must,be,used,in,the,case,where,the,current,basic,block,does,not,have,any,successor;private,void,no,successor,if,compute,frames,label,l,new,label,l,frame,new,frame,l,frame,owner,l,l,resolve,this,code,length,code,data,previous,block,successor,l,previous,block,l,else,current,block,output,stack,max,max,stack,size,current,block,null
MethodWriter -> private void noSuccessor();1395744691;Ends the current basic block. This method must be used in the case where_the current basic block does not have any successor.;private void noSuccessor() {_        if (compute == FRAMES) {_            Label l = new Label()__            l.frame = new Frame()__            l.frame.owner = l__            l.resolve(this, code.length, code.data)__            previousBlock.successor = l__            previousBlock = l__        } else {_            currentBlock.outputStackMax = maxStackSize__        }_        currentBlock = null__    };ends,the,current,basic,block,this,method,must,be,used,in,the,case,where,the,current,basic,block,does,not,have,any,successor;private,void,no,successor,if,compute,frames,label,l,new,label,l,frame,new,frame,l,frame,owner,l,l,resolve,this,code,length,code,data,previous,block,successor,l,previous,block,l,else,current,block,output,stack,max,max,stack,size,current,block,null
MethodWriter -> private void noSuccessor();1400531367;Ends the current basic block. This method must be used in the case where_the current basic block does not have any successor.;private void noSuccessor() {_        if (compute == FRAMES) {_            Label l = new Label()__            l.frame = new Frame()__            l.frame.owner = l__            l.resolve(this, code.length, code.data)__            previousBlock.successor = l__            previousBlock = l__        } else {_            currentBlock.outputStackMax = maxStackSize__        }_        currentBlock = null__    };ends,the,current,basic,block,this,method,must,be,used,in,the,case,where,the,current,basic,block,does,not,have,any,successor;private,void,no,successor,if,compute,frames,label,l,new,label,l,frame,new,frame,l,frame,owner,l,l,resolve,this,code,length,code,data,previous,block,successor,l,previous,block,l,else,current,block,output,stack,max,max,stack,size,current,block,null
MethodWriter -> private void noSuccessor();1431006084;Ends the current basic block. This method must be used in the case where_the current basic block does not have any successor.;private void noSuccessor() {_        if (compute == FRAMES) {_            Label l = new Label()__            l.frame = new Frame()__            l.frame.owner = l__            l.resolve(this, code.length, code.data)__            previousBlock.successor = l__            previousBlock = l__        } else {_            currentBlock.outputStackMax = maxStackSize__        }_        currentBlock = null__    };ends,the,current,basic,block,this,method,must,be,used,in,the,case,where,the,current,basic,block,does,not,have,any,successor;private,void,no,successor,if,compute,frames,label,l,new,label,l,frame,new,frame,l,frame,owner,l,l,resolve,this,code,length,code,data,previous,block,successor,l,previous,block,l,else,current,block,output,stack,max,max,stack,size,current,block,null
MethodWriter -> private void noSuccessor();1440705816;Ends the current basic block. This method must be used in the case where_the current basic block does not have any successor.;private void noSuccessor() {_        if (compute == FRAMES) {_            Label l = new Label()__            l.frame = new Frame()__            l.frame.owner = l__            l.resolve(this, code.length, code.data)__            previousBlock.successor = l__            previousBlock = l__        } else {_            currentBlock.outputStackMax = maxStackSize__        }_        currentBlock = null__    };ends,the,current,basic,block,this,method,must,be,used,in,the,case,where,the,current,basic,block,does,not,have,any,successor;private,void,no,successor,if,compute,frames,label,l,new,label,l,frame,new,frame,l,frame,owner,l,l,resolve,this,code,length,code,data,previous,block,successor,l,previous,block,l,else,current,block,output,stack,max,max,stack,size,current,block,null
MethodWriter -> private void noSuccessor();1483093254;Ends the current basic block. This method must be used in the case where_the current basic block does not have any successor.;private void noSuccessor() {_        if (compute == FRAMES) {_            Label l = new Label()__            l.frame = new Frame()__            l.frame.owner = l__            l.resolve(this, code.length, code.data)__            previousBlock.successor = l__            previousBlock = l__        } else {_            currentBlock.outputStackMax = maxStackSize__        }_        if (compute != INSERTED_FRAMES) {_            currentBlock = null__        }_    };ends,the,current,basic,block,this,method,must,be,used,in,the,case,where,the,current,basic,block,does,not,have,any,successor;private,void,no,successor,if,compute,frames,label,l,new,label,l,frame,new,frame,l,frame,owner,l,l,resolve,this,code,length,code,data,previous,block,successor,l,previous,block,l,else,current,block,output,stack,max,max,stack,size,if,compute,current,block,null
MethodWriter -> private void noSuccessor();1505821772;Ends the current basic block. This method must be used in the case where_the current basic block does not have any successor.;private void noSuccessor() {_        if (compute == FRAMES) {_            Label l = new Label()__            l.frame = new Frame()__            l.frame.owner = l__            l.resolve(this, code.length, code.data)__            previousBlock.successor = l__            previousBlock = l__        } else {_            currentBlock.outputStackMax = maxStackSize__        }_        if (compute != INSERTED_FRAMES) {_            currentBlock = null__        }_    };ends,the,current,basic,block,this,method,must,be,used,in,the,case,where,the,current,basic,block,does,not,have,any,successor;private,void,no,successor,if,compute,frames,label,l,new,label,l,frame,new,frame,l,frame,owner,l,l,resolve,this,code,length,code,data,previous,block,successor,l,previous,block,l,else,current,block,output,stack,max,max,stack,size,if,compute,current,block,null
MethodWriter -> private void visitImplicitFirstFrame();1366718246;Visit the implicit first frame of this method.;private void visitImplicitFirstFrame() {_        _        int frameIndex = startFrame(0, descriptor.length() + 1, 0)__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & ACC_CONSTRUCTOR) == 0) {_                frame[frameIndex++] = Frame.OBJECT | cw.addType(cw.thisName)__            } else {_                frame[frameIndex++] = 6_ _            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (descriptor.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                frame[frameIndex++] = 1_ _                break__            case 'F':_                frame[frameIndex++] = 2_ _                break__            case 'J':_                frame[frameIndex++] = 4_ _                break__            case 'D':_                frame[frameIndex++] = 3_ _                break__            case '[':_                while (descriptor.charAt(i) == '[') {_                    ++i__                }_                if (descriptor.charAt(i) == 'L') {_                    ++i__                    while (descriptor.charAt(i) != '_') {_                        ++i__                    }_                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j, ++i))__                break__            case 'L':_                while (descriptor.charAt(i) != '_') {_                    ++i__                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j + 1, i++))__                break__            default:_                break loop__            }_        }_        frame[1] = frameIndex - 3__        endFrame()__    };visit,the,implicit,first,frame,of,this,method;private,void,visit,implicit,first,frame,int,frame,index,start,frame,0,descriptor,length,1,0,if,access,opcodes,0,if,access,0,frame,frame,index,frame,object,cw,add,type,cw,this,name,else,frame,frame,index,6,int,i,1,loop,while,true,int,j,i,switch,descriptor,char,at,i,case,z,case,c,case,b,case,s,case,i,frame,frame,index,1,break,case,f,frame,frame,index,2,break,case,j,frame,frame,index,4,break,case,d,frame,frame,index,3,break,case,while,descriptor,char,at,i,i,if,descriptor,char,at,i,l,i,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,i,break,case,l,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,1,i,break,default,break,loop,frame,1,frame,index,3,end,frame
MethodWriter -> private void visitImplicitFirstFrame();1395273982;Visit the implicit first frame of this method.;private void visitImplicitFirstFrame() {_        _        int frameIndex = startFrame(0, descriptor.length() + 1, 0)__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & ACC_CONSTRUCTOR) == 0) {_                frame[frameIndex++] = Frame.OBJECT | cw.addType(cw.thisName)__            } else {_                frame[frameIndex++] = 6_ _            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (descriptor.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                frame[frameIndex++] = 1_ _                break__            case 'F':_                frame[frameIndex++] = 2_ _                break__            case 'J':_                frame[frameIndex++] = 4_ _                break__            case 'D':_                frame[frameIndex++] = 3_ _                break__            case '[':_                while (descriptor.charAt(i) == '[') {_                    ++i__                }_                if (descriptor.charAt(i) == 'L') {_                    ++i__                    while (descriptor.charAt(i) != '_') {_                        ++i__                    }_                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j, ++i))__                break__            case 'L':_                while (descriptor.charAt(i) != '_') {_                    ++i__                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j + 1, i++))__                break__            default:_                break loop__            }_        }_        frame[1] = frameIndex - 3__        endFrame()__    };visit,the,implicit,first,frame,of,this,method;private,void,visit,implicit,first,frame,int,frame,index,start,frame,0,descriptor,length,1,0,if,access,opcodes,0,if,access,0,frame,frame,index,frame,object,cw,add,type,cw,this,name,else,frame,frame,index,6,int,i,1,loop,while,true,int,j,i,switch,descriptor,char,at,i,case,z,case,c,case,b,case,s,case,i,frame,frame,index,1,break,case,f,frame,frame,index,2,break,case,j,frame,frame,index,4,break,case,d,frame,frame,index,3,break,case,while,descriptor,char,at,i,i,if,descriptor,char,at,i,l,i,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,i,break,case,l,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,1,i,break,default,break,loop,frame,1,frame,index,3,end,frame
MethodWriter -> private void visitImplicitFirstFrame();1395744691;Visit the implicit first frame of this method.;private void visitImplicitFirstFrame() {_        _        int frameIndex = startFrame(0, descriptor.length() + 1, 0)__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & ACC_CONSTRUCTOR) == 0) {_                frame[frameIndex++] = Frame.OBJECT | cw.addType(cw.thisName)__            } else {_                frame[frameIndex++] = 6_ _            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (descriptor.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                frame[frameIndex++] = 1_ _                break__            case 'F':_                frame[frameIndex++] = 2_ _                break__            case 'J':_                frame[frameIndex++] = 4_ _                break__            case 'D':_                frame[frameIndex++] = 3_ _                break__            case '[':_                while (descriptor.charAt(i) == '[') {_                    ++i__                }_                if (descriptor.charAt(i) == 'L') {_                    ++i__                    while (descriptor.charAt(i) != '_') {_                        ++i__                    }_                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j, ++i))__                break__            case 'L':_                while (descriptor.charAt(i) != '_') {_                    ++i__                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j + 1, i++))__                break__            default:_                break loop__            }_        }_        frame[1] = frameIndex - 3__        endFrame()__    };visit,the,implicit,first,frame,of,this,method;private,void,visit,implicit,first,frame,int,frame,index,start,frame,0,descriptor,length,1,0,if,access,opcodes,0,if,access,0,frame,frame,index,frame,object,cw,add,type,cw,this,name,else,frame,frame,index,6,int,i,1,loop,while,true,int,j,i,switch,descriptor,char,at,i,case,z,case,c,case,b,case,s,case,i,frame,frame,index,1,break,case,f,frame,frame,index,2,break,case,j,frame,frame,index,4,break,case,d,frame,frame,index,3,break,case,while,descriptor,char,at,i,i,if,descriptor,char,at,i,l,i,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,i,break,case,l,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,1,i,break,default,break,loop,frame,1,frame,index,3,end,frame
MethodWriter -> private void visitImplicitFirstFrame();1400531367;Visit the implicit first frame of this method.;private void visitImplicitFirstFrame() {_        _        int frameIndex = startFrame(0, descriptor.length() + 1, 0)__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & ACC_CONSTRUCTOR) == 0) {_                frame[frameIndex++] = Frame.OBJECT | cw.addType(cw.thisName)__            } else {_                frame[frameIndex++] = 6_ _            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (descriptor.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                frame[frameIndex++] = 1_ _                break__            case 'F':_                frame[frameIndex++] = 2_ _                break__            case 'J':_                frame[frameIndex++] = 4_ _                break__            case 'D':_                frame[frameIndex++] = 3_ _                break__            case '[':_                while (descriptor.charAt(i) == '[') {_                    ++i__                }_                if (descriptor.charAt(i) == 'L') {_                    ++i__                    while (descriptor.charAt(i) != '_') {_                        ++i__                    }_                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j, ++i))__                break__            case 'L':_                while (descriptor.charAt(i) != '_') {_                    ++i__                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j + 1, i++))__                break__            default:_                break loop__            }_        }_        frame[1] = frameIndex - 3__        endFrame()__    };visit,the,implicit,first,frame,of,this,method;private,void,visit,implicit,first,frame,int,frame,index,start,frame,0,descriptor,length,1,0,if,access,opcodes,0,if,access,0,frame,frame,index,frame,object,cw,add,type,cw,this,name,else,frame,frame,index,6,int,i,1,loop,while,true,int,j,i,switch,descriptor,char,at,i,case,z,case,c,case,b,case,s,case,i,frame,frame,index,1,break,case,f,frame,frame,index,2,break,case,j,frame,frame,index,4,break,case,d,frame,frame,index,3,break,case,while,descriptor,char,at,i,i,if,descriptor,char,at,i,l,i,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,i,break,case,l,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,1,i,break,default,break,loop,frame,1,frame,index,3,end,frame
MethodWriter -> private void visitImplicitFirstFrame();1431006084;Visit the implicit first frame of this method.;private void visitImplicitFirstFrame() {_        _        int frameIndex = startFrame(0, descriptor.length() + 1, 0)__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & ACC_CONSTRUCTOR) == 0) {_                frame[frameIndex++] = Frame.OBJECT | cw.addType(cw.thisName)__            } else {_                frame[frameIndex++] = 6_ _            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (descriptor.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                frame[frameIndex++] = 1_ _                break__            case 'F':_                frame[frameIndex++] = 2_ _                break__            case 'J':_                frame[frameIndex++] = 4_ _                break__            case 'D':_                frame[frameIndex++] = 3_ _                break__            case '[':_                while (descriptor.charAt(i) == '[') {_                    ++i__                }_                if (descriptor.charAt(i) == 'L') {_                    ++i__                    while (descriptor.charAt(i) != '_') {_                        ++i__                    }_                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j, ++i))__                break__            case 'L':_                while (descriptor.charAt(i) != '_') {_                    ++i__                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j + 1, i++))__                break__            default:_                break loop__            }_        }_        frame[1] = frameIndex - 3__        endFrame()__    };visit,the,implicit,first,frame,of,this,method;private,void,visit,implicit,first,frame,int,frame,index,start,frame,0,descriptor,length,1,0,if,access,opcodes,0,if,access,0,frame,frame,index,frame,object,cw,add,type,cw,this,name,else,frame,frame,index,6,int,i,1,loop,while,true,int,j,i,switch,descriptor,char,at,i,case,z,case,c,case,b,case,s,case,i,frame,frame,index,1,break,case,f,frame,frame,index,2,break,case,j,frame,frame,index,4,break,case,d,frame,frame,index,3,break,case,while,descriptor,char,at,i,i,if,descriptor,char,at,i,l,i,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,i,break,case,l,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,1,i,break,default,break,loop,frame,1,frame,index,3,end,frame
MethodWriter -> private void visitImplicitFirstFrame();1440705816;Visit the implicit first frame of this method.;private void visitImplicitFirstFrame() {_        _        int frameIndex = startFrame(0, descriptor.length() + 1, 0)__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & ACC_CONSTRUCTOR) == 0) {_                frame[frameIndex++] = Frame.OBJECT | cw.addType(cw.thisName)__            } else {_                frame[frameIndex++] = 6_ _            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (descriptor.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                frame[frameIndex++] = 1_ _                break__            case 'F':_                frame[frameIndex++] = 2_ _                break__            case 'J':_                frame[frameIndex++] = 4_ _                break__            case 'D':_                frame[frameIndex++] = 3_ _                break__            case '[':_                while (descriptor.charAt(i) == '[') {_                    ++i__                }_                if (descriptor.charAt(i) == 'L') {_                    ++i__                    while (descriptor.charAt(i) != '_') {_                        ++i__                    }_                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j, ++i))__                break__            case 'L':_                while (descriptor.charAt(i) != '_') {_                    ++i__                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j + 1, i++))__                break__            default:_                break loop__            }_        }_        frame[1] = frameIndex - 3__        endFrame()__    };visit,the,implicit,first,frame,of,this,method;private,void,visit,implicit,first,frame,int,frame,index,start,frame,0,descriptor,length,1,0,if,access,opcodes,0,if,access,0,frame,frame,index,frame,object,cw,add,type,cw,this,name,else,frame,frame,index,6,int,i,1,loop,while,true,int,j,i,switch,descriptor,char,at,i,case,z,case,c,case,b,case,s,case,i,frame,frame,index,1,break,case,f,frame,frame,index,2,break,case,j,frame,frame,index,4,break,case,d,frame,frame,index,3,break,case,while,descriptor,char,at,i,i,if,descriptor,char,at,i,l,i,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,i,break,case,l,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,1,i,break,default,break,loop,frame,1,frame,index,3,end,frame
MethodWriter -> private void visitImplicitFirstFrame();1483093254;Visit the implicit first frame of this method.;private void visitImplicitFirstFrame() {_        _        int frameIndex = startFrame(0, descriptor.length() + 1, 0)__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & ACC_CONSTRUCTOR) == 0) {_                frame[frameIndex++] = Frame.OBJECT | cw.addType(cw.thisName)__            } else {_                frame[frameIndex++] = 6_ _            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (descriptor.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                frame[frameIndex++] = 1_ _                break__            case 'F':_                frame[frameIndex++] = 2_ _                break__            case 'J':_                frame[frameIndex++] = 4_ _                break__            case 'D':_                frame[frameIndex++] = 3_ _                break__            case '[':_                while (descriptor.charAt(i) == '[') {_                    ++i__                }_                if (descriptor.charAt(i) == 'L') {_                    ++i__                    while (descriptor.charAt(i) != '_') {_                        ++i__                    }_                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j, ++i))__                break__            case 'L':_                while (descriptor.charAt(i) != '_') {_                    ++i__                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j + 1, i++))__                break__            default:_                break loop__            }_        }_        frame[1] = frameIndex - 3__        endFrame()__    };visit,the,implicit,first,frame,of,this,method;private,void,visit,implicit,first,frame,int,frame,index,start,frame,0,descriptor,length,1,0,if,access,opcodes,0,if,access,0,frame,frame,index,frame,object,cw,add,type,cw,this,name,else,frame,frame,index,6,int,i,1,loop,while,true,int,j,i,switch,descriptor,char,at,i,case,z,case,c,case,b,case,s,case,i,frame,frame,index,1,break,case,f,frame,frame,index,2,break,case,j,frame,frame,index,4,break,case,d,frame,frame,index,3,break,case,while,descriptor,char,at,i,i,if,descriptor,char,at,i,l,i,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,i,break,case,l,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,1,i,break,default,break,loop,frame,1,frame,index,3,end,frame
MethodWriter -> private void visitImplicitFirstFrame();1505821772;Visit the implicit first frame of this method.;private void visitImplicitFirstFrame() {_        _        int frameIndex = startFrame(0, descriptor.length() + 1, 0)__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & ACC_CONSTRUCTOR) == 0) {_                frame[frameIndex++] = Frame.OBJECT | cw.addType(cw.thisName)__            } else {_                frame[frameIndex++] = 6_ _            }_        }_        int i = 1__        loop: while (true) {_            int j = i__            switch (descriptor.charAt(i++)) {_            case 'Z':_            case 'C':_            case 'B':_            case 'S':_            case 'I':_                frame[frameIndex++] = 1_ _                break__            case 'F':_                frame[frameIndex++] = 2_ _                break__            case 'J':_                frame[frameIndex++] = 4_ _                break__            case 'D':_                frame[frameIndex++] = 3_ _                break__            case '[':_                while (descriptor.charAt(i) == '[') {_                    ++i__                }_                if (descriptor.charAt(i) == 'L') {_                    ++i__                    while (descriptor.charAt(i) != '_') {_                        ++i__                    }_                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j, ++i))__                break__            case 'L':_                while (descriptor.charAt(i) != '_') {_                    ++i__                }_                frame[frameIndex++] = Frame.OBJECT_                        | cw.addType(descriptor.substring(j + 1, i++))__                break__            default:_                break loop__            }_        }_        frame[1] = frameIndex - 3__        endFrame()__    };visit,the,implicit,first,frame,of,this,method;private,void,visit,implicit,first,frame,int,frame,index,start,frame,0,descriptor,length,1,0,if,access,opcodes,0,if,access,0,frame,frame,index,frame,object,cw,add,type,cw,this,name,else,frame,frame,index,6,int,i,1,loop,while,true,int,j,i,switch,descriptor,char,at,i,case,z,case,c,case,b,case,s,case,i,frame,frame,index,1,break,case,f,frame,frame,index,2,break,case,j,frame,frame,index,4,break,case,d,frame,frame,index,3,break,case,while,descriptor,char,at,i,i,if,descriptor,char,at,i,l,i,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,i,break,case,l,while,descriptor,char,at,i,i,frame,frame,index,frame,object,cw,add,type,descriptor,substring,j,1,i,break,default,break,loop,frame,1,frame,index,3,end,frame
MethodWriter -> private void writeFrame();1366718246;Compress and writes the current frame {@link #frame} in the StackMapTable_attribute.;private void writeFrame() {_        int clocalsSize = frame[1]__        int cstackSize = frame[2]__        if ((cw.version & 0xFFFF) < Opcodes.V1_6) {_            stackMap.putShort(frame[0]).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__            return__        }_        int localsSize = previousFrame[1]__        int type = FULL_FRAME__        int k = 0__        int delta__        if (frameCount == 0) {_            delta = frame[0]__        } else {_            delta = frame[0] - previousFrame[0] - 1__        }_        if (cstackSize == 0) {_            k = clocalsSize - localsSize__            switch (k) {_            case -3:_            case -2:_            case -1:_                type = CHOP_FRAME__                localsSize = clocalsSize__                break__            case 0:_                type = delta < 64 ? SAME_FRAME : SAME_FRAME_EXTENDED__                break__            case 1:_            case 2:_            case 3:_                type = APPEND_FRAME__                break__            }_        } else if (clocalsSize == localsSize && cstackSize == 1) {_            type = delta < 63 ? SAME_LOCALS_1_STACK_ITEM_FRAME_                    : SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED__        }_        if (type != FULL_FRAME) {_            _            int l = 3__            for (int j = 0_ j < localsSize_ j++) {_                if (frame[l] != previousFrame[l]) {_                    type = FULL_FRAME__                    break__                }_                l++__            }_        }_        switch (type) {_        case SAME_FRAME:_            stackMap.putByte(delta)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME + delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED).putShort(_                    delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_FRAME_EXTENDED:_            stackMap.putByte(SAME_FRAME_EXTENDED).putShort(delta)__            break__        case CHOP_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            break__        case APPEND_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            writeFrameTypes(3 + localsSize, 3 + clocalsSize)__            break__        _        default:_            stackMap.putByte(FULL_FRAME).putShort(delta).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__        }_    };compress,and,writes,the,current,frame,link,frame,in,the,stack,map,table,attribute;private,void,write,frame,int,clocals,size,frame,1,int,cstack,size,frame,2,if,cw,version,0x,ffff,opcodes,stack,map,put,short,frame,0,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size,return,int,locals,size,previous,frame,1,int,type,int,k,0,int,delta,if,frame,count,0,delta,frame,0,else,delta,frame,0,previous,frame,0,1,if,cstack,size,0,k,clocals,size,locals,size,switch,k,case,3,case,2,case,1,type,locals,size,clocals,size,break,case,0,type,delta,64,break,case,1,case,2,case,3,type,break,else,if,clocals,size,locals,size,cstack,size,1,type,delta,63,if,type,int,l,3,for,int,j,0,j,locals,size,j,if,frame,l,previous,frame,l,type,break,l,switch,type,case,stack,map,put,byte,delta,break,case,stack,map,put,byte,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,write,frame,types,3,locals,size,3,clocals,size,break,default,stack,map,put,byte,put,short,delta,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size
MethodWriter -> private void writeFrame();1395273982;Compress and writes the current frame {@link #frame} in the StackMapTable_attribute.;private void writeFrame() {_        int clocalsSize = frame[1]__        int cstackSize = frame[2]__        if ((cw.version & 0xFFFF) < Opcodes.V1_6) {_            stackMap.putShort(frame[0]).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__            return__        }_        int localsSize = previousFrame[1]__        int type = FULL_FRAME__        int k = 0__        int delta__        if (frameCount == 0) {_            delta = frame[0]__        } else {_            delta = frame[0] - previousFrame[0] - 1__        }_        if (cstackSize == 0) {_            k = clocalsSize - localsSize__            switch (k) {_            case -3:_            case -2:_            case -1:_                type = CHOP_FRAME__                localsSize = clocalsSize__                break__            case 0:_                type = delta < 64 ? SAME_FRAME : SAME_FRAME_EXTENDED__                break__            case 1:_            case 2:_            case 3:_                type = APPEND_FRAME__                break__            }_        } else if (clocalsSize == localsSize && cstackSize == 1) {_            type = delta < 63 ? SAME_LOCALS_1_STACK_ITEM_FRAME_                    : SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED__        }_        if (type != FULL_FRAME) {_            _            int l = 3__            for (int j = 0_ j < localsSize_ j++) {_                if (frame[l] != previousFrame[l]) {_                    type = FULL_FRAME__                    break__                }_                l++__            }_        }_        switch (type) {_        case SAME_FRAME:_            stackMap.putByte(delta)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME + delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED).putShort(_                    delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_FRAME_EXTENDED:_            stackMap.putByte(SAME_FRAME_EXTENDED).putShort(delta)__            break__        case CHOP_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            break__        case APPEND_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            writeFrameTypes(3 + localsSize, 3 + clocalsSize)__            break__        _        default:_            stackMap.putByte(FULL_FRAME).putShort(delta).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__        }_    };compress,and,writes,the,current,frame,link,frame,in,the,stack,map,table,attribute;private,void,write,frame,int,clocals,size,frame,1,int,cstack,size,frame,2,if,cw,version,0x,ffff,opcodes,stack,map,put,short,frame,0,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size,return,int,locals,size,previous,frame,1,int,type,int,k,0,int,delta,if,frame,count,0,delta,frame,0,else,delta,frame,0,previous,frame,0,1,if,cstack,size,0,k,clocals,size,locals,size,switch,k,case,3,case,2,case,1,type,locals,size,clocals,size,break,case,0,type,delta,64,break,case,1,case,2,case,3,type,break,else,if,clocals,size,locals,size,cstack,size,1,type,delta,63,if,type,int,l,3,for,int,j,0,j,locals,size,j,if,frame,l,previous,frame,l,type,break,l,switch,type,case,stack,map,put,byte,delta,break,case,stack,map,put,byte,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,write,frame,types,3,locals,size,3,clocals,size,break,default,stack,map,put,byte,put,short,delta,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size
MethodWriter -> private void writeFrame();1395744691;Compress and writes the current frame {@link #frame} in the StackMapTable_attribute.;private void writeFrame() {_        int clocalsSize = frame[1]__        int cstackSize = frame[2]__        if ((cw.version & 0xFFFF) < Opcodes.V1_6) {_            stackMap.putShort(frame[0]).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__            return__        }_        int localsSize = previousFrame[1]__        int type = FULL_FRAME__        int k = 0__        int delta__        if (frameCount == 0) {_            delta = frame[0]__        } else {_            delta = frame[0] - previousFrame[0] - 1__        }_        if (cstackSize == 0) {_            k = clocalsSize - localsSize__            switch (k) {_            case -3:_            case -2:_            case -1:_                type = CHOP_FRAME__                localsSize = clocalsSize__                break__            case 0:_                type = delta < 64 ? SAME_FRAME : SAME_FRAME_EXTENDED__                break__            case 1:_            case 2:_            case 3:_                type = APPEND_FRAME__                break__            }_        } else if (clocalsSize == localsSize && cstackSize == 1) {_            type = delta < 63 ? SAME_LOCALS_1_STACK_ITEM_FRAME_                    : SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED__        }_        if (type != FULL_FRAME) {_            _            int l = 3__            for (int j = 0_ j < localsSize_ j++) {_                if (frame[l] != previousFrame[l]) {_                    type = FULL_FRAME__                    break__                }_                l++__            }_        }_        switch (type) {_        case SAME_FRAME:_            stackMap.putByte(delta)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME + delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED).putShort(_                    delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_FRAME_EXTENDED:_            stackMap.putByte(SAME_FRAME_EXTENDED).putShort(delta)__            break__        case CHOP_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            break__        case APPEND_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            writeFrameTypes(3 + localsSize, 3 + clocalsSize)__            break__        _        default:_            stackMap.putByte(FULL_FRAME).putShort(delta).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__        }_    };compress,and,writes,the,current,frame,link,frame,in,the,stack,map,table,attribute;private,void,write,frame,int,clocals,size,frame,1,int,cstack,size,frame,2,if,cw,version,0x,ffff,opcodes,stack,map,put,short,frame,0,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size,return,int,locals,size,previous,frame,1,int,type,int,k,0,int,delta,if,frame,count,0,delta,frame,0,else,delta,frame,0,previous,frame,0,1,if,cstack,size,0,k,clocals,size,locals,size,switch,k,case,3,case,2,case,1,type,locals,size,clocals,size,break,case,0,type,delta,64,break,case,1,case,2,case,3,type,break,else,if,clocals,size,locals,size,cstack,size,1,type,delta,63,if,type,int,l,3,for,int,j,0,j,locals,size,j,if,frame,l,previous,frame,l,type,break,l,switch,type,case,stack,map,put,byte,delta,break,case,stack,map,put,byte,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,write,frame,types,3,locals,size,3,clocals,size,break,default,stack,map,put,byte,put,short,delta,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size
MethodWriter -> private void writeFrame();1400531367;Compress and writes the current frame {@link #frame} in the StackMapTable_attribute.;private void writeFrame() {_        int clocalsSize = frame[1]__        int cstackSize = frame[2]__        if ((cw.version & 0xFFFF) < Opcodes.V1_6) {_            stackMap.putShort(frame[0]).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__            return__        }_        int localsSize = previousFrame[1]__        int type = FULL_FRAME__        int k = 0__        int delta__        if (frameCount == 0) {_            delta = frame[0]__        } else {_            delta = frame[0] - previousFrame[0] - 1__        }_        if (cstackSize == 0) {_            k = clocalsSize - localsSize__            switch (k) {_            case -3:_            case -2:_            case -1:_                type = CHOP_FRAME__                localsSize = clocalsSize__                break__            case 0:_                type = delta < 64 ? SAME_FRAME : SAME_FRAME_EXTENDED__                break__            case 1:_            case 2:_            case 3:_                type = APPEND_FRAME__                break__            }_        } else if (clocalsSize == localsSize && cstackSize == 1) {_            type = delta < 63 ? SAME_LOCALS_1_STACK_ITEM_FRAME_                    : SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED__        }_        if (type != FULL_FRAME) {_            _            int l = 3__            for (int j = 0_ j < localsSize_ j++) {_                if (frame[l] != previousFrame[l]) {_                    type = FULL_FRAME__                    break__                }_                l++__            }_        }_        switch (type) {_        case SAME_FRAME:_            stackMap.putByte(delta)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME + delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED).putShort(_                    delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_FRAME_EXTENDED:_            stackMap.putByte(SAME_FRAME_EXTENDED).putShort(delta)__            break__        case CHOP_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            break__        case APPEND_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            writeFrameTypes(3 + localsSize, 3 + clocalsSize)__            break__        _        default:_            stackMap.putByte(FULL_FRAME).putShort(delta).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__        }_    };compress,and,writes,the,current,frame,link,frame,in,the,stack,map,table,attribute;private,void,write,frame,int,clocals,size,frame,1,int,cstack,size,frame,2,if,cw,version,0x,ffff,opcodes,stack,map,put,short,frame,0,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size,return,int,locals,size,previous,frame,1,int,type,int,k,0,int,delta,if,frame,count,0,delta,frame,0,else,delta,frame,0,previous,frame,0,1,if,cstack,size,0,k,clocals,size,locals,size,switch,k,case,3,case,2,case,1,type,locals,size,clocals,size,break,case,0,type,delta,64,break,case,1,case,2,case,3,type,break,else,if,clocals,size,locals,size,cstack,size,1,type,delta,63,if,type,int,l,3,for,int,j,0,j,locals,size,j,if,frame,l,previous,frame,l,type,break,l,switch,type,case,stack,map,put,byte,delta,break,case,stack,map,put,byte,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,write,frame,types,3,locals,size,3,clocals,size,break,default,stack,map,put,byte,put,short,delta,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size
MethodWriter -> private void writeFrame();1431006084;Compress and writes the current frame {@link #frame} in the StackMapTable_attribute.;private void writeFrame() {_        int clocalsSize = frame[1]__        int cstackSize = frame[2]__        if ((cw.version & 0xFFFF) < Opcodes.V1_6) {_            stackMap.putShort(frame[0]).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__            return__        }_        int localsSize = previousFrame[1]__        int type = FULL_FRAME__        int k = 0__        int delta__        if (frameCount == 0) {_            delta = frame[0]__        } else {_            delta = frame[0] - previousFrame[0] - 1__        }_        if (cstackSize == 0) {_            k = clocalsSize - localsSize__            switch (k) {_            case -3:_            case -2:_            case -1:_                type = CHOP_FRAME__                localsSize = clocalsSize__                break__            case 0:_                type = delta < 64 ? SAME_FRAME : SAME_FRAME_EXTENDED__                break__            case 1:_            case 2:_            case 3:_                type = APPEND_FRAME__                break__            }_        } else if (clocalsSize == localsSize && cstackSize == 1) {_            type = delta < 63 ? SAME_LOCALS_1_STACK_ITEM_FRAME_                    : SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED__        }_        if (type != FULL_FRAME) {_            _            int l = 3__            for (int j = 0_ j < localsSize_ j++) {_                if (frame[l] != previousFrame[l]) {_                    type = FULL_FRAME__                    break__                }_                l++__            }_        }_        switch (type) {_        case SAME_FRAME:_            stackMap.putByte(delta)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME + delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED).putShort(_                    delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_FRAME_EXTENDED:_            stackMap.putByte(SAME_FRAME_EXTENDED).putShort(delta)__            break__        case CHOP_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            break__        case APPEND_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            writeFrameTypes(3 + localsSize, 3 + clocalsSize)__            break__        _        default:_            stackMap.putByte(FULL_FRAME).putShort(delta).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__        }_    };compress,and,writes,the,current,frame,link,frame,in,the,stack,map,table,attribute;private,void,write,frame,int,clocals,size,frame,1,int,cstack,size,frame,2,if,cw,version,0x,ffff,opcodes,stack,map,put,short,frame,0,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size,return,int,locals,size,previous,frame,1,int,type,int,k,0,int,delta,if,frame,count,0,delta,frame,0,else,delta,frame,0,previous,frame,0,1,if,cstack,size,0,k,clocals,size,locals,size,switch,k,case,3,case,2,case,1,type,locals,size,clocals,size,break,case,0,type,delta,64,break,case,1,case,2,case,3,type,break,else,if,clocals,size,locals,size,cstack,size,1,type,delta,63,if,type,int,l,3,for,int,j,0,j,locals,size,j,if,frame,l,previous,frame,l,type,break,l,switch,type,case,stack,map,put,byte,delta,break,case,stack,map,put,byte,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,write,frame,types,3,locals,size,3,clocals,size,break,default,stack,map,put,byte,put,short,delta,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size
MethodWriter -> private void writeFrame();1440705816;Compress and writes the current frame {@link #frame} in the StackMapTable_attribute.;private void writeFrame() {_        int clocalsSize = frame[1]__        int cstackSize = frame[2]__        if ((cw.version & 0xFFFF) < Opcodes.V1_6) {_            stackMap.putShort(frame[0]).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__            return__        }_        int localsSize = previousFrame[1]__        int type = FULL_FRAME__        int k = 0__        int delta__        if (frameCount == 0) {_            delta = frame[0]__        } else {_            delta = frame[0] - previousFrame[0] - 1__        }_        if (cstackSize == 0) {_            k = clocalsSize - localsSize__            switch (k) {_            case -3:_            case -2:_            case -1:_                type = CHOP_FRAME__                localsSize = clocalsSize__                break__            case 0:_                type = delta < 64 ? SAME_FRAME : SAME_FRAME_EXTENDED__                break__            case 1:_            case 2:_            case 3:_                type = APPEND_FRAME__                break__            }_        } else if (clocalsSize == localsSize && cstackSize == 1) {_            type = delta < 63 ? SAME_LOCALS_1_STACK_ITEM_FRAME_                    : SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED__        }_        if (type != FULL_FRAME) {_            _            int l = 3__            for (int j = 0_ j < localsSize_ j++) {_                if (frame[l] != previousFrame[l]) {_                    type = FULL_FRAME__                    break__                }_                l++__            }_        }_        switch (type) {_        case SAME_FRAME:_            stackMap.putByte(delta)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME + delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED).putShort(_                    delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_FRAME_EXTENDED:_            stackMap.putByte(SAME_FRAME_EXTENDED).putShort(delta)__            break__        case CHOP_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            break__        case APPEND_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            writeFrameTypes(3 + localsSize, 3 + clocalsSize)__            break__        _        default:_            stackMap.putByte(FULL_FRAME).putShort(delta).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__        }_    };compress,and,writes,the,current,frame,link,frame,in,the,stack,map,table,attribute;private,void,write,frame,int,clocals,size,frame,1,int,cstack,size,frame,2,if,cw,version,0x,ffff,opcodes,stack,map,put,short,frame,0,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size,return,int,locals,size,previous,frame,1,int,type,int,k,0,int,delta,if,frame,count,0,delta,frame,0,else,delta,frame,0,previous,frame,0,1,if,cstack,size,0,k,clocals,size,locals,size,switch,k,case,3,case,2,case,1,type,locals,size,clocals,size,break,case,0,type,delta,64,break,case,1,case,2,case,3,type,break,else,if,clocals,size,locals,size,cstack,size,1,type,delta,63,if,type,int,l,3,for,int,j,0,j,locals,size,j,if,frame,l,previous,frame,l,type,break,l,switch,type,case,stack,map,put,byte,delta,break,case,stack,map,put,byte,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,write,frame,types,3,locals,size,3,clocals,size,break,default,stack,map,put,byte,put,short,delta,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size
MethodWriter -> private void writeFrame();1483093254;Compress and writes the current frame {@link #frame} in the StackMapTable_attribute.;private void writeFrame() {_        int clocalsSize = frame[1]__        int cstackSize = frame[2]__        if ((cw.version & 0xFFFF) < Opcodes.V1_6) {_            stackMap.putShort(frame[0]).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__            return__        }_        int localsSize = previousFrame[1]__        int type = FULL_FRAME__        int k = 0__        int delta__        if (frameCount == 0) {_            delta = frame[0]__        } else {_            delta = frame[0] - previousFrame[0] - 1__        }_        if (cstackSize == 0) {_            k = clocalsSize - localsSize__            switch (k) {_            case -3:_            case -2:_            case -1:_                type = CHOP_FRAME__                localsSize = clocalsSize__                break__            case 0:_                type = delta < 64 ? SAME_FRAME : SAME_FRAME_EXTENDED__                break__            case 1:_            case 2:_            case 3:_                type = APPEND_FRAME__                break__            }_        } else if (clocalsSize == localsSize && cstackSize == 1) {_            type = delta < 63 ? SAME_LOCALS_1_STACK_ITEM_FRAME_                    : SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED__        }_        if (type != FULL_FRAME) {_            _            int l = 3__            for (int j = 0_ j < localsSize_ j++) {_                if (frame[l] != previousFrame[l]) {_                    type = FULL_FRAME__                    break__                }_                l++__            }_        }_        switch (type) {_        case SAME_FRAME:_            stackMap.putByte(delta)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME + delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED).putShort(_                    delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_FRAME_EXTENDED:_            stackMap.putByte(SAME_FRAME_EXTENDED).putShort(delta)__            break__        case CHOP_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            break__        case APPEND_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            writeFrameTypes(3 + localsSize, 3 + clocalsSize)__            break__        _        default:_            stackMap.putByte(FULL_FRAME).putShort(delta).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__        }_    };compress,and,writes,the,current,frame,link,frame,in,the,stack,map,table,attribute;private,void,write,frame,int,clocals,size,frame,1,int,cstack,size,frame,2,if,cw,version,0x,ffff,opcodes,stack,map,put,short,frame,0,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size,return,int,locals,size,previous,frame,1,int,type,int,k,0,int,delta,if,frame,count,0,delta,frame,0,else,delta,frame,0,previous,frame,0,1,if,cstack,size,0,k,clocals,size,locals,size,switch,k,case,3,case,2,case,1,type,locals,size,clocals,size,break,case,0,type,delta,64,break,case,1,case,2,case,3,type,break,else,if,clocals,size,locals,size,cstack,size,1,type,delta,63,if,type,int,l,3,for,int,j,0,j,locals,size,j,if,frame,l,previous,frame,l,type,break,l,switch,type,case,stack,map,put,byte,delta,break,case,stack,map,put,byte,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,write,frame,types,3,locals,size,3,clocals,size,break,default,stack,map,put,byte,put,short,delta,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size
MethodWriter -> private void writeFrame();1505821772;Compress and writes the current frame {@link #frame} in the StackMapTable_attribute.;private void writeFrame() {_        int clocalsSize = frame[1]__        int cstackSize = frame[2]__        if ((cw.version & 0xFFFF) < Opcodes.V1_6) {_            stackMap.putShort(frame[0]).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__            return__        }_        int localsSize = previousFrame[1]__        int type = FULL_FRAME__        int k = 0__        int delta__        if (frameCount == 0) {_            delta = frame[0]__        } else {_            delta = frame[0] - previousFrame[0] - 1__        }_        if (cstackSize == 0) {_            k = clocalsSize - localsSize__            switch (k) {_            case -3:_            case -2:_            case -1:_                type = CHOP_FRAME__                localsSize = clocalsSize__                break__            case 0:_                type = delta < 64 ? SAME_FRAME : SAME_FRAME_EXTENDED__                break__            case 1:_            case 2:_            case 3:_                type = APPEND_FRAME__                break__            }_        } else if (clocalsSize == localsSize && cstackSize == 1) {_            type = delta < 63 ? SAME_LOCALS_1_STACK_ITEM_FRAME_                    : SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED__        }_        if (type != FULL_FRAME) {_            _            int l = 3__            for (int j = 0_ j < localsSize_ j++) {_                if (frame[l] != previousFrame[l]) {_                    type = FULL_FRAME__                    break__                }_                l++__            }_        }_        switch (type) {_        case SAME_FRAME:_            stackMap.putByte(delta)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME + delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:_            stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED).putShort(_                    delta)__            writeFrameTypes(3 + clocalsSize, 4 + clocalsSize)__            break__        case SAME_FRAME_EXTENDED:_            stackMap.putByte(SAME_FRAME_EXTENDED).putShort(delta)__            break__        case CHOP_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            break__        case APPEND_FRAME:_            stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta)__            writeFrameTypes(3 + localsSize, 3 + clocalsSize)__            break__        _        default:_            stackMap.putByte(FULL_FRAME).putShort(delta).putShort(clocalsSize)__            writeFrameTypes(3, 3 + clocalsSize)__            stackMap.putShort(cstackSize)__            writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize)__        }_    };compress,and,writes,the,current,frame,link,frame,in,the,stack,map,table,attribute;private,void,write,frame,int,clocals,size,frame,1,int,cstack,size,frame,2,if,cw,version,0x,ffff,opcodes,stack,map,put,short,frame,0,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size,return,int,locals,size,previous,frame,1,int,type,int,k,0,int,delta,if,frame,count,0,delta,frame,0,else,delta,frame,0,previous,frame,0,1,if,cstack,size,0,k,clocals,size,locals,size,switch,k,case,3,case,2,case,1,type,locals,size,clocals,size,break,case,0,type,delta,64,break,case,1,case,2,case,3,type,break,else,if,clocals,size,locals,size,cstack,size,1,type,delta,63,if,type,int,l,3,for,int,j,0,j,locals,size,j,if,frame,l,previous,frame,l,type,break,l,switch,type,case,stack,map,put,byte,delta,break,case,stack,map,put,byte,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,write,frame,types,3,clocals,size,4,clocals,size,break,case,stack,map,put,byte,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,break,case,stack,map,put,byte,k,put,short,delta,write,frame,types,3,locals,size,3,clocals,size,break,default,stack,map,put,byte,put,short,delta,put,short,clocals,size,write,frame,types,3,3,clocals,size,stack,map,put,short,cstack,size,write,frame,types,3,clocals,size,3,clocals,size,cstack,size
