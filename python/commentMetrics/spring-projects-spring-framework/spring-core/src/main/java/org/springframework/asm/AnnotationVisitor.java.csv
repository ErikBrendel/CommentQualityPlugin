# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationVisitor -> public void visitEnum(String name, String desc, String value);1366718246;Visits an enumeration value of the annotation.__@param name_the value name._@param desc_the class descriptor of the enumeration class._@param value_the actual enumeration value.;public void visitEnum(String name, String desc, String value) {_        if (av != null) {_            av.visitEnum(name, desc, value)__        }_    };visits,an,enumeration,value,of,the,annotation,param,name,the,value,name,param,desc,the,class,descriptor,of,the,enumeration,class,param,value,the,actual,enumeration,value;public,void,visit,enum,string,name,string,desc,string,value,if,av,null,av,visit,enum,name,desc,value
AnnotationVisitor -> public void visitEnum(String name, String desc, String value);1395273982;Visits an enumeration value of the annotation.__@param name_the value name._@param desc_the class descriptor of the enumeration class._@param value_the actual enumeration value.;public void visitEnum(String name, String desc, String value) {_        if (av != null) {_            av.visitEnum(name, desc, value)__        }_    };visits,an,enumeration,value,of,the,annotation,param,name,the,value,name,param,desc,the,class,descriptor,of,the,enumeration,class,param,value,the,actual,enumeration,value;public,void,visit,enum,string,name,string,desc,string,value,if,av,null,av,visit,enum,name,desc,value
AnnotationVisitor -> public void visitEnum(String name, String desc, String value);1483093254;Visits an enumeration value of the annotation.__@param name_the value name._@param desc_the class descriptor of the enumeration class._@param value_the actual enumeration value.;public void visitEnum(String name, String desc, String value) {_        if (av != null) {_            av.visitEnum(name, desc, value)__        }_    };visits,an,enumeration,value,of,the,annotation,param,name,the,value,name,param,desc,the,class,descriptor,of,the,enumeration,class,param,value,the,actual,enumeration,value;public,void,visit,enum,string,name,string,desc,string,value,if,av,null,av,visit,enum,name,desc,value
AnnotationVisitor -> public void visitEnum(String name, String desc, String value);1505821772;Visits an enumeration value of the annotation.__@param name_the value name._@param desc_the class descriptor of the enumeration class._@param value_the actual enumeration value.;public void visitEnum(String name, String desc, String value) {_        if (av != null) {_            av.visitEnum(name, desc, value)__        }_    };visits,an,enumeration,value,of,the,annotation,param,name,the,value,name,param,desc,the,class,descriptor,of,the,enumeration,class,param,value,the,actual,enumeration,value;public,void,visit,enum,string,name,string,desc,string,value,if,av,null,av,visit,enum,name,desc,value
AnnotationVisitor -> public AnnotationVisitor(final int api, final AnnotationVisitor annotationVisitor);1531241461;Constructs a new {@link AnnotationVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link_Opcodes#ASM7_EXPERIMENTAL}._@param annotationVisitor the annotation visitor to which this visitor must delegate method_calls. May be null.;public AnnotationVisitor(final int api, final AnnotationVisitor annotationVisitor) {_    if (api != Opcodes.ASM6_        && api != Opcodes.ASM5_        && api != Opcodes.ASM4_        && api != Opcodes.ASM7_EXPERIMENTAL) {_      throw new IllegalArgumentException()__    }_    this.api = api__    this.av = annotationVisitor__  };constructs,a,new,link,annotation,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes,param,annotation,visitor,the,annotation,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,annotation,visitor,final,int,api,final,annotation,visitor,annotation,visitor,if,api,opcodes,asm6,api,opcodes,asm5,api,opcodes,asm4,api,opcodes,throw,new,illegal,argument,exception,this,api,api,this,av,annotation,visitor
AnnotationVisitor -> public AnnotationVisitor(final int api, final AnnotationVisitor annotationVisitor);1536664245;Constructs a new {@link AnnotationVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}._@param annotationVisitor the annotation visitor to which this visitor must delegate method_calls. May be null.;public AnnotationVisitor(final int api, final AnnotationVisitor annotationVisitor) {_    if (api != Opcodes.ASM6 && api != Opcodes.ASM5 && api != Opcodes.ASM4 && api != Opcodes.ASM7) {_      throw new IllegalArgumentException()__    }_    this.api = api__    this.av = annotationVisitor__  };constructs,a,new,link,annotation,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes,asm7,param,annotation,visitor,the,annotation,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,annotation,visitor,final,int,api,final,annotation,visitor,annotation,visitor,if,api,opcodes,asm6,api,opcodes,asm5,api,opcodes,asm4,api,opcodes,asm7,throw,new,illegal,argument,exception,this,api,api,this,av,annotation,visitor
AnnotationVisitor -> public AnnotationVisitor visitAnnotation(final String name, final String descriptor);1531241461;Visits a nested annotation value of the annotation.__@param name the value name._@param descriptor the class descriptor of the nested annotation class._@return a visitor to visit the actual nested annotation value, or <tt>null</tt> if this visitor_is not interested in visiting this nested annotation. <i>The nested annotation value must_be fully visited before calling other methods on this annotation visitor</i>.;public AnnotationVisitor visitAnnotation(final String name, final String descriptor) {_    if (av != null) {_      return av.visitAnnotation(name, descriptor)__    }_    return null__  };visits,a,nested,annotation,value,of,the,annotation,param,name,the,value,name,param,descriptor,the,class,descriptor,of,the,nested,annotation,class,return,a,visitor,to,visit,the,actual,nested,annotation,value,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,nested,annotation,i,the,nested,annotation,value,must,be,fully,visited,before,calling,other,methods,on,this,annotation,visitor,i;public,annotation,visitor,visit,annotation,final,string,name,final,string,descriptor,if,av,null,return,av,visit,annotation,name,descriptor,return,null
AnnotationVisitor -> public AnnotationVisitor visitAnnotation(final String name, final String descriptor);1536664245;Visits a nested annotation value of the annotation.__@param name the value name._@param descriptor the class descriptor of the nested annotation class._@return a visitor to visit the actual nested annotation value, or {@literal null} if this_visitor is not interested in visiting this nested annotation. <i>The nested annotation_value must be fully visited before calling other methods on this annotation visitor</i>.;public AnnotationVisitor visitAnnotation(final String name, final String descriptor) {_    if (av != null) {_      return av.visitAnnotation(name, descriptor)__    }_    return null__  };visits,a,nested,annotation,value,of,the,annotation,param,name,the,value,name,param,descriptor,the,class,descriptor,of,the,nested,annotation,class,return,a,visitor,to,visit,the,actual,nested,annotation,value,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,nested,annotation,i,the,nested,annotation,value,must,be,fully,visited,before,calling,other,methods,on,this,annotation,visitor,i;public,annotation,visitor,visit,annotation,final,string,name,final,string,descriptor,if,av,null,return,av,visit,annotation,name,descriptor,return,null
AnnotationVisitor -> public AnnotationVisitor(final int api, final AnnotationVisitor av);1366718246;Constructs a new {@link AnnotationVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}._@param av_the annotation visitor to which this visitor must delegate_method calls. May be null.;public AnnotationVisitor(final int api, final AnnotationVisitor av) {_        if (api != Opcodes.ASM4) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.av = av__    };constructs,a,new,link,annotation,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,param,av,the,annotation,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,annotation,visitor,final,int,api,final,annotation,visitor,av,if,api,opcodes,asm4,throw,new,illegal,argument,exception,this,api,api,this,av,av
AnnotationVisitor -> public AnnotationVisitor(final int api, final AnnotationVisitor av);1395273982;Constructs a new {@link AnnotationVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}._@param av_the annotation visitor to which this visitor must delegate_method calls. May be null.;public AnnotationVisitor(final int api, final AnnotationVisitor av) {_        if (api != Opcodes.ASM4 && api != Opcodes.ASM5) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.av = av__    };constructs,a,new,link,annotation,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5,param,av,the,annotation,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,annotation,visitor,final,int,api,final,annotation,visitor,av,if,api,opcodes,asm4,api,opcodes,asm5,throw,new,illegal,argument,exception,this,api,api,this,av,av
AnnotationVisitor -> public AnnotationVisitor(final int api, final AnnotationVisitor av);1483093254;Constructs a new {@link AnnotationVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}._@param av_the annotation visitor to which this visitor must delegate_method calls. May be null.;public AnnotationVisitor(final int api, final AnnotationVisitor av) {_        if (api != Opcodes.ASM4 && api != Opcodes.ASM5) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.av = av__    };constructs,a,new,link,annotation,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5,param,av,the,annotation,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,annotation,visitor,final,int,api,final,annotation,visitor,av,if,api,opcodes,asm4,api,opcodes,asm5,throw,new,illegal,argument,exception,this,api,api,this,av,av
AnnotationVisitor -> public AnnotationVisitor(final int api, final AnnotationVisitor av);1505821772;Constructs a new {@link AnnotationVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}._@param av_the annotation visitor to which this visitor must delegate_method calls. May be null.;public AnnotationVisitor(final int api, final AnnotationVisitor av) {_        if (api < Opcodes.ASM4 || api > Opcodes.ASM6) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.av = av__    };constructs,a,new,link,annotation,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,or,link,opcodes,asm6,param,av,the,annotation,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,annotation,visitor,final,int,api,final,annotation,visitor,av,if,api,opcodes,asm4,api,opcodes,asm6,throw,new,illegal,argument,exception,this,api,api,this,av,av
AnnotationVisitor -> public AnnotationVisitor visitAnnotation(String name, String desc);1366718246;Visits a nested annotation value of the annotation.__@param name_the value name._@param desc_the class descriptor of the nested annotation class._@return a visitor to visit the actual nested annotation value, or_<tt>null</tt> if this visitor is not interested in visiting this_nested annotation. <i>The nested annotation value must be fully_visited before calling other methods on this annotation_visitor</i>.;public AnnotationVisitor visitAnnotation(String name, String desc) {_        if (av != null) {_            return av.visitAnnotation(name, desc)__        }_        return null__    };visits,a,nested,annotation,value,of,the,annotation,param,name,the,value,name,param,desc,the,class,descriptor,of,the,nested,annotation,class,return,a,visitor,to,visit,the,actual,nested,annotation,value,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,nested,annotation,i,the,nested,annotation,value,must,be,fully,visited,before,calling,other,methods,on,this,annotation,visitor,i;public,annotation,visitor,visit,annotation,string,name,string,desc,if,av,null,return,av,visit,annotation,name,desc,return,null
AnnotationVisitor -> public AnnotationVisitor visitAnnotation(String name, String desc);1395273982;Visits a nested annotation value of the annotation.__@param name_the value name._@param desc_the class descriptor of the nested annotation class._@return a visitor to visit the actual nested annotation value, or_<tt>null</tt> if this visitor is not interested in visiting this_nested annotation. <i>The nested annotation value must be fully_visited before calling other methods on this annotation_visitor</i>.;public AnnotationVisitor visitAnnotation(String name, String desc) {_        if (av != null) {_            return av.visitAnnotation(name, desc)__        }_        return null__    };visits,a,nested,annotation,value,of,the,annotation,param,name,the,value,name,param,desc,the,class,descriptor,of,the,nested,annotation,class,return,a,visitor,to,visit,the,actual,nested,annotation,value,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,nested,annotation,i,the,nested,annotation,value,must,be,fully,visited,before,calling,other,methods,on,this,annotation,visitor,i;public,annotation,visitor,visit,annotation,string,name,string,desc,if,av,null,return,av,visit,annotation,name,desc,return,null
AnnotationVisitor -> public AnnotationVisitor visitAnnotation(String name, String desc);1483093254;Visits a nested annotation value of the annotation.__@param name_the value name._@param desc_the class descriptor of the nested annotation class._@return a visitor to visit the actual nested annotation value, or_<tt>null</tt> if this visitor is not interested in visiting this_nested annotation. <i>The nested annotation value must be fully_visited before calling other methods on this annotation_visitor</i>.;public AnnotationVisitor visitAnnotation(String name, String desc) {_        if (av != null) {_            return av.visitAnnotation(name, desc)__        }_        return null__    };visits,a,nested,annotation,value,of,the,annotation,param,name,the,value,name,param,desc,the,class,descriptor,of,the,nested,annotation,class,return,a,visitor,to,visit,the,actual,nested,annotation,value,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,nested,annotation,i,the,nested,annotation,value,must,be,fully,visited,before,calling,other,methods,on,this,annotation,visitor,i;public,annotation,visitor,visit,annotation,string,name,string,desc,if,av,null,return,av,visit,annotation,name,desc,return,null
AnnotationVisitor -> public AnnotationVisitor visitAnnotation(String name, String desc);1505821772;Visits a nested annotation value of the annotation.__@param name_the value name._@param desc_the class descriptor of the nested annotation class._@return a visitor to visit the actual nested annotation value, or_<tt>null</tt> if this visitor is not interested in visiting this_nested annotation. <i>The nested annotation value must be fully_visited before calling other methods on this annotation_visitor</i>.;public AnnotationVisitor visitAnnotation(String name, String desc) {_        if (av != null) {_            return av.visitAnnotation(name, desc)__        }_        return null__    };visits,a,nested,annotation,value,of,the,annotation,param,name,the,value,name,param,desc,the,class,descriptor,of,the,nested,annotation,class,return,a,visitor,to,visit,the,actual,nested,annotation,value,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,nested,annotation,i,the,nested,annotation,value,must,be,fully,visited,before,calling,other,methods,on,this,annotation,visitor,i;public,annotation,visitor,visit,annotation,string,name,string,desc,if,av,null,return,av,visit,annotation,name,desc,return,null
AnnotationVisitor -> public AnnotationVisitor visitArray(String name);1366718246;Visits an array value of the annotation. Note that arrays of primitive_types (such as byte, boolean, short, char, int, long, float or double)_can be passed as value to {@link #visit visit}. This is what_{@link ClassReader} does.__@param name_the value name._@return a visitor to visit the actual array value elements, or_<tt>null</tt> if this visitor is not interested in visiting these_values. The 'name' parameters passed to the methods of this_visitor are ignored. <i>All the array values must be visited_before calling other methods on this annotation visitor</i>.;public AnnotationVisitor visitArray(String name) {_        if (av != null) {_            return av.visitArray(name)__        }_        return null__    };visits,an,array,value,of,the,annotation,note,that,arrays,of,primitive,types,such,as,byte,boolean,short,char,int,long,float,or,double,can,be,passed,as,value,to,link,visit,visit,this,is,what,link,class,reader,does,param,name,the,value,name,return,a,visitor,to,visit,the,actual,array,value,elements,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,these,values,the,name,parameters,passed,to,the,methods,of,this,visitor,are,ignored,i,all,the,array,values,must,be,visited,before,calling,other,methods,on,this,annotation,visitor,i;public,annotation,visitor,visit,array,string,name,if,av,null,return,av,visit,array,name,return,null
AnnotationVisitor -> public AnnotationVisitor visitArray(String name);1395273982;Visits an array value of the annotation. Note that arrays of primitive_types (such as byte, boolean, short, char, int, long, float or double)_can be passed as value to {@link #visit visit}. This is what_{@link ClassReader} does.__@param name_the value name._@return a visitor to visit the actual array value elements, or_<tt>null</tt> if this visitor is not interested in visiting these_values. The 'name' parameters passed to the methods of this_visitor are ignored. <i>All the array values must be visited_before calling other methods on this annotation visitor</i>.;public AnnotationVisitor visitArray(String name) {_        if (av != null) {_            return av.visitArray(name)__        }_        return null__    };visits,an,array,value,of,the,annotation,note,that,arrays,of,primitive,types,such,as,byte,boolean,short,char,int,long,float,or,double,can,be,passed,as,value,to,link,visit,visit,this,is,what,link,class,reader,does,param,name,the,value,name,return,a,visitor,to,visit,the,actual,array,value,elements,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,these,values,the,name,parameters,passed,to,the,methods,of,this,visitor,are,ignored,i,all,the,array,values,must,be,visited,before,calling,other,methods,on,this,annotation,visitor,i;public,annotation,visitor,visit,array,string,name,if,av,null,return,av,visit,array,name,return,null
AnnotationVisitor -> public AnnotationVisitor visitArray(String name);1483093254;Visits an array value of the annotation. Note that arrays of primitive_types (such as byte, boolean, short, char, int, long, float or double)_can be passed as value to {@link #visit visit}. This is what_{@link ClassReader} does.__@param name_the value name._@return a visitor to visit the actual array value elements, or_<tt>null</tt> if this visitor is not interested in visiting these_values. The 'name' parameters passed to the methods of this_visitor are ignored. <i>All the array values must be visited_before calling other methods on this annotation visitor</i>.;public AnnotationVisitor visitArray(String name) {_        if (av != null) {_            return av.visitArray(name)__        }_        return null__    };visits,an,array,value,of,the,annotation,note,that,arrays,of,primitive,types,such,as,byte,boolean,short,char,int,long,float,or,double,can,be,passed,as,value,to,link,visit,visit,this,is,what,link,class,reader,does,param,name,the,value,name,return,a,visitor,to,visit,the,actual,array,value,elements,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,these,values,the,name,parameters,passed,to,the,methods,of,this,visitor,are,ignored,i,all,the,array,values,must,be,visited,before,calling,other,methods,on,this,annotation,visitor,i;public,annotation,visitor,visit,array,string,name,if,av,null,return,av,visit,array,name,return,null
AnnotationVisitor -> public AnnotationVisitor visitArray(String name);1505821772;Visits an array value of the annotation. Note that arrays of primitive_types (such as byte, boolean, short, char, int, long, float or double)_can be passed as value to {@link #visit visit}. This is what_{@link ClassReader} does.__@param name_the value name._@return a visitor to visit the actual array value elements, or_<tt>null</tt> if this visitor is not interested in visiting these_values. The 'name' parameters passed to the methods of this_visitor are ignored. <i>All the array values must be visited_before calling other methods on this annotation visitor</i>.;public AnnotationVisitor visitArray(String name) {_        if (av != null) {_            return av.visitArray(name)__        }_        return null__    };visits,an,array,value,of,the,annotation,note,that,arrays,of,primitive,types,such,as,byte,boolean,short,char,int,long,float,or,double,can,be,passed,as,value,to,link,visit,visit,this,is,what,link,class,reader,does,param,name,the,value,name,return,a,visitor,to,visit,the,actual,array,value,elements,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,these,values,the,name,parameters,passed,to,the,methods,of,this,visitor,are,ignored,i,all,the,array,values,must,be,visited,before,calling,other,methods,on,this,annotation,visitor,i;public,annotation,visitor,visit,array,string,name,if,av,null,return,av,visit,array,name,return,null
AnnotationVisitor -> public void visitEnd();1366718246;Visits the end of the annotation.;public void visitEnd() {_        if (av != null) {_            av.visitEnd()__        }_    };visits,the,end,of,the,annotation;public,void,visit,end,if,av,null,av,visit,end
AnnotationVisitor -> public void visitEnd();1395273982;Visits the end of the annotation.;public void visitEnd() {_        if (av != null) {_            av.visitEnd()__        }_    };visits,the,end,of,the,annotation;public,void,visit,end,if,av,null,av,visit,end
AnnotationVisitor -> public void visitEnd();1483093254;Visits the end of the annotation.;public void visitEnd() {_        if (av != null) {_            av.visitEnd()__        }_    };visits,the,end,of,the,annotation;public,void,visit,end,if,av,null,av,visit,end
AnnotationVisitor -> public void visitEnd();1505821772;Visits the end of the annotation.;public void visitEnd() {_        if (av != null) {_            av.visitEnd()__        }_    };visits,the,end,of,the,annotation;public,void,visit,end,if,av,null,av,visit,end
AnnotationVisitor -> public void visitEnd();1531241461;Visits the end of the annotation.;public void visitEnd() {_    if (av != null) {_      av.visitEnd()__    }_  };visits,the,end,of,the,annotation;public,void,visit,end,if,av,null,av,visit,end
AnnotationVisitor -> public void visitEnd();1536664245;Visits the end of the annotation.;public void visitEnd() {_    if (av != null) {_      av.visitEnd()__    }_  };visits,the,end,of,the,annotation;public,void,visit,end,if,av,null,av,visit,end
AnnotationVisitor -> public void visit(final String name, final Object value);1531241461;Visits a primitive value of the annotation.__@param name the value name._@param value the actual value, whose type must be {@link Byte}, {@link Boolean}, {@link_Character}, {@link Short}, {@link Integer} , {@link Long}, {@link Float}, {@link Double},_{@link String} or {@link Type} of {@link Type#OBJECT} or {@link Type#ARRAY} sort. This_value can also be an array of byte, boolean, short, char, int, long, float or double values_(this is equivalent to using {@link #visitArray} and visiting each array element in turn,_but is more convenient).;public void visit(final String name, final Object value) {_    if (av != null) {_      av.visit(name, value)__    }_  };visits,a,primitive,value,of,the,annotation,param,name,the,value,name,param,value,the,actual,value,whose,type,must,be,link,byte,link,boolean,link,character,link,short,link,integer,link,long,link,float,link,double,link,string,or,link,type,of,link,type,object,or,link,type,array,sort,this,value,can,also,be,an,array,of,byte,boolean,short,char,int,long,float,or,double,values,this,is,equivalent,to,using,link,visit,array,and,visiting,each,array,element,in,turn,but,is,more,convenient;public,void,visit,final,string,name,final,object,value,if,av,null,av,visit,name,value
AnnotationVisitor -> public void visit(final String name, final Object value);1536664245;Visits a primitive value of the annotation.__@param name the value name._@param value the actual value, whose type must be {@link Byte}, {@link Boolean}, {@link_Character}, {@link Short}, {@link Integer} , {@link Long}, {@link Float}, {@link Double},_{@link String} or {@link Type} of {@link Type#OBJECT} or {@link Type#ARRAY} sort. This_value can also be an array of byte, boolean, short, char, int, long, float or double values_(this is equivalent to using {@link #visitArray} and visiting each array element in turn,_but is more convenient).;public void visit(final String name, final Object value) {_    if (av != null) {_      av.visit(name, value)__    }_  };visits,a,primitive,value,of,the,annotation,param,name,the,value,name,param,value,the,actual,value,whose,type,must,be,link,byte,link,boolean,link,character,link,short,link,integer,link,long,link,float,link,double,link,string,or,link,type,of,link,type,object,or,link,type,array,sort,this,value,can,also,be,an,array,of,byte,boolean,short,char,int,long,float,or,double,values,this,is,equivalent,to,using,link,visit,array,and,visiting,each,array,element,in,turn,but,is,more,convenient;public,void,visit,final,string,name,final,object,value,if,av,null,av,visit,name,value
AnnotationVisitor -> public AnnotationVisitor visitArray(final String name);1531241461;Visits an array value of the annotation. Note that arrays of primitive types (such as byte,_boolean, short, char, int, long, float or double) can be passed as value to {@link #visit_visit}. This is what {@link ClassReader} does.__@param name the value name._@return a visitor to visit the actual array value elements, or <tt>null</tt> if this visitor is_not interested in visiting these values. The 'name' parameters passed to the methods of_this visitor are ignored. <i>All the array values must be visited before calling other_methods on this annotation visitor</i>.;public AnnotationVisitor visitArray(final String name) {_    if (av != null) {_      return av.visitArray(name)__    }_    return null__  };visits,an,array,value,of,the,annotation,note,that,arrays,of,primitive,types,such,as,byte,boolean,short,char,int,long,float,or,double,can,be,passed,as,value,to,link,visit,visit,this,is,what,link,class,reader,does,param,name,the,value,name,return,a,visitor,to,visit,the,actual,array,value,elements,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,these,values,the,name,parameters,passed,to,the,methods,of,this,visitor,are,ignored,i,all,the,array,values,must,be,visited,before,calling,other,methods,on,this,annotation,visitor,i;public,annotation,visitor,visit,array,final,string,name,if,av,null,return,av,visit,array,name,return,null
AnnotationVisitor -> public AnnotationVisitor visitArray(final String name);1536664245;Visits an array value of the annotation. Note that arrays of primitive types (such as byte,_boolean, short, char, int, long, float or double) can be passed as value to {@link #visit_visit}. This is what {@link ClassReader} does.__@param name the value name._@return a visitor to visit the actual array value elements, or {@literal null} if this visitor_is not interested in visiting these values. The 'name' parameters passed to the methods of_this visitor are ignored. <i>All the array values must be visited before calling other_methods on this annotation visitor</i>.;public AnnotationVisitor visitArray(final String name) {_    if (av != null) {_      return av.visitArray(name)__    }_    return null__  };visits,an,array,value,of,the,annotation,note,that,arrays,of,primitive,types,such,as,byte,boolean,short,char,int,long,float,or,double,can,be,passed,as,value,to,link,visit,visit,this,is,what,link,class,reader,does,param,name,the,value,name,return,a,visitor,to,visit,the,actual,array,value,elements,or,literal,null,if,this,visitor,is,not,interested,in,visiting,these,values,the,name,parameters,passed,to,the,methods,of,this,visitor,are,ignored,i,all,the,array,values,must,be,visited,before,calling,other,methods,on,this,annotation,visitor,i;public,annotation,visitor,visit,array,final,string,name,if,av,null,return,av,visit,array,name,return,null
AnnotationVisitor -> public void visit(String name, Object value);1366718246;Visits a primitive value of the annotation.__@param name_the value name._@param value_the actual value, whose type must be {@link Byte},_{@link Boolean}, {@link Character}, {@link Short},_{@link Integer} , {@link Long}, {@link Float}, {@link Double},_{@link String} or {@link Type} or OBJECT or ARRAY sort. This_value can also be an array of byte, boolean, short, char, int,_long, float or double values (this is equivalent to using_{@link #visitArray visitArray} and visiting each array element_in turn, but is more convenient).;public void visit(String name, Object value) {_        if (av != null) {_            av.visit(name, value)__        }_    };visits,a,primitive,value,of,the,annotation,param,name,the,value,name,param,value,the,actual,value,whose,type,must,be,link,byte,link,boolean,link,character,link,short,link,integer,link,long,link,float,link,double,link,string,or,link,type,or,object,or,array,sort,this,value,can,also,be,an,array,of,byte,boolean,short,char,int,long,float,or,double,values,this,is,equivalent,to,using,link,visit,array,visit,array,and,visiting,each,array,element,in,turn,but,is,more,convenient;public,void,visit,string,name,object,value,if,av,null,av,visit,name,value
AnnotationVisitor -> public void visit(String name, Object value);1395273982;Visits a primitive value of the annotation.__@param name_the value name._@param value_the actual value, whose type must be {@link Byte},_{@link Boolean}, {@link Character}, {@link Short},_{@link Integer} , {@link Long}, {@link Float}, {@link Double},_{@link String} or {@link Type} or OBJECT or ARRAY sort. This_value can also be an array of byte, boolean, short, char, int,_long, float or double values (this is equivalent to using_{@link #visitArray visitArray} and visiting each array element_in turn, but is more convenient).;public void visit(String name, Object value) {_        if (av != null) {_            av.visit(name, value)__        }_    };visits,a,primitive,value,of,the,annotation,param,name,the,value,name,param,value,the,actual,value,whose,type,must,be,link,byte,link,boolean,link,character,link,short,link,integer,link,long,link,float,link,double,link,string,or,link,type,or,object,or,array,sort,this,value,can,also,be,an,array,of,byte,boolean,short,char,int,long,float,or,double,values,this,is,equivalent,to,using,link,visit,array,visit,array,and,visiting,each,array,element,in,turn,but,is,more,convenient;public,void,visit,string,name,object,value,if,av,null,av,visit,name,value
AnnotationVisitor -> public void visit(String name, Object value);1483093254;Visits a primitive value of the annotation.__@param name_the value name._@param value_the actual value, whose type must be {@link Byte},_{@link Boolean}, {@link Character}, {@link Short},_{@link Integer} , {@link Long}, {@link Float}, {@link Double},_{@link String} or {@link Type} of OBJECT or ARRAY sort. This_value can also be an array of byte, boolean, short, char, int,_long, float or double values (this is equivalent to using_{@link #visitArray visitArray} and visiting each array element_in turn, but is more convenient).;public void visit(String name, Object value) {_        if (av != null) {_            av.visit(name, value)__        }_    };visits,a,primitive,value,of,the,annotation,param,name,the,value,name,param,value,the,actual,value,whose,type,must,be,link,byte,link,boolean,link,character,link,short,link,integer,link,long,link,float,link,double,link,string,or,link,type,of,object,or,array,sort,this,value,can,also,be,an,array,of,byte,boolean,short,char,int,long,float,or,double,values,this,is,equivalent,to,using,link,visit,array,visit,array,and,visiting,each,array,element,in,turn,but,is,more,convenient;public,void,visit,string,name,object,value,if,av,null,av,visit,name,value
AnnotationVisitor -> public void visit(String name, Object value);1505821772;Visits a primitive value of the annotation.__@param name_the value name._@param value_the actual value, whose type must be {@link Byte},_{@link Boolean}, {@link Character}, {@link Short},_{@link Integer} , {@link Long}, {@link Float}, {@link Double},_{@link String} or {@link Type} of OBJECT or ARRAY sort. This_value can also be an array of byte, boolean, short, char, int,_long, float or double values (this is equivalent to using_{@link #visitArray visitArray} and visiting each array element_in turn, but is more convenient).;public void visit(String name, Object value) {_        if (av != null) {_            av.visit(name, value)__        }_    };visits,a,primitive,value,of,the,annotation,param,name,the,value,name,param,value,the,actual,value,whose,type,must,be,link,byte,link,boolean,link,character,link,short,link,integer,link,long,link,float,link,double,link,string,or,link,type,of,object,or,array,sort,this,value,can,also,be,an,array,of,byte,boolean,short,char,int,long,float,or,double,values,this,is,equivalent,to,using,link,visit,array,visit,array,and,visiting,each,array,element,in,turn,but,is,more,convenient;public,void,visit,string,name,object,value,if,av,null,av,visit,name,value
AnnotationVisitor -> public AnnotationVisitor(final int api);1366718246;Constructs a new {@link AnnotationVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}.;public AnnotationVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,annotation,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4;public,annotation,visitor,final,int,api,this,api,null
AnnotationVisitor -> public AnnotationVisitor(final int api);1395273982;Constructs a new {@link AnnotationVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.;public AnnotationVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,annotation,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5;public,annotation,visitor,final,int,api,this,api,null
AnnotationVisitor -> public AnnotationVisitor(final int api);1483093254;Constructs a new {@link AnnotationVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.;public AnnotationVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,annotation,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5;public,annotation,visitor,final,int,api,this,api,null
AnnotationVisitor -> public AnnotationVisitor(final int api);1505821772;Constructs a new {@link AnnotationVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}.;public AnnotationVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,annotation,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,or,link,opcodes,asm6;public,annotation,visitor,final,int,api,this,api,null
AnnotationVisitor -> public AnnotationVisitor(final int api);1531241461;Constructs a new {@link AnnotationVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link_Opcodes#ASM7_EXPERIMENTAL}.;public AnnotationVisitor(final int api) {_    this(api, null)__  };constructs,a,new,link,annotation,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes;public,annotation,visitor,final,int,api,this,api,null
AnnotationVisitor -> public AnnotationVisitor(final int api);1536664245;Constructs a new {@link AnnotationVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.;public AnnotationVisitor(final int api) {_    this(api, null)__  };constructs,a,new,link,annotation,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes,asm7;public,annotation,visitor,final,int,api,this,api,null
AnnotationVisitor -> public void visitEnum(final String name, final String descriptor, final String value);1531241461;Visits an enumeration value of the annotation.__@param name the value name._@param descriptor the class descriptor of the enumeration class._@param value the actual enumeration value.;public void visitEnum(final String name, final String descriptor, final String value) {_    if (av != null) {_      av.visitEnum(name, descriptor, value)__    }_  };visits,an,enumeration,value,of,the,annotation,param,name,the,value,name,param,descriptor,the,class,descriptor,of,the,enumeration,class,param,value,the,actual,enumeration,value;public,void,visit,enum,final,string,name,final,string,descriptor,final,string,value,if,av,null,av,visit,enum,name,descriptor,value
AnnotationVisitor -> public void visitEnum(final String name, final String descriptor, final String value);1536664245;Visits an enumeration value of the annotation.__@param name the value name._@param descriptor the class descriptor of the enumeration class._@param value the actual enumeration value.;public void visitEnum(final String name, final String descriptor, final String value) {_    if (av != null) {_      av.visitEnum(name, descriptor, value)__    }_  };visits,an,enumeration,value,of,the,annotation,param,name,the,value,name,param,descriptor,the,class,descriptor,of,the,enumeration,class,param,value,the,actual,enumeration,value;public,void,visit,enum,final,string,name,final,string,descriptor,final,string,value,if,av,null,av,visit,enum,name,descriptor,value
