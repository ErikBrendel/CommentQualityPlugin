commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the kind of field or method designated by this handle.  *  * @return {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},  *     {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link  *     Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link  *     Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.  */ ;/**  * Returns the kind of field or method designated by this handle.  *  * @return {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},  *     {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link  *     Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link  *     Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.  */ public int getTag() {     return tag. }
true;public;0;3;/**  * Returns the internal name of the class that owns the field or method designated by this handle.  *  * @return the internal name of the class that owns the field or method designated by this handle.  */ ;/**  * Returns the internal name of the class that owns the field or method designated by this handle.  *  * @return the internal name of the class that owns the field or method designated by this handle.  */ public String getOwner() {     return owner. }
true;public;0;3;/**  * Returns the name of the field or method designated by this handle.  *  * @return the name of the field or method designated by this handle.  */ ;/**  * Returns the name of the field or method designated by this handle.  *  * @return the name of the field or method designated by this handle.  */ public String getName() {     return name. }
true;public;0;3;/**  * Returns the descriptor of the field or method designated by this handle.  *  * @return the descriptor of the field or method designated by this handle.  */ ;/**  * Returns the descriptor of the field or method designated by this handle.  *  * @return the descriptor of the field or method designated by this handle.  */ public String getDesc() {     return descriptor. }
true;public;0;3;/**  * Returns true if the owner of the field or method designated by this handle is an interface.  *  * @return true if the owner of the field or method designated by this handle is an interface.  */ ;/**  * Returns true if the owner of the field or method designated by this handle is an interface.  *  * @return true if the owner of the field or method designated by this handle is an interface.  */ public boolean isInterface() {     return isInterface. }
false;public;1;15;;@Override public boolean equals(final Object object) {     if (object == this) {         return true.     }     if (!(object instanceof Handle)) {         return false.     }     Handle handle = (Handle) object.     return tag == handle.tag && isInterface == handle.isInterface && owner.equals(handle.owner) && name.equals(handle.name) && descriptor.equals(handle.descriptor). }
false;public;0;6;;@Override public int hashCode() {     return tag + (isInterface ? 64 : 0) + owner.hashCode() * name.hashCode() * descriptor.hashCode(). }
true;public;0;4;/**  * Returns the textual representation of this handle. The textual representation is:  *  * <ul>  *   <li>for a reference to a class: owner "." name descriptor " (" tag ")",  *   <li>for a reference to an interface: owner "." name descriptor " (" tag " itf)".  * </ul>  */ ;/**  * Returns the textual representation of this handle. The textual representation is:  *  * <ul>  *   <li>for a reference to a class: owner "." name descriptor " (" tag ")",  *   <li>for a reference to an interface: owner "." name descriptor " (" tag " itf)".  * </ul>  */ @Override public String toString() {     return owner + '.' + name + descriptor + " (" + tag + (isInterface ? " itf" : "") + ')'. }
