# id;timestamp;commentText;codeText;commentWords;codeWords
MimeType -> @Nullable 	public String getParameter(String name);1495868221;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;@Nullable_	public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;nullable,public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> @Nullable 	public String getParameter(String name);1496837955;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;@Nullable_	public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;nullable,public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> @Nullable 	public String getParameter(String name);1497250713;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;@Nullable_	public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;nullable,public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> @Nullable 	public String getParameter(String name);1500972359;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;@Nullable_	public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;nullable,public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> @Nullable 	public String getParameter(String name);1517575447;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;@Nullable_	public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;nullable,public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> @Nullable 	public String getParameter(String name);1518447318;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;@Nullable_	public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;nullable,public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> @Nullable 	public String getParameter(String name);1520094828;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;@Nullable_	public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;nullable,public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> @Nullable 	public String getParameter(String name);1522103912;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;@Nullable_	public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;nullable,public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> @Nullable 	public String getParameter(String name);1530174524;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;@Nullable_	public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;nullable,public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> @Nullable 	public String getParameter(String name);1546457570;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;@Nullable_	public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;nullable,public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> @Nullable 	public String getParameter(String name);1549373623;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;@Nullable_	public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;nullable,public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> @Nullable 	public String getParameter(String name);1549377521;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;@Nullable_	public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;nullable,public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public boolean isPresentIn(Collection<? extends MimeType> mimeTypes);1546457570;Unlike {@link Collection#contains(Object)} which relies on_{@link MimeType#equals(Object)}, this method only checks the type and the_subtype, but otherwise ignores parameters._@param mimeTypes the list of mime types to perform the check against_@return whether the list contains the given mime type_@since 5.1.4;public boolean isPresentIn(Collection<? extends MimeType> mimeTypes) {_		for (MimeType mimeType : mimeTypes) {_			if (mimeType.equalsTypeAndSubtype(this)) {_				return true__			}_		}_		return false__	};unlike,link,collection,contains,object,which,relies,on,link,mime,type,equals,object,this,method,only,checks,the,type,and,the,subtype,but,otherwise,ignores,parameters,param,mime,types,the,list,of,mime,types,to,perform,the,check,against,return,whether,the,list,contains,the,given,mime,type,since,5,1,4;public,boolean,is,present,in,collection,extends,mime,type,mime,types,for,mime,type,mime,type,mime,types,if,mime,type,equals,type,and,subtype,this,return,true,return,false
MimeType -> public boolean isPresentIn(Collection<? extends MimeType> mimeTypes);1549373623;Unlike {@link Collection#contains(Object)} which relies on_{@link MimeType#equals(Object)}, this method only checks the type and the_subtype, but otherwise ignores parameters._@param mimeTypes the list of mime types to perform the check against_@return whether the list contains the given mime type_@since 5.1.4;public boolean isPresentIn(Collection<? extends MimeType> mimeTypes) {_		for (MimeType mimeType : mimeTypes) {_			if (mimeType.equalsTypeAndSubtype(this)) {_				return true__			}_		}_		return false__	};unlike,link,collection,contains,object,which,relies,on,link,mime,type,equals,object,this,method,only,checks,the,type,and,the,subtype,but,otherwise,ignores,parameters,param,mime,types,the,list,of,mime,types,to,perform,the,check,against,return,whether,the,list,contains,the,given,mime,type,since,5,1,4;public,boolean,is,present,in,collection,extends,mime,type,mime,types,for,mime,type,mime,type,mime,types,if,mime,type,equals,type,and,subtype,this,return,true,return,false
MimeType -> public boolean isPresentIn(Collection<? extends MimeType> mimeTypes);1549377521;Unlike {@link Collection#contains(Object)} which relies on_{@link MimeType#equals(Object)}, this method only checks the type and the_subtype, but otherwise ignores parameters._@param mimeTypes the list of mime types to perform the check against_@return whether the list contains the given mime type_@since 5.1.4;public boolean isPresentIn(Collection<? extends MimeType> mimeTypes) {_		for (MimeType mimeType : mimeTypes) {_			if (mimeType.equalsTypeAndSubtype(this)) {_				return true__			}_		}_		return false__	};unlike,link,collection,contains,object,which,relies,on,link,mime,type,equals,object,this,method,only,checks,the,type,and,the,subtype,but,otherwise,ignores,parameters,param,mime,types,the,list,of,mime,types,to,perform,the,check,against,return,whether,the,list,contains,the,given,mime,type,since,5,1,4;public,boolean,is,present,in,collection,extends,mime,type,mime,types,for,mime,type,mime,type,mime,types,if,mime,type,equals,type,and,subtype,this,return,true,return,false
MimeType -> public Charset getCharSet();1375896097;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set_ or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharSet();1377201944;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set_ or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharSet();1385501137;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set_ or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharSet();1385507478;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set_ or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharSet();1385507683;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set_ or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharSet();1398192506;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set_ or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharSet();1413289623;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharSet();1435087610;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharSet();1435091425;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharSet();1435183162;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharSet();1456785272;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharSet();1458843770;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public static MimeType valueOf(String value);1375896097;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1377201944;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1385501137;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1385507478;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1385507683;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1398192506;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1413289623;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1435087610;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1435091425;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1435183162;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1456785272;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1458843770;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1460644739;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1467726769;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1467730834;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1474905889;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1481292266;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1495868221;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1496837955;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1497250713;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1500972359;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1517575447;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1518447318;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1520094828;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1522103912;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1530174524;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1546457570;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1549373623;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> public static MimeType valueOf(String value);1549377521;Parse the given String value into a {@code MimeType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see MimeTypeUtils#parseMimeType(String);public static MimeType valueOf(String value) {_		return MimeTypeUtils.parseMimeType(value)__	};parse,the,given,string,value,into,a,code,mime,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,mime,type,utils,parse,mime,type,string;public,static,mime,type,value,of,string,value,return,mime,type,utils,parse,mime,type,value
MimeType -> private boolean parametersAreEqual(MimeType other);1460644739;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!other.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,string,key,this,parameters,key,set,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1467726769;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!other.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,string,key,this,parameters,key,set,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1467730834;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!other.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,string,key,this,parameters,key,set,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1474905889;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!other.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,string,key,this,parameters,key,set,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1481292266;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!other.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,string,key,this,parameters,key,set,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1495868221;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!other.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,string,key,this,parameters,key,set,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1496837955;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!other.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,string,key,this,parameters,key,set,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1497250713;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!other.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,string,key,this,parameters,key,set,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1500972359;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!other.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,string,key,this,parameters,key,set,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1517575447;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!other.parameters.containsKey(key)) {_				return false__			}_			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,string,key,this,parameters,key,set,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1518447318;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!other.parameters.containsKey(key)) {_				return false__			}_			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,string,key,this,parameters,key,set,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1520094828;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!other.parameters.containsKey(key)) {_				return false__			}_			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,string,key,this,parameters,key,set,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1522103912;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (Map.Entry<String, String> entry : this.parameters.entrySet()) {_			String key = entry.getKey()__			if (!other.parameters.containsKey(key)) {_				return false__			}_			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(entry.getValue(), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,map,entry,string,string,entry,this,parameters,entry,set,string,key,entry,get,key,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,entry,get,value,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1530174524;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset Charsets}._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (Map.Entry<String, String> entry : this.parameters.entrySet()) {_			String key = entry.getKey()__			if (!other.parameters.containsKey(key)) {_				return false__			}_			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(entry.getValue(), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,charsets,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,map,entry,string,string,entry,this,parameters,entry,set,string,key,entry,get,key,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,entry,get,value,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1546457570;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset Charsets}._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (Map.Entry<String, String> entry : this.parameters.entrySet()) {_			String key = entry.getKey()__			if (!other.parameters.containsKey(key)) {_				return false__			}_			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(entry.getValue(), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,charsets,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,map,entry,string,string,entry,this,parameters,entry,set,string,key,entry,get,key,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,entry,get,value,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1549373623;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset Charsets}._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (Map.Entry<String, String> entry : this.parameters.entrySet()) {_			String key = entry.getKey()__			if (!other.parameters.containsKey(key)) {_				return false__			}_			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(entry.getValue(), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,charsets,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,map,entry,string,string,entry,this,parameters,entry,set,string,key,entry,get,key,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,entry,get,value,other,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType other);1549377521;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset Charsets}._@since 4.2;private boolean parametersAreEqual(MimeType other) {_		if (this.parameters.size() != other.parameters.size()) {_			return false__		}__		for (Map.Entry<String, String> entry : this.parameters.entrySet()) {_			String key = entry.getKey()__			if (!other.parameters.containsKey(key)) {_				return false__			}_			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(entry.getValue(), other.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,charsets,since,4,2;private,boolean,parameters,are,equal,mime,type,other,if,this,parameters,size,other,parameters,size,return,false,for,map,entry,string,string,entry,this,parameters,entry,set,string,key,entry,get,key,if,other,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,get,charset,other,get,charset,return,false,else,if,object,utils,null,safe,equals,entry,get,value,other,parameters,get,key,return,false,return,true
MimeType -> public String getSubtype();1375896097;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1377201944;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1385501137;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1385507478;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1385507683;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1398192506;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1413289623;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1435087610;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1435091425;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1435183162;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1456785272;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1458843770;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1460644739;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1467726769;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1467730834;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1474905889;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1481292266;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1495868221;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1496837955;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1497250713;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1500972359;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1517575447;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1518447318;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1520094828;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1522103912;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1530174524;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1546457570;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1549373623;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getSubtype();1549377521;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MimeType -> public String getType();1375896097;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1377201944;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1385501137;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1385507478;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1385507683;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1398192506;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1413289623;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1435087610;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1435091425;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1435183162;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1456785272;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1458843770;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1460644739;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1467726769;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1467730834;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1474905889;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1481292266;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1495868221;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1496837955;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1497250713;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1500972359;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1517575447;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1518447318;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1520094828;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1522103912;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1530174524;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1546457570;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1549373623;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> public String getType();1549377521;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MimeType -> @Override 	public int compareTo(MimeType other);1375896097;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1377201944;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1385501137;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1385507478;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1385507683;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1398192506;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1413289623;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1435087610;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1435091425;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1435183162;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1456785272;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1458843770;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1460644739;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1467726769;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1467730834;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1474905889;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1481292266;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1495868221;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1496837955;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1497250713;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1500972359;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = getParameters().get(thisAttribute)__			String otherValue = other.getParameters().get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1517575447;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}__		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()___		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			if (PARAM_CHARSET.equals(thisAttribute)) {_				Charset thisCharset = getCharset()__				Charset otherCharset = other.getCharset()__				if (thisCharset != otherCharset) {_					if (thisCharset == null) {_						return -1__					}_					if (otherCharset == null) {_						return 1__					}_					comp = thisCharset.compareTo(otherCharset)__					if (comp != 0) {_						return comp__					}_				}_			}_			else {_				String thisValue = getParameters().get(thisAttribute)__				String otherValue = other.getParameters().get(otherAttribute)__				if (otherValue == null) {_					otherValue = ""__				}_				comp = thisValue.compareTo(otherValue)__				if (comp != 0) {_					return comp__				}_			}_		}__		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,if,equals,this,attribute,charset,this,charset,get,charset,charset,other,charset,other,get,charset,if,this,charset,other,charset,if,this,charset,null,return,1,if,other,charset,null,return,1,comp,this,charset,compare,to,other,charset,if,comp,0,return,comp,else,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1518447318;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}__		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()___		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			if (PARAM_CHARSET.equals(thisAttribute)) {_				Charset thisCharset = getCharset()__				Charset otherCharset = other.getCharset()__				if (thisCharset != otherCharset) {_					if (thisCharset == null) {_						return -1__					}_					if (otherCharset == null) {_						return 1__					}_					comp = thisCharset.compareTo(otherCharset)__					if (comp != 0) {_						return comp__					}_				}_			}_			else {_				String thisValue = getParameters().get(thisAttribute)__				String otherValue = other.getParameters().get(otherAttribute)__				if (otherValue == null) {_					otherValue = ""__				}_				comp = thisValue.compareTo(otherValue)__				if (comp != 0) {_					return comp__				}_			}_		}__		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,if,equals,this,attribute,charset,this,charset,get,charset,charset,other,charset,other,get,charset,if,this,charset,other,charset,if,this,charset,null,return,1,if,other,charset,null,return,1,comp,this,charset,compare,to,other,charset,if,comp,0,return,comp,else,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1520094828;Compares this MIME Type to another alphabetically._@param other the MIME Type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}__		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()___		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			if (PARAM_CHARSET.equals(thisAttribute)) {_				Charset thisCharset = getCharset()__				Charset otherCharset = other.getCharset()__				if (thisCharset != otherCharset) {_					if (thisCharset == null) {_						return -1__					}_					if (otherCharset == null) {_						return 1__					}_					comp = thisCharset.compareTo(otherCharset)__					if (comp != 0) {_						return comp__					}_				}_			}_			else {_				String thisValue = getParameters().get(thisAttribute)__				String otherValue = other.getParameters().get(otherAttribute)__				if (otherValue == null) {_					otherValue = ""__				}_				comp = thisValue.compareTo(otherValue)__				if (comp != 0) {_					return comp__				}_			}_		}__		return 0__	};compares,this,mime,type,to,another,alphabetically,param,other,the,mime,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,if,equals,this,attribute,charset,this,charset,get,charset,charset,other,charset,other,get,charset,if,this,charset,other,charset,if,this,charset,null,return,1,if,other,charset,null,return,1,comp,this,charset,compare,to,other,charset,if,comp,0,return,comp,else,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1522103912;Compares this MIME Type to another alphabetically._@param other the MIME Type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}__		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()___		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			if (PARAM_CHARSET.equals(thisAttribute)) {_				Charset thisCharset = getCharset()__				Charset otherCharset = other.getCharset()__				if (thisCharset != otherCharset) {_					if (thisCharset == null) {_						return -1__					}_					if (otherCharset == null) {_						return 1__					}_					comp = thisCharset.compareTo(otherCharset)__					if (comp != 0) {_						return comp__					}_				}_			}_			else {_				String thisValue = getParameters().get(thisAttribute)__				String otherValue = other.getParameters().get(otherAttribute)__				if (otherValue == null) {_					otherValue = ""__				}_				comp = thisValue.compareTo(otherValue)__				if (comp != 0) {_					return comp__				}_			}_		}__		return 0__	};compares,this,mime,type,to,another,alphabetically,param,other,the,mime,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,if,equals,this,attribute,charset,this,charset,get,charset,charset,other,charset,other,get,charset,if,this,charset,other,charset,if,this,charset,null,return,1,if,other,charset,null,return,1,comp,this,charset,compare,to,other,charset,if,comp,0,return,comp,else,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1530174524;Compares this MIME Type to another alphabetically._@param other the MIME Type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}__		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()___		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			if (PARAM_CHARSET.equals(thisAttribute)) {_				Charset thisCharset = getCharset()__				Charset otherCharset = other.getCharset()__				if (thisCharset != otherCharset) {_					if (thisCharset == null) {_						return -1__					}_					if (otherCharset == null) {_						return 1__					}_					comp = thisCharset.compareTo(otherCharset)__					if (comp != 0) {_						return comp__					}_				}_			}_			else {_				String thisValue = getParameters().get(thisAttribute)__				String otherValue = other.getParameters().get(otherAttribute)__				if (otherValue == null) {_					otherValue = ""__				}_				comp = thisValue.compareTo(otherValue)__				if (comp != 0) {_					return comp__				}_			}_		}__		return 0__	};compares,this,mime,type,to,another,alphabetically,param,other,the,mime,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,if,equals,this,attribute,charset,this,charset,get,charset,charset,other,charset,other,get,charset,if,this,charset,other,charset,if,this,charset,null,return,1,if,other,charset,null,return,1,comp,this,charset,compare,to,other,charset,if,comp,0,return,comp,else,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1546457570;Compares this MIME Type to another alphabetically._@param other the MIME Type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}__		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()___		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			if (PARAM_CHARSET.equals(thisAttribute)) {_				Charset thisCharset = getCharset()__				Charset otherCharset = other.getCharset()__				if (thisCharset != otherCharset) {_					if (thisCharset == null) {_						return -1__					}_					if (otherCharset == null) {_						return 1__					}_					comp = thisCharset.compareTo(otherCharset)__					if (comp != 0) {_						return comp__					}_				}_			}_			else {_				String thisValue = getParameters().get(thisAttribute)__				String otherValue = other.getParameters().get(otherAttribute)__				if (otherValue == null) {_					otherValue = ""__				}_				comp = thisValue.compareTo(otherValue)__				if (comp != 0) {_					return comp__				}_			}_		}__		return 0__	};compares,this,mime,type,to,another,alphabetically,param,other,the,mime,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,if,equals,this,attribute,charset,this,charset,get,charset,charset,other,charset,other,get,charset,if,this,charset,other,charset,if,this,charset,null,return,1,if,other,charset,null,return,1,comp,this,charset,compare,to,other,charset,if,comp,0,return,comp,else,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1549373623;Compares this MIME Type to another alphabetically._@param other the MIME Type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}__		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()___		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			if (PARAM_CHARSET.equals(thisAttribute)) {_				Charset thisCharset = getCharset()__				Charset otherCharset = other.getCharset()__				if (thisCharset != otherCharset) {_					if (thisCharset == null) {_						return -1__					}_					if (otherCharset == null) {_						return 1__					}_					comp = thisCharset.compareTo(otherCharset)__					if (comp != 0) {_						return comp__					}_				}_			}_			else {_				String thisValue = getParameters().get(thisAttribute)__				String otherValue = other.getParameters().get(otherAttribute)__				if (otherValue == null) {_					otherValue = ""__				}_				comp = thisValue.compareTo(otherValue)__				if (comp != 0) {_					return comp__				}_			}_		}__		return 0__	};compares,this,mime,type,to,another,alphabetically,param,other,the,mime,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,if,equals,this,attribute,charset,this,charset,get,charset,charset,other,charset,other,get,charset,if,this,charset,other,charset,if,this,charset,null,return,1,if,other,charset,null,return,1,comp,this,charset,compare,to,other,charset,if,comp,0,return,comp,else,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> @Override 	public int compareTo(MimeType other);1549377521;Compares this MIME Type to another alphabetically._@param other the MIME Type to compare to_@see MimeTypeUtils#sortBySpecificity(List);@Override_	public int compareTo(MimeType other) {_		int comp = getType().compareToIgnoreCase(other.getType())__		if (comp != 0) {_			return comp__		}_		comp = getSubtype().compareToIgnoreCase(other.getSubtype())__		if (comp != 0) {_			return comp__		}_		comp = getParameters().size() - other.getParameters().size()__		if (comp != 0) {_			return comp__		}__		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(getParameters().keySet())__		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.getParameters().keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()___		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			if (PARAM_CHARSET.equals(thisAttribute)) {_				Charset thisCharset = getCharset()__				Charset otherCharset = other.getCharset()__				if (thisCharset != otherCharset) {_					if (thisCharset == null) {_						return -1__					}_					if (otherCharset == null) {_						return 1__					}_					comp = thisCharset.compareTo(otherCharset)__					if (comp != 0) {_						return comp__					}_				}_			}_			else {_				String thisValue = getParameters().get(thisAttribute)__				String otherValue = other.getParameters().get(otherAttribute)__				if (otherValue == null) {_					otherValue = ""__				}_				comp = thisValue.compareTo(otherValue)__				if (comp != 0) {_					return comp__				}_			}_		}__		return 0__	};compares,this,mime,type,to,another,alphabetically,param,other,the,mime,type,to,compare,to,see,mime,type,utils,sort,by,specificity,list;override,public,int,compare,to,mime,type,other,int,comp,get,type,compare,to,ignore,case,other,get,type,if,comp,0,return,comp,comp,get,subtype,compare,to,ignore,case,other,get,subtype,if,comp,0,return,comp,comp,get,parameters,size,other,get,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,this,attributes,add,all,get,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,other,attributes,add,all,other,get,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,if,equals,this,attribute,charset,this,charset,get,charset,charset,other,charset,other,get,charset,if,this,charset,other,charset,if,this,charset,null,return,1,if,other,charset,null,return,1,comp,this,charset,compare,to,other,charset,if,comp,0,return,comp,else,string,this,value,get,parameters,get,this,attribute,string,other,value,other,get,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MimeType -> public MimeType(String type, String subtype, Charset charset);1456785272;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1458843770;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1460644739;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1467726769;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1467730834;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1474905889;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1481292266;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1495868221;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1496837955;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1497250713;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1500972359;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1517575447;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1518447318;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1520094828;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1522103912;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1530174524;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1546457570;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1549373623;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype, Charset charset);1549377521;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charset) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,charset,this,type,subtype,collections,singleton,map,charset,name
MimeType -> public MimeType(String type, String subtype);1375896097;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1377201944;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1385501137;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1385507478;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1385507683;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1398192506;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1413289623;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1435087610;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1435091425;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1435183162;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1456785272;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1458843770;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1460644739;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1467726769;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1467730834;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MimeType -> public MimeType(String type, String subtype);1474905889;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1481292266;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1495868221;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1496837955;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1497250713;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1500972359;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1517575447;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1518447318;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1520094828;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1522103912;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1530174524;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1546457570;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1549373623;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public MimeType(String type, String subtype);1549377521;Create a new {@code MimeType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype) {_		this(type, subtype, Collections.emptyMap())__	};create,a,new,code,mime,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,this,type,subtype,collections,empty,map
MimeType -> public boolean includes(@Nullable MimeType other);1496837955;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(@Nullable MimeType other);1497250713;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(@Nullable MimeType other);1500972359;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().lastIndexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,last,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(@Nullable MimeType other);1517575447;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().lastIndexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,last,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(@Nullable MimeType other);1518447318;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().lastIndexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,last,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(@Nullable MimeType other);1520094828;Indicate whether this MIME Type includes the given MIME Type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._@param other the reference MIME Type with which to compare_@return {@code true} if this MIME Type includes the given MIME Type__{@code false} otherwise;public boolean includes(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().lastIndexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,mime,type,includes,the,given,mime,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,mime,type,with,which,to,compare,return,code,true,if,this,mime,type,includes,the,given,mime,type,code,false,otherwise;public,boolean,includes,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,last,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(@Nullable MimeType other);1522103912;Indicate whether this MIME Type includes the given MIME Type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._@param other the reference MIME Type with which to compare_@return {@code true} if this MIME Type includes the given MIME Type__{@code false} otherwise;public boolean includes(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().lastIndexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,mime,type,includes,the,given,mime,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,mime,type,with,which,to,compare,return,code,true,if,this,mime,type,includes,the,given,mime,type,code,false,otherwise;public,boolean,includes,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,last,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(@Nullable MimeType other);1530174524;Indicate whether this MIME Type includes the given MIME Type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._@param other the reference MIME Type with which to compare_@return {@code true} if this MIME Type includes the given MIME Type__{@code false} otherwise;public boolean includes(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().lastIndexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,mime,type,includes,the,given,mime,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,mime,type,with,which,to,compare,return,code,true,if,this,mime,type,includes,the,given,mime,type,code,false,otherwise;public,boolean,includes,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,last,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(@Nullable MimeType other);1546457570;Indicate whether this MIME Type includes the given MIME Type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._@param other the reference MIME Type with which to compare_@return {@code true} if this MIME Type includes the given MIME Type__{@code false} otherwise;public boolean includes(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().lastIndexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,mime,type,includes,the,given,mime,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,mime,type,with,which,to,compare,return,code,true,if,this,mime,type,includes,the,given,mime,type,code,false,otherwise;public,boolean,includes,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,last,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(@Nullable MimeType other);1549373623;Indicate whether this MIME Type includes the given MIME Type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._@param other the reference MIME Type with which to compare_@return {@code true} if this MIME Type includes the given MIME Type__{@code false} otherwise;public boolean includes(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().lastIndexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,mime,type,includes,the,given,mime,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,mime,type,with,which,to,compare,return,code,true,if,this,mime,type,includes,the,given,mime,type,code,false,otherwise;public,boolean,includes,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,last,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(@Nullable MimeType other);1549377521;Indicate whether this MIME Type includes the given MIME Type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._@param other the reference MIME Type with which to compare_@return {@code true} if this MIME Type includes the given MIME Type__{@code false} otherwise;public boolean includes(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().lastIndexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,mime,type,includes,the,given,mime,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,mime,type,with,which,to,compare,return,code,true,if,this,mime,type,includes,the,given,mime,type,code,false,otherwise;public,boolean,includes,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,last,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1375896097;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1377201944;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1385501137;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1385507478;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1385507683;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1398192506;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1413289623;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1435087610;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1435091425;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1435183162;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1456785272;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1458843770;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1460644739;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1467726769;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1467730834;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1474905889;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, Map<String, String> parameters);1481292266;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> @Nullable 	public Charset getCharset();1495868221;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;@Nullable_	public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;nullable,public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> @Nullable 	public Charset getCharset();1496837955;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;@Nullable_	public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;nullable,public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> @Nullable 	public Charset getCharset();1497250713;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;@Nullable_	public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;nullable,public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> @Nullable 	public Charset getCharset();1500972359;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;@Nullable_	public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;nullable,public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> @Nullable 	public Charset getCharset();1517575447;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;@Nullable_	public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;nullable,public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> @Nullable 	public Charset getCharset();1518447318;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;@Nullable_	public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;nullable,public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> @Nullable 	public Charset getCharset();1520094828;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;@Nullable_	public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;nullable,public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> @Nullable 	public Charset getCharset();1522103912;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;@Nullable_	public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;nullable,public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> @Nullable 	public Charset getCharset();1530174524;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;@Nullable_	public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;nullable,public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> @Nullable 	public Charset getCharset();1546457570;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;@Nullable_	public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;nullable,public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> @Nullable 	public Charset getCharset();1549373623;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;@Nullable_	public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;nullable,public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> @Nullable 	public Charset getCharset();1549377521;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;@Nullable_	public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;nullable,public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> public MimeType(String type, String subtype, Charset charSet);1375896097;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MimeType -> public MimeType(String type, String subtype, Charset charSet);1377201944;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MimeType -> public MimeType(String type, String subtype, Charset charSet);1385501137;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MimeType -> public MimeType(String type, String subtype, Charset charSet);1385507478;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MimeType -> public MimeType(String type, String subtype, Charset charSet);1385507683;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MimeType -> public MimeType(String type, String subtype, Charset charSet);1398192506;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MimeType -> public MimeType(String type, String subtype, Charset charSet);1413289623;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MimeType -> public MimeType(String type, String subtype, Charset charSet);1435087610;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MimeType -> public MimeType(String type, String subtype, Charset charSet);1435091425;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MimeType -> public MimeType(String type, String subtype, Charset charSet);1435183162;Create a new {@code MimeType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,mime,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MimeType -> public boolean isWildcardType();1375896097;Indicates whether the {@linkplain #getType() type} is the wildcard character {@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1377201944;Indicates whether the {@linkplain #getType() type} is the wildcard character {@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1385501137;Indicates whether the {@linkplain #getType() type} is the wildcard character {@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1385507478;Indicates whether the {@linkplain #getType() type} is the wildcard character_{@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1385507683;Indicates whether the {@linkplain #getType() type} is the wildcard character_{@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1398192506;Indicates whether the {@linkplain #getType() type} is the wildcard character_{@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1413289623;Indicates whether the {@linkplain #getType() type} is the wildcard character_{@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1435087610;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1435091425;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1435183162;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1456785272;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1458843770;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1460644739;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1467726769;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1467730834;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1474905889;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1481292266;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1495868221;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1496837955;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1497250713;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1500972359;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1517575447;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1518447318;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1520094828;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1522103912;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1530174524;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1546457570;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1549373623;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardType();1549377521;Indicates whether the {@linkplain #getType() type} is the wildcard character_<code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(getType())__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,get,type
MimeType -> public boolean isWildcardSubtype();1375896097;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character {@code &#42_}_or the wildcard character followed by a sufiix (e.g. {@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1377201944;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character {@code &#42_}_or the wildcard character followed by a sufiix (e.g. {@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1385501137;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character {@code &#42_}_or the wildcard character followed by a sufiix (e.g. {@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1385507478;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character_{@code &#42_} or the wildcard character followed by a sufiix (e.g._{@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1385507683;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character_{@code &#42_} or the wildcard character followed by a sufiix (e.g._{@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1398192506;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character_{@code &#42_} or the wildcard character followed by a sufiix (e.g._{@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1413289623;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character_{@code &#42_} or the wildcard character followed by a sufiix (e.g._{@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1435087610;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1435091425;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1435183162;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1456785272;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1458843770;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1460644739;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1467726769;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1467730834;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1474905889;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1481292266;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1495868221;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1496837955;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1497250713;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1500972359;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1517575447;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1518447318;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1520094828;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1522103912;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1530174524;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1546457570;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1549373623;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public boolean isWildcardSubtype();1549377521;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard_character <code>&#42_</code> or the wildcard character followed by a suffix_(e.g. <code>&#42_+xml</code>)._@return whether the subtype is a wildcard;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,suffix,e,g,code,42,xml,code,return,whether,the,subtype,is,a,wildcard;public,boolean,is,wildcard,subtype,return,equals,get,subtype,get,subtype,starts,with
MimeType -> public MimeType(MimeType other, Charset charset);1456785272;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1458843770;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1460644739;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1467726769;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1467730834;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1474905889;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1481292266;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1495868221;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1496837955;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1497250713;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1500972359;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1517575447;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1518447318;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1520094828;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other MimeType_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,mime,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1522103912;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other MimeType_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,mime,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1530174524;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other MimeType_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,mime,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1546457570;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other MimeType_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,mime,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1549373623;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other MimeType_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,mime,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public MimeType(MimeType other, Charset charset);1549377521;Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},_and allows to set the specified character set._@param other the other MimeType_@param charset the character set_@throws IllegalArgumentException if any of the parameters contains illegal characters_@since 4.3;public MimeType(MimeType other, Charset charset) {_		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()))__	};copy,constructor,that,copies,the,type,subtype,parameters,of,the,given,code,mime,type,and,allows,to,set,the,specified,character,set,param,other,the,other,mime,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters,since,4,3;public,mime,type,mime,type,other,charset,charset,this,other,get,type,other,get,subtype,add,charset,parameter,charset,other,get,parameters
MimeType -> public boolean isCompatibleWith(@Nullable MimeType other);1496837955;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(@Nullable MimeType other);1497250713;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(@Nullable MimeType other);1500972359;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().lastIndexOf('+')__				int otherPlusIdx = other.getSubtype().lastIndexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,int,other,plus,idx,other,get,subtype,last,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(@Nullable MimeType other);1517575447;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				int otherPlusIdx = other.getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)__					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,int,other,plus,idx,other,get,subtype,last,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(@Nullable MimeType other);1518447318;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (isWildcardSubtype() || other.isWildcardSubtype()) {_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				int otherPlusIdx = other.getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)__					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,int,other,plus,idx,other,get,subtype,last,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(@Nullable MimeType other);1520094828;Indicate whether this MIME Type is compatible with the given MIME Type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference MIME Type with which to compare_@return {@code true} if this MIME Type is compatible with the given MIME Type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (isWildcardSubtype() || other.isWildcardSubtype()) {_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				int otherPlusIdx = other.getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)__					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,mime,type,is,compatible,with,the,given,mime,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,mime,type,with,which,to,compare,return,code,true,if,this,mime,type,is,compatible,with,the,given,mime,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,int,other,plus,idx,other,get,subtype,last,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(@Nullable MimeType other);1522103912;Indicate whether this MIME Type is compatible with the given MIME Type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference MIME Type with which to compare_@return {@code true} if this MIME Type is compatible with the given MIME Type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (isWildcardSubtype() || other.isWildcardSubtype()) {_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				int otherPlusIdx = other.getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)__					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,mime,type,is,compatible,with,the,given,mime,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,mime,type,with,which,to,compare,return,code,true,if,this,mime,type,is,compatible,with,the,given,mime,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,int,other,plus,idx,other,get,subtype,last,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(@Nullable MimeType other);1530174524;Indicate whether this MIME Type is compatible with the given MIME Type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference MIME Type with which to compare_@return {@code true} if this MIME Type is compatible with the given MIME Type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (isWildcardSubtype() || other.isWildcardSubtype()) {_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				int otherPlusIdx = other.getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)__					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,mime,type,is,compatible,with,the,given,mime,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,mime,type,with,which,to,compare,return,code,true,if,this,mime,type,is,compatible,with,the,given,mime,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,int,other,plus,idx,other,get,subtype,last,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(@Nullable MimeType other);1546457570;Indicate whether this MIME Type is compatible with the given MIME Type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference MIME Type with which to compare_@return {@code true} if this MIME Type is compatible with the given MIME Type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (isWildcardSubtype() || other.isWildcardSubtype()) {_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				int otherPlusIdx = other.getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)__					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,mime,type,is,compatible,with,the,given,mime,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,mime,type,with,which,to,compare,return,code,true,if,this,mime,type,is,compatible,with,the,given,mime,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,int,other,plus,idx,other,get,subtype,last,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(@Nullable MimeType other);1549373623;Indicate whether this MIME Type is compatible with the given MIME Type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference MIME Type with which to compare_@return {@code true} if this MIME Type is compatible with the given MIME Type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (isWildcardSubtype() || other.isWildcardSubtype()) {_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				int otherPlusIdx = other.getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)__					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,mime,type,is,compatible,with,the,given,mime,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,mime,type,with,which,to,compare,return,code,true,if,this,mime,type,is,compatible,with,the,given,mime,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,int,other,plus,idx,other,get,subtype,last,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(@Nullable MimeType other);1549377521;Indicate whether this MIME Type is compatible with the given MIME Type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference MIME Type with which to compare_@return {@code true} if this MIME Type is compatible with the given MIME Type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (isWildcardSubtype() || other.isWildcardSubtype()) {_				int thisPlusIdx = getSubtype().lastIndexOf('+')__				int otherPlusIdx = other.getSubtype().lastIndexOf('+')__				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)__					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,mime,type,is,compatible,with,the,given,mime,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,mime,type,with,which,to,compare,return,code,true,if,this,mime,type,is,compatible,with,the,given,mime,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,last,index,of,int,other,plus,idx,other,get,subtype,last,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1375896097;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1377201944;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1385501137;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1385507478;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1385507683;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1398192506;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1413289623;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1435087610;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1435091425;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1435183162;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1456785272;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1458843770;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1460644739;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1467726769;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1467730834;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1474905889;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, Map<String, String> parameters);1481292266;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public Charset getCharset();1460644739;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;public Charset getCharset() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;public,charset,get,charset,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharset();1467726769;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;public Charset getCharset() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;public,charset,get,charset,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharset();1467730834;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;public Charset getCharset() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;public,charset,get,charset,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharset();1474905889;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;public Charset getCharset() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;public,charset,get,charset,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MimeType -> public Charset getCharset();1481292266;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set, or {@code null} if not available_@since 4.3;public Charset getCharset() {_		String charset = getParameter(PARAM_CHARSET)__		return (charset != null ? Charset.forName(unquote(charset)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available,since,4,3;public,charset,get,charset,string,charset,get,parameter,return,charset,null,charset,for,name,unquote,charset,null
MimeType -> public MimeType(MimeType other, @Nullable Map<String, String> parameters);1495868221;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, @Nullable Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,nullable,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, @Nullable Map<String, String> parameters);1496837955;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, @Nullable Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,nullable,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, @Nullable Map<String, String> parameters);1497250713;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, @Nullable Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,nullable,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, @Nullable Map<String, String> parameters);1500972359;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, @Nullable Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,nullable,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, @Nullable Map<String, String> parameters);1517575447;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, @Nullable Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,nullable,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, @Nullable Map<String, String> parameters);1518447318;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, @Nullable Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,nullable,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, @Nullable Map<String, String> parameters);1520094828;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other MimeType_@param parameters the parameters (may be {@code null})_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, @Nullable Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,mime,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,nullable,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, @Nullable Map<String, String> parameters);1522103912;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other MimeType_@param parameters the parameters (may be {@code null})_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, @Nullable Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,mime,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,nullable,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, @Nullable Map<String, String> parameters);1530174524;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other MimeType_@param parameters the parameters (may be {@code null})_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, @Nullable Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,mime,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,nullable,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, @Nullable Map<String, String> parameters);1546457570;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other MimeType_@param parameters the parameters (may be {@code null})_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, @Nullable Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,mime,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,nullable,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, @Nullable Map<String, String> parameters);1549373623;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other MimeType_@param parameters the parameters (may be {@code null})_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, @Nullable Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,mime,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,nullable,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public MimeType(MimeType other, @Nullable Map<String, String> parameters);1549377521;Copy-constructor that copies the type and subtype of the given {@code MimeType},_and allows for different parameter._@param other the other MimeType_@param parameters the parameters (may be {@code null})_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(MimeType other, @Nullable Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,mime,type,and,allows,for,different,parameter,param,other,the,other,mime,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,mime,type,other,nullable,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MimeType -> public boolean equalsTypeAndSubtype(@Nullable MimeType other);1546457570;Similar to {@link #equals(Object)} but based on the type and subtype_only, i.e. ignoring parameters._@param other the other mime type to compare to_@return whether the two mime types have the same type and subtype_@since 5.1.4;public boolean equalsTypeAndSubtype(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		return this.type.equalsIgnoreCase(other.type) && this.subtype.equalsIgnoreCase(other.subtype)__	};similar,to,link,equals,object,but,based,on,the,type,and,subtype,only,i,e,ignoring,parameters,param,other,the,other,mime,type,to,compare,to,return,whether,the,two,mime,types,have,the,same,type,and,subtype,since,5,1,4;public,boolean,equals,type,and,subtype,nullable,mime,type,other,if,other,null,return,false,return,this,type,equals,ignore,case,other,type,this,subtype,equals,ignore,case,other,subtype
MimeType -> public boolean equalsTypeAndSubtype(@Nullable MimeType other);1549373623;Similar to {@link #equals(Object)} but based on the type and subtype_only, i.e. ignoring parameters._@param other the other mime type to compare to_@return whether the two mime types have the same type and subtype_@since 5.1.4;public boolean equalsTypeAndSubtype(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		return this.type.equalsIgnoreCase(other.type) && this.subtype.equalsIgnoreCase(other.subtype)__	};similar,to,link,equals,object,but,based,on,the,type,and,subtype,only,i,e,ignoring,parameters,param,other,the,other,mime,type,to,compare,to,return,whether,the,two,mime,types,have,the,same,type,and,subtype,since,5,1,4;public,boolean,equals,type,and,subtype,nullable,mime,type,other,if,other,null,return,false,return,this,type,equals,ignore,case,other,type,this,subtype,equals,ignore,case,other,subtype
MimeType -> public boolean equalsTypeAndSubtype(@Nullable MimeType other);1549377521;Similar to {@link #equals(Object)} but based on the type and subtype_only, i.e. ignoring parameters._@param other the other mime type to compare to_@return whether the two mime types have the same type and subtype_@since 5.1.4;public boolean equalsTypeAndSubtype(@Nullable MimeType other) {_		if (other == null) {_			return false__		}_		return this.type.equalsIgnoreCase(other.type) && this.subtype.equalsIgnoreCase(other.subtype)__	};similar,to,link,equals,object,but,based,on,the,type,and,subtype,only,i,e,ignoring,parameters,param,other,the,other,mime,type,to,compare,to,return,whether,the,two,mime,types,have,the,same,type,and,subtype,since,5,1,4;public,boolean,equals,type,and,subtype,nullable,mime,type,other,if,other,null,return,false,return,this,type,equals,ignore,case,other,type,this,subtype,equals,ignore,case,other,subtype
MimeType -> private boolean parametersAreEqual(MimeType that);1435091425;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType that) {_		if (this.parameters.size() != that.parameters.size()) {_			return false__		}__		for (Entry<String, String> entry : this.parameters.entrySet()) {_			String key = entry.getKey()__			if (!that.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(this.getCharSet(), that.getCharSet())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), that.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,that,if,this,parameters,size,that,parameters,size,return,false,for,entry,string,string,entry,this,parameters,entry,set,string,key,entry,get,key,if,that,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,this,get,char,set,that,get,char,set,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,that,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType that);1435183162;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType that) {_		if (this.parameters.size() != that.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!that.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(this.getCharSet(), that.getCharSet())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), that.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,that,if,this,parameters,size,that,parameters,size,return,false,for,string,key,this,parameters,key,set,if,that,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,this,get,char,set,that,get,char,set,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,that,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType that);1456785272;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType that) {_		if (this.parameters.size() != that.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!that.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(this.getCharSet(), that.getCharSet())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), that.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,that,if,this,parameters,size,that,parameters,size,return,false,for,string,key,this,parameters,key,set,if,that,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,this,get,char,set,that,get,char,set,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,that,parameters,get,key,return,false,return,true
MimeType -> private boolean parametersAreEqual(MimeType that);1458843770;Determine if the parameters in this {@code MimeType} and the supplied_{@code MimeType} are equal, performing case-insensitive comparisons_for {@link Charset}s._@since 4.2;private boolean parametersAreEqual(MimeType that) {_		if (this.parameters.size() != that.parameters.size()) {_			return false__		}__		for (String key : this.parameters.keySet()) {_			if (!that.parameters.containsKey(key)) {_				return false__			}__			if (PARAM_CHARSET.equals(key)) {_				if (!ObjectUtils.nullSafeEquals(this.getCharSet(), that.getCharSet())) {_					return false__				}_			}_			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), that.parameters.get(key))) {_				return false__			}_		}__		return true__	};determine,if,the,parameters,in,this,code,mime,type,and,the,supplied,code,mime,type,are,equal,performing,case,insensitive,comparisons,for,link,charset,s,since,4,2;private,boolean,parameters,are,equal,mime,type,that,if,this,parameters,size,that,parameters,size,return,false,for,string,key,this,parameters,key,set,if,that,parameters,contains,key,key,return,false,if,equals,key,if,object,utils,null,safe,equals,this,get,char,set,that,get,char,set,return,false,else,if,object,utils,null,safe,equals,this,parameters,get,key,that,parameters,get,key,return,false,return,true
MimeType -> public Map<String, String> getParameters();1375896097;Return all generic parameter values._@return a read-only map, possibly empty, never {@code null};public Map<String, String> getParameters() {_			return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,parameters
MimeType -> public Map<String, String> getParameters();1377201944;Return all generic parameter values._@return a read-only map, possibly empty, never {@code null};public Map<String, String> getParameters() {_			return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,parameters
MimeType -> public Map<String, String> getParameters();1385501137;Return all generic parameter values._@return a read-only map, possibly empty, never {@code null};public Map<String, String> getParameters() {_			return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,parameters
MimeType -> public Map<String, String> getParameters();1385507478;Return all generic parameter values._@return a read-only map, possibly empty, never {@code null};public Map<String, String> getParameters() {_			return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,parameters
MimeType -> public Map<String, String> getParameters();1385507683;Return all generic parameter values._@return a read-only map, possibly empty, never {@code null};public Map<String, String> getParameters() {_			return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,parameters
MimeType -> public Map<String, String> getParameters();1398192506;Return all generic parameter values._@return a read-only map, possibly empty, never {@code null};public Map<String, String> getParameters() {_			return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,parameters
MimeType -> public Map<String, String> getParameters();1413289623;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1435087610;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1435091425;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1435183162;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1456785272;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1458843770;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1460644739;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1467726769;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1467730834;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1474905889;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1481292266;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1495868221;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1496837955;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1497250713;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1500972359;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1517575447;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1518447318;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1520094828;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1522103912;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1530174524;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1546457570;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1549373623;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public Map<String, String> getParameters();1549377521;Return all generic parameter values._@return a read-only map (possibly empty, never {@code null});public Map<String, String> getParameters() {_		return this.parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,this,parameters
MimeType -> public MimeType(String type);1375896097;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1377201944;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1385501137;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1385507478;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1385507683;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1398192506;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1413289623;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1435087610;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1435091425;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1435183162;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1456785272;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1458843770;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1460644739;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1467726769;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1467730834;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1474905889;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1481292266;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1495868221;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1496837955;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1497250713;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1500972359;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1517575447;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1518447318;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1520094828;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1522103912;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1530174524;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1546457570;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1549373623;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public MimeType(String type);1549377521;Create a new {@code MimeType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>"&#42_"</code>,_and the parameters are empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,mime,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,and,the,parameters,are,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,this,type
MimeType -> public boolean isCompatibleWith(MimeType other);1375896097;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1377201944;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1385501137;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1385507478;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1385507683;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1398192506;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1413289623;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1435087610;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1435091425;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1435183162;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1456785272;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1458843770;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1460644739;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1467726769;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1467730834;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1474905889;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1481292266;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public boolean isCompatibleWith(MimeType other);1495868221;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(MimeType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = getSubtype().indexOf('+')__				int otherPlusIdx = other.getSubtype().indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx)___					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,mime,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,int,other,plus,idx,other,get,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,get,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MimeType -> public MimeType(String type, String subtype, @Nullable Map<String, String> parameters);1495868221;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,nullable,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, @Nullable Map<String, String> parameters);1496837955;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				map.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,nullable,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, @Nullable Map<String, String> parameters);1497250713;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			parameters.forEach((attribute, value) -> {_				checkParameters(attribute, value)__				map.put(attribute, value)__			})__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,nullable,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,parameters,for,each,attribute,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, @Nullable Map<String, String> parameters);1500972359;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			parameters.forEach((attribute, value) -> {_				checkParameters(attribute, value)__				map.put(attribute, value)__			})__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,nullable,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,parameters,for,each,attribute,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, @Nullable Map<String, String> parameters);1517575447;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			parameters.forEach((attribute, value) -> {_				checkParameters(attribute, value)__				map.put(attribute, value)__			})__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,nullable,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,parameters,for,each,attribute,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, @Nullable Map<String, String> parameters);1518447318;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			parameters.forEach((attribute, value) -> {_				checkParameters(attribute, value)__				map.put(attribute, value)__			})__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,nullable,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,parameters,for,each,attribute,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, @Nullable Map<String, String> parameters);1520094828;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters (may be {@code null})_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			parameters.forEach((attribute, value) -> {_				checkParameters(attribute, value)__				map.put(attribute, value)__			})__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,nullable,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,parameters,for,each,attribute,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, @Nullable Map<String, String> parameters);1522103912;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters (may be {@code null})_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			parameters.forEach((attribute, value) -> {_				checkParameters(attribute, value)__				map.put(attribute, value)__			})__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,nullable,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,parameters,for,each,attribute,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, @Nullable Map<String, String> parameters);1530174524;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters (may be {@code null})_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			parameters.forEach((attribute, value) -> {_				checkParameters(attribute, value)__				map.put(attribute, value)__			})__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,nullable,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,parameters,for,each,attribute,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, @Nullable Map<String, String> parameters);1546457570;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters (may be {@code null})_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			parameters.forEach((attribute, value) -> {_				checkParameters(attribute, value)__				map.put(attribute, value)__			})__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,nullable,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,parameters,for,each,attribute,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, @Nullable Map<String, String> parameters);1549373623;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters (may be {@code null})_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			parameters.forEach((attribute, value) -> {_				checkParameters(attribute, value)__				map.put(attribute, value)__			})__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,nullable,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,parameters,for,each,attribute,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public MimeType(String type, String subtype, @Nullable Map<String, String> parameters);1549377521;Create a new {@code MimeType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters (may be {@code null})_@throws IllegalArgumentException if any of the parameters contains illegal characters;public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			parameters.forEach((attribute, value) -> {_				checkParameters(attribute, value)__				map.put(attribute, value)__			})__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,mime,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contains,illegal,characters;public,mime,type,string,type,string,subtype,nullable,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,parameters,for,each,attribute,value,check,parameters,attribute,value,map,put,attribute,value,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
MimeType -> public boolean isConcrete();1375896097;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1377201944;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1385501137;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1385507478;Indicates whether this media type is concrete, i.e. whether neither the type or_subtype is a wildcard character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1385507683;Indicates whether this media type is concrete, i.e. whether neither the type or_subtype is a wildcard character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1398192506;Indicates whether this media type is concrete, i.e. whether neither the type or_subtype is a wildcard character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1413289623;Indicates whether this media type is concrete, i.e. whether neither the type or_subtype is a wildcard character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1435087610;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1435091425;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1435183162;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1456785272;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1458843770;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1460644739;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1467726769;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1467730834;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1474905889;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1481292266;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1495868221;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1496837955;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1497250713;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1500972359;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1517575447;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1518447318;Indicates whether this media type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1520094828;Indicates whether this MIME Type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this MIME Type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,mime,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,mime,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1522103912;Indicates whether this MIME Type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this MIME Type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,mime,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,mime,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1530174524;Indicates whether this MIME Type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this MIME Type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,mime,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,mime,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1546457570;Indicates whether this MIME Type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this MIME Type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,mime,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,mime,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1549373623;Indicates whether this MIME Type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this MIME Type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,mime,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,mime,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> public boolean isConcrete();1549377521;Indicates whether this MIME Type is concrete, i.e. whether neither the type_nor the subtype is a wildcard character <code>&#42_</code>._@return whether this MIME Type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,mime,type,is,concrete,i,e,whether,neither,the,type,nor,the,subtype,is,a,wildcard,character,code,42,code,return,whether,this,mime,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MimeType -> private void checkToken(String token);1375896097;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1377201944;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1385501137;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1385507478;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1385507683;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1398192506;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1413289623;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1435087610;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1435091425;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1435183162;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1456785272;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1458843770;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1460644739;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1467726769;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1467730834;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1474905889;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1481292266;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1495868221;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1496837955;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1497250713;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1500972359;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1517575447;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1518447318;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1520094828;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1522103912;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1530174524;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1546457570;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1549373623;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> private void checkToken(String token);1549377521;Checks the given token string for illegal characters, as defined in RFC 2616,_section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i = 0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MimeType -> public boolean includes(MimeType other);1375896097;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1377201944;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1385501137;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1385507478;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1385507683;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1398192506;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1413289623;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1435087610;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1435091425;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1435183162;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1456785272;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1458843770;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1460644739;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1467726769;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1467730834;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1474905889;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1481292266;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public boolean includes(MimeType other);1495868221;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc. This_method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(MimeType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (getType().equals(other.getType())) {_			if (getSubtype().equals(other.getSubtype())) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = getSubtype().indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.getSubtype().indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx)__						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,mime,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,get,type,equals,other,get,type,if,get,subtype,equals,other,get,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,get,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,get,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,get,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,get,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,get,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MimeType -> public String getParameter(String name);1375896097;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1377201944;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1385501137;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1385507478;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1385507683;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1398192506;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1413289623;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1435087610;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1435091425;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1435183162;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1456785272;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1458843770;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1460644739;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1467726769;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1467730834;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1474905889;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MimeType -> public String getParameter(String name);1481292266;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value, or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
