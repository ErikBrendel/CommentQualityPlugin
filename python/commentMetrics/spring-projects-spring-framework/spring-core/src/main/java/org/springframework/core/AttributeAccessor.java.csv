# id;timestamp;commentText;codeText;commentWords;codeWords
AttributeAccessor -> Object removeAttribute(String name)_;1328020251;Remove the attribute identified by <code>name</code> and return its value._Return <code>null</code> if no attribute under <code>name</code> is found._@param name the unique attribute key_@return the last value of the attribute, if any;Object removeAttribute(String name)_;remove,the,attribute,identified,by,code,name,code,and,return,its,value,return,code,null,code,if,no,attribute,under,code,name,code,is,found,param,name,the,unique,attribute,key,return,the,last,value,of,the,attribute,if,any;object,remove,attribute,string,name
AttributeAccessor -> Object removeAttribute(String name)_;1356735495;Remove the attribute identified by {@code name} and return its value._Return {@code null} if no attribute under {@code name} is found._@param name the unique attribute key_@return the last value of the attribute, if any;Object removeAttribute(String name)_;remove,the,attribute,identified,by,code,name,and,return,its,value,return,code,null,if,no,attribute,under,code,name,is,found,param,name,the,unique,attribute,key,return,the,last,value,of,the,attribute,if,any;object,remove,attribute,string,name
AttributeAccessor -> String[] attributeNames()_;1328020251;Return the names of all attributes.;String[] attributeNames()_;return,the,names,of,all,attributes;string,attribute,names
AttributeAccessor -> String[] attributeNames()_;1356735495;Return the names of all attributes.;String[] attributeNames()_;return,the,names,of,all,attributes;string,attribute,names
AttributeAccessor -> String[] attributeNames()_;1495868221;Return the names of all attributes.;String[] attributeNames()_;return,the,names,of,all,attributes;string,attribute,names
AttributeAccessor -> String[] attributeNames()_;1538724083;Return the names of all attributes.;String[] attributeNames()_;return,the,names,of,all,attributes;string,attribute,names
AttributeAccessor -> Object getAttribute(String name)_;1328020251;Get the value of the attribute identified by <code>name</code>._Return <code>null</code> if the attribute doesn't exist._@param name the unique attribute key_@return the current value of the attribute, if any;Object getAttribute(String name)_;get,the,value,of,the,attribute,identified,by,code,name,code,return,code,null,code,if,the,attribute,doesn,t,exist,param,name,the,unique,attribute,key,return,the,current,value,of,the,attribute,if,any;object,get,attribute,string,name
AttributeAccessor -> Object getAttribute(String name)_;1356735495;Get the value of the attribute identified by {@code name}._Return {@code null} if the attribute doesn't exist._@param name the unique attribute key_@return the current value of the attribute, if any;Object getAttribute(String name)_;get,the,value,of,the,attribute,identified,by,code,name,return,code,null,if,the,attribute,doesn,t,exist,param,name,the,unique,attribute,key,return,the,current,value,of,the,attribute,if,any;object,get,attribute,string,name
AttributeAccessor -> boolean hasAttribute(String name)_;1328020251;Return <code>true</code> if the attribute identified by <code>name</code> exists._Otherwise return <code>false</code>._@param name the unique attribute key;boolean hasAttribute(String name)_;return,code,true,code,if,the,attribute,identified,by,code,name,code,exists,otherwise,return,code,false,code,param,name,the,unique,attribute,key;boolean,has,attribute,string,name
AttributeAccessor -> boolean hasAttribute(String name)_;1356735495;Return {@code true} if the attribute identified by {@code name} exists._Otherwise return {@code false}._@param name the unique attribute key;boolean hasAttribute(String name)_;return,code,true,if,the,attribute,identified,by,code,name,exists,otherwise,return,code,false,param,name,the,unique,attribute,key;boolean,has,attribute,string,name
AttributeAccessor -> boolean hasAttribute(String name)_;1495868221;Return {@code true} if the attribute identified by {@code name} exists._Otherwise return {@code false}._@param name the unique attribute key;boolean hasAttribute(String name)_;return,code,true,if,the,attribute,identified,by,code,name,exists,otherwise,return,code,false,param,name,the,unique,attribute,key;boolean,has,attribute,string,name
AttributeAccessor -> boolean hasAttribute(String name)_;1538724083;Return {@code true} if the attribute identified by {@code name} exists._Otherwise return {@code false}._@param name the unique attribute key;boolean hasAttribute(String name)_;return,code,true,if,the,attribute,identified,by,code,name,exists,otherwise,return,code,false,param,name,the,unique,attribute,key;boolean,has,attribute,string,name
AttributeAccessor -> @Nullable 	Object removeAttribute(String name)_;1495868221;Remove the attribute identified by {@code name} and return its value._Return {@code null} if no attribute under {@code name} is found._@param name the unique attribute key_@return the last value of the attribute, if any;@Nullable_	Object removeAttribute(String name)_;remove,the,attribute,identified,by,code,name,and,return,its,value,return,code,null,if,no,attribute,under,code,name,is,found,param,name,the,unique,attribute,key,return,the,last,value,of,the,attribute,if,any;nullable,object,remove,attribute,string,name
AttributeAccessor -> @Nullable 	Object removeAttribute(String name)_;1538724083;Remove the attribute identified by {@code name} and return its value._Return {@code null} if no attribute under {@code name} is found._@param name the unique attribute key_@return the last value of the attribute, if any;@Nullable_	Object removeAttribute(String name)_;remove,the,attribute,identified,by,code,name,and,return,its,value,return,code,null,if,no,attribute,under,code,name,is,found,param,name,the,unique,attribute,key,return,the,last,value,of,the,attribute,if,any;nullable,object,remove,attribute,string,name
AttributeAccessor -> void setAttribute(String name, Object value)_;1328020251;Set the attribute defined by <code>name</code> to the supplied	<code>value</code>._If <code>value</code> is <code>null</code>, the attribute is {@link #removeAttribute removed}._<p>In general, users should take care to prevent overlaps with other_metadata attributes by using fully-qualified names, perhaps using_class or package names as prefix._@param name the unique attribute key_@param value the attribute value to be attached;void setAttribute(String name, Object value)_;set,the,attribute,defined,by,code,name,code,to,the,supplied,code,value,code,if,code,value,code,is,code,null,code,the,attribute,is,link,remove,attribute,removed,p,in,general,users,should,take,care,to,prevent,overlaps,with,other,metadata,attributes,by,using,fully,qualified,names,perhaps,using,class,or,package,names,as,prefix,param,name,the,unique,attribute,key,param,value,the,attribute,value,to,be,attached;void,set,attribute,string,name,object,value
AttributeAccessor -> void setAttribute(String name, Object value)_;1356735495;Set the attribute defined by {@code name} to the supplied	{@code value}._If {@code value} is {@code null}, the attribute is {@link #removeAttribute removed}._<p>In general, users should take care to prevent overlaps with other_metadata attributes by using fully-qualified names, perhaps using_class or package names as prefix._@param name the unique attribute key_@param value the attribute value to be attached;void setAttribute(String name, Object value)_;set,the,attribute,defined,by,code,name,to,the,supplied,code,value,if,code,value,is,code,null,the,attribute,is,link,remove,attribute,removed,p,in,general,users,should,take,care,to,prevent,overlaps,with,other,metadata,attributes,by,using,fully,qualified,names,perhaps,using,class,or,package,names,as,prefix,param,name,the,unique,attribute,key,param,value,the,attribute,value,to,be,attached;void,set,attribute,string,name,object,value
AttributeAccessor -> @Nullable 	Object getAttribute(String name)_;1495868221;Get the value of the attribute identified by {@code name}._Return {@code null} if the attribute doesn't exist._@param name the unique attribute key_@return the current value of the attribute, if any;@Nullable_	Object getAttribute(String name)_;get,the,value,of,the,attribute,identified,by,code,name,return,code,null,if,the,attribute,doesn,t,exist,param,name,the,unique,attribute,key,return,the,current,value,of,the,attribute,if,any;nullable,object,get,attribute,string,name
AttributeAccessor -> @Nullable 	Object getAttribute(String name)_;1538724083;Get the value of the attribute identified by {@code name}._Return {@code null} if the attribute doesn't exist._@param name the unique attribute key_@return the current value of the attribute, if any;@Nullable_	Object getAttribute(String name)_;get,the,value,of,the,attribute,identified,by,code,name,return,code,null,if,the,attribute,doesn,t,exist,param,name,the,unique,attribute,key,return,the,current,value,of,the,attribute,if,any;nullable,object,get,attribute,string,name
AttributeAccessor -> void setAttribute(String name, @Nullable Object value)_;1495868221;Set the attribute defined by {@code name} to the supplied	{@code value}._If {@code value} is {@code null}, the attribute is {@link #removeAttribute removed}._<p>In general, users should take care to prevent overlaps with other_metadata attributes by using fully-qualified names, perhaps using_class or package names as prefix._@param name the unique attribute key_@param value the attribute value to be attached;void setAttribute(String name, @Nullable Object value)_;set,the,attribute,defined,by,code,name,to,the,supplied,code,value,if,code,value,is,code,null,the,attribute,is,link,remove,attribute,removed,p,in,general,users,should,take,care,to,prevent,overlaps,with,other,metadata,attributes,by,using,fully,qualified,names,perhaps,using,class,or,package,names,as,prefix,param,name,the,unique,attribute,key,param,value,the,attribute,value,to,be,attached;void,set,attribute,string,name,nullable,object,value
AttributeAccessor -> void setAttribute(String name, @Nullable Object value)_;1538724083;Set the attribute defined by {@code name} to the supplied {@code value}._If {@code value} is {@code null}, the attribute is {@link #removeAttribute removed}._<p>In general, users should take care to prevent overlaps with other_metadata attributes by using fully-qualified names, perhaps using_class or package names as prefix._@param name the unique attribute key_@param value the attribute value to be attached;void setAttribute(String name, @Nullable Object value)_;set,the,attribute,defined,by,code,name,to,the,supplied,code,value,if,code,value,is,code,null,the,attribute,is,link,remove,attribute,removed,p,in,general,users,should,take,care,to,prevent,overlaps,with,other,metadata,attributes,by,using,fully,qualified,names,perhaps,using,class,or,package,names,as,prefix,param,name,the,unique,attribute,key,param,value,the,attribute,value,to,be,attached;void,set,attribute,string,name,nullable,object,value
