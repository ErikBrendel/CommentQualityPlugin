commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Set the attribute defined by {@code name} to the supplied {@code value}.  * If {@code value} is {@code null}, the attribute is {@link #removeAttribute removed}.  * <p>In general, users should take care to prevent overlaps with other  * metadata attributes by using fully-qualified names, perhaps using  * class or package names as prefix.  * @param name the unique attribute key  * @param value the attribute value to be attached  */ ;/**  * Set the attribute defined by {@code name} to the supplied {@code value}.  * If {@code value} is {@code null}, the attribute is {@link #removeAttribute removed}.  * <p>In general, users should take care to prevent overlaps with other  * metadata attributes by using fully-qualified names, perhaps using  * class or package names as prefix.  * @param name the unique attribute key  * @param value the attribute value to be attached  */ void setAttribute(String name, @Nullable Object value).
true;;1;2;/**  * Get the value of the attribute identified by {@code name}.  * Return {@code null} if the attribute doesn't exist.  * @param name the unique attribute key  * @return the current value of the attribute, if any  */ ;/**  * Get the value of the attribute identified by {@code name}.  * Return {@code null} if the attribute doesn't exist.  * @param name the unique attribute key  * @return the current value of the attribute, if any  */ @Nullable Object getAttribute(String name).
true;;1;2;/**  * Remove the attribute identified by {@code name} and return its value.  * Return {@code null} if no attribute under {@code name} is found.  * @param name the unique attribute key  * @return the last value of the attribute, if any  */ ;/**  * Remove the attribute identified by {@code name} and return its value.  * Return {@code null} if no attribute under {@code name} is found.  * @param name the unique attribute key  * @return the last value of the attribute, if any  */ @Nullable Object removeAttribute(String name).
true;;1;1;/**  * Return {@code true} if the attribute identified by {@code name} exists.  * Otherwise return {@code false}.  * @param name the unique attribute key  */ ;/**  * Return {@code true} if the attribute identified by {@code name} exists.  * Otherwise return {@code false}.  * @param name the unique attribute key  */ boolean hasAttribute(String name).
true;;0;1;/**  * Return the names of all attributes.  */ ;/**  * Return the names of all attributes.  */ String[] attributeNames().
