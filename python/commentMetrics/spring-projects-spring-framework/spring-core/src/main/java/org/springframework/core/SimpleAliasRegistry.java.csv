# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleAliasRegistry -> public String canonicalName(String name);1328020251;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1355352386;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1356735495;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1357119239;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1368482696;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1431461084;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1440515183;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1467730834;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1497250713;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1520857668;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1522103912;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1527623493;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1530174524;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1530174524;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1532091916;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public String canonicalName(String name);1534492454;Determine the raw name, resolving aliases to canonical names._@param name the user-specified name_@return the transformed name;public String canonicalName(String name) {_		String canonicalName = name__		_		String resolvedName__		do {_			resolvedName = this.aliasMap.get(canonicalName)__			if (resolvedName != null) {_				canonicalName = resolvedName__			}_		}_		while (resolvedName != null)__		return canonicalName__	};determine,the,raw,name,resolving,aliases,to,canonical,names,param,name,the,user,specified,name,return,the,transformed,name;public,string,canonical,name,string,name,string,canonical,name,name,string,resolved,name,do,resolved,name,this,alias,map,get,canonical,name,if,resolved,name,null,canonical,name,resolved,name,while,resolved,name,null,return,canonical,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1328020251;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<String, String>(this.aliasMap)__			for (String alias : aliasCopy.keySet()) {_				String registeredName = aliasCopy.get(alias)__				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null && !existingName.equals(resolvedName)) {_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			}_		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,string,string,this,alias,map,for,string,alias,alias,copy,key,set,string,registered,name,alias,copy,get,alias,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,existing,name,equals,resolved,name,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1355352386;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<String, String>(this.aliasMap)__			for (String alias : aliasCopy.keySet()) {_				String registeredName = aliasCopy.get(alias)__				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null && !existingName.equals(resolvedName)) {_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			}_		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,string,string,this,alias,map,for,string,alias,alias,copy,key,set,string,registered,name,alias,copy,get,alias,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,existing,name,equals,resolved,name,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1356735495;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<String, String>(this.aliasMap)__			for (String alias : aliasCopy.keySet()) {_				String registeredName = aliasCopy.get(alias)__				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null && !existingName.equals(resolvedName)) {_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			}_		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,string,string,this,alias,map,for,string,alias,alias,copy,key,set,string,registered,name,alias,copy,get,alias,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,existing,name,equals,resolved,name,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1357119239;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<String, String>(this.aliasMap)__			for (String alias : aliasCopy.keySet()) {_				String registeredName = aliasCopy.get(alias)__				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null && !existingName.equals(resolvedName)) {_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			}_		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,string,string,this,alias,map,for,string,alias,alias,copy,key,set,string,registered,name,alias,copy,get,alias,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,existing,name,equals,resolved,name,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1368482696;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<String, String>(this.aliasMap)__			for (String alias : aliasCopy.keySet()) {_				String registeredName = aliasCopy.get(alias)__				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null && !existingName.equals(resolvedName)) {_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			}_		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,string,string,this,alias,map,for,string,alias,alias,copy,key,set,string,registered,name,alias,copy,get,alias,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,existing,name,equals,resolved,name,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1431461084;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<String, String>(this.aliasMap)__			for (String alias : aliasCopy.keySet()) {_				String registeredName = aliasCopy.get(alias)__				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null && !existingName.equals(resolvedName)) {_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			}_		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,string,string,this,alias,map,for,string,alias,alias,copy,key,set,string,registered,name,alias,copy,get,alias,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,null,resolved,name,null,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,existing,name,equals,resolved,name,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1440515183;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<String, String>(this.aliasMap)__			for (String alias : aliasCopy.keySet()) {_				String registeredName = aliasCopy.get(alias)__				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null) {_						if (existingName.equals(resolvedName)) {_							_							this.aliasMap.remove(alias)__							break__						}_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			}_		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,string,string,this,alias,map,for,string,alias,alias,copy,key,set,string,registered,name,alias,copy,get,alias,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,null,resolved,name,null,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,if,existing,name,equals,resolved,name,this,alias,map,remove,alias,break,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1467730834;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<>(this.aliasMap)__			for (String alias : aliasCopy.keySet()) {_				String registeredName = aliasCopy.get(alias)__				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null) {_						if (existingName.equals(resolvedName)) {_							_							this.aliasMap.remove(alias)__							break__						}_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			}_		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,this,alias,map,for,string,alias,alias,copy,key,set,string,registered,name,alias,copy,get,alias,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,null,resolved,name,null,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,if,existing,name,equals,resolved,name,this,alias,map,remove,alias,break,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1497250713;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<>(this.aliasMap)__			for (String alias : aliasCopy.keySet()) {_				String registeredName = aliasCopy.get(alias)__				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null) {_						if (existingName.equals(resolvedName)) {_							_							this.aliasMap.remove(alias)__							break__						}_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			}_		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,this,alias,map,for,string,alias,alias,copy,key,set,string,registered,name,alias,copy,get,alias,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,null,resolved,name,null,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,if,existing,name,equals,resolved,name,this,alias,map,remove,alias,break,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1520857668;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<>(this.aliasMap)__			for (String alias : aliasCopy.keySet()) {_				String registeredName = aliasCopy.get(alias)__				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null) {_						if (existingName.equals(resolvedName)) {_							_							this.aliasMap.remove(alias)__							break__						}_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			}_		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,this,alias,map,for,string,alias,alias,copy,key,set,string,registered,name,alias,copy,get,alias,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,null,resolved,name,null,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,if,existing,name,equals,resolved,name,this,alias,map,remove,alias,break,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1522103912;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<>(this.aliasMap)__			aliasCopy.forEach((alias, registeredName) -> {_				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null) {_						if (existingName.equals(resolvedName)) {_							_							this.aliasMap.remove(alias)__							return__						}_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			})__		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,this,alias,map,alias,copy,for,each,alias,registered,name,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,null,resolved,name,null,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,if,existing,name,equals,resolved,name,this,alias,map,remove,alias,return,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1527623493;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<>(this.aliasMap)__			aliasCopy.forEach((alias, registeredName) -> {_				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null) {_						if (existingName.equals(resolvedName)) {_							_							this.aliasMap.remove(alias)__							return__						}_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			})__		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,this,alias,map,alias,copy,for,each,alias,registered,name,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,null,resolved,name,null,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,if,existing,name,equals,resolved,name,this,alias,map,remove,alias,return,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1530174524;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<>(this.aliasMap)__			aliasCopy.forEach((alias, registeredName) -> {_				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null) {_						if (existingName.equals(resolvedName)) {_							_							this.aliasMap.remove(alias)__							return__						}_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			})__		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,this,alias,map,alias,copy,for,each,alias,registered,name,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,null,resolved,name,null,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,if,existing,name,equals,resolved,name,this,alias,map,remove,alias,return,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1530174524;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<>(this.aliasMap)__			aliasCopy.forEach((alias, registeredName) -> {_				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null) {_						if (existingName.equals(resolvedName)) {_							_							this.aliasMap.remove(alias)__							return__						}_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			})__		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,this,alias,map,alias,copy,for,each,alias,registered,name,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,null,resolved,name,null,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,if,existing,name,equals,resolved,name,this,alias,map,remove,alias,return,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1532091916;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<>(this.aliasMap)__			aliasCopy.forEach((alias, registeredName) -> {_				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null) {_						if (existingName.equals(resolvedName)) {_							_							this.aliasMap.remove(alias)__							return__						}_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			})__		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,this,alias,map,alias,copy,for,each,alias,registered,name,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,null,resolved,name,null,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,if,existing,name,equals,resolved,name,this,alias,map,remove,alias,return,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> public void resolveAliases(StringValueResolver valueResolver);1534492454;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply;public void resolveAliases(StringValueResolver valueResolver) {_		Assert.notNull(valueResolver, "StringValueResolver must not be null")__		synchronized (this.aliasMap) {_			Map<String, String> aliasCopy = new HashMap<>(this.aliasMap)__			aliasCopy.forEach((alias, registeredName) -> {_				String resolvedAlias = valueResolver.resolveStringValue(alias)__				String resolvedName = valueResolver.resolveStringValue(registeredName)__				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {_					this.aliasMap.remove(alias)__				}_				else if (!resolvedAlias.equals(alias)) {_					String existingName = this.aliasMap.get(resolvedAlias)__					if (existingName != null) {_						if (existingName.equals(resolvedName)) {_							_							this.aliasMap.remove(alias)__							return__						}_						throw new IllegalStateException(_								"Cannot register resolved alias '" + resolvedAlias + "' (original: '" + alias +_								"') for name '" + resolvedName + "': It is already registered for name '" +_								registeredName + "'.")__					}_					checkForAliasCircle(resolvedName, resolvedAlias)__					this.aliasMap.remove(alias)__					this.aliasMap.put(resolvedAlias, resolvedName)__				}_				else if (!registeredName.equals(resolvedName)) {_					this.aliasMap.put(alias, resolvedName)__				}_			})__		}_	};resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply;public,void,resolve,aliases,string,value,resolver,value,resolver,assert,not,null,value,resolver,string,value,resolver,must,not,be,null,synchronized,this,alias,map,map,string,string,alias,copy,new,hash,map,this,alias,map,alias,copy,for,each,alias,registered,name,string,resolved,alias,value,resolver,resolve,string,value,alias,string,resolved,name,value,resolver,resolve,string,value,registered,name,if,resolved,alias,null,resolved,name,null,resolved,alias,equals,resolved,name,this,alias,map,remove,alias,else,if,resolved,alias,equals,alias,string,existing,name,this,alias,map,get,resolved,alias,if,existing,name,null,if,existing,name,equals,resolved,name,this,alias,map,remove,alias,return,throw,new,illegal,state,exception,cannot,register,resolved,alias,resolved,alias,original,alias,for,name,resolved,name,it,is,already,registered,for,name,registered,name,check,for,alias,circle,resolved,name,resolved,alias,this,alias,map,remove,alias,this,alias,map,put,resolved,alias,resolved,name,else,if,registered,name,equals,resolved,name,this,alias,map,put,alias,resolved,name
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1328020251;Check whether the given name points back to given alias as an alias_in the other direction, catching a circular reference upfront and_throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias;protected void checkForAliasCircle(String name, String alias) {_		if (alias.equals(canonicalName(name))) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,given,alias,as,an,alias,in,the,other,direction,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,alias,equals,canonical,name,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1355352386;Check whether the given name points back to given alias as an alias_in the other direction, catching a circular reference upfront and_throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias;protected void checkForAliasCircle(String name, String alias) {_		if (alias.equals(canonicalName(name))) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,given,alias,as,an,alias,in,the,other,direction,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,alias,equals,canonical,name,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1356735495;Check whether the given name points back to given alias as an alias_in the other direction, catching a circular reference upfront and_throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias;protected void checkForAliasCircle(String name, String alias) {_		if (alias.equals(canonicalName(name))) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,given,alias,as,an,alias,in,the,other,direction,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,alias,equals,canonical,name,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1357119239;Check whether the given name points back to given alias as an alias_in the other direction, catching a circular reference upfront and_throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias;protected void checkForAliasCircle(String name, String alias) {_		if (alias.equals(canonicalName(name))) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,given,alias,as,an,alias,in,the,other,direction,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,alias,equals,canonical,name,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1368482696;Check whether the given name points back to given alias as an alias_in the other direction, catching a circular reference upfront and_throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias;protected void checkForAliasCircle(String name, String alias) {_		if (alias.equals(canonicalName(name))) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,given,alias,as,an,alias,in,the,other,direction,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,alias,equals,canonical,name,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1431461084;Check whether the given name points back to given alias as an alias_in the other direction, catching a circular reference upfront and_throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias;protected void checkForAliasCircle(String name, String alias) {_		if (alias.equals(canonicalName(name))) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,given,alias,as,an,alias,in,the,other,direction,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,alias,equals,canonical,name,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1440515183;Check whether the given name points back to the given alias as an alias_in the other direction already, catching a circular reference upfront_and throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias_@see #hasAlias;protected void checkForAliasCircle(String name, String alias) {_		if (hasAlias(alias, name)) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,the,given,alias,as,an,alias,in,the,other,direction,already,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias,see,has,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,has,alias,alias,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1467730834;Check whether the given name points back to the given alias as an alias_in the other direction already, catching a circular reference upfront_and throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias_@see #hasAlias;protected void checkForAliasCircle(String name, String alias) {_		if (hasAlias(alias, name)) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,the,given,alias,as,an,alias,in,the,other,direction,already,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias,see,has,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,has,alias,alias,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1497250713;Check whether the given name points back to the given alias as an alias_in the other direction already, catching a circular reference upfront_and throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias_@see #hasAlias;protected void checkForAliasCircle(String name, String alias) {_		if (hasAlias(alias, name)) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,the,given,alias,as,an,alias,in,the,other,direction,already,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias,see,has,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,has,alias,alias,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1520857668;Check whether the given name points back to the given alias as an alias_in the other direction already, catching a circular reference upfront_and throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias_@see #hasAlias;protected void checkForAliasCircle(String name, String alias) {_		if (hasAlias(alias, name)) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,the,given,alias,as,an,alias,in,the,other,direction,already,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias,see,has,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,has,alias,alias,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1522103912;Check whether the given name points back to the given alias as an alias_in the other direction already, catching a circular reference upfront_and throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias_@see #hasAlias;protected void checkForAliasCircle(String name, String alias) {_		if (hasAlias(alias, name)) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,the,given,alias,as,an,alias,in,the,other,direction,already,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias,see,has,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,has,alias,alias,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1527623493;Check whether the given name points back to the given alias as an alias_in the other direction already, catching a circular reference upfront_and throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias_@see #hasAlias;protected void checkForAliasCircle(String name, String alias) {_		if (hasAlias(alias, name)) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,the,given,alias,as,an,alias,in,the,other,direction,already,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias,see,has,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,has,alias,alias,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1530174524;Check whether the given name points back to the given alias as an alias_in the other direction already, catching a circular reference upfront_and throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias_@see #hasAlias;protected void checkForAliasCircle(String name, String alias) {_		if (hasAlias(alias, name)) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,the,given,alias,as,an,alias,in,the,other,direction,already,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias,see,has,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,has,alias,alias,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1530174524;Check whether the given name points back to the given alias as an alias_in the other direction already, catching a circular reference upfront_and throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias_@see #hasAlias;protected void checkForAliasCircle(String name, String alias) {_		if (hasAlias(alias, name)) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,the,given,alias,as,an,alias,in,the,other,direction,already,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias,see,has,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,has,alias,alias,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1532091916;Check whether the given name points back to the given alias as an alias_in the other direction already, catching a circular reference upfront_and throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias_@see #hasAlias;protected void checkForAliasCircle(String name, String alias) {_		if (hasAlias(alias, name)) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,the,given,alias,as,an,alias,in,the,other,direction,already,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias,see,has,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,has,alias,alias,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> protected void checkForAliasCircle(String name, String alias);1534492454;Check whether the given name points back to the given alias as an alias_in the other direction already, catching a circular reference upfront_and throwing a corresponding IllegalStateException._@param name the candidate name_@param alias the candidate alias_@see #registerAlias_@see #hasAlias;protected void checkForAliasCircle(String name, String alias) {_		if (hasAlias(alias, name)) {_			throw new IllegalStateException("Cannot register alias '" + alias +_					"' for name '" + name + "': Circular reference - '" +_					name + "' is a direct or indirect alias for '" + alias + "' already")__		}_	};check,whether,the,given,name,points,back,to,the,given,alias,as,an,alias,in,the,other,direction,already,catching,a,circular,reference,upfront,and,throwing,a,corresponding,illegal,state,exception,param,name,the,candidate,name,param,alias,the,candidate,alias,see,register,alias,see,has,alias;protected,void,check,for,alias,circle,string,name,string,alias,if,has,alias,alias,name,throw,new,illegal,state,exception,cannot,register,alias,alias,for,name,name,circular,reference,name,is,a,direct,or,indirect,alias,for,alias,already
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1328020251;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String alias = entry.getKey()__				result.add(alias)__				retrieveAliases(alias, result)__			}_		}_	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,alias,entry,get,key,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1355352386;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String alias = entry.getKey()__				result.add(alias)__				retrieveAliases(alias, result)__			}_		}_	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,alias,entry,get,key,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1356735495;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String alias = entry.getKey()__				result.add(alias)__				retrieveAliases(alias, result)__			}_		}_	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,alias,entry,get,key,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1357119239;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String alias = entry.getKey()__				result.add(alias)__				retrieveAliases(alias, result)__			}_		}_	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,alias,entry,get,key,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1368482696;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String alias = entry.getKey()__				result.add(alias)__				retrieveAliases(alias, result)__			}_		}_	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,alias,entry,get,key,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1431461084;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String alias = entry.getKey()__				result.add(alias)__				retrieveAliases(alias, result)__			}_		}_	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,alias,entry,get,key,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1440515183;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String alias = entry.getKey()__				result.add(alias)__				retrieveAliases(alias, result)__			}_		}_	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,alias,entry,get,key,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1467730834;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String alias = entry.getKey()__				result.add(alias)__				retrieveAliases(alias, result)__			}_		}_	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,alias,entry,get,key,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1497250713;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		this.aliasMap.forEach((alias, registeredName) -> {_			if (registeredName.equals(name)) {_				result.add(alias)__				retrieveAliases(alias, result)__			}_		})__	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,this,alias,map,for,each,alias,registered,name,if,registered,name,equals,name,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1520857668;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		this.aliasMap.forEach((alias, registeredName) -> {_			if (registeredName.equals(name)) {_				result.add(alias)__				retrieveAliases(alias, result)__			}_		})__	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,this,alias,map,for,each,alias,registered,name,if,registered,name,equals,name,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1522103912;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		this.aliasMap.forEach((alias, registeredName) -> {_			if (registeredName.equals(name)) {_				result.add(alias)__				retrieveAliases(alias, result)__			}_		})__	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,this,alias,map,for,each,alias,registered,name,if,registered,name,equals,name,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1527623493;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		this.aliasMap.forEach((alias, registeredName) -> {_			if (registeredName.equals(name)) {_				result.add(alias)__				retrieveAliases(alias, result)__			}_		})__	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,this,alias,map,for,each,alias,registered,name,if,registered,name,equals,name,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1530174524;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		this.aliasMap.forEach((alias, registeredName) -> {_			if (registeredName.equals(name)) {_				result.add(alias)__				retrieveAliases(alias, result)__			}_		})__	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,this,alias,map,for,each,alias,registered,name,if,registered,name,equals,name,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1530174524;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		this.aliasMap.forEach((alias, registeredName) -> {_			if (registeredName.equals(name)) {_				result.add(alias)__				retrieveAliases(alias, result)__			}_		})__	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,this,alias,map,for,each,alias,registered,name,if,registered,name,equals,name,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1532091916;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		this.aliasMap.forEach((alias, registeredName) -> {_			if (registeredName.equals(name)) {_				result.add(alias)__				retrieveAliases(alias, result)__			}_		})__	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,this,alias,map,for,each,alias,registered,name,if,registered,name,equals,name,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> private void retrieveAliases(String name, List<String> result);1534492454;Transitively retrieve all aliases for the given name._@param name the target name to find aliases for_@param result the resulting aliases list;private void retrieveAliases(String name, List<String> result) {_		this.aliasMap.forEach((alias, registeredName) -> {_			if (registeredName.equals(name)) {_				result.add(alias)__				retrieveAliases(alias, result)__			}_		})__	};transitively,retrieve,all,aliases,for,the,given,name,param,name,the,target,name,to,find,aliases,for,param,result,the,resulting,aliases,list;private,void,retrieve,aliases,string,name,list,string,result,this,alias,map,for,each,alias,registered,name,if,registered,name,equals,name,result,add,alias,retrieve,aliases,alias,result
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1328020251;Return whether alias overriding is allowed._Default is <code>true</code>.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true,code;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1355352386;Return whether alias overriding is allowed._Default is <code>true</code>.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true,code;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1356735495;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1357119239;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1368482696;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1431461084;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1440515183;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1467730834;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1497250713;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1520857668;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1522103912;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1527623493;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1530174524;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1530174524;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1532091916;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> protected boolean allowAliasOverriding();1534492454;Return whether alias overriding is allowed._Default is {@code true}.;protected boolean allowAliasOverriding() {_		return true__	};return,whether,alias,overriding,is,allowed,default,is,code,true;protected,boolean,allow,alias,overriding,return,true
SimpleAliasRegistry -> public boolean hasAlias(String name, String alias);1440515183;Determine whether the given name has the given alias registered._@param name the name to check_@param alias the alias to look for_@since 4.2.1;public boolean hasAlias(String name, String alias) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String registeredAlias = entry.getKey()__				return (registeredAlias.equals(alias) || hasAlias(registeredAlias, alias))__			}_		}_		return false__	};determine,whether,the,given,name,has,the,given,alias,registered,param,name,the,name,to,check,param,alias,the,alias,to,look,for,since,4,2,1;public,boolean,has,alias,string,name,string,alias,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,registered,alias,entry,get,key,return,registered,alias,equals,alias,has,alias,registered,alias,alias,return,false
SimpleAliasRegistry -> public boolean hasAlias(String name, String alias);1467730834;Determine whether the given name has the given alias registered._@param name the name to check_@param alias the alias to look for_@since 4.2.1;public boolean hasAlias(String name, String alias) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String registeredAlias = entry.getKey()__				return (registeredAlias.equals(alias) || hasAlias(registeredAlias, alias))__			}_		}_		return false__	};determine,whether,the,given,name,has,the,given,alias,registered,param,name,the,name,to,check,param,alias,the,alias,to,look,for,since,4,2,1;public,boolean,has,alias,string,name,string,alias,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,registered,alias,entry,get,key,return,registered,alias,equals,alias,has,alias,registered,alias,alias,return,false
SimpleAliasRegistry -> public boolean hasAlias(String name, String alias);1497250713;Determine whether the given name has the given alias registered._@param name the name to check_@param alias the alias to look for_@since 4.2.1;public boolean hasAlias(String name, String alias) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String registeredAlias = entry.getKey()__				return (registeredAlias.equals(alias) || hasAlias(registeredAlias, alias))__			}_		}_		return false__	};determine,whether,the,given,name,has,the,given,alias,registered,param,name,the,name,to,check,param,alias,the,alias,to,look,for,since,4,2,1;public,boolean,has,alias,string,name,string,alias,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,registered,alias,entry,get,key,return,registered,alias,equals,alias,has,alias,registered,alias,alias,return,false
SimpleAliasRegistry -> public boolean hasAlias(String name, String alias);1520857668;Determine whether the given name has the given alias registered._@param name the name to check_@param alias the alias to look for_@since 4.2.1;public boolean hasAlias(String name, String alias) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String registeredAlias = entry.getKey()__				return (registeredAlias.equals(alias) || hasAlias(registeredAlias, alias))__			}_		}_		return false__	};determine,whether,the,given,name,has,the,given,alias,registered,param,name,the,name,to,check,param,alias,the,alias,to,look,for,since,4,2,1;public,boolean,has,alias,string,name,string,alias,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,registered,alias,entry,get,key,return,registered,alias,equals,alias,has,alias,registered,alias,alias,return,false
SimpleAliasRegistry -> public boolean hasAlias(String name, String alias);1522103912;Determine whether the given name has the given alias registered._@param name the name to check_@param alias the alias to look for_@since 4.2.1;public boolean hasAlias(String name, String alias) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String registeredAlias = entry.getKey()__				return (registeredAlias.equals(alias) || hasAlias(registeredAlias, alias))__			}_		}_		return false__	};determine,whether,the,given,name,has,the,given,alias,registered,param,name,the,name,to,check,param,alias,the,alias,to,look,for,since,4,2,1;public,boolean,has,alias,string,name,string,alias,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,registered,alias,entry,get,key,return,registered,alias,equals,alias,has,alias,registered,alias,alias,return,false
SimpleAliasRegistry -> public boolean hasAlias(String name, String alias);1527623493;Determine whether the given name has the given alias registered._@param name the name to check_@param alias the alias to look for_@since 4.2.1;public boolean hasAlias(String name, String alias) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String registeredAlias = entry.getKey()__				return (registeredAlias.equals(alias) || hasAlias(registeredAlias, alias))__			}_		}_		return false__	};determine,whether,the,given,name,has,the,given,alias,registered,param,name,the,name,to,check,param,alias,the,alias,to,look,for,since,4,2,1;public,boolean,has,alias,string,name,string,alias,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,registered,alias,entry,get,key,return,registered,alias,equals,alias,has,alias,registered,alias,alias,return,false
SimpleAliasRegistry -> public boolean hasAlias(String name, String alias);1530174524;Determine whether the given name has the given alias registered._@param name the name to check_@param alias the alias to look for_@since 4.2.1;public boolean hasAlias(String name, String alias) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String registeredAlias = entry.getKey()__				return (registeredAlias.equals(alias) || hasAlias(registeredAlias, alias))__			}_		}_		return false__	};determine,whether,the,given,name,has,the,given,alias,registered,param,name,the,name,to,check,param,alias,the,alias,to,look,for,since,4,2,1;public,boolean,has,alias,string,name,string,alias,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,registered,alias,entry,get,key,return,registered,alias,equals,alias,has,alias,registered,alias,alias,return,false
SimpleAliasRegistry -> public boolean hasAlias(String name, String alias);1530174524;Determine whether the given name has the given alias registered._@param name the name to check_@param alias the alias to look for_@since 4.2.1;public boolean hasAlias(String name, String alias) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String registeredAlias = entry.getKey()__				return (registeredAlias.equals(alias) || hasAlias(registeredAlias, alias))__			}_		}_		return false__	};determine,whether,the,given,name,has,the,given,alias,registered,param,name,the,name,to,check,param,alias,the,alias,to,look,for,since,4,2,1;public,boolean,has,alias,string,name,string,alias,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,registered,alias,entry,get,key,return,registered,alias,equals,alias,has,alias,registered,alias,alias,return,false
SimpleAliasRegistry -> public boolean hasAlias(String name, String alias);1532091916;Determine whether the given name has the given alias registered._@param name the name to check_@param alias the alias to look for_@since 4.2.1;public boolean hasAlias(String name, String alias) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String registeredAlias = entry.getKey()__				return (registeredAlias.equals(alias) || hasAlias(registeredAlias, alias))__			}_		}_		return false__	};determine,whether,the,given,name,has,the,given,alias,registered,param,name,the,name,to,check,param,alias,the,alias,to,look,for,since,4,2,1;public,boolean,has,alias,string,name,string,alias,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,registered,alias,entry,get,key,return,registered,alias,equals,alias,has,alias,registered,alias,alias,return,false
SimpleAliasRegistry -> public boolean hasAlias(String name, String alias);1534492454;Determine whether the given name has the given alias registered._@param name the name to check_@param alias the alias to look for_@since 4.2.1;public boolean hasAlias(String name, String alias) {_		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {_			String registeredName = entry.getValue()__			if (registeredName.equals(name)) {_				String registeredAlias = entry.getKey()__				if (registeredAlias.equals(alias) || hasAlias(registeredAlias, alias)) {_					return true__				}_			}_		}_		return false__	};determine,whether,the,given,name,has,the,given,alias,registered,param,name,the,name,to,check,param,alias,the,alias,to,look,for,since,4,2,1;public,boolean,has,alias,string,name,string,alias,for,map,entry,string,string,entry,this,alias,map,entry,set,string,registered,name,entry,get,value,if,registered,name,equals,name,string,registered,alias,entry,get,key,if,registered,alias,equals,alias,has,alias,registered,alias,alias,return,true,return,false
