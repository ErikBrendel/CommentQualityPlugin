# id;timestamp;commentText;codeText;commentWords;codeWords
ClassPathResource -> @Nullable 	public final ClassLoader getClassLoader();1498780456;Return the ClassLoader that this resource will be obtained from.;@Nullable_	public final ClassLoader getClassLoader() {_		return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader)__	};return,the,class,loader,that,this,resource,will,be,obtained,from;nullable,public,final,class,loader,get,class,loader,return,this,clazz,null,this,clazz,get,class,loader,this,class,loader
ClassPathResource -> @Nullable 	public final ClassLoader getClassLoader();1502974979;Return the ClassLoader that this resource will be obtained from.;@Nullable_	public final ClassLoader getClassLoader() {_		return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader)__	};return,the,class,loader,that,this,resource,will,be,obtained,from;nullable,public,final,class,loader,get,class,loader,return,this,clazz,null,this,clazz,get,class,loader,this,class,loader
ClassPathResource -> @Nullable 	public final ClassLoader getClassLoader();1509635157;Return the ClassLoader that this resource will be obtained from.;@Nullable_	public final ClassLoader getClassLoader() {_		return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader)__	};return,the,class,loader,that,this,resource,will,be,obtained,from;nullable,public,final,class,loader,get,class,loader,return,this,clazz,null,this,clazz,get,class,loader,this,class,loader
ClassPathResource -> @Nullable 	public final ClassLoader getClassLoader();1530174524;Return the ClassLoader that this resource will be obtained from.;@Nullable_	public final ClassLoader getClassLoader() {_		return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader)__	};return,the,class,loader,that,this,resource,will,be,obtained,from;nullable,public,final,class,loader,get,class,loader,return,this,clazz,null,this,clazz,get,class,loader,this,class,loader
ClassPathResource -> @Nullable 	public final ClassLoader getClassLoader();1530190293;Return the ClassLoader that this resource will be obtained from.;@Nullable_	public final ClassLoader getClassLoader() {_		return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader)__	};return,the,class,loader,that,this,resource,will,be,obtained,from;nullable,public,final,class,loader,get,class,loader,return,this,clazz,null,this,clazz,get,class,loader,this,class,loader
ClassPathResource -> @Override 	public boolean equals(Object obj);1328020251;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path) &&_					ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) &&_					ObjectUtils.nullSafeEquals(this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public boolean equals(Object obj);1337135093;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path)_					&& ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) && ObjectUtils.nullSafeEquals(_				this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public boolean equals(Object obj);1356735495;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path)_					&& ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) && ObjectUtils.nullSafeEquals(_				this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public boolean equals(Object obj);1357119239;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path)_					&& ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) && ObjectUtils.nullSafeEquals(_				this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public boolean equals(Object obj);1362408075;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path) &&_					ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) &&_					ObjectUtils.nullSafeEquals(this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public boolean equals(Object obj);1368482696;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path) &&_					ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) &&_					ObjectUtils.nullSafeEquals(this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public boolean equals(Object obj);1398290095;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path) &&_					ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) &&_					ObjectUtils.nullSafeEquals(this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public boolean equals(Object obj);1444131013;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path) &&_					ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) &&_					ObjectUtils.nullSafeEquals(this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public boolean equals(Object obj);1495868221;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path) &&_					ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) &&_					ObjectUtils.nullSafeEquals(this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public boolean equals(Object obj);1498780456;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path) &&_					ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) &&_					ObjectUtils.nullSafeEquals(this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public boolean equals(Object obj);1502974979;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path) &&_					ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) &&_					ObjectUtils.nullSafeEquals(this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public boolean equals(Object obj);1509635157;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path) &&_					ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) &&_					ObjectUtils.nullSafeEquals(this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public boolean equals(Object obj);1530174524;This implementation compares the underlying class path locations.;@Override_	public boolean equals(Object obj) {_		if (obj == this) {_			return true__		}_		if (obj instanceof ClassPathResource) {_			ClassPathResource otherRes = (ClassPathResource) obj__			return (this.path.equals(otherRes.path) &&_					ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) &&_					ObjectUtils.nullSafeEquals(this.clazz, otherRes.clazz))__		}_		return false__	};this,implementation,compares,the,underlying,class,path,locations;override,public,boolean,equals,object,obj,if,obj,this,return,true,if,obj,instanceof,class,path,resource,class,path,resource,other,res,class,path,resource,obj,return,this,path,equals,other,res,path,object,utils,null,safe,equals,this,class,loader,other,res,class,loader,object,utils,null,safe,equals,this,clazz,other,res,clazz,return,false
ClassPathResource -> @Override 	public String getDescription();1356735495;This implementation returns a description that includes the class path location.;@Override_	public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")___		String pathToUse = path___		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}__		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;override,public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> @Override 	public String getDescription();1368482696;This implementation returns a description that includes the class path location.;@Override_	public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")__		String pathToUse = path__		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}_		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;override,public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> @Override 	public String getDescription();1398290095;This implementation returns a description that includes the class path location.;@Override_	public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")__		String pathToUse = path__		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}_		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;override,public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> @Override 	public String getDescription();1444131013;This implementation returns a description that includes the class path location.;@Override_	public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")__		String pathToUse = path__		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}_		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;override,public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> @Override 	public String getDescription();1495868221;This implementation returns a description that includes the class path location.;@Override_	public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")__		String pathToUse = path__		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}_		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;override,public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> @Override 	public String getDescription();1498780456;This implementation returns a description that includes the class path location.;@Override_	public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")__		String pathToUse = path__		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}_		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;override,public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> @Override 	public String getDescription();1502974979;This implementation returns a description that includes the class path location.;@Override_	public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")__		String pathToUse = path__		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}_		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;override,public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> @Override 	public String getDescription();1509635157;This implementation returns a description that includes the class path location.;@Override_	public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")__		String pathToUse = path__		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}_		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;override,public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> @Override 	public String getDescription();1530174524;This implementation returns a description that includes the class path location.;@Override_	public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")__		String pathToUse = this.path__		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}_		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;override,public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,this,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> @Override 	public String getDescription();1530190293;This implementation returns a description that includes the class path location.;@Override_	public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")__		String pathToUse = this.path__		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}_		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;override,public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,this,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> @Override 	public int hashCode();1328020251;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1337135093;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1356735495;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1357119239;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1362408075;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1368482696;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1398290095;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1444131013;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1495868221;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1498780456;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1502974979;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1509635157;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1530174524;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	public int hashCode();1530190293;This implementation returns the hash code of the underlying_class path location.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,class,path,location;override,public,int,hash,code,return,this,path,hash,code
ClassPathResource -> @Override 	@Nullable 	public String getFilename();1502974979;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	@Nullable_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,nullable,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Override 	@Nullable 	public String getFilename();1509635157;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	@Nullable_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,nullable,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Override 	@Nullable 	public String getFilename();1530174524;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	@Nullable_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,nullable,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Override 	@Nullable 	public String getFilename();1530190293;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	@Nullable_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,nullable,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Deprecated 	protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz);1509635157;Create a new {@code ClassPathResource} with optional {@code ClassLoader}_and {@code Class}. Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any_@deprecated as of 4.3.13, in favor of selective use of_{@link #ClassPathResource(String, ClassLoader)} vs {@link #ClassPathResource(String, Class)};@Deprecated_	protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,code,class,path,resource,with,optional,code,class,loader,and,code,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any,deprecated,as,of,4,3,13,in,favor,of,selective,use,of,link,class,path,resource,string,class,loader,vs,link,class,path,resource,string,class;deprecated,protected,class,path,resource,string,path,nullable,class,loader,class,loader,nullable,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> @Deprecated 	protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz);1530174524;Create a new {@code ClassPathResource} with optional {@code ClassLoader}_and {@code Class}. Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any_@deprecated as of 4.3.13, in favor of selective use of_{@link #ClassPathResource(String, ClassLoader)} vs {@link #ClassPathResource(String, Class)};@Deprecated_	protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,code,class,path,resource,with,optional,code,class,loader,and,code,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any,deprecated,as,of,4,3,13,in,favor,of,selective,use,of,link,class,path,resource,string,class,loader,vs,link,class,path,resource,string,class;deprecated,protected,class,path,resource,string,path,nullable,class,loader,class,loader,nullable,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> @Deprecated 	protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz);1530190293;Create a new {@code ClassPathResource} with optional {@code ClassLoader}_and {@code Class}. Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any_@deprecated as of 4.3.13, in favor of selective use of_{@link #ClassPathResource(String, ClassLoader)} vs {@link #ClassPathResource(String, Class)};@Deprecated_	protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,code,class,path,resource,with,optional,code,class,loader,and,code,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any,deprecated,as,of,4,3,13,in,favor,of,selective,use,of,link,class,path,resource,string,class,loader,vs,link,class,path,resource,string,class;deprecated,protected,class,path,resource,string,path,nullable,class,loader,class,loader,nullable,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, Class<?> clazz);1328020251;Create a new ClassPathResource for Class usage._The path can be relative to the given class,_or absolute within the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,class,path,resource,for,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, Class<?> clazz);1337135093;Create a new ClassPathResource for Class usage._The path can be relative to the given class,_or absolute within the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,class,path,resource,for,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, Class<?> clazz);1356735495;Create a new ClassPathResource for Class usage._The path can be relative to the given class,_or absolute within the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,class,path,resource,for,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, Class<?> clazz);1357119239;Create a new ClassPathResource for Class usage._The path can be relative to the given class,_or absolute within the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,class,path,resource,for,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, Class<?> clazz);1362408075;Create a new ClassPathResource for Class usage._The path can be relative to the given class,_or absolute within the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,class,path,resource,for,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, Class<?> clazz);1368482696;Create a new ClassPathResource for Class usage._The path can be relative to the given class,_or absolute within the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,class,path,resource,for,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, Class<?> clazz);1398290095;Create a new {@code ClassPathResource} for {@code Class} usage._The path can be relative to the given class, or absolute within_the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,code,class,path,resource,for,code,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, Class<?> clazz);1444131013;Create a new {@code ClassPathResource} for {@code Class} usage._The path can be relative to the given class, or absolute within_the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,code,class,path,resource,for,code,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> @Override 	public String getFilename();1328020251;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Override 	public String getFilename();1337135093;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Override 	public String getFilename();1356735495;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Override 	public String getFilename();1357119239;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Override 	public String getFilename();1362408075;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Override 	public String getFilename();1368482696;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Override 	public String getFilename();1398290095;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Override 	public String getFilename();1444131013;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Override 	public String getFilename();1495868221;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> @Override 	public String getFilename();1498780456;This implementation returns the name of the file that this class path_resource refers to._@see org.springframework.util.StringUtils#getFilename(String);@Override_	public String getFilename() {_		return StringUtils.getFilename(this.path)__	};this,implementation,returns,the,name,of,the,file,that,this,class,path,resource,refers,to,see,org,springframework,util,string,utils,get,filename,string;override,public,string,get,filename,return,string,utils,get,filename,this,path
ClassPathResource -> public ClassPathResource(String path, @Nullable ClassLoader classLoader);1495868221;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or {@code null} for the thread context class loader_@see ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, @Nullable ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,for,the,thread,context,class,loader,see,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,nullable,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, @Nullable ClassLoader classLoader);1498780456;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or {@code null} for the thread context class loader_@see ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, @Nullable ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,for,the,thread,context,class,loader,see,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,nullable,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, @Nullable ClassLoader classLoader);1502974979;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or {@code null} for the thread context class loader_@see ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, @Nullable ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,for,the,thread,context,class,loader,see,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,nullable,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, @Nullable ClassLoader classLoader);1509635157;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or {@code null} for the thread context class loader_@see ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, @Nullable ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,for,the,thread,context,class,loader,see,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,nullable,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, @Nullable ClassLoader classLoader);1530174524;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or {@code null} for the thread context class loader_@see ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, @Nullable ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,for,the,thread,context,class,loader,see,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,nullable,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, @Nullable ClassLoader classLoader);1530190293;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or {@code null} for the thread context class loader_@see ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, @Nullable ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,for,the,thread,context,class,loader,see,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,nullable,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, ClassLoader classLoader);1328020251;Create a new ClassPathResource for ClassLoader usage._A leading slash will be removed, as the ClassLoader_resource access methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or <code>null</code> for the thread context class loader_@see java.lang.ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,class,path,resource,for,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,code,for,the,thread,context,class,loader,see,java,lang,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, ClassLoader classLoader);1337135093;Create a new ClassPathResource for ClassLoader usage._A leading slash will be removed, as the ClassLoader_resource access methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or <code>null</code> for the thread context class loader_@see java.lang.ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,class,path,resource,for,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,code,for,the,thread,context,class,loader,see,java,lang,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, ClassLoader classLoader);1356735495;Create a new ClassPathResource for ClassLoader usage._A leading slash will be removed, as the ClassLoader_resource access methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or {@code null} for the thread context class loader_@see ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,class,path,resource,for,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,for,the,thread,context,class,loader,see,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, ClassLoader classLoader);1357119239;Create a new ClassPathResource for ClassLoader usage._A leading slash will be removed, as the ClassLoader_resource access methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or {@code null} for the thread context class loader_@see ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,class,path,resource,for,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,for,the,thread,context,class,loader,see,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, ClassLoader classLoader);1362408075;Create a new ClassPathResource for ClassLoader usage._A leading slash will be removed, as the ClassLoader_resource access methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or {@code null} for the thread context class loader_@see ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,class,path,resource,for,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,for,the,thread,context,class,loader,see,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, ClassLoader classLoader);1368482696;Create a new ClassPathResource for ClassLoader usage._A leading slash will be removed, as the ClassLoader_resource access methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or {@code null} for the thread context class loader_@see ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,class,path,resource,for,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,for,the,thread,context,class,loader,see,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, ClassLoader classLoader);1398290095;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or {@code null} for the thread context class loader_@see ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,for,the,thread,context,class,loader,see,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> public ClassPathResource(String path, ClassLoader classLoader);1444131013;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._@param path the absolute path within the classpath_@param classLoader the class loader to load the resource with,_or {@code null} for the thread context class loader_@see ClassLoader#getResourceAsStream(String);public ClassPathResource(String path, ClassLoader classLoader) {_		Assert.notNull(path, "Path must not be null")__		String pathToUse = StringUtils.cleanPath(path)__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		this.path = pathToUse__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,param,path,the,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,or,code,null,for,the,thread,context,class,loader,see,class,loader,get,resource,as,stream,string;public,class,path,resource,string,path,class,loader,class,loader,assert,not,null,path,path,must,not,be,null,string,path,to,use,string,utils,clean,path,path,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,this,path,path,to,use,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader
ClassPathResource -> @Override 	public InputStream getInputStream() throws IOException;1356735495;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,is,this,class,loader,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> @Override 	public InputStream getInputStream() throws IOException;1368482696;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,is,this,class,loader,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> @Override 	public InputStream getInputStream() throws IOException;1398290095;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else if (this.classLoader != null) {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		else {_			is = ClassLoader.getSystemResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,if,this,class,loader,null,is,this,class,loader,get,resource,as,stream,this,path,else,is,class,loader,get,system,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> @Override 	public InputStream getInputStream() throws IOException;1444131013;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else if (this.classLoader != null) {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		else {_			is = ClassLoader.getSystemResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,if,this,class,loader,null,is,this,class,loader,get,resource,as,stream,this,path,else,is,class,loader,get,system,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> @Override 	public InputStream getInputStream() throws IOException;1495868221;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else if (this.classLoader != null) {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		else {_			is = ClassLoader.getSystemResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,if,this,class,loader,null,is,this,class,loader,get,resource,as,stream,this,path,else,is,class,loader,get,system,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> @Override 	public InputStream getInputStream() throws IOException;1498780456;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else if (this.classLoader != null) {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		else {_			is = ClassLoader.getSystemResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,if,this,class,loader,null,is,this,class,loader,get,resource,as,stream,this,path,else,is,class,loader,get,system,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> @Override 	public InputStream getInputStream() throws IOException;1502974979;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else if (this.classLoader != null) {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		else {_			is = ClassLoader.getSystemResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,if,this,class,loader,null,is,this,class,loader,get,resource,as,stream,this,path,else,is,class,loader,get,system,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> @Override 	public InputStream getInputStream() throws IOException;1509635157;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else if (this.classLoader != null) {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		else {_			is = ClassLoader.getSystemResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,if,this,class,loader,null,is,this,class,loader,get,resource,as,stream,this,path,else,is,class,loader,get,system,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> @Override 	public InputStream getInputStream() throws IOException;1530174524;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else if (this.classLoader != null) {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		else {_			is = ClassLoader.getSystemResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,if,this,class,loader,null,is,this,class,loader,get,resource,as,stream,this,path,else,is,class,loader,get,system,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> @Override 	public InputStream getInputStream() throws IOException;1530190293;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);@Override_	public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else if (this.classLoader != null) {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		else {_			is = ClassLoader.getSystemResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;override,public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,if,this,class,loader,null,is,this,class,loader,get,resource,as,stream,this,path,else,is,class,loader,get,system,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> protected URL resolveURL();1398290095;Resolves a URL for the underlying class path resource._@return the resolved URL, or {@code null} if not resolvable;protected URL resolveURL() {_		if (this.clazz != null) {_			return this.clazz.getResource(this.path)__		}_		else if (this.classLoader != null) {_			return this.classLoader.getResource(this.path)__		}_		else {_			return ClassLoader.getSystemResource(this.path)__		}_	};resolves,a,url,for,the,underlying,class,path,resource,return,the,resolved,url,or,code,null,if,not,resolvable;protected,url,resolve,url,if,this,clazz,null,return,this,clazz,get,resource,this,path,else,if,this,class,loader,null,return,this,class,loader,get,resource,this,path,else,return,class,loader,get,system,resource,this,path
ClassPathResource -> protected URL resolveURL();1444131013;Resolves a URL for the underlying class path resource._@return the resolved URL, or {@code null} if not resolvable;protected URL resolveURL() {_		if (this.clazz != null) {_			return this.clazz.getResource(this.path)__		}_		else if (this.classLoader != null) {_			return this.classLoader.getResource(this.path)__		}_		else {_			return ClassLoader.getSystemResource(this.path)__		}_	};resolves,a,url,for,the,underlying,class,path,resource,return,the,resolved,url,or,code,null,if,not,resolvable;protected,url,resolve,url,if,this,clazz,null,return,this,clazz,get,resource,this,path,else,if,this,class,loader,null,return,this,class,loader,get,resource,this,path,else,return,class,loader,get,system,resource,this,path
ClassPathResource -> public ClassPathResource(String path, @Nullable Class<?> clazz);1495868221;Create a new {@code ClassPathResource} for {@code Class} usage._The path can be relative to the given class, or absolute within_the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, @Nullable Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,code,class,path,resource,for,code,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,nullable,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, @Nullable Class<?> clazz);1498780456;Create a new {@code ClassPathResource} for {@code Class} usage._The path can be relative to the given class, or absolute within_the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, @Nullable Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,code,class,path,resource,for,code,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,nullable,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, @Nullable Class<?> clazz);1502974979;Create a new {@code ClassPathResource} for {@code Class} usage._The path can be relative to the given class, or absolute within_the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, @Nullable Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,code,class,path,resource,for,code,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,nullable,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, @Nullable Class<?> clazz);1509635157;Create a new {@code ClassPathResource} for {@code Class} usage._The path can be relative to the given class, or absolute within_the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, @Nullable Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,code,class,path,resource,for,code,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,nullable,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, @Nullable Class<?> clazz);1530174524;Create a new {@code ClassPathResource} for {@code Class} usage._The path can be relative to the given class, or absolute within_the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, @Nullable Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,code,class,path,resource,for,code,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,nullable,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public ClassPathResource(String path, @Nullable Class<?> clazz);1530190293;Create a new {@code ClassPathResource} for {@code Class} usage._The path can be relative to the given class, or absolute within_the classpath via a leading slash._@param path relative or absolute path within the class path_@param clazz the class to load resources with_@see java.lang.Class#getResourceAsStream;public ClassPathResource(String path, @Nullable Class<?> clazz) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.clazz = clazz__	};create,a,new,code,class,path,resource,for,code,class,usage,the,path,can,be,relative,to,the,given,class,or,absolute,within,the,classpath,via,a,leading,slash,param,path,relative,or,absolute,path,within,the,class,path,param,clazz,the,class,to,load,resources,with,see,java,lang,class,get,resource,as,stream;public,class,path,resource,string,path,nullable,class,clazz,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,clazz,clazz
ClassPathResource -> public InputStream getInputStream() throws IOException;1328020251;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,is,this,class,loader,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> public InputStream getInputStream() throws IOException;1337135093;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,is,this,class,loader,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> public InputStream getInputStream() throws IOException;1357119239;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,is,this,class,loader,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> public InputStream getInputStream() throws IOException;1362408075;This implementation opens an InputStream for the given class path resource._@see java.lang.ClassLoader#getResourceAsStream(String)_@see java.lang.Class#getResourceAsStream(String);public InputStream getInputStream() throws IOException {_		InputStream is__		if (this.clazz != null) {_			is = this.clazz.getResourceAsStream(this.path)__		}_		else {_			is = this.classLoader.getResourceAsStream(this.path)__		}_		if (is == null) {_			throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist")__		}_		return is__	};this,implementation,opens,an,input,stream,for,the,given,class,path,resource,see,java,lang,class,loader,get,resource,as,stream,string,see,java,lang,class,get,resource,as,stream,string;public,input,stream,get,input,stream,throws,ioexception,input,stream,is,if,this,clazz,null,is,this,clazz,get,resource,as,stream,this,path,else,is,this,class,loader,get,resource,as,stream,this,path,if,is,null,throw,new,file,not,found,exception,get,description,cannot,be,opened,because,it,does,not,exist,return,is
ClassPathResource -> @Nullable 	protected URL resolveURL();1495868221;Resolves a URL for the underlying class path resource._@return the resolved URL, or {@code null} if not resolvable;@Nullable_	protected URL resolveURL() {_		if (this.clazz != null) {_			return this.clazz.getResource(this.path)__		}_		else if (this.classLoader != null) {_			return this.classLoader.getResource(this.path)__		}_		else {_			return ClassLoader.getSystemResource(this.path)__		}_	};resolves,a,url,for,the,underlying,class,path,resource,return,the,resolved,url,or,code,null,if,not,resolvable;nullable,protected,url,resolve,url,if,this,clazz,null,return,this,clazz,get,resource,this,path,else,if,this,class,loader,null,return,this,class,loader,get,resource,this,path,else,return,class,loader,get,system,resource,this,path
ClassPathResource -> @Nullable 	protected URL resolveURL();1498780456;Resolves a URL for the underlying class path resource._@return the resolved URL, or {@code null} if not resolvable;@Nullable_	protected URL resolveURL() {_		if (this.clazz != null) {_			return this.clazz.getResource(this.path)__		}_		else if (this.classLoader != null) {_			return this.classLoader.getResource(this.path)__		}_		else {_			return ClassLoader.getSystemResource(this.path)__		}_	};resolves,a,url,for,the,underlying,class,path,resource,return,the,resolved,url,or,code,null,if,not,resolvable;nullable,protected,url,resolve,url,if,this,clazz,null,return,this,clazz,get,resource,this,path,else,if,this,class,loader,null,return,this,class,loader,get,resource,this,path,else,return,class,loader,get,system,resource,this,path
ClassPathResource -> @Nullable 	protected URL resolveURL();1502974979;Resolves a URL for the underlying class path resource._@return the resolved URL, or {@code null} if not resolvable;@Nullable_	protected URL resolveURL() {_		if (this.clazz != null) {_			return this.clazz.getResource(this.path)__		}_		else if (this.classLoader != null) {_			return this.classLoader.getResource(this.path)__		}_		else {_			return ClassLoader.getSystemResource(this.path)__		}_	};resolves,a,url,for,the,underlying,class,path,resource,return,the,resolved,url,or,code,null,if,not,resolvable;nullable,protected,url,resolve,url,if,this,clazz,null,return,this,clazz,get,resource,this,path,else,if,this,class,loader,null,return,this,class,loader,get,resource,this,path,else,return,class,loader,get,system,resource,this,path
ClassPathResource -> @Nullable 	protected URL resolveURL();1509635157;Resolves a URL for the underlying class path resource._@return the resolved URL, or {@code null} if not resolvable;@Nullable_	protected URL resolveURL() {_		if (this.clazz != null) {_			return this.clazz.getResource(this.path)__		}_		else if (this.classLoader != null) {_			return this.classLoader.getResource(this.path)__		}_		else {_			return ClassLoader.getSystemResource(this.path)__		}_	};resolves,a,url,for,the,underlying,class,path,resource,return,the,resolved,url,or,code,null,if,not,resolvable;nullable,protected,url,resolve,url,if,this,clazz,null,return,this,clazz,get,resource,this,path,else,if,this,class,loader,null,return,this,class,loader,get,resource,this,path,else,return,class,loader,get,system,resource,this,path
ClassPathResource -> @Nullable 	protected URL resolveURL();1530174524;Resolves a URL for the underlying class path resource._@return the resolved URL, or {@code null} if not resolvable;@Nullable_	protected URL resolveURL() {_		if (this.clazz != null) {_			return this.clazz.getResource(this.path)__		}_		else if (this.classLoader != null) {_			return this.classLoader.getResource(this.path)__		}_		else {_			return ClassLoader.getSystemResource(this.path)__		}_	};resolves,a,url,for,the,underlying,class,path,resource,return,the,resolved,url,or,code,null,if,not,resolvable;nullable,protected,url,resolve,url,if,this,clazz,null,return,this,clazz,get,resource,this,path,else,if,this,class,loader,null,return,this,class,loader,get,resource,this,path,else,return,class,loader,get,system,resource,this,path
ClassPathResource -> @Nullable 	protected URL resolveURL();1530190293;Resolves a URL for the underlying class path resource._@return the resolved URL, or {@code null} if not resolvable;@Nullable_	protected URL resolveURL() {_		if (this.clazz != null) {_			return this.clazz.getResource(this.path)__		}_		else if (this.classLoader != null) {_			return this.classLoader.getResource(this.path)__		}_		else {_			return ClassLoader.getSystemResource(this.path)__		}_	};resolves,a,url,for,the,underlying,class,path,resource,return,the,resolved,url,or,code,null,if,not,resolvable;nullable,protected,url,resolve,url,if,this,clazz,null,return,this,clazz,get,resource,this,path,else,if,this,class,loader,null,return,this,class,loader,get,resource,this,path,else,return,class,loader,get,system,resource,this,path
ClassPathResource -> protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz);1495868221;Create a new {@code ClassPathResource} with optional {@code ClassLoader}_and {@code Class}. Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any;protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,code,class,path,resource,with,optional,code,class,loader,and,code,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any;protected,class,path,resource,string,path,nullable,class,loader,class,loader,nullable,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz);1498780456;Create a new {@code ClassPathResource} with optional {@code ClassLoader}_and {@code Class}. Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any;protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,code,class,path,resource,with,optional,code,class,loader,and,code,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any;protected,class,path,resource,string,path,nullable,class,loader,class,loader,nullable,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz);1502974979;Create a new {@code ClassPathResource} with optional {@code ClassLoader}_and {@code Class}. Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any;protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,code,class,path,resource,with,optional,code,class,loader,and,code,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any;protected,class,path,resource,string,path,nullable,class,loader,class,loader,nullable,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> @Override 	public boolean exists();1328020251;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		URL url__		if (this.clazz != null) {_			url = this.clazz.getResource(this.path)__		}_		else {_			url = this.classLoader.getResource(this.path)__		}_		return (url != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,url,url,if,this,clazz,null,url,this,clazz,get,resource,this,path,else,url,this,class,loader,get,resource,this,path,return,url,null
ClassPathResource -> @Override 	public boolean exists();1337135093;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		URL url__		if (this.clazz != null) {_			url = this.clazz.getResource(this.path)__		}_		else {_			url = this.classLoader.getResource(this.path)__		}_		return (url != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,url,url,if,this,clazz,null,url,this,clazz,get,resource,this,path,else,url,this,class,loader,get,resource,this,path,return,url,null
ClassPathResource -> @Override 	public boolean exists();1356735495;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		URL url__		if (this.clazz != null) {_			url = this.clazz.getResource(this.path)__		}_		else {_			url = this.classLoader.getResource(this.path)__		}_		return (url != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,url,url,if,this,clazz,null,url,this,clazz,get,resource,this,path,else,url,this,class,loader,get,resource,this,path,return,url,null
ClassPathResource -> @Override 	public boolean exists();1357119239;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		URL url__		if (this.clazz != null) {_			url = this.clazz.getResource(this.path)__		}_		else {_			url = this.classLoader.getResource(this.path)__		}_		return (url != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,url,url,if,this,clazz,null,url,this,clazz,get,resource,this,path,else,url,this,class,loader,get,resource,this,path,return,url,null
ClassPathResource -> @Override 	public boolean exists();1362408075;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		URL url__		if (this.clazz != null) {_			url = this.clazz.getResource(this.path)__		}_		else {_			url = this.classLoader.getResource(this.path)__		}_		return (url != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,url,url,if,this,clazz,null,url,this,clazz,get,resource,this,path,else,url,this,class,loader,get,resource,this,path,return,url,null
ClassPathResource -> @Override 	public boolean exists();1368482696;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		URL url__		if (this.clazz != null) {_			url = this.clazz.getResource(this.path)__		}_		else {_			url = this.classLoader.getResource(this.path)__		}_		return (url != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,url,url,if,this,clazz,null,url,this,clazz,get,resource,this,path,else,url,this,class,loader,get,resource,this,path,return,url,null
ClassPathResource -> @Override 	public boolean exists();1398290095;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		return (resolveURL() != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,return,resolve,url,null
ClassPathResource -> @Override 	public boolean exists();1444131013;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		return (resolveURL() != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,return,resolve,url,null
ClassPathResource -> @Override 	public boolean exists();1495868221;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		return (resolveURL() != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,return,resolve,url,null
ClassPathResource -> @Override 	public boolean exists();1498780456;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		return (resolveURL() != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,return,resolve,url,null
ClassPathResource -> @Override 	public boolean exists();1502974979;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		return (resolveURL() != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,return,resolve,url,null
ClassPathResource -> @Override 	public boolean exists();1509635157;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		return (resolveURL() != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,return,resolve,url,null
ClassPathResource -> @Override 	public boolean exists();1530174524;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		return (resolveURL() != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,return,resolve,url,null
ClassPathResource -> @Override 	public boolean exists();1530190293;This implementation checks for the resolution of a resource URL._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public boolean exists() {_		return (resolveURL() != null)__	};this,implementation,checks,for,the,resolution,of,a,resource,url,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,boolean,exists,return,resolve,url,null
ClassPathResource -> protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz);1328020251;Create a new ClassPathResource with optional ClassLoader and Class._Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any;protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,class,path,resource,with,optional,class,loader,and,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any;protected,class,path,resource,string,path,class,loader,class,loader,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz);1337135093;Create a new ClassPathResource with optional ClassLoader and Class._Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any;protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,class,path,resource,with,optional,class,loader,and,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any;protected,class,path,resource,string,path,class,loader,class,loader,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz);1356735495;Create a new ClassPathResource with optional ClassLoader and Class._Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any;protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,class,path,resource,with,optional,class,loader,and,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any;protected,class,path,resource,string,path,class,loader,class,loader,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz);1357119239;Create a new ClassPathResource with optional ClassLoader and Class._Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any;protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,class,path,resource,with,optional,class,loader,and,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any;protected,class,path,resource,string,path,class,loader,class,loader,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz);1362408075;Create a new ClassPathResource with optional ClassLoader and Class._Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any;protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,class,path,resource,with,optional,class,loader,and,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any;protected,class,path,resource,string,path,class,loader,class,loader,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz);1368482696;Create a new ClassPathResource with optional ClassLoader and Class._Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any;protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,class,path,resource,with,optional,class,loader,and,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any;protected,class,path,resource,string,path,class,loader,class,loader,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz);1398290095;Create a new {@code ClassPathResource} with optional {@code ClassLoader}_and {@code Class}. Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any;protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,code,class,path,resource,with,optional,code,class,loader,and,code,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any;protected,class,path,resource,string,path,class,loader,class,loader,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz);1444131013;Create a new {@code ClassPathResource} with optional {@code ClassLoader}_and {@code Class}. Only for internal usage._@param path relative or absolute path within the classpath_@param classLoader the class loader to load the resource with, if any_@param clazz the class to load resources with, if any;protected ClassPathResource(String path, ClassLoader classLoader, Class<?> clazz) {_		this.path = StringUtils.cleanPath(path)__		this.classLoader = classLoader__		this.clazz = clazz__	};create,a,new,code,class,path,resource,with,optional,code,class,loader,and,code,class,only,for,internal,usage,param,path,relative,or,absolute,path,within,the,classpath,param,class,loader,the,class,loader,to,load,the,resource,with,if,any,param,clazz,the,class,to,load,resources,with,if,any;protected,class,path,resource,string,path,class,loader,class,loader,class,clazz,this,path,string,utils,clean,path,path,this,class,loader,class,loader,this,clazz,clazz
ClassPathResource -> public final String getPath();1328020251;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1337135093;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1356735495;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1357119239;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1362408075;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1368482696;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1398290095;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1444131013;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1495868221;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1498780456;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1502974979;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1509635157;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1530174524;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public final String getPath();1530190293;Return the path for this resource (as resource path within the class path).;public final String getPath() {_		return this.path__	};return,the,path,for,this,resource,as,resource,path,within,the,class,path;public,final,string,get,path,return,this,path
ClassPathResource -> public String getDescription();1328020251;This implementation returns a description that includes the class path location.;public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")___		if (this.clazz != null) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}__		builder.append(this.path)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,if,this,clazz,null,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,builder,append,this,path,builder,append,return,builder,to,string
ClassPathResource -> public String getDescription();1337135093;This implementation returns a description that includes the class path location.;public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")___		String pathToUse = path___		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}__		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> public String getDescription();1357119239;This implementation returns a description that includes the class path location.;public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")___		String pathToUse = path___		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}__		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}__		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> public String getDescription();1362408075;This implementation returns a description that includes the class path location.;public String getDescription() {_		StringBuilder builder = new StringBuilder("class path resource [")__		String pathToUse = path__		if (this.clazz != null && !pathToUse.startsWith("/")) {_			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz))__			builder.append('/')__		}_		if (pathToUse.startsWith("/")) {_			pathToUse = pathToUse.substring(1)__		}_		builder.append(pathToUse)__		builder.append(']')__		return builder.toString()__	};this,implementation,returns,a,description,that,includes,the,class,path,location;public,string,get,description,string,builder,builder,new,string,builder,class,path,resource,string,path,to,use,path,if,this,clazz,null,path,to,use,starts,with,builder,append,class,utils,class,package,as,resource,path,this,clazz,builder,append,if,path,to,use,starts,with,path,to,use,path,to,use,substring,1,builder,append,path,to,use,builder,append,return,builder,to,string
ClassPathResource -> public final ClassLoader getClassLoader();1328020251;Return the ClassLoader that this resource will be obtained from.;public final ClassLoader getClassLoader() {_		return (this.classLoader != null ? this.classLoader : this.clazz.getClassLoader())__	};return,the,class,loader,that,this,resource,will,be,obtained,from;public,final,class,loader,get,class,loader,return,this,class,loader,null,this,class,loader,this,clazz,get,class,loader
ClassPathResource -> public final ClassLoader getClassLoader();1337135093;Return the ClassLoader that this resource will be obtained from.;public final ClassLoader getClassLoader() {_		return (this.classLoader != null ? this.classLoader : this.clazz.getClassLoader())__	};return,the,class,loader,that,this,resource,will,be,obtained,from;public,final,class,loader,get,class,loader,return,this,class,loader,null,this,class,loader,this,clazz,get,class,loader
ClassPathResource -> public final ClassLoader getClassLoader();1356735495;Return the ClassLoader that this resource will be obtained from.;public final ClassLoader getClassLoader() {_		return (this.classLoader != null ? this.classLoader : this.clazz.getClassLoader())__	};return,the,class,loader,that,this,resource,will,be,obtained,from;public,final,class,loader,get,class,loader,return,this,class,loader,null,this,class,loader,this,clazz,get,class,loader
ClassPathResource -> public final ClassLoader getClassLoader();1357119239;Return the ClassLoader that this resource will be obtained from.;public final ClassLoader getClassLoader() {_		return (this.classLoader != null ? this.classLoader : this.clazz.getClassLoader())__	};return,the,class,loader,that,this,resource,will,be,obtained,from;public,final,class,loader,get,class,loader,return,this,class,loader,null,this,class,loader,this,clazz,get,class,loader
ClassPathResource -> public final ClassLoader getClassLoader();1362408075;Return the ClassLoader that this resource will be obtained from.;public final ClassLoader getClassLoader() {_		return (this.classLoader != null ? this.classLoader : this.clazz.getClassLoader())__	};return,the,class,loader,that,this,resource,will,be,obtained,from;public,final,class,loader,get,class,loader,return,this,class,loader,null,this,class,loader,this,clazz,get,class,loader
ClassPathResource -> public final ClassLoader getClassLoader();1368482696;Return the ClassLoader that this resource will be obtained from.;public final ClassLoader getClassLoader() {_		return (this.classLoader != null ? this.classLoader : this.clazz.getClassLoader())__	};return,the,class,loader,that,this,resource,will,be,obtained,from;public,final,class,loader,get,class,loader,return,this,class,loader,null,this,class,loader,this,clazz,get,class,loader
ClassPathResource -> public final ClassLoader getClassLoader();1398290095;Return the ClassLoader that this resource will be obtained from.;public final ClassLoader getClassLoader() {_		return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader)__	};return,the,class,loader,that,this,resource,will,be,obtained,from;public,final,class,loader,get,class,loader,return,this,clazz,null,this,clazz,get,class,loader,this,class,loader
ClassPathResource -> public final ClassLoader getClassLoader();1444131013;Return the ClassLoader that this resource will be obtained from.;public final ClassLoader getClassLoader() {_		return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader)__	};return,the,class,loader,that,this,resource,will,be,obtained,from;public,final,class,loader,get,class,loader,return,this,clazz,null,this,clazz,get,class,loader,this,class,loader
ClassPathResource -> public final ClassLoader getClassLoader();1495868221;Return the ClassLoader that this resource will be obtained from.;public final ClassLoader getClassLoader() {_		return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader)__	};return,the,class,loader,that,this,resource,will,be,obtained,from;public,final,class,loader,get,class,loader,return,this,clazz,null,this,clazz,get,class,loader,this,class,loader
ClassPathResource -> public ClassPathResource(String path);1328020251;Create a new ClassPathResource for ClassLoader usage._A leading slash will be removed, as the ClassLoader_resource access methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,class,path,resource,for,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1337135093;Create a new ClassPathResource for ClassLoader usage._A leading slash will be removed, as the ClassLoader_resource access methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,class,path,resource,for,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1356735495;Create a new ClassPathResource for ClassLoader usage._A leading slash will be removed, as the ClassLoader_resource access methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,class,path,resource,for,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1357119239;Create a new ClassPathResource for ClassLoader usage._A leading slash will be removed, as the ClassLoader_resource access methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,class,path,resource,for,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1362408075;Create a new ClassPathResource for ClassLoader usage._A leading slash will be removed, as the ClassLoader_resource access methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,class,path,resource,for,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1368482696;Create a new ClassPathResource for ClassLoader usage._A leading slash will be removed, as the ClassLoader_resource access methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,class,path,resource,for,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1398290095;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1444131013;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1495868221;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1498780456;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1502974979;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1509635157;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1530174524;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> public ClassPathResource(String path);1530190293;Create a new {@code ClassPathResource} for {@code ClassLoader} usage._A leading slash will be removed, as the ClassLoader resource access_methods will not accept it._<p>The thread context class loader will be used for_loading the resource._@param path the absolute path within the class path_@see java.lang.ClassLoader#getResourceAsStream(String)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();public ClassPathResource(String path) {_		this(path, (ClassLoader) null)__	};create,a,new,code,class,path,resource,for,code,class,loader,usage,a,leading,slash,will,be,removed,as,the,class,loader,resource,access,methods,will,not,accept,it,p,the,thread,context,class,loader,will,be,used,for,loading,the,resource,param,path,the,absolute,path,within,the,class,path,see,java,lang,class,loader,get,resource,as,stream,string,see,org,springframework,util,class,utils,get,default,class,loader;public,class,path,resource,string,path,this,path,class,loader,null
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1328020251;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ClassPathResource(pathToUse, this.classLoader, this.clazz)__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,class,path,resource,path,to,use,this,class,loader,this,clazz
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1337135093;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ClassPathResource(pathToUse, this.classLoader, this.clazz)__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,class,path,resource,path,to,use,this,class,loader,this,clazz
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1356735495;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ClassPathResource(pathToUse, this.classLoader, this.clazz)__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,class,path,resource,path,to,use,this,class,loader,this,clazz
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1357119239;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ClassPathResource(pathToUse, this.classLoader, this.clazz)__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,class,path,resource,path,to,use,this,class,loader,this,clazz
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1362408075;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ClassPathResource(pathToUse, this.classLoader, this.clazz)__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,class,path,resource,path,to,use,this,class,loader,this,clazz
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1368482696;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ClassPathResource(pathToUse, this.classLoader, this.clazz)__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,class,path,resource,path,to,use,this,class,loader,this,clazz
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1398290095;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ClassPathResource(pathToUse, this.classLoader, this.clazz)__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,class,path,resource,path,to,use,this,class,loader,this,clazz
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1444131013;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ClassPathResource(pathToUse, this.classLoader, this.clazz)__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,class,path,resource,path,to,use,this,class,loader,this,clazz
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1495868221;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ClassPathResource(pathToUse, this.classLoader, this.clazz)__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,class,path,resource,path,to,use,this,class,loader,this,clazz
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1498780456;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ClassPathResource(pathToUse, this.classLoader, this.clazz)__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,class,path,resource,path,to,use,this,class,loader,this,clazz
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1502974979;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new ClassPathResource(pathToUse, this.classLoader, this.clazz)__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,class,path,resource,path,to,use,this,class,loader,this,clazz
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1509635157;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return (this.clazz != null ? new ClassPathResource(pathToUse, this.clazz) :_				new ClassPathResource(pathToUse, this.classLoader))__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,this,clazz,null,new,class,path,resource,path,to,use,this,clazz,new,class,path,resource,path,to,use,this,class,loader
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1530174524;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return (this.clazz != null ? new ClassPathResource(pathToUse, this.clazz) :_				new ClassPathResource(pathToUse, this.classLoader))__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,this,clazz,null,new,class,path,resource,path,to,use,this,clazz,new,class,path,resource,path,to,use,this,class,loader
ClassPathResource -> @Override 	public Resource createRelative(String relativePath);1530190293;This implementation creates a ClassPathResource, applying the given path_relative to the path of the underlying resource of this descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return (this.clazz != null ? new ClassPathResource(pathToUse, this.clazz) :_				new ClassPathResource(pathToUse, this.classLoader))__	};this,implementation,creates,a,class,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,resource,of,this,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,this,clazz,null,new,class,path,resource,path,to,use,this,clazz,new,class,path,resource,path,to,use,this,class,loader
ClassPathResource -> @Override 	public URL getURL() throws IOException;1328020251;This implementation returns a URL for the underlying class path resource._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url__		if (this.clazz != null) {_			url = this.clazz.getResource(this.path)__		}_		else {_			url = this.classLoader.getResource(this.path)__		}_		if (url == null) {_			throw new FileNotFoundException(_					getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,if,this,clazz,null,url,this,clazz,get,resource,this,path,else,url,this,class,loader,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1337135093;This implementation returns a URL for the underlying class path resource._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url__		if (this.clazz != null) {_			url = this.clazz.getResource(this.path)__		}_		else {_			url = this.classLoader.getResource(this.path)__		}_		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,if,this,clazz,null,url,this,clazz,get,resource,this,path,else,url,this,class,loader,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1356735495;This implementation returns a URL for the underlying class path resource._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url__		if (this.clazz != null) {_			url = this.clazz.getResource(this.path)__		}_		else {_			url = this.classLoader.getResource(this.path)__		}_		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,if,this,clazz,null,url,this,clazz,get,resource,this,path,else,url,this,class,loader,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1357119239;This implementation returns a URL for the underlying class path resource._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url__		if (this.clazz != null) {_			url = this.clazz.getResource(this.path)__		}_		else {_			url = this.classLoader.getResource(this.path)__		}_		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,if,this,clazz,null,url,this,clazz,get,resource,this,path,else,url,this,class,loader,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1362408075;This implementation returns a URL for the underlying class path resource._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url__		if (this.clazz != null) {_			url = this.clazz.getResource(this.path)__		}_		else {_			url = this.classLoader.getResource(this.path)__		}_		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,if,this,clazz,null,url,this,clazz,get,resource,this,path,else,url,this,class,loader,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1368482696;This implementation returns a URL for the underlying class path resource._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url__		if (this.clazz != null) {_			url = this.clazz.getResource(this.path)__		}_		else {_			url = this.classLoader.getResource(this.path)__		}_		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,if,this,clazz,null,url,this,clazz,get,resource,this,path,else,url,this,class,loader,get,resource,this,path,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1398290095;This implementation returns a URL for the underlying class path resource,_if available._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = resolveURL()__		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,if,available,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,resolve,url,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1444131013;This implementation returns a URL for the underlying class path resource,_if available._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = resolveURL()__		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,if,available,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,resolve,url,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1495868221;This implementation returns a URL for the underlying class path resource,_if available._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = resolveURL()__		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,if,available,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,resolve,url,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1498780456;This implementation returns a URL for the underlying class path resource,_if available._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = resolveURL()__		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,if,available,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,resolve,url,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1502974979;This implementation returns a URL for the underlying class path resource,_if available._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = resolveURL()__		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,if,available,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,resolve,url,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1509635157;This implementation returns a URL for the underlying class path resource,_if available._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = resolveURL()__		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,if,available,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,resolve,url,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1530174524;This implementation returns a URL for the underlying class path resource,_if available._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = resolveURL()__		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,if,available,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,resolve,url,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
ClassPathResource -> @Override 	public URL getURL() throws IOException;1530190293;This implementation returns a URL for the underlying class path resource,_if available._@see java.lang.ClassLoader#getResource(String)_@see java.lang.Class#getResource(String);@Override_	public URL getURL() throws IOException {_		URL url = resolveURL()__		if (url == null) {_			throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist")__		}_		return url__	};this,implementation,returns,a,url,for,the,underlying,class,path,resource,if,available,see,java,lang,class,loader,get,resource,string,see,java,lang,class,get,resource,string;override,public,url,get,url,throws,ioexception,url,url,resolve,url,if,url,null,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url
