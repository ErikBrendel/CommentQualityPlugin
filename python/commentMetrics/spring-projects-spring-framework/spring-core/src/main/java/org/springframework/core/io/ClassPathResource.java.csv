commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the path for this resource (as resource path within the class path).  */ ;/**  * Return the path for this resource (as resource path within the class path).  */ public final String getPath() {     return this.path. }
true;public,final;0;4;/**  * Return the ClassLoader that this resource will be obtained from.  */ ;/**  * Return the ClassLoader that this resource will be obtained from.  */ @Nullable public final ClassLoader getClassLoader() {     return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader). }
true;public;0;4;/**  * This implementation checks for the resolution of a resource URL.  * @see java.lang.ClassLoader#getResource(String)  * @see java.lang.Class#getResource(String)  */ ;/**  * This implementation checks for the resolution of a resource URL.  * @see java.lang.ClassLoader#getResource(String)  * @see java.lang.Class#getResource(String)  */ @Override public boolean exists() {     return (resolveURL() != null). }
true;protected;0;12;/**  * Resolves a URL for the underlying class path resource.  * @return the resolved URL, or {@code null} if not resolvable  */ ;/**  * Resolves a URL for the underlying class path resource.  * @return the resolved URL, or {@code null} if not resolvable  */ @Nullable protected URL resolveURL() {     if (this.clazz != null) {         return this.clazz.getResource(this.path).     } else if (this.classLoader != null) {         return this.classLoader.getResource(this.path).     } else {         return ClassLoader.getSystemResource(this.path).     } }
true;public;0;17;/**  * This implementation opens an InputStream for the given class path resource.  * @see java.lang.ClassLoader#getResourceAsStream(String)  * @see java.lang.Class#getResourceAsStream(String)  */ ;/**  * This implementation opens an InputStream for the given class path resource.  * @see java.lang.ClassLoader#getResourceAsStream(String)  * @see java.lang.Class#getResourceAsStream(String)  */ @Override public InputStream getInputStream() throws IOException {     InputStream is.     if (this.clazz != null) {         is = this.clazz.getResourceAsStream(this.path).     } else if (this.classLoader != null) {         is = this.classLoader.getResourceAsStream(this.path).     } else {         is = ClassLoader.getSystemResourceAsStream(this.path).     }     if (is == null) {         throw new FileNotFoundException(getDescription() + " cannot be opened because it does not exist").     }     return is. }
true;public;0;8;/**  * This implementation returns a URL for the underlying class path resource,  * if available.  * @see java.lang.ClassLoader#getResource(String)  * @see java.lang.Class#getResource(String)  */ ;/**  * This implementation returns a URL for the underlying class path resource,  * if available.  * @see java.lang.ClassLoader#getResource(String)  * @see java.lang.Class#getResource(String)  */ @Override public URL getURL() throws IOException {     URL url = resolveURL().     if (url == null) {         throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist").     }     return url. }
true;public;1;6;/**  * This implementation creates a ClassPathResource, applying the given path  * relative to the path of the underlying resource of this descriptor.  * @see org.springframework.util.StringUtils#applyRelativePath(String, String)  */ ;/**  * This implementation creates a ClassPathResource, applying the given path  * relative to the path of the underlying resource of this descriptor.  * @see org.springframework.util.StringUtils#applyRelativePath(String, String)  */ @Override public Resource createRelative(String relativePath) {     String pathToUse = StringUtils.applyRelativePath(this.path, relativePath).     return (this.clazz != null ? new ClassPathResource(pathToUse, this.clazz) : new ClassPathResource(pathToUse, this.classLoader)). }
true;public;0;5;/**  * This implementation returns the name of the file that this class path  * resource refers to.  * @see org.springframework.util.StringUtils#getFilename(String)  */ ;/**  * This implementation returns the name of the file that this class path  * resource refers to.  * @see org.springframework.util.StringUtils#getFilename(String)  */ @Override @Nullable public String getFilename() {     return StringUtils.getFilename(this.path). }
true;public;0;15;/**  * This implementation returns a description that includes the class path location.  */ ;/**  * This implementation returns a description that includes the class path location.  */ @Override public String getDescription() {     StringBuilder builder = new StringBuilder("class path resource [").     String pathToUse = this.path.     if (this.clazz != null && !pathToUse.startsWith("/")) {         builder.append(ClassUtils.classPackageAsResourcePath(this.clazz)).         builder.append('/').     }     if (pathToUse.startsWith("/")) {         pathToUse = pathToUse.substring(1).     }     builder.append(pathToUse).     builder.append(']').     return builder.toString(). }
true;public;1;13;/**  * This implementation compares the underlying class path locations.  */ ;/**  * This implementation compares the underlying class path locations.  */ @Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof ClassPathResource)) {         return false.     }     ClassPathResource otherRes = (ClassPathResource) other.     return (this.path.equals(otherRes.path) && ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) && ObjectUtils.nullSafeEquals(this.clazz, otherRes.clazz)). }
true;public;0;4;/**  * This implementation returns the hash code of the underlying  * class path location.  */ ;/**  * This implementation returns the hash code of the underlying  * class path location.  */ @Override public int hashCode() {     return this.path.hashCode(). }
