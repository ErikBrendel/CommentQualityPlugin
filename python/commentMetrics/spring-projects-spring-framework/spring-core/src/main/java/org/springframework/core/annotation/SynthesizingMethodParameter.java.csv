commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected <A extends Annotation> A adaptAnnotation(A annotation) {     return AnnotationUtils.synthesizeAnnotation(annotation, getAnnotatedElement()). }
false;protected;1;4;;@Override protected Annotation[] adaptAnnotationArray(Annotation[] annotations) {     return AnnotationUtils.synthesizeAnnotationArray(annotations, getAnnotatedElement()). }
false;public;0;4;;@Override public SynthesizingMethodParameter clone() {     return new SynthesizingMethodParameter(this). }
true;public,static;2;11;/**  * Create a new SynthesizingMethodParameter for the given method or constructor.  * <p>This is a convenience factory method for scenarios where a  * Method or Constructor reference is treated in a generic fashion.  * @param executable the Method or Constructor to specify a parameter for  * @param parameterIndex the index of the parameter  * @return the corresponding SynthesizingMethodParameter instance  * @since 5.0  */ ;/**  * Create a new SynthesizingMethodParameter for the given method or constructor.  * <p>This is a convenience factory method for scenarios where a  * Method or Constructor reference is treated in a generic fashion.  * @param executable the Method or Constructor to specify a parameter for  * @param parameterIndex the index of the parameter  * @return the corresponding SynthesizingMethodParameter instance  * @since 5.0  */ public static SynthesizingMethodParameter forExecutable(Executable executable, int parameterIndex) {     if (executable instanceof Method) {         return new SynthesizingMethodParameter((Method) executable, parameterIndex).     } else if (executable instanceof Constructor) {         return new SynthesizingMethodParameter((Constructor<?>) executable, parameterIndex).     } else {         throw new IllegalArgumentException("Not a Method/Constructor: " + executable).     } }
true;public,static;1;3;/**  * Create a new SynthesizingMethodParameter for the given parameter descriptor.  * <p>This is a convenience factory method for scenarios where a  * Java 8 {@link Parameter} descriptor is already available.  * @param parameter the parameter descriptor  * @return the corresponding SynthesizingMethodParameter instance  * @since 5.0  */ ;/**  * Create a new SynthesizingMethodParameter for the given parameter descriptor.  * <p>This is a convenience factory method for scenarios where a  * Java 8 {@link Parameter} descriptor is already available.  * @param parameter the parameter descriptor  * @return the corresponding SynthesizingMethodParameter instance  * @since 5.0  */ public static SynthesizingMethodParameter forParameter(Parameter parameter) {     return forExecutable(parameter.getDeclaringExecutable(), findParameterIndex(parameter)). }
