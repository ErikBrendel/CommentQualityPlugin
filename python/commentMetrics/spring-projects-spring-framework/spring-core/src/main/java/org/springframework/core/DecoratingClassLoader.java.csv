commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Add a package name to exclude from decoration (e.g. overriding).  * <p>Any class whose fully-qualified name starts with the name registered  * here will be handled by the parent ClassLoader in the usual fashion.  * @param packageName the package name to exclude  */ ;/**  * Add a package name to exclude from decoration (e.g. overriding).  * <p>Any class whose fully-qualified name starts with the name registered  * here will be handled by the parent ClassLoader in the usual fashion.  * @param packageName the package name to exclude  */ public void excludePackage(String packageName) {     Assert.notNull(packageName, "Package name must not be null").     this.excludedPackages.add(packageName). }
true;public;1;4;/**  * Add a class name to exclude from decoration (e.g. overriding).  * <p>Any class name registered here will be handled by the parent  * ClassLoader in the usual fashion.  * @param className the class name to exclude  */ ;/**  * Add a class name to exclude from decoration (e.g. overriding).  * <p>Any class name registered here will be handled by the parent  * ClassLoader in the usual fashion.  * @param className the class name to exclude  */ public void excludeClass(String className) {     Assert.notNull(className, "Class name must not be null").     this.excludedClasses.add(className). }
true;protected;1;11;/**  * Determine whether the specified class is excluded from decoration  * by this class loader.  * <p>The default implementation checks against excluded packages and classes.  * @param className the class name to check  * @return whether the specified class is eligible  * @see #excludePackage  * @see #excludeClass  */ ;/**  * Determine whether the specified class is excluded from decoration  * by this class loader.  * <p>The default implementation checks against excluded packages and classes.  * @param className the class name to check  * @return whether the specified class is eligible  * @see #excludePackage  * @see #excludeClass  */ protected boolean isExcluded(String className) {     if (this.excludedClasses.contains(className)) {         return true.     }     for (String packageName : this.excludedPackages) {         if (className.startsWith(packageName)) {             return true.         }     }     return false. }
