# id;timestamp;commentText;codeText;commentWords;codeWords
DecoratingClassLoader -> protected boolean isExcluded(String className);1328020251;Determine whether the specified class is excluded from decoration_by this class loader._<p>The default implementation checks against excluded packages and classes._@param className the class name to check_@return whether the specified class is eligible_@see #excludePackage_@see #excludeClass;protected boolean isExcluded(String className) {_		synchronized (this.exclusionMonitor) {_			if (this.excludedClasses.contains(className)) {_				return true__			}_			for (String packageName : this.excludedPackages) {_				if (className.startsWith(packageName)) {_					return true__				}_			}_		}_		return false__	};determine,whether,the,specified,class,is,excluded,from,decoration,by,this,class,loader,p,the,default,implementation,checks,against,excluded,packages,and,classes,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,exclude,package,see,exclude,class;protected,boolean,is,excluded,string,class,name,synchronized,this,exclusion,monitor,if,this,excluded,classes,contains,class,name,return,true,for,string,package,name,this,excluded,packages,if,class,name,starts,with,package,name,return,true,return,false
DecoratingClassLoader -> protected boolean isExcluded(String className);1412253193;Determine whether the specified class is excluded from decoration_by this class loader._<p>The default implementation checks against excluded packages and classes._@param className the class name to check_@return whether the specified class is eligible_@see #excludePackage_@see #excludeClass;protected boolean isExcluded(String className) {_		synchronized (this.exclusionMonitor) {_			if (this.excludedClasses.contains(className)) {_				return true__			}_			for (String packageName : this.excludedPackages) {_				if (className.startsWith(packageName)) {_					return true__				}_			}_		}_		return false__	};determine,whether,the,specified,class,is,excluded,from,decoration,by,this,class,loader,p,the,default,implementation,checks,against,excluded,packages,and,classes,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,exclude,package,see,exclude,class;protected,boolean,is,excluded,string,class,name,synchronized,this,exclusion,monitor,if,this,excluded,classes,contains,class,name,return,true,for,string,package,name,this,excluded,packages,if,class,name,starts,with,package,name,return,true,return,false
DecoratingClassLoader -> protected boolean isExcluded(String className);1460395177;Determine whether the specified class is excluded from decoration_by this class loader._<p>The default implementation checks against excluded packages and classes._@param className the class name to check_@return whether the specified class is eligible_@see #excludePackage_@see #excludeClass;protected boolean isExcluded(String className) {_		if (this.excludedClasses.contains(className)) {_			return true__		}_		for (String packageName : this.excludedPackages) {_			if (className.startsWith(packageName)) {_				return true__			}_		}_		return false__	};determine,whether,the,specified,class,is,excluded,from,decoration,by,this,class,loader,p,the,default,implementation,checks,against,excluded,packages,and,classes,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,exclude,package,see,exclude,class;protected,boolean,is,excluded,string,class,name,if,this,excluded,classes,contains,class,name,return,true,for,string,package,name,this,excluded,packages,if,class,name,starts,with,package,name,return,true,return,false
DecoratingClassLoader -> protected boolean isExcluded(String className);1467677340;Determine whether the specified class is excluded from decoration_by this class loader._<p>The default implementation checks against excluded packages and classes._@param className the class name to check_@return whether the specified class is eligible_@see #excludePackage_@see #excludeClass;protected boolean isExcluded(String className) {_		if (this.excludedClasses.contains(className)) {_			return true__		}_		for (String packageName : this.excludedPackages) {_			if (className.startsWith(packageName)) {_				return true__			}_		}_		return false__	};determine,whether,the,specified,class,is,excluded,from,decoration,by,this,class,loader,p,the,default,implementation,checks,against,excluded,packages,and,classes,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,exclude,package,see,exclude,class;protected,boolean,is,excluded,string,class,name,if,this,excluded,classes,contains,class,name,return,true,for,string,package,name,this,excluded,packages,if,class,name,starts,with,package,name,return,true,return,false
DecoratingClassLoader -> protected boolean isExcluded(String className);1469561191;Determine whether the specified class is excluded from decoration_by this class loader._<p>The default implementation checks against excluded packages and classes._@param className the class name to check_@return whether the specified class is eligible_@see #excludePackage_@see #excludeClass;protected boolean isExcluded(String className) {_		if (this.excludedClasses.contains(className)) {_			return true__		}_		for (String packageName : this.excludedPackages) {_			if (className.startsWith(packageName)) {_				return true__			}_		}_		return false__	};determine,whether,the,specified,class,is,excluded,from,decoration,by,this,class,loader,p,the,default,implementation,checks,against,excluded,packages,and,classes,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,exclude,package,see,exclude,class;protected,boolean,is,excluded,string,class,name,if,this,excluded,classes,contains,class,name,return,true,for,string,package,name,this,excluded,packages,if,class,name,starts,with,package,name,return,true,return,false
DecoratingClassLoader -> protected boolean isExcluded(String className);1496837955;Determine whether the specified class is excluded from decoration_by this class loader._<p>The default implementation checks against excluded packages and classes._@param className the class name to check_@return whether the specified class is eligible_@see #excludePackage_@see #excludeClass;protected boolean isExcluded(String className) {_		if (this.excludedClasses.contains(className)) {_			return true__		}_		for (String packageName : this.excludedPackages) {_			if (className.startsWith(packageName)) {_				return true__			}_		}_		return false__	};determine,whether,the,specified,class,is,excluded,from,decoration,by,this,class,loader,p,the,default,implementation,checks,against,excluded,packages,and,classes,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,exclude,package,see,exclude,class;protected,boolean,is,excluded,string,class,name,if,this,excluded,classes,contains,class,name,return,true,for,string,package,name,this,excluded,packages,if,class,name,starts,with,package,name,return,true,return,false
DecoratingClassLoader -> public void excludePackage(String packageName);1328020251;Add a package name to exclude from decoration (e.g. overriding)._<p>Any class whose fully-qualified name starts with the name registered_here will be handled by the parent ClassLoader in the usual fashion._@param packageName the package name to exclude;public void excludePackage(String packageName) {_		Assert.notNull(packageName, "Package name must not be null")__		synchronized (this.exclusionMonitor) {_			this.excludedPackages.add(packageName)__		}_	};add,a,package,name,to,exclude,from,decoration,e,g,overriding,p,any,class,whose,fully,qualified,name,starts,with,the,name,registered,here,will,be,handled,by,the,parent,class,loader,in,the,usual,fashion,param,package,name,the,package,name,to,exclude;public,void,exclude,package,string,package,name,assert,not,null,package,name,package,name,must,not,be,null,synchronized,this,exclusion,monitor,this,excluded,packages,add,package,name
DecoratingClassLoader -> public void excludePackage(String packageName);1412253193;Add a package name to exclude from decoration (e.g. overriding)._<p>Any class whose fully-qualified name starts with the name registered_here will be handled by the parent ClassLoader in the usual fashion._@param packageName the package name to exclude;public void excludePackage(String packageName) {_		Assert.notNull(packageName, "Package name must not be null")__		synchronized (this.exclusionMonitor) {_			this.excludedPackages.add(packageName)__		}_	};add,a,package,name,to,exclude,from,decoration,e,g,overriding,p,any,class,whose,fully,qualified,name,starts,with,the,name,registered,here,will,be,handled,by,the,parent,class,loader,in,the,usual,fashion,param,package,name,the,package,name,to,exclude;public,void,exclude,package,string,package,name,assert,not,null,package,name,package,name,must,not,be,null,synchronized,this,exclusion,monitor,this,excluded,packages,add,package,name
DecoratingClassLoader -> public void excludePackage(String packageName);1460395177;Add a package name to exclude from decoration (e.g. overriding)._<p>Any class whose fully-qualified name starts with the name registered_here will be handled by the parent ClassLoader in the usual fashion._@param packageName the package name to exclude;public void excludePackage(String packageName) {_		Assert.notNull(packageName, "Package name must not be null")__		this.excludedPackages.add(packageName)__	};add,a,package,name,to,exclude,from,decoration,e,g,overriding,p,any,class,whose,fully,qualified,name,starts,with,the,name,registered,here,will,be,handled,by,the,parent,class,loader,in,the,usual,fashion,param,package,name,the,package,name,to,exclude;public,void,exclude,package,string,package,name,assert,not,null,package,name,package,name,must,not,be,null,this,excluded,packages,add,package,name
DecoratingClassLoader -> public void excludePackage(String packageName);1467677340;Add a package name to exclude from decoration (e.g. overriding)._<p>Any class whose fully-qualified name starts with the name registered_here will be handled by the parent ClassLoader in the usual fashion._@param packageName the package name to exclude;public void excludePackage(String packageName) {_		Assert.notNull(packageName, "Package name must not be null")__		this.excludedPackages.add(packageName)__	};add,a,package,name,to,exclude,from,decoration,e,g,overriding,p,any,class,whose,fully,qualified,name,starts,with,the,name,registered,here,will,be,handled,by,the,parent,class,loader,in,the,usual,fashion,param,package,name,the,package,name,to,exclude;public,void,exclude,package,string,package,name,assert,not,null,package,name,package,name,must,not,be,null,this,excluded,packages,add,package,name
DecoratingClassLoader -> public void excludePackage(String packageName);1469561191;Add a package name to exclude from decoration (e.g. overriding)._<p>Any class whose fully-qualified name starts with the name registered_here will be handled by the parent ClassLoader in the usual fashion._@param packageName the package name to exclude;public void excludePackage(String packageName) {_		Assert.notNull(packageName, "Package name must not be null")__		this.excludedPackages.add(packageName)__	};add,a,package,name,to,exclude,from,decoration,e,g,overriding,p,any,class,whose,fully,qualified,name,starts,with,the,name,registered,here,will,be,handled,by,the,parent,class,loader,in,the,usual,fashion,param,package,name,the,package,name,to,exclude;public,void,exclude,package,string,package,name,assert,not,null,package,name,package,name,must,not,be,null,this,excluded,packages,add,package,name
DecoratingClassLoader -> public void excludePackage(String packageName);1496837955;Add a package name to exclude from decoration (e.g. overriding)._<p>Any class whose fully-qualified name starts with the name registered_here will be handled by the parent ClassLoader in the usual fashion._@param packageName the package name to exclude;public void excludePackage(String packageName) {_		Assert.notNull(packageName, "Package name must not be null")__		this.excludedPackages.add(packageName)__	};add,a,package,name,to,exclude,from,decoration,e,g,overriding,p,any,class,whose,fully,qualified,name,starts,with,the,name,registered,here,will,be,handled,by,the,parent,class,loader,in,the,usual,fashion,param,package,name,the,package,name,to,exclude;public,void,exclude,package,string,package,name,assert,not,null,package,name,package,name,must,not,be,null,this,excluded,packages,add,package,name
DecoratingClassLoader -> public DecoratingClassLoader();1328020251;Create a new DecoratingClassLoader with no parent ClassLoader.;public DecoratingClassLoader() {_	};create,a,new,decorating,class,loader,with,no,parent,class,loader;public,decorating,class,loader
DecoratingClassLoader -> public DecoratingClassLoader();1412253193;Create a new DecoratingClassLoader with no parent ClassLoader.;public DecoratingClassLoader() {_	};create,a,new,decorating,class,loader,with,no,parent,class,loader;public,decorating,class,loader
DecoratingClassLoader -> public DecoratingClassLoader();1460395177;Create a new DecoratingClassLoader with no parent ClassLoader.;public DecoratingClassLoader() {_	};create,a,new,decorating,class,loader,with,no,parent,class,loader;public,decorating,class,loader
DecoratingClassLoader -> public DecoratingClassLoader();1467677340;Create a new DecoratingClassLoader with no parent ClassLoader.;public DecoratingClassLoader() {_	};create,a,new,decorating,class,loader,with,no,parent,class,loader;public,decorating,class,loader
DecoratingClassLoader -> public DecoratingClassLoader();1469561191;Create a new DecoratingClassLoader with no parent ClassLoader.;public DecoratingClassLoader() {_	};create,a,new,decorating,class,loader,with,no,parent,class,loader;public,decorating,class,loader
DecoratingClassLoader -> public DecoratingClassLoader();1496837955;Create a new DecoratingClassLoader with no parent ClassLoader.;public DecoratingClassLoader() {_	};create,a,new,decorating,class,loader,with,no,parent,class,loader;public,decorating,class,loader
DecoratingClassLoader -> public void excludeClass(String className);1328020251;Add a class name to exclude from decoration (e.g. overriding)._<p>Any class name registered here will be handled by the parent_ClassLoader in the usual fashion._@param className the class name to exclude;public void excludeClass(String className) {_		Assert.notNull(className, "Class name must not be null")__		synchronized (this.exclusionMonitor) {_			this.excludedClasses.add(className)__		}_	};add,a,class,name,to,exclude,from,decoration,e,g,overriding,p,any,class,name,registered,here,will,be,handled,by,the,parent,class,loader,in,the,usual,fashion,param,class,name,the,class,name,to,exclude;public,void,exclude,class,string,class,name,assert,not,null,class,name,class,name,must,not,be,null,synchronized,this,exclusion,monitor,this,excluded,classes,add,class,name
DecoratingClassLoader -> public void excludeClass(String className);1412253193;Add a class name to exclude from decoration (e.g. overriding)._<p>Any class name registered here will be handled by the parent_ClassLoader in the usual fashion._@param className the class name to exclude;public void excludeClass(String className) {_		Assert.notNull(className, "Class name must not be null")__		synchronized (this.exclusionMonitor) {_			this.excludedClasses.add(className)__		}_	};add,a,class,name,to,exclude,from,decoration,e,g,overriding,p,any,class,name,registered,here,will,be,handled,by,the,parent,class,loader,in,the,usual,fashion,param,class,name,the,class,name,to,exclude;public,void,exclude,class,string,class,name,assert,not,null,class,name,class,name,must,not,be,null,synchronized,this,exclusion,monitor,this,excluded,classes,add,class,name
DecoratingClassLoader -> public void excludeClass(String className);1460395177;Add a class name to exclude from decoration (e.g. overriding)._<p>Any class name registered here will be handled by the parent_ClassLoader in the usual fashion._@param className the class name to exclude;public void excludeClass(String className) {_		Assert.notNull(className, "Class name must not be null")__		this.excludedClasses.add(className)__	};add,a,class,name,to,exclude,from,decoration,e,g,overriding,p,any,class,name,registered,here,will,be,handled,by,the,parent,class,loader,in,the,usual,fashion,param,class,name,the,class,name,to,exclude;public,void,exclude,class,string,class,name,assert,not,null,class,name,class,name,must,not,be,null,this,excluded,classes,add,class,name
DecoratingClassLoader -> public void excludeClass(String className);1467677340;Add a class name to exclude from decoration (e.g. overriding)._<p>Any class name registered here will be handled by the parent_ClassLoader in the usual fashion._@param className the class name to exclude;public void excludeClass(String className) {_		Assert.notNull(className, "Class name must not be null")__		this.excludedClasses.add(className)__	};add,a,class,name,to,exclude,from,decoration,e,g,overriding,p,any,class,name,registered,here,will,be,handled,by,the,parent,class,loader,in,the,usual,fashion,param,class,name,the,class,name,to,exclude;public,void,exclude,class,string,class,name,assert,not,null,class,name,class,name,must,not,be,null,this,excluded,classes,add,class,name
DecoratingClassLoader -> public void excludeClass(String className);1469561191;Add a class name to exclude from decoration (e.g. overriding)._<p>Any class name registered here will be handled by the parent_ClassLoader in the usual fashion._@param className the class name to exclude;public void excludeClass(String className) {_		Assert.notNull(className, "Class name must not be null")__		this.excludedClasses.add(className)__	};add,a,class,name,to,exclude,from,decoration,e,g,overriding,p,any,class,name,registered,here,will,be,handled,by,the,parent,class,loader,in,the,usual,fashion,param,class,name,the,class,name,to,exclude;public,void,exclude,class,string,class,name,assert,not,null,class,name,class,name,must,not,be,null,this,excluded,classes,add,class,name
DecoratingClassLoader -> public void excludeClass(String className);1496837955;Add a class name to exclude from decoration (e.g. overriding)._<p>Any class name registered here will be handled by the parent_ClassLoader in the usual fashion._@param className the class name to exclude;public void excludeClass(String className) {_		Assert.notNull(className, "Class name must not be null")__		this.excludedClasses.add(className)__	};add,a,class,name,to,exclude,from,decoration,e,g,overriding,p,any,class,name,registered,here,will,be,handled,by,the,parent,class,loader,in,the,usual,fashion,param,class,name,the,class,name,to,exclude;public,void,exclude,class,string,class,name,assert,not,null,class,name,class,name,must,not,be,null,this,excluded,classes,add,class,name
DecoratingClassLoader -> public DecoratingClassLoader(ClassLoader parent);1328020251;Create a new DecoratingClassLoader using the given parent ClassLoader_for delegation.;public DecoratingClassLoader(ClassLoader parent) {_		super(parent)__	};create,a,new,decorating,class,loader,using,the,given,parent,class,loader,for,delegation;public,decorating,class,loader,class,loader,parent,super,parent
DecoratingClassLoader -> public DecoratingClassLoader(ClassLoader parent);1412253193;Create a new DecoratingClassLoader using the given parent ClassLoader_for delegation.;public DecoratingClassLoader(ClassLoader parent) {_		super(parent)__	};create,a,new,decorating,class,loader,using,the,given,parent,class,loader,for,delegation;public,decorating,class,loader,class,loader,parent,super,parent
DecoratingClassLoader -> public DecoratingClassLoader(ClassLoader parent);1460395177;Create a new DecoratingClassLoader using the given parent ClassLoader_for delegation.;public DecoratingClassLoader(ClassLoader parent) {_		super(parent)__	};create,a,new,decorating,class,loader,using,the,given,parent,class,loader,for,delegation;public,decorating,class,loader,class,loader,parent,super,parent
DecoratingClassLoader -> public DecoratingClassLoader(ClassLoader parent);1467677340;Create a new DecoratingClassLoader using the given parent ClassLoader_for delegation.;public DecoratingClassLoader(ClassLoader parent) {_		super(parent)__	};create,a,new,decorating,class,loader,using,the,given,parent,class,loader,for,delegation;public,decorating,class,loader,class,loader,parent,super,parent
DecoratingClassLoader -> public DecoratingClassLoader(ClassLoader parent);1469561191;Create a new DecoratingClassLoader using the given parent ClassLoader_for delegation.;public DecoratingClassLoader(ClassLoader parent) {_		super(parent)__	};create,a,new,decorating,class,loader,using,the,given,parent,class,loader,for,delegation;public,decorating,class,loader,class,loader,parent,super,parent
