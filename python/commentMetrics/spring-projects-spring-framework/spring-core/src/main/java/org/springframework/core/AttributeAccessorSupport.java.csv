commented;modifiers;parameterAmount;loc;comment;code
false;public;2;10;;@Override public void setAttribute(String name, @Nullable Object value) {     Assert.notNull(name, "Name must not be null").     if (value != null) {         this.attributes.put(name, value).     } else {         removeAttribute(name).     } }
false;public;1;6;;@Override @Nullable public Object getAttribute(String name) {     Assert.notNull(name, "Name must not be null").     return this.attributes.get(name). }
false;public;1;6;;@Override @Nullable public Object removeAttribute(String name) {     Assert.notNull(name, "Name must not be null").     return this.attributes.remove(name). }
false;public;1;5;;@Override public boolean hasAttribute(String name) {     Assert.notNull(name, "Name must not be null").     return this.attributes.containsKey(name). }
false;public;0;4;;@Override public String[] attributeNames() {     return StringUtils.toStringArray(this.attributes.keySet()). }
true;protected;1;7;/**  * Copy the attributes from the supplied AttributeAccessor to this accessor.  * @param source the AttributeAccessor to copy from  */ ;/**  * Copy the attributes from the supplied AttributeAccessor to this accessor.  * @param source the AttributeAccessor to copy from  */ protected void copyAttributesFrom(AttributeAccessor source) {     Assert.notNull(source, "Source must not be null").     String[] attributeNames = source.attributeNames().     for (String attributeName : attributeNames) {         setAttribute(attributeName, source.getAttribute(attributeName)).     } }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof AttributeAccessorSupport && this.attributes.equals(((AttributeAccessorSupport) other).attributes))). }
false;public;0;4;;@Override public int hashCode() {     return this.attributes.hashCode(). }
