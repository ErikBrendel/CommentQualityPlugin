# id;timestamp;commentText;codeText;commentWords;codeWords
InvertibleComparator -> public void invertOrder();1328020251;Invert the sort order: ascending -> descending or_descending -> ascending.;public void invertOrder() {_		this.ascending = !this.ascending__	};invert,the,sort,order,ascending,descending,or,descending,ascending;public,void,invert,order,this,ascending,this,ascending
InvertibleComparator -> public void invertOrder();1346940376;Invert the sort order: ascending -> descending or_descending -> ascending.;public void invertOrder() {_		this.ascending = !this.ascending__	};invert,the,sort,order,ascending,descending,or,descending,ascending;public,void,invert,order,this,ascending,this,ascending
InvertibleComparator -> public void invertOrder();1356735495;Invert the sort order: ascending -> descending or_descending -> ascending.;public void invertOrder() {_		this.ascending = !this.ascending__	};invert,the,sort,order,ascending,descending,or,descending,ascending;public,void,invert,order,this,ascending,this,ascending
InvertibleComparator -> public void invertOrder();1357119239;Invert the sort order: ascending -> descending or_descending -> ascending.;public void invertOrder() {_		this.ascending = !this.ascending__	};invert,the,sort,order,ascending,descending,or,descending,ascending;public,void,invert,order,this,ascending,this,ascending
InvertibleComparator -> public void invertOrder();1368482696;Invert the sort order: ascending -> descending or_descending -> ascending.;public void invertOrder() {_		this.ascending = !this.ascending__	};invert,the,sort,order,ascending,descending,or,descending,ascending;public,void,invert,order,this,ascending,this,ascending
InvertibleComparator -> public void invertOrder();1487178332;Invert the sort order: ascending -> descending or_descending -> ascending.;public void invertOrder() {_		this.ascending = !this.ascending__	};invert,the,sort,order,ascending,descending,or,descending,ascending;public,void,invert,order,this,ascending,this,ascending
InvertibleComparator -> public void invertOrder();1530174524;Invert the sort order: ascending -> descending or_descending -> ascending.;public void invertOrder() {_		this.ascending = !this.ascending__	};invert,the,sort,order,ascending,descending,or,descending,ascending;public,void,invert,order,this,ascending,this,ascending
InvertibleComparator -> public void invertOrder();1530190293;Invert the sort order: ascending -> descending or_descending -> ascending.;public void invertOrder() {_		this.ascending = !this.ascending__	};invert,the,sort,order,ascending,descending,or,descending,ascending;public,void,invert,order,this,ascending,this,ascending
InvertibleComparator -> public boolean isAscending();1328020251;Return the sort order: ascending (true) or descending (false).;public boolean isAscending() {_		return this.ascending__	};return,the,sort,order,ascending,true,or,descending,false;public,boolean,is,ascending,return,this,ascending
InvertibleComparator -> public boolean isAscending();1346940376;Return the sort order: ascending (true) or descending (false).;public boolean isAscending() {_		return this.ascending__	};return,the,sort,order,ascending,true,or,descending,false;public,boolean,is,ascending,return,this,ascending
InvertibleComparator -> public boolean isAscending();1356735495;Return the sort order: ascending (true) or descending (false).;public boolean isAscending() {_		return this.ascending__	};return,the,sort,order,ascending,true,or,descending,false;public,boolean,is,ascending,return,this,ascending
InvertibleComparator -> public boolean isAscending();1357119239;Return the sort order: ascending (true) or descending (false).;public boolean isAscending() {_		return this.ascending__	};return,the,sort,order,ascending,true,or,descending,false;public,boolean,is,ascending,return,this,ascending
InvertibleComparator -> public boolean isAscending();1368482696;Return the sort order: ascending (true) or descending (false).;public boolean isAscending() {_		return this.ascending__	};return,the,sort,order,ascending,true,or,descending,false;public,boolean,is,ascending,return,this,ascending
InvertibleComparator -> public boolean isAscending();1487178332;Return the sort order: ascending (true) or descending (false).;public boolean isAscending() {_		return this.ascending__	};return,the,sort,order,ascending,true,or,descending,false;public,boolean,is,ascending,return,this,ascending
InvertibleComparator -> public boolean isAscending();1530174524;Return the sort order: ascending (true) or descending (false).;public boolean isAscending() {_		return this.ascending__	};return,the,sort,order,ascending,true,or,descending,false;public,boolean,is,ascending,return,this,ascending
InvertibleComparator -> public boolean isAscending();1530190293;Return the sort order: ascending (true) or descending (false).;public boolean isAscending() {_		return this.ascending__	};return,the,sort,order,ascending,true,or,descending,false;public,boolean,is,ascending,return,this,ascending
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator);1328020251;Create an InvertibleComparator that sorts ascending by default._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate;public InvertibleComparator(Comparator<T> comparator) {_		this.comparator = comparator__	};create,an,invertible,comparator,that,sorts,ascending,by,default,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate;public,invertible,comparator,comparator,t,comparator,this,comparator,comparator
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator);1346940376;Create an InvertibleComparator that sorts ascending by default._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate;public InvertibleComparator(Comparator<T> comparator) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__	};create,an,invertible,comparator,that,sorts,ascending,by,default,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate;public,invertible,comparator,comparator,t,comparator,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator);1356735495;Create an InvertibleComparator that sorts ascending by default._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate;public InvertibleComparator(Comparator<T> comparator) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__	};create,an,invertible,comparator,that,sorts,ascending,by,default,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate;public,invertible,comparator,comparator,t,comparator,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator);1357119239;Create an InvertibleComparator that sorts ascending by default._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate;public InvertibleComparator(Comparator<T> comparator) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__	};create,an,invertible,comparator,that,sorts,ascending,by,default,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate;public,invertible,comparator,comparator,t,comparator,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator);1368482696;Create an InvertibleComparator that sorts ascending by default._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate;public InvertibleComparator(Comparator<T> comparator) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__	};create,an,invertible,comparator,that,sorts,ascending,by,default,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate;public,invertible,comparator,comparator,t,comparator,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator);1487178332;Create an InvertibleComparator that sorts ascending by default._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate;public InvertibleComparator(Comparator<T> comparator) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__	};create,an,invertible,comparator,that,sorts,ascending,by,default,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate;public,invertible,comparator,comparator,t,comparator,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator);1530174524;Create an InvertibleComparator that sorts ascending by default._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate;public InvertibleComparator(Comparator<T> comparator) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__	};create,an,invertible,comparator,that,sorts,ascending,by,default,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate;public,invertible,comparator,comparator,t,comparator,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator);1530190293;Create an InvertibleComparator that sorts ascending by default._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate;public InvertibleComparator(Comparator<T> comparator) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__	};create,an,invertible,comparator,that,sorts,ascending,by,default,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate;public,invertible,comparator,comparator,t,comparator,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator
InvertibleComparator -> public void setAscending(boolean ascending);1328020251;Specify the sort order: ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};specify,the,sort,order,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
InvertibleComparator -> public void setAscending(boolean ascending);1346940376;Specify the sort order: ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};specify,the,sort,order,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
InvertibleComparator -> public void setAscending(boolean ascending);1356735495;Specify the sort order: ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};specify,the,sort,order,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
InvertibleComparator -> public void setAscending(boolean ascending);1357119239;Specify the sort order: ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};specify,the,sort,order,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
InvertibleComparator -> public void setAscending(boolean ascending);1368482696;Specify the sort order: ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};specify,the,sort,order,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
InvertibleComparator -> public void setAscending(boolean ascending);1487178332;Specify the sort order: ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};specify,the,sort,order,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
InvertibleComparator -> public void setAscending(boolean ascending);1530174524;Specify the sort order: ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};specify,the,sort,order,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
InvertibleComparator -> public void setAscending(boolean ascending);1530190293;Specify the sort order: ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};specify,the,sort,order,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator, boolean ascending);1328020251;Create an InvertibleComparator that sorts based on the provided order._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate_@param ascending the sort order: ascending (true) or descending (false);public InvertibleComparator(Comparator<T> comparator, boolean ascending) {_		this.comparator = comparator__		setAscending(ascending)__	};create,an,invertible,comparator,that,sorts,based,on,the,provided,order,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate,param,ascending,the,sort,order,ascending,true,or,descending,false;public,invertible,comparator,comparator,t,comparator,boolean,ascending,this,comparator,comparator,set,ascending,ascending
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator, boolean ascending);1346940376;Create an InvertibleComparator that sorts based on the provided order._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate_@param ascending the sort order: ascending (true) or descending (false);public InvertibleComparator(Comparator<T> comparator, boolean ascending) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__		setAscending(ascending)__	};create,an,invertible,comparator,that,sorts,based,on,the,provided,order,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate,param,ascending,the,sort,order,ascending,true,or,descending,false;public,invertible,comparator,comparator,t,comparator,boolean,ascending,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator,set,ascending,ascending
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator, boolean ascending);1356735495;Create an InvertibleComparator that sorts based on the provided order._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate_@param ascending the sort order: ascending (true) or descending (false);public InvertibleComparator(Comparator<T> comparator, boolean ascending) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__		setAscending(ascending)__	};create,an,invertible,comparator,that,sorts,based,on,the,provided,order,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate,param,ascending,the,sort,order,ascending,true,or,descending,false;public,invertible,comparator,comparator,t,comparator,boolean,ascending,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator,set,ascending,ascending
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator, boolean ascending);1357119239;Create an InvertibleComparator that sorts based on the provided order._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate_@param ascending the sort order: ascending (true) or descending (false);public InvertibleComparator(Comparator<T> comparator, boolean ascending) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__		setAscending(ascending)__	};create,an,invertible,comparator,that,sorts,based,on,the,provided,order,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate,param,ascending,the,sort,order,ascending,true,or,descending,false;public,invertible,comparator,comparator,t,comparator,boolean,ascending,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator,set,ascending,ascending
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator, boolean ascending);1368482696;Create an InvertibleComparator that sorts based on the provided order._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate_@param ascending the sort order: ascending (true) or descending (false);public InvertibleComparator(Comparator<T> comparator, boolean ascending) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__		setAscending(ascending)__	};create,an,invertible,comparator,that,sorts,based,on,the,provided,order,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate,param,ascending,the,sort,order,ascending,true,or,descending,false;public,invertible,comparator,comparator,t,comparator,boolean,ascending,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator,set,ascending,ascending
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator, boolean ascending);1487178332;Create an InvertibleComparator that sorts based on the provided order._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate_@param ascending the sort order: ascending (true) or descending (false);public InvertibleComparator(Comparator<T> comparator, boolean ascending) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__		setAscending(ascending)__	};create,an,invertible,comparator,that,sorts,based,on,the,provided,order,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate,param,ascending,the,sort,order,ascending,true,or,descending,false;public,invertible,comparator,comparator,t,comparator,boolean,ascending,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator,set,ascending,ascending
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator, boolean ascending);1530174524;Create an InvertibleComparator that sorts based on the provided order._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate_@param ascending the sort order: ascending (true) or descending (false);public InvertibleComparator(Comparator<T> comparator, boolean ascending) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__		setAscending(ascending)__	};create,an,invertible,comparator,that,sorts,based,on,the,provided,order,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate,param,ascending,the,sort,order,ascending,true,or,descending,false;public,invertible,comparator,comparator,t,comparator,boolean,ascending,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator,set,ascending,ascending
InvertibleComparator -> public InvertibleComparator(Comparator<T> comparator, boolean ascending);1530190293;Create an InvertibleComparator that sorts based on the provided order._For the actual comparison, the specified Comparator will be used._@param comparator the comparator to decorate_@param ascending the sort order: ascending (true) or descending (false);public InvertibleComparator(Comparator<T> comparator, boolean ascending) {_		Assert.notNull(comparator, "Comparator must not be null")__		this.comparator = comparator__		setAscending(ascending)__	};create,an,invertible,comparator,that,sorts,based,on,the,provided,order,for,the,actual,comparison,the,specified,comparator,will,be,used,param,comparator,the,comparator,to,decorate,param,ascending,the,sort,order,ascending,true,or,descending,false;public,invertible,comparator,comparator,t,comparator,boolean,ascending,assert,not,null,comparator,comparator,must,not,be,null,this,comparator,comparator,set,ascending,ascending
