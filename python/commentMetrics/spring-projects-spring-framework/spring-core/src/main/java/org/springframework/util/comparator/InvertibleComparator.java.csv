commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the sort order: ascending (true) or descending (false).  */ ;/**  * Specify the sort order: ascending (true) or descending (false).  */ public void setAscending(boolean ascending) {     this.ascending = ascending. }
true;public;0;3;/**  * Return the sort order: ascending (true) or descending (false).  */ ;/**  * Return the sort order: ascending (true) or descending (false).  */ public boolean isAscending() {     return this.ascending. }
true;public;0;3;/**  * Invert the sort order: ascending -> descending or  * descending -> ascending.  */ ;/**  * Invert the sort order: ascending -> descending or  * descending -> ascending.  */ public void invertOrder() {     this.ascending = !this.ascending. }
false;public;2;17;;@Override public int compare(T o1, T o2) {     int result = this.comparator.compare(o1, o2).     if (result != 0) {         // Invert the order if it is a reverse sort.         if (!this.ascending) {             if (Integer.MIN_VALUE == result) {                 result = Integer.MAX_VALUE.             } else {                 result *= -1.             }         }         return result.     }     return 0. }
false;public;1;12;;@Override @SuppressWarnings("unchecked") public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof InvertibleComparator)) {         return false.     }     InvertibleComparator<T> otherComp = (InvertibleComparator<T>) other.     return (this.comparator.equals(otherComp.comparator) && this.ascending == otherComp.ascending). }
false;public;0;4;;@Override public int hashCode() {     return this.comparator.hashCode(). }
false;public;0;4;;@Override public String toString() {     return "InvertibleComparator: [" + this.comparator + "]. ascending=" + this.ascending. }
