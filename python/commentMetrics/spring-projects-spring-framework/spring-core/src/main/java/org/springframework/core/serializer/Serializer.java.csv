# id;timestamp;commentText;codeText;commentWords;codeWords
Serializer -> void serialize(T object, OutputStream outputStream) throws IOException_;1328020251;Write an object of type T to the given OutputStream._<p>Note: Implementations should not close the given OutputStream_(or any decorators of that OutputStream) but rather leave this up_to the caller._@param object the object to serialize_@param outputStream the output stream_@throws IOException in case of errors writing to the stream;void serialize(T object, OutputStream outputStream) throws IOException_;write,an,object,of,type,t,to,the,given,output,stream,p,note,implementations,should,not,close,the,given,output,stream,or,any,decorators,of,that,output,stream,but,rather,leave,this,up,to,the,caller,param,object,the,object,to,serialize,param,output,stream,the,output,stream,throws,ioexception,in,case,of,errors,writing,to,the,stream;void,serialize,t,object,output,stream,output,stream,throws,ioexception
Serializer -> void serialize(T object, OutputStream outputStream) throws IOException_;1356735495;Write an object of type T to the given OutputStream._<p>Note: Implementations should not close the given OutputStream_(or any decorators of that OutputStream) but rather leave this up_to the caller._@param object the object to serialize_@param outputStream the output stream_@throws IOException in case of errors writing to the stream;void serialize(T object, OutputStream outputStream) throws IOException_;write,an,object,of,type,t,to,the,given,output,stream,p,note,implementations,should,not,close,the,given,output,stream,or,any,decorators,of,that,output,stream,but,rather,leave,this,up,to,the,caller,param,object,the,object,to,serialize,param,output,stream,the,output,stream,throws,ioexception,in,case,of,errors,writing,to,the,stream;void,serialize,t,object,output,stream,output,stream,throws,ioexception
Serializer -> void serialize(T object, OutputStream outputStream) throws IOException_;1467808333;Write an object of type T to the given OutputStream._<p>Note: Implementations should not close the given OutputStream_(or any decorators of that OutputStream) but rather leave this up_to the caller._@param object the object to serialize_@param outputStream the output stream_@throws IOException in case of errors writing to the stream;void serialize(T object, OutputStream outputStream) throws IOException_;write,an,object,of,type,t,to,the,given,output,stream,p,note,implementations,should,not,close,the,given,output,stream,or,any,decorators,of,that,output,stream,but,rather,leave,this,up,to,the,caller,param,object,the,object,to,serialize,param,output,stream,the,output,stream,throws,ioexception,in,case,of,errors,writing,to,the,stream;void,serialize,t,object,output,stream,output,stream,throws,ioexception
Serializer -> void serialize(T object, OutputStream outputStream) throws IOException_;1530174524;Write an object of type T to the given OutputStream._<p>Note: Implementations should not close the given OutputStream_(or any decorators of that OutputStream) but rather leave this up_to the caller._@param object the object to serialize_@param outputStream the output stream_@throws IOException in case of errors writing to the stream;void serialize(T object, OutputStream outputStream) throws IOException_;write,an,object,of,type,t,to,the,given,output,stream,p,note,implementations,should,not,close,the,given,output,stream,or,any,decorators,of,that,output,stream,but,rather,leave,this,up,to,the,caller,param,object,the,object,to,serialize,param,output,stream,the,output,stream,throws,ioexception,in,case,of,errors,writing,to,the,stream;void,serialize,t,object,output,stream,output,stream,throws,ioexception
