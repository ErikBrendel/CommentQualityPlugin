commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;8;;private static Log initLogger(List<Log> loggers, Predicate<Log> predicate) {     for (Log logger : loggers) {         if (predicate.test(logger)) {             return logger.         }     }     return NO_OP_LOG. }
false;public;0;4;;@Override public boolean isFatalEnabled() {     return this.fatalLogger != NO_OP_LOG. }
false;public;0;4;;@Override public boolean isErrorEnabled() {     return this.errorLogger != NO_OP_LOG. }
false;public;0;4;;@Override public boolean isWarnEnabled() {     return this.warnLogger != NO_OP_LOG. }
false;public;0;4;;@Override public boolean isInfoEnabled() {     return this.infoLogger != NO_OP_LOG. }
false;public;0;4;;@Override public boolean isDebugEnabled() {     return this.debugLogger != NO_OP_LOG. }
false;public;0;4;;@Override public boolean isTraceEnabled() {     return this.traceLogger != NO_OP_LOG. }
false;public;1;4;;@Override public void fatal(Object message) {     this.fatalLogger.fatal(message). }
false;public;2;4;;@Override public void fatal(Object message, Throwable ex) {     this.fatalLogger.fatal(message, ex). }
false;public;1;4;;@Override public void error(Object message) {     this.errorLogger.error(message). }
false;public;2;4;;@Override public void error(Object message, Throwable ex) {     this.errorLogger.error(message, ex). }
false;public;1;4;;@Override public void warn(Object message) {     this.warnLogger.warn(message). }
false;public;2;4;;@Override public void warn(Object message, Throwable ex) {     this.warnLogger.warn(message, ex). }
false;public;1;4;;@Override public void info(Object message) {     this.infoLogger.info(message). }
false;public;2;4;;@Override public void info(Object message, Throwable ex) {     this.infoLogger.info(message, ex). }
false;public;1;4;;@Override public void debug(Object message) {     this.debugLogger.debug(message). }
false;public;2;4;;@Override public void debug(Object message, Throwable ex) {     this.debugLogger.debug(message, ex). }
false;public;1;4;;@Override public void trace(Object message) {     this.traceLogger.trace(message). }
false;public;2;4;;@Override public void trace(Object message, Throwable ex) {     this.traceLogger.trace(message, ex). }
