# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceLoader -> Resource getResource(String location)_;1328020251;Return a Resource handle for the specified resource._The handle should always be a reusable resource descriptor,_allowing for multiple {@link Resource#getInputStream()} calls._<p><ul>_<li>Must support fully qualified URLs, e.g. "file:C:/test.dat"._<li>Must support classpath pseudo-URLs, e.g. "classpath:test.dat"._<li>Should support relative file paths, e.g. "WEB-INF/test.dat"._(This will be implementation-specific, typically provided by an_ApplicationContext implementation.)_</ul>_<p>Note that a Resource handle does not imply an existing resource__you need to invoke {@link Resource#exists} to check for existence._@param location the resource location_@return a corresponding Resource handle_@see #CLASSPATH_URL_PREFIX_@see org.springframework.core.io.Resource#exists_@see org.springframework.core.io.Resource#getInputStream;Resource getResource(String location)_;return,a,resource,handle,for,the,specified,resource,the,handle,should,always,be,a,reusable,resource,descriptor,allowing,for,multiple,link,resource,get,input,stream,calls,p,ul,li,must,support,fully,qualified,urls,e,g,file,c,test,dat,li,must,support,classpath,pseudo,urls,e,g,classpath,test,dat,li,should,support,relative,file,paths,e,g,web,inf,test,dat,this,will,be,implementation,specific,typically,provided,by,an,application,context,implementation,ul,p,note,that,a,resource,handle,does,not,imply,an,existing,resource,you,need,to,invoke,link,resource,exists,to,check,for,existence,param,location,the,resource,location,return,a,corresponding,resource,handle,see,see,org,springframework,core,io,resource,exists,see,org,springframework,core,io,resource,get,input,stream;resource,get,resource,string,location
ResourceLoader -> Resource getResource(String location)_;1356735495;Return a Resource handle for the specified resource._The handle should always be a reusable resource descriptor,_allowing for multiple {@link Resource#getInputStream()} calls._<p><ul>_<li>Must support fully qualified URLs, e.g. "file:C:/test.dat"._<li>Must support classpath pseudo-URLs, e.g. "classpath:test.dat"._<li>Should support relative file paths, e.g. "WEB-INF/test.dat"._(This will be implementation-specific, typically provided by an_ApplicationContext implementation.)_</ul>_<p>Note that a Resource handle does not imply an existing resource__you need to invoke {@link Resource#exists} to check for existence._@param location the resource location_@return a corresponding Resource handle_@see #CLASSPATH_URL_PREFIX_@see org.springframework.core.io.Resource#exists_@see org.springframework.core.io.Resource#getInputStream;Resource getResource(String location)_;return,a,resource,handle,for,the,specified,resource,the,handle,should,always,be,a,reusable,resource,descriptor,allowing,for,multiple,link,resource,get,input,stream,calls,p,ul,li,must,support,fully,qualified,urls,e,g,file,c,test,dat,li,must,support,classpath,pseudo,urls,e,g,classpath,test,dat,li,should,support,relative,file,paths,e,g,web,inf,test,dat,this,will,be,implementation,specific,typically,provided,by,an,application,context,implementation,ul,p,note,that,a,resource,handle,does,not,imply,an,existing,resource,you,need,to,invoke,link,resource,exists,to,check,for,existence,param,location,the,resource,location,return,a,corresponding,resource,handle,see,see,org,springframework,core,io,resource,exists,see,org,springframework,core,io,resource,get,input,stream;resource,get,resource,string,location
ResourceLoader -> Resource getResource(String location)_;1398290095;Return a Resource handle for the specified resource._The handle should always be a reusable resource descriptor,_allowing for multiple {@link Resource#getInputStream()} calls._<p><ul>_<li>Must support fully qualified URLs, e.g. "file:C:/test.dat"._<li>Must support classpath pseudo-URLs, e.g. "classpath:test.dat"._<li>Should support relative file paths, e.g. "WEB-INF/test.dat"._(This will be implementation-specific, typically provided by an_ApplicationContext implementation.)_</ul>_<p>Note that a Resource handle does not imply an existing resource__you need to invoke {@link Resource#exists} to check for existence._@param location the resource location_@return a corresponding Resource handle_@see #CLASSPATH_URL_PREFIX_@see org.springframework.core.io.Resource#exists_@see org.springframework.core.io.Resource#getInputStream;Resource getResource(String location)_;return,a,resource,handle,for,the,specified,resource,the,handle,should,always,be,a,reusable,resource,descriptor,allowing,for,multiple,link,resource,get,input,stream,calls,p,ul,li,must,support,fully,qualified,urls,e,g,file,c,test,dat,li,must,support,classpath,pseudo,urls,e,g,classpath,test,dat,li,should,support,relative,file,paths,e,g,web,inf,test,dat,this,will,be,implementation,specific,typically,provided,by,an,application,context,implementation,ul,p,note,that,a,resource,handle,does,not,imply,an,existing,resource,you,need,to,invoke,link,resource,exists,to,check,for,existence,param,location,the,resource,location,return,a,corresponding,resource,handle,see,see,org,springframework,core,io,resource,exists,see,org,springframework,core,io,resource,get,input,stream;resource,get,resource,string,location
ResourceLoader -> Resource getResource(String location)_;1474896421;Return a Resource handle for the specified resource location._<p>The handle should always be a reusable resource descriptor,_allowing for multiple {@link Resource#getInputStream()} calls._<p><ul>_<li>Must support fully qualified URLs, e.g. "file:C:/test.dat"._<li>Must support classpath pseudo-URLs, e.g. "classpath:test.dat"._<li>Should support relative file paths, e.g. "WEB-INF/test.dat"._(This will be implementation-specific, typically provided by an_ApplicationContext implementation.)_</ul>_<p>Note that a Resource handle does not imply an existing resource__you need to invoke {@link Resource#exists} to check for existence._@param location the resource location_@return a corresponding Resource handle (never {@code null})_@see #CLASSPATH_URL_PREFIX_@see Resource#exists()_@see Resource#getInputStream();Resource getResource(String location)_;return,a,resource,handle,for,the,specified,resource,location,p,the,handle,should,always,be,a,reusable,resource,descriptor,allowing,for,multiple,link,resource,get,input,stream,calls,p,ul,li,must,support,fully,qualified,urls,e,g,file,c,test,dat,li,must,support,classpath,pseudo,urls,e,g,classpath,test,dat,li,should,support,relative,file,paths,e,g,web,inf,test,dat,this,will,be,implementation,specific,typically,provided,by,an,application,context,implementation,ul,p,note,that,a,resource,handle,does,not,imply,an,existing,resource,you,need,to,invoke,link,resource,exists,to,check,for,existence,param,location,the,resource,location,return,a,corresponding,resource,handle,never,code,null,see,see,resource,exists,see,resource,get,input,stream;resource,get,resource,string,location
ResourceLoader -> Resource getResource(String location)_;1495868221;Return a Resource handle for the specified resource location._<p>The handle should always be a reusable resource descriptor,_allowing for multiple {@link Resource#getInputStream()} calls._<p><ul>_<li>Must support fully qualified URLs, e.g. "file:C:/test.dat"._<li>Must support classpath pseudo-URLs, e.g. "classpath:test.dat"._<li>Should support relative file paths, e.g. "WEB-INF/test.dat"._(This will be implementation-specific, typically provided by an_ApplicationContext implementation.)_</ul>_<p>Note that a Resource handle does not imply an existing resource__you need to invoke {@link Resource#exists} to check for existence._@param location the resource location_@return a corresponding Resource handle (never {@code null})_@see #CLASSPATH_URL_PREFIX_@see Resource#exists()_@see Resource#getInputStream();Resource getResource(String location)_;return,a,resource,handle,for,the,specified,resource,location,p,the,handle,should,always,be,a,reusable,resource,descriptor,allowing,for,multiple,link,resource,get,input,stream,calls,p,ul,li,must,support,fully,qualified,urls,e,g,file,c,test,dat,li,must,support,classpath,pseudo,urls,e,g,classpath,test,dat,li,should,support,relative,file,paths,e,g,web,inf,test,dat,this,will,be,implementation,specific,typically,provided,by,an,application,context,implementation,ul,p,note,that,a,resource,handle,does,not,imply,an,existing,resource,you,need,to,invoke,link,resource,exists,to,check,for,existence,param,location,the,resource,location,return,a,corresponding,resource,handle,never,code,null,see,see,resource,exists,see,resource,get,input,stream;resource,get,resource,string,location
ResourceLoader -> Resource getResource(String location)_;1496837955;Return a Resource handle for the specified resource location._<p>The handle should always be a reusable resource descriptor,_allowing for multiple {@link Resource#getInputStream()} calls._<p><ul>_<li>Must support fully qualified URLs, e.g. "file:C:/test.dat"._<li>Must support classpath pseudo-URLs, e.g. "classpath:test.dat"._<li>Should support relative file paths, e.g. "WEB-INF/test.dat"._(This will be implementation-specific, typically provided by an_ApplicationContext implementation.)_</ul>_<p>Note that a Resource handle does not imply an existing resource__you need to invoke {@link Resource#exists} to check for existence._@param location the resource location_@return a corresponding Resource handle (never {@code null})_@see #CLASSPATH_URL_PREFIX_@see Resource#exists()_@see Resource#getInputStream();Resource getResource(String location)_;return,a,resource,handle,for,the,specified,resource,location,p,the,handle,should,always,be,a,reusable,resource,descriptor,allowing,for,multiple,link,resource,get,input,stream,calls,p,ul,li,must,support,fully,qualified,urls,e,g,file,c,test,dat,li,must,support,classpath,pseudo,urls,e,g,classpath,test,dat,li,should,support,relative,file,paths,e,g,web,inf,test,dat,this,will,be,implementation,specific,typically,provided,by,an,application,context,implementation,ul,p,note,that,a,resource,handle,does,not,imply,an,existing,resource,you,need,to,invoke,link,resource,exists,to,check,for,existence,param,location,the,resource,location,return,a,corresponding,resource,handle,never,code,null,see,see,resource,exists,see,resource,get,input,stream;resource,get,resource,string,location
ResourceLoader -> Resource getResource(String location)_;1527623466;Return a Resource handle for the specified resource location._<p>The handle should always be a reusable resource descriptor,_allowing for multiple {@link Resource#getInputStream()} calls._<p><ul>_<li>Must support fully qualified URLs, e.g. "file:C:/test.dat"._<li>Must support classpath pseudo-URLs, e.g. "classpath:test.dat"._<li>Should support relative file paths, e.g. "WEB-INF/test.dat"._(This will be implementation-specific, typically provided by an_ApplicationContext implementation.)_</ul>_<p>Note that a Resource handle does not imply an existing resource__you need to invoke {@link Resource#exists} to check for existence._@param location the resource location_@return a corresponding Resource handle (never {@code null})_@see #CLASSPATH_URL_PREFIX_@see Resource#exists()_@see Resource#getInputStream();Resource getResource(String location)_;return,a,resource,handle,for,the,specified,resource,location,p,the,handle,should,always,be,a,reusable,resource,descriptor,allowing,for,multiple,link,resource,get,input,stream,calls,p,ul,li,must,support,fully,qualified,urls,e,g,file,c,test,dat,li,must,support,classpath,pseudo,urls,e,g,classpath,test,dat,li,should,support,relative,file,paths,e,g,web,inf,test,dat,this,will,be,implementation,specific,typically,provided,by,an,application,context,implementation,ul,p,note,that,a,resource,handle,does,not,imply,an,existing,resource,you,need,to,invoke,link,resource,exists,to,check,for,existence,param,location,the,resource,location,return,a,corresponding,resource,handle,never,code,null,see,see,resource,exists,see,resource,get,input,stream;resource,get,resource,string,location
ResourceLoader -> Resource getResource(String location)_;1530174524;Return a Resource handle for the specified resource location._<p>The handle should always be a reusable resource descriptor,_allowing for multiple {@link Resource#getInputStream()} calls._<p><ul>_<li>Must support fully qualified URLs, e.g. "file:C:/test.dat"._<li>Must support classpath pseudo-URLs, e.g. "classpath:test.dat"._<li>Should support relative file paths, e.g. "WEB-INF/test.dat"._(This will be implementation-specific, typically provided by an_ApplicationContext implementation.)_</ul>_<p>Note that a Resource handle does not imply an existing resource__you need to invoke {@link Resource#exists} to check for existence._@param location the resource location_@return a corresponding Resource handle (never {@code null})_@see #CLASSPATH_URL_PREFIX_@see Resource#exists()_@see Resource#getInputStream();Resource getResource(String location)_;return,a,resource,handle,for,the,specified,resource,location,p,the,handle,should,always,be,a,reusable,resource,descriptor,allowing,for,multiple,link,resource,get,input,stream,calls,p,ul,li,must,support,fully,qualified,urls,e,g,file,c,test,dat,li,must,support,classpath,pseudo,urls,e,g,classpath,test,dat,li,should,support,relative,file,paths,e,g,web,inf,test,dat,this,will,be,implementation,specific,typically,provided,by,an,application,context,implementation,ul,p,note,that,a,resource,handle,does,not,imply,an,existing,resource,you,need,to,invoke,link,resource,exists,to,check,for,existence,param,location,the,resource,location,return,a,corresponding,resource,handle,never,code,null,see,see,resource,exists,see,resource,get,input,stream;resource,get,resource,string,location
ResourceLoader -> ClassLoader getClassLoader()_;1328020251;Expose the ClassLoader used by this ResourceLoader._<p>Clients which need to access the ClassLoader directly can do so_in a uniform manner with the ResourceLoader, rather than relying_on the thread context ClassLoader._@return the ClassLoader (never <code>null</code>);ClassLoader getClassLoader()_;expose,the,class,loader,used,by,this,resource,loader,p,clients,which,need,to,access,the,class,loader,directly,can,do,so,in,a,uniform,manner,with,the,resource,loader,rather,than,relying,on,the,thread,context,class,loader,return,the,class,loader,never,code,null,code;class,loader,get,class,loader
ResourceLoader -> ClassLoader getClassLoader()_;1356735495;Expose the ClassLoader used by this ResourceLoader._<p>Clients which need to access the ClassLoader directly can do so_in a uniform manner with the ResourceLoader, rather than relying_on the thread context ClassLoader._@return the ClassLoader (never {@code null});ClassLoader getClassLoader()_;expose,the,class,loader,used,by,this,resource,loader,p,clients,which,need,to,access,the,class,loader,directly,can,do,so,in,a,uniform,manner,with,the,resource,loader,rather,than,relying,on,the,thread,context,class,loader,return,the,class,loader,never,code,null;class,loader,get,class,loader
ResourceLoader -> ClassLoader getClassLoader()_;1398290095;Expose the ClassLoader used by this ResourceLoader._<p>Clients which need to access the ClassLoader directly can do so_in a uniform manner with the ResourceLoader, rather than relying_on the thread context ClassLoader._@return the ClassLoader (only {@code null} if even the system_ClassLoader isn't accessible)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();ClassLoader getClassLoader()_;expose,the,class,loader,used,by,this,resource,loader,p,clients,which,need,to,access,the,class,loader,directly,can,do,so,in,a,uniform,manner,with,the,resource,loader,rather,than,relying,on,the,thread,context,class,loader,return,the,class,loader,only,code,null,if,even,the,system,class,loader,isn,t,accessible,see,org,springframework,util,class,utils,get,default,class,loader;class,loader,get,class,loader
ResourceLoader -> ClassLoader getClassLoader()_;1474896421;Expose the ClassLoader used by this ResourceLoader._<p>Clients which need to access the ClassLoader directly can do so_in a uniform manner with the ResourceLoader, rather than relying_on the thread context ClassLoader._@return the ClassLoader (only {@code null} if even the system_ClassLoader isn't accessible)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();ClassLoader getClassLoader()_;expose,the,class,loader,used,by,this,resource,loader,p,clients,which,need,to,access,the,class,loader,directly,can,do,so,in,a,uniform,manner,with,the,resource,loader,rather,than,relying,on,the,thread,context,class,loader,return,the,class,loader,only,code,null,if,even,the,system,class,loader,isn,t,accessible,see,org,springframework,util,class,utils,get,default,class,loader;class,loader,get,class,loader
ResourceLoader -> @Nullable 	ClassLoader getClassLoader()_;1495868221;Expose the ClassLoader used by this ResourceLoader._<p>Clients which need to access the ClassLoader directly can do so_in a uniform manner with the ResourceLoader, rather than relying_on the thread context ClassLoader._@return the ClassLoader (only {@code null} if even the system_ClassLoader isn't accessible)_@see org.springframework.util.ClassUtils#getDefaultClassLoader();@Nullable_	ClassLoader getClassLoader()_;expose,the,class,loader,used,by,this,resource,loader,p,clients,which,need,to,access,the,class,loader,directly,can,do,so,in,a,uniform,manner,with,the,resource,loader,rather,than,relying,on,the,thread,context,class,loader,return,the,class,loader,only,code,null,if,even,the,system,class,loader,isn,t,accessible,see,org,springframework,util,class,utils,get,default,class,loader;nullable,class,loader,get,class,loader
ResourceLoader -> @Nullable 	ClassLoader getClassLoader()_;1496837955;Expose the ClassLoader used by this ResourceLoader._<p>Clients which need to access the ClassLoader directly can do so_in a uniform manner with the ResourceLoader, rather than relying_on the thread context ClassLoader._@return the ClassLoader_@see org.springframework.util.ClassUtils#getDefaultClassLoader();@Nullable_	ClassLoader getClassLoader()_;expose,the,class,loader,used,by,this,resource,loader,p,clients,which,need,to,access,the,class,loader,directly,can,do,so,in,a,uniform,manner,with,the,resource,loader,rather,than,relying,on,the,thread,context,class,loader,return,the,class,loader,see,org,springframework,util,class,utils,get,default,class,loader;nullable,class,loader,get,class,loader
ResourceLoader -> @Nullable 	ClassLoader getClassLoader()_;1527623466;Expose the ClassLoader used by this ResourceLoader._<p>Clients which need to access the ClassLoader directly can do so_in a uniform manner with the ResourceLoader, rather than relying_on the thread context ClassLoader._@return the ClassLoader_(only {@code null} if even the system ClassLoader isn't accessible)_@see org.springframework.util.ClassUtils#getDefaultClassLoader()_@see org.springframework.util.ClassUtils#forName(String, ClassLoader);@Nullable_	ClassLoader getClassLoader()_;expose,the,class,loader,used,by,this,resource,loader,p,clients,which,need,to,access,the,class,loader,directly,can,do,so,in,a,uniform,manner,with,the,resource,loader,rather,than,relying,on,the,thread,context,class,loader,return,the,class,loader,only,code,null,if,even,the,system,class,loader,isn,t,accessible,see,org,springframework,util,class,utils,get,default,class,loader,see,org,springframework,util,class,utils,for,name,string,class,loader;nullable,class,loader,get,class,loader
ResourceLoader -> @Nullable 	ClassLoader getClassLoader()_;1530174524;Expose the ClassLoader used by this ResourceLoader._<p>Clients which need to access the ClassLoader directly can do so_in a uniform manner with the ResourceLoader, rather than relying_on the thread context ClassLoader._@return the ClassLoader_(only {@code null} if even the system ClassLoader isn't accessible)_@see org.springframework.util.ClassUtils#getDefaultClassLoader()_@see org.springframework.util.ClassUtils#forName(String, ClassLoader);@Nullable_	ClassLoader getClassLoader()_;expose,the,class,loader,used,by,this,resource,loader,p,clients,which,need,to,access,the,class,loader,directly,can,do,so,in,a,uniform,manner,with,the,resource,loader,rather,than,relying,on,the,thread,context,class,loader,return,the,class,loader,only,code,null,if,even,the,system,class,loader,isn,t,accessible,see,org,springframework,util,class,utils,get,default,class,loader,see,org,springframework,util,class,utils,for,name,string,class,loader;nullable,class,loader,get,class,loader
