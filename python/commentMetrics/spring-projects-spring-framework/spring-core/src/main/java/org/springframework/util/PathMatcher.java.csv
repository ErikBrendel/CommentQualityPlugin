# id;timestamp;commentText;codeText;commentWords;codeWords
PathMatcher -> Comparator<String> getPatternComparator(String path)_;1328020251;Given a full path, returns a {@link Comparator} suitable for sorting patterns_in order of explicitness for that path._<p>The full algorithm used depends on the underlying implementation, but generally,_the returned <code>Comparator</code> will_{@linkplain java.util.Collections#sort(java.util.List, java.util.Comparator) sort}_a list so that more specific patterns come before generic patterns._@param path the full path to use for comparison_@return a comparator capable of sorting patterns in order of explicitness;Comparator<String> getPatternComparator(String path)_;given,a,full,path,returns,a,link,comparator,suitable,for,sorting,patterns,in,order,of,explicitness,for,that,path,p,the,full,algorithm,used,depends,on,the,underlying,implementation,but,generally,the,returned,code,comparator,code,will,linkplain,java,util,collections,sort,java,util,list,java,util,comparator,sort,a,list,so,that,more,specific,patterns,come,before,generic,patterns,param,path,the,full,path,to,use,for,comparison,return,a,comparator,capable,of,sorting,patterns,in,order,of,explicitness;comparator,string,get,pattern,comparator,string,path
PathMatcher -> Comparator<String> getPatternComparator(String path)_;1356735495;Given a full path, returns a {@link Comparator} suitable for sorting patterns_in order of explicitness for that path._<p>The full algorithm used depends on the underlying implementation, but generally,_the returned {@code Comparator} will_{@linkplain java.util.Collections#sort(java.util.List, java.util.Comparator) sort}_a list so that more specific patterns come before generic patterns._@param path the full path to use for comparison_@return a comparator capable of sorting patterns in order of explicitness;Comparator<String> getPatternComparator(String path)_;given,a,full,path,returns,a,link,comparator,suitable,for,sorting,patterns,in,order,of,explicitness,for,that,path,p,the,full,algorithm,used,depends,on,the,underlying,implementation,but,generally,the,returned,code,comparator,will,linkplain,java,util,collections,sort,java,util,list,java,util,comparator,sort,a,list,so,that,more,specific,patterns,come,before,generic,patterns,param,path,the,full,path,to,use,for,comparison,return,a,comparator,capable,of,sorting,patterns,in,order,of,explicitness;comparator,string,get,pattern,comparator,string,path
PathMatcher -> Comparator<String> getPatternComparator(String path)_;1468613531;Given a full path, returns a {@link Comparator} suitable for sorting patterns_in order of explicitness for that path._<p>The full algorithm used depends on the underlying implementation, but generally,_the returned {@code Comparator} will_{@linkplain java.util.Collections#sort(java.util.List, java.util.Comparator) sort}_a list so that more specific patterns come before generic patterns._@param path the full path to use for comparison_@return a comparator capable of sorting patterns in order of explicitness;Comparator<String> getPatternComparator(String path)_;given,a,full,path,returns,a,link,comparator,suitable,for,sorting,patterns,in,order,of,explicitness,for,that,path,p,the,full,algorithm,used,depends,on,the,underlying,implementation,but,generally,the,returned,code,comparator,will,linkplain,java,util,collections,sort,java,util,list,java,util,comparator,sort,a,list,so,that,more,specific,patterns,come,before,generic,patterns,param,path,the,full,path,to,use,for,comparison,return,a,comparator,capable,of,sorting,patterns,in,order,of,explicitness;comparator,string,get,pattern,comparator,string,path
PathMatcher -> Comparator<String> getPatternComparator(String path)_;1518772998;Given a full path, returns a {@link Comparator} suitable for sorting patterns_in order of explicitness for that path._<p>The full algorithm used depends on the underlying implementation,_but generally, the returned {@code Comparator} will_{@linkplain java.util.List#sort(java.util.Comparator) sort}_a list so that more specific patterns come before generic patterns._@param path the full path to use for comparison_@return a comparator capable of sorting patterns in order of explicitness;Comparator<String> getPatternComparator(String path)_;given,a,full,path,returns,a,link,comparator,suitable,for,sorting,patterns,in,order,of,explicitness,for,that,path,p,the,full,algorithm,used,depends,on,the,underlying,implementation,but,generally,the,returned,code,comparator,will,linkplain,java,util,list,sort,java,util,comparator,sort,a,list,so,that,more,specific,patterns,come,before,generic,patterns,param,path,the,full,path,to,use,for,comparison,return,a,comparator,capable,of,sorting,patterns,in,order,of,explicitness;comparator,string,get,pattern,comparator,string,path
PathMatcher -> String combine(String pattern1, String pattern2)_;1328020251;Combines two patterns into a new pattern that is returned._<p>The full algorithm used for combining the two pattern depends on the underlying implementation._@param pattern1 the first pattern_@param pattern2 the second pattern_@return the combination of the two patterns_@throws IllegalArgumentException when the two patterns cannot be combined;String combine(String pattern1, String pattern2)_;combines,two,patterns,into,a,new,pattern,that,is,returned,p,the,full,algorithm,used,for,combining,the,two,pattern,depends,on,the,underlying,implementation,param,pattern1,the,first,pattern,param,pattern2,the,second,pattern,return,the,combination,of,the,two,patterns,throws,illegal,argument,exception,when,the,two,patterns,cannot,be,combined;string,combine,string,pattern1,string,pattern2
PathMatcher -> String combine(String pattern1, String pattern2)_;1356735495;Combines two patterns into a new pattern that is returned._<p>The full algorithm used for combining the two pattern depends on the underlying implementation._@param pattern1 the first pattern_@param pattern2 the second pattern_@return the combination of the two patterns_@throws IllegalArgumentException when the two patterns cannot be combined;String combine(String pattern1, String pattern2)_;combines,two,patterns,into,a,new,pattern,that,is,returned,p,the,full,algorithm,used,for,combining,the,two,pattern,depends,on,the,underlying,implementation,param,pattern1,the,first,pattern,param,pattern2,the,second,pattern,return,the,combination,of,the,two,patterns,throws,illegal,argument,exception,when,the,two,patterns,cannot,be,combined;string,combine,string,pattern1,string,pattern2
PathMatcher -> String combine(String pattern1, String pattern2)_;1468613531;Combines two patterns into a new pattern that is returned._<p>The full algorithm used for combining the two pattern depends on the underlying implementation._@param pattern1 the first pattern_@param pattern2 the second pattern_@return the combination of the two patterns_@throws IllegalArgumentException when the two patterns cannot be combined;String combine(String pattern1, String pattern2)_;combines,two,patterns,into,a,new,pattern,that,is,returned,p,the,full,algorithm,used,for,combining,the,two,pattern,depends,on,the,underlying,implementation,param,pattern1,the,first,pattern,param,pattern2,the,second,pattern,return,the,combination,of,the,two,patterns,throws,illegal,argument,exception,when,the,two,patterns,cannot,be,combined;string,combine,string,pattern1,string,pattern2
PathMatcher -> String combine(String pattern1, String pattern2)_;1518772998;Combines two patterns into a new pattern that is returned._<p>The full algorithm used for combining the two pattern depends on the underlying implementation._@param pattern1 the first pattern_@param pattern2 the second pattern_@return the combination of the two patterns_@throws IllegalArgumentException when the two patterns cannot be combined;String combine(String pattern1, String pattern2)_;combines,two,patterns,into,a,new,pattern,that,is,returned,p,the,full,algorithm,used,for,combining,the,two,pattern,depends,on,the,underlying,implementation,param,pattern1,the,first,pattern,param,pattern2,the,second,pattern,return,the,combination,of,the,two,patterns,throws,illegal,argument,exception,when,the,two,patterns,cannot,be,combined;string,combine,string,pattern1,string,pattern2
PathMatcher -> boolean matchStart(String pattern, String path)_;1328020251;Match the given <code>path</code> against the corresponding part of the given_<code>pattern</code>, according to this PathMatcher's matching strategy._<p>Determines whether the pattern at least matches as far as the given base_path goes, assuming that a full path may then match as well._@param pattern the pattern to match against_@param path the path String to test_@return <code>true</code> if the supplied <code>path</code> matched,_<code>false</code> if it didn't;boolean matchStart(String pattern, String path)_;match,the,given,code,path,code,against,the,corresponding,part,of,the,given,code,pattern,code,according,to,this,path,matcher,s,matching,strategy,p,determines,whether,the,pattern,at,least,matches,as,far,as,the,given,base,path,goes,assuming,that,a,full,path,may,then,match,as,well,param,pattern,the,pattern,to,match,against,param,path,the,path,string,to,test,return,code,true,code,if,the,supplied,code,path,code,matched,code,false,code,if,it,didn,t;boolean,match,start,string,pattern,string,path
PathMatcher -> boolean matchStart(String pattern, String path)_;1356735495;Match the given {@code path} against the corresponding part of the given_{@code pattern}, according to this PathMatcher's matching strategy._<p>Determines whether the pattern at least matches as far as the given base_path goes, assuming that a full path may then match as well._@param pattern the pattern to match against_@param path the path String to test_@return {@code true} if the supplied {@code path} matched,_{@code false} if it didn't;boolean matchStart(String pattern, String path)_;match,the,given,code,path,against,the,corresponding,part,of,the,given,code,pattern,according,to,this,path,matcher,s,matching,strategy,p,determines,whether,the,pattern,at,least,matches,as,far,as,the,given,base,path,goes,assuming,that,a,full,path,may,then,match,as,well,param,pattern,the,pattern,to,match,against,param,path,the,path,string,to,test,return,code,true,if,the,supplied,code,path,matched,code,false,if,it,didn,t;boolean,match,start,string,pattern,string,path
PathMatcher -> boolean matchStart(String pattern, String path)_;1468613531;Match the given {@code path} against the corresponding part of the given_{@code pattern}, according to this PathMatcher's matching strategy._<p>Determines whether the pattern at least matches as far as the given base_path goes, assuming that a full path may then match as well._@param pattern the pattern to match against_@param path the path String to test_@return {@code true} if the supplied {@code path} matched,_{@code false} if it didn't;boolean matchStart(String pattern, String path)_;match,the,given,code,path,against,the,corresponding,part,of,the,given,code,pattern,according,to,this,path,matcher,s,matching,strategy,p,determines,whether,the,pattern,at,least,matches,as,far,as,the,given,base,path,goes,assuming,that,a,full,path,may,then,match,as,well,param,pattern,the,pattern,to,match,against,param,path,the,path,string,to,test,return,code,true,if,the,supplied,code,path,matched,code,false,if,it,didn,t;boolean,match,start,string,pattern,string,path
PathMatcher -> boolean matchStart(String pattern, String path)_;1518772998;Match the given {@code path} against the corresponding part of the given_{@code pattern}, according to this PathMatcher's matching strategy._<p>Determines whether the pattern at least matches as far as the given base_path goes, assuming that a full path may then match as well._@param pattern the pattern to match against_@param path the path String to test_@return {@code true} if the supplied {@code path} matched,_{@code false} if it didn't;boolean matchStart(String pattern, String path)_;match,the,given,code,path,against,the,corresponding,part,of,the,given,code,pattern,according,to,this,path,matcher,s,matching,strategy,p,determines,whether,the,pattern,at,least,matches,as,far,as,the,given,base,path,goes,assuming,that,a,full,path,may,then,match,as,well,param,pattern,the,pattern,to,match,against,param,path,the,path,string,to,test,return,code,true,if,the,supplied,code,path,matched,code,false,if,it,didn,t;boolean,match,start,string,pattern,string,path
PathMatcher -> boolean match(String pattern, String path)_;1328020251;Match the given <code>path</code> against the given <code>pattern</code>,_according to this PathMatcher's matching strategy._@param pattern the pattern to match against_@param path the path String to test_@return <code>true</code> if the supplied <code>path</code> matched,_<code>false</code> if it didn't;boolean match(String pattern, String path)_;match,the,given,code,path,code,against,the,given,code,pattern,code,according,to,this,path,matcher,s,matching,strategy,param,pattern,the,pattern,to,match,against,param,path,the,path,string,to,test,return,code,true,code,if,the,supplied,code,path,code,matched,code,false,code,if,it,didn,t;boolean,match,string,pattern,string,path
PathMatcher -> boolean match(String pattern, String path)_;1356735495;Match the given {@code path} against the given {@code pattern},_according to this PathMatcher's matching strategy._@param pattern the pattern to match against_@param path the path String to test_@return {@code true} if the supplied {@code path} matched,_{@code false} if it didn't;boolean match(String pattern, String path)_;match,the,given,code,path,against,the,given,code,pattern,according,to,this,path,matcher,s,matching,strategy,param,pattern,the,pattern,to,match,against,param,path,the,path,string,to,test,return,code,true,if,the,supplied,code,path,matched,code,false,if,it,didn,t;boolean,match,string,pattern,string,path
PathMatcher -> boolean match(String pattern, String path)_;1468613531;Match the given {@code path} against the given {@code pattern},_according to this PathMatcher's matching strategy._@param pattern the pattern to match against_@param path the path String to test_@return {@code true} if the supplied {@code path} matched,_{@code false} if it didn't;boolean match(String pattern, String path)_;match,the,given,code,path,against,the,given,code,pattern,according,to,this,path,matcher,s,matching,strategy,param,pattern,the,pattern,to,match,against,param,path,the,path,string,to,test,return,code,true,if,the,supplied,code,path,matched,code,false,if,it,didn,t;boolean,match,string,pattern,string,path
PathMatcher -> boolean match(String pattern, String path)_;1518772998;Match the given {@code path} against the given {@code pattern},_according to this PathMatcher's matching strategy._@param pattern the pattern to match against_@param path the path String to test_@return {@code true} if the supplied {@code path} matched,_{@code false} if it didn't;boolean match(String pattern, String path)_;match,the,given,code,path,against,the,given,code,pattern,according,to,this,path,matcher,s,matching,strategy,param,pattern,the,pattern,to,match,against,param,path,the,path,string,to,test,return,code,true,if,the,supplied,code,path,matched,code,false,if,it,didn,t;boolean,match,string,pattern,string,path
PathMatcher -> boolean isPattern(String path)_;1328020251;Does the given <code>path</code> represent a pattern that can be matched_by an implementation of this interface?_<p>If the return value is <code>false</code>, then the {@link #match}_method does not have to be used because direct equality comparisons_on the static path Strings will lead to the same result._@param path the path String to check_@return <code>true</code> if the given <code>path</code> represents a pattern;boolean isPattern(String path)_;does,the,given,code,path,code,represent,a,pattern,that,can,be,matched,by,an,implementation,of,this,interface,p,if,the,return,value,is,code,false,code,then,the,link,match,method,does,not,have,to,be,used,because,direct,equality,comparisons,on,the,static,path,strings,will,lead,to,the,same,result,param,path,the,path,string,to,check,return,code,true,code,if,the,given,code,path,code,represents,a,pattern;boolean,is,pattern,string,path
PathMatcher -> boolean isPattern(String path)_;1356735495;Does the given {@code path} represent a pattern that can be matched_by an implementation of this interface?_<p>If the return value is {@code false}, then the {@link #match}_method does not have to be used because direct equality comparisons_on the static path Strings will lead to the same result._@param path the path String to check_@return {@code true} if the given {@code path} represents a pattern;boolean isPattern(String path)_;does,the,given,code,path,represent,a,pattern,that,can,be,matched,by,an,implementation,of,this,interface,p,if,the,return,value,is,code,false,then,the,link,match,method,does,not,have,to,be,used,because,direct,equality,comparisons,on,the,static,path,strings,will,lead,to,the,same,result,param,path,the,path,string,to,check,return,code,true,if,the,given,code,path,represents,a,pattern;boolean,is,pattern,string,path
PathMatcher -> boolean isPattern(String path)_;1468613531;Does the given {@code path} represent a pattern that can be matched_by an implementation of this interface?_<p>If the return value is {@code false}, then the {@link #match}_method does not have to be used because direct equality comparisons_on the static path Strings will lead to the same result._@param path the path String to check_@return {@code true} if the given {@code path} represents a pattern;boolean isPattern(String path)_;does,the,given,code,path,represent,a,pattern,that,can,be,matched,by,an,implementation,of,this,interface,p,if,the,return,value,is,code,false,then,the,link,match,method,does,not,have,to,be,used,because,direct,equality,comparisons,on,the,static,path,strings,will,lead,to,the,same,result,param,path,the,path,string,to,check,return,code,true,if,the,given,code,path,represents,a,pattern;boolean,is,pattern,string,path
PathMatcher -> boolean isPattern(String path)_;1518772998;Does the given {@code path} represent a pattern that can be matched_by an implementation of this interface?_<p>If the return value is {@code false}, then the {@link #match}_method does not have to be used because direct equality comparisons_on the static path Strings will lead to the same result._@param path the path String to check_@return {@code true} if the given {@code path} represents a pattern;boolean isPattern(String path)_;does,the,given,code,path,represent,a,pattern,that,can,be,matched,by,an,implementation,of,this,interface,p,if,the,return,value,is,code,false,then,the,link,match,method,does,not,have,to,be,used,because,direct,equality,comparisons,on,the,static,path,strings,will,lead,to,the,same,result,param,path,the,path,string,to,check,return,code,true,if,the,given,code,path,represents,a,pattern;boolean,is,pattern,string,path
PathMatcher -> String extractPathWithinPattern(String pattern, String path)_;1328020251;Given a pattern and a full path, determine the pattern-mapped part._<p>This method is supposed to find out which part of the path is matched_dynamically through an actual pattern, that is, it strips off a statically_defined leading path from the given full path, returning only the actually_pattern-matched part of the path._<p>For example: For "myroot/*.html" as pattern and "myroot/myfile.html"_as full path, this method should return "myfile.html". The detailed_determination rules are specified to this PathMatcher's matching strategy._<p>A simple implementation may return the given full path as-is in case_of an actual pattern, and the empty String in case of the pattern not_containing any dynamic parts (i.e. the <code>pattern</code> parameter being_a static path that wouldn't qualify as an actual {@link #isPattern pattern})._A sophisticated implementation will differentiate between the static parts_and the dynamic parts of the given path pattern._@param pattern the path pattern_@param path the full path to introspect_@return the pattern-mapped part of the given <code>path</code>_(never <code>null</code>);String extractPathWithinPattern(String pattern, String path)_;given,a,pattern,and,a,full,path,determine,the,pattern,mapped,part,p,this,method,is,supposed,to,find,out,which,part,of,the,path,is,matched,dynamically,through,an,actual,pattern,that,is,it,strips,off,a,statically,defined,leading,path,from,the,given,full,path,returning,only,the,actually,pattern,matched,part,of,the,path,p,for,example,for,myroot,html,as,pattern,and,myroot,myfile,html,as,full,path,this,method,should,return,myfile,html,the,detailed,determination,rules,are,specified,to,this,path,matcher,s,matching,strategy,p,a,simple,implementation,may,return,the,given,full,path,as,is,in,case,of,an,actual,pattern,and,the,empty,string,in,case,of,the,pattern,not,containing,any,dynamic,parts,i,e,the,code,pattern,code,parameter,being,a,static,path,that,wouldn,t,qualify,as,an,actual,link,is,pattern,pattern,a,sophisticated,implementation,will,differentiate,between,the,static,parts,and,the,dynamic,parts,of,the,given,path,pattern,param,pattern,the,path,pattern,param,path,the,full,path,to,introspect,return,the,pattern,mapped,part,of,the,given,code,path,code,never,code,null,code;string,extract,path,within,pattern,string,pattern,string,path
PathMatcher -> String extractPathWithinPattern(String pattern, String path)_;1356735495;Given a pattern and a full path, determine the pattern-mapped part._<p>This method is supposed to find out which part of the path is matched_dynamically through an actual pattern, that is, it strips off a statically_defined leading path from the given full path, returning only the actually_pattern-matched part of the path._<p>For example: For "myroot/*.html" as pattern and "myroot/myfile.html"_as full path, this method should return "myfile.html". The detailed_determination rules are specified to this PathMatcher's matching strategy._<p>A simple implementation may return the given full path as-is in case_of an actual pattern, and the empty String in case of the pattern not_containing any dynamic parts (i.e. the {@code pattern} parameter being_a static path that wouldn't qualify as an actual {@link #isPattern pattern})._A sophisticated implementation will differentiate between the static parts_and the dynamic parts of the given path pattern._@param pattern the path pattern_@param path the full path to introspect_@return the pattern-mapped part of the given {@code path}_(never {@code null});String extractPathWithinPattern(String pattern, String path)_;given,a,pattern,and,a,full,path,determine,the,pattern,mapped,part,p,this,method,is,supposed,to,find,out,which,part,of,the,path,is,matched,dynamically,through,an,actual,pattern,that,is,it,strips,off,a,statically,defined,leading,path,from,the,given,full,path,returning,only,the,actually,pattern,matched,part,of,the,path,p,for,example,for,myroot,html,as,pattern,and,myroot,myfile,html,as,full,path,this,method,should,return,myfile,html,the,detailed,determination,rules,are,specified,to,this,path,matcher,s,matching,strategy,p,a,simple,implementation,may,return,the,given,full,path,as,is,in,case,of,an,actual,pattern,and,the,empty,string,in,case,of,the,pattern,not,containing,any,dynamic,parts,i,e,the,code,pattern,parameter,being,a,static,path,that,wouldn,t,qualify,as,an,actual,link,is,pattern,pattern,a,sophisticated,implementation,will,differentiate,between,the,static,parts,and,the,dynamic,parts,of,the,given,path,pattern,param,pattern,the,path,pattern,param,path,the,full,path,to,introspect,return,the,pattern,mapped,part,of,the,given,code,path,never,code,null;string,extract,path,within,pattern,string,pattern,string,path
PathMatcher -> String extractPathWithinPattern(String pattern, String path)_;1468613531;Given a pattern and a full path, determine the pattern-mapped part._<p>This method is supposed to find out which part of the path is matched_dynamically through an actual pattern, that is, it strips off a statically_defined leading path from the given full path, returning only the actually_pattern-matched part of the path._<p>For example: For "myroot/*.html" as pattern and "myroot/myfile.html"_as full path, this method should return "myfile.html". The detailed_determination rules are specified to this PathMatcher's matching strategy._<p>A simple implementation may return the given full path as-is in case_of an actual pattern, and the empty String in case of the pattern not_containing any dynamic parts (i.e. the {@code pattern} parameter being_a static path that wouldn't qualify as an actual {@link #isPattern pattern})._A sophisticated implementation will differentiate between the static parts_and the dynamic parts of the given path pattern._@param pattern the path pattern_@param path the full path to introspect_@return the pattern-mapped part of the given {@code path}_(never {@code null});String extractPathWithinPattern(String pattern, String path)_;given,a,pattern,and,a,full,path,determine,the,pattern,mapped,part,p,this,method,is,supposed,to,find,out,which,part,of,the,path,is,matched,dynamically,through,an,actual,pattern,that,is,it,strips,off,a,statically,defined,leading,path,from,the,given,full,path,returning,only,the,actually,pattern,matched,part,of,the,path,p,for,example,for,myroot,html,as,pattern,and,myroot,myfile,html,as,full,path,this,method,should,return,myfile,html,the,detailed,determination,rules,are,specified,to,this,path,matcher,s,matching,strategy,p,a,simple,implementation,may,return,the,given,full,path,as,is,in,case,of,an,actual,pattern,and,the,empty,string,in,case,of,the,pattern,not,containing,any,dynamic,parts,i,e,the,code,pattern,parameter,being,a,static,path,that,wouldn,t,qualify,as,an,actual,link,is,pattern,pattern,a,sophisticated,implementation,will,differentiate,between,the,static,parts,and,the,dynamic,parts,of,the,given,path,pattern,param,pattern,the,path,pattern,param,path,the,full,path,to,introspect,return,the,pattern,mapped,part,of,the,given,code,path,never,code,null;string,extract,path,within,pattern,string,pattern,string,path
PathMatcher -> String extractPathWithinPattern(String pattern, String path)_;1518772998;Given a pattern and a full path, determine the pattern-mapped part._<p>This method is supposed to find out which part of the path is matched_dynamically through an actual pattern, that is, it strips off a statically_defined leading path from the given full path, returning only the actually_pattern-matched part of the path._<p>For example: For "myroot/*.html" as pattern and "myroot/myfile.html"_as full path, this method should return "myfile.html". The detailed_determination rules are specified to this PathMatcher's matching strategy._<p>A simple implementation may return the given full path as-is in case_of an actual pattern, and the empty String in case of the pattern not_containing any dynamic parts (i.e. the {@code pattern} parameter being_a static path that wouldn't qualify as an actual {@link #isPattern pattern})._A sophisticated implementation will differentiate between the static parts_and the dynamic parts of the given path pattern._@param pattern the path pattern_@param path the full path to introspect_@return the pattern-mapped part of the given {@code path}_(never {@code null});String extractPathWithinPattern(String pattern, String path)_;given,a,pattern,and,a,full,path,determine,the,pattern,mapped,part,p,this,method,is,supposed,to,find,out,which,part,of,the,path,is,matched,dynamically,through,an,actual,pattern,that,is,it,strips,off,a,statically,defined,leading,path,from,the,given,full,path,returning,only,the,actually,pattern,matched,part,of,the,path,p,for,example,for,myroot,html,as,pattern,and,myroot,myfile,html,as,full,path,this,method,should,return,myfile,html,the,detailed,determination,rules,are,specified,to,this,path,matcher,s,matching,strategy,p,a,simple,implementation,may,return,the,given,full,path,as,is,in,case,of,an,actual,pattern,and,the,empty,string,in,case,of,the,pattern,not,containing,any,dynamic,parts,i,e,the,code,pattern,parameter,being,a,static,path,that,wouldn,t,qualify,as,an,actual,link,is,pattern,pattern,a,sophisticated,implementation,will,differentiate,between,the,static,parts,and,the,dynamic,parts,of,the,given,path,pattern,param,pattern,the,path,pattern,param,path,the,full,path,to,introspect,return,the,pattern,mapped,part,of,the,given,code,path,never,code,null;string,extract,path,within,pattern,string,pattern,string,path
PathMatcher -> Map<String, String> extractUriTemplateVariables(String pattern, String path)_;1328020251;Given a pattern and a full path, extract the URI template variables. URI template_variables are expressed through curly brackets ('{' and '}')._<p>For example: For pattern "/hotels/{hotel}" and path "/hotels/1", this method will_return a map containing "hotel"->"1"._@param pattern the path pattern, possibly containing URI templates_@param path the full path to extract template variables from_@return a map, containing variable names as keys_ variables values as values;Map<String, String> extractUriTemplateVariables(String pattern, String path)_;given,a,pattern,and,a,full,path,extract,the,uri,template,variables,uri,template,variables,are,expressed,through,curly,brackets,and,p,for,example,for,pattern,hotels,hotel,and,path,hotels,1,this,method,will,return,a,map,containing,hotel,1,param,pattern,the,path,pattern,possibly,containing,uri,templates,param,path,the,full,path,to,extract,template,variables,from,return,a,map,containing,variable,names,as,keys,variables,values,as,values;map,string,string,extract,uri,template,variables,string,pattern,string,path
PathMatcher -> Map<String, String> extractUriTemplateVariables(String pattern, String path)_;1356735495;Given a pattern and a full path, extract the URI template variables. URI template_variables are expressed through curly brackets ('{' and '}')._<p>For example: For pattern "/hotels/{hotel}" and path "/hotels/1", this method will_return a map containing "hotel"->"1"._@param pattern the path pattern, possibly containing URI templates_@param path the full path to extract template variables from_@return a map, containing variable names as keys_ variables values as values;Map<String, String> extractUriTemplateVariables(String pattern, String path)_;given,a,pattern,and,a,full,path,extract,the,uri,template,variables,uri,template,variables,are,expressed,through,curly,brackets,and,p,for,example,for,pattern,hotels,hotel,and,path,hotels,1,this,method,will,return,a,map,containing,hotel,1,param,pattern,the,path,pattern,possibly,containing,uri,templates,param,path,the,full,path,to,extract,template,variables,from,return,a,map,containing,variable,names,as,keys,variables,values,as,values;map,string,string,extract,uri,template,variables,string,pattern,string,path
PathMatcher -> Map<String, String> extractUriTemplateVariables(String pattern, String path)_;1468613531;Given a pattern and a full path, extract the URI template variables. URI template_variables are expressed through curly brackets ('{' and '}')._<p>For example: For pattern "/hotels/{hotel}" and path "/hotels/1", this method will_return a map containing "hotel"->"1"._@param pattern the path pattern, possibly containing URI templates_@param path the full path to extract template variables from_@return a map, containing variable names as keys_ variables values as values;Map<String, String> extractUriTemplateVariables(String pattern, String path)_;given,a,pattern,and,a,full,path,extract,the,uri,template,variables,uri,template,variables,are,expressed,through,curly,brackets,and,p,for,example,for,pattern,hotels,hotel,and,path,hotels,1,this,method,will,return,a,map,containing,hotel,1,param,pattern,the,path,pattern,possibly,containing,uri,templates,param,path,the,full,path,to,extract,template,variables,from,return,a,map,containing,variable,names,as,keys,variables,values,as,values;map,string,string,extract,uri,template,variables,string,pattern,string,path
PathMatcher -> Map<String, String> extractUriTemplateVariables(String pattern, String path)_;1518772998;Given a pattern and a full path, extract the URI template variables. URI template_variables are expressed through curly brackets ('{' and '}')._<p>For example: For pattern "/hotels/{hotel}" and path "/hotels/1", this method will_return a map containing "hotel"->"1"._@param pattern the path pattern, possibly containing URI templates_@param path the full path to extract template variables from_@return a map, containing variable names as keys_ variables values as values;Map<String, String> extractUriTemplateVariables(String pattern, String path)_;given,a,pattern,and,a,full,path,extract,the,uri,template,variables,uri,template,variables,are,expressed,through,curly,brackets,and,p,for,example,for,pattern,hotels,hotel,and,path,hotels,1,this,method,will,return,a,map,containing,hotel,1,param,pattern,the,path,pattern,possibly,containing,uri,templates,param,path,the,full,path,to,extract,template,variables,from,return,a,map,containing,variable,names,as,keys,variables,values,as,values;map,string,string,extract,uri,template,variables,string,pattern,string,path
