# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1473882375;This implementation returns {@link Channels#newChannel(InputStream)} with the result of_{@link #getInputStream()}.;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return Channels.newChannel(getInputStream())__	};this,implementation,returns,link,channels,new,channel,input,stream,with,the,result,of,link,get,input,stream;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,channels,new,channel,get,input,stream
AbstractResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1493223420;This implementation returns {@link Channels#newChannel(InputStream)} with the result of_{@link #getInputStream()}.;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return Channels.newChannel(getInputStream())__	};this,implementation,returns,link,channels,new,channel,input,stream,with,the,result,of,link,get,input,stream;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,channels,new,channel,get,input,stream
AbstractResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1493811929;This implementation returns {@link Channels#newChannel(InputStream)}_with the result of {@link #getInputStream()}._<p>This is the same as in {@link Resource}'s corresponding default method_but mirrored here for efficient JVM-level dispatching in a class hierarchy.;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return Channels.newChannel(getInputStream())__	};this,implementation,returns,link,channels,new,channel,input,stream,with,the,result,of,link,get,input,stream,p,this,is,the,same,as,in,link,resource,s,corresponding,default,method,but,mirrored,here,for,efficient,jvm,level,dispatching,in,a,class,hierarchy;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,channels,new,channel,get,input,stream
AbstractResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1496837955;This implementation returns {@link Channels#newChannel(InputStream)}_with the result of {@link #getInputStream()}._<p>This is the same as in {@link Resource}'s corresponding default method_but mirrored here for efficient JVM-level dispatching in a class hierarchy.;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return Channels.newChannel(getInputStream())__	};this,implementation,returns,link,channels,new,channel,input,stream,with,the,result,of,link,get,input,stream,p,this,is,the,same,as,in,link,resource,s,corresponding,default,method,but,mirrored,here,for,efficient,jvm,level,dispatching,in,a,class,hierarchy;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,channels,new,channel,get,input,stream
AbstractResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1497341594;This implementation returns {@link Channels#newChannel(InputStream)}_with the result of {@link #getInputStream()}._<p>This is the same as in {@link Resource}'s corresponding default method_but mirrored here for efficient JVM-level dispatching in a class hierarchy.;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return Channels.newChannel(getInputStream())__	};this,implementation,returns,link,channels,new,channel,input,stream,with,the,result,of,link,get,input,stream,p,this,is,the,same,as,in,link,resource,s,corresponding,default,method,but,mirrored,here,for,efficient,jvm,level,dispatching,in,a,class,hierarchy;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,channels,new,channel,get,input,stream
AbstractResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1502974979;This implementation returns {@link Channels#newChannel(InputStream)}_with the result of {@link #getInputStream()}._<p>This is the same as in {@link Resource}'s corresponding default method_but mirrored here for efficient JVM-level dispatching in a class hierarchy.;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return Channels.newChannel(getInputStream())__	};this,implementation,returns,link,channels,new,channel,input,stream,with,the,result,of,link,get,input,stream,p,this,is,the,same,as,in,link,resource,s,corresponding,default,method,but,mirrored,here,for,efficient,jvm,level,dispatching,in,a,class,hierarchy;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,channels,new,channel,get,input,stream
AbstractResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1527623253;This implementation returns {@link Channels#newChannel(InputStream)}_with the result of {@link #getInputStream()}._<p>This is the same as in {@link Resource}'s corresponding default method_but mirrored here for efficient JVM-level dispatching in a class hierarchy.;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return Channels.newChannel(getInputStream())__	};this,implementation,returns,link,channels,new,channel,input,stream,with,the,result,of,link,get,input,stream,p,this,is,the,same,as,in,link,resource,s,corresponding,default,method,but,mirrored,here,for,efficient,jvm,level,dispatching,in,a,class,hierarchy;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,channels,new,channel,get,input,stream
AbstractResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1530190293;This implementation returns {@link Channels#newChannel(InputStream)}_with the result of {@link #getInputStream()}._<p>This is the same as in {@link Resource}'s corresponding default method_but mirrored here for efficient JVM-level dispatching in a class hierarchy.;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return Channels.newChannel(getInputStream())__	};this,implementation,returns,link,channels,new,channel,input,stream,with,the,result,of,link,get,input,stream,p,this,is,the,same,as,in,link,resource,s,corresponding,default,method,but,mirrored,here,for,efficient,jvm,level,dispatching,in,a,class,hierarchy;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,channels,new,channel,get,input,stream
AbstractResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1539119591;This implementation returns {@link Channels#newChannel(InputStream)}_with the result of {@link #getInputStream()}._<p>This is the same as in {@link Resource}'s corresponding default method_but mirrored here for efficient JVM-level dispatching in a class hierarchy.;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return Channels.newChannel(getInputStream())__	};this,implementation,returns,link,channels,new,channel,input,stream,with,the,result,of,link,get,input,stream,p,this,is,the,same,as,in,link,resource,s,corresponding,default,method,but,mirrored,here,for,efficient,jvm,level,dispatching,in,a,class,hierarchy;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,channels,new,channel,get,input,stream
AbstractResource -> public String getFilename();1341437569;This implementation always returns <code>null</code>,_assuming that this resource type does not have a filename.;public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,code,assuming,that,this,resource,type,does,not,have,a,filename;public,string,get,filename,return,null
AbstractResource -> public String getFilename();1357119239;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;public,string,get,filename,return,null
AbstractResource -> public File getFile() throws IOException;1328020251;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> public File getFile() throws IOException;1329142650;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> public File getFile() throws IOException;1329393628;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> public File getFile() throws IOException;1330090168;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> public File getFile() throws IOException;1341437569;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> public File getFile() throws IOException;1357119239;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public boolean isReadable();1356735495;This implementation always returns {@code true}.;@Override_	public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true;override,public,boolean,is,readable,return,true
AbstractResource -> @Override 	public boolean isReadable();1368482696;This implementation always returns {@code true}.;@Override_	public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true;override,public,boolean,is,readable,return,true
AbstractResource -> @Override 	public boolean isReadable();1405696918;This implementation always returns {@code true}.;@Override_	public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true;override,public,boolean,is,readable,return,true
AbstractResource -> @Override 	public boolean isReadable();1455225890;This implementation always returns {@code true}.;@Override_	public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true;override,public,boolean,is,readable,return,true
AbstractResource -> @Override 	public boolean isReadable();1468947211;This implementation always returns {@code true}.;@Override_	public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true;override,public,boolean,is,readable,return,true
AbstractResource -> @Override 	public boolean isReadable();1473882375;This implementation always returns {@code true}.;@Override_	public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true;override,public,boolean,is,readable,return,true
AbstractResource -> @Override 	public boolean isReadable();1493223420;This implementation always returns {@code true}.;@Override_	public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true;override,public,boolean,is,readable,return,true
AbstractResource -> @Override 	public boolean isReadable();1493811929;This implementation always returns {@code true}.;@Override_	public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true;override,public,boolean,is,readable,return,true
AbstractResource -> @Override 	public boolean isReadable();1496837955;This implementation always returns {@code true}.;@Override_	public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true;override,public,boolean,is,readable,return,true
AbstractResource -> @Override 	public boolean isReadable();1497341594;This implementation always returns {@code true}.;@Override_	public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true;override,public,boolean,is,readable,return,true
AbstractResource -> @Override 	public boolean isReadable();1502974979;This implementation always returns {@code true}.;@Override_	public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true;override,public,boolean,is,readable,return,true
AbstractResource -> @Override 	public boolean isReadable();1527623253;This implementation always returns {@code true} for a resource_that {@link #exists() exists} (revised as of 5.1).;@Override_	public boolean isReadable() {_		return exists()__	};this,implementation,always,returns,code,true,for,a,resource,that,link,exists,exists,revised,as,of,5,1;override,public,boolean,is,readable,return,exists
AbstractResource -> @Override 	public boolean isReadable();1530190293;This implementation always returns {@code true} for a resource_that {@link #exists() exists} (revised as of 5.1).;@Override_	public boolean isReadable() {_		return exists()__	};this,implementation,always,returns,code,true,for,a,resource,that,link,exists,exists,revised,as,of,5,1;override,public,boolean,is,readable,return,exists
AbstractResource -> @Override 	public boolean isReadable();1539119591;This implementation always returns {@code true} for a resource_that {@link #exists() exists} (revised as of 5.1).;@Override_	public boolean isReadable() {_		return exists()__	};this,implementation,always,returns,code,true,for,a,resource,that,link,exists,exists,revised,as,of,5,1;override,public,boolean,is,readable,return,exists
AbstractResource -> @Override 	public boolean equals(Object other);1530190293;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object other) {_		return (this == other || (other instanceof Resource &&_				((Resource) other).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,other,return,this,other,other,instanceof,resource,resource,other,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object other);1539119591;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object other) {_		return (this == other || (other instanceof Resource &&_				((Resource) other).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,other,return,this,other,other,instanceof,resource,resource,other,get,description,equals,get,description
AbstractResource -> public Resource createRelative(String relativePath) throws IOException;1328020251;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> public Resource createRelative(String relativePath) throws IOException;1329142650;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> public Resource createRelative(String relativePath) throws IOException;1329393628;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> public Resource createRelative(String relativePath) throws IOException;1330090168;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> public Resource createRelative(String relativePath) throws IOException;1341437569;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> public Resource createRelative(String relativePath) throws IOException;1357119239;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	@Nullable 	public String getFilename();1502974979;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	@Nullable_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,nullable,public,string,get,filename,return,null
AbstractResource -> @Override 	@Nullable 	public String getFilename();1527623253;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	@Nullable_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,nullable,public,string,get,filename,return,null
AbstractResource -> @Override 	@Nullable 	public String getFilename();1530190293;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	@Nullable_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,nullable,public,string,get,filename,return,null
AbstractResource -> @Override 	@Nullable 	public String getFilename();1539119591;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	@Nullable_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,nullable,public,string,get,filename,return,null
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1328020251;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never <code>null</code>)_@throws IOException if the resource cannot be resolved as absolute_file path, i.e. if the resource is not available in a file system;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,code,throws,ioexception,if,the,resource,cannot,be,resolved,as,absolute,file,path,i,e,if,the,resource,is,not,available,in,a,file,system;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1329142650;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never <code>null</code>)_@throws IOException if the resource cannot be resolved as absolute_file path, i.e. if the resource is not available in a file system;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,code,throws,ioexception,if,the,resource,cannot,be,resolved,as,absolute,file,path,i,e,if,the,resource,is,not,available,in,a,file,system;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1329393628;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never <code>null</code>)_@throws IOException if the resource cannot be resolved as absolute_file path, i.e. if the resource is not available in a file system;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,code,throws,ioexception,if,the,resource,cannot,be,resolved,as,absolute,file,path,i,e,if,the,resource,is,not,available,in,a,file,system;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1330090168;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never <code>null</code>)_@throws IOException if the resource cannot be resolved as absolute_file path, i.e. if the resource is not available in a file system;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,code,throws,ioexception,if,the,resource,cannot,be,resolved,as,absolute,file,path,i,e,if,the,resource,is,not,available,in,a,file,system;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1341437569;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never <code>null</code>)_@throws IOException if the resource cannot be resolved as absolute_file path, i.e. if the resource is not available in a file system;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,code,throws,ioexception,if,the,resource,cannot,be,resolved,as,absolute,file,path,i,e,if,the,resource,is,not,available,in,a,file,system;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1356735495;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws IOException if the resource cannot be resolved as absolute_file path, i.e. if the resource is not available in a file system;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,ioexception,if,the,resource,cannot,be,resolved,as,absolute,file,path,i,e,if,the,resource,is,not,available,in,a,file,system;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1357119239;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws IOException if the resource cannot be resolved as absolute_file path, i.e. if the resource is not available in a file system;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,ioexception,if,the,resource,cannot,be,resolved,as,absolute,file,path,i,e,if,the,resource,is,not,available,in,a,file,system;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1368482696;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws IOException if the resource cannot be resolved as absolute_file path, i.e. if the resource is not available in a file system;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,ioexception,if,the,resource,cannot,be,resolved,as,absolute,file,path,i,e,if,the,resource,is,not,available,in,a,file,system;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1405696918;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws IOException if the resource cannot be resolved as absolute_file path, i.e. if the resource is not available in a file system;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,ioexception,if,the,resource,cannot,be,resolved,as,absolute,file,path,i,e,if,the,resource,is,not,available,in,a,file,system;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1455225890;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws IOException if the resource cannot be resolved as absolute_file path, i.e. if the resource is not available in a file system;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,ioexception,if,the,resource,cannot,be,resolved,as,absolute,file,path,i,e,if,the,resource,is,not,available,in,a,file,system;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1468947211;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws IOException if the resource cannot be resolved as absolute_file path, i.e. if the resource is not available in a file system;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,ioexception,if,the,resource,cannot,be,resolved,as,absolute,file,path,i,e,if,the,resource,is,not,available,in,a,file,system;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1473882375;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws IOException if the resource cannot be resolved as absolute_file path, i.e. if the resource is not available in a file system;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,ioexception,if,the,resource,cannot,be,resolved,as,absolute,file,path,i,e,if,the,resource,is,not,available,in,a,file,system;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1493223420;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws FileNotFoundException if the resource cannot be resolved as_an absolute file path, i.e. is not available in a file system_@throws IOException in case of general resolution/reading failures;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,as,an,absolute,file,path,i,e,is,not,available,in,a,file,system,throws,ioexception,in,case,of,general,resolution,reading,failures;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1493811929;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws FileNotFoundException if the resource cannot be resolved as_an absolute file path, i.e. is not available in a file system_@throws IOException in case of general resolution/reading failures;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,as,an,absolute,file,path,i,e,is,not,available,in,a,file,system,throws,ioexception,in,case,of,general,resolution,reading,failures;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1496837955;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws FileNotFoundException if the resource cannot be resolved as_an absolute file path, i.e. is not available in a file system_@throws IOException in case of general resolution/reading failures;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,as,an,absolute,file,path,i,e,is,not,available,in,a,file,system,throws,ioexception,in,case,of,general,resolution,reading,failures;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1497341594;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws FileNotFoundException if the resource cannot be resolved as_an absolute file path, i.e. is not available in a file system_@throws IOException in case of general resolution/reading failures;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,as,an,absolute,file,path,i,e,is,not,available,in,a,file,system,throws,ioexception,in,case,of,general,resolution,reading,failures;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1502974979;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws FileNotFoundException if the resource cannot be resolved as_an absolute file path, i.e. is not available in a file system_@throws IOException in case of general resolution/reading failures;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,as,an,absolute,file,path,i,e,is,not,available,in,a,file,system,throws,ioexception,in,case,of,general,resolution,reading,failures;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1527623253;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws FileNotFoundException if the resource cannot be resolved as_an absolute file path, i.e. is not available in a file system_@throws IOException in case of general resolution/reading failures;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,as,an,absolute,file,path,i,e,is,not,available,in,a,file,system,throws,ioexception,in,case,of,general,resolution,reading,failures;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1530190293;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws FileNotFoundException if the resource cannot be resolved as_an absolute file path, i.e. is not available in a file system_@throws IOException in case of general resolution/reading failures;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,as,an,absolute,file,path,i,e,is,not,available,in,a,file,system,throws,ioexception,in,case,of,general,resolution,reading,failures;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> protected File getFileForLastModifiedCheck() throws IOException;1539119591;Determine the File to use for timestamp checking._<p>The default implementation delegates to {@link #getFile()}._@return the File to use for timestamp checking (never {@code null})_@throws FileNotFoundException if the resource cannot be resolved as_an absolute file path, i.e. is not available in a file system_@throws IOException in case of general resolution/reading failures;protected File getFileForLastModifiedCheck() throws IOException {_		return getFile()__	};determine,the,file,to,use,for,timestamp,checking,p,the,default,implementation,delegates,to,link,get,file,return,the,file,to,use,for,timestamp,checking,never,code,null,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,as,an,absolute,file,path,i,e,is,not,available,in,a,file,system,throws,ioexception,in,case,of,general,resolution,reading,failures;protected,file,get,file,for,last,modified,check,throws,ioexception,return,get,file
AbstractResource -> public boolean isOpen();1328020251;This implementation always returns <code>false</code>.;public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false,code;public,boolean,is,open,return,false
AbstractResource -> public boolean isOpen();1329142650;This implementation always returns <code>false</code>.;public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false,code;public,boolean,is,open,return,false
AbstractResource -> public boolean isOpen();1329393628;This implementation always returns <code>false</code>.;public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false,code;public,boolean,is,open,return,false
AbstractResource -> public boolean isOpen();1330090168;This implementation always returns <code>false</code>.;public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false,code;public,boolean,is,open,return,false
AbstractResource -> public boolean isOpen();1341437569;This implementation always returns <code>false</code>.;public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false,code;public,boolean,is,open,return,false
AbstractResource -> public boolean isOpen();1357119239;This implementation always returns {@code false}.;public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;public,boolean,is,open,return,false
AbstractResource -> @Override 	public String toString();1328020251;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1329142650;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1329393628;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1330090168;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1341437569;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1356735495;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1357119239;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1368482696;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1405696918;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1455225890;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1468947211;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1473882375;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1493223420;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1493811929;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1496837955;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1497341594;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1502974979;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1527623253;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1530190293;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String toString();1539119591;This implementation returns the description of this resource._@see #getDescription();@Override_	public String toString() {_		return getDescription()__	};this,implementation,returns,the,description,of,this,resource,see,get,description;override,public,string,to,string,return,get,description
AbstractResource -> @Override 	public String getFilename();1356735495;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,public,string,get,filename,return,null
AbstractResource -> @Override 	public String getFilename();1368482696;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,public,string,get,filename,return,null
AbstractResource -> @Override 	public String getFilename();1405696918;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,public,string,get,filename,return,null
AbstractResource -> @Override 	public String getFilename();1455225890;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,public,string,get,filename,return,null
AbstractResource -> @Override 	public String getFilename();1468947211;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,public,string,get,filename,return,null
AbstractResource -> @Override 	public String getFilename();1473882375;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,public,string,get,filename,return,null
AbstractResource -> @Override 	public String getFilename();1493223420;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,public,string,get,filename,return,null
AbstractResource -> @Override 	public String getFilename();1493811929;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,public,string,get,filename,return,null
AbstractResource -> @Override 	public String getFilename();1496837955;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,public,string,get,filename,return,null
AbstractResource -> @Override 	public String getFilename();1497341594;This implementation always returns {@code null},_assuming that this resource type does not have a filename.;@Override_	public String getFilename() {_		return null__	};this,implementation,always,returns,code,null,assuming,that,this,resource,type,does,not,have,a,filename;override,public,string,get,filename,return,null
AbstractResource -> @Override 	public URI getURI() throws IOException;1356735495;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1368482696;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1405696918;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1455225890;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1468947211;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1473882375;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1493223420;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1493811929;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1496837955;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1497341594;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1502974979;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1527623253;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1530190293;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> @Override 	public URI getURI() throws IOException;1539119591;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;@Override_	public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;override,public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> public URL getURL() throws IOException;1328020251;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> public URL getURL() throws IOException;1329142650;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> public URL getURL() throws IOException;1329393628;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> public URL getURL() throws IOException;1330090168;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> public URL getURL() throws IOException;1341437569;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> public URL getURL() throws IOException;1357119239;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public File getFile() throws IOException;1356735495;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1368482696;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1405696918;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1455225890;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1468947211;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1473882375;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1493223420;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1493811929;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1496837955;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1497341594;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1502974979;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1527623253;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1530190293;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> @Override 	public File getFile() throws IOException;1539119591;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to an absolute file path.;@Override_	public File getFile() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,an,absolute,file,path;override,public,file,get,file,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,absolute,file,path
AbstractResource -> public boolean isReadable();1328020251;This implementation always returns <code>true</code>.;public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true,code;public,boolean,is,readable,return,true
AbstractResource -> public boolean isReadable();1329142650;This implementation always returns <code>true</code>.;public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true,code;public,boolean,is,readable,return,true
AbstractResource -> public boolean isReadable();1329393628;This implementation always returns <code>true</code>.;public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true,code;public,boolean,is,readable,return,true
AbstractResource -> public boolean isReadable();1330090168;This implementation always returns <code>true</code>.;public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true,code;public,boolean,is,readable,return,true
AbstractResource -> public boolean isReadable();1341437569;This implementation always returns <code>true</code>.;public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true,code;public,boolean,is,readable,return,true
AbstractResource -> public boolean isReadable();1357119239;This implementation always returns {@code true}.;public boolean isReadable() {_		return true__	};this,implementation,always,returns,code,true;public,boolean,is,readable,return,true
AbstractResource -> @Override 	public boolean equals(Object obj);1328020251;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_		    (obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1329142650;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_		    (obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1329393628;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_		    (obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1330090168;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_		    (obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1341437569;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_		    (obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1356735495;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1357119239;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1368482696;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1405696918;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1455225890;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1468947211;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1473882375;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1493223420;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1493811929;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1496837955;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1497341594;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1502974979;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> @Override 	public boolean equals(Object obj);1527623253;This implementation compares description strings._@see #getDescription();@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof Resource && ((Resource) obj).getDescription().equals(getDescription())))__	};this,implementation,compares,description,strings,see,get,description;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,resource,resource,obj,get,description,equals,get,description
AbstractResource -> public boolean exists();1328020251;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> public boolean exists();1329142650;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> public boolean exists();1329393628;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> public boolean exists();1330090168;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> public boolean exists();1341437569;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> public boolean exists();1357119239;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1356735495;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1368482696;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1405696918;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1455225890;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1468947211;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1473882375;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1493223420;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1493811929;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1496837955;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1497341594;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1502974979;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				InputStream is = getInputStream()__				is.close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,input,stream,is,get,input,stream,is,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1527623253;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				getInputStream().close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,get,input,stream,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1530190293;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				getInputStream().close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,get,input,stream,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public boolean exists();1539119591;This implementation checks whether a File can be opened,_falling back to whether an InputStream can be opened._This will cover both directories and content resources.;@Override_	public boolean exists() {_		_		try {_			return getFile().exists()__		}_		catch (IOException ex) {_			_			try {_				getInputStream().close()__				return true__			}_			catch (Throwable isEx) {_				return false__			}_		}_	};this,implementation,checks,whether,a,file,can,be,opened,falling,back,to,whether,an,input,stream,can,be,opened,this,will,cover,both,directories,and,content,resources;override,public,boolean,exists,try,return,get,file,exists,catch,ioexception,ex,try,get,input,stream,close,return,true,catch,throwable,is,ex,return,false
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1356735495;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1368482696;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1405696918;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1455225890;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1468947211;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1473882375;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1493223420;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1493811929;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1496837955;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1497341594;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1502974979;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1527623253;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1530190293;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1539119591;This implementation throws a FileNotFoundException, assuming_that relative resources cannot be created for this resource.;@Override_	public Resource createRelative(String relativePath) throws IOException {_		throw new FileNotFoundException("Cannot create a relative resource for " + getDescription())__	};this,implementation,throws,a,file,not,found,exception,assuming,that,relative,resources,cannot,be,created,for,this,resource;override,public,resource,create,relative,string,relative,path,throws,ioexception,throw,new,file,not,found,exception,cannot,create,a,relative,resource,for,get,description
AbstractResource -> @Override 	public long contentLength() throws IOException;1356735495;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream()_@throws IllegalStateException if {@link #getInputStream()} returns null.;@Override_	public long contentLength() throws IOException {_		InputStream is = this.getInputStream()__		Assert.state(is != null, "resource input stream must not be null")__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream,throws,illegal,state,exception,if,link,get,input,stream,returns,null;override,public,long,content,length,throws,ioexception,input,stream,is,this,get,input,stream,assert,state,is,null,resource,input,stream,must,not,be,null,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1368482696;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream()_@throws IllegalStateException if {@link #getInputStream()} returns null.;@Override_	public long contentLength() throws IOException {_		InputStream is = this.getInputStream()__		Assert.state(is != null, "resource input stream must not be null")__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream,throws,illegal,state,exception,if,link,get,input,stream,returns,null;override,public,long,content,length,throws,ioexception,input,stream,is,this,get,input,stream,assert,state,is,null,resource,input,stream,must,not,be,null,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1405696918;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream()_@throws IllegalStateException if {@link #getInputStream()} returns null.;@Override_	public long contentLength() throws IOException {_		InputStream is = this.getInputStream()__		Assert.state(is != null, "resource input stream must not be null")__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while ((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream,throws,illegal,state,exception,if,link,get,input,stream,returns,null;override,public,long,content,length,throws,ioexception,input,stream,is,this,get,input,stream,assert,state,is,null,resource,input,stream,must,not,be,null,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1455225890;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream()_@throws IllegalStateException if {@link #getInputStream()} returns null.;@Override_	public long contentLength() throws IOException {_		InputStream is = getInputStream()__		Assert.state(is != null, "Resource InputStream must not be null")__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while ((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream,throws,illegal,state,exception,if,link,get,input,stream,returns,null;override,public,long,content,length,throws,ioexception,input,stream,is,get,input,stream,assert,state,is,null,resource,input,stream,must,not,be,null,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1468947211;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream()_@throws IllegalStateException if {@link #getInputStream()} returns null.;@Override_	public long contentLength() throws IOException {_		InputStream is = getInputStream()__		Assert.state(is != null, "Resource InputStream must not be null")__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while ((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream,throws,illegal,state,exception,if,link,get,input,stream,returns,null;override,public,long,content,length,throws,ioexception,input,stream,is,get,input,stream,assert,state,is,null,resource,input,stream,must,not,be,null,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1473882375;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream()_@throws IllegalStateException if {@link #getInputStream()} returns null.;@Override_	public long contentLength() throws IOException {_		InputStream is = getInputStream()__		Assert.state(is != null, "Resource InputStream must not be null")__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while ((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream,throws,illegal,state,exception,if,link,get,input,stream,returns,null;override,public,long,content,length,throws,ioexception,input,stream,is,get,input,stream,assert,state,is,null,resource,input,stream,must,not,be,null,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1493223420;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream()_@throws IllegalStateException if {@link #getInputStream()} returns null.;@Override_	public long contentLength() throws IOException {_		InputStream is = getInputStream()__		Assert.state(is != null, "Resource InputStream must not be null")__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while ((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream,throws,illegal,state,exception,if,link,get,input,stream,returns,null;override,public,long,content,length,throws,ioexception,input,stream,is,get,input,stream,assert,state,is,null,resource,input,stream,must,not,be,null,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1493811929;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream();@Override_	public long contentLength() throws IOException {_		InputStream is = getInputStream()__		Assert.state(is != null, "Resource InputStream must not be null")__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while ((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream;override,public,long,content,length,throws,ioexception,input,stream,is,get,input,stream,assert,state,is,null,resource,input,stream,must,not,be,null,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1496837955;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream();@Override_	public long contentLength() throws IOException {_		InputStream is = getInputStream()__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while ((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream;override,public,long,content,length,throws,ioexception,input,stream,is,get,input,stream,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1497341594;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream();@Override_	public long contentLength() throws IOException {_		InputStream is = getInputStream()__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while ((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream;override,public,long,content,length,throws,ioexception,input,stream,is,get,input,stream,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1502974979;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream();@Override_	public long contentLength() throws IOException {_		InputStream is = getInputStream()__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while ((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream;override,public,long,content,length,throws,ioexception,input,stream,is,get,input,stream,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1527623253;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream();@Override_	public long contentLength() throws IOException {_		InputStream is = getInputStream()__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while ((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream;override,public,long,content,length,throws,ioexception,input,stream,is,get,input,stream,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1530190293;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream();@Override_	public long contentLength() throws IOException {_		InputStream is = getInputStream()__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while ((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream;override,public,long,content,length,throws,ioexception,input,stream,is,get,input,stream,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public long contentLength() throws IOException;1539119591;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream();@Override_	public long contentLength() throws IOException {_		InputStream is = getInputStream()__		try {_			long size = 0__			byte[] buf = new byte[256]__			int read__			while ((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream;override,public,long,content,length,throws,ioexception,input,stream,is,get,input,stream,try,long,size,0,byte,buf,new,byte,256,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> @Override 	public boolean isFile();1468947211;This implementation always returns {@code false}.;@Override_	public boolean isFile() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,file,return,false
AbstractResource -> @Override 	public boolean isFile();1473882375;This implementation always returns {@code false}.;@Override_	public boolean isFile() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,file,return,false
AbstractResource -> @Override 	public boolean isFile();1493223420;This implementation always returns {@code false}.;@Override_	public boolean isFile() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,file,return,false
AbstractResource -> @Override 	public boolean isFile();1493811929;This implementation always returns {@code false}.;@Override_	public boolean isFile() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,file,return,false
AbstractResource -> @Override 	public boolean isFile();1496837955;This implementation always returns {@code false}.;@Override_	public boolean isFile() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,file,return,false
AbstractResource -> @Override 	public boolean isFile();1497341594;This implementation always returns {@code false}.;@Override_	public boolean isFile() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,file,return,false
AbstractResource -> @Override 	public boolean isFile();1502974979;This implementation always returns {@code false}.;@Override_	public boolean isFile() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,file,return,false
AbstractResource -> @Override 	public boolean isFile();1527623253;This implementation always returns {@code false}.;@Override_	public boolean isFile() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,file,return,false
AbstractResource -> @Override 	public boolean isFile();1530190293;This implementation always returns {@code false}.;@Override_	public boolean isFile() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,file,return,false
AbstractResource -> @Override 	public boolean isFile();1539119591;This implementation always returns {@code false}.;@Override_	public boolean isFile() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,file,return,false
AbstractResource -> @Override 	public int hashCode();1328020251;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1329142650;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1329393628;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1330090168;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1341437569;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1356735495;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1357119239;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1368482696;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1405696918;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1455225890;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1468947211;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1473882375;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1493223420;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1493811929;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1496837955;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1497341594;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1502974979;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1527623253;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1530190293;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> @Override 	public int hashCode();1539119591;This implementation returns the description's hash code._@see #getDescription();@Override_	public int hashCode() {_		return getDescription().hashCode()__	};this,implementation,returns,the,description,s,hash,code,see,get,description;override,public,int,hash,code,return,get,description,hash,code
AbstractResource -> public URI getURI() throws IOException;1328020251;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> public URI getURI() throws IOException;1329142650;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> public URI getURI() throws IOException;1329393628;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> public URI getURI() throws IOException;1330090168;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> public URI getURI() throws IOException;1341437569;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> public URI getURI() throws IOException;1357119239;This implementation builds a URI based on the URL returned_by {@link #getURL()}.;public URI getURI() throws IOException {_		URL url = getURL()__		try {_			return ResourceUtils.toURI(url)__		}_		catch (URISyntaxException ex) {_			throw new NestedIOException("Invalid URI [" + url + "]", ex)__		}_	};this,implementation,builds,a,uri,based,on,the,url,returned,by,link,get,url;public,uri,get,uri,throws,ioexception,url,url,get,url,try,return,resource,utils,to,uri,url,catch,urisyntax,exception,ex,throw,new,nested,ioexception,invalid,uri,url,ex
AbstractResource -> public long lastModified() throws IOException;1328020251;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> public long lastModified() throws IOException;1329142650;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> public long lastModified() throws IOException;1329393628;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> public long lastModified() throws IOException;1330090168;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> public long lastModified() throws IOException;1341437569;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> public long lastModified() throws IOException;1357119239;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public URL getURL() throws IOException;1356735495;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1368482696;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1405696918;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1455225890;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1468947211;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1473882375;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1493223420;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1493811929;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1496837955;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1497341594;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1502974979;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1527623253;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1530190293;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public URL getURL() throws IOException;1539119591;This implementation throws a FileNotFoundException, assuming_that the resource cannot be resolved to a URL.;@Override_	public URL getURL() throws IOException {_		throw new FileNotFoundException(getDescription() + " cannot be resolved to URL")__	};this,implementation,throws,a,file,not,found,exception,assuming,that,the,resource,cannot,be,resolved,to,a,url;override,public,url,get,url,throws,ioexception,throw,new,file,not,found,exception,get,description,cannot,be,resolved,to,url
AbstractResource -> @Override 	public long lastModified() throws IOException;1356735495;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1368482696;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1405696918;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1455225890;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1468947211;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1473882375;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1493223420;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1493811929;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1496837955;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1497341594;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1502974979;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1527623253;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1530190293;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		long lastModified = getFileForLastModifiedCheck().lastModified()__		if (lastModified == 0L) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for resolving its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,long,last,modified,get,file,for,last,modified,check,last,modified,if,last,modified,0l,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,resolving,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public long lastModified() throws IOException;1539119591;This implementation checks the timestamp of the underlying File,_if available._@see #getFileForLastModifiedCheck();@Override_	public long lastModified() throws IOException {_		File fileToCheck = getFileForLastModifiedCheck()__		long lastModified = fileToCheck.lastModified()__		if (lastModified == 0L && !fileToCheck.exists()) {_			throw new FileNotFoundException(getDescription() +_					" cannot be resolved in the file system for checking its last-modified timestamp")__		}_		return lastModified__	};this,implementation,checks,the,timestamp,of,the,underlying,file,if,available,see,get,file,for,last,modified,check;override,public,long,last,modified,throws,ioexception,file,file,to,check,get,file,for,last,modified,check,long,last,modified,file,to,check,last,modified,if,last,modified,0l,file,to,check,exists,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,checking,its,last,modified,timestamp,return,last,modified
AbstractResource -> @Override 	public boolean isOpen();1356735495;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1368482696;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1405696918;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1455225890;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1468947211;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1473882375;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1493223420;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1493811929;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1496837955;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1497341594;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1502974979;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1527623253;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1530190293;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> @Override 	public boolean isOpen();1539119591;This implementation always returns {@code false}.;@Override_	public boolean isOpen() {_		return false__	};this,implementation,always,returns,code,false;override,public,boolean,is,open,return,false
AbstractResource -> public long contentLength() throws IOException;1328020251;This implementation checks the length of the underlying File,_if available._@see #getFile();public long contentLength() throws IOException {_		return getFile().length()__	};this,implementation,checks,the,length,of,the,underlying,file,if,available,see,get,file;public,long,content,length,throws,ioexception,return,get,file,length
AbstractResource -> public long contentLength() throws IOException;1329142650;This implementation checks the length of the underlying File,_if available._@see #getFile();public long contentLength() throws IOException {_		return getFile().length()__	};this,implementation,checks,the,length,of,the,underlying,file,if,available,see,get,file;public,long,content,length,throws,ioexception,return,get,file,length
AbstractResource -> public long contentLength() throws IOException;1329393628;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream();public long contentLength() throws IOException {_		InputStream is = getInputStream()__		try {_			long size = 0__			byte[] buf = new byte[255]__			for (int read = is.read(buf)_ read != -1_) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream;public,long,content,length,throws,ioexception,input,stream,is,get,input,stream,try,long,size,0,byte,buf,new,byte,255,for,int,read,is,read,buf,read,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> public long contentLength() throws IOException;1330090168;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream()_@throws IllegalStateException if {@link #getInputStream()} returns null.;public long contentLength() throws IOException {_		InputStream is = this.getInputStream()__		Assert.state(is != null, "resource input stream must not be null")__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream,throws,illegal,state,exception,if,link,get,input,stream,returns,null;public,long,content,length,throws,ioexception,input,stream,is,this,get,input,stream,assert,state,is,null,resource,input,stream,must,not,be,null,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> public long contentLength() throws IOException;1341437569;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream()_@throws IllegalStateException if {@link #getInputStream()} returns null.;public long contentLength() throws IOException {_		InputStream is = this.getInputStream()__		Assert.state(is != null, "resource input stream must not be null")__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream,throws,illegal,state,exception,if,link,get,input,stream,returns,null;public,long,content,length,throws,ioexception,input,stream,is,this,get,input,stream,assert,state,is,null,resource,input,stream,must,not,be,null,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> public long contentLength() throws IOException;1357119239;This implementation reads the entire InputStream to calculate the_content length. Subclasses will almost always be able to provide_a more optimal version of this, e.g. checking a File length._@see #getInputStream()_@throws IllegalStateException if {@link #getInputStream()} returns null.;public long contentLength() throws IOException {_		InputStream is = this.getInputStream()__		Assert.state(is != null, "resource input stream must not be null")__		try {_			long size = 0__			byte[] buf = new byte[255]__			int read__			while((read = is.read(buf)) != -1) {_				size += read__			}_			return size__		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_			}_		}_	};this,implementation,reads,the,entire,input,stream,to,calculate,the,content,length,subclasses,will,almost,always,be,able,to,provide,a,more,optimal,version,of,this,e,g,checking,a,file,length,see,get,input,stream,throws,illegal,state,exception,if,link,get,input,stream,returns,null;public,long,content,length,throws,ioexception,input,stream,is,this,get,input,stream,assert,state,is,null,resource,input,stream,must,not,be,null,try,long,size,0,byte,buf,new,byte,255,int,read,while,read,is,read,buf,1,size,read,return,size,finally,try,is,close,catch,ioexception,ex
AbstractResource -> public String getFilename() throws IllegalStateException;1328020251;This implementation always throws IllegalStateException,_assuming that the resource does not have a filename.;public String getFilename() throws IllegalStateException {_		throw new IllegalStateException(getDescription() + " does not have a filename")__	};this,implementation,always,throws,illegal,state,exception,assuming,that,the,resource,does,not,have,a,filename;public,string,get,filename,throws,illegal,state,exception,throw,new,illegal,state,exception,get,description,does,not,have,a,filename
AbstractResource -> public String getFilename() throws IllegalStateException;1329142650;This implementation always returns <code>null</code>,_assuming that this resource type does not have a filename.;public String getFilename() throws IllegalStateException {_		return null__	};this,implementation,always,returns,code,null,code,assuming,that,this,resource,type,does,not,have,a,filename;public,string,get,filename,throws,illegal,state,exception,return,null
AbstractResource -> public String getFilename() throws IllegalStateException;1329393628;This implementation always returns <code>null</code>,_assuming that this resource type does not have a filename.;public String getFilename() throws IllegalStateException {_		return null__	};this,implementation,always,returns,code,null,code,assuming,that,this,resource,type,does,not,have,a,filename;public,string,get,filename,throws,illegal,state,exception,return,null
AbstractResource -> public String getFilename() throws IllegalStateException;1330090168;This implementation always returns <code>null</code>,_assuming that this resource type does not have a filename.;public String getFilename() throws IllegalStateException {_		return null__	};this,implementation,always,returns,code,null,code,assuming,that,this,resource,type,does,not,have,a,filename;public,string,get,filename,throws,illegal,state,exception,return,null
