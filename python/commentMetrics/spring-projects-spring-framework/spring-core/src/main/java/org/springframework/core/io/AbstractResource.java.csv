commented;modifiers;parameterAmount;loc;comment;code
true;public;0;17;/**  * This implementation checks whether a File can be opened,  * falling back to whether an InputStream can be opened.  * This will cover both directories and content resources.  */ ;/**  * This implementation checks whether a File can be opened,  * falling back to whether an InputStream can be opened.  * This will cover both directories and content resources.  */ @Override public boolean exists() {     // Try file existence: can we find the file in the file system?     try {         return getFile().exists().     } catch (IOException ex) {         // Fall back to stream existence: can we open the stream?         try {             getInputStream().close().             return true.         } catch (Throwable isEx) {             return false.         }     } }
true;public;0;4;/**  * This implementation always returns {@code true} for a resource  * that {@link #exists() exists} (revised as of 5.1).  */ ;/**  * This implementation always returns {@code true} for a resource  * that {@link #exists() exists} (revised as of 5.1).  */ @Override public boolean isReadable() {     return exists(). }
true;public;0;4;/**  * This implementation always returns {@code false}.  */ ;/**  * This implementation always returns {@code false}.  */ @Override public boolean isOpen() {     return false. }
true;public;0;4;/**  * This implementation always returns {@code false}.  */ ;/**  * This implementation always returns {@code false}.  */ @Override public boolean isFile() {     return false. }
true;public;0;4;/**  * This implementation throws a FileNotFoundException, assuming  * that the resource cannot be resolved to a URL.  */ ;/**  * This implementation throws a FileNotFoundException, assuming  * that the resource cannot be resolved to a URL.  */ @Override public URL getURL() throws IOException {     throw new FileNotFoundException(getDescription() + " cannot be resolved to URL"). }
true;public;0;10;/**  * This implementation builds a URI based on the URL returned  * by {@link #getURL()}.  */ ;/**  * This implementation builds a URI based on the URL returned  * by {@link #getURL()}.  */ @Override public URI getURI() throws IOException {     URL url = getURL().     try {         return ResourceUtils.toURI(url).     } catch (URISyntaxException ex) {         throw new NestedIOException("Invalid URI [" + url + "]", ex).     } }
true;public;0;4;/**  * This implementation throws a FileNotFoundException, assuming  * that the resource cannot be resolved to an absolute file path.  */ ;/**  * This implementation throws a FileNotFoundException, assuming  * that the resource cannot be resolved to an absolute file path.  */ @Override public File getFile() throws IOException {     throw new FileNotFoundException(getDescription() + " cannot be resolved to absolute file path"). }
true;public;0;4;/**  * This implementation returns {@link Channels#newChannel(InputStream)}  * with the result of {@link #getInputStream()}.  * <p>This is the same as in {@link Resource}'s corresponding default method  * but mirrored here for efficient JVM-level dispatching in a class hierarchy.  */ ;/**  * This implementation returns {@link Channels#newChannel(InputStream)}  * with the result of {@link #getInputStream()}.  * <p>This is the same as in {@link Resource}'s corresponding default method  * but mirrored here for efficient JVM-level dispatching in a class hierarchy.  */ @Override public ReadableByteChannel readableChannel() throws IOException {     return Channels.newChannel(getInputStream()). }
true;public;0;20;/**  * This implementation reads the entire InputStream to calculate the  * content length. Subclasses will almost always be able to provide  * a more optimal version of this, e.g. checking a File length.  * @see #getInputStream()  */ ;/**  * This implementation reads the entire InputStream to calculate the  * content length. Subclasses will almost always be able to provide  * a more optimal version of this, e.g. checking a File length.  * @see #getInputStream()  */ @Override public long contentLength() throws IOException {     InputStream is = getInputStream().     try {         long size = 0.         byte[] buf = new byte[256].         int read.         while ((read = is.read(buf)) != -1) {             size += read.         }         return size.     } finally {         try {             is.close().         } catch (IOException ex) {         }     } }
true;public;0;10;/**  * This implementation checks the timestamp of the underlying File,  * if available.  * @see #getFileForLastModifiedCheck()  */ ;/**  * This implementation checks the timestamp of the underlying File,  * if available.  * @see #getFileForLastModifiedCheck()  */ @Override public long lastModified() throws IOException {     File fileToCheck = getFileForLastModifiedCheck().     long lastModified = fileToCheck.lastModified().     if (lastModified == 0L && !fileToCheck.exists()) {         throw new FileNotFoundException(getDescription() + " cannot be resolved in the file system for checking its last-modified timestamp").     }     return lastModified. }
true;protected;0;3;/**  * Determine the File to use for timestamp checking.  * <p>The default implementation delegates to {@link #getFile()}.  * @return the File to use for timestamp checking (never {@code null})  * @throws FileNotFoundException if the resource cannot be resolved as  * an absolute file path, i.e. is not available in a file system  * @throws IOException in case of general resolution/reading failures  */ ;/**  * Determine the File to use for timestamp checking.  * <p>The default implementation delegates to {@link #getFile()}.  * @return the File to use for timestamp checking (never {@code null})  * @throws FileNotFoundException if the resource cannot be resolved as  * an absolute file path, i.e. is not available in a file system  * @throws IOException in case of general resolution/reading failures  */ protected File getFileForLastModifiedCheck() throws IOException {     return getFile(). }
true;public;1;4;/**  * This implementation throws a FileNotFoundException, assuming  * that relative resources cannot be created for this resource.  */ ;/**  * This implementation throws a FileNotFoundException, assuming  * that relative resources cannot be created for this resource.  */ @Override public Resource createRelative(String relativePath) throws IOException {     throw new FileNotFoundException("Cannot create a relative resource for " + getDescription()). }
true;public;0;5;/**  * This implementation always returns {@code null},  * assuming that this resource type does not have a filename.  */ ;/**  * This implementation always returns {@code null},  * assuming that this resource type does not have a filename.  */ @Override @Nullable public String getFilename() {     return null. }
true;public;1;5;/**  * This implementation compares description strings.  * @see #getDescription()  */ ;/**  * This implementation compares description strings.  * @see #getDescription()  */ @Override public boolean equals(Object other) {     return (this == other || (other instanceof Resource && ((Resource) other).getDescription().equals(getDescription()))). }
true;public;0;4;/**  * This implementation returns the description's hash code.  * @see #getDescription()  */ ;/**  * This implementation returns the description's hash code.  * @see #getDescription()  */ @Override public int hashCode() {     return getDescription().hashCode(). }
true;public;0;4;/**  * This implementation returns the description of this resource.  * @see #getDescription()  */ ;/**  * This implementation returns the description of this resource.  * @see #getDescription()  */ @Override public String toString() {     return getDescription(). }
