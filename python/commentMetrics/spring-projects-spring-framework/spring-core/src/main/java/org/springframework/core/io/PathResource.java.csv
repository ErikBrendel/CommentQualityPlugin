commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the file path for this resource.  */ ;/**  * Return the file path for this resource.  */ public final String getPath() {     return this.path.toString(). }
true;public;0;4;/**  * This implementation returns whether the underlying file exists.  * @see java.nio.file.Files#exists(Path, java.nio.file.LinkOption...)  */ ;/**  * This implementation returns whether the underlying file exists.  * @see java.nio.file.Files#exists(Path, java.nio.file.LinkOption...)  */ @Override public boolean exists() {     return Files.exists(this.path). }
true;public;0;4;/**  * This implementation checks whether the underlying file is marked as readable  * (and corresponds to an actual file with content, not to a directory).  * @see java.nio.file.Files#isReadable(Path)  * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)  */ ;/**  * This implementation checks whether the underlying file is marked as readable  * (and corresponds to an actual file with content, not to a directory).  * @see java.nio.file.Files#isReadable(Path)  * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)  */ @Override public boolean isReadable() {     return (Files.isReadable(this.path) && !Files.isDirectory(this.path)). }
true;public;0;10;/**  * This implementation opens a InputStream for the underlying file.  * @see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...)  */ ;/**  * This implementation opens a InputStream for the underlying file.  * @see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...)  */ @Override public InputStream getInputStream() throws IOException {     if (!exists()) {         throw new FileNotFoundException(getPath() + " (no such file or directory)").     }     if (Files.isDirectory(this.path)) {         throw new FileNotFoundException(getPath() + " (is a directory)").     }     return Files.newInputStream(this.path). }
true;public;0;4;/**  * This implementation checks whether the underlying file is marked as writable  * (and corresponds to an actual file with content, not to a directory).  * @see java.nio.file.Files#isWritable(Path)  * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)  */ ;/**  * This implementation checks whether the underlying file is marked as writable  * (and corresponds to an actual file with content, not to a directory).  * @see java.nio.file.Files#isWritable(Path)  * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)  */ @Override public boolean isWritable() {     return (Files.isWritable(this.path) && !Files.isDirectory(this.path)). }
true;public;0;7;/**  * This implementation opens a OutputStream for the underlying file.  * @see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...)  */ ;/**  * This implementation opens a OutputStream for the underlying file.  * @see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...)  */ @Override public OutputStream getOutputStream() throws IOException {     if (Files.isDirectory(this.path)) {         throw new FileNotFoundException(getPath() + " (is a directory)").     }     return Files.newOutputStream(this.path). }
true;public;0;4;/**  * This implementation returns a URL for the underlying file.  * @see java.nio.file.Path#toUri()  * @see java.net.URI#toURL()  */ ;/**  * This implementation returns a URL for the underlying file.  * @see java.nio.file.Path#toUri()  * @see java.net.URI#toURL()  */ @Override public URL getURL() throws IOException {     return this.path.toUri().toURL(). }
true;public;0;4;/**  * This implementation returns a URI for the underlying file.  * @see java.nio.file.Path#toUri()  */ ;/**  * This implementation returns a URI for the underlying file.  * @see java.nio.file.Path#toUri()  */ @Override public URI getURI() throws IOException {     return this.path.toUri(). }
true;public;0;4;/**  * This implementation always indicates a file.  */ ;/**  * This implementation always indicates a file.  */ @Override public boolean isFile() {     return true. }
true;public;0;11;/**  * This implementation returns the underlying File reference.  */ ;/**  * This implementation returns the underlying File reference.  */ @Override public File getFile() throws IOException {     try {         return this.path.toFile().     } catch (UnsupportedOperationException ex) {         // Do exception translation for cases where conversion is not possible.         throw new FileNotFoundException(this.path + " cannot be resolved to absolute file path").     } }
true;public;0;9;/**  * This implementation opens a Channel for the underlying file.  * @see Files#newByteChannel(Path, OpenOption...)  */ ;/**  * This implementation opens a Channel for the underlying file.  * @see Files#newByteChannel(Path, OpenOption...)  */ @Override public ReadableByteChannel readableChannel() throws IOException {     try {         return Files.newByteChannel(this.path, StandardOpenOption.READ).     } catch (NoSuchFileException ex) {         throw new FileNotFoundException(ex.getMessage()).     } }
true;public;0;4;/**  * This implementation opens a Channel for the underlying file.  * @see Files#newByteChannel(Path, OpenOption...)  */ ;/**  * This implementation opens a Channel for the underlying file.  * @see Files#newByteChannel(Path, OpenOption...)  */ @Override public WritableByteChannel writableChannel() throws IOException {     return Files.newByteChannel(this.path, StandardOpenOption.WRITE). }
true;public;0;4;/**  * This implementation returns the underlying file's length.  */ ;/**  * This implementation returns the underlying file's length.  */ @Override public long contentLength() throws IOException {     return Files.size(this.path). }
true;public;0;6;/**  * This implementation returns the underlying File's timestamp.  * @see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...)  */ ;/**  * This implementation returns the underlying File's timestamp.  * @see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...)  */ @Override public long lastModified() throws IOException {     // only a Path on the default file system can be converted to a File...     return Files.getLastModifiedTime(this.path).toMillis(). }
true;public;1;4;/**  * This implementation creates a PathResource, applying the given path  * relative to the path of the underlying file of this resource descriptor.  * @see java.nio.file.Path#resolve(String)  */ ;/**  * This implementation creates a PathResource, applying the given path  * relative to the path of the underlying file of this resource descriptor.  * @see java.nio.file.Path#resolve(String)  */ @Override public Resource createRelative(String relativePath) throws IOException {     return new PathResource(this.path.resolve(relativePath)). }
true;public;0;4;/**  * This implementation returns the name of the file.  * @see java.nio.file.Path#getFileName()  */ ;/**  * This implementation returns the name of the file.  * @see java.nio.file.Path#getFileName()  */ @Override public String getFilename() {     return this.path.getFileName().toString(). }
false;public;0;4;;@Override public String getDescription() {     return "path [" + this.path.toAbsolutePath() + "]". }
true;public;1;5;/**  * This implementation compares the underlying Path references.  */ ;/**  * This implementation compares the underlying Path references.  */ @Override public boolean equals(Object other) {     return (this == other || (other instanceof PathResource && this.path.equals(((PathResource) other).path))). }
true;public;0;4;/**  * This implementation returns the hash code of the underlying Path reference.  */ ;/**  * This implementation returns the hash code of the underlying Path reference.  */ @Override public int hashCode() {     return this.path.hashCode(). }
