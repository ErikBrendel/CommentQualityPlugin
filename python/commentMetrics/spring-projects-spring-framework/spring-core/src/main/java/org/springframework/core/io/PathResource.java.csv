# id;timestamp;commentText;codeText;commentWords;codeWords
PathResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1473882375;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return Files.newByteChannel(this.path, StandardOpenOption.READ)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,files,new,byte,channel,this,path,standard,open,option,read
PathResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1493804641;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return Files.newByteChannel(this.path, StandardOpenOption.READ)__	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,files,new,byte,channel,this,path,standard,open,option,read
PathResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1500332081;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return Files.newByteChannel(this.path, StandardOpenOption.READ)__	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,files,new,byte,channel,this,path,standard,open,option,read
PathResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1515363508;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			return Files.newByteChannel(this.path, StandardOpenOption.READ)__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,files,new,byte,channel,this,path,standard,open,option,read,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
PathResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1529093534;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			return Files.newByteChannel(this.path, StandardOpenOption.READ)__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,files,new,byte,channel,this,path,standard,open,option,read,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
PathResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1530174524;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			return Files.newByteChannel(this.path, StandardOpenOption.READ)__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,files,new,byte,channel,this,path,standard,open,option,read,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
PathResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1530190293;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			return Files.newByteChannel(this.path, StandardOpenOption.READ)__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,files,new,byte,channel,this,path,standard,open,option,read,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
PathResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1539119591;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			return Files.newByteChannel(this.path, StandardOpenOption.READ)__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,files,new,byte,channel,this,path,standard,open,option,read,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
PathResource -> public PathResource(URI uri);1372363092;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i> the_given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1398858661;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i> the_given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1401910463;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1405696918;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1425069697;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1444131013;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1467677340;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1468947211;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1473882375;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1493804641;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1500332081;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1515363508;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1529093534;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@see java.nio.file.Paths#get(URI)_@param uri a path URI;public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,see,java,nio,file,paths,get,uri,param,uri,a,path,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1530174524;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param uri a path URI_@see java.nio.file.Paths#get(URI);public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,uri,a,path,uri,see,java,nio,file,paths,get,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1530190293;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param uri a path URI_@see java.nio.file.Paths#get(URI);public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,uri,a,path,uri,see,java,nio,file,paths,get,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> public PathResource(URI uri);1539119591;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param uri a path URI_@see java.nio.file.Paths#get(URI);public PathResource(URI uri) {_		Assert.notNull(uri, "URI must not be null")__		this.path = Paths.get(uri).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,uri,a,path,uri,see,java,nio,file,paths,get,uri;public,path,resource,uri,uri,assert,not,null,uri,uri,must,not,be,null,this,path,paths,get,uri,normalize
PathResource -> @Override 	public File getFile() throws IOException;1372363092;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to "_					+ "absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1398858661;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to "_					+ "absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1401910463;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to " + "absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1405696918;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to " + "absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1425069697;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to " + "absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1444131013;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to " + "absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1467677340;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to " + "absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1468947211;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to " + "absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1473882375;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to " + "absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1493804641;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to " + "absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1500332081;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1515363508;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1529093534;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1530174524;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1530190293;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> @Override 	public File getFile() throws IOException;1539119591;This implementation returns the underlying File reference.;@Override_	public File getFile() throws IOException {_		try {_			return this.path.toFile()__		}_		catch (UnsupportedOperationException ex) {_			_			_			throw new FileNotFoundException(this.path + " cannot be resolved to absolute file path")__		}_	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,throws,ioexception,try,return,this,path,to,file,catch,unsupported,operation,exception,ex,throw,new,file,not,found,exception,this,path,cannot,be,resolved,to,absolute,file,path
PathResource -> public final String getPath();1372363092;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1398858661;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1401910463;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1405696918;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1425069697;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1444131013;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1467677340;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1468947211;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1473882375;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1493804641;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1500332081;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1515363508;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1529093534;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1530174524;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1530190293;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> public final String getPath();1539119591;Return the file path for this resource.;public final String getPath() {_		return this.path.toString()__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path,to,string
PathResource -> @Override 	public boolean isWritable();1372363092;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return Files.isWritable(this.path) && !Files.isDirectory(this.path)__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1398858661;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return Files.isWritable(this.path) && !Files.isDirectory(this.path)__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1401910463;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return Files.isWritable(this.path) && !Files.isDirectory(this.path)__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1405696918;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return Files.isWritable(this.path) && !Files.isDirectory(this.path)__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1425069697;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return Files.isWritable(this.path) && !Files.isDirectory(this.path)__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1444131013;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return (Files.isWritable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1467677340;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return (Files.isWritable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1468947211;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return (Files.isWritable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1473882375;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return (Files.isWritable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1493804641;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return (Files.isWritable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1500332081;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return (Files.isWritable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1515363508;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return (Files.isWritable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1529093534;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return (Files.isWritable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1530174524;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return (Files.isWritable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1530190293;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return (Files.isWritable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isWritable();1539119591;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isWritable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isWritable() {_		return (Files.isWritable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,writable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,writable,return,files,is,writable,this,path,files,is,directory,this,path
PathResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1493804641;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public WritableByteChannel writableChannel() throws IOException {_		return Files.newByteChannel(this.path, StandardOpenOption.WRITE)__	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,files,new,byte,channel,this,path,standard,open,option,write
PathResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1500332081;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public WritableByteChannel writableChannel() throws IOException {_		return Files.newByteChannel(this.path, StandardOpenOption.WRITE)__	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,files,new,byte,channel,this,path,standard,open,option,write
PathResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1515363508;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public WritableByteChannel writableChannel() throws IOException {_		return Files.newByteChannel(this.path, StandardOpenOption.WRITE)__	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,files,new,byte,channel,this,path,standard,open,option,write
PathResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1529093534;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public WritableByteChannel writableChannel() throws IOException {_		return Files.newByteChannel(this.path, StandardOpenOption.WRITE)__	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,files,new,byte,channel,this,path,standard,open,option,write
PathResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1530174524;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public WritableByteChannel writableChannel() throws IOException {_		return Files.newByteChannel(this.path, StandardOpenOption.WRITE)__	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,files,new,byte,channel,this,path,standard,open,option,write
PathResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1530190293;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public WritableByteChannel writableChannel() throws IOException {_		return Files.newByteChannel(this.path, StandardOpenOption.WRITE)__	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,files,new,byte,channel,this,path,standard,open,option,write
PathResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1539119591;This implementation opens a Channel for the underlying file._@see Files#newByteChannel(Path, OpenOption...);@Override_	public WritableByteChannel writableChannel() throws IOException {_		return Files.newByteChannel(this.path, StandardOpenOption.WRITE)__	};this,implementation,opens,a,channel,for,the,underlying,file,see,files,new,byte,channel,path,open,option;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,files,new,byte,channel,this,path,standard,open,option,write
PathResource -> @Override 	public boolean equals(Object obj);1372363092;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1398858661;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1401910463;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (this == obj ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,this,obj,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1405696918;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (this == obj ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,this,obj,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1425069697;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (this == obj ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,this,obj,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1444131013;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (this == obj ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,this,obj,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1467677340;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (this == obj ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,this,obj,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1468947211;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (this == obj ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,this,obj,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1473882375;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (this == obj ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,this,obj,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1493804641;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (this == obj ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,this,obj,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1500332081;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (this == obj ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,this,obj,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1515363508;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (this == obj ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,this,obj,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1529093534;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (this == obj ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,this,obj,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public boolean equals(Object obj);1530174524;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object obj) {_		return (this == obj ||_			(obj instanceof PathResource && this.path.equals(((PathResource) obj).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,obj,return,this,obj,obj,instanceof,path,resource,this,path,equals,path,resource,obj,path
PathResource -> @Override 	public long contentLength() throws IOException;1372363092;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1398858661;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1401910463;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1405696918;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1425069697;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1444131013;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1467677340;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1468947211;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1473882375;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1493804641;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1500332081;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1515363508;This implementation returns the underlying file's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1529093534;This implementation returns the underlying file's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1530174524;This implementation returns the underlying file's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1530190293;This implementation returns the underlying file's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public long contentLength() throws IOException;1539119591;This implementation returns the underlying file's length.;@Override_	public long contentLength() throws IOException {_		return Files.size(this.path)__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,files,size,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1372363092;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if(!exists()) {_			throw new FileNotFoundException(getPath() + " (No such file or directory)")__		}_		if(Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (Is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1398858661;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if(!exists()) {_			throw new FileNotFoundException(getPath() + " (No such file or directory)")__		}_		if(Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (Is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1401910463;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1405696918;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1425069697;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1444131013;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1467677340;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1468947211;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1473882375;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1493804641;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1500332081;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1515363508;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1529093534;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1530174524;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1530190293;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public InputStream getInputStream() throws IOException;1539119591;This implementation opens a InputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...);@Override_	public InputStream getInputStream() throws IOException {_		if (!exists()) {_			throw new FileNotFoundException(getPath() + " (no such file or directory)")__		}_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newInputStream(this.path)__	};this,implementation,opens,a,input,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,input,stream,path,open,option;override,public,input,stream,get,input,stream,throws,ioexception,if,exists,throw,new,file,not,found,exception,get,path,no,such,file,or,directory,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,input,stream,this,path
PathResource -> @Override 	public boolean isReadable();1372363092;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1398858661;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1401910463;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1405696918;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1425069697;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1444131013;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1467677340;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1468947211;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1473882375;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1493804641;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1500332081;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1515363508;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1529093534;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1530174524;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1530190293;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public boolean isReadable();1539119591;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.nio.file.Files#isReadable(Path)_@see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...);@Override_	public boolean isReadable() {_		return (Files.isReadable(this.path) && !Files.isDirectory(this.path))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,nio,file,files,is,readable,path,see,java,nio,file,files,is,directory,path,java,nio,file,link,option;override,public,boolean,is,readable,return,files,is,readable,this,path,files,is,directory,this,path
PathResource -> @Override 	public long lastModified() throws IOException;1372363092;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1398858661;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1401910463;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1405696918;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1425069697;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1444131013;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1467677340;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1468947211;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1473882375;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1493804641;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1500332081;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(this.path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,this,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1515363508;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(this.path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,this,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1529093534;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(this.path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,this,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1530174524;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(this.path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,this,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1530190293;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(this.path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,this,path,to,millis
PathResource -> @Override 	public long lastModified() throws IOException;1539119591;This implementation returns the underlying File's timestamp._@see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...);@Override_	public long lastModified() throws IOException {_		_		_		return Files.getLastModifiedTime(this.path).toMillis()__	};this,implementation,returns,the,underlying,file,s,timestamp,see,java,nio,file,files,get,last,modified,time,path,java,nio,file,link,option;override,public,long,last,modified,throws,ioexception,return,files,get,last,modified,time,this,path,to,millis
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1372363092;This implementation creates a FileResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,file,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1398858661;This implementation creates a FileResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,file,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1401910463;This implementation creates a FileResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,file,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1405696918;This implementation creates a FileResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,file,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1425069697;This implementation creates a FileResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,file,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1444131013;This implementation creates a FileResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,file,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1467677340;This implementation creates a FileResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,file,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1468947211;This implementation creates a FileResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,file,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1473882375;This implementation creates a FileResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,file,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1493804641;This implementation creates a FileResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,file,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1500332081;This implementation creates a PathResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1515363508;This implementation creates a PathResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1529093534;This implementation creates a PathResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1530174524;This implementation creates a PathResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1530190293;This implementation creates a PathResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public Resource createRelative(String relativePath) throws IOException;1539119591;This implementation creates a PathResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see java.nio.file.Path#resolve(String);@Override_	public Resource createRelative(String relativePath) throws IOException {_		return new PathResource(this.path.resolve(relativePath))__	};this,implementation,creates,a,path,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,java,nio,file,path,resolve,string;override,public,resource,create,relative,string,relative,path,throws,ioexception,return,new,path,resource,this,path,resolve,relative,path
PathResource -> @Override 	public String getFilename();1372363092;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1398858661;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1401910463;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1405696918;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1425069697;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1444131013;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1467677340;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1468947211;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1473882375;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1493804641;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1500332081;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1515363508;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1529093534;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1530174524;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1530190293;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public String getFilename();1539119591;This implementation returns the name of the file._@see java.nio.file.Path#getFileName();@Override_	public String getFilename() {_		return this.path.getFileName().toString()__	};this,implementation,returns,the,name,of,the,file,see,java,nio,file,path,get,file,name;override,public,string,get,filename,return,this,path,get,file,name,to,string
PathResource -> @Override 	public int hashCode();1372363092;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1398858661;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1401910463;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1405696918;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1425069697;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1444131013;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1467677340;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1468947211;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1473882375;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1493804641;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1500332081;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1515363508;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1529093534;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1530174524;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1530190293;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public int hashCode();1539119591;This implementation returns the hash code of the underlying Path reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,path,reference;override,public,int,hash,code,return,this,path,hash,code
PathResource -> @Override 	public URL getURL() throws IOException;1372363092;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1398858661;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1401910463;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1405696918;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1425069697;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1444131013;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1467677340;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1468947211;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1473882375;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1493804641;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1500332081;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1515363508;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1529093534;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1530174524;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1530190293;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public URL getURL() throws IOException;1539119591;This implementation returns a URL for the underlying file._@see java.nio.file.Path#toUri()_@see java.net.URI#toURL();@Override_	public URL getURL() throws IOException {_		return this.path.toUri().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,nio,file,path,to,uri,see,java,net,uri,to,url;override,public,url,get,url,throws,ioexception,return,this,path,to,uri,to,url
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1372363092;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if(Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (Is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1398858661;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if(Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (Is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1401910463;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if(Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1405696918;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1425069697;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1444131013;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1467677340;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1468947211;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1473882375;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1493804641;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1500332081;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1515363508;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1529093534;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1530174524;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1530190293;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public OutputStream getOutputStream() throws IOException;1539119591;This implementation opens a OutputStream for the underlying file._@see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...);@Override_	public OutputStream getOutputStream() throws IOException {_		if (Files.isDirectory(this.path)) {_			throw new FileNotFoundException(getPath() + " (is a directory)")__		}_		return Files.newOutputStream(this.path)__	};this,implementation,opens,a,output,stream,for,the,underlying,file,see,java,nio,file,spi,file,system,provider,new,output,stream,path,open,option;override,public,output,stream,get,output,stream,throws,ioexception,if,files,is,directory,this,path,throw,new,file,not,found,exception,get,path,is,a,directory,return,files,new,output,stream,this,path
PathResource -> @Override 	public boolean equals(Object other);1530190293;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object other) {_		return (this == other || (other instanceof PathResource &&_				this.path.equals(((PathResource) other).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,other,return,this,other,other,instanceof,path,resource,this,path,equals,path,resource,other,path
PathResource -> @Override 	public boolean equals(Object other);1539119591;This implementation compares the underlying Path references.;@Override_	public boolean equals(Object other) {_		return (this == other || (other instanceof PathResource &&_				this.path.equals(((PathResource) other).path)))__	};this,implementation,compares,the,underlying,path,references;override,public,boolean,equals,object,other,return,this,other,other,instanceof,path,resource,this,path,equals,path,resource,other,path
PathResource -> @Override 	public URI getURI() throws IOException;1372363092;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1398858661;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1401910463;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1405696918;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1425069697;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1444131013;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1467677340;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1468947211;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1473882375;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1493804641;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1500332081;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1515363508;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1529093534;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1530174524;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1530190293;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public URI getURI() throws IOException;1539119591;This implementation returns a URI for the underlying file._@see java.nio.file.Path#toUri();@Override_	public URI getURI() throws IOException {_		return this.path.toUri()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,nio,file,path,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,path,to,uri
PathResource -> @Override 	public boolean exists();1372363092;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1398858661;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1401910463;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1405696918;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1425069697;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1444131013;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1467677340;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1468947211;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1473882375;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1493804641;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1500332081;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1515363508;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1529093534;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1530174524;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1530190293;This implementation returns whether the underlying file exists._@see org.springframework.core.io.PathResource#exists();@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,org,springframework,core,io,path,resource,exists;override,public,boolean,exists,return,files,exists,this,path
PathResource -> @Override 	public boolean exists();1539119591;This implementation returns whether the underlying file exists._@see java.nio.file.Files#exists(Path, java.nio.file.LinkOption...);@Override_	public boolean exists() {_		return Files.exists(this.path)__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,nio,file,files,exists,path,java,nio,file,link,option;override,public,boolean,exists,return,files,exists,this,path
PathResource -> public PathResource(String path);1372363092;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i> the_given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1398858661;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i> the_given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1401910463;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1405696918;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1425069697;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1444131013;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1467677340;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1468947211;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1473882375;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1493804641;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1500332081;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1515363508;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1529093534;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1530174524;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1530190293;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> public PathResource(String path);1539119591;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a path_@see java.nio.file.Paths#get(String, String...);public PathResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = Paths.get(path).normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,see,java,nio,file,paths,get,string,string;public,path,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,paths,get,path,normalize
PathResource -> @Override 	public boolean isFile();1468947211;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
PathResource -> @Override 	public boolean isFile();1473882375;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
PathResource -> @Override 	public boolean isFile();1493804641;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
PathResource -> @Override 	public boolean isFile();1500332081;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
PathResource -> @Override 	public boolean isFile();1515363508;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
PathResource -> @Override 	public boolean isFile();1529093534;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
PathResource -> @Override 	public boolean isFile();1530174524;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
PathResource -> @Override 	public boolean isFile();1530190293;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
PathResource -> @Override 	public boolean isFile();1539119591;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
PathResource -> public PathResource(Path path);1372363092;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i> the_given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1398858661;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i> the_given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1401910463;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1405696918;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1425069697;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1444131013;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1467677340;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1468947211;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1473882375;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1493804641;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root:_e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1500332081;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1515363508;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1529093534;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1530174524;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1530190293;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
PathResource -> public PathResource(Path path);1539119591;Create a new PathResource from a Path handle._<p>Note: Unlike {@link FileSystemResource}, when building relative resources_via {@link #createRelative}, the relative path will be built <i>underneath</i>_the given root: e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!_@param path a Path handle;public PathResource(Path path) {_		Assert.notNull(path, "Path must not be null")__		this.path = path.normalize()__	};create,a,new,path,resource,from,a,path,handle,p,note,unlike,link,file,system,resource,when,building,relative,resources,via,link,create,relative,the,relative,path,will,be,built,i,underneath,i,the,given,root,e,g,paths,get,c,dir1,relative,path,dir2,c,dir1,dir2,param,path,a,path,handle;public,path,resource,path,path,assert,not,null,path,path,must,not,be,null,this,path,path,normalize
