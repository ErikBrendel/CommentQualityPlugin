commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(Object[].class, Object[].class)). }
false;public;2;4;;@Override public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     return this.helperConverter.matches(sourceType, targetType). }
false;public;3;14;;@Override @Nullable public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (this.conversionService instanceof GenericConversionService) {         TypeDescriptor targetElement = targetType.getElementTypeDescriptor().         if (targetElement != null && ((GenericConversionService) this.conversionService).canBypassConvert(sourceType.getElementTypeDescriptor(), targetElement)) {             return source.         }     }     List<Object> sourceList = Arrays.asList(ObjectUtils.toObjectArray(source)).     return this.helperConverter.convert(sourceList, sourceType, targetType). }
