commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {     Class<?> clazz = elementType.toClass().     return (super.canEncode(elementType, mimeType) && Resource.class.isAssignableFrom(clazz)). }
false;protected;5;11;;@Override protected Flux<DataBuffer> encode(Resource resource, DataBufferFactory dataBufferFactory, ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {     if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {         String logPrefix = Hints.getLogPrefix(hints).         logger.debug(logPrefix + "Writing [" + resource + "]").     }     return DataBufferUtils.read(resource, dataBufferFactory, this.bufferSize). }
