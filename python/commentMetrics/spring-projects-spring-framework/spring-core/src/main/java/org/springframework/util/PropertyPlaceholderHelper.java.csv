# id;timestamp;commentText;codeText;commentWords;codeWords
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1328020251;Replaces all placeholders of format <code>${name}</code> with the corresponding property_from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced._@param properties the <code>Properties</code> to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "Argument 'properties' must not be null.")__		return replacePlaceholders(value, new PlaceholderResolver() {_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,code,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,code,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,argument,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1337255441;Replaces all placeholders of format <code>${name}</code> with the corresponding property_from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced._@param properties the <code>Properties</code> to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "Argument 'properties' must not be null.")__		return replacePlaceholders(value, new PlaceholderResolver() {_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,code,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,code,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,argument,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1341582340;Replaces all placeholders of format <code>${name}</code> with the corresponding property_from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced._@param properties the <code>Properties</code> to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "Argument 'properties' must not be null.")__		return replacePlaceholders(value, new PlaceholderResolver() {_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,code,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,code,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,argument,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1351648402;Replaces all placeholders of format <code>${name}</code> with the corresponding property_from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced._@param properties the <code>Properties</code> to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "Argument 'properties' must not be null.")__		return replacePlaceholders(value, new PlaceholderResolver() {_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,code,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,code,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,argument,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1356735495;Replaces all placeholders of format {@code ${name}} with the corresponding property_from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced._@param properties the {@code Properties} to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "Argument 'properties' must not be null.")__		return replacePlaceholders(value, new PlaceholderResolver() {_			@Override_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,argument,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,override,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1357119239;Replaces all placeholders of format {@code ${name}} with the corresponding property_from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced._@param properties the {@code Properties} to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "Argument 'properties' must not be null.")__		return replacePlaceholders(value, new PlaceholderResolver() {_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,argument,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1368482696;Replaces all placeholders of format {@code ${name}} with the corresponding property_from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced._@param properties the {@code Properties} to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "Argument 'properties' must not be null.")__		return replacePlaceholders(value, new PlaceholderResolver() {_			@Override_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,argument,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,override,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1375285844;Replaces all placeholders of format {@code ${name}} with the corresponding_property from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced._@param properties the {@code Properties} to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "Argument 'properties' must not be null.")__		return replacePlaceholders(value, new PlaceholderResolver() {_			@Override_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,argument,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,override,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1407864216;Replaces all placeholders of format {@code ${name}} with the corresponding_property from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced_@param properties the {@code Properties} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "'properties' must not be null")__		return replacePlaceholders(value, new PlaceholderResolver() {_			@Override_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,override,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1467730834;Replaces all placeholders of format {@code ${name}} with the corresponding_property from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced_@param properties the {@code Properties} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "'properties' must not be null")__		return replacePlaceholders(value, new PlaceholderResolver() {_			@Override_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,override,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1467808333;Replaces all placeholders of format {@code ${name}} with the corresponding_property from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced_@param properties the {@code Properties} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "'properties' must not be null")__		return replacePlaceholders(value, new PlaceholderResolver() {_			@Override_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,override,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1486719670;Replaces all placeholders of format {@code ${name}} with the corresponding_property from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced_@param properties the {@code Properties} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "'properties' must not be null")__		return replacePlaceholders(value, new PlaceholderResolver() {_			@Override_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,override,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1495868221;Replaces all placeholders of format {@code ${name}} with the corresponding_property from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced_@param properties the {@code Properties} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "'properties' must not be null")__		return replacePlaceholders(value, new PlaceholderResolver() {_			@Override_			public String resolvePlaceholder(String placeholderName) {_				return properties.getProperty(placeholderName)__			}_		})__	};replaces,all,placeholders,of,format,code,name,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,properties,must,not,be,null,return,replace,placeholders,value,new,placeholder,resolver,override,public,string,resolve,placeholder,string,placeholder,name,return,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1497341397;Replaces all placeholders of format {@code ${name}} with the corresponding_property from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced_@param properties the {@code Properties} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "'properties' must not be null")__		return replacePlaceholders(value, placeholderName -> properties.getProperty(placeholderName))__	};replaces,all,placeholders,of,format,code,name,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,properties,must,not,be,null,return,replace,placeholders,value,placeholder,name,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1498780456;Replaces all placeholders of format {@code ${name}} with the corresponding_property from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced_@param properties the {@code Properties} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "'properties' must not be null")__		return replacePlaceholders(value, placeholderName -> properties.getProperty(placeholderName))__	};replaces,all,placeholders,of,format,code,name,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,properties,must,not,be,null,return,replace,placeholders,value,placeholder,name,properties,get,property,placeholder,name
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, final Properties properties);1518260986;Replaces all placeholders of format {@code ${name}} with the corresponding_property from the supplied {@link Properties}._@param value the value containing the placeholders to be replaced_@param properties the {@code Properties} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, final Properties properties) {_		Assert.notNull(properties, "'properties' must not be null")__		return replacePlaceholders(value, properties::getProperty)__	};replaces,all,placeholders,of,format,code,name,with,the,corresponding,property,from,the,supplied,link,properties,param,value,the,value,containing,the,placeholders,to,be,replaced,param,properties,the,code,properties,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,final,properties,properties,assert,not,null,properties,properties,must,not,be,null,return,replace,placeholders,value,properties,get,property
PropertyPlaceholderHelper -> PlaceholderResolver -> String resolvePlaceholder(String placeholderName)_;1328020251;Resolves the supplied placeholder name into the replacement value._@param placeholderName the name of the placeholder to resolve._@return the replacement value or <code>null</code> if no replacement is to be made.;String resolvePlaceholder(String placeholderName)_;resolves,the,supplied,placeholder,name,into,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,code,if,no,replacement,is,to,be,made;string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> String resolvePlaceholder(String placeholderName)_;1337255441;Resolves the supplied placeholder name into the replacement value._@param placeholderName the name of the placeholder to resolve._@return the replacement value or <code>null</code> if no replacement is to be made.;String resolvePlaceholder(String placeholderName)_;resolves,the,supplied,placeholder,name,into,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,code,if,no,replacement,is,to,be,made;string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> String resolvePlaceholder(String placeholderName)_;1341582340;Resolves the supplied placeholder name into the replacement value._@param placeholderName the name of the placeholder to resolve._@return the replacement value or <code>null</code> if no replacement is to be made.;String resolvePlaceholder(String placeholderName)_;resolves,the,supplied,placeholder,name,into,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,code,if,no,replacement,is,to,be,made;string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> String resolvePlaceholder(String placeholderName)_;1351648402;Resolves the supplied placeholder name into the replacement value._@param placeholderName the name of the placeholder to resolve._@return the replacement value or <code>null</code> if no replacement is to be made.;String resolvePlaceholder(String placeholderName)_;resolves,the,supplied,placeholder,name,into,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,code,if,no,replacement,is,to,be,made;string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> String resolvePlaceholder(String placeholderName)_;1356735495;Resolves the supplied placeholder name into the replacement value._@param placeholderName the name of the placeholder to resolve._@return the replacement value or {@code null} if no replacement is to be made.;String resolvePlaceholder(String placeholderName)_;resolves,the,supplied,placeholder,name,into,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,if,no,replacement,is,to,be,made;string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> String resolvePlaceholder(String placeholderName)_;1357119239;Resolves the supplied placeholder name into the replacement value._@param placeholderName the name of the placeholder to resolve._@return the replacement value or {@code null} if no replacement is to be made.;String resolvePlaceholder(String placeholderName)_;resolves,the,supplied,placeholder,name,into,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,if,no,replacement,is,to,be,made;string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> String resolvePlaceholder(String placeholderName)_;1368482696;Resolves the supplied placeholder name into the replacement value._@param placeholderName the name of the placeholder to resolve._@return the replacement value or {@code null} if no replacement is to be made.;String resolvePlaceholder(String placeholderName)_;resolves,the,supplied,placeholder,name,into,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,if,no,replacement,is,to,be,made;string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> String resolvePlaceholder(String placeholderName)_;1375285844;Resolves the supplied placeholder name into the replacement value._@param placeholderName the name of the placeholder to resolve_@return the replacement value or {@code null} if no replacement is to be made;String resolvePlaceholder(String placeholderName)_;resolves,the,supplied,placeholder,name,into,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,if,no,replacement,is,to,be,made;string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> String resolvePlaceholder(String placeholderName)_;1407864216;Resolve the supplied placeholder name to the replacement value._@param placeholderName the name of the placeholder to resolve_@return the replacement value, or {@code null} if no replacement is to be made;String resolvePlaceholder(String placeholderName)_;resolve,the,supplied,placeholder,name,to,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,if,no,replacement,is,to,be,made;string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> String resolvePlaceholder(String placeholderName)_;1467730834;Resolve the supplied placeholder name to the replacement value._@param placeholderName the name of the placeholder to resolve_@return the replacement value, or {@code null} if no replacement is to be made;String resolvePlaceholder(String placeholderName)_;resolve,the,supplied,placeholder,name,to,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,if,no,replacement,is,to,be,made;string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> String resolvePlaceholder(String placeholderName)_;1467808333;Resolve the supplied placeholder name to the replacement value._@param placeholderName the name of the placeholder to resolve_@return the replacement value, or {@code null} if no replacement is to be made;String resolvePlaceholder(String placeholderName)_;resolve,the,supplied,placeholder,name,to,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,if,no,replacement,is,to,be,made;string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> String resolvePlaceholder(String placeholderName)_;1486719670;Resolve the supplied placeholder name to the replacement value._@param placeholderName the name of the placeholder to resolve_@return the replacement value, or {@code null} if no replacement is to be made;String resolvePlaceholder(String placeholderName)_;resolve,the,supplied,placeholder,name,to,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,if,no,replacement,is,to,be,made;string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			String valueSeparator, boolean ignoreUnresolvablePlaceholders);1328020251;Creates a new <code>PropertyPlaceholderHelper</code> that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should be ignored_(<code>true</code>) or cause an exception (<code>false</code>).;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "placeholderPrefix must not be null")__		Assert.notNull(placeholderSuffix, "placeholderSuffix must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,code,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,code,or,cause,an,exception,code,false,code;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			String valueSeparator, boolean ignoreUnresolvablePlaceholders);1337255441;Creates a new <code>PropertyPlaceholderHelper</code> that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should be ignored_(<code>true</code>) or cause an exception (<code>false</code>).;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "placeholderPrefix must not be null")__		Assert.notNull(placeholderSuffix, "placeholderSuffix must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,code,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,code,or,cause,an,exception,code,false,code;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			String valueSeparator, boolean ignoreUnresolvablePlaceholders);1341582340;Creates a new <code>PropertyPlaceholderHelper</code> that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should be ignored_(<code>true</code>) or cause an exception (<code>false</code>).;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "placeholderPrefix must not be null")__		Assert.notNull(placeholderSuffix, "placeholderSuffix must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,code,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,code,or,cause,an,exception,code,false,code;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			String valueSeparator, boolean ignoreUnresolvablePlaceholders);1351648402;Creates a new <code>PropertyPlaceholderHelper</code> that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should be ignored_(<code>true</code>) or cause an exception (<code>false</code>).;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "placeholderPrefix must not be null")__		Assert.notNull(placeholderSuffix, "placeholderSuffix must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,code,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,code,or,cause,an,exception,code,false,code;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			String valueSeparator, boolean ignoreUnresolvablePlaceholders);1356735495;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should be ignored_({@code true}) or cause an exception ({@code false}).;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "placeholderPrefix must not be null")__		Assert.notNull(placeholderSuffix, "placeholderSuffix must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,or,cause,an,exception,code,false;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			String valueSeparator, boolean ignoreUnresolvablePlaceholders);1357119239;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should be ignored_({@code true}) or cause an exception ({@code false}).;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "placeholderPrefix must not be null")__		Assert.notNull(placeholderSuffix, "placeholderSuffix must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,or,cause,an,exception,code,false;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			String valueSeparator, boolean ignoreUnresolvablePlaceholders);1368482696;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should be ignored_({@code true}) or cause an exception ({@code false}).;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "placeholderPrefix must not be null")__		Assert.notNull(placeholderSuffix, "placeholderSuffix must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,or,cause,an,exception,code,false;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			String valueSeparator, boolean ignoreUnresolvablePlaceholders);1375285844;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should be ignored_({@code true}) or cause an exception ({@code false}).;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "placeholderPrefix must not be null")__		Assert.notNull(placeholderSuffix, "placeholderSuffix must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,or,cause,an,exception,code,false;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			String valueSeparator, boolean ignoreUnresolvablePlaceholders);1407864216;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should_be ignored ({@code true}) or cause an exception ({@code false});public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "'placeholderPrefix' must not be null")__		Assert.notNull(placeholderSuffix, "'placeholderSuffix' must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,or,cause,an,exception,code,false;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			String valueSeparator, boolean ignoreUnresolvablePlaceholders);1467730834;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should_be ignored ({@code true}) or cause an exception ({@code false});public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "'placeholderPrefix' must not be null")__		Assert.notNull(placeholderSuffix, "'placeholderSuffix' must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,or,cause,an,exception,code,false;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			String valueSeparator, boolean ignoreUnresolvablePlaceholders);1467808333;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should_be ignored ({@code true}) or cause an exception ({@code false});public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "'placeholderPrefix' must not be null")__		Assert.notNull(placeholderSuffix, "'placeholderSuffix' must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,or,cause,an,exception,code,false;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			String valueSeparator, boolean ignoreUnresolvablePlaceholders);1486719670;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should_be ignored ({@code true}) or cause an exception ({@code false});public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "'placeholderPrefix' must not be null")__		Assert.notNull(placeholderSuffix, "'placeholderSuffix' must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,or,cause,an,exception,code,false;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1328020251;Creates a new <code>PropertyPlaceholderHelper</code> that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder._@param placeholderSuffix the suffix that denotes the end of a placeholder.;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,code,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1337255441;Creates a new <code>PropertyPlaceholderHelper</code> that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder._@param placeholderSuffix the suffix that denotes the end of a placeholder.;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,code,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1341582340;Creates a new <code>PropertyPlaceholderHelper</code> that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder._@param placeholderSuffix the suffix that denotes the end of a placeholder.;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,code,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1351648402;Creates a new <code>PropertyPlaceholderHelper</code> that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder._@param placeholderSuffix the suffix that denotes the end of a placeholder.;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,code,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1356735495;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder._@param placeholderSuffix the suffix that denotes the end of a placeholder.;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1357119239;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder._@param placeholderSuffix the suffix that denotes the end of a placeholder.;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1368482696;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder._@param placeholderSuffix the suffix that denotes the end of a placeholder.;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1375285844;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder._@param placeholderSuffix the suffix that denotes the end of a placeholder.;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1407864216;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1467730834;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1467808333;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1486719670;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1495868221;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1497341397;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1498780456;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix);1518260986;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._Unresolvable placeholders are ignored._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder;public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {_		this(placeholderPrefix, placeholderSuffix, null, true)__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,unresolvable,placeholders,are,ignored,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,this,placeholder,prefix,placeholder,suffix,null,true
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			@Nullable String valueSeparator, boolean ignoreUnresolvablePlaceholders);1495868221;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should_be ignored ({@code true}) or cause an exception ({@code false});public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			@Nullable String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "'placeholderPrefix' must not be null")__		Assert.notNull(placeholderSuffix, "'placeholderSuffix' must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,or,cause,an,exception,code,false;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,nullable,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			@Nullable String valueSeparator, boolean ignoreUnresolvablePlaceholders);1497341397;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should_be ignored ({@code true}) or cause an exception ({@code false});public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			@Nullable String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "'placeholderPrefix' must not be null")__		Assert.notNull(placeholderSuffix, "'placeholderSuffix' must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,or,cause,an,exception,code,false;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,nullable,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			@Nullable String valueSeparator, boolean ignoreUnresolvablePlaceholders);1498780456;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should_be ignored ({@code true}) or cause an exception ({@code false});public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			@Nullable String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "'placeholderPrefix' must not be null")__		Assert.notNull(placeholderSuffix, "'placeholderSuffix' must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,or,cause,an,exception,code,false;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,nullable,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, 			@Nullable String valueSeparator, boolean ignoreUnresolvablePlaceholders);1518260986;Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix._@param placeholderPrefix the prefix that denotes the start of a placeholder_@param placeholderSuffix the suffix that denotes the end of a placeholder_@param valueSeparator the separating character between the placeholder variable_and the associated default value, if any_@param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should_be ignored ({@code true}) or cause an exception ({@code false});public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,_			@Nullable String valueSeparator, boolean ignoreUnresolvablePlaceholders) {__		Assert.notNull(placeholderPrefix, "'placeholderPrefix' must not be null")__		Assert.notNull(placeholderSuffix, "'placeholderSuffix' must not be null")__		this.placeholderPrefix = placeholderPrefix__		this.placeholderSuffix = placeholderSuffix__		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix)__		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {_			this.simplePrefix = simplePrefixForSuffix__		}_		else {_			this.simplePrefix = this.placeholderPrefix__		}_		this.valueSeparator = valueSeparator__		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders__	};creates,a,new,code,property,placeholder,helper,that,uses,the,supplied,prefix,and,suffix,param,placeholder,prefix,the,prefix,that,denotes,the,start,of,a,placeholder,param,placeholder,suffix,the,suffix,that,denotes,the,end,of,a,placeholder,param,value,separator,the,separating,character,between,the,placeholder,variable,and,the,associated,default,value,if,any,param,ignore,unresolvable,placeholders,indicates,whether,unresolvable,placeholders,should,be,ignored,code,true,or,cause,an,exception,code,false;public,property,placeholder,helper,string,placeholder,prefix,string,placeholder,suffix,nullable,string,value,separator,boolean,ignore,unresolvable,placeholders,assert,not,null,placeholder,prefix,placeholder,prefix,must,not,be,null,assert,not,null,placeholder,suffix,placeholder,suffix,must,not,be,null,this,placeholder,prefix,placeholder,prefix,this,placeholder,suffix,placeholder,suffix,string,simple,prefix,for,suffix,well,known,simple,prefixes,get,this,placeholder,suffix,if,simple,prefix,for,suffix,null,this,placeholder,prefix,ends,with,simple,prefix,for,suffix,this,simple,prefix,simple,prefix,for,suffix,else,this,simple,prefix,this,placeholder,prefix,this,value,separator,value,separator,this,ignore,unresolvable,placeholders,ignore,unresolvable,placeholders
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1328020251;Replaces all placeholders of format <code>${name}</code> with the value returned from the supplied_{@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced._@param placeholderResolver the <code>PlaceholderResolver</code> to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "Argument 'value' must not be null.")__		return parseStringValue(value, placeholderResolver, new HashSet<String>())__	};replaces,all,placeholders,of,format,code,name,code,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,code,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,argument,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set,string
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1337255441;Replaces all placeholders of format <code>${name}</code> with the value returned from the supplied_{@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced._@param placeholderResolver the <code>PlaceholderResolver</code> to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "Argument 'value' must not be null.")__		return parseStringValue(value, placeholderResolver, new HashSet<String>())__	};replaces,all,placeholders,of,format,code,name,code,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,code,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,argument,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set,string
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1341582340;Replaces all placeholders of format <code>${name}</code> with the value returned from the supplied_{@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced._@param placeholderResolver the <code>PlaceholderResolver</code> to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "Argument 'value' must not be null.")__		return parseStringValue(value, placeholderResolver, new HashSet<String>())__	};replaces,all,placeholders,of,format,code,name,code,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,code,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,argument,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set,string
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1351648402;Replaces all placeholders of format <code>${name}</code> with the value returned from the supplied_{@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced._@param placeholderResolver the <code>PlaceholderResolver</code> to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "Argument 'value' must not be null.")__		return parseStringValue(value, placeholderResolver, new HashSet<String>())__	};replaces,all,placeholders,of,format,code,name,code,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,code,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,argument,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set,string
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1356735495;Replaces all placeholders of format {@code ${name}} with the value returned from the supplied_{@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced._@param placeholderResolver the {@code PlaceholderResolver} to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "Argument 'value' must not be null.")__		return parseStringValue(value, placeholderResolver, new HashSet<String>())__	};replaces,all,placeholders,of,format,code,name,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,argument,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set,string
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1357119239;Replaces all placeholders of format {@code ${name}} with the value returned from the supplied_{@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced._@param placeholderResolver the {@code PlaceholderResolver} to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "Argument 'value' must not be null.")__		return parseStringValue(value, placeholderResolver, new HashSet<String>())__	};replaces,all,placeholders,of,format,code,name,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,argument,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set,string
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1368482696;Replaces all placeholders of format {@code ${name}} with the value returned from the supplied_{@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced._@param placeholderResolver the {@code PlaceholderResolver} to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "Argument 'value' must not be null.")__		return parseStringValue(value, placeholderResolver, new HashSet<String>())__	};replaces,all,placeholders,of,format,code,name,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,argument,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set,string
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1375285844;Replaces all placeholders of format {@code ${name}} with the value returned_from the supplied {@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced._@param placeholderResolver the {@code PlaceholderResolver} to use for replacement._@return the supplied value with placeholders replaced inline.;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "Argument 'value' must not be null.")__		return parseStringValue(value, placeholderResolver, new HashSet<String>())__	};replaces,all,placeholders,of,format,code,name,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,argument,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set,string
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1407864216;Replaces all placeholders of format {@code ${name}} with the value returned_from the supplied {@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced_@param placeholderResolver the {@code PlaceholderResolver} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "'value' must not be null")__		return parseStringValue(value, placeholderResolver, new HashSet<String>())__	};replaces,all,placeholders,of,format,code,name,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set,string
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1467730834;Replaces all placeholders of format {@code ${name}} with the value returned_from the supplied {@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced_@param placeholderResolver the {@code PlaceholderResolver} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "'value' must not be null")__		return parseStringValue(value, placeholderResolver, new HashSet<>())__	};replaces,all,placeholders,of,format,code,name,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1467808333;Replaces all placeholders of format {@code ${name}} with the value returned_from the supplied {@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced_@param placeholderResolver the {@code PlaceholderResolver} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "'value' must not be null")__		return parseStringValue(value, placeholderResolver, new HashSet<>())__	};replaces,all,placeholders,of,format,code,name,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1486719670;Replaces all placeholders of format {@code ${name}} with the value returned_from the supplied {@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced_@param placeholderResolver the {@code PlaceholderResolver} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "'value' must not be null")__		return parseStringValue(value, placeholderResolver, new HashSet<>())__	};replaces,all,placeholders,of,format,code,name,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1495868221;Replaces all placeholders of format {@code ${name}} with the value returned_from the supplied {@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced_@param placeholderResolver the {@code PlaceholderResolver} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "'value' must not be null")__		return parseStringValue(value, placeholderResolver, new HashSet<>())__	};replaces,all,placeholders,of,format,code,name,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1497341397;Replaces all placeholders of format {@code ${name}} with the value returned_from the supplied {@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced_@param placeholderResolver the {@code PlaceholderResolver} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "'value' must not be null")__		return parseStringValue(value, placeholderResolver, new HashSet<>())__	};replaces,all,placeholders,of,format,code,name,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1498780456;Replaces all placeholders of format {@code ${name}} with the value returned_from the supplied {@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced_@param placeholderResolver the {@code PlaceholderResolver} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "'value' must not be null")__		return parseStringValue(value, placeholderResolver, new HashSet<>())__	};replaces,all,placeholders,of,format,code,name,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set
PropertyPlaceholderHelper -> public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver);1518260986;Replaces all placeholders of format {@code ${name}} with the value returned_from the supplied {@link PlaceholderResolver}._@param value the value containing the placeholders to be replaced_@param placeholderResolver the {@code PlaceholderResolver} to use for replacement_@return the supplied value with placeholders replaced inline;public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {_		Assert.notNull(value, "'value' must not be null")__		return parseStringValue(value, placeholderResolver, new HashSet<>())__	};replaces,all,placeholders,of,format,code,name,with,the,value,returned,from,the,supplied,link,placeholder,resolver,param,value,the,value,containing,the,placeholders,to,be,replaced,param,placeholder,resolver,the,code,placeholder,resolver,to,use,for,replacement,return,the,supplied,value,with,placeholders,replaced,inline;public,string,replace,placeholders,string,value,placeholder,resolver,placeholder,resolver,assert,not,null,value,value,must,not,be,null,return,parse,string,value,value,placeholder,resolver,new,hash,set
PropertyPlaceholderHelper -> PlaceholderResolver -> @Nullable 		String resolvePlaceholder(String placeholderName)_;1495868221;Resolve the supplied placeholder name to the replacement value._@param placeholderName the name of the placeholder to resolve_@return the replacement value, or {@code null} if no replacement is to be made;@Nullable_		String resolvePlaceholder(String placeholderName)_;resolve,the,supplied,placeholder,name,to,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,if,no,replacement,is,to,be,made;nullable,string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> @Nullable 		String resolvePlaceholder(String placeholderName)_;1497341397;Resolve the supplied placeholder name to the replacement value._@param placeholderName the name of the placeholder to resolve_@return the replacement value, or {@code null} if no replacement is to be made;@Nullable_		String resolvePlaceholder(String placeholderName)_;resolve,the,supplied,placeholder,name,to,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,if,no,replacement,is,to,be,made;nullable,string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> @Nullable 		String resolvePlaceholder(String placeholderName)_;1498780456;Resolve the supplied placeholder name to the replacement value._@param placeholderName the name of the placeholder to resolve_@return the replacement value, or {@code null} if no replacement is to be made;@Nullable_		String resolvePlaceholder(String placeholderName)_;resolve,the,supplied,placeholder,name,to,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,if,no,replacement,is,to,be,made;nullable,string,resolve,placeholder,string,placeholder,name
PropertyPlaceholderHelper -> PlaceholderResolver -> @Nullable 		String resolvePlaceholder(String placeholderName)_;1518260986;Resolve the supplied placeholder name to the replacement value._@param placeholderName the name of the placeholder to resolve_@return the replacement value, or {@code null} if no replacement is to be made;@Nullable_		String resolvePlaceholder(String placeholderName)_;resolve,the,supplied,placeholder,name,to,the,replacement,value,param,placeholder,name,the,name,of,the,placeholder,to,resolve,return,the,replacement,value,or,code,null,if,no,replacement,is,to,be,made;nullable,string,resolve,placeholder,string,placeholder,name
