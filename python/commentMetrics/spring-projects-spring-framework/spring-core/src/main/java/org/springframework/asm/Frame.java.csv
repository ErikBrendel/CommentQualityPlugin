# id;timestamp;commentText;codeText;commentWords;codeWords
Frame -> private void pop(final int elements);1366718246;Pops the given number of types from the output frame stack.__@param elements_the number of types that must be popped.;private void pop(final int elements) {_        if (outputStackTop >= elements) {_            outputStackTop -= elements__        } else {_            _            _            _            owner.inputStackTop -= elements - outputStackTop__            outputStackTop = 0__        }_    };pops,the,given,number,of,types,from,the,output,frame,stack,param,elements,the,number,of,types,that,must,be,popped;private,void,pop,final,int,elements,if,output,stack,top,elements,output,stack,top,elements,else,owner,input,stack,top,elements,output,stack,top,output,stack,top,0
Frame -> private void pop(final int elements);1385423968;Pops the given number of types from the output frame stack.__@param elements_the number of types that must be popped.;private void pop(final int elements) {_        if (outputStackTop >= elements) {_            outputStackTop -= elements__        } else {_            _            _            _            owner.inputStackTop -= elements - outputStackTop__            outputStackTop = 0__        }_    };pops,the,given,number,of,types,from,the,output,frame,stack,param,elements,the,number,of,types,that,must,be,popped;private,void,pop,final,int,elements,if,output,stack,top,elements,output,stack,top,elements,else,owner,input,stack,top,elements,output,stack,top,output,stack,top,0
Frame -> private void pop(final int elements);1395273982;Pops the given number of types from the output frame stack.__@param elements_the number of types that must be popped.;private void pop(final int elements) {_        if (outputStackTop >= elements) {_            outputStackTop -= elements__        } else {_            _            _            _            owner.inputStackTop -= elements - outputStackTop__            outputStackTop = 0__        }_    };pops,the,given,number,of,types,from,the,output,frame,stack,param,elements,the,number,of,types,that,must,be,popped;private,void,pop,final,int,elements,if,output,stack,top,elements,output,stack,top,elements,else,owner,input,stack,top,elements,output,stack,top,output,stack,top,0
Frame -> private void pop(final int elements);1397644526;Pops the given number of types from the output frame stack.__@param elements_the number of types that must be popped.;private void pop(final int elements) {_        if (outputStackTop >= elements) {_            outputStackTop -= elements__        } else {_            _            _            _            owner.inputStackTop -= elements - outputStackTop__            outputStackTop = 0__        }_    };pops,the,given,number,of,types,from,the,output,frame,stack,param,elements,the,number,of,types,that,must,be,popped;private,void,pop,final,int,elements,if,output,stack,top,elements,output,stack,top,elements,else,owner,input,stack,top,elements,output,stack,top,output,stack,top,0
Frame -> private void pop(final int elements);1398255950;Pops the given number of types from the output frame stack.__@param elements_the number of types that must be popped.;private void pop(final int elements) {_        if (outputStackTop >= elements) {_            outputStackTop -= elements__        } else {_            _            _            _            owner.inputStackTop -= elements - outputStackTop__            outputStackTop = 0__        }_    };pops,the,given,number,of,types,from,the,output,frame,stack,param,elements,the,number,of,types,that,must,be,popped;private,void,pop,final,int,elements,if,output,stack,top,elements,output,stack,top,elements,else,owner,input,stack,top,elements,output,stack,top,output,stack,top,0
Frame -> private void pop(final int elements);1461047077;Pops the given number of types from the output frame stack.__@param elements_the number of types that must be popped.;private void pop(final int elements) {_        if (outputStackTop >= elements) {_            outputStackTop -= elements__        } else {_            _            _            _            owner.inputStackTop -= elements - outputStackTop__            outputStackTop = 0__        }_    };pops,the,given,number,of,types,from,the,output,frame,stack,param,elements,the,number,of,types,that,must,be,popped;private,void,pop,final,int,elements,if,output,stack,top,elements,output,stack,top,elements,else,owner,input,stack,top,elements,output,stack,top,output,stack,top,0
Frame -> private void pop(final int elements);1483093254;Pops the given number of types from the output frame stack.__@param elements_the number of types that must be popped.;private void pop(final int elements) {_        if (outputStackTop >= elements) {_            outputStackTop -= elements__        } else {_            _            _            _            owner.inputStackTop -= elements - outputStackTop__            outputStackTop = 0__        }_    };pops,the,given,number,of,types,from,the,output,frame,stack,param,elements,the,number,of,types,that,must,be,popped;private,void,pop,final,int,elements,if,output,stack,top,elements,output,stack,top,elements,else,owner,input,stack,top,elements,output,stack,top,output,stack,top,0
Frame -> private void pop(final int elements);1531241461;Pops the given number of abstract types from the output frame stack.__@param elements the number of abstract types that must be popped.;private void pop(final int elements) {_    if (outputStackTop >= elements) {_      outputStackTop -= elements__    } else {_      _      _      outputStackStart -= elements - outputStackTop__      outputStackTop = 0__    }_  };pops,the,given,number,of,abstract,types,from,the,output,frame,stack,param,elements,the,number,of,abstract,types,that,must,be,popped;private,void,pop,final,int,elements,if,output,stack,top,elements,output,stack,top,elements,else,output,stack,start,elements,output,stack,top,output,stack,top,0
Frame -> private void pop(final int elements);1536664245;Pops the given number of abstract types from the output frame stack.__@param elements the number of abstract types that must be popped.;private void pop(final int elements) {_    if (outputStackTop >= elements) {_      outputStackTop -= elements__    } else {_      _      _      outputStackStart -= elements - outputStackTop__      outputStackTop = 0__    }_  };pops,the,given,number,of,abstract,types,from,the,output,frame,stack,param,elements,the,number,of,abstract,types,that,must,be,popped;private,void,pop,final,int,elements,if,output,stack,top,elements,output,stack,top,elements,else,output,stack,start,elements,output,stack,top,output,stack,top,0
Frame -> private void pop(final int elements);1537204147;Pops the given number of abstract types from the output frame stack.__@param elements the number of abstract types that must be popped.;private void pop(final int elements) {_    if (outputStackTop >= elements) {_      outputStackTop -= elements__    } else {_      _      _      outputStackStart -= elements - outputStackTop__      outputStackTop = 0__    }_  };pops,the,given,number,of,abstract,types,from,the,output,frame,stack,param,elements,the,number,of,abstract,types,that,must,be,popped;private,void,pop,final,int,elements,if,output,stack,top,elements,output,stack,top,elements,else,output,stack,start,elements,output,stack,top,output,stack,top,0
Frame -> private void push(final SymbolTable symbolTable, final String descriptor);1531241461;Pushes the abstract type corresponding to the given descriptor on the output frame stack.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param descriptor a type or method descriptor (in which case its return type is pushed).;private void push(final SymbolTable symbolTable, final String descriptor) {_    int typeDescriptorOffset = descriptor.charAt(0) == '(' ? descriptor.indexOf(')') + 1 : 0__    int abstractType = getAbstractTypeFromDescriptor(symbolTable, descriptor, typeDescriptorOffset)__    if (abstractType != 0) {_      push(abstractType)__      if (abstractType == LONG || abstractType == DOUBLE) {_        push(TOP)__      }_    }_  };pushes,the,abstract,type,corresponding,to,the,given,descriptor,on,the,output,frame,stack,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,descriptor,a,type,or,method,descriptor,in,which,case,its,return,type,is,pushed;private,void,push,final,symbol,table,symbol,table,final,string,descriptor,int,type,descriptor,offset,descriptor,char,at,0,descriptor,index,of,1,0,int,abstract,type,get,abstract,type,from,descriptor,symbol,table,descriptor,type,descriptor,offset,if,abstract,type,0,push,abstract,type,if,abstract,type,long,abstract,type,double,push,top
Frame -> private void push(final SymbolTable symbolTable, final String descriptor);1536664245;Pushes the abstract type corresponding to the given descriptor on the output frame stack.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param descriptor a type or method descriptor (in which case its return type is pushed).;private void push(final SymbolTable symbolTable, final String descriptor) {_    int typeDescriptorOffset = descriptor.charAt(0) == '(' ? descriptor.indexOf(')') + 1 : 0__    int abstractType = getAbstractTypeFromDescriptor(symbolTable, descriptor, typeDescriptorOffset)__    if (abstractType != 0) {_      push(abstractType)__      if (abstractType == LONG || abstractType == DOUBLE) {_        push(TOP)__      }_    }_  };pushes,the,abstract,type,corresponding,to,the,given,descriptor,on,the,output,frame,stack,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,descriptor,a,type,or,method,descriptor,in,which,case,its,return,type,is,pushed;private,void,push,final,symbol,table,symbol,table,final,string,descriptor,int,type,descriptor,offset,descriptor,char,at,0,descriptor,index,of,1,0,int,abstract,type,get,abstract,type,from,descriptor,symbol,table,descriptor,type,descriptor,offset,if,abstract,type,0,push,abstract,type,if,abstract,type,long,abstract,type,double,push,top
Frame -> private void push(final SymbolTable symbolTable, final String descriptor);1537204147;Pushes the abstract type corresponding to the given descriptor on the output frame stack.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param descriptor a type or method descriptor (in which case its return type is pushed).;private void push(final SymbolTable symbolTable, final String descriptor) {_    int typeDescriptorOffset = descriptor.charAt(0) == '(' ? descriptor.indexOf(')') + 1 : 0__    int abstractType = getAbstractTypeFromDescriptor(symbolTable, descriptor, typeDescriptorOffset)__    if (abstractType != 0) {_      push(abstractType)__      if (abstractType == LONG || abstractType == DOUBLE) {_        push(TOP)__      }_    }_  };pushes,the,abstract,type,corresponding,to,the,given,descriptor,on,the,output,frame,stack,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,descriptor,a,type,or,method,descriptor,in,which,case,its,return,type,is,pushed;private,void,push,final,symbol,table,symbol,table,final,string,descriptor,int,type,descriptor,offset,descriptor,char,at,0,descriptor,index,of,1,0,int,abstract,type,get,abstract,type,from,descriptor,symbol,table,descriptor,type,descriptor,offset,if,abstract,type,0,push,abstract,type,if,abstract,type,long,abstract,type,double,push,top
Frame -> private void setLocal(final int localIndex, final int abstractType);1531241461;Replaces the abstract type stored at the given local variable index in the output frame.__@param localIndex the index of the output frame local variable that must be set._@param abstractType the value that must be set.;private void setLocal(final int localIndex, final int abstractType) {_    _    if (outputLocals == null) {_      outputLocals = new int[10]__    }_    int outputLocalsLength = outputLocals.length__    if (localIndex >= outputLocalsLength) {_      int[] newOutputLocals = new int[Math.max(localIndex + 1, 2 * outputLocalsLength)]__      System.arraycopy(outputLocals, 0, newOutputLocals, 0, outputLocalsLength)__      outputLocals = newOutputLocals__    }_    _    outputLocals[localIndex] = abstractType__  };replaces,the,abstract,type,stored,at,the,given,local,variable,index,in,the,output,frame,param,local,index,the,index,of,the,output,frame,local,variable,that,must,be,set,param,abstract,type,the,value,that,must,be,set;private,void,set,local,final,int,local,index,final,int,abstract,type,if,output,locals,null,output,locals,new,int,10,int,output,locals,length,output,locals,length,if,local,index,output,locals,length,int,new,output,locals,new,int,math,max,local,index,1,2,output,locals,length,system,arraycopy,output,locals,0,new,output,locals,0,output,locals,length,output,locals,new,output,locals,output,locals,local,index,abstract,type
Frame -> private void setLocal(final int localIndex, final int abstractType);1536664245;Replaces the abstract type stored at the given local variable index in the output frame.__@param localIndex the index of the output frame local variable that must be set._@param abstractType the value that must be set.;private void setLocal(final int localIndex, final int abstractType) {_    _    if (outputLocals == null) {_      outputLocals = new int[10]__    }_    int outputLocalsLength = outputLocals.length__    if (localIndex >= outputLocalsLength) {_      int[] newOutputLocals = new int[Math.max(localIndex + 1, 2 * outputLocalsLength)]__      System.arraycopy(outputLocals, 0, newOutputLocals, 0, outputLocalsLength)__      outputLocals = newOutputLocals__    }_    _    outputLocals[localIndex] = abstractType__  };replaces,the,abstract,type,stored,at,the,given,local,variable,index,in,the,output,frame,param,local,index,the,index,of,the,output,frame,local,variable,that,must,be,set,param,abstract,type,the,value,that,must,be,set;private,void,set,local,final,int,local,index,final,int,abstract,type,if,output,locals,null,output,locals,new,int,10,int,output,locals,length,output,locals,length,if,local,index,output,locals,length,int,new,output,locals,new,int,math,max,local,index,1,2,output,locals,length,system,arraycopy,output,locals,0,new,output,locals,0,output,locals,length,output,locals,new,output,locals,output,locals,local,index,abstract,type
Frame -> private void setLocal(final int localIndex, final int abstractType);1537204147;Replaces the abstract type stored at the given local variable index in the output frame.__@param localIndex the index of the output frame local variable that must be set._@param abstractType the value that must be set.;private void setLocal(final int localIndex, final int abstractType) {_    _    if (outputLocals == null) {_      outputLocals = new int[10]__    }_    int outputLocalsLength = outputLocals.length__    if (localIndex >= outputLocalsLength) {_      int[] newOutputLocals = new int[Math.max(localIndex + 1, 2 * outputLocalsLength)]__      System.arraycopy(outputLocals, 0, newOutputLocals, 0, outputLocalsLength)__      outputLocals = newOutputLocals__    }_    _    outputLocals[localIndex] = abstractType__  };replaces,the,abstract,type,stored,at,the,given,local,variable,index,in,the,output,frame,param,local,index,the,index,of,the,output,frame,local,variable,that,must,be,set,param,abstract,type,the,value,that,must,be,set;private,void,set,local,final,int,local,index,final,int,abstract,type,if,output,locals,null,output,locals,new,int,10,int,output,locals,length,output,locals,length,if,local,index,output,locals,length,int,new,output,locals,new,int,math,max,local,index,1,2,output,locals,length,system,arraycopy,output,locals,0,new,output,locals,0,output,locals,length,output,locals,new,output,locals,output,locals,local,index,abstract,type
Frame -> private void pop(final String descriptor);1531241461;Pops as many abstract types from the output frame stack as described by the given descriptor.__@param descriptor a type or method descriptor (in which case its argument types are popped).;private void pop(final String descriptor) {_    char firstDescriptorChar = descriptor.charAt(0)__    if (firstDescriptorChar == '(') {_      pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1)__    } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {_      pop(2)__    } else {_      pop(1)__    }_  };pops,as,many,abstract,types,from,the,output,frame,stack,as,described,by,the,given,descriptor,param,descriptor,a,type,or,method,descriptor,in,which,case,its,argument,types,are,popped;private,void,pop,final,string,descriptor,char,first,descriptor,char,descriptor,char,at,0,if,first,descriptor,char,pop,type,get,arguments,and,return,sizes,descriptor,2,1,else,if,first,descriptor,char,j,first,descriptor,char,d,pop,2,else,pop,1
Frame -> private void pop(final String descriptor);1536664245;Pops as many abstract types from the output frame stack as described by the given descriptor.__@param descriptor a type or method descriptor (in which case its argument types are popped).;private void pop(final String descriptor) {_    char firstDescriptorChar = descriptor.charAt(0)__    if (firstDescriptorChar == '(') {_      pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1)__    } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {_      pop(2)__    } else {_      pop(1)__    }_  };pops,as,many,abstract,types,from,the,output,frame,stack,as,described,by,the,given,descriptor,param,descriptor,a,type,or,method,descriptor,in,which,case,its,argument,types,are,popped;private,void,pop,final,string,descriptor,char,first,descriptor,char,descriptor,char,at,0,if,first,descriptor,char,pop,type,get,arguments,and,return,sizes,descriptor,2,1,else,if,first,descriptor,char,j,first,descriptor,char,d,pop,2,else,pop,1
Frame -> private void pop(final String descriptor);1537204147;Pops as many abstract types from the output frame stack as described by the given descriptor.__@param descriptor a type or method descriptor (in which case its argument types are popped).;private void pop(final String descriptor) {_    char firstDescriptorChar = descriptor.charAt(0)__    if (firstDescriptorChar == '(') {_      pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1)__    } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {_      pop(2)__    } else {_      pop(1)__    }_  };pops,as,many,abstract,types,from,the,output,frame,stack,as,described,by,the,given,descriptor,param,descriptor,a,type,or,method,descriptor,in,which,case,its,argument,types,are,popped;private,void,pop,final,string,descriptor,char,first,descriptor,char,descriptor,char,at,0,if,first,descriptor,char,pop,type,get,arguments,and,return,sizes,descriptor,2,1,else,if,first,descriptor,char,j,first,descriptor,char,d,pop,2,else,pop,1
Frame -> void execute(       final int opcode, final int arg, final Symbol argSymbol, final SymbolTable symbolTable);1531241461;Simulates the action of the given instruction on the output stack frame.__@param opcode the opcode of the instruction._@param arg the numeric operand of the instruction, if any._@param argSymbol the Symbol operand of the instruction, if any._@param symbolTable the type table to use to lookup and store type {@link Symbol}.;void execute(_      final int opcode, final int arg, final Symbol argSymbol, final SymbolTable symbolTable) {_    _    int abstractType1__    int abstractType2__    int abstractType3__    int abstractType4__    switch (opcode) {_      case Opcodes.NOP:_      case Opcodes.INEG:_      case Opcodes.LNEG:_      case Opcodes.FNEG:_      case Opcodes.DNEG:_      case Opcodes.I2B:_      case Opcodes.I2C:_      case Opcodes.I2S:_      case Opcodes.GOTO:_      case Opcodes.RETURN:_        break__      case Opcodes.ACONST_NULL:_        push(NULL)__        break__      case Opcodes.ICONST_M1:_      case Opcodes.ICONST_0:_      case Opcodes.ICONST_1:_      case Opcodes.ICONST_2:_      case Opcodes.ICONST_3:_      case Opcodes.ICONST_4:_      case Opcodes.ICONST_5:_      case Opcodes.BIPUSH:_      case Opcodes.SIPUSH:_      case Opcodes.ILOAD:_        push(INTEGER)__        break__      case Opcodes.LCONST_0:_      case Opcodes.LCONST_1:_      case Opcodes.LLOAD:_        push(LONG)__        push(TOP)__        break__      case Opcodes.FCONST_0:_      case Opcodes.FCONST_1:_      case Opcodes.FCONST_2:_      case Opcodes.FLOAD:_        push(FLOAT)__        break__      case Opcodes.DCONST_0:_      case Opcodes.DCONST_1:_      case Opcodes.DLOAD:_        push(DOUBLE)__        push(TOP)__        break__      case Opcodes.LDC:_        switch (argSymbol.tag) {_          case Symbol.CONSTANT_INTEGER_TAG:_            push(INTEGER)__            break__          case Symbol.CONSTANT_LONG_TAG:_            push(LONG)__            push(TOP)__            break__          case Symbol.CONSTANT_FLOAT_TAG:_            push(FLOAT)__            break__          case Symbol.CONSTANT_DOUBLE_TAG:_            push(DOUBLE)__            push(TOP)__            break__          case Symbol.CONSTANT_CLASS_TAG:_            push(REFERENCE_KIND | symbolTable.addType("java/lang/Class"))__            break__          case Symbol.CONSTANT_STRING_TAG:_            push(REFERENCE_KIND | symbolTable.addType("java/lang/String"))__            break__          case Symbol.CONSTANT_METHOD_TYPE_TAG:_            push(REFERENCE_KIND | symbolTable.addType("java/lang/invoke/MethodType"))__            break__          case Symbol.CONSTANT_METHOD_HANDLE_TAG:_            push(REFERENCE_KIND | symbolTable.addType("java/lang/invoke/MethodHandle"))__            break__          case Symbol.CONSTANT_DYNAMIC_TAG:_            push(symbolTable, argSymbol.value)__            break__          default:_            throw new AssertionError()__        }_        break__      case Opcodes.ALOAD:_        push(getLocal(arg))__        break__      case Opcodes.LALOAD:_      case Opcodes.D2L:_        pop(2)__        push(LONG)__        push(TOP)__        break__      case Opcodes.DALOAD:_      case Opcodes.L2D:_        pop(2)__        push(DOUBLE)__        push(TOP)__        break__      case Opcodes.AALOAD:_        pop(1)__        abstractType1 = pop()__        push(abstractType1 == NULL ? abstractType1 : ELEMENT_OF + abstractType1)__        break__      case Opcodes.ISTORE:_      case Opcodes.FSTORE:_      case Opcodes.ASTORE:_        abstractType1 = pop()__        setLocal(arg, abstractType1)__        if (arg > 0) {_          int previousLocalType = getLocal(arg - 1)__          if (previousLocalType == LONG || previousLocalType == DOUBLE) {_            setLocal(arg - 1, TOP)__          } else if ((previousLocalType & KIND_MASK) == LOCAL_KIND_              || (previousLocalType & KIND_MASK) == STACK_KIND) {_            _            _            setLocal(arg - 1, previousLocalType | TOP_IF_LONG_OR_DOUBLE_FLAG)__          }_        }_        break__      case Opcodes.LSTORE:_      case Opcodes.DSTORE:_        pop(1)__        abstractType1 = pop()__        setLocal(arg, abstractType1)__        setLocal(arg + 1, TOP)__        if (arg > 0) {_          int previousLocalType = getLocal(arg - 1)__          if (previousLocalType == LONG || previousLocalType == DOUBLE) {_            setLocal(arg - 1, TOP)__          } else if ((previousLocalType & KIND_MASK) == LOCAL_KIND_              || (previousLocalType & KIND_MASK) == STACK_KIND) {_            _            _            setLocal(arg - 1, previousLocalType | TOP_IF_LONG_OR_DOUBLE_FLAG)__          }_        }_        break__      case Opcodes.IASTORE:_      case Opcodes.BASTORE:_      case Opcodes.CASTORE:_      case Opcodes.SASTORE:_      case Opcodes.FASTORE:_      case Opcodes.AASTORE:_        pop(3)__        break__      case Opcodes.LASTORE:_      case Opcodes.DASTORE:_        pop(4)__        break__      case Opcodes.POP:_      case Opcodes.IFEQ:_      case Opcodes.IFNE:_      case Opcodes.IFLT:_      case Opcodes.IFGE:_      case Opcodes.IFGT:_      case Opcodes.IFLE:_      case Opcodes.IRETURN:_      case Opcodes.FRETURN:_      case Opcodes.ARETURN:_      case Opcodes.TABLESWITCH:_      case Opcodes.LOOKUPSWITCH:_      case Opcodes.ATHROW:_      case Opcodes.MONITORENTER:_      case Opcodes.MONITOREXIT:_      case Opcodes.IFNULL:_      case Opcodes.IFNONNULL:_        pop(1)__        break__      case Opcodes.POP2:_      case Opcodes.IF_ICMPEQ:_      case Opcodes.IF_ICMPNE:_      case Opcodes.IF_ICMPLT:_      case Opcodes.IF_ICMPGE:_      case Opcodes.IF_ICMPGT:_      case Opcodes.IF_ICMPLE:_      case Opcodes.IF_ACMPEQ:_      case Opcodes.IF_ACMPNE:_      case Opcodes.LRETURN:_      case Opcodes.DRETURN:_        pop(2)__        break__      case Opcodes.DUP:_        abstractType1 = pop()__        push(abstractType1)__        push(abstractType1)__        break__      case Opcodes.DUP_X1:_        abstractType1 = pop()__        abstractType2 = pop()__        push(abstractType1)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.DUP_X2:_        abstractType1 = pop()__        abstractType2 = pop()__        abstractType3 = pop()__        push(abstractType1)__        push(abstractType3)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.DUP2:_        abstractType1 = pop()__        abstractType2 = pop()__        push(abstractType2)__        push(abstractType1)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.DUP2_X1:_        abstractType1 = pop()__        abstractType2 = pop()__        abstractType3 = pop()__        push(abstractType2)__        push(abstractType1)__        push(abstractType3)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.DUP2_X2:_        abstractType1 = pop()__        abstractType2 = pop()__        abstractType3 = pop()__        abstractType4 = pop()__        push(abstractType2)__        push(abstractType1)__        push(abstractType4)__        push(abstractType3)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.SWAP:_        abstractType1 = pop()__        abstractType2 = pop()__        push(abstractType1)__        push(abstractType2)__        break__      case Opcodes.IALOAD:_      case Opcodes.BALOAD:_      case Opcodes.CALOAD:_      case Opcodes.SALOAD:_      case Opcodes.IADD:_      case Opcodes.ISUB:_      case Opcodes.IMUL:_      case Opcodes.IDIV:_      case Opcodes.IREM:_      case Opcodes.IAND:_      case Opcodes.IOR:_      case Opcodes.IXOR:_      case Opcodes.ISHL:_      case Opcodes.ISHR:_      case Opcodes.IUSHR:_      case Opcodes.L2I:_      case Opcodes.D2I:_      case Opcodes.FCMPL:_      case Opcodes.FCMPG:_        pop(2)__        push(INTEGER)__        break__      case Opcodes.LADD:_      case Opcodes.LSUB:_      case Opcodes.LMUL:_      case Opcodes.LDIV:_      case Opcodes.LREM:_      case Opcodes.LAND:_      case Opcodes.LOR:_      case Opcodes.LXOR:_        pop(4)__        push(LONG)__        push(TOP)__        break__      case Opcodes.FALOAD:_      case Opcodes.FADD:_      case Opcodes.FSUB:_      case Opcodes.FMUL:_      case Opcodes.FDIV:_      case Opcodes.FREM:_      case Opcodes.L2F:_      case Opcodes.D2F:_        pop(2)__        push(FLOAT)__        break__      case Opcodes.DADD:_      case Opcodes.DSUB:_      case Opcodes.DMUL:_      case Opcodes.DDIV:_      case Opcodes.DREM:_        pop(4)__        push(DOUBLE)__        push(TOP)__        break__      case Opcodes.LSHL:_      case Opcodes.LSHR:_      case Opcodes.LUSHR:_        pop(3)__        push(LONG)__        push(TOP)__        break__      case Opcodes.IINC:_        setLocal(arg, INTEGER)__        break__      case Opcodes.I2L:_      case Opcodes.F2L:_        pop(1)__        push(LONG)__        push(TOP)__        break__      case Opcodes.I2F:_        pop(1)__        push(FLOAT)__        break__      case Opcodes.I2D:_      case Opcodes.F2D:_        pop(1)__        push(DOUBLE)__        push(TOP)__        break__      case Opcodes.F2I:_      case Opcodes.ARRAYLENGTH:_      case Opcodes.INSTANCEOF:_        pop(1)__        push(INTEGER)__        break__      case Opcodes.LCMP:_      case Opcodes.DCMPL:_      case Opcodes.DCMPG:_        pop(4)__        push(INTEGER)__        break__      case Opcodes.JSR:_      case Opcodes.RET:_        throw new IllegalArgumentException("JSR/RET are not supported with computeFrames option")__      case Opcodes.GETSTATIC:_        push(symbolTable, argSymbol.value)__        break__      case Opcodes.PUTSTATIC:_        pop(argSymbol.value)__        break__      case Opcodes.GETFIELD:_        pop(1)__        push(symbolTable, argSymbol.value)__        break__      case Opcodes.PUTFIELD:_        pop(argSymbol.value)__        pop()__        break__      case Opcodes.INVOKEVIRTUAL:_      case Opcodes.INVOKESPECIAL:_      case Opcodes.INVOKESTATIC:_      case Opcodes.INVOKEINTERFACE:_        pop(argSymbol.value)__        if (opcode != Opcodes.INVOKESTATIC) {_          abstractType1 = pop()__          if (opcode == Opcodes.INVOKESPECIAL && argSymbol.name.charAt(0) == '<') {_            addInitializedType(abstractType1)__          }_        }_        push(symbolTable, argSymbol.value)__        break__      case Opcodes.INVOKEDYNAMIC:_        pop(argSymbol.value)__        push(symbolTable, argSymbol.value)__        break__      case Opcodes.NEW:_        push(UNINITIALIZED_KIND | symbolTable.addUninitializedType(argSymbol.value, arg))__        break__      case Opcodes.NEWARRAY:_        pop()__        switch (arg) {_          case Opcodes.T_BOOLEAN:_            push(ARRAY_OF | BOOLEAN)__            break__          case Opcodes.T_CHAR:_            push(ARRAY_OF | CHAR)__            break__          case Opcodes.T_BYTE:_            push(ARRAY_OF | BYTE)__            break__          case Opcodes.T_SHORT:_            push(ARRAY_OF | SHORT)__            break__          case Opcodes.T_INT:_            push(ARRAY_OF | INTEGER)__            break__          case Opcodes.T_FLOAT:_            push(ARRAY_OF | FLOAT)__            break__          case Opcodes.T_DOUBLE:_            push(ARRAY_OF | DOUBLE)__            break__          case Opcodes.T_LONG:_            push(ARRAY_OF | LONG)__            break__          default:_            throw new IllegalArgumentException()__        }_        break__      case Opcodes.ANEWARRAY:_        String arrayElementType = argSymbol.value__        pop()__        if (arrayElementType.charAt(0) == '[') {_          push(symbolTable, '[' + arrayElementType)__        } else {_          push(ARRAY_OF | REFERENCE_KIND | symbolTable.addType(arrayElementType))__        }_        break__      case Opcodes.CHECKCAST:_        String castType = argSymbol.value__        pop()__        if (castType.charAt(0) == '[') {_          push(symbolTable, castType)__        } else {_          push(REFERENCE_KIND | symbolTable.addType(castType))__        }_        break__      case Opcodes.MULTIANEWARRAY:_        pop(arg)__        push(symbolTable, argSymbol.value)__        break__      default:_        throw new IllegalArgumentException()__    }_  };simulates,the,action,of,the,given,instruction,on,the,output,stack,frame,param,opcode,the,opcode,of,the,instruction,param,arg,the,numeric,operand,of,the,instruction,if,any,param,arg,symbol,the,symbol,operand,of,the,instruction,if,any,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol;void,execute,final,int,opcode,final,int,arg,final,symbol,arg,symbol,final,symbol,table,symbol,table,int,abstract,type1,int,abstract,type2,int,abstract,type3,int,abstract,type4,switch,opcode,case,opcodes,nop,case,opcodes,ineg,case,opcodes,lneg,case,opcodes,fneg,case,opcodes,dneg,case,opcodes,i2b,case,opcodes,i2c,case,opcodes,i2s,case,opcodes,goto,case,opcodes,return,break,case,opcodes,push,null,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,bipush,case,opcodes,sipush,case,opcodes,iload,push,integer,break,case,opcodes,case,opcodes,case,opcodes,lload,push,long,push,top,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,fload,push,float,break,case,opcodes,case,opcodes,case,opcodes,dload,push,double,push,top,break,case,opcodes,ldc,switch,arg,symbol,tag,case,symbol,push,integer,break,case,symbol,push,long,push,top,break,case,symbol,push,float,break,case,symbol,push,double,push,top,break,case,symbol,push,symbol,table,add,type,java,lang,class,break,case,symbol,push,symbol,table,add,type,java,lang,string,break,case,symbol,push,symbol,table,add,type,java,lang,invoke,method,type,break,case,symbol,push,symbol,table,add,type,java,lang,invoke,method,handle,break,case,symbol,push,symbol,table,arg,symbol,value,break,default,throw,new,assertion,error,break,case,opcodes,aload,push,get,local,arg,break,case,opcodes,laload,case,opcodes,d2l,pop,2,push,long,push,top,break,case,opcodes,daload,case,opcodes,l2d,pop,2,push,double,push,top,break,case,opcodes,aaload,pop,1,abstract,type1,pop,push,abstract,type1,null,abstract,type1,abstract,type1,break,case,opcodes,istore,case,opcodes,fstore,case,opcodes,astore,abstract,type1,pop,set,local,arg,abstract,type1,if,arg,0,int,previous,local,type,get,local,arg,1,if,previous,local,type,long,previous,local,type,double,set,local,arg,1,top,else,if,previous,local,type,previous,local,type,set,local,arg,1,previous,local,type,break,case,opcodes,lstore,case,opcodes,dstore,pop,1,abstract,type1,pop,set,local,arg,abstract,type1,set,local,arg,1,top,if,arg,0,int,previous,local,type,get,local,arg,1,if,previous,local,type,long,previous,local,type,double,set,local,arg,1,top,else,if,previous,local,type,previous,local,type,set,local,arg,1,previous,local,type,break,case,opcodes,iastore,case,opcodes,bastore,case,opcodes,castore,case,opcodes,sastore,case,opcodes,fastore,case,opcodes,aastore,pop,3,break,case,opcodes,lastore,case,opcodes,dastore,pop,4,break,case,opcodes,pop,case,opcodes,ifeq,case,opcodes,ifne,case,opcodes,iflt,case,opcodes,ifge,case,opcodes,ifgt,case,opcodes,ifle,case,opcodes,ireturn,case,opcodes,freturn,case,opcodes,areturn,case,opcodes,tableswitch,case,opcodes,lookupswitch,case,opcodes,athrow,case,opcodes,monitorenter,case,opcodes,monitorexit,case,opcodes,ifnull,case,opcodes,ifnonnull,pop,1,break,case,opcodes,pop2,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,lreturn,case,opcodes,dreturn,pop,2,break,case,opcodes,dup,abstract,type1,pop,push,abstract,type1,push,abstract,type1,break,case,opcodes,abstract,type1,pop,abstract,type2,pop,push,abstract,type1,push,abstract,type2,push,abstract,type1,break,case,opcodes,abstract,type1,pop,abstract,type2,pop,abstract,type3,pop,push,abstract,type1,push,abstract,type3,push,abstract,type2,push,abstract,type1,break,case,opcodes,dup2,abstract,type1,pop,abstract,type2,pop,push,abstract,type2,push,abstract,type1,push,abstract,type2,push,abstract,type1,break,case,opcodes,abstract,type1,pop,abstract,type2,pop,abstract,type3,pop,push,abstract,type2,push,abstract,type1,push,abstract,type3,push,abstract,type2,push,abstract,type1,break,case,opcodes,abstract,type1,pop,abstract,type2,pop,abstract,type3,pop,abstract,type4,pop,push,abstract,type2,push,abstract,type1,push,abstract,type4,push,abstract,type3,push,abstract,type2,push,abstract,type1,break,case,opcodes,swap,abstract,type1,pop,abstract,type2,pop,push,abstract,type1,push,abstract,type2,break,case,opcodes,iaload,case,opcodes,baload,case,opcodes,caload,case,opcodes,saload,case,opcodes,iadd,case,opcodes,isub,case,opcodes,imul,case,opcodes,idiv,case,opcodes,irem,case,opcodes,iand,case,opcodes,ior,case,opcodes,ixor,case,opcodes,ishl,case,opcodes,ishr,case,opcodes,iushr,case,opcodes,l2i,case,opcodes,d2i,case,opcodes,fcmpl,case,opcodes,fcmpg,pop,2,push,integer,break,case,opcodes,ladd,case,opcodes,lsub,case,opcodes,lmul,case,opcodes,ldiv,case,opcodes,lrem,case,opcodes,land,case,opcodes,lor,case,opcodes,lxor,pop,4,push,long,push,top,break,case,opcodes,faload,case,opcodes,fadd,case,opcodes,fsub,case,opcodes,fmul,case,opcodes,fdiv,case,opcodes,frem,case,opcodes,l2f,case,opcodes,d2f,pop,2,push,float,break,case,opcodes,dadd,case,opcodes,dsub,case,opcodes,dmul,case,opcodes,ddiv,case,opcodes,drem,pop,4,push,double,push,top,break,case,opcodes,lshl,case,opcodes,lshr,case,opcodes,lushr,pop,3,push,long,push,top,break,case,opcodes,iinc,set,local,arg,integer,break,case,opcodes,i2l,case,opcodes,f2l,pop,1,push,long,push,top,break,case,opcodes,i2f,pop,1,push,float,break,case,opcodes,i2d,case,opcodes,f2d,pop,1,push,double,push,top,break,case,opcodes,f2i,case,opcodes,arraylength,case,opcodes,instanceof,pop,1,push,integer,break,case,opcodes,lcmp,case,opcodes,dcmpl,case,opcodes,dcmpg,pop,4,push,integer,break,case,opcodes,jsr,case,opcodes,ret,throw,new,illegal,argument,exception,jsr,ret,are,not,supported,with,compute,frames,option,case,opcodes,getstatic,push,symbol,table,arg,symbol,value,break,case,opcodes,putstatic,pop,arg,symbol,value,break,case,opcodes,getfield,pop,1,push,symbol,table,arg,symbol,value,break,case,opcodes,putfield,pop,arg,symbol,value,pop,break,case,opcodes,invokevirtual,case,opcodes,invokespecial,case,opcodes,invokestatic,case,opcodes,invokeinterface,pop,arg,symbol,value,if,opcode,opcodes,invokestatic,abstract,type1,pop,if,opcode,opcodes,invokespecial,arg,symbol,name,char,at,0,add,initialized,type,abstract,type1,push,symbol,table,arg,symbol,value,break,case,opcodes,invokedynamic,pop,arg,symbol,value,push,symbol,table,arg,symbol,value,break,case,opcodes,new,push,symbol,table,add,uninitialized,type,arg,symbol,value,arg,break,case,opcodes,newarray,pop,switch,arg,case,opcodes,push,boolean,break,case,opcodes,push,char,break,case,opcodes,push,byte,break,case,opcodes,push,short,break,case,opcodes,push,integer,break,case,opcodes,push,float,break,case,opcodes,push,double,break,case,opcodes,push,long,break,default,throw,new,illegal,argument,exception,break,case,opcodes,anewarray,string,array,element,type,arg,symbol,value,pop,if,array,element,type,char,at,0,push,symbol,table,array,element,type,else,push,symbol,table,add,type,array,element,type,break,case,opcodes,checkcast,string,cast,type,arg,symbol,value,pop,if,cast,type,char,at,0,push,symbol,table,cast,type,else,push,symbol,table,add,type,cast,type,break,case,opcodes,multianewarray,pop,arg,push,symbol,table,arg,symbol,value,break,default,throw,new,illegal,argument,exception
Frame -> void execute(       final int opcode, final int arg, final Symbol argSymbol, final SymbolTable symbolTable);1536664245;Simulates the action of the given instruction on the output stack frame.__@param opcode the opcode of the instruction._@param arg the numeric operand of the instruction, if any._@param argSymbol the Symbol operand of the instruction, if any._@param symbolTable the type table to use to lookup and store type {@link Symbol}.;void execute(_      final int opcode, final int arg, final Symbol argSymbol, final SymbolTable symbolTable) {_    _    int abstractType1__    int abstractType2__    int abstractType3__    int abstractType4__    switch (opcode) {_      case Opcodes.NOP:_      case Opcodes.INEG:_      case Opcodes.LNEG:_      case Opcodes.FNEG:_      case Opcodes.DNEG:_      case Opcodes.I2B:_      case Opcodes.I2C:_      case Opcodes.I2S:_      case Opcodes.GOTO:_      case Opcodes.RETURN:_        break__      case Opcodes.ACONST_NULL:_        push(NULL)__        break__      case Opcodes.ICONST_M1:_      case Opcodes.ICONST_0:_      case Opcodes.ICONST_1:_      case Opcodes.ICONST_2:_      case Opcodes.ICONST_3:_      case Opcodes.ICONST_4:_      case Opcodes.ICONST_5:_      case Opcodes.BIPUSH:_      case Opcodes.SIPUSH:_      case Opcodes.ILOAD:_        push(INTEGER)__        break__      case Opcodes.LCONST_0:_      case Opcodes.LCONST_1:_      case Opcodes.LLOAD:_        push(LONG)__        push(TOP)__        break__      case Opcodes.FCONST_0:_      case Opcodes.FCONST_1:_      case Opcodes.FCONST_2:_      case Opcodes.FLOAD:_        push(FLOAT)__        break__      case Opcodes.DCONST_0:_      case Opcodes.DCONST_1:_      case Opcodes.DLOAD:_        push(DOUBLE)__        push(TOP)__        break__      case Opcodes.LDC:_        switch (argSymbol.tag) {_          case Symbol.CONSTANT_INTEGER_TAG:_            push(INTEGER)__            break__          case Symbol.CONSTANT_LONG_TAG:_            push(LONG)__            push(TOP)__            break__          case Symbol.CONSTANT_FLOAT_TAG:_            push(FLOAT)__            break__          case Symbol.CONSTANT_DOUBLE_TAG:_            push(DOUBLE)__            push(TOP)__            break__          case Symbol.CONSTANT_CLASS_TAG:_            push(REFERENCE_KIND | symbolTable.addType("java/lang/Class"))__            break__          case Symbol.CONSTANT_STRING_TAG:_            push(REFERENCE_KIND | symbolTable.addType("java/lang/String"))__            break__          case Symbol.CONSTANT_METHOD_TYPE_TAG:_            push(REFERENCE_KIND | symbolTable.addType("java/lang/invoke/MethodType"))__            break__          case Symbol.CONSTANT_METHOD_HANDLE_TAG:_            push(REFERENCE_KIND | symbolTable.addType("java/lang/invoke/MethodHandle"))__            break__          case Symbol.CONSTANT_DYNAMIC_TAG:_            push(symbolTable, argSymbol.value)__            break__          default:_            throw new AssertionError()__        }_        break__      case Opcodes.ALOAD:_        push(getLocal(arg))__        break__      case Opcodes.LALOAD:_      case Opcodes.D2L:_        pop(2)__        push(LONG)__        push(TOP)__        break__      case Opcodes.DALOAD:_      case Opcodes.L2D:_        pop(2)__        push(DOUBLE)__        push(TOP)__        break__      case Opcodes.AALOAD:_        pop(1)__        abstractType1 = pop()__        push(abstractType1 == NULL ? abstractType1 : ELEMENT_OF + abstractType1)__        break__      case Opcodes.ISTORE:_      case Opcodes.FSTORE:_      case Opcodes.ASTORE:_        abstractType1 = pop()__        setLocal(arg, abstractType1)__        if (arg > 0) {_          int previousLocalType = getLocal(arg - 1)__          if (previousLocalType == LONG || previousLocalType == DOUBLE) {_            setLocal(arg - 1, TOP)__          } else if ((previousLocalType & KIND_MASK) == LOCAL_KIND_              || (previousLocalType & KIND_MASK) == STACK_KIND) {_            _            _            setLocal(arg - 1, previousLocalType | TOP_IF_LONG_OR_DOUBLE_FLAG)__          }_        }_        break__      case Opcodes.LSTORE:_      case Opcodes.DSTORE:_        pop(1)__        abstractType1 = pop()__        setLocal(arg, abstractType1)__        setLocal(arg + 1, TOP)__        if (arg > 0) {_          int previousLocalType = getLocal(arg - 1)__          if (previousLocalType == LONG || previousLocalType == DOUBLE) {_            setLocal(arg - 1, TOP)__          } else if ((previousLocalType & KIND_MASK) == LOCAL_KIND_              || (previousLocalType & KIND_MASK) == STACK_KIND) {_            _            _            setLocal(arg - 1, previousLocalType | TOP_IF_LONG_OR_DOUBLE_FLAG)__          }_        }_        break__      case Opcodes.IASTORE:_      case Opcodes.BASTORE:_      case Opcodes.CASTORE:_      case Opcodes.SASTORE:_      case Opcodes.FASTORE:_      case Opcodes.AASTORE:_        pop(3)__        break__      case Opcodes.LASTORE:_      case Opcodes.DASTORE:_        pop(4)__        break__      case Opcodes.POP:_      case Opcodes.IFEQ:_      case Opcodes.IFNE:_      case Opcodes.IFLT:_      case Opcodes.IFGE:_      case Opcodes.IFGT:_      case Opcodes.IFLE:_      case Opcodes.IRETURN:_      case Opcodes.FRETURN:_      case Opcodes.ARETURN:_      case Opcodes.TABLESWITCH:_      case Opcodes.LOOKUPSWITCH:_      case Opcodes.ATHROW:_      case Opcodes.MONITORENTER:_      case Opcodes.MONITOREXIT:_      case Opcodes.IFNULL:_      case Opcodes.IFNONNULL:_        pop(1)__        break__      case Opcodes.POP2:_      case Opcodes.IF_ICMPEQ:_      case Opcodes.IF_ICMPNE:_      case Opcodes.IF_ICMPLT:_      case Opcodes.IF_ICMPGE:_      case Opcodes.IF_ICMPGT:_      case Opcodes.IF_ICMPLE:_      case Opcodes.IF_ACMPEQ:_      case Opcodes.IF_ACMPNE:_      case Opcodes.LRETURN:_      case Opcodes.DRETURN:_        pop(2)__        break__      case Opcodes.DUP:_        abstractType1 = pop()__        push(abstractType1)__        push(abstractType1)__        break__      case Opcodes.DUP_X1:_        abstractType1 = pop()__        abstractType2 = pop()__        push(abstractType1)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.DUP_X2:_        abstractType1 = pop()__        abstractType2 = pop()__        abstractType3 = pop()__        push(abstractType1)__        push(abstractType3)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.DUP2:_        abstractType1 = pop()__        abstractType2 = pop()__        push(abstractType2)__        push(abstractType1)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.DUP2_X1:_        abstractType1 = pop()__        abstractType2 = pop()__        abstractType3 = pop()__        push(abstractType2)__        push(abstractType1)__        push(abstractType3)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.DUP2_X2:_        abstractType1 = pop()__        abstractType2 = pop()__        abstractType3 = pop()__        abstractType4 = pop()__        push(abstractType2)__        push(abstractType1)__        push(abstractType4)__        push(abstractType3)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.SWAP:_        abstractType1 = pop()__        abstractType2 = pop()__        push(abstractType1)__        push(abstractType2)__        break__      case Opcodes.IALOAD:_      case Opcodes.BALOAD:_      case Opcodes.CALOAD:_      case Opcodes.SALOAD:_      case Opcodes.IADD:_      case Opcodes.ISUB:_      case Opcodes.IMUL:_      case Opcodes.IDIV:_      case Opcodes.IREM:_      case Opcodes.IAND:_      case Opcodes.IOR:_      case Opcodes.IXOR:_      case Opcodes.ISHL:_      case Opcodes.ISHR:_      case Opcodes.IUSHR:_      case Opcodes.L2I:_      case Opcodes.D2I:_      case Opcodes.FCMPL:_      case Opcodes.FCMPG:_        pop(2)__        push(INTEGER)__        break__      case Opcodes.LADD:_      case Opcodes.LSUB:_      case Opcodes.LMUL:_      case Opcodes.LDIV:_      case Opcodes.LREM:_      case Opcodes.LAND:_      case Opcodes.LOR:_      case Opcodes.LXOR:_        pop(4)__        push(LONG)__        push(TOP)__        break__      case Opcodes.FALOAD:_      case Opcodes.FADD:_      case Opcodes.FSUB:_      case Opcodes.FMUL:_      case Opcodes.FDIV:_      case Opcodes.FREM:_      case Opcodes.L2F:_      case Opcodes.D2F:_        pop(2)__        push(FLOAT)__        break__      case Opcodes.DADD:_      case Opcodes.DSUB:_      case Opcodes.DMUL:_      case Opcodes.DDIV:_      case Opcodes.DREM:_        pop(4)__        push(DOUBLE)__        push(TOP)__        break__      case Opcodes.LSHL:_      case Opcodes.LSHR:_      case Opcodes.LUSHR:_        pop(3)__        push(LONG)__        push(TOP)__        break__      case Opcodes.IINC:_        setLocal(arg, INTEGER)__        break__      case Opcodes.I2L:_      case Opcodes.F2L:_        pop(1)__        push(LONG)__        push(TOP)__        break__      case Opcodes.I2F:_        pop(1)__        push(FLOAT)__        break__      case Opcodes.I2D:_      case Opcodes.F2D:_        pop(1)__        push(DOUBLE)__        push(TOP)__        break__      case Opcodes.F2I:_      case Opcodes.ARRAYLENGTH:_      case Opcodes.INSTANCEOF:_        pop(1)__        push(INTEGER)__        break__      case Opcodes.LCMP:_      case Opcodes.DCMPL:_      case Opcodes.DCMPG:_        pop(4)__        push(INTEGER)__        break__      case Opcodes.JSR:_      case Opcodes.RET:_        throw new IllegalArgumentException("JSR/RET are not supported with computeFrames option")__      case Opcodes.GETSTATIC:_        push(symbolTable, argSymbol.value)__        break__      case Opcodes.PUTSTATIC:_        pop(argSymbol.value)__        break__      case Opcodes.GETFIELD:_        pop(1)__        push(symbolTable, argSymbol.value)__        break__      case Opcodes.PUTFIELD:_        pop(argSymbol.value)__        pop()__        break__      case Opcodes.INVOKEVIRTUAL:_      case Opcodes.INVOKESPECIAL:_      case Opcodes.INVOKESTATIC:_      case Opcodes.INVOKEINTERFACE:_        pop(argSymbol.value)__        if (opcode != Opcodes.INVOKESTATIC) {_          abstractType1 = pop()__          if (opcode == Opcodes.INVOKESPECIAL && argSymbol.name.charAt(0) == '<') {_            addInitializedType(abstractType1)__          }_        }_        push(symbolTable, argSymbol.value)__        break__      case Opcodes.INVOKEDYNAMIC:_        pop(argSymbol.value)__        push(symbolTable, argSymbol.value)__        break__      case Opcodes.NEW:_        push(UNINITIALIZED_KIND | symbolTable.addUninitializedType(argSymbol.value, arg))__        break__      case Opcodes.NEWARRAY:_        pop()__        switch (arg) {_          case Opcodes.T_BOOLEAN:_            push(ARRAY_OF | BOOLEAN)__            break__          case Opcodes.T_CHAR:_            push(ARRAY_OF | CHAR)__            break__          case Opcodes.T_BYTE:_            push(ARRAY_OF | BYTE)__            break__          case Opcodes.T_SHORT:_            push(ARRAY_OF | SHORT)__            break__          case Opcodes.T_INT:_            push(ARRAY_OF | INTEGER)__            break__          case Opcodes.T_FLOAT:_            push(ARRAY_OF | FLOAT)__            break__          case Opcodes.T_DOUBLE:_            push(ARRAY_OF | DOUBLE)__            break__          case Opcodes.T_LONG:_            push(ARRAY_OF | LONG)__            break__          default:_            throw new IllegalArgumentException()__        }_        break__      case Opcodes.ANEWARRAY:_        String arrayElementType = argSymbol.value__        pop()__        if (arrayElementType.charAt(0) == '[') {_          push(symbolTable, '[' + arrayElementType)__        } else {_          push(ARRAY_OF | REFERENCE_KIND | symbolTable.addType(arrayElementType))__        }_        break__      case Opcodes.CHECKCAST:_        String castType = argSymbol.value__        pop()__        if (castType.charAt(0) == '[') {_          push(symbolTable, castType)__        } else {_          push(REFERENCE_KIND | symbolTable.addType(castType))__        }_        break__      case Opcodes.MULTIANEWARRAY:_        pop(arg)__        push(symbolTable, argSymbol.value)__        break__      default:_        throw new IllegalArgumentException()__    }_  };simulates,the,action,of,the,given,instruction,on,the,output,stack,frame,param,opcode,the,opcode,of,the,instruction,param,arg,the,numeric,operand,of,the,instruction,if,any,param,arg,symbol,the,symbol,operand,of,the,instruction,if,any,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol;void,execute,final,int,opcode,final,int,arg,final,symbol,arg,symbol,final,symbol,table,symbol,table,int,abstract,type1,int,abstract,type2,int,abstract,type3,int,abstract,type4,switch,opcode,case,opcodes,nop,case,opcodes,ineg,case,opcodes,lneg,case,opcodes,fneg,case,opcodes,dneg,case,opcodes,i2b,case,opcodes,i2c,case,opcodes,i2s,case,opcodes,goto,case,opcodes,return,break,case,opcodes,push,null,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,bipush,case,opcodes,sipush,case,opcodes,iload,push,integer,break,case,opcodes,case,opcodes,case,opcodes,lload,push,long,push,top,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,fload,push,float,break,case,opcodes,case,opcodes,case,opcodes,dload,push,double,push,top,break,case,opcodes,ldc,switch,arg,symbol,tag,case,symbol,push,integer,break,case,symbol,push,long,push,top,break,case,symbol,push,float,break,case,symbol,push,double,push,top,break,case,symbol,push,symbol,table,add,type,java,lang,class,break,case,symbol,push,symbol,table,add,type,java,lang,string,break,case,symbol,push,symbol,table,add,type,java,lang,invoke,method,type,break,case,symbol,push,symbol,table,add,type,java,lang,invoke,method,handle,break,case,symbol,push,symbol,table,arg,symbol,value,break,default,throw,new,assertion,error,break,case,opcodes,aload,push,get,local,arg,break,case,opcodes,laload,case,opcodes,d2l,pop,2,push,long,push,top,break,case,opcodes,daload,case,opcodes,l2d,pop,2,push,double,push,top,break,case,opcodes,aaload,pop,1,abstract,type1,pop,push,abstract,type1,null,abstract,type1,abstract,type1,break,case,opcodes,istore,case,opcodes,fstore,case,opcodes,astore,abstract,type1,pop,set,local,arg,abstract,type1,if,arg,0,int,previous,local,type,get,local,arg,1,if,previous,local,type,long,previous,local,type,double,set,local,arg,1,top,else,if,previous,local,type,previous,local,type,set,local,arg,1,previous,local,type,break,case,opcodes,lstore,case,opcodes,dstore,pop,1,abstract,type1,pop,set,local,arg,abstract,type1,set,local,arg,1,top,if,arg,0,int,previous,local,type,get,local,arg,1,if,previous,local,type,long,previous,local,type,double,set,local,arg,1,top,else,if,previous,local,type,previous,local,type,set,local,arg,1,previous,local,type,break,case,opcodes,iastore,case,opcodes,bastore,case,opcodes,castore,case,opcodes,sastore,case,opcodes,fastore,case,opcodes,aastore,pop,3,break,case,opcodes,lastore,case,opcodes,dastore,pop,4,break,case,opcodes,pop,case,opcodes,ifeq,case,opcodes,ifne,case,opcodes,iflt,case,opcodes,ifge,case,opcodes,ifgt,case,opcodes,ifle,case,opcodes,ireturn,case,opcodes,freturn,case,opcodes,areturn,case,opcodes,tableswitch,case,opcodes,lookupswitch,case,opcodes,athrow,case,opcodes,monitorenter,case,opcodes,monitorexit,case,opcodes,ifnull,case,opcodes,ifnonnull,pop,1,break,case,opcodes,pop2,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,lreturn,case,opcodes,dreturn,pop,2,break,case,opcodes,dup,abstract,type1,pop,push,abstract,type1,push,abstract,type1,break,case,opcodes,abstract,type1,pop,abstract,type2,pop,push,abstract,type1,push,abstract,type2,push,abstract,type1,break,case,opcodes,abstract,type1,pop,abstract,type2,pop,abstract,type3,pop,push,abstract,type1,push,abstract,type3,push,abstract,type2,push,abstract,type1,break,case,opcodes,dup2,abstract,type1,pop,abstract,type2,pop,push,abstract,type2,push,abstract,type1,push,abstract,type2,push,abstract,type1,break,case,opcodes,abstract,type1,pop,abstract,type2,pop,abstract,type3,pop,push,abstract,type2,push,abstract,type1,push,abstract,type3,push,abstract,type2,push,abstract,type1,break,case,opcodes,abstract,type1,pop,abstract,type2,pop,abstract,type3,pop,abstract,type4,pop,push,abstract,type2,push,abstract,type1,push,abstract,type4,push,abstract,type3,push,abstract,type2,push,abstract,type1,break,case,opcodes,swap,abstract,type1,pop,abstract,type2,pop,push,abstract,type1,push,abstract,type2,break,case,opcodes,iaload,case,opcodes,baload,case,opcodes,caload,case,opcodes,saload,case,opcodes,iadd,case,opcodes,isub,case,opcodes,imul,case,opcodes,idiv,case,opcodes,irem,case,opcodes,iand,case,opcodes,ior,case,opcodes,ixor,case,opcodes,ishl,case,opcodes,ishr,case,opcodes,iushr,case,opcodes,l2i,case,opcodes,d2i,case,opcodes,fcmpl,case,opcodes,fcmpg,pop,2,push,integer,break,case,opcodes,ladd,case,opcodes,lsub,case,opcodes,lmul,case,opcodes,ldiv,case,opcodes,lrem,case,opcodes,land,case,opcodes,lor,case,opcodes,lxor,pop,4,push,long,push,top,break,case,opcodes,faload,case,opcodes,fadd,case,opcodes,fsub,case,opcodes,fmul,case,opcodes,fdiv,case,opcodes,frem,case,opcodes,l2f,case,opcodes,d2f,pop,2,push,float,break,case,opcodes,dadd,case,opcodes,dsub,case,opcodes,dmul,case,opcodes,ddiv,case,opcodes,drem,pop,4,push,double,push,top,break,case,opcodes,lshl,case,opcodes,lshr,case,opcodes,lushr,pop,3,push,long,push,top,break,case,opcodes,iinc,set,local,arg,integer,break,case,opcodes,i2l,case,opcodes,f2l,pop,1,push,long,push,top,break,case,opcodes,i2f,pop,1,push,float,break,case,opcodes,i2d,case,opcodes,f2d,pop,1,push,double,push,top,break,case,opcodes,f2i,case,opcodes,arraylength,case,opcodes,instanceof,pop,1,push,integer,break,case,opcodes,lcmp,case,opcodes,dcmpl,case,opcodes,dcmpg,pop,4,push,integer,break,case,opcodes,jsr,case,opcodes,ret,throw,new,illegal,argument,exception,jsr,ret,are,not,supported,with,compute,frames,option,case,opcodes,getstatic,push,symbol,table,arg,symbol,value,break,case,opcodes,putstatic,pop,arg,symbol,value,break,case,opcodes,getfield,pop,1,push,symbol,table,arg,symbol,value,break,case,opcodes,putfield,pop,arg,symbol,value,pop,break,case,opcodes,invokevirtual,case,opcodes,invokespecial,case,opcodes,invokestatic,case,opcodes,invokeinterface,pop,arg,symbol,value,if,opcode,opcodes,invokestatic,abstract,type1,pop,if,opcode,opcodes,invokespecial,arg,symbol,name,char,at,0,add,initialized,type,abstract,type1,push,symbol,table,arg,symbol,value,break,case,opcodes,invokedynamic,pop,arg,symbol,value,push,symbol,table,arg,symbol,value,break,case,opcodes,new,push,symbol,table,add,uninitialized,type,arg,symbol,value,arg,break,case,opcodes,newarray,pop,switch,arg,case,opcodes,push,boolean,break,case,opcodes,push,char,break,case,opcodes,push,byte,break,case,opcodes,push,short,break,case,opcodes,push,integer,break,case,opcodes,push,float,break,case,opcodes,push,double,break,case,opcodes,push,long,break,default,throw,new,illegal,argument,exception,break,case,opcodes,anewarray,string,array,element,type,arg,symbol,value,pop,if,array,element,type,char,at,0,push,symbol,table,array,element,type,else,push,symbol,table,add,type,array,element,type,break,case,opcodes,checkcast,string,cast,type,arg,symbol,value,pop,if,cast,type,char,at,0,push,symbol,table,cast,type,else,push,symbol,table,add,type,cast,type,break,case,opcodes,multianewarray,pop,arg,push,symbol,table,arg,symbol,value,break,default,throw,new,illegal,argument,exception
Frame -> void execute(       final int opcode, final int arg, final Symbol argSymbol, final SymbolTable symbolTable);1537204147;Simulates the action of the given instruction on the output stack frame.__@param opcode the opcode of the instruction._@param arg the numeric operand of the instruction, if any._@param argSymbol the Symbol operand of the instruction, if any._@param symbolTable the type table to use to lookup and store type {@link Symbol}.;void execute(_      final int opcode, final int arg, final Symbol argSymbol, final SymbolTable symbolTable) {_    _    int abstractType1__    int abstractType2__    int abstractType3__    int abstractType4__    switch (opcode) {_      case Opcodes.NOP:_      case Opcodes.INEG:_      case Opcodes.LNEG:_      case Opcodes.FNEG:_      case Opcodes.DNEG:_      case Opcodes.I2B:_      case Opcodes.I2C:_      case Opcodes.I2S:_      case Opcodes.GOTO:_      case Opcodes.RETURN:_        break__      case Opcodes.ACONST_NULL:_        push(NULL)__        break__      case Opcodes.ICONST_M1:_      case Opcodes.ICONST_0:_      case Opcodes.ICONST_1:_      case Opcodes.ICONST_2:_      case Opcodes.ICONST_3:_      case Opcodes.ICONST_4:_      case Opcodes.ICONST_5:_      case Opcodes.BIPUSH:_      case Opcodes.SIPUSH:_      case Opcodes.ILOAD:_        push(INTEGER)__        break__      case Opcodes.LCONST_0:_      case Opcodes.LCONST_1:_      case Opcodes.LLOAD:_        push(LONG)__        push(TOP)__        break__      case Opcodes.FCONST_0:_      case Opcodes.FCONST_1:_      case Opcodes.FCONST_2:_      case Opcodes.FLOAD:_        push(FLOAT)__        break__      case Opcodes.DCONST_0:_      case Opcodes.DCONST_1:_      case Opcodes.DLOAD:_        push(DOUBLE)__        push(TOP)__        break__      case Opcodes.LDC:_        switch (argSymbol.tag) {_          case Symbol.CONSTANT_INTEGER_TAG:_            push(INTEGER)__            break__          case Symbol.CONSTANT_LONG_TAG:_            push(LONG)__            push(TOP)__            break__          case Symbol.CONSTANT_FLOAT_TAG:_            push(FLOAT)__            break__          case Symbol.CONSTANT_DOUBLE_TAG:_            push(DOUBLE)__            push(TOP)__            break__          case Symbol.CONSTANT_CLASS_TAG:_            push(REFERENCE_KIND | symbolTable.addType("java/lang/Class"))__            break__          case Symbol.CONSTANT_STRING_TAG:_            push(REFERENCE_KIND | symbolTable.addType("java/lang/String"))__            break__          case Symbol.CONSTANT_METHOD_TYPE_TAG:_            push(REFERENCE_KIND | symbolTable.addType("java/lang/invoke/MethodType"))__            break__          case Symbol.CONSTANT_METHOD_HANDLE_TAG:_            push(REFERENCE_KIND | symbolTable.addType("java/lang/invoke/MethodHandle"))__            break__          case Symbol.CONSTANT_DYNAMIC_TAG:_            push(symbolTable, argSymbol.value)__            break__          default:_            throw new AssertionError()__        }_        break__      case Opcodes.ALOAD:_        push(getLocal(arg))__        break__      case Opcodes.LALOAD:_      case Opcodes.D2L:_        pop(2)__        push(LONG)__        push(TOP)__        break__      case Opcodes.DALOAD:_      case Opcodes.L2D:_        pop(2)__        push(DOUBLE)__        push(TOP)__        break__      case Opcodes.AALOAD:_        pop(1)__        abstractType1 = pop()__        push(abstractType1 == NULL ? abstractType1 : ELEMENT_OF + abstractType1)__        break__      case Opcodes.ISTORE:_      case Opcodes.FSTORE:_      case Opcodes.ASTORE:_        abstractType1 = pop()__        setLocal(arg, abstractType1)__        if (arg > 0) {_          int previousLocalType = getLocal(arg - 1)__          if (previousLocalType == LONG || previousLocalType == DOUBLE) {_            setLocal(arg - 1, TOP)__          } else if ((previousLocalType & KIND_MASK) == LOCAL_KIND_              || (previousLocalType & KIND_MASK) == STACK_KIND) {_            _            _            setLocal(arg - 1, previousLocalType | TOP_IF_LONG_OR_DOUBLE_FLAG)__          }_        }_        break__      case Opcodes.LSTORE:_      case Opcodes.DSTORE:_        pop(1)__        abstractType1 = pop()__        setLocal(arg, abstractType1)__        setLocal(arg + 1, TOP)__        if (arg > 0) {_          int previousLocalType = getLocal(arg - 1)__          if (previousLocalType == LONG || previousLocalType == DOUBLE) {_            setLocal(arg - 1, TOP)__          } else if ((previousLocalType & KIND_MASK) == LOCAL_KIND_              || (previousLocalType & KIND_MASK) == STACK_KIND) {_            _            _            setLocal(arg - 1, previousLocalType | TOP_IF_LONG_OR_DOUBLE_FLAG)__          }_        }_        break__      case Opcodes.IASTORE:_      case Opcodes.BASTORE:_      case Opcodes.CASTORE:_      case Opcodes.SASTORE:_      case Opcodes.FASTORE:_      case Opcodes.AASTORE:_        pop(3)__        break__      case Opcodes.LASTORE:_      case Opcodes.DASTORE:_        pop(4)__        break__      case Opcodes.POP:_      case Opcodes.IFEQ:_      case Opcodes.IFNE:_      case Opcodes.IFLT:_      case Opcodes.IFGE:_      case Opcodes.IFGT:_      case Opcodes.IFLE:_      case Opcodes.IRETURN:_      case Opcodes.FRETURN:_      case Opcodes.ARETURN:_      case Opcodes.TABLESWITCH:_      case Opcodes.LOOKUPSWITCH:_      case Opcodes.ATHROW:_      case Opcodes.MONITORENTER:_      case Opcodes.MONITOREXIT:_      case Opcodes.IFNULL:_      case Opcodes.IFNONNULL:_        pop(1)__        break__      case Opcodes.POP2:_      case Opcodes.IF_ICMPEQ:_      case Opcodes.IF_ICMPNE:_      case Opcodes.IF_ICMPLT:_      case Opcodes.IF_ICMPGE:_      case Opcodes.IF_ICMPGT:_      case Opcodes.IF_ICMPLE:_      case Opcodes.IF_ACMPEQ:_      case Opcodes.IF_ACMPNE:_      case Opcodes.LRETURN:_      case Opcodes.DRETURN:_        pop(2)__        break__      case Opcodes.DUP:_        abstractType1 = pop()__        push(abstractType1)__        push(abstractType1)__        break__      case Opcodes.DUP_X1:_        abstractType1 = pop()__        abstractType2 = pop()__        push(abstractType1)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.DUP_X2:_        abstractType1 = pop()__        abstractType2 = pop()__        abstractType3 = pop()__        push(abstractType1)__        push(abstractType3)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.DUP2:_        abstractType1 = pop()__        abstractType2 = pop()__        push(abstractType2)__        push(abstractType1)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.DUP2_X1:_        abstractType1 = pop()__        abstractType2 = pop()__        abstractType3 = pop()__        push(abstractType2)__        push(abstractType1)__        push(abstractType3)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.DUP2_X2:_        abstractType1 = pop()__        abstractType2 = pop()__        abstractType3 = pop()__        abstractType4 = pop()__        push(abstractType2)__        push(abstractType1)__        push(abstractType4)__        push(abstractType3)__        push(abstractType2)__        push(abstractType1)__        break__      case Opcodes.SWAP:_        abstractType1 = pop()__        abstractType2 = pop()__        push(abstractType1)__        push(abstractType2)__        break__      case Opcodes.IALOAD:_      case Opcodes.BALOAD:_      case Opcodes.CALOAD:_      case Opcodes.SALOAD:_      case Opcodes.IADD:_      case Opcodes.ISUB:_      case Opcodes.IMUL:_      case Opcodes.IDIV:_      case Opcodes.IREM:_      case Opcodes.IAND:_      case Opcodes.IOR:_      case Opcodes.IXOR:_      case Opcodes.ISHL:_      case Opcodes.ISHR:_      case Opcodes.IUSHR:_      case Opcodes.L2I:_      case Opcodes.D2I:_      case Opcodes.FCMPL:_      case Opcodes.FCMPG:_        pop(2)__        push(INTEGER)__        break__      case Opcodes.LADD:_      case Opcodes.LSUB:_      case Opcodes.LMUL:_      case Opcodes.LDIV:_      case Opcodes.LREM:_      case Opcodes.LAND:_      case Opcodes.LOR:_      case Opcodes.LXOR:_        pop(4)__        push(LONG)__        push(TOP)__        break__      case Opcodes.FALOAD:_      case Opcodes.FADD:_      case Opcodes.FSUB:_      case Opcodes.FMUL:_      case Opcodes.FDIV:_      case Opcodes.FREM:_      case Opcodes.L2F:_      case Opcodes.D2F:_        pop(2)__        push(FLOAT)__        break__      case Opcodes.DADD:_      case Opcodes.DSUB:_      case Opcodes.DMUL:_      case Opcodes.DDIV:_      case Opcodes.DREM:_        pop(4)__        push(DOUBLE)__        push(TOP)__        break__      case Opcodes.LSHL:_      case Opcodes.LSHR:_      case Opcodes.LUSHR:_        pop(3)__        push(LONG)__        push(TOP)__        break__      case Opcodes.IINC:_        setLocal(arg, INTEGER)__        break__      case Opcodes.I2L:_      case Opcodes.F2L:_        pop(1)__        push(LONG)__        push(TOP)__        break__      case Opcodes.I2F:_        pop(1)__        push(FLOAT)__        break__      case Opcodes.I2D:_      case Opcodes.F2D:_        pop(1)__        push(DOUBLE)__        push(TOP)__        break__      case Opcodes.F2I:_      case Opcodes.ARRAYLENGTH:_      case Opcodes.INSTANCEOF:_        pop(1)__        push(INTEGER)__        break__      case Opcodes.LCMP:_      case Opcodes.DCMPL:_      case Opcodes.DCMPG:_        pop(4)__        push(INTEGER)__        break__      case Opcodes.JSR:_      case Opcodes.RET:_        throw new IllegalArgumentException("JSR/RET are not supported with computeFrames option")__      case Opcodes.GETSTATIC:_        push(symbolTable, argSymbol.value)__        break__      case Opcodes.PUTSTATIC:_        pop(argSymbol.value)__        break__      case Opcodes.GETFIELD:_        pop(1)__        push(symbolTable, argSymbol.value)__        break__      case Opcodes.PUTFIELD:_        pop(argSymbol.value)__        pop()__        break__      case Opcodes.INVOKEVIRTUAL:_      case Opcodes.INVOKESPECIAL:_      case Opcodes.INVOKESTATIC:_      case Opcodes.INVOKEINTERFACE:_        pop(argSymbol.value)__        if (opcode != Opcodes.INVOKESTATIC) {_          abstractType1 = pop()__          if (opcode == Opcodes.INVOKESPECIAL && argSymbol.name.charAt(0) == '<') {_            addInitializedType(abstractType1)__          }_        }_        push(symbolTable, argSymbol.value)__        break__      case Opcodes.INVOKEDYNAMIC:_        pop(argSymbol.value)__        push(symbolTable, argSymbol.value)__        break__      case Opcodes.NEW:_        push(UNINITIALIZED_KIND | symbolTable.addUninitializedType(argSymbol.value, arg))__        break__      case Opcodes.NEWARRAY:_        pop()__        switch (arg) {_          case Opcodes.T_BOOLEAN:_            push(ARRAY_OF | BOOLEAN)__            break__          case Opcodes.T_CHAR:_            push(ARRAY_OF | CHAR)__            break__          case Opcodes.T_BYTE:_            push(ARRAY_OF | BYTE)__            break__          case Opcodes.T_SHORT:_            push(ARRAY_OF | SHORT)__            break__          case Opcodes.T_INT:_            push(ARRAY_OF | INTEGER)__            break__          case Opcodes.T_FLOAT:_            push(ARRAY_OF | FLOAT)__            break__          case Opcodes.T_DOUBLE:_            push(ARRAY_OF | DOUBLE)__            break__          case Opcodes.T_LONG:_            push(ARRAY_OF | LONG)__            break__          default:_            throw new IllegalArgumentException()__        }_        break__      case Opcodes.ANEWARRAY:_        String arrayElementType = argSymbol.value__        pop()__        if (arrayElementType.charAt(0) == '[') {_          push(symbolTable, '[' + arrayElementType)__        } else {_          push(ARRAY_OF | REFERENCE_KIND | symbolTable.addType(arrayElementType))__        }_        break__      case Opcodes.CHECKCAST:_        String castType = argSymbol.value__        pop()__        if (castType.charAt(0) == '[') {_          push(symbolTable, castType)__        } else {_          push(REFERENCE_KIND | symbolTable.addType(castType))__        }_        break__      case Opcodes.MULTIANEWARRAY:_        pop(arg)__        push(symbolTable, argSymbol.value)__        break__      default:_        throw new IllegalArgumentException()__    }_  };simulates,the,action,of,the,given,instruction,on,the,output,stack,frame,param,opcode,the,opcode,of,the,instruction,param,arg,the,numeric,operand,of,the,instruction,if,any,param,arg,symbol,the,symbol,operand,of,the,instruction,if,any,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol;void,execute,final,int,opcode,final,int,arg,final,symbol,arg,symbol,final,symbol,table,symbol,table,int,abstract,type1,int,abstract,type2,int,abstract,type3,int,abstract,type4,switch,opcode,case,opcodes,nop,case,opcodes,ineg,case,opcodes,lneg,case,opcodes,fneg,case,opcodes,dneg,case,opcodes,i2b,case,opcodes,i2c,case,opcodes,i2s,case,opcodes,goto,case,opcodes,return,break,case,opcodes,push,null,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,bipush,case,opcodes,sipush,case,opcodes,iload,push,integer,break,case,opcodes,case,opcodes,case,opcodes,lload,push,long,push,top,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,fload,push,float,break,case,opcodes,case,opcodes,case,opcodes,dload,push,double,push,top,break,case,opcodes,ldc,switch,arg,symbol,tag,case,symbol,push,integer,break,case,symbol,push,long,push,top,break,case,symbol,push,float,break,case,symbol,push,double,push,top,break,case,symbol,push,symbol,table,add,type,java,lang,class,break,case,symbol,push,symbol,table,add,type,java,lang,string,break,case,symbol,push,symbol,table,add,type,java,lang,invoke,method,type,break,case,symbol,push,symbol,table,add,type,java,lang,invoke,method,handle,break,case,symbol,push,symbol,table,arg,symbol,value,break,default,throw,new,assertion,error,break,case,opcodes,aload,push,get,local,arg,break,case,opcodes,laload,case,opcodes,d2l,pop,2,push,long,push,top,break,case,opcodes,daload,case,opcodes,l2d,pop,2,push,double,push,top,break,case,opcodes,aaload,pop,1,abstract,type1,pop,push,abstract,type1,null,abstract,type1,abstract,type1,break,case,opcodes,istore,case,opcodes,fstore,case,opcodes,astore,abstract,type1,pop,set,local,arg,abstract,type1,if,arg,0,int,previous,local,type,get,local,arg,1,if,previous,local,type,long,previous,local,type,double,set,local,arg,1,top,else,if,previous,local,type,previous,local,type,set,local,arg,1,previous,local,type,break,case,opcodes,lstore,case,opcodes,dstore,pop,1,abstract,type1,pop,set,local,arg,abstract,type1,set,local,arg,1,top,if,arg,0,int,previous,local,type,get,local,arg,1,if,previous,local,type,long,previous,local,type,double,set,local,arg,1,top,else,if,previous,local,type,previous,local,type,set,local,arg,1,previous,local,type,break,case,opcodes,iastore,case,opcodes,bastore,case,opcodes,castore,case,opcodes,sastore,case,opcodes,fastore,case,opcodes,aastore,pop,3,break,case,opcodes,lastore,case,opcodes,dastore,pop,4,break,case,opcodes,pop,case,opcodes,ifeq,case,opcodes,ifne,case,opcodes,iflt,case,opcodes,ifge,case,opcodes,ifgt,case,opcodes,ifle,case,opcodes,ireturn,case,opcodes,freturn,case,opcodes,areturn,case,opcodes,tableswitch,case,opcodes,lookupswitch,case,opcodes,athrow,case,opcodes,monitorenter,case,opcodes,monitorexit,case,opcodes,ifnull,case,opcodes,ifnonnull,pop,1,break,case,opcodes,pop2,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,lreturn,case,opcodes,dreturn,pop,2,break,case,opcodes,dup,abstract,type1,pop,push,abstract,type1,push,abstract,type1,break,case,opcodes,abstract,type1,pop,abstract,type2,pop,push,abstract,type1,push,abstract,type2,push,abstract,type1,break,case,opcodes,abstract,type1,pop,abstract,type2,pop,abstract,type3,pop,push,abstract,type1,push,abstract,type3,push,abstract,type2,push,abstract,type1,break,case,opcodes,dup2,abstract,type1,pop,abstract,type2,pop,push,abstract,type2,push,abstract,type1,push,abstract,type2,push,abstract,type1,break,case,opcodes,abstract,type1,pop,abstract,type2,pop,abstract,type3,pop,push,abstract,type2,push,abstract,type1,push,abstract,type3,push,abstract,type2,push,abstract,type1,break,case,opcodes,abstract,type1,pop,abstract,type2,pop,abstract,type3,pop,abstract,type4,pop,push,abstract,type2,push,abstract,type1,push,abstract,type4,push,abstract,type3,push,abstract,type2,push,abstract,type1,break,case,opcodes,swap,abstract,type1,pop,abstract,type2,pop,push,abstract,type1,push,abstract,type2,break,case,opcodes,iaload,case,opcodes,baload,case,opcodes,caload,case,opcodes,saload,case,opcodes,iadd,case,opcodes,isub,case,opcodes,imul,case,opcodes,idiv,case,opcodes,irem,case,opcodes,iand,case,opcodes,ior,case,opcodes,ixor,case,opcodes,ishl,case,opcodes,ishr,case,opcodes,iushr,case,opcodes,l2i,case,opcodes,d2i,case,opcodes,fcmpl,case,opcodes,fcmpg,pop,2,push,integer,break,case,opcodes,ladd,case,opcodes,lsub,case,opcodes,lmul,case,opcodes,ldiv,case,opcodes,lrem,case,opcodes,land,case,opcodes,lor,case,opcodes,lxor,pop,4,push,long,push,top,break,case,opcodes,faload,case,opcodes,fadd,case,opcodes,fsub,case,opcodes,fmul,case,opcodes,fdiv,case,opcodes,frem,case,opcodes,l2f,case,opcodes,d2f,pop,2,push,float,break,case,opcodes,dadd,case,opcodes,dsub,case,opcodes,dmul,case,opcodes,ddiv,case,opcodes,drem,pop,4,push,double,push,top,break,case,opcodes,lshl,case,opcodes,lshr,case,opcodes,lushr,pop,3,push,long,push,top,break,case,opcodes,iinc,set,local,arg,integer,break,case,opcodes,i2l,case,opcodes,f2l,pop,1,push,long,push,top,break,case,opcodes,i2f,pop,1,push,float,break,case,opcodes,i2d,case,opcodes,f2d,pop,1,push,double,push,top,break,case,opcodes,f2i,case,opcodes,arraylength,case,opcodes,instanceof,pop,1,push,integer,break,case,opcodes,lcmp,case,opcodes,dcmpl,case,opcodes,dcmpg,pop,4,push,integer,break,case,opcodes,jsr,case,opcodes,ret,throw,new,illegal,argument,exception,jsr,ret,are,not,supported,with,compute,frames,option,case,opcodes,getstatic,push,symbol,table,arg,symbol,value,break,case,opcodes,putstatic,pop,arg,symbol,value,break,case,opcodes,getfield,pop,1,push,symbol,table,arg,symbol,value,break,case,opcodes,putfield,pop,arg,symbol,value,pop,break,case,opcodes,invokevirtual,case,opcodes,invokespecial,case,opcodes,invokestatic,case,opcodes,invokeinterface,pop,arg,symbol,value,if,opcode,opcodes,invokestatic,abstract,type1,pop,if,opcode,opcodes,invokespecial,arg,symbol,name,char,at,0,add,initialized,type,abstract,type1,push,symbol,table,arg,symbol,value,break,case,opcodes,invokedynamic,pop,arg,symbol,value,push,symbol,table,arg,symbol,value,break,case,opcodes,new,push,symbol,table,add,uninitialized,type,arg,symbol,value,arg,break,case,opcodes,newarray,pop,switch,arg,case,opcodes,push,boolean,break,case,opcodes,push,char,break,case,opcodes,push,byte,break,case,opcodes,push,short,break,case,opcodes,push,integer,break,case,opcodes,push,float,break,case,opcodes,push,double,break,case,opcodes,push,long,break,default,throw,new,illegal,argument,exception,break,case,opcodes,anewarray,string,array,element,type,arg,symbol,value,pop,if,array,element,type,char,at,0,push,symbol,table,array,element,type,else,push,symbol,table,add,type,array,element,type,break,case,opcodes,checkcast,string,cast,type,arg,symbol,value,pop,if,cast,type,char,at,0,push,symbol,table,cast,type,else,push,symbol,table,add,type,cast,type,break,case,opcodes,multianewarray,pop,arg,push,symbol,table,arg,symbol,value,break,default,throw,new,illegal,argument,exception
Frame -> private void push(final int abstractType);1531241461;Pushes the given abstract type on the output frame stack.__@param abstractType an abstract type.;private void push(final int abstractType) {_    _    if (outputStack == null) {_      outputStack = new int[10]__    }_    int outputStackLength = outputStack.length__    if (outputStackTop >= outputStackLength) {_      int[] newOutputStack = new int[Math.max(outputStackTop + 1, 2 * outputStackLength)]__      System.arraycopy(outputStack, 0, newOutputStack, 0, outputStackLength)__      outputStack = newOutputStack__    }_    _    outputStack[outputStackTop++] = abstractType__    _    _    short outputStackSize = (short) (outputStackStart + outputStackTop)__    if (outputStackSize > owner.outputStackMax) {_      owner.outputStackMax = outputStackSize__    }_  };pushes,the,given,abstract,type,on,the,output,frame,stack,param,abstract,type,an,abstract,type;private,void,push,final,int,abstract,type,if,output,stack,null,output,stack,new,int,10,int,output,stack,length,output,stack,length,if,output,stack,top,output,stack,length,int,new,output,stack,new,int,math,max,output,stack,top,1,2,output,stack,length,system,arraycopy,output,stack,0,new,output,stack,0,output,stack,length,output,stack,new,output,stack,output,stack,output,stack,top,abstract,type,short,output,stack,size,short,output,stack,start,output,stack,top,if,output,stack,size,owner,output,stack,max,owner,output,stack,max,output,stack,size
Frame -> private void push(final int abstractType);1536664245;Pushes the given abstract type on the output frame stack.__@param abstractType an abstract type.;private void push(final int abstractType) {_    _    if (outputStack == null) {_      outputStack = new int[10]__    }_    int outputStackLength = outputStack.length__    if (outputStackTop >= outputStackLength) {_      int[] newOutputStack = new int[Math.max(outputStackTop + 1, 2 * outputStackLength)]__      System.arraycopy(outputStack, 0, newOutputStack, 0, outputStackLength)__      outputStack = newOutputStack__    }_    _    outputStack[outputStackTop++] = abstractType__    _    _    short outputStackSize = (short) (outputStackStart + outputStackTop)__    if (outputStackSize > owner.outputStackMax) {_      owner.outputStackMax = outputStackSize__    }_  };pushes,the,given,abstract,type,on,the,output,frame,stack,param,abstract,type,an,abstract,type;private,void,push,final,int,abstract,type,if,output,stack,null,output,stack,new,int,10,int,output,stack,length,output,stack,length,if,output,stack,top,output,stack,length,int,new,output,stack,new,int,math,max,output,stack,top,1,2,output,stack,length,system,arraycopy,output,stack,0,new,output,stack,0,output,stack,length,output,stack,new,output,stack,output,stack,output,stack,top,abstract,type,short,output,stack,size,short,output,stack,start,output,stack,top,if,output,stack,size,owner,output,stack,max,owner,output,stack,max,output,stack,size
Frame -> private void push(final int abstractType);1537204147;Pushes the given abstract type on the output frame stack.__@param abstractType an abstract type.;private void push(final int abstractType) {_    _    if (outputStack == null) {_      outputStack = new int[10]__    }_    int outputStackLength = outputStack.length__    if (outputStackTop >= outputStackLength) {_      int[] newOutputStack = new int[Math.max(outputStackTop + 1, 2 * outputStackLength)]__      System.arraycopy(outputStack, 0, newOutputStack, 0, outputStackLength)__      outputStack = newOutputStack__    }_    _    outputStack[outputStackTop++] = abstractType__    _    _    short outputStackSize = (short) (outputStackStart + outputStackTop)__    if (outputStackSize > owner.outputStackMax) {_      owner.outputStackMax = outputStackSize__    }_  };pushes,the,given,abstract,type,on,the,output,frame,stack,param,abstract,type,an,abstract,type;private,void,push,final,int,abstract,type,if,output,stack,null,output,stack,new,int,10,int,output,stack,length,output,stack,length,if,output,stack,top,output,stack,length,int,new,output,stack,new,int,math,max,output,stack,top,1,2,output,stack,length,system,arraycopy,output,stack,0,new,output,stack,0,output,stack,length,output,stack,new,output,stack,output,stack,output,stack,top,abstract,type,short,output,stack,size,short,output,stack,start,output,stack,top,if,output,stack,size,owner,output,stack,max,owner,output,stack,max,output,stack,size
Frame -> void execute(final int opcode, final int arg, final ClassWriter cw,             final Item item);1366718246;Simulates the action of the given instruction on the output stack frame.__@param opcode_the opcode of the instruction._@param arg_the operand of the instruction, if any._@param cw_the class writer to which this label belongs._@param item_the operand of the instructions, if any.;void execute(final int opcode, final int arg, final ClassWriter cw,_            final Item item) {_        int t1, t2, t3, t4__        switch (opcode) {_        case Opcodes.NOP:_        case Opcodes.INEG:_        case Opcodes.LNEG:_        case Opcodes.FNEG:_        case Opcodes.DNEG:_        case Opcodes.I2B:_        case Opcodes.I2C:_        case Opcodes.I2S:_        case Opcodes.GOTO:_        case Opcodes.RETURN:_            break__        case Opcodes.ACONST_NULL:_            push(NULL)__            break__        case Opcodes.ICONST_M1:_        case Opcodes.ICONST_0:_        case Opcodes.ICONST_1:_        case Opcodes.ICONST_2:_        case Opcodes.ICONST_3:_        case Opcodes.ICONST_4:_        case Opcodes.ICONST_5:_        case Opcodes.BIPUSH:_        case Opcodes.SIPUSH:_        case Opcodes.ILOAD:_            push(INTEGER)__            break__        case Opcodes.LCONST_0:_        case Opcodes.LCONST_1:_        case Opcodes.LLOAD:_            push(LONG)__            push(TOP)__            break__        case Opcodes.FCONST_0:_        case Opcodes.FCONST_1:_        case Opcodes.FCONST_2:_        case Opcodes.FLOAD:_            push(FLOAT)__            break__        case Opcodes.DCONST_0:_        case Opcodes.DCONST_1:_        case Opcodes.DLOAD:_            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LDC:_            switch (item.type) {_            case ClassWriter.INT:_                push(INTEGER)__                break__            case ClassWriter.LONG:_                push(LONG)__                push(TOP)__                break__            case ClassWriter.FLOAT:_                push(FLOAT)__                break__            case ClassWriter.DOUBLE:_                push(DOUBLE)__                push(TOP)__                break__            case ClassWriter.CLASS:_                push(OBJECT | cw.addType("java/lang/Class"))__                break__            case ClassWriter.STR:_                push(OBJECT | cw.addType("java/lang/String"))__                break__            case ClassWriter.MTYPE:_                push(OBJECT | cw.addType("java/lang/invoke/MethodType"))__                break__            _            default:_                push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"))__            }_            break__        case Opcodes.ALOAD:_            push(get(arg))__            break__        case Opcodes.IALOAD:_        case Opcodes.BALOAD:_        case Opcodes.CALOAD:_        case Opcodes.SALOAD:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LALOAD:_        case Opcodes.D2L:_            pop(2)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FALOAD:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DALOAD:_        case Opcodes.L2D:_            pop(2)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.AALOAD:_            pop(1)__            t1 = pop()__            push(ELEMENT_OF + t1)__            break__        case Opcodes.ISTORE:_        case Opcodes.FSTORE:_        case Opcodes.ASTORE:_            t1 = pop()__            set(arg, t1)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.LSTORE:_        case Opcodes.DSTORE:_            pop(1)__            t1 = pop()__            set(arg, t1)__            set(arg + 1, TOP)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.IASTORE:_        case Opcodes.BASTORE:_        case Opcodes.CASTORE:_        case Opcodes.SASTORE:_        case Opcodes.FASTORE:_        case Opcodes.AASTORE:_            pop(3)__            break__        case Opcodes.LASTORE:_        case Opcodes.DASTORE:_            pop(4)__            break__        case Opcodes.POP:_        case Opcodes.IFEQ:_        case Opcodes.IFNE:_        case Opcodes.IFLT:_        case Opcodes.IFGE:_        case Opcodes.IFGT:_        case Opcodes.IFLE:_        case Opcodes.IRETURN:_        case Opcodes.FRETURN:_        case Opcodes.ARETURN:_        case Opcodes.TABLESWITCH:_        case Opcodes.LOOKUPSWITCH:_        case Opcodes.ATHROW:_        case Opcodes.MONITORENTER:_        case Opcodes.MONITOREXIT:_        case Opcodes.IFNULL:_        case Opcodes.IFNONNULL:_            pop(1)__            break__        case Opcodes.POP2:_        case Opcodes.IF_ICMPEQ:_        case Opcodes.IF_ICMPNE:_        case Opcodes.IF_ICMPLT:_        case Opcodes.IF_ICMPGE:_        case Opcodes.IF_ICMPGT:_        case Opcodes.IF_ICMPLE:_        case Opcodes.IF_ACMPEQ:_        case Opcodes.IF_ACMPNE:_        case Opcodes.LRETURN:_        case Opcodes.DRETURN:_            pop(2)__            break__        case Opcodes.DUP:_            t1 = pop()__            push(t1)__            push(t1)__            break__        case Opcodes.DUP_X1:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2:_            t1 = pop()__            t2 = pop()__            push(t2)__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X1:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t2)__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            t4 = pop()__            push(t2)__            push(t1)__            push(t4)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.SWAP:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            break__        case Opcodes.IADD:_        case Opcodes.ISUB:_        case Opcodes.IMUL:_        case Opcodes.IDIV:_        case Opcodes.IREM:_        case Opcodes.IAND:_        case Opcodes.IOR:_        case Opcodes.IXOR:_        case Opcodes.ISHL:_        case Opcodes.ISHR:_        case Opcodes.IUSHR:_        case Opcodes.L2I:_        case Opcodes.D2I:_        case Opcodes.FCMPL:_        case Opcodes.FCMPG:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LADD:_        case Opcodes.LSUB:_        case Opcodes.LMUL:_        case Opcodes.LDIV:_        case Opcodes.LREM:_        case Opcodes.LAND:_        case Opcodes.LOR:_        case Opcodes.LXOR:_            pop(4)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FADD:_        case Opcodes.FSUB:_        case Opcodes.FMUL:_        case Opcodes.FDIV:_        case Opcodes.FREM:_        case Opcodes.L2F:_        case Opcodes.D2F:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DADD:_        case Opcodes.DSUB:_        case Opcodes.DMUL:_        case Opcodes.DDIV:_        case Opcodes.DREM:_            pop(4)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LSHL:_        case Opcodes.LSHR:_        case Opcodes.LUSHR:_            pop(3)__            push(LONG)__            push(TOP)__            break__        case Opcodes.IINC:_            set(arg, INTEGER)__            break__        case Opcodes.I2L:_        case Opcodes.F2L:_            pop(1)__            push(LONG)__            push(TOP)__            break__        case Opcodes.I2F:_            pop(1)__            push(FLOAT)__            break__        case Opcodes.I2D:_        case Opcodes.F2D:_            pop(1)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.F2I:_        case Opcodes.ARRAYLENGTH:_        case Opcodes.INSTANCEOF:_            pop(1)__            push(INTEGER)__            break__        case Opcodes.LCMP:_        case Opcodes.DCMPL:_        case Opcodes.DCMPG:_            pop(4)__            push(INTEGER)__            break__        case Opcodes.JSR:_        case Opcodes.RET:_            throw new RuntimeException(_                    "JSR/RET are not supported with computeFrames option")__        case Opcodes.GETSTATIC:_            push(cw, item.strVal3)__            break__        case Opcodes.PUTSTATIC:_            pop(item.strVal3)__            break__        case Opcodes.GETFIELD:_            pop(1)__            push(cw, item.strVal3)__            break__        case Opcodes.PUTFIELD:_            pop(item.strVal3)__            pop()__            break__        case Opcodes.INVOKEVIRTUAL:_        case Opcodes.INVOKESPECIAL:_        case Opcodes.INVOKESTATIC:_        case Opcodes.INVOKEINTERFACE:_            pop(item.strVal3)__            if (opcode != Opcodes.INVOKESTATIC) {_                t1 = pop()__                if (opcode == Opcodes.INVOKESPECIAL_                        && item.strVal2.charAt(0) == '<') {_                    init(t1)__                }_            }_            push(cw, item.strVal3)__            break__        case Opcodes.INVOKEDYNAMIC:_            pop(item.strVal2)__            push(cw, item.strVal2)__            break__        case Opcodes.NEW:_            push(UNINITIALIZED | cw.addUninitializedType(item.strVal1, arg))__            break__        case Opcodes.NEWARRAY:_            pop()__            switch (arg) {_            case Opcodes.T_BOOLEAN:_                push(ARRAY_OF | BOOLEAN)__                break__            case Opcodes.T_CHAR:_                push(ARRAY_OF | CHAR)__                break__            case Opcodes.T_BYTE:_                push(ARRAY_OF | BYTE)__                break__            case Opcodes.T_SHORT:_                push(ARRAY_OF | SHORT)__                break__            case Opcodes.T_INT:_                push(ARRAY_OF | INTEGER)__                break__            case Opcodes.T_FLOAT:_                push(ARRAY_OF | FLOAT)__                break__            case Opcodes.T_DOUBLE:_                push(ARRAY_OF | DOUBLE)__                break__            _            default:_                push(ARRAY_OF | LONG)__                break__            }_            break__        case Opcodes.ANEWARRAY:_            String s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, '[' + s)__            } else {_                push(ARRAY_OF | OBJECT | cw.addType(s))__            }_            break__        case Opcodes.CHECKCAST:_            s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, s)__            } else {_                push(OBJECT | cw.addType(s))__            }_            break__        _        default:_            pop(arg)__            push(cw, item.strVal1)__            break__        }_    };simulates,the,action,of,the,given,instruction,on,the,output,stack,frame,param,opcode,the,opcode,of,the,instruction,param,arg,the,operand,of,the,instruction,if,any,param,cw,the,class,writer,to,which,this,label,belongs,param,item,the,operand,of,the,instructions,if,any;void,execute,final,int,opcode,final,int,arg,final,class,writer,cw,final,item,item,int,t1,t2,t3,t4,switch,opcode,case,opcodes,nop,case,opcodes,ineg,case,opcodes,lneg,case,opcodes,fneg,case,opcodes,dneg,case,opcodes,i2b,case,opcodes,i2c,case,opcodes,i2s,case,opcodes,goto,case,opcodes,return,break,case,opcodes,push,null,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,bipush,case,opcodes,sipush,case,opcodes,iload,push,integer,break,case,opcodes,case,opcodes,case,opcodes,lload,push,long,push,top,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,fload,push,float,break,case,opcodes,case,opcodes,case,opcodes,dload,push,double,push,top,break,case,opcodes,ldc,switch,item,type,case,class,writer,int,push,integer,break,case,class,writer,long,push,long,push,top,break,case,class,writer,float,push,float,break,case,class,writer,double,push,double,push,top,break,case,class,writer,class,push,object,cw,add,type,java,lang,class,break,case,class,writer,str,push,object,cw,add,type,java,lang,string,break,case,class,writer,mtype,push,object,cw,add,type,java,lang,invoke,method,type,break,default,push,object,cw,add,type,java,lang,invoke,method,handle,break,case,opcodes,aload,push,get,arg,break,case,opcodes,iaload,case,opcodes,baload,case,opcodes,caload,case,opcodes,saload,pop,2,push,integer,break,case,opcodes,laload,case,opcodes,d2l,pop,2,push,long,push,top,break,case,opcodes,faload,pop,2,push,float,break,case,opcodes,daload,case,opcodes,l2d,pop,2,push,double,push,top,break,case,opcodes,aaload,pop,1,t1,pop,push,t1,break,case,opcodes,istore,case,opcodes,fstore,case,opcodes,astore,t1,pop,set,arg,t1,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,lstore,case,opcodes,dstore,pop,1,t1,pop,set,arg,t1,set,arg,1,top,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,iastore,case,opcodes,bastore,case,opcodes,castore,case,opcodes,sastore,case,opcodes,fastore,case,opcodes,aastore,pop,3,break,case,opcodes,lastore,case,opcodes,dastore,pop,4,break,case,opcodes,pop,case,opcodes,ifeq,case,opcodes,ifne,case,opcodes,iflt,case,opcodes,ifge,case,opcodes,ifgt,case,opcodes,ifle,case,opcodes,ireturn,case,opcodes,freturn,case,opcodes,areturn,case,opcodes,tableswitch,case,opcodes,lookupswitch,case,opcodes,athrow,case,opcodes,monitorenter,case,opcodes,monitorexit,case,opcodes,ifnull,case,opcodes,ifnonnull,pop,1,break,case,opcodes,pop2,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,lreturn,case,opcodes,dreturn,pop,2,break,case,opcodes,dup,t1,pop,push,t1,push,t1,break,case,opcodes,t1,pop,t2,pop,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,dup2,t1,pop,t2,pop,push,t2,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t2,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,t4,pop,push,t2,push,t1,push,t4,push,t3,push,t2,push,t1,break,case,opcodes,swap,t1,pop,t2,pop,push,t1,push,t2,break,case,opcodes,iadd,case,opcodes,isub,case,opcodes,imul,case,opcodes,idiv,case,opcodes,irem,case,opcodes,iand,case,opcodes,ior,case,opcodes,ixor,case,opcodes,ishl,case,opcodes,ishr,case,opcodes,iushr,case,opcodes,l2i,case,opcodes,d2i,case,opcodes,fcmpl,case,opcodes,fcmpg,pop,2,push,integer,break,case,opcodes,ladd,case,opcodes,lsub,case,opcodes,lmul,case,opcodes,ldiv,case,opcodes,lrem,case,opcodes,land,case,opcodes,lor,case,opcodes,lxor,pop,4,push,long,push,top,break,case,opcodes,fadd,case,opcodes,fsub,case,opcodes,fmul,case,opcodes,fdiv,case,opcodes,frem,case,opcodes,l2f,case,opcodes,d2f,pop,2,push,float,break,case,opcodes,dadd,case,opcodes,dsub,case,opcodes,dmul,case,opcodes,ddiv,case,opcodes,drem,pop,4,push,double,push,top,break,case,opcodes,lshl,case,opcodes,lshr,case,opcodes,lushr,pop,3,push,long,push,top,break,case,opcodes,iinc,set,arg,integer,break,case,opcodes,i2l,case,opcodes,f2l,pop,1,push,long,push,top,break,case,opcodes,i2f,pop,1,push,float,break,case,opcodes,i2d,case,opcodes,f2d,pop,1,push,double,push,top,break,case,opcodes,f2i,case,opcodes,arraylength,case,opcodes,instanceof,pop,1,push,integer,break,case,opcodes,lcmp,case,opcodes,dcmpl,case,opcodes,dcmpg,pop,4,push,integer,break,case,opcodes,jsr,case,opcodes,ret,throw,new,runtime,exception,jsr,ret,are,not,supported,with,compute,frames,option,case,opcodes,getstatic,push,cw,item,str,val3,break,case,opcodes,putstatic,pop,item,str,val3,break,case,opcodes,getfield,pop,1,push,cw,item,str,val3,break,case,opcodes,putfield,pop,item,str,val3,pop,break,case,opcodes,invokevirtual,case,opcodes,invokespecial,case,opcodes,invokestatic,case,opcodes,invokeinterface,pop,item,str,val3,if,opcode,opcodes,invokestatic,t1,pop,if,opcode,opcodes,invokespecial,item,str,val2,char,at,0,init,t1,push,cw,item,str,val3,break,case,opcodes,invokedynamic,pop,item,str,val2,push,cw,item,str,val2,break,case,opcodes,new,push,uninitialized,cw,add,uninitialized,type,item,str,val1,arg,break,case,opcodes,newarray,pop,switch,arg,case,opcodes,push,boolean,break,case,opcodes,push,char,break,case,opcodes,push,byte,break,case,opcodes,push,short,break,case,opcodes,push,integer,break,case,opcodes,push,float,break,case,opcodes,push,double,break,default,push,long,break,break,case,opcodes,anewarray,string,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,case,opcodes,checkcast,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,default,pop,arg,push,cw,item,str,val1,break
Frame -> void execute(final int opcode, final int arg, final ClassWriter cw,             final Item item);1385423968;Simulates the action of the given instruction on the output stack frame.__@param opcode_the opcode of the instruction._@param arg_the operand of the instruction, if any._@param cw_the class writer to which this label belongs._@param item_the operand of the instructions, if any.;void execute(final int opcode, final int arg, final ClassWriter cw,_            final Item item) {_        int t1, t2, t3, t4__        switch (opcode) {_        case Opcodes.NOP:_        case Opcodes.INEG:_        case Opcodes.LNEG:_        case Opcodes.FNEG:_        case Opcodes.DNEG:_        case Opcodes.I2B:_        case Opcodes.I2C:_        case Opcodes.I2S:_        case Opcodes.GOTO:_        case Opcodes.RETURN:_            break__        case Opcodes.ACONST_NULL:_            push(NULL)__            break__        case Opcodes.ICONST_M1:_        case Opcodes.ICONST_0:_        case Opcodes.ICONST_1:_        case Opcodes.ICONST_2:_        case Opcodes.ICONST_3:_        case Opcodes.ICONST_4:_        case Opcodes.ICONST_5:_        case Opcodes.BIPUSH:_        case Opcodes.SIPUSH:_        case Opcodes.ILOAD:_            push(INTEGER)__            break__        case Opcodes.LCONST_0:_        case Opcodes.LCONST_1:_        case Opcodes.LLOAD:_            push(LONG)__            push(TOP)__            break__        case Opcodes.FCONST_0:_        case Opcodes.FCONST_1:_        case Opcodes.FCONST_2:_        case Opcodes.FLOAD:_            push(FLOAT)__            break__        case Opcodes.DCONST_0:_        case Opcodes.DCONST_1:_        case Opcodes.DLOAD:_            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LDC:_            switch (item.type) {_            case ClassWriter.INT:_                push(INTEGER)__                break__            case ClassWriter.LONG:_                push(LONG)__                push(TOP)__                break__            case ClassWriter.FLOAT:_                push(FLOAT)__                break__            case ClassWriter.DOUBLE:_                push(DOUBLE)__                push(TOP)__                break__            case ClassWriter.CLASS:_                push(OBJECT | cw.addType("java/lang/Class"))__                break__            case ClassWriter.STR:_                push(OBJECT | cw.addType("java/lang/String"))__                break__            case ClassWriter.MTYPE:_                push(OBJECT | cw.addType("java/lang/invoke/MethodType"))__                break__            _            default:_                push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"))__            }_            break__        case Opcodes.ALOAD:_            push(get(arg))__            break__        case Opcodes.IALOAD:_        case Opcodes.BALOAD:_        case Opcodes.CALOAD:_        case Opcodes.SALOAD:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LALOAD:_        case Opcodes.D2L:_            pop(2)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FALOAD:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DALOAD:_        case Opcodes.L2D:_            pop(2)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.AALOAD:_            pop(1)__            t1 = pop()__            push(ELEMENT_OF + t1)__            break__        case Opcodes.ISTORE:_        case Opcodes.FSTORE:_        case Opcodes.ASTORE:_            t1 = pop()__            set(arg, t1)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.LSTORE:_        case Opcodes.DSTORE:_            pop(1)__            t1 = pop()__            set(arg, t1)__            set(arg + 1, TOP)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.IASTORE:_        case Opcodes.BASTORE:_        case Opcodes.CASTORE:_        case Opcodes.SASTORE:_        case Opcodes.FASTORE:_        case Opcodes.AASTORE:_            pop(3)__            break__        case Opcodes.LASTORE:_        case Opcodes.DASTORE:_            pop(4)__            break__        case Opcodes.POP:_        case Opcodes.IFEQ:_        case Opcodes.IFNE:_        case Opcodes.IFLT:_        case Opcodes.IFGE:_        case Opcodes.IFGT:_        case Opcodes.IFLE:_        case Opcodes.IRETURN:_        case Opcodes.FRETURN:_        case Opcodes.ARETURN:_        case Opcodes.TABLESWITCH:_        case Opcodes.LOOKUPSWITCH:_        case Opcodes.ATHROW:_        case Opcodes.MONITORENTER:_        case Opcodes.MONITOREXIT:_        case Opcodes.IFNULL:_        case Opcodes.IFNONNULL:_            pop(1)__            break__        case Opcodes.POP2:_        case Opcodes.IF_ICMPEQ:_        case Opcodes.IF_ICMPNE:_        case Opcodes.IF_ICMPLT:_        case Opcodes.IF_ICMPGE:_        case Opcodes.IF_ICMPGT:_        case Opcodes.IF_ICMPLE:_        case Opcodes.IF_ACMPEQ:_        case Opcodes.IF_ACMPNE:_        case Opcodes.LRETURN:_        case Opcodes.DRETURN:_            pop(2)__            break__        case Opcodes.DUP:_            t1 = pop()__            push(t1)__            push(t1)__            break__        case Opcodes.DUP_X1:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2:_            t1 = pop()__            t2 = pop()__            push(t2)__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X1:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t2)__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            t4 = pop()__            push(t2)__            push(t1)__            push(t4)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.SWAP:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            break__        case Opcodes.IADD:_        case Opcodes.ISUB:_        case Opcodes.IMUL:_        case Opcodes.IDIV:_        case Opcodes.IREM:_        case Opcodes.IAND:_        case Opcodes.IOR:_        case Opcodes.IXOR:_        case Opcodes.ISHL:_        case Opcodes.ISHR:_        case Opcodes.IUSHR:_        case Opcodes.L2I:_        case Opcodes.D2I:_        case Opcodes.FCMPL:_        case Opcodes.FCMPG:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LADD:_        case Opcodes.LSUB:_        case Opcodes.LMUL:_        case Opcodes.LDIV:_        case Opcodes.LREM:_        case Opcodes.LAND:_        case Opcodes.LOR:_        case Opcodes.LXOR:_            pop(4)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FADD:_        case Opcodes.FSUB:_        case Opcodes.FMUL:_        case Opcodes.FDIV:_        case Opcodes.FREM:_        case Opcodes.L2F:_        case Opcodes.D2F:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DADD:_        case Opcodes.DSUB:_        case Opcodes.DMUL:_        case Opcodes.DDIV:_        case Opcodes.DREM:_            pop(4)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LSHL:_        case Opcodes.LSHR:_        case Opcodes.LUSHR:_            pop(3)__            push(LONG)__            push(TOP)__            break__        case Opcodes.IINC:_            set(arg, INTEGER)__            break__        case Opcodes.I2L:_        case Opcodes.F2L:_            pop(1)__            push(LONG)__            push(TOP)__            break__        case Opcodes.I2F:_            pop(1)__            push(FLOAT)__            break__        case Opcodes.I2D:_        case Opcodes.F2D:_            pop(1)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.F2I:_        case Opcodes.ARRAYLENGTH:_        case Opcodes.INSTANCEOF:_            pop(1)__            push(INTEGER)__            break__        case Opcodes.LCMP:_        case Opcodes.DCMPL:_        case Opcodes.DCMPG:_            pop(4)__            push(INTEGER)__            break__        case Opcodes.JSR:_        case Opcodes.RET:_            throw new RuntimeException(_                    "JSR/RET are not supported with computeFrames option")__        case Opcodes.GETSTATIC:_            push(cw, item.strVal3)__            break__        case Opcodes.PUTSTATIC:_            pop(item.strVal3)__            break__        case Opcodes.GETFIELD:_            pop(1)__            push(cw, item.strVal3)__            break__        case Opcodes.PUTFIELD:_            pop(item.strVal3)__            pop()__            break__        case Opcodes.INVOKEVIRTUAL:_        case Opcodes.INVOKESPECIAL:_        case Opcodes.INVOKESTATIC:_        case Opcodes.INVOKEINTERFACE:_            pop(item.strVal3)__            if (opcode != Opcodes.INVOKESTATIC) {_                t1 = pop()__                if (opcode == Opcodes.INVOKESPECIAL_                        && item.strVal2.charAt(0) == '<') {_                    init(t1)__                }_            }_            push(cw, item.strVal3)__            break__        case Opcodes.INVOKEDYNAMIC:_            pop(item.strVal2)__            push(cw, item.strVal2)__            break__        case Opcodes.NEW:_            push(UNINITIALIZED | cw.addUninitializedType(item.strVal1, arg))__            break__        case Opcodes.NEWARRAY:_            pop()__            switch (arg) {_            case Opcodes.T_BOOLEAN:_                push(ARRAY_OF | BOOLEAN)__                break__            case Opcodes.T_CHAR:_                push(ARRAY_OF | CHAR)__                break__            case Opcodes.T_BYTE:_                push(ARRAY_OF | BYTE)__                break__            case Opcodes.T_SHORT:_                push(ARRAY_OF | SHORT)__                break__            case Opcodes.T_INT:_                push(ARRAY_OF | INTEGER)__                break__            case Opcodes.T_FLOAT:_                push(ARRAY_OF | FLOAT)__                break__            case Opcodes.T_DOUBLE:_                push(ARRAY_OF | DOUBLE)__                break__            _            default:_                push(ARRAY_OF | LONG)__                break__            }_            break__        case Opcodes.ANEWARRAY:_            String s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, '[' + s)__            } else {_                push(ARRAY_OF | OBJECT | cw.addType(s))__            }_            break__        case Opcodes.CHECKCAST:_            s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, s)__            } else {_                push(OBJECT | cw.addType(s))__            }_            break__        _        default:_            pop(arg)__            push(cw, item.strVal1)__            break__        }_    };simulates,the,action,of,the,given,instruction,on,the,output,stack,frame,param,opcode,the,opcode,of,the,instruction,param,arg,the,operand,of,the,instruction,if,any,param,cw,the,class,writer,to,which,this,label,belongs,param,item,the,operand,of,the,instructions,if,any;void,execute,final,int,opcode,final,int,arg,final,class,writer,cw,final,item,item,int,t1,t2,t3,t4,switch,opcode,case,opcodes,nop,case,opcodes,ineg,case,opcodes,lneg,case,opcodes,fneg,case,opcodes,dneg,case,opcodes,i2b,case,opcodes,i2c,case,opcodes,i2s,case,opcodes,goto,case,opcodes,return,break,case,opcodes,push,null,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,bipush,case,opcodes,sipush,case,opcodes,iload,push,integer,break,case,opcodes,case,opcodes,case,opcodes,lload,push,long,push,top,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,fload,push,float,break,case,opcodes,case,opcodes,case,opcodes,dload,push,double,push,top,break,case,opcodes,ldc,switch,item,type,case,class,writer,int,push,integer,break,case,class,writer,long,push,long,push,top,break,case,class,writer,float,push,float,break,case,class,writer,double,push,double,push,top,break,case,class,writer,class,push,object,cw,add,type,java,lang,class,break,case,class,writer,str,push,object,cw,add,type,java,lang,string,break,case,class,writer,mtype,push,object,cw,add,type,java,lang,invoke,method,type,break,default,push,object,cw,add,type,java,lang,invoke,method,handle,break,case,opcodes,aload,push,get,arg,break,case,opcodes,iaload,case,opcodes,baload,case,opcodes,caload,case,opcodes,saload,pop,2,push,integer,break,case,opcodes,laload,case,opcodes,d2l,pop,2,push,long,push,top,break,case,opcodes,faload,pop,2,push,float,break,case,opcodes,daload,case,opcodes,l2d,pop,2,push,double,push,top,break,case,opcodes,aaload,pop,1,t1,pop,push,t1,break,case,opcodes,istore,case,opcodes,fstore,case,opcodes,astore,t1,pop,set,arg,t1,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,lstore,case,opcodes,dstore,pop,1,t1,pop,set,arg,t1,set,arg,1,top,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,iastore,case,opcodes,bastore,case,opcodes,castore,case,opcodes,sastore,case,opcodes,fastore,case,opcodes,aastore,pop,3,break,case,opcodes,lastore,case,opcodes,dastore,pop,4,break,case,opcodes,pop,case,opcodes,ifeq,case,opcodes,ifne,case,opcodes,iflt,case,opcodes,ifge,case,opcodes,ifgt,case,opcodes,ifle,case,opcodes,ireturn,case,opcodes,freturn,case,opcodes,areturn,case,opcodes,tableswitch,case,opcodes,lookupswitch,case,opcodes,athrow,case,opcodes,monitorenter,case,opcodes,monitorexit,case,opcodes,ifnull,case,opcodes,ifnonnull,pop,1,break,case,opcodes,pop2,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,lreturn,case,opcodes,dreturn,pop,2,break,case,opcodes,dup,t1,pop,push,t1,push,t1,break,case,opcodes,t1,pop,t2,pop,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,dup2,t1,pop,t2,pop,push,t2,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t2,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,t4,pop,push,t2,push,t1,push,t4,push,t3,push,t2,push,t1,break,case,opcodes,swap,t1,pop,t2,pop,push,t1,push,t2,break,case,opcodes,iadd,case,opcodes,isub,case,opcodes,imul,case,opcodes,idiv,case,opcodes,irem,case,opcodes,iand,case,opcodes,ior,case,opcodes,ixor,case,opcodes,ishl,case,opcodes,ishr,case,opcodes,iushr,case,opcodes,l2i,case,opcodes,d2i,case,opcodes,fcmpl,case,opcodes,fcmpg,pop,2,push,integer,break,case,opcodes,ladd,case,opcodes,lsub,case,opcodes,lmul,case,opcodes,ldiv,case,opcodes,lrem,case,opcodes,land,case,opcodes,lor,case,opcodes,lxor,pop,4,push,long,push,top,break,case,opcodes,fadd,case,opcodes,fsub,case,opcodes,fmul,case,opcodes,fdiv,case,opcodes,frem,case,opcodes,l2f,case,opcodes,d2f,pop,2,push,float,break,case,opcodes,dadd,case,opcodes,dsub,case,opcodes,dmul,case,opcodes,ddiv,case,opcodes,drem,pop,4,push,double,push,top,break,case,opcodes,lshl,case,opcodes,lshr,case,opcodes,lushr,pop,3,push,long,push,top,break,case,opcodes,iinc,set,arg,integer,break,case,opcodes,i2l,case,opcodes,f2l,pop,1,push,long,push,top,break,case,opcodes,i2f,pop,1,push,float,break,case,opcodes,i2d,case,opcodes,f2d,pop,1,push,double,push,top,break,case,opcodes,f2i,case,opcodes,arraylength,case,opcodes,instanceof,pop,1,push,integer,break,case,opcodes,lcmp,case,opcodes,dcmpl,case,opcodes,dcmpg,pop,4,push,integer,break,case,opcodes,jsr,case,opcodes,ret,throw,new,runtime,exception,jsr,ret,are,not,supported,with,compute,frames,option,case,opcodes,getstatic,push,cw,item,str,val3,break,case,opcodes,putstatic,pop,item,str,val3,break,case,opcodes,getfield,pop,1,push,cw,item,str,val3,break,case,opcodes,putfield,pop,item,str,val3,pop,break,case,opcodes,invokevirtual,case,opcodes,invokespecial,case,opcodes,invokestatic,case,opcodes,invokeinterface,pop,item,str,val3,if,opcode,opcodes,invokestatic,t1,pop,if,opcode,opcodes,invokespecial,item,str,val2,char,at,0,init,t1,push,cw,item,str,val3,break,case,opcodes,invokedynamic,pop,item,str,val2,push,cw,item,str,val2,break,case,opcodes,new,push,uninitialized,cw,add,uninitialized,type,item,str,val1,arg,break,case,opcodes,newarray,pop,switch,arg,case,opcodes,push,boolean,break,case,opcodes,push,char,break,case,opcodes,push,byte,break,case,opcodes,push,short,break,case,opcodes,push,integer,break,case,opcodes,push,float,break,case,opcodes,push,double,break,default,push,long,break,break,case,opcodes,anewarray,string,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,case,opcodes,checkcast,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,default,pop,arg,push,cw,item,str,val1,break
Frame -> void execute(final int opcode, final int arg, final ClassWriter cw,             final Item item);1395273982;Simulates the action of the given instruction on the output stack frame.__@param opcode_the opcode of the instruction._@param arg_the operand of the instruction, if any._@param cw_the class writer to which this label belongs._@param item_the operand of the instructions, if any.;void execute(final int opcode, final int arg, final ClassWriter cw,_            final Item item) {_        int t1, t2, t3, t4__        switch (opcode) {_        case Opcodes.NOP:_        case Opcodes.INEG:_        case Opcodes.LNEG:_        case Opcodes.FNEG:_        case Opcodes.DNEG:_        case Opcodes.I2B:_        case Opcodes.I2C:_        case Opcodes.I2S:_        case Opcodes.GOTO:_        case Opcodes.RETURN:_            break__        case Opcodes.ACONST_NULL:_            push(NULL)__            break__        case Opcodes.ICONST_M1:_        case Opcodes.ICONST_0:_        case Opcodes.ICONST_1:_        case Opcodes.ICONST_2:_        case Opcodes.ICONST_3:_        case Opcodes.ICONST_4:_        case Opcodes.ICONST_5:_        case Opcodes.BIPUSH:_        case Opcodes.SIPUSH:_        case Opcodes.ILOAD:_            push(INTEGER)__            break__        case Opcodes.LCONST_0:_        case Opcodes.LCONST_1:_        case Opcodes.LLOAD:_            push(LONG)__            push(TOP)__            break__        case Opcodes.FCONST_0:_        case Opcodes.FCONST_1:_        case Opcodes.FCONST_2:_        case Opcodes.FLOAD:_            push(FLOAT)__            break__        case Opcodes.DCONST_0:_        case Opcodes.DCONST_1:_        case Opcodes.DLOAD:_            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LDC:_            switch (item.type) {_            case ClassWriter.INT:_                push(INTEGER)__                break__            case ClassWriter.LONG:_                push(LONG)__                push(TOP)__                break__            case ClassWriter.FLOAT:_                push(FLOAT)__                break__            case ClassWriter.DOUBLE:_                push(DOUBLE)__                push(TOP)__                break__            case ClassWriter.CLASS:_                push(OBJECT | cw.addType("java/lang/Class"))__                break__            case ClassWriter.STR:_                push(OBJECT | cw.addType("java/lang/String"))__                break__            case ClassWriter.MTYPE:_                push(OBJECT | cw.addType("java/lang/invoke/MethodType"))__                break__            _            default:_                push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"))__            }_            break__        case Opcodes.ALOAD:_            push(get(arg))__            break__        case Opcodes.IALOAD:_        case Opcodes.BALOAD:_        case Opcodes.CALOAD:_        case Opcodes.SALOAD:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LALOAD:_        case Opcodes.D2L:_            pop(2)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FALOAD:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DALOAD:_        case Opcodes.L2D:_            pop(2)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.AALOAD:_            pop(1)__            t1 = pop()__            push(ELEMENT_OF + t1)__            break__        case Opcodes.ISTORE:_        case Opcodes.FSTORE:_        case Opcodes.ASTORE:_            t1 = pop()__            set(arg, t1)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.LSTORE:_        case Opcodes.DSTORE:_            pop(1)__            t1 = pop()__            set(arg, t1)__            set(arg + 1, TOP)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.IASTORE:_        case Opcodes.BASTORE:_        case Opcodes.CASTORE:_        case Opcodes.SASTORE:_        case Opcodes.FASTORE:_        case Opcodes.AASTORE:_            pop(3)__            break__        case Opcodes.LASTORE:_        case Opcodes.DASTORE:_            pop(4)__            break__        case Opcodes.POP:_        case Opcodes.IFEQ:_        case Opcodes.IFNE:_        case Opcodes.IFLT:_        case Opcodes.IFGE:_        case Opcodes.IFGT:_        case Opcodes.IFLE:_        case Opcodes.IRETURN:_        case Opcodes.FRETURN:_        case Opcodes.ARETURN:_        case Opcodes.TABLESWITCH:_        case Opcodes.LOOKUPSWITCH:_        case Opcodes.ATHROW:_        case Opcodes.MONITORENTER:_        case Opcodes.MONITOREXIT:_        case Opcodes.IFNULL:_        case Opcodes.IFNONNULL:_            pop(1)__            break__        case Opcodes.POP2:_        case Opcodes.IF_ICMPEQ:_        case Opcodes.IF_ICMPNE:_        case Opcodes.IF_ICMPLT:_        case Opcodes.IF_ICMPGE:_        case Opcodes.IF_ICMPGT:_        case Opcodes.IF_ICMPLE:_        case Opcodes.IF_ACMPEQ:_        case Opcodes.IF_ACMPNE:_        case Opcodes.LRETURN:_        case Opcodes.DRETURN:_            pop(2)__            break__        case Opcodes.DUP:_            t1 = pop()__            push(t1)__            push(t1)__            break__        case Opcodes.DUP_X1:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2:_            t1 = pop()__            t2 = pop()__            push(t2)__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X1:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t2)__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            t4 = pop()__            push(t2)__            push(t1)__            push(t4)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.SWAP:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            break__        case Opcodes.IADD:_        case Opcodes.ISUB:_        case Opcodes.IMUL:_        case Opcodes.IDIV:_        case Opcodes.IREM:_        case Opcodes.IAND:_        case Opcodes.IOR:_        case Opcodes.IXOR:_        case Opcodes.ISHL:_        case Opcodes.ISHR:_        case Opcodes.IUSHR:_        case Opcodes.L2I:_        case Opcodes.D2I:_        case Opcodes.FCMPL:_        case Opcodes.FCMPG:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LADD:_        case Opcodes.LSUB:_        case Opcodes.LMUL:_        case Opcodes.LDIV:_        case Opcodes.LREM:_        case Opcodes.LAND:_        case Opcodes.LOR:_        case Opcodes.LXOR:_            pop(4)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FADD:_        case Opcodes.FSUB:_        case Opcodes.FMUL:_        case Opcodes.FDIV:_        case Opcodes.FREM:_        case Opcodes.L2F:_        case Opcodes.D2F:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DADD:_        case Opcodes.DSUB:_        case Opcodes.DMUL:_        case Opcodes.DDIV:_        case Opcodes.DREM:_            pop(4)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LSHL:_        case Opcodes.LSHR:_        case Opcodes.LUSHR:_            pop(3)__            push(LONG)__            push(TOP)__            break__        case Opcodes.IINC:_            set(arg, INTEGER)__            break__        case Opcodes.I2L:_        case Opcodes.F2L:_            pop(1)__            push(LONG)__            push(TOP)__            break__        case Opcodes.I2F:_            pop(1)__            push(FLOAT)__            break__        case Opcodes.I2D:_        case Opcodes.F2D:_            pop(1)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.F2I:_        case Opcodes.ARRAYLENGTH:_        case Opcodes.INSTANCEOF:_            pop(1)__            push(INTEGER)__            break__        case Opcodes.LCMP:_        case Opcodes.DCMPL:_        case Opcodes.DCMPG:_            pop(4)__            push(INTEGER)__            break__        case Opcodes.JSR:_        case Opcodes.RET:_            throw new RuntimeException(_                    "JSR/RET are not supported with computeFrames option")__        case Opcodes.GETSTATIC:_            push(cw, item.strVal3)__            break__        case Opcodes.PUTSTATIC:_            pop(item.strVal3)__            break__        case Opcodes.GETFIELD:_            pop(1)__            push(cw, item.strVal3)__            break__        case Opcodes.PUTFIELD:_            pop(item.strVal3)__            pop()__            break__        case Opcodes.INVOKEVIRTUAL:_        case Opcodes.INVOKESPECIAL:_        case Opcodes.INVOKESTATIC:_        case Opcodes.INVOKEINTERFACE:_            pop(item.strVal3)__            if (opcode != Opcodes.INVOKESTATIC) {_                t1 = pop()__                if (opcode == Opcodes.INVOKESPECIAL_                        && item.strVal2.charAt(0) == '<') {_                    init(t1)__                }_            }_            push(cw, item.strVal3)__            break__        case Opcodes.INVOKEDYNAMIC:_            pop(item.strVal2)__            push(cw, item.strVal2)__            break__        case Opcodes.NEW:_            push(UNINITIALIZED | cw.addUninitializedType(item.strVal1, arg))__            break__        case Opcodes.NEWARRAY:_            pop()__            switch (arg) {_            case Opcodes.T_BOOLEAN:_                push(ARRAY_OF | BOOLEAN)__                break__            case Opcodes.T_CHAR:_                push(ARRAY_OF | CHAR)__                break__            case Opcodes.T_BYTE:_                push(ARRAY_OF | BYTE)__                break__            case Opcodes.T_SHORT:_                push(ARRAY_OF | SHORT)__                break__            case Opcodes.T_INT:_                push(ARRAY_OF | INTEGER)__                break__            case Opcodes.T_FLOAT:_                push(ARRAY_OF | FLOAT)__                break__            case Opcodes.T_DOUBLE:_                push(ARRAY_OF | DOUBLE)__                break__            _            default:_                push(ARRAY_OF | LONG)__                break__            }_            break__        case Opcodes.ANEWARRAY:_            String s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, '[' + s)__            } else {_                push(ARRAY_OF | OBJECT | cw.addType(s))__            }_            break__        case Opcodes.CHECKCAST:_            s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, s)__            } else {_                push(OBJECT | cw.addType(s))__            }_            break__        _        default:_            pop(arg)__            push(cw, item.strVal1)__            break__        }_    };simulates,the,action,of,the,given,instruction,on,the,output,stack,frame,param,opcode,the,opcode,of,the,instruction,param,arg,the,operand,of,the,instruction,if,any,param,cw,the,class,writer,to,which,this,label,belongs,param,item,the,operand,of,the,instructions,if,any;void,execute,final,int,opcode,final,int,arg,final,class,writer,cw,final,item,item,int,t1,t2,t3,t4,switch,opcode,case,opcodes,nop,case,opcodes,ineg,case,opcodes,lneg,case,opcodes,fneg,case,opcodes,dneg,case,opcodes,i2b,case,opcodes,i2c,case,opcodes,i2s,case,opcodes,goto,case,opcodes,return,break,case,opcodes,push,null,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,bipush,case,opcodes,sipush,case,opcodes,iload,push,integer,break,case,opcodes,case,opcodes,case,opcodes,lload,push,long,push,top,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,fload,push,float,break,case,opcodes,case,opcodes,case,opcodes,dload,push,double,push,top,break,case,opcodes,ldc,switch,item,type,case,class,writer,int,push,integer,break,case,class,writer,long,push,long,push,top,break,case,class,writer,float,push,float,break,case,class,writer,double,push,double,push,top,break,case,class,writer,class,push,object,cw,add,type,java,lang,class,break,case,class,writer,str,push,object,cw,add,type,java,lang,string,break,case,class,writer,mtype,push,object,cw,add,type,java,lang,invoke,method,type,break,default,push,object,cw,add,type,java,lang,invoke,method,handle,break,case,opcodes,aload,push,get,arg,break,case,opcodes,iaload,case,opcodes,baload,case,opcodes,caload,case,opcodes,saload,pop,2,push,integer,break,case,opcodes,laload,case,opcodes,d2l,pop,2,push,long,push,top,break,case,opcodes,faload,pop,2,push,float,break,case,opcodes,daload,case,opcodes,l2d,pop,2,push,double,push,top,break,case,opcodes,aaload,pop,1,t1,pop,push,t1,break,case,opcodes,istore,case,opcodes,fstore,case,opcodes,astore,t1,pop,set,arg,t1,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,lstore,case,opcodes,dstore,pop,1,t1,pop,set,arg,t1,set,arg,1,top,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,iastore,case,opcodes,bastore,case,opcodes,castore,case,opcodes,sastore,case,opcodes,fastore,case,opcodes,aastore,pop,3,break,case,opcodes,lastore,case,opcodes,dastore,pop,4,break,case,opcodes,pop,case,opcodes,ifeq,case,opcodes,ifne,case,opcodes,iflt,case,opcodes,ifge,case,opcodes,ifgt,case,opcodes,ifle,case,opcodes,ireturn,case,opcodes,freturn,case,opcodes,areturn,case,opcodes,tableswitch,case,opcodes,lookupswitch,case,opcodes,athrow,case,opcodes,monitorenter,case,opcodes,monitorexit,case,opcodes,ifnull,case,opcodes,ifnonnull,pop,1,break,case,opcodes,pop2,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,lreturn,case,opcodes,dreturn,pop,2,break,case,opcodes,dup,t1,pop,push,t1,push,t1,break,case,opcodes,t1,pop,t2,pop,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,dup2,t1,pop,t2,pop,push,t2,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t2,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,t4,pop,push,t2,push,t1,push,t4,push,t3,push,t2,push,t1,break,case,opcodes,swap,t1,pop,t2,pop,push,t1,push,t2,break,case,opcodes,iadd,case,opcodes,isub,case,opcodes,imul,case,opcodes,idiv,case,opcodes,irem,case,opcodes,iand,case,opcodes,ior,case,opcodes,ixor,case,opcodes,ishl,case,opcodes,ishr,case,opcodes,iushr,case,opcodes,l2i,case,opcodes,d2i,case,opcodes,fcmpl,case,opcodes,fcmpg,pop,2,push,integer,break,case,opcodes,ladd,case,opcodes,lsub,case,opcodes,lmul,case,opcodes,ldiv,case,opcodes,lrem,case,opcodes,land,case,opcodes,lor,case,opcodes,lxor,pop,4,push,long,push,top,break,case,opcodes,fadd,case,opcodes,fsub,case,opcodes,fmul,case,opcodes,fdiv,case,opcodes,frem,case,opcodes,l2f,case,opcodes,d2f,pop,2,push,float,break,case,opcodes,dadd,case,opcodes,dsub,case,opcodes,dmul,case,opcodes,ddiv,case,opcodes,drem,pop,4,push,double,push,top,break,case,opcodes,lshl,case,opcodes,lshr,case,opcodes,lushr,pop,3,push,long,push,top,break,case,opcodes,iinc,set,arg,integer,break,case,opcodes,i2l,case,opcodes,f2l,pop,1,push,long,push,top,break,case,opcodes,i2f,pop,1,push,float,break,case,opcodes,i2d,case,opcodes,f2d,pop,1,push,double,push,top,break,case,opcodes,f2i,case,opcodes,arraylength,case,opcodes,instanceof,pop,1,push,integer,break,case,opcodes,lcmp,case,opcodes,dcmpl,case,opcodes,dcmpg,pop,4,push,integer,break,case,opcodes,jsr,case,opcodes,ret,throw,new,runtime,exception,jsr,ret,are,not,supported,with,compute,frames,option,case,opcodes,getstatic,push,cw,item,str,val3,break,case,opcodes,putstatic,pop,item,str,val3,break,case,opcodes,getfield,pop,1,push,cw,item,str,val3,break,case,opcodes,putfield,pop,item,str,val3,pop,break,case,opcodes,invokevirtual,case,opcodes,invokespecial,case,opcodes,invokestatic,case,opcodes,invokeinterface,pop,item,str,val3,if,opcode,opcodes,invokestatic,t1,pop,if,opcode,opcodes,invokespecial,item,str,val2,char,at,0,init,t1,push,cw,item,str,val3,break,case,opcodes,invokedynamic,pop,item,str,val2,push,cw,item,str,val2,break,case,opcodes,new,push,uninitialized,cw,add,uninitialized,type,item,str,val1,arg,break,case,opcodes,newarray,pop,switch,arg,case,opcodes,push,boolean,break,case,opcodes,push,char,break,case,opcodes,push,byte,break,case,opcodes,push,short,break,case,opcodes,push,integer,break,case,opcodes,push,float,break,case,opcodes,push,double,break,default,push,long,break,break,case,opcodes,anewarray,string,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,case,opcodes,checkcast,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,default,pop,arg,push,cw,item,str,val1,break
Frame -> void execute(final int opcode, final int arg, final ClassWriter cw,             final Item item);1397644526;Simulates the action of the given instruction on the output stack frame.__@param opcode_the opcode of the instruction._@param arg_the operand of the instruction, if any._@param cw_the class writer to which this label belongs._@param item_the operand of the instructions, if any.;void execute(final int opcode, final int arg, final ClassWriter cw,_            final Item item) {_        int t1, t2, t3, t4__        switch (opcode) {_        case Opcodes.NOP:_        case Opcodes.INEG:_        case Opcodes.LNEG:_        case Opcodes.FNEG:_        case Opcodes.DNEG:_        case Opcodes.I2B:_        case Opcodes.I2C:_        case Opcodes.I2S:_        case Opcodes.GOTO:_        case Opcodes.RETURN:_            break__        case Opcodes.ACONST_NULL:_            push(NULL)__            break__        case Opcodes.ICONST_M1:_        case Opcodes.ICONST_0:_        case Opcodes.ICONST_1:_        case Opcodes.ICONST_2:_        case Opcodes.ICONST_3:_        case Opcodes.ICONST_4:_        case Opcodes.ICONST_5:_        case Opcodes.BIPUSH:_        case Opcodes.SIPUSH:_        case Opcodes.ILOAD:_            push(INTEGER)__            break__        case Opcodes.LCONST_0:_        case Opcodes.LCONST_1:_        case Opcodes.LLOAD:_            push(LONG)__            push(TOP)__            break__        case Opcodes.FCONST_0:_        case Opcodes.FCONST_1:_        case Opcodes.FCONST_2:_        case Opcodes.FLOAD:_            push(FLOAT)__            break__        case Opcodes.DCONST_0:_        case Opcodes.DCONST_1:_        case Opcodes.DLOAD:_            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LDC:_            switch (item.type) {_            case ClassWriter.INT:_                push(INTEGER)__                break__            case ClassWriter.LONG:_                push(LONG)__                push(TOP)__                break__            case ClassWriter.FLOAT:_                push(FLOAT)__                break__            case ClassWriter.DOUBLE:_                push(DOUBLE)__                push(TOP)__                break__            case ClassWriter.CLASS:_                push(OBJECT | cw.addType("java/lang/Class"))__                break__            case ClassWriter.STR:_                push(OBJECT | cw.addType("java/lang/String"))__                break__            case ClassWriter.MTYPE:_                push(OBJECT | cw.addType("java/lang/invoke/MethodType"))__                break__            _            default:_                push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"))__            }_            break__        case Opcodes.ALOAD:_            push(get(arg))__            break__        case Opcodes.IALOAD:_        case Opcodes.BALOAD:_        case Opcodes.CALOAD:_        case Opcodes.SALOAD:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LALOAD:_        case Opcodes.D2L:_            pop(2)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FALOAD:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DALOAD:_        case Opcodes.L2D:_            pop(2)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.AALOAD:_            pop(1)__            t1 = pop()__            push(ELEMENT_OF + t1)__            break__        case Opcodes.ISTORE:_        case Opcodes.FSTORE:_        case Opcodes.ASTORE:_            t1 = pop()__            set(arg, t1)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.LSTORE:_        case Opcodes.DSTORE:_            pop(1)__            t1 = pop()__            set(arg, t1)__            set(arg + 1, TOP)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.IASTORE:_        case Opcodes.BASTORE:_        case Opcodes.CASTORE:_        case Opcodes.SASTORE:_        case Opcodes.FASTORE:_        case Opcodes.AASTORE:_            pop(3)__            break__        case Opcodes.LASTORE:_        case Opcodes.DASTORE:_            pop(4)__            break__        case Opcodes.POP:_        case Opcodes.IFEQ:_        case Opcodes.IFNE:_        case Opcodes.IFLT:_        case Opcodes.IFGE:_        case Opcodes.IFGT:_        case Opcodes.IFLE:_        case Opcodes.IRETURN:_        case Opcodes.FRETURN:_        case Opcodes.ARETURN:_        case Opcodes.TABLESWITCH:_        case Opcodes.LOOKUPSWITCH:_        case Opcodes.ATHROW:_        case Opcodes.MONITORENTER:_        case Opcodes.MONITOREXIT:_        case Opcodes.IFNULL:_        case Opcodes.IFNONNULL:_            pop(1)__            break__        case Opcodes.POP2:_        case Opcodes.IF_ICMPEQ:_        case Opcodes.IF_ICMPNE:_        case Opcodes.IF_ICMPLT:_        case Opcodes.IF_ICMPGE:_        case Opcodes.IF_ICMPGT:_        case Opcodes.IF_ICMPLE:_        case Opcodes.IF_ACMPEQ:_        case Opcodes.IF_ACMPNE:_        case Opcodes.LRETURN:_        case Opcodes.DRETURN:_            pop(2)__            break__        case Opcodes.DUP:_            t1 = pop()__            push(t1)__            push(t1)__            break__        case Opcodes.DUP_X1:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2:_            t1 = pop()__            t2 = pop()__            push(t2)__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X1:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t2)__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            t4 = pop()__            push(t2)__            push(t1)__            push(t4)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.SWAP:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            break__        case Opcodes.IADD:_        case Opcodes.ISUB:_        case Opcodes.IMUL:_        case Opcodes.IDIV:_        case Opcodes.IREM:_        case Opcodes.IAND:_        case Opcodes.IOR:_        case Opcodes.IXOR:_        case Opcodes.ISHL:_        case Opcodes.ISHR:_        case Opcodes.IUSHR:_        case Opcodes.L2I:_        case Opcodes.D2I:_        case Opcodes.FCMPL:_        case Opcodes.FCMPG:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LADD:_        case Opcodes.LSUB:_        case Opcodes.LMUL:_        case Opcodes.LDIV:_        case Opcodes.LREM:_        case Opcodes.LAND:_        case Opcodes.LOR:_        case Opcodes.LXOR:_            pop(4)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FADD:_        case Opcodes.FSUB:_        case Opcodes.FMUL:_        case Opcodes.FDIV:_        case Opcodes.FREM:_        case Opcodes.L2F:_        case Opcodes.D2F:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DADD:_        case Opcodes.DSUB:_        case Opcodes.DMUL:_        case Opcodes.DDIV:_        case Opcodes.DREM:_            pop(4)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LSHL:_        case Opcodes.LSHR:_        case Opcodes.LUSHR:_            pop(3)__            push(LONG)__            push(TOP)__            break__        case Opcodes.IINC:_            set(arg, INTEGER)__            break__        case Opcodes.I2L:_        case Opcodes.F2L:_            pop(1)__            push(LONG)__            push(TOP)__            break__        case Opcodes.I2F:_            pop(1)__            push(FLOAT)__            break__        case Opcodes.I2D:_        case Opcodes.F2D:_            pop(1)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.F2I:_        case Opcodes.ARRAYLENGTH:_        case Opcodes.INSTANCEOF:_            pop(1)__            push(INTEGER)__            break__        case Opcodes.LCMP:_        case Opcodes.DCMPL:_        case Opcodes.DCMPG:_            pop(4)__            push(INTEGER)__            break__        case Opcodes.JSR:_        case Opcodes.RET:_            throw new RuntimeException(_                    "JSR/RET are not supported with computeFrames option")__        case Opcodes.GETSTATIC:_            push(cw, item.strVal3)__            break__        case Opcodes.PUTSTATIC:_            pop(item.strVal3)__            break__        case Opcodes.GETFIELD:_            pop(1)__            push(cw, item.strVal3)__            break__        case Opcodes.PUTFIELD:_            pop(item.strVal3)__            pop()__            break__        case Opcodes.INVOKEVIRTUAL:_        case Opcodes.INVOKESPECIAL:_        case Opcodes.INVOKESTATIC:_        case Opcodes.INVOKEINTERFACE:_            pop(item.strVal3)__            if (opcode != Opcodes.INVOKESTATIC) {_                t1 = pop()__                if (opcode == Opcodes.INVOKESPECIAL_                        && item.strVal2.charAt(0) == '<') {_                    init(t1)__                }_            }_            push(cw, item.strVal3)__            break__        case Opcodes.INVOKEDYNAMIC:_            pop(item.strVal2)__            push(cw, item.strVal2)__            break__        case Opcodes.NEW:_            push(UNINITIALIZED | cw.addUninitializedType(item.strVal1, arg))__            break__        case Opcodes.NEWARRAY:_            pop()__            switch (arg) {_            case Opcodes.T_BOOLEAN:_                push(ARRAY_OF | BOOLEAN)__                break__            case Opcodes.T_CHAR:_                push(ARRAY_OF | CHAR)__                break__            case Opcodes.T_BYTE:_                push(ARRAY_OF | BYTE)__                break__            case Opcodes.T_SHORT:_                push(ARRAY_OF | SHORT)__                break__            case Opcodes.T_INT:_                push(ARRAY_OF | INTEGER)__                break__            case Opcodes.T_FLOAT:_                push(ARRAY_OF | FLOAT)__                break__            case Opcodes.T_DOUBLE:_                push(ARRAY_OF | DOUBLE)__                break__            _            default:_                push(ARRAY_OF | LONG)__                break__            }_            break__        case Opcodes.ANEWARRAY:_            String s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, '[' + s)__            } else {_                push(ARRAY_OF | OBJECT | cw.addType(s))__            }_            break__        case Opcodes.CHECKCAST:_            s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, s)__            } else {_                push(OBJECT | cw.addType(s))__            }_            break__        _        default:_            pop(arg)__            push(cw, item.strVal1)__            break__        }_    };simulates,the,action,of,the,given,instruction,on,the,output,stack,frame,param,opcode,the,opcode,of,the,instruction,param,arg,the,operand,of,the,instruction,if,any,param,cw,the,class,writer,to,which,this,label,belongs,param,item,the,operand,of,the,instructions,if,any;void,execute,final,int,opcode,final,int,arg,final,class,writer,cw,final,item,item,int,t1,t2,t3,t4,switch,opcode,case,opcodes,nop,case,opcodes,ineg,case,opcodes,lneg,case,opcodes,fneg,case,opcodes,dneg,case,opcodes,i2b,case,opcodes,i2c,case,opcodes,i2s,case,opcodes,goto,case,opcodes,return,break,case,opcodes,push,null,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,bipush,case,opcodes,sipush,case,opcodes,iload,push,integer,break,case,opcodes,case,opcodes,case,opcodes,lload,push,long,push,top,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,fload,push,float,break,case,opcodes,case,opcodes,case,opcodes,dload,push,double,push,top,break,case,opcodes,ldc,switch,item,type,case,class,writer,int,push,integer,break,case,class,writer,long,push,long,push,top,break,case,class,writer,float,push,float,break,case,class,writer,double,push,double,push,top,break,case,class,writer,class,push,object,cw,add,type,java,lang,class,break,case,class,writer,str,push,object,cw,add,type,java,lang,string,break,case,class,writer,mtype,push,object,cw,add,type,java,lang,invoke,method,type,break,default,push,object,cw,add,type,java,lang,invoke,method,handle,break,case,opcodes,aload,push,get,arg,break,case,opcodes,iaload,case,opcodes,baload,case,opcodes,caload,case,opcodes,saload,pop,2,push,integer,break,case,opcodes,laload,case,opcodes,d2l,pop,2,push,long,push,top,break,case,opcodes,faload,pop,2,push,float,break,case,opcodes,daload,case,opcodes,l2d,pop,2,push,double,push,top,break,case,opcodes,aaload,pop,1,t1,pop,push,t1,break,case,opcodes,istore,case,opcodes,fstore,case,opcodes,astore,t1,pop,set,arg,t1,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,lstore,case,opcodes,dstore,pop,1,t1,pop,set,arg,t1,set,arg,1,top,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,iastore,case,opcodes,bastore,case,opcodes,castore,case,opcodes,sastore,case,opcodes,fastore,case,opcodes,aastore,pop,3,break,case,opcodes,lastore,case,opcodes,dastore,pop,4,break,case,opcodes,pop,case,opcodes,ifeq,case,opcodes,ifne,case,opcodes,iflt,case,opcodes,ifge,case,opcodes,ifgt,case,opcodes,ifle,case,opcodes,ireturn,case,opcodes,freturn,case,opcodes,areturn,case,opcodes,tableswitch,case,opcodes,lookupswitch,case,opcodes,athrow,case,opcodes,monitorenter,case,opcodes,monitorexit,case,opcodes,ifnull,case,opcodes,ifnonnull,pop,1,break,case,opcodes,pop2,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,lreturn,case,opcodes,dreturn,pop,2,break,case,opcodes,dup,t1,pop,push,t1,push,t1,break,case,opcodes,t1,pop,t2,pop,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,dup2,t1,pop,t2,pop,push,t2,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t2,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,t4,pop,push,t2,push,t1,push,t4,push,t3,push,t2,push,t1,break,case,opcodes,swap,t1,pop,t2,pop,push,t1,push,t2,break,case,opcodes,iadd,case,opcodes,isub,case,opcodes,imul,case,opcodes,idiv,case,opcodes,irem,case,opcodes,iand,case,opcodes,ior,case,opcodes,ixor,case,opcodes,ishl,case,opcodes,ishr,case,opcodes,iushr,case,opcodes,l2i,case,opcodes,d2i,case,opcodes,fcmpl,case,opcodes,fcmpg,pop,2,push,integer,break,case,opcodes,ladd,case,opcodes,lsub,case,opcodes,lmul,case,opcodes,ldiv,case,opcodes,lrem,case,opcodes,land,case,opcodes,lor,case,opcodes,lxor,pop,4,push,long,push,top,break,case,opcodes,fadd,case,opcodes,fsub,case,opcodes,fmul,case,opcodes,fdiv,case,opcodes,frem,case,opcodes,l2f,case,opcodes,d2f,pop,2,push,float,break,case,opcodes,dadd,case,opcodes,dsub,case,opcodes,dmul,case,opcodes,ddiv,case,opcodes,drem,pop,4,push,double,push,top,break,case,opcodes,lshl,case,opcodes,lshr,case,opcodes,lushr,pop,3,push,long,push,top,break,case,opcodes,iinc,set,arg,integer,break,case,opcodes,i2l,case,opcodes,f2l,pop,1,push,long,push,top,break,case,opcodes,i2f,pop,1,push,float,break,case,opcodes,i2d,case,opcodes,f2d,pop,1,push,double,push,top,break,case,opcodes,f2i,case,opcodes,arraylength,case,opcodes,instanceof,pop,1,push,integer,break,case,opcodes,lcmp,case,opcodes,dcmpl,case,opcodes,dcmpg,pop,4,push,integer,break,case,opcodes,jsr,case,opcodes,ret,throw,new,runtime,exception,jsr,ret,are,not,supported,with,compute,frames,option,case,opcodes,getstatic,push,cw,item,str,val3,break,case,opcodes,putstatic,pop,item,str,val3,break,case,opcodes,getfield,pop,1,push,cw,item,str,val3,break,case,opcodes,putfield,pop,item,str,val3,pop,break,case,opcodes,invokevirtual,case,opcodes,invokespecial,case,opcodes,invokestatic,case,opcodes,invokeinterface,pop,item,str,val3,if,opcode,opcodes,invokestatic,t1,pop,if,opcode,opcodes,invokespecial,item,str,val2,char,at,0,init,t1,push,cw,item,str,val3,break,case,opcodes,invokedynamic,pop,item,str,val2,push,cw,item,str,val2,break,case,opcodes,new,push,uninitialized,cw,add,uninitialized,type,item,str,val1,arg,break,case,opcodes,newarray,pop,switch,arg,case,opcodes,push,boolean,break,case,opcodes,push,char,break,case,opcodes,push,byte,break,case,opcodes,push,short,break,case,opcodes,push,integer,break,case,opcodes,push,float,break,case,opcodes,push,double,break,default,push,long,break,break,case,opcodes,anewarray,string,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,case,opcodes,checkcast,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,default,pop,arg,push,cw,item,str,val1,break
Frame -> void execute(final int opcode, final int arg, final ClassWriter cw,             final Item item);1398255950;Simulates the action of the given instruction on the output stack frame.__@param opcode_the opcode of the instruction._@param arg_the operand of the instruction, if any._@param cw_the class writer to which this label belongs._@param item_the operand of the instructions, if any.;void execute(final int opcode, final int arg, final ClassWriter cw,_            final Item item) {_        int t1, t2, t3, t4__        switch (opcode) {_        case Opcodes.NOP:_        case Opcodes.INEG:_        case Opcodes.LNEG:_        case Opcodes.FNEG:_        case Opcodes.DNEG:_        case Opcodes.I2B:_        case Opcodes.I2C:_        case Opcodes.I2S:_        case Opcodes.GOTO:_        case Opcodes.RETURN:_            break__        case Opcodes.ACONST_NULL:_            push(NULL)__            break__        case Opcodes.ICONST_M1:_        case Opcodes.ICONST_0:_        case Opcodes.ICONST_1:_        case Opcodes.ICONST_2:_        case Opcodes.ICONST_3:_        case Opcodes.ICONST_4:_        case Opcodes.ICONST_5:_        case Opcodes.BIPUSH:_        case Opcodes.SIPUSH:_        case Opcodes.ILOAD:_            push(INTEGER)__            break__        case Opcodes.LCONST_0:_        case Opcodes.LCONST_1:_        case Opcodes.LLOAD:_            push(LONG)__            push(TOP)__            break__        case Opcodes.FCONST_0:_        case Opcodes.FCONST_1:_        case Opcodes.FCONST_2:_        case Opcodes.FLOAD:_            push(FLOAT)__            break__        case Opcodes.DCONST_0:_        case Opcodes.DCONST_1:_        case Opcodes.DLOAD:_            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LDC:_            switch (item.type) {_            case ClassWriter.INT:_                push(INTEGER)__                break__            case ClassWriter.LONG:_                push(LONG)__                push(TOP)__                break__            case ClassWriter.FLOAT:_                push(FLOAT)__                break__            case ClassWriter.DOUBLE:_                push(DOUBLE)__                push(TOP)__                break__            case ClassWriter.CLASS:_                push(OBJECT | cw.addType("java/lang/Class"))__                break__            case ClassWriter.STR:_                push(OBJECT | cw.addType("java/lang/String"))__                break__            case ClassWriter.MTYPE:_                push(OBJECT | cw.addType("java/lang/invoke/MethodType"))__                break__            _            default:_                push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"))__            }_            break__        case Opcodes.ALOAD:_            push(get(arg))__            break__        case Opcodes.IALOAD:_        case Opcodes.BALOAD:_        case Opcodes.CALOAD:_        case Opcodes.SALOAD:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LALOAD:_        case Opcodes.D2L:_            pop(2)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FALOAD:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DALOAD:_        case Opcodes.L2D:_            pop(2)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.AALOAD:_            pop(1)__            t1 = pop()__            push(ELEMENT_OF + t1)__            break__        case Opcodes.ISTORE:_        case Opcodes.FSTORE:_        case Opcodes.ASTORE:_            t1 = pop()__            set(arg, t1)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.LSTORE:_        case Opcodes.DSTORE:_            pop(1)__            t1 = pop()__            set(arg, t1)__            set(arg + 1, TOP)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.IASTORE:_        case Opcodes.BASTORE:_        case Opcodes.CASTORE:_        case Opcodes.SASTORE:_        case Opcodes.FASTORE:_        case Opcodes.AASTORE:_            pop(3)__            break__        case Opcodes.LASTORE:_        case Opcodes.DASTORE:_            pop(4)__            break__        case Opcodes.POP:_        case Opcodes.IFEQ:_        case Opcodes.IFNE:_        case Opcodes.IFLT:_        case Opcodes.IFGE:_        case Opcodes.IFGT:_        case Opcodes.IFLE:_        case Opcodes.IRETURN:_        case Opcodes.FRETURN:_        case Opcodes.ARETURN:_        case Opcodes.TABLESWITCH:_        case Opcodes.LOOKUPSWITCH:_        case Opcodes.ATHROW:_        case Opcodes.MONITORENTER:_        case Opcodes.MONITOREXIT:_        case Opcodes.IFNULL:_        case Opcodes.IFNONNULL:_            pop(1)__            break__        case Opcodes.POP2:_        case Opcodes.IF_ICMPEQ:_        case Opcodes.IF_ICMPNE:_        case Opcodes.IF_ICMPLT:_        case Opcodes.IF_ICMPGE:_        case Opcodes.IF_ICMPGT:_        case Opcodes.IF_ICMPLE:_        case Opcodes.IF_ACMPEQ:_        case Opcodes.IF_ACMPNE:_        case Opcodes.LRETURN:_        case Opcodes.DRETURN:_            pop(2)__            break__        case Opcodes.DUP:_            t1 = pop()__            push(t1)__            push(t1)__            break__        case Opcodes.DUP_X1:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2:_            t1 = pop()__            t2 = pop()__            push(t2)__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X1:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t2)__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            t4 = pop()__            push(t2)__            push(t1)__            push(t4)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.SWAP:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            break__        case Opcodes.IADD:_        case Opcodes.ISUB:_        case Opcodes.IMUL:_        case Opcodes.IDIV:_        case Opcodes.IREM:_        case Opcodes.IAND:_        case Opcodes.IOR:_        case Opcodes.IXOR:_        case Opcodes.ISHL:_        case Opcodes.ISHR:_        case Opcodes.IUSHR:_        case Opcodes.L2I:_        case Opcodes.D2I:_        case Opcodes.FCMPL:_        case Opcodes.FCMPG:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LADD:_        case Opcodes.LSUB:_        case Opcodes.LMUL:_        case Opcodes.LDIV:_        case Opcodes.LREM:_        case Opcodes.LAND:_        case Opcodes.LOR:_        case Opcodes.LXOR:_            pop(4)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FADD:_        case Opcodes.FSUB:_        case Opcodes.FMUL:_        case Opcodes.FDIV:_        case Opcodes.FREM:_        case Opcodes.L2F:_        case Opcodes.D2F:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DADD:_        case Opcodes.DSUB:_        case Opcodes.DMUL:_        case Opcodes.DDIV:_        case Opcodes.DREM:_            pop(4)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LSHL:_        case Opcodes.LSHR:_        case Opcodes.LUSHR:_            pop(3)__            push(LONG)__            push(TOP)__            break__        case Opcodes.IINC:_            set(arg, INTEGER)__            break__        case Opcodes.I2L:_        case Opcodes.F2L:_            pop(1)__            push(LONG)__            push(TOP)__            break__        case Opcodes.I2F:_            pop(1)__            push(FLOAT)__            break__        case Opcodes.I2D:_        case Opcodes.F2D:_            pop(1)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.F2I:_        case Opcodes.ARRAYLENGTH:_        case Opcodes.INSTANCEOF:_            pop(1)__            push(INTEGER)__            break__        case Opcodes.LCMP:_        case Opcodes.DCMPL:_        case Opcodes.DCMPG:_            pop(4)__            push(INTEGER)__            break__        case Opcodes.JSR:_        case Opcodes.RET:_            throw new RuntimeException(_                    "JSR/RET are not supported with computeFrames option")__        case Opcodes.GETSTATIC:_            push(cw, item.strVal3)__            break__        case Opcodes.PUTSTATIC:_            pop(item.strVal3)__            break__        case Opcodes.GETFIELD:_            pop(1)__            push(cw, item.strVal3)__            break__        case Opcodes.PUTFIELD:_            pop(item.strVal3)__            pop()__            break__        case Opcodes.INVOKEVIRTUAL:_        case Opcodes.INVOKESPECIAL:_        case Opcodes.INVOKESTATIC:_        case Opcodes.INVOKEINTERFACE:_            pop(item.strVal3)__            if (opcode != Opcodes.INVOKESTATIC) {_                t1 = pop()__                if (opcode == Opcodes.INVOKESPECIAL_                        && item.strVal2.charAt(0) == '<') {_                    init(t1)__                }_            }_            push(cw, item.strVal3)__            break__        case Opcodes.INVOKEDYNAMIC:_            pop(item.strVal2)__            push(cw, item.strVal2)__            break__        case Opcodes.NEW:_            push(UNINITIALIZED | cw.addUninitializedType(item.strVal1, arg))__            break__        case Opcodes.NEWARRAY:_            pop()__            switch (arg) {_            case Opcodes.T_BOOLEAN:_                push(ARRAY_OF | BOOLEAN)__                break__            case Opcodes.T_CHAR:_                push(ARRAY_OF | CHAR)__                break__            case Opcodes.T_BYTE:_                push(ARRAY_OF | BYTE)__                break__            case Opcodes.T_SHORT:_                push(ARRAY_OF | SHORT)__                break__            case Opcodes.T_INT:_                push(ARRAY_OF | INTEGER)__                break__            case Opcodes.T_FLOAT:_                push(ARRAY_OF | FLOAT)__                break__            case Opcodes.T_DOUBLE:_                push(ARRAY_OF | DOUBLE)__                break__            _            default:_                push(ARRAY_OF | LONG)__                break__            }_            break__        case Opcodes.ANEWARRAY:_            String s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, '[' + s)__            } else {_                push(ARRAY_OF | OBJECT | cw.addType(s))__            }_            break__        case Opcodes.CHECKCAST:_            s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, s)__            } else {_                push(OBJECT | cw.addType(s))__            }_            break__        _        default:_            pop(arg)__            push(cw, item.strVal1)__            break__        }_    };simulates,the,action,of,the,given,instruction,on,the,output,stack,frame,param,opcode,the,opcode,of,the,instruction,param,arg,the,operand,of,the,instruction,if,any,param,cw,the,class,writer,to,which,this,label,belongs,param,item,the,operand,of,the,instructions,if,any;void,execute,final,int,opcode,final,int,arg,final,class,writer,cw,final,item,item,int,t1,t2,t3,t4,switch,opcode,case,opcodes,nop,case,opcodes,ineg,case,opcodes,lneg,case,opcodes,fneg,case,opcodes,dneg,case,opcodes,i2b,case,opcodes,i2c,case,opcodes,i2s,case,opcodes,goto,case,opcodes,return,break,case,opcodes,push,null,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,bipush,case,opcodes,sipush,case,opcodes,iload,push,integer,break,case,opcodes,case,opcodes,case,opcodes,lload,push,long,push,top,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,fload,push,float,break,case,opcodes,case,opcodes,case,opcodes,dload,push,double,push,top,break,case,opcodes,ldc,switch,item,type,case,class,writer,int,push,integer,break,case,class,writer,long,push,long,push,top,break,case,class,writer,float,push,float,break,case,class,writer,double,push,double,push,top,break,case,class,writer,class,push,object,cw,add,type,java,lang,class,break,case,class,writer,str,push,object,cw,add,type,java,lang,string,break,case,class,writer,mtype,push,object,cw,add,type,java,lang,invoke,method,type,break,default,push,object,cw,add,type,java,lang,invoke,method,handle,break,case,opcodes,aload,push,get,arg,break,case,opcodes,iaload,case,opcodes,baload,case,opcodes,caload,case,opcodes,saload,pop,2,push,integer,break,case,opcodes,laload,case,opcodes,d2l,pop,2,push,long,push,top,break,case,opcodes,faload,pop,2,push,float,break,case,opcodes,daload,case,opcodes,l2d,pop,2,push,double,push,top,break,case,opcodes,aaload,pop,1,t1,pop,push,t1,break,case,opcodes,istore,case,opcodes,fstore,case,opcodes,astore,t1,pop,set,arg,t1,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,lstore,case,opcodes,dstore,pop,1,t1,pop,set,arg,t1,set,arg,1,top,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,iastore,case,opcodes,bastore,case,opcodes,castore,case,opcodes,sastore,case,opcodes,fastore,case,opcodes,aastore,pop,3,break,case,opcodes,lastore,case,opcodes,dastore,pop,4,break,case,opcodes,pop,case,opcodes,ifeq,case,opcodes,ifne,case,opcodes,iflt,case,opcodes,ifge,case,opcodes,ifgt,case,opcodes,ifle,case,opcodes,ireturn,case,opcodes,freturn,case,opcodes,areturn,case,opcodes,tableswitch,case,opcodes,lookupswitch,case,opcodes,athrow,case,opcodes,monitorenter,case,opcodes,monitorexit,case,opcodes,ifnull,case,opcodes,ifnonnull,pop,1,break,case,opcodes,pop2,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,lreturn,case,opcodes,dreturn,pop,2,break,case,opcodes,dup,t1,pop,push,t1,push,t1,break,case,opcodes,t1,pop,t2,pop,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,dup2,t1,pop,t2,pop,push,t2,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t2,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,t4,pop,push,t2,push,t1,push,t4,push,t3,push,t2,push,t1,break,case,opcodes,swap,t1,pop,t2,pop,push,t1,push,t2,break,case,opcodes,iadd,case,opcodes,isub,case,opcodes,imul,case,opcodes,idiv,case,opcodes,irem,case,opcodes,iand,case,opcodes,ior,case,opcodes,ixor,case,opcodes,ishl,case,opcodes,ishr,case,opcodes,iushr,case,opcodes,l2i,case,opcodes,d2i,case,opcodes,fcmpl,case,opcodes,fcmpg,pop,2,push,integer,break,case,opcodes,ladd,case,opcodes,lsub,case,opcodes,lmul,case,opcodes,ldiv,case,opcodes,lrem,case,opcodes,land,case,opcodes,lor,case,opcodes,lxor,pop,4,push,long,push,top,break,case,opcodes,fadd,case,opcodes,fsub,case,opcodes,fmul,case,opcodes,fdiv,case,opcodes,frem,case,opcodes,l2f,case,opcodes,d2f,pop,2,push,float,break,case,opcodes,dadd,case,opcodes,dsub,case,opcodes,dmul,case,opcodes,ddiv,case,opcodes,drem,pop,4,push,double,push,top,break,case,opcodes,lshl,case,opcodes,lshr,case,opcodes,lushr,pop,3,push,long,push,top,break,case,opcodes,iinc,set,arg,integer,break,case,opcodes,i2l,case,opcodes,f2l,pop,1,push,long,push,top,break,case,opcodes,i2f,pop,1,push,float,break,case,opcodes,i2d,case,opcodes,f2d,pop,1,push,double,push,top,break,case,opcodes,f2i,case,opcodes,arraylength,case,opcodes,instanceof,pop,1,push,integer,break,case,opcodes,lcmp,case,opcodes,dcmpl,case,opcodes,dcmpg,pop,4,push,integer,break,case,opcodes,jsr,case,opcodes,ret,throw,new,runtime,exception,jsr,ret,are,not,supported,with,compute,frames,option,case,opcodes,getstatic,push,cw,item,str,val3,break,case,opcodes,putstatic,pop,item,str,val3,break,case,opcodes,getfield,pop,1,push,cw,item,str,val3,break,case,opcodes,putfield,pop,item,str,val3,pop,break,case,opcodes,invokevirtual,case,opcodes,invokespecial,case,opcodes,invokestatic,case,opcodes,invokeinterface,pop,item,str,val3,if,opcode,opcodes,invokestatic,t1,pop,if,opcode,opcodes,invokespecial,item,str,val2,char,at,0,init,t1,push,cw,item,str,val3,break,case,opcodes,invokedynamic,pop,item,str,val2,push,cw,item,str,val2,break,case,opcodes,new,push,uninitialized,cw,add,uninitialized,type,item,str,val1,arg,break,case,opcodes,newarray,pop,switch,arg,case,opcodes,push,boolean,break,case,opcodes,push,char,break,case,opcodes,push,byte,break,case,opcodes,push,short,break,case,opcodes,push,integer,break,case,opcodes,push,float,break,case,opcodes,push,double,break,default,push,long,break,break,case,opcodes,anewarray,string,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,case,opcodes,checkcast,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,default,pop,arg,push,cw,item,str,val1,break
Frame -> void execute(final int opcode, final int arg, final ClassWriter cw,             final Item item);1461047077;Simulates the action of the given instruction on the output stack frame.__@param opcode_the opcode of the instruction._@param arg_the operand of the instruction, if any._@param cw_the class writer to which this label belongs._@param item_the operand of the instructions, if any.;void execute(final int opcode, final int arg, final ClassWriter cw,_            final Item item) {_        int t1, t2, t3, t4__        switch (opcode) {_        case Opcodes.NOP:_        case Opcodes.INEG:_        case Opcodes.LNEG:_        case Opcodes.FNEG:_        case Opcodes.DNEG:_        case Opcodes.I2B:_        case Opcodes.I2C:_        case Opcodes.I2S:_        case Opcodes.GOTO:_        case Opcodes.RETURN:_            break__        case Opcodes.ACONST_NULL:_            push(NULL)__            break__        case Opcodes.ICONST_M1:_        case Opcodes.ICONST_0:_        case Opcodes.ICONST_1:_        case Opcodes.ICONST_2:_        case Opcodes.ICONST_3:_        case Opcodes.ICONST_4:_        case Opcodes.ICONST_5:_        case Opcodes.BIPUSH:_        case Opcodes.SIPUSH:_        case Opcodes.ILOAD:_            push(INTEGER)__            break__        case Opcodes.LCONST_0:_        case Opcodes.LCONST_1:_        case Opcodes.LLOAD:_            push(LONG)__            push(TOP)__            break__        case Opcodes.FCONST_0:_        case Opcodes.FCONST_1:_        case Opcodes.FCONST_2:_        case Opcodes.FLOAD:_            push(FLOAT)__            break__        case Opcodes.DCONST_0:_        case Opcodes.DCONST_1:_        case Opcodes.DLOAD:_            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LDC:_            switch (item.type) {_            case ClassWriter.INT:_                push(INTEGER)__                break__            case ClassWriter.LONG:_                push(LONG)__                push(TOP)__                break__            case ClassWriter.FLOAT:_                push(FLOAT)__                break__            case ClassWriter.DOUBLE:_                push(DOUBLE)__                push(TOP)__                break__            case ClassWriter.CLASS:_                push(OBJECT | cw.addType("java/lang/Class"))__                break__            case ClassWriter.STR:_                push(OBJECT | cw.addType("java/lang/String"))__                break__            case ClassWriter.MTYPE:_                push(OBJECT | cw.addType("java/lang/invoke/MethodType"))__                break__            _            default:_                push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"))__            }_            break__        case Opcodes.ALOAD:_            push(get(arg))__            break__        case Opcodes.IALOAD:_        case Opcodes.BALOAD:_        case Opcodes.CALOAD:_        case Opcodes.SALOAD:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LALOAD:_        case Opcodes.D2L:_            pop(2)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FALOAD:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DALOAD:_        case Opcodes.L2D:_            pop(2)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.AALOAD:_            pop(1)__            t1 = pop()__            push(ELEMENT_OF + t1)__            break__        case Opcodes.ISTORE:_        case Opcodes.FSTORE:_        case Opcodes.ASTORE:_            t1 = pop()__            set(arg, t1)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.LSTORE:_        case Opcodes.DSTORE:_            pop(1)__            t1 = pop()__            set(arg, t1)__            set(arg + 1, TOP)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.IASTORE:_        case Opcodes.BASTORE:_        case Opcodes.CASTORE:_        case Opcodes.SASTORE:_        case Opcodes.FASTORE:_        case Opcodes.AASTORE:_            pop(3)__            break__        case Opcodes.LASTORE:_        case Opcodes.DASTORE:_            pop(4)__            break__        case Opcodes.POP:_        case Opcodes.IFEQ:_        case Opcodes.IFNE:_        case Opcodes.IFLT:_        case Opcodes.IFGE:_        case Opcodes.IFGT:_        case Opcodes.IFLE:_        case Opcodes.IRETURN:_        case Opcodes.FRETURN:_        case Opcodes.ARETURN:_        case Opcodes.TABLESWITCH:_        case Opcodes.LOOKUPSWITCH:_        case Opcodes.ATHROW:_        case Opcodes.MONITORENTER:_        case Opcodes.MONITOREXIT:_        case Opcodes.IFNULL:_        case Opcodes.IFNONNULL:_            pop(1)__            break__        case Opcodes.POP2:_        case Opcodes.IF_ICMPEQ:_        case Opcodes.IF_ICMPNE:_        case Opcodes.IF_ICMPLT:_        case Opcodes.IF_ICMPGE:_        case Opcodes.IF_ICMPGT:_        case Opcodes.IF_ICMPLE:_        case Opcodes.IF_ACMPEQ:_        case Opcodes.IF_ACMPNE:_        case Opcodes.LRETURN:_        case Opcodes.DRETURN:_            pop(2)__            break__        case Opcodes.DUP:_            t1 = pop()__            push(t1)__            push(t1)__            break__        case Opcodes.DUP_X1:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2:_            t1 = pop()__            t2 = pop()__            push(t2)__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X1:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t2)__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            t4 = pop()__            push(t2)__            push(t1)__            push(t4)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.SWAP:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            break__        case Opcodes.IADD:_        case Opcodes.ISUB:_        case Opcodes.IMUL:_        case Opcodes.IDIV:_        case Opcodes.IREM:_        case Opcodes.IAND:_        case Opcodes.IOR:_        case Opcodes.IXOR:_        case Opcodes.ISHL:_        case Opcodes.ISHR:_        case Opcodes.IUSHR:_        case Opcodes.L2I:_        case Opcodes.D2I:_        case Opcodes.FCMPL:_        case Opcodes.FCMPG:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LADD:_        case Opcodes.LSUB:_        case Opcodes.LMUL:_        case Opcodes.LDIV:_        case Opcodes.LREM:_        case Opcodes.LAND:_        case Opcodes.LOR:_        case Opcodes.LXOR:_            pop(4)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FADD:_        case Opcodes.FSUB:_        case Opcodes.FMUL:_        case Opcodes.FDIV:_        case Opcodes.FREM:_        case Opcodes.L2F:_        case Opcodes.D2F:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DADD:_        case Opcodes.DSUB:_        case Opcodes.DMUL:_        case Opcodes.DDIV:_        case Opcodes.DREM:_            pop(4)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LSHL:_        case Opcodes.LSHR:_        case Opcodes.LUSHR:_            pop(3)__            push(LONG)__            push(TOP)__            break__        case Opcodes.IINC:_            set(arg, INTEGER)__            break__        case Opcodes.I2L:_        case Opcodes.F2L:_            pop(1)__            push(LONG)__            push(TOP)__            break__        case Opcodes.I2F:_            pop(1)__            push(FLOAT)__            break__        case Opcodes.I2D:_        case Opcodes.F2D:_            pop(1)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.F2I:_        case Opcodes.ARRAYLENGTH:_        case Opcodes.INSTANCEOF:_            pop(1)__            push(INTEGER)__            break__        case Opcodes.LCMP:_        case Opcodes.DCMPL:_        case Opcodes.DCMPG:_            pop(4)__            push(INTEGER)__            break__        case Opcodes.JSR:_        case Opcodes.RET:_            throw new RuntimeException(_                    "JSR/RET are not supported with computeFrames option")__        case Opcodes.GETSTATIC:_            push(cw, item.strVal3)__            break__        case Opcodes.PUTSTATIC:_            pop(item.strVal3)__            break__        case Opcodes.GETFIELD:_            pop(1)__            push(cw, item.strVal3)__            break__        case Opcodes.PUTFIELD:_            pop(item.strVal3)__            pop()__            break__        case Opcodes.INVOKEVIRTUAL:_        case Opcodes.INVOKESPECIAL:_        case Opcodes.INVOKESTATIC:_        case Opcodes.INVOKEINTERFACE:_            pop(item.strVal3)__            if (opcode != Opcodes.INVOKESTATIC) {_                t1 = pop()__                if (opcode == Opcodes.INVOKESPECIAL_                        && item.strVal2.charAt(0) == '<') {_                    init(t1)__                }_            }_            push(cw, item.strVal3)__            break__        case Opcodes.INVOKEDYNAMIC:_            pop(item.strVal2)__            push(cw, item.strVal2)__            break__        case Opcodes.NEW:_            push(UNINITIALIZED | cw.addUninitializedType(item.strVal1, arg))__            break__        case Opcodes.NEWARRAY:_            pop()__            switch (arg) {_            case Opcodes.T_BOOLEAN:_                push(ARRAY_OF | BOOLEAN)__                break__            case Opcodes.T_CHAR:_                push(ARRAY_OF | CHAR)__                break__            case Opcodes.T_BYTE:_                push(ARRAY_OF | BYTE)__                break__            case Opcodes.T_SHORT:_                push(ARRAY_OF | SHORT)__                break__            case Opcodes.T_INT:_                push(ARRAY_OF | INTEGER)__                break__            case Opcodes.T_FLOAT:_                push(ARRAY_OF | FLOAT)__                break__            case Opcodes.T_DOUBLE:_                push(ARRAY_OF | DOUBLE)__                break__            _            default:_                push(ARRAY_OF | LONG)__                break__            }_            break__        case Opcodes.ANEWARRAY:_            String s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, '[' + s)__            } else {_                push(ARRAY_OF | OBJECT | cw.addType(s))__            }_            break__        case Opcodes.CHECKCAST:_            s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, s)__            } else {_                push(OBJECT | cw.addType(s))__            }_            break__        _        default:_            pop(arg)__            push(cw, item.strVal1)__            break__        }_    };simulates,the,action,of,the,given,instruction,on,the,output,stack,frame,param,opcode,the,opcode,of,the,instruction,param,arg,the,operand,of,the,instruction,if,any,param,cw,the,class,writer,to,which,this,label,belongs,param,item,the,operand,of,the,instructions,if,any;void,execute,final,int,opcode,final,int,arg,final,class,writer,cw,final,item,item,int,t1,t2,t3,t4,switch,opcode,case,opcodes,nop,case,opcodes,ineg,case,opcodes,lneg,case,opcodes,fneg,case,opcodes,dneg,case,opcodes,i2b,case,opcodes,i2c,case,opcodes,i2s,case,opcodes,goto,case,opcodes,return,break,case,opcodes,push,null,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,bipush,case,opcodes,sipush,case,opcodes,iload,push,integer,break,case,opcodes,case,opcodes,case,opcodes,lload,push,long,push,top,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,fload,push,float,break,case,opcodes,case,opcodes,case,opcodes,dload,push,double,push,top,break,case,opcodes,ldc,switch,item,type,case,class,writer,int,push,integer,break,case,class,writer,long,push,long,push,top,break,case,class,writer,float,push,float,break,case,class,writer,double,push,double,push,top,break,case,class,writer,class,push,object,cw,add,type,java,lang,class,break,case,class,writer,str,push,object,cw,add,type,java,lang,string,break,case,class,writer,mtype,push,object,cw,add,type,java,lang,invoke,method,type,break,default,push,object,cw,add,type,java,lang,invoke,method,handle,break,case,opcodes,aload,push,get,arg,break,case,opcodes,iaload,case,opcodes,baload,case,opcodes,caload,case,opcodes,saload,pop,2,push,integer,break,case,opcodes,laload,case,opcodes,d2l,pop,2,push,long,push,top,break,case,opcodes,faload,pop,2,push,float,break,case,opcodes,daload,case,opcodes,l2d,pop,2,push,double,push,top,break,case,opcodes,aaload,pop,1,t1,pop,push,t1,break,case,opcodes,istore,case,opcodes,fstore,case,opcodes,astore,t1,pop,set,arg,t1,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,lstore,case,opcodes,dstore,pop,1,t1,pop,set,arg,t1,set,arg,1,top,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,iastore,case,opcodes,bastore,case,opcodes,castore,case,opcodes,sastore,case,opcodes,fastore,case,opcodes,aastore,pop,3,break,case,opcodes,lastore,case,opcodes,dastore,pop,4,break,case,opcodes,pop,case,opcodes,ifeq,case,opcodes,ifne,case,opcodes,iflt,case,opcodes,ifge,case,opcodes,ifgt,case,opcodes,ifle,case,opcodes,ireturn,case,opcodes,freturn,case,opcodes,areturn,case,opcodes,tableswitch,case,opcodes,lookupswitch,case,opcodes,athrow,case,opcodes,monitorenter,case,opcodes,monitorexit,case,opcodes,ifnull,case,opcodes,ifnonnull,pop,1,break,case,opcodes,pop2,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,lreturn,case,opcodes,dreturn,pop,2,break,case,opcodes,dup,t1,pop,push,t1,push,t1,break,case,opcodes,t1,pop,t2,pop,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,dup2,t1,pop,t2,pop,push,t2,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t2,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,t4,pop,push,t2,push,t1,push,t4,push,t3,push,t2,push,t1,break,case,opcodes,swap,t1,pop,t2,pop,push,t1,push,t2,break,case,opcodes,iadd,case,opcodes,isub,case,opcodes,imul,case,opcodes,idiv,case,opcodes,irem,case,opcodes,iand,case,opcodes,ior,case,opcodes,ixor,case,opcodes,ishl,case,opcodes,ishr,case,opcodes,iushr,case,opcodes,l2i,case,opcodes,d2i,case,opcodes,fcmpl,case,opcodes,fcmpg,pop,2,push,integer,break,case,opcodes,ladd,case,opcodes,lsub,case,opcodes,lmul,case,opcodes,ldiv,case,opcodes,lrem,case,opcodes,land,case,opcodes,lor,case,opcodes,lxor,pop,4,push,long,push,top,break,case,opcodes,fadd,case,opcodes,fsub,case,opcodes,fmul,case,opcodes,fdiv,case,opcodes,frem,case,opcodes,l2f,case,opcodes,d2f,pop,2,push,float,break,case,opcodes,dadd,case,opcodes,dsub,case,opcodes,dmul,case,opcodes,ddiv,case,opcodes,drem,pop,4,push,double,push,top,break,case,opcodes,lshl,case,opcodes,lshr,case,opcodes,lushr,pop,3,push,long,push,top,break,case,opcodes,iinc,set,arg,integer,break,case,opcodes,i2l,case,opcodes,f2l,pop,1,push,long,push,top,break,case,opcodes,i2f,pop,1,push,float,break,case,opcodes,i2d,case,opcodes,f2d,pop,1,push,double,push,top,break,case,opcodes,f2i,case,opcodes,arraylength,case,opcodes,instanceof,pop,1,push,integer,break,case,opcodes,lcmp,case,opcodes,dcmpl,case,opcodes,dcmpg,pop,4,push,integer,break,case,opcodes,jsr,case,opcodes,ret,throw,new,runtime,exception,jsr,ret,are,not,supported,with,compute,frames,option,case,opcodes,getstatic,push,cw,item,str,val3,break,case,opcodes,putstatic,pop,item,str,val3,break,case,opcodes,getfield,pop,1,push,cw,item,str,val3,break,case,opcodes,putfield,pop,item,str,val3,pop,break,case,opcodes,invokevirtual,case,opcodes,invokespecial,case,opcodes,invokestatic,case,opcodes,invokeinterface,pop,item,str,val3,if,opcode,opcodes,invokestatic,t1,pop,if,opcode,opcodes,invokespecial,item,str,val2,char,at,0,init,t1,push,cw,item,str,val3,break,case,opcodes,invokedynamic,pop,item,str,val2,push,cw,item,str,val2,break,case,opcodes,new,push,uninitialized,cw,add,uninitialized,type,item,str,val1,arg,break,case,opcodes,newarray,pop,switch,arg,case,opcodes,push,boolean,break,case,opcodes,push,char,break,case,opcodes,push,byte,break,case,opcodes,push,short,break,case,opcodes,push,integer,break,case,opcodes,push,float,break,case,opcodes,push,double,break,default,push,long,break,break,case,opcodes,anewarray,string,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,case,opcodes,checkcast,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,default,pop,arg,push,cw,item,str,val1,break
Frame -> void execute(final int opcode, final int arg, final ClassWriter cw,             final Item item);1483093254;Simulates the action of the given instruction on the output stack frame.__@param opcode_the opcode of the instruction._@param arg_the operand of the instruction, if any._@param cw_the class writer to which this label belongs._@param item_the operand of the instructions, if any.;void execute(final int opcode, final int arg, final ClassWriter cw,_            final Item item) {_        int t1, t2, t3, t4__        switch (opcode) {_        case Opcodes.NOP:_        case Opcodes.INEG:_        case Opcodes.LNEG:_        case Opcodes.FNEG:_        case Opcodes.DNEG:_        case Opcodes.I2B:_        case Opcodes.I2C:_        case Opcodes.I2S:_        case Opcodes.GOTO:_        case Opcodes.RETURN:_            break__        case Opcodes.ACONST_NULL:_            push(NULL)__            break__        case Opcodes.ICONST_M1:_        case Opcodes.ICONST_0:_        case Opcodes.ICONST_1:_        case Opcodes.ICONST_2:_        case Opcodes.ICONST_3:_        case Opcodes.ICONST_4:_        case Opcodes.ICONST_5:_        case Opcodes.BIPUSH:_        case Opcodes.SIPUSH:_        case Opcodes.ILOAD:_            push(INTEGER)__            break__        case Opcodes.LCONST_0:_        case Opcodes.LCONST_1:_        case Opcodes.LLOAD:_            push(LONG)__            push(TOP)__            break__        case Opcodes.FCONST_0:_        case Opcodes.FCONST_1:_        case Opcodes.FCONST_2:_        case Opcodes.FLOAD:_            push(FLOAT)__            break__        case Opcodes.DCONST_0:_        case Opcodes.DCONST_1:_        case Opcodes.DLOAD:_            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LDC:_            switch (item.type) {_            case ClassWriter.INT:_                push(INTEGER)__                break__            case ClassWriter.LONG:_                push(LONG)__                push(TOP)__                break__            case ClassWriter.FLOAT:_                push(FLOAT)__                break__            case ClassWriter.DOUBLE:_                push(DOUBLE)__                push(TOP)__                break__            case ClassWriter.CLASS:_                push(OBJECT | cw.addType("java/lang/Class"))__                break__            case ClassWriter.STR:_                push(OBJECT | cw.addType("java/lang/String"))__                break__            case ClassWriter.MTYPE:_                push(OBJECT | cw.addType("java/lang/invoke/MethodType"))__                break__            _            default:_                push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"))__            }_            break__        case Opcodes.ALOAD:_            push(get(arg))__            break__        case Opcodes.IALOAD:_        case Opcodes.BALOAD:_        case Opcodes.CALOAD:_        case Opcodes.SALOAD:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LALOAD:_        case Opcodes.D2L:_            pop(2)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FALOAD:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DALOAD:_        case Opcodes.L2D:_            pop(2)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.AALOAD:_            pop(1)__            t1 = pop()__            push(ELEMENT_OF + t1)__            break__        case Opcodes.ISTORE:_        case Opcodes.FSTORE:_        case Opcodes.ASTORE:_            t1 = pop()__            set(arg, t1)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.LSTORE:_        case Opcodes.DSTORE:_            pop(1)__            t1 = pop()__            set(arg, t1)__            set(arg + 1, TOP)__            if (arg > 0) {_                t2 = get(arg - 1)__                _                if (t2 == LONG || t2 == DOUBLE) {_                    set(arg - 1, TOP)__                } else if ((t2 & KIND) != BASE) {_                    set(arg - 1, t2 | TOP_IF_LONG_OR_DOUBLE)__                }_            }_            break__        case Opcodes.IASTORE:_        case Opcodes.BASTORE:_        case Opcodes.CASTORE:_        case Opcodes.SASTORE:_        case Opcodes.FASTORE:_        case Opcodes.AASTORE:_            pop(3)__            break__        case Opcodes.LASTORE:_        case Opcodes.DASTORE:_            pop(4)__            break__        case Opcodes.POP:_        case Opcodes.IFEQ:_        case Opcodes.IFNE:_        case Opcodes.IFLT:_        case Opcodes.IFGE:_        case Opcodes.IFGT:_        case Opcodes.IFLE:_        case Opcodes.IRETURN:_        case Opcodes.FRETURN:_        case Opcodes.ARETURN:_        case Opcodes.TABLESWITCH:_        case Opcodes.LOOKUPSWITCH:_        case Opcodes.ATHROW:_        case Opcodes.MONITORENTER:_        case Opcodes.MONITOREXIT:_        case Opcodes.IFNULL:_        case Opcodes.IFNONNULL:_            pop(1)__            break__        case Opcodes.POP2:_        case Opcodes.IF_ICMPEQ:_        case Opcodes.IF_ICMPNE:_        case Opcodes.IF_ICMPLT:_        case Opcodes.IF_ICMPGE:_        case Opcodes.IF_ICMPGT:_        case Opcodes.IF_ICMPLE:_        case Opcodes.IF_ACMPEQ:_        case Opcodes.IF_ACMPNE:_        case Opcodes.LRETURN:_        case Opcodes.DRETURN:_            pop(2)__            break__        case Opcodes.DUP:_            t1 = pop()__            push(t1)__            push(t1)__            break__        case Opcodes.DUP_X1:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2:_            t1 = pop()__            t2 = pop()__            push(t2)__            push(t1)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X1:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            push(t2)__            push(t1)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.DUP2_X2:_            t1 = pop()__            t2 = pop()__            t3 = pop()__            t4 = pop()__            push(t2)__            push(t1)__            push(t4)__            push(t3)__            push(t2)__            push(t1)__            break__        case Opcodes.SWAP:_            t1 = pop()__            t2 = pop()__            push(t1)__            push(t2)__            break__        case Opcodes.IADD:_        case Opcodes.ISUB:_        case Opcodes.IMUL:_        case Opcodes.IDIV:_        case Opcodes.IREM:_        case Opcodes.IAND:_        case Opcodes.IOR:_        case Opcodes.IXOR:_        case Opcodes.ISHL:_        case Opcodes.ISHR:_        case Opcodes.IUSHR:_        case Opcodes.L2I:_        case Opcodes.D2I:_        case Opcodes.FCMPL:_        case Opcodes.FCMPG:_            pop(2)__            push(INTEGER)__            break__        case Opcodes.LADD:_        case Opcodes.LSUB:_        case Opcodes.LMUL:_        case Opcodes.LDIV:_        case Opcodes.LREM:_        case Opcodes.LAND:_        case Opcodes.LOR:_        case Opcodes.LXOR:_            pop(4)__            push(LONG)__            push(TOP)__            break__        case Opcodes.FADD:_        case Opcodes.FSUB:_        case Opcodes.FMUL:_        case Opcodes.FDIV:_        case Opcodes.FREM:_        case Opcodes.L2F:_        case Opcodes.D2F:_            pop(2)__            push(FLOAT)__            break__        case Opcodes.DADD:_        case Opcodes.DSUB:_        case Opcodes.DMUL:_        case Opcodes.DDIV:_        case Opcodes.DREM:_            pop(4)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.LSHL:_        case Opcodes.LSHR:_        case Opcodes.LUSHR:_            pop(3)__            push(LONG)__            push(TOP)__            break__        case Opcodes.IINC:_            set(arg, INTEGER)__            break__        case Opcodes.I2L:_        case Opcodes.F2L:_            pop(1)__            push(LONG)__            push(TOP)__            break__        case Opcodes.I2F:_            pop(1)__            push(FLOAT)__            break__        case Opcodes.I2D:_        case Opcodes.F2D:_            pop(1)__            push(DOUBLE)__            push(TOP)__            break__        case Opcodes.F2I:_        case Opcodes.ARRAYLENGTH:_        case Opcodes.INSTANCEOF:_            pop(1)__            push(INTEGER)__            break__        case Opcodes.LCMP:_        case Opcodes.DCMPL:_        case Opcodes.DCMPG:_            pop(4)__            push(INTEGER)__            break__        case Opcodes.JSR:_        case Opcodes.RET:_            throw new RuntimeException(_                    "JSR/RET are not supported with computeFrames option")__        case Opcodes.GETSTATIC:_            push(cw, item.strVal3)__            break__        case Opcodes.PUTSTATIC:_            pop(item.strVal3)__            break__        case Opcodes.GETFIELD:_            pop(1)__            push(cw, item.strVal3)__            break__        case Opcodes.PUTFIELD:_            pop(item.strVal3)__            pop()__            break__        case Opcodes.INVOKEVIRTUAL:_        case Opcodes.INVOKESPECIAL:_        case Opcodes.INVOKESTATIC:_        case Opcodes.INVOKEINTERFACE:_            pop(item.strVal3)__            if (opcode != Opcodes.INVOKESTATIC) {_                t1 = pop()__                if (opcode == Opcodes.INVOKESPECIAL_                        && item.strVal2.charAt(0) == '<') {_                    init(t1)__                }_            }_            push(cw, item.strVal3)__            break__        case Opcodes.INVOKEDYNAMIC:_            pop(item.strVal2)__            push(cw, item.strVal2)__            break__        case Opcodes.NEW:_            push(UNINITIALIZED | cw.addUninitializedType(item.strVal1, arg))__            break__        case Opcodes.NEWARRAY:_            pop()__            switch (arg) {_            case Opcodes.T_BOOLEAN:_                push(ARRAY_OF | BOOLEAN)__                break__            case Opcodes.T_CHAR:_                push(ARRAY_OF | CHAR)__                break__            case Opcodes.T_BYTE:_                push(ARRAY_OF | BYTE)__                break__            case Opcodes.T_SHORT:_                push(ARRAY_OF | SHORT)__                break__            case Opcodes.T_INT:_                push(ARRAY_OF | INTEGER)__                break__            case Opcodes.T_FLOAT:_                push(ARRAY_OF | FLOAT)__                break__            case Opcodes.T_DOUBLE:_                push(ARRAY_OF | DOUBLE)__                break__            _            default:_                push(ARRAY_OF | LONG)__                break__            }_            break__        case Opcodes.ANEWARRAY:_            String s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, '[' + s)__            } else {_                push(ARRAY_OF | OBJECT | cw.addType(s))__            }_            break__        case Opcodes.CHECKCAST:_            s = item.strVal1__            pop()__            if (s.charAt(0) == '[') {_                push(cw, s)__            } else {_                push(OBJECT | cw.addType(s))__            }_            break__        _        default:_            pop(arg)__            push(cw, item.strVal1)__            break__        }_    };simulates,the,action,of,the,given,instruction,on,the,output,stack,frame,param,opcode,the,opcode,of,the,instruction,param,arg,the,operand,of,the,instruction,if,any,param,cw,the,class,writer,to,which,this,label,belongs,param,item,the,operand,of,the,instructions,if,any;void,execute,final,int,opcode,final,int,arg,final,class,writer,cw,final,item,item,int,t1,t2,t3,t4,switch,opcode,case,opcodes,nop,case,opcodes,ineg,case,opcodes,lneg,case,opcodes,fneg,case,opcodes,dneg,case,opcodes,i2b,case,opcodes,i2c,case,opcodes,i2s,case,opcodes,goto,case,opcodes,return,break,case,opcodes,push,null,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,bipush,case,opcodes,sipush,case,opcodes,iload,push,integer,break,case,opcodes,case,opcodes,case,opcodes,lload,push,long,push,top,break,case,opcodes,case,opcodes,case,opcodes,case,opcodes,fload,push,float,break,case,opcodes,case,opcodes,case,opcodes,dload,push,double,push,top,break,case,opcodes,ldc,switch,item,type,case,class,writer,int,push,integer,break,case,class,writer,long,push,long,push,top,break,case,class,writer,float,push,float,break,case,class,writer,double,push,double,push,top,break,case,class,writer,class,push,object,cw,add,type,java,lang,class,break,case,class,writer,str,push,object,cw,add,type,java,lang,string,break,case,class,writer,mtype,push,object,cw,add,type,java,lang,invoke,method,type,break,default,push,object,cw,add,type,java,lang,invoke,method,handle,break,case,opcodes,aload,push,get,arg,break,case,opcodes,iaload,case,opcodes,baload,case,opcodes,caload,case,opcodes,saload,pop,2,push,integer,break,case,opcodes,laload,case,opcodes,d2l,pop,2,push,long,push,top,break,case,opcodes,faload,pop,2,push,float,break,case,opcodes,daload,case,opcodes,l2d,pop,2,push,double,push,top,break,case,opcodes,aaload,pop,1,t1,pop,push,t1,break,case,opcodes,istore,case,opcodes,fstore,case,opcodes,astore,t1,pop,set,arg,t1,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,lstore,case,opcodes,dstore,pop,1,t1,pop,set,arg,t1,set,arg,1,top,if,arg,0,t2,get,arg,1,if,t2,long,t2,double,set,arg,1,top,else,if,t2,kind,base,set,arg,1,t2,break,case,opcodes,iastore,case,opcodes,bastore,case,opcodes,castore,case,opcodes,sastore,case,opcodes,fastore,case,opcodes,aastore,pop,3,break,case,opcodes,lastore,case,opcodes,dastore,pop,4,break,case,opcodes,pop,case,opcodes,ifeq,case,opcodes,ifne,case,opcodes,iflt,case,opcodes,ifge,case,opcodes,ifgt,case,opcodes,ifle,case,opcodes,ireturn,case,opcodes,freturn,case,opcodes,areturn,case,opcodes,tableswitch,case,opcodes,lookupswitch,case,opcodes,athrow,case,opcodes,monitorenter,case,opcodes,monitorexit,case,opcodes,ifnull,case,opcodes,ifnonnull,pop,1,break,case,opcodes,pop2,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,case,opcodes,lreturn,case,opcodes,dreturn,pop,2,break,case,opcodes,dup,t1,pop,push,t1,push,t1,break,case,opcodes,t1,pop,t2,pop,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,dup2,t1,pop,t2,pop,push,t2,push,t1,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,push,t2,push,t1,push,t3,push,t2,push,t1,break,case,opcodes,t1,pop,t2,pop,t3,pop,t4,pop,push,t2,push,t1,push,t4,push,t3,push,t2,push,t1,break,case,opcodes,swap,t1,pop,t2,pop,push,t1,push,t2,break,case,opcodes,iadd,case,opcodes,isub,case,opcodes,imul,case,opcodes,idiv,case,opcodes,irem,case,opcodes,iand,case,opcodes,ior,case,opcodes,ixor,case,opcodes,ishl,case,opcodes,ishr,case,opcodes,iushr,case,opcodes,l2i,case,opcodes,d2i,case,opcodes,fcmpl,case,opcodes,fcmpg,pop,2,push,integer,break,case,opcodes,ladd,case,opcodes,lsub,case,opcodes,lmul,case,opcodes,ldiv,case,opcodes,lrem,case,opcodes,land,case,opcodes,lor,case,opcodes,lxor,pop,4,push,long,push,top,break,case,opcodes,fadd,case,opcodes,fsub,case,opcodes,fmul,case,opcodes,fdiv,case,opcodes,frem,case,opcodes,l2f,case,opcodes,d2f,pop,2,push,float,break,case,opcodes,dadd,case,opcodes,dsub,case,opcodes,dmul,case,opcodes,ddiv,case,opcodes,drem,pop,4,push,double,push,top,break,case,opcodes,lshl,case,opcodes,lshr,case,opcodes,lushr,pop,3,push,long,push,top,break,case,opcodes,iinc,set,arg,integer,break,case,opcodes,i2l,case,opcodes,f2l,pop,1,push,long,push,top,break,case,opcodes,i2f,pop,1,push,float,break,case,opcodes,i2d,case,opcodes,f2d,pop,1,push,double,push,top,break,case,opcodes,f2i,case,opcodes,arraylength,case,opcodes,instanceof,pop,1,push,integer,break,case,opcodes,lcmp,case,opcodes,dcmpl,case,opcodes,dcmpg,pop,4,push,integer,break,case,opcodes,jsr,case,opcodes,ret,throw,new,runtime,exception,jsr,ret,are,not,supported,with,compute,frames,option,case,opcodes,getstatic,push,cw,item,str,val3,break,case,opcodes,putstatic,pop,item,str,val3,break,case,opcodes,getfield,pop,1,push,cw,item,str,val3,break,case,opcodes,putfield,pop,item,str,val3,pop,break,case,opcodes,invokevirtual,case,opcodes,invokespecial,case,opcodes,invokestatic,case,opcodes,invokeinterface,pop,item,str,val3,if,opcode,opcodes,invokestatic,t1,pop,if,opcode,opcodes,invokespecial,item,str,val2,char,at,0,init,t1,push,cw,item,str,val3,break,case,opcodes,invokedynamic,pop,item,str,val2,push,cw,item,str,val2,break,case,opcodes,new,push,uninitialized,cw,add,uninitialized,type,item,str,val1,arg,break,case,opcodes,newarray,pop,switch,arg,case,opcodes,push,boolean,break,case,opcodes,push,char,break,case,opcodes,push,byte,break,case,opcodes,push,short,break,case,opcodes,push,integer,break,case,opcodes,push,float,break,case,opcodes,push,double,break,default,push,long,break,break,case,opcodes,anewarray,string,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,case,opcodes,checkcast,s,item,str,val1,pop,if,s,char,at,0,push,cw,s,else,push,object,cw,add,type,s,break,default,pop,arg,push,cw,item,str,val1,break
Frame -> private void pop(final String desc);1366718246;Pops a type from the output frame stack.__@param desc_the descriptor of the type to be popped. Can also be a method_descriptor (in this case this method pops the types_corresponding to the method arguments).;private void pop(final String desc) {_        char c = desc.charAt(0)__        if (c == '(') {_            pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1)__        } else if (c == 'J' || c == 'D') {_            pop(2)__        } else {_            pop(1)__        }_    };pops,a,type,from,the,output,frame,stack,param,desc,the,descriptor,of,the,type,to,be,popped,can,also,be,a,method,descriptor,in,this,case,this,method,pops,the,types,corresponding,to,the,method,arguments;private,void,pop,final,string,desc,char,c,desc,char,at,0,if,c,pop,type,get,arguments,and,return,sizes,desc,2,1,else,if,c,j,c,d,pop,2,else,pop,1
Frame -> private void pop(final String desc);1385423968;Pops a type from the output frame stack.__@param desc_the descriptor of the type to be popped. Can also be a method_descriptor (in this case this method pops the types_corresponding to the method arguments).;private void pop(final String desc) {_        char c = desc.charAt(0)__        if (c == '(') {_            pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1)__        } else if (c == 'J' || c == 'D') {_            pop(2)__        } else {_            pop(1)__        }_    };pops,a,type,from,the,output,frame,stack,param,desc,the,descriptor,of,the,type,to,be,popped,can,also,be,a,method,descriptor,in,this,case,this,method,pops,the,types,corresponding,to,the,method,arguments;private,void,pop,final,string,desc,char,c,desc,char,at,0,if,c,pop,type,get,arguments,and,return,sizes,desc,2,1,else,if,c,j,c,d,pop,2,else,pop,1
Frame -> private void pop(final String desc);1395273982;Pops a type from the output frame stack.__@param desc_the descriptor of the type to be popped. Can also be a method_descriptor (in this case this method pops the types_corresponding to the method arguments).;private void pop(final String desc) {_        char c = desc.charAt(0)__        if (c == '(') {_            pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1)__        } else if (c == 'J' || c == 'D') {_            pop(2)__        } else {_            pop(1)__        }_    };pops,a,type,from,the,output,frame,stack,param,desc,the,descriptor,of,the,type,to,be,popped,can,also,be,a,method,descriptor,in,this,case,this,method,pops,the,types,corresponding,to,the,method,arguments;private,void,pop,final,string,desc,char,c,desc,char,at,0,if,c,pop,type,get,arguments,and,return,sizes,desc,2,1,else,if,c,j,c,d,pop,2,else,pop,1
Frame -> private void pop(final String desc);1397644526;Pops a type from the output frame stack.__@param desc_the descriptor of the type to be popped. Can also be a method_descriptor (in this case this method pops the types_corresponding to the method arguments).;private void pop(final String desc) {_        char c = desc.charAt(0)__        if (c == '(') {_            pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1)__        } else if (c == 'J' || c == 'D') {_            pop(2)__        } else {_            pop(1)__        }_    };pops,a,type,from,the,output,frame,stack,param,desc,the,descriptor,of,the,type,to,be,popped,can,also,be,a,method,descriptor,in,this,case,this,method,pops,the,types,corresponding,to,the,method,arguments;private,void,pop,final,string,desc,char,c,desc,char,at,0,if,c,pop,type,get,arguments,and,return,sizes,desc,2,1,else,if,c,j,c,d,pop,2,else,pop,1
Frame -> private void pop(final String desc);1398255950;Pops a type from the output frame stack.__@param desc_the descriptor of the type to be popped. Can also be a method_descriptor (in this case this method pops the types_corresponding to the method arguments).;private void pop(final String desc) {_        char c = desc.charAt(0)__        if (c == '(') {_            pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1)__        } else if (c == 'J' || c == 'D') {_            pop(2)__        } else {_            pop(1)__        }_    };pops,a,type,from,the,output,frame,stack,param,desc,the,descriptor,of,the,type,to,be,popped,can,also,be,a,method,descriptor,in,this,case,this,method,pops,the,types,corresponding,to,the,method,arguments;private,void,pop,final,string,desc,char,c,desc,char,at,0,if,c,pop,type,get,arguments,and,return,sizes,desc,2,1,else,if,c,j,c,d,pop,2,else,pop,1
Frame -> private void pop(final String desc);1461047077;Pops a type from the output frame stack.__@param desc_the descriptor of the type to be popped. Can also be a method_descriptor (in this case this method pops the types_corresponding to the method arguments).;private void pop(final String desc) {_        char c = desc.charAt(0)__        if (c == '(') {_            pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1)__        } else if (c == 'J' || c == 'D') {_            pop(2)__        } else {_            pop(1)__        }_    };pops,a,type,from,the,output,frame,stack,param,desc,the,descriptor,of,the,type,to,be,popped,can,also,be,a,method,descriptor,in,this,case,this,method,pops,the,types,corresponding,to,the,method,arguments;private,void,pop,final,string,desc,char,c,desc,char,at,0,if,c,pop,type,get,arguments,and,return,sizes,desc,2,1,else,if,c,j,c,d,pop,2,else,pop,1
Frame -> private void pop(final String desc);1483093254;Pops a type from the output frame stack.__@param desc_the descriptor of the type to be popped. Can also be a method_descriptor (in this case this method pops the types_corresponding to the method arguments).;private void pop(final String desc) {_        char c = desc.charAt(0)__        if (c == '(') {_            pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1)__        } else if (c == 'J' || c == 'D') {_            pop(2)__        } else {_            pop(1)__        }_    };pops,a,type,from,the,output,frame,stack,param,desc,the,descriptor,of,the,type,to,be,popped,can,also,be,a,method,descriptor,in,this,case,this,method,pops,the,types,corresponding,to,the,method,arguments;private,void,pop,final,string,desc,char,c,desc,char,at,0,if,c,pop,type,get,arguments,and,return,sizes,desc,2,1,else,if,c,j,c,d,pop,2,else,pop,1
Frame -> final boolean merge(       final SymbolTable symbolTable, final Frame dstFrame, final int catchTypeIndex);1531241461;Merges the input frame of the given {@link Frame} with the input and output frames of this_{@link Frame}. Returns <tt>true</tt> if the given frame has been changed by this operation (the_input and output frames of this {@link Frame} are never changed).__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param dstFrame the {@link Frame} whose input frame must be updated. This should be the frame_of a successor, in the control flow graph, of the basic block corresponding to this frame._@param catchTypeIndex if 'frame' corresponds to an exception handler basic block, the type_table index of the caught exception type, otherwise 0._@return <tt>true</tt> if the input frame of 'frame' has been changed by this operation.;final boolean merge(_      final SymbolTable symbolTable, final Frame dstFrame, final int catchTypeIndex) {_    boolean frameChanged = false___    _    _    _    int nLocal = inputLocals.length__    int nStack = inputStack.length__    if (dstFrame.inputLocals == null) {_      dstFrame.inputLocals = new int[nLocal]__      frameChanged = true__    }_    for (int i = 0_ i < nLocal_ ++i) {_      int concreteOutputType__      if (outputLocals != null && i < outputLocals.length) {_        int abstractOutputType = outputLocals[i]__        if (abstractOutputType == 0) {_          _          _          concreteOutputType = inputLocals[i]__        } else {_          int dim = abstractOutputType & DIM_MASK__          int kind = abstractOutputType & KIND_MASK__          if (kind == LOCAL_KIND) {_            _            _            _            concreteOutputType = dim + inputLocals[abstractOutputType & VALUE_MASK]__            if ((abstractOutputType & TOP_IF_LONG_OR_DOUBLE_FLAG) != 0_                && (concreteOutputType == LONG || concreteOutputType == DOUBLE)) {_              concreteOutputType = TOP__            }_          } else if (kind == STACK_KIND) {_            _            _            _            concreteOutputType = dim + inputStack[nStack - (abstractOutputType & VALUE_MASK)]__            if ((abstractOutputType & TOP_IF_LONG_OR_DOUBLE_FLAG) != 0_                && (concreteOutputType == LONG || concreteOutputType == DOUBLE)) {_              concreteOutputType = TOP__            }_          } else {_            concreteOutputType = abstractOutputType__          }_        }_      } else {_        _        _        concreteOutputType = inputLocals[i]__      }_      _      _      _      if (initializations != null) {_        concreteOutputType = getInitializedType(symbolTable, concreteOutputType)__      }_      frameChanged |= merge(symbolTable, concreteOutputType, dstFrame.inputLocals, i)__    }__    _    _    _    _    _    if (catchTypeIndex > 0) {_      for (int i = 0_ i < nLocal_ ++i) {_        frameChanged |= merge(symbolTable, inputLocals[i], dstFrame.inputLocals, i)__      }_      if (dstFrame.inputStack == null) {_        dstFrame.inputStack = new int[1]__        frameChanged = true__      }_      frameChanged |= merge(symbolTable, catchTypeIndex, dstFrame.inputStack, 0)__      return frameChanged__    }__    _    _    _    int nInputStack = inputStack.length + outputStackStart__    if (dstFrame.inputStack == null) {_      dstFrame.inputStack = new int[nInputStack + outputStackTop]__      frameChanged = true__    }_    _    _    _    for (int i = 0_ i < nInputStack_ ++i) {_      int concreteOutputType = inputStack[i]__      if (initializations != null) {_        concreteOutputType = getInitializedType(symbolTable, concreteOutputType)__      }_      frameChanged |= merge(symbolTable, concreteOutputType, dstFrame.inputStack, i)__    }_    _    _    for (int i = 0_ i < outputStackTop_ ++i) {_      int concreteOutputType__      int abstractOutputType = outputStack[i]__      int dim = abstractOutputType & DIM_MASK__      int kind = abstractOutputType & KIND_MASK__      if (kind == LOCAL_KIND) {_        concreteOutputType = dim + inputLocals[abstractOutputType & VALUE_MASK]__        if ((abstractOutputType & TOP_IF_LONG_OR_DOUBLE_FLAG) != 0_            && (concreteOutputType == LONG || concreteOutputType == DOUBLE)) {_          concreteOutputType = TOP__        }_      } else if (kind == STACK_KIND) {_        concreteOutputType = dim + inputStack[nStack - (abstractOutputType & VALUE_MASK)]__        if ((abstractOutputType & TOP_IF_LONG_OR_DOUBLE_FLAG) != 0_            && (concreteOutputType == LONG || concreteOutputType == DOUBLE)) {_          concreteOutputType = TOP__        }_      } else {_        concreteOutputType = abstractOutputType__      }_      if (initializations != null) {_        concreteOutputType = getInitializedType(symbolTable, concreteOutputType)__      }_      frameChanged |= merge(symbolTable, concreteOutputType, dstFrame.inputStack, nInputStack + i)__    }_    return frameChanged__  };merges,the,input,frame,of,the,given,link,frame,with,the,input,and,output,frames,of,this,link,frame,returns,tt,true,tt,if,the,given,frame,has,been,changed,by,this,operation,the,input,and,output,frames,of,this,link,frame,are,never,changed,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,dst,frame,the,link,frame,whose,input,frame,must,be,updated,this,should,be,the,frame,of,a,successor,in,the,control,flow,graph,of,the,basic,block,corresponding,to,this,frame,param,catch,type,index,if,frame,corresponds,to,an,exception,handler,basic,block,the,type,table,index,of,the,caught,exception,type,otherwise,0,return,tt,true,tt,if,the,input,frame,of,frame,has,been,changed,by,this,operation;final,boolean,merge,final,symbol,table,symbol,table,final,frame,dst,frame,final,int,catch,type,index,boolean,frame,changed,false,int,n,local,input,locals,length,int,n,stack,input,stack,length,if,dst,frame,input,locals,null,dst,frame,input,locals,new,int,n,local,frame,changed,true,for,int,i,0,i,n,local,i,int,concrete,output,type,if,output,locals,null,i,output,locals,length,int,abstract,output,type,output,locals,i,if,abstract,output,type,0,concrete,output,type,input,locals,i,else,int,dim,abstract,output,type,int,kind,abstract,output,type,if,kind,concrete,output,type,dim,input,locals,abstract,output,type,if,abstract,output,type,0,concrete,output,type,long,concrete,output,type,double,concrete,output,type,top,else,if,kind,concrete,output,type,dim,input,stack,n,stack,abstract,output,type,if,abstract,output,type,0,concrete,output,type,long,concrete,output,type,double,concrete,output,type,top,else,concrete,output,type,abstract,output,type,else,concrete,output,type,input,locals,i,if,initializations,null,concrete,output,type,get,initialized,type,symbol,table,concrete,output,type,frame,changed,merge,symbol,table,concrete,output,type,dst,frame,input,locals,i,if,catch,type,index,0,for,int,i,0,i,n,local,i,frame,changed,merge,symbol,table,input,locals,i,dst,frame,input,locals,i,if,dst,frame,input,stack,null,dst,frame,input,stack,new,int,1,frame,changed,true,frame,changed,merge,symbol,table,catch,type,index,dst,frame,input,stack,0,return,frame,changed,int,n,input,stack,input,stack,length,output,stack,start,if,dst,frame,input,stack,null,dst,frame,input,stack,new,int,n,input,stack,output,stack,top,frame,changed,true,for,int,i,0,i,n,input,stack,i,int,concrete,output,type,input,stack,i,if,initializations,null,concrete,output,type,get,initialized,type,symbol,table,concrete,output,type,frame,changed,merge,symbol,table,concrete,output,type,dst,frame,input,stack,i,for,int,i,0,i,output,stack,top,i,int,concrete,output,type,int,abstract,output,type,output,stack,i,int,dim,abstract,output,type,int,kind,abstract,output,type,if,kind,concrete,output,type,dim,input,locals,abstract,output,type,if,abstract,output,type,0,concrete,output,type,long,concrete,output,type,double,concrete,output,type,top,else,if,kind,concrete,output,type,dim,input,stack,n,stack,abstract,output,type,if,abstract,output,type,0,concrete,output,type,long,concrete,output,type,double,concrete,output,type,top,else,concrete,output,type,abstract,output,type,if,initializations,null,concrete,output,type,get,initialized,type,symbol,table,concrete,output,type,frame,changed,merge,symbol,table,concrete,output,type,dst,frame,input,stack,n,input,stack,i,return,frame,changed
Frame -> final boolean merge(       final SymbolTable symbolTable, final Frame dstFrame, final int catchTypeIndex);1536664245;Merges the input frame of the given {@link Frame} with the input and output frames of this_{@link Frame}. Returns {@literal true} if the given frame has been changed by this operation_(the input and output frames of this {@link Frame} are never changed).__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param dstFrame the {@link Frame} whose input frame must be updated. This should be the frame_of a successor, in the control flow graph, of the basic block corresponding to this frame._@param catchTypeIndex if 'frame' corresponds to an exception handler basic block, the type_table index of the caught exception type, otherwise 0._@return {@literal true} if the input frame of 'frame' has been changed by this operation.;final boolean merge(_      final SymbolTable symbolTable, final Frame dstFrame, final int catchTypeIndex) {_    boolean frameChanged = false___    _    _    _    int nLocal = inputLocals.length__    int nStack = inputStack.length__    if (dstFrame.inputLocals == null) {_      dstFrame.inputLocals = new int[nLocal]__      frameChanged = true__    }_    for (int i = 0_ i < nLocal_ ++i) {_      int concreteOutputType__      if (outputLocals != null && i < outputLocals.length) {_        int abstractOutputType = outputLocals[i]__        if (abstractOutputType == 0) {_          _          _          concreteOutputType = inputLocals[i]__        } else {_          int dim = abstractOutputType & DIM_MASK__          int kind = abstractOutputType & KIND_MASK__          if (kind == LOCAL_KIND) {_            _            _            _            concreteOutputType = dim + inputLocals[abstractOutputType & VALUE_MASK]__            if ((abstractOutputType & TOP_IF_LONG_OR_DOUBLE_FLAG) != 0_                && (concreteOutputType == LONG || concreteOutputType == DOUBLE)) {_              concreteOutputType = TOP__            }_          } else if (kind == STACK_KIND) {_            _            _            _            concreteOutputType = dim + inputStack[nStack - (abstractOutputType & VALUE_MASK)]__            if ((abstractOutputType & TOP_IF_LONG_OR_DOUBLE_FLAG) != 0_                && (concreteOutputType == LONG || concreteOutputType == DOUBLE)) {_              concreteOutputType = TOP__            }_          } else {_            concreteOutputType = abstractOutputType__          }_        }_      } else {_        _        _        concreteOutputType = inputLocals[i]__      }_      _      _      _      if (initializations != null) {_        concreteOutputType = getInitializedType(symbolTable, concreteOutputType)__      }_      frameChanged |= merge(symbolTable, concreteOutputType, dstFrame.inputLocals, i)__    }__    _    _    _    _    _    if (catchTypeIndex > 0) {_      for (int i = 0_ i < nLocal_ ++i) {_        frameChanged |= merge(symbolTable, inputLocals[i], dstFrame.inputLocals, i)__      }_      if (dstFrame.inputStack == null) {_        dstFrame.inputStack = new int[1]__        frameChanged = true__      }_      frameChanged |= merge(symbolTable, catchTypeIndex, dstFrame.inputStack, 0)__      return frameChanged__    }__    _    _    _    int nInputStack = inputStack.length + outputStackStart__    if (dstFrame.inputStack == null) {_      dstFrame.inputStack = new int[nInputStack + outputStackTop]__      frameChanged = true__    }_    _    _    _    for (int i = 0_ i < nInputStack_ ++i) {_      int concreteOutputType = inputStack[i]__      if (initializations != null) {_        concreteOutputType = getInitializedType(symbolTable, concreteOutputType)__      }_      frameChanged |= merge(symbolTable, concreteOutputType, dstFrame.inputStack, i)__    }_    _    _    for (int i = 0_ i < outputStackTop_ ++i) {_      int concreteOutputType__      int abstractOutputType = outputStack[i]__      int dim = abstractOutputType & DIM_MASK__      int kind = abstractOutputType & KIND_MASK__      if (kind == LOCAL_KIND) {_        concreteOutputType = dim + inputLocals[abstractOutputType & VALUE_MASK]__        if ((abstractOutputType & TOP_IF_LONG_OR_DOUBLE_FLAG) != 0_            && (concreteOutputType == LONG || concreteOutputType == DOUBLE)) {_          concreteOutputType = TOP__        }_      } else if (kind == STACK_KIND) {_        concreteOutputType = dim + inputStack[nStack - (abstractOutputType & VALUE_MASK)]__        if ((abstractOutputType & TOP_IF_LONG_OR_DOUBLE_FLAG) != 0_            && (concreteOutputType == LONG || concreteOutputType == DOUBLE)) {_          concreteOutputType = TOP__        }_      } else {_        concreteOutputType = abstractOutputType__      }_      if (initializations != null) {_        concreteOutputType = getInitializedType(symbolTable, concreteOutputType)__      }_      frameChanged |= merge(symbolTable, concreteOutputType, dstFrame.inputStack, nInputStack + i)__    }_    return frameChanged__  };merges,the,input,frame,of,the,given,link,frame,with,the,input,and,output,frames,of,this,link,frame,returns,literal,true,if,the,given,frame,has,been,changed,by,this,operation,the,input,and,output,frames,of,this,link,frame,are,never,changed,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,dst,frame,the,link,frame,whose,input,frame,must,be,updated,this,should,be,the,frame,of,a,successor,in,the,control,flow,graph,of,the,basic,block,corresponding,to,this,frame,param,catch,type,index,if,frame,corresponds,to,an,exception,handler,basic,block,the,type,table,index,of,the,caught,exception,type,otherwise,0,return,literal,true,if,the,input,frame,of,frame,has,been,changed,by,this,operation;final,boolean,merge,final,symbol,table,symbol,table,final,frame,dst,frame,final,int,catch,type,index,boolean,frame,changed,false,int,n,local,input,locals,length,int,n,stack,input,stack,length,if,dst,frame,input,locals,null,dst,frame,input,locals,new,int,n,local,frame,changed,true,for,int,i,0,i,n,local,i,int,concrete,output,type,if,output,locals,null,i,output,locals,length,int,abstract,output,type,output,locals,i,if,abstract,output,type,0,concrete,output,type,input,locals,i,else,int,dim,abstract,output,type,int,kind,abstract,output,type,if,kind,concrete,output,type,dim,input,locals,abstract,output,type,if,abstract,output,type,0,concrete,output,type,long,concrete,output,type,double,concrete,output,type,top,else,if,kind,concrete,output,type,dim,input,stack,n,stack,abstract,output,type,if,abstract,output,type,0,concrete,output,type,long,concrete,output,type,double,concrete,output,type,top,else,concrete,output,type,abstract,output,type,else,concrete,output,type,input,locals,i,if,initializations,null,concrete,output,type,get,initialized,type,symbol,table,concrete,output,type,frame,changed,merge,symbol,table,concrete,output,type,dst,frame,input,locals,i,if,catch,type,index,0,for,int,i,0,i,n,local,i,frame,changed,merge,symbol,table,input,locals,i,dst,frame,input,locals,i,if,dst,frame,input,stack,null,dst,frame,input,stack,new,int,1,frame,changed,true,frame,changed,merge,symbol,table,catch,type,index,dst,frame,input,stack,0,return,frame,changed,int,n,input,stack,input,stack,length,output,stack,start,if,dst,frame,input,stack,null,dst,frame,input,stack,new,int,n,input,stack,output,stack,top,frame,changed,true,for,int,i,0,i,n,input,stack,i,int,concrete,output,type,input,stack,i,if,initializations,null,concrete,output,type,get,initialized,type,symbol,table,concrete,output,type,frame,changed,merge,symbol,table,concrete,output,type,dst,frame,input,stack,i,for,int,i,0,i,output,stack,top,i,int,concrete,output,type,int,abstract,output,type,output,stack,i,int,dim,abstract,output,type,int,kind,abstract,output,type,if,kind,concrete,output,type,dim,input,locals,abstract,output,type,if,abstract,output,type,0,concrete,output,type,long,concrete,output,type,double,concrete,output,type,top,else,if,kind,concrete,output,type,dim,input,stack,n,stack,abstract,output,type,if,abstract,output,type,0,concrete,output,type,long,concrete,output,type,double,concrete,output,type,top,else,concrete,output,type,abstract,output,type,if,initializations,null,concrete,output,type,get,initialized,type,symbol,table,concrete,output,type,frame,changed,merge,symbol,table,concrete,output,type,dst,frame,input,stack,n,input,stack,i,return,frame,changed
Frame -> final boolean merge(       final SymbolTable symbolTable, final Frame dstFrame, final int catchTypeIndex);1537204147;Merges the input frame of the given {@link Frame} with the input and output frames of this_{@link Frame}. Returns {@literal true} if the given frame has been changed by this operation_(the input and output frames of this {@link Frame} are never changed).__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param dstFrame the {@link Frame} whose input frame must be updated. This should be the frame_of a successor, in the control flow graph, of the basic block corresponding to this frame._@param catchTypeIndex if 'frame' corresponds to an exception handler basic block, the type_table index of the caught exception type, otherwise 0._@return {@literal true} if the input frame of 'frame' has been changed by this operation.;final boolean merge(_      final SymbolTable symbolTable, final Frame dstFrame, final int catchTypeIndex) {_    boolean frameChanged = false___    _    _    _    int numLocal = inputLocals.length__    int numStack = inputStack.length__    if (dstFrame.inputLocals == null) {_      dstFrame.inputLocals = new int[numLocal]__      frameChanged = true__    }_    for (int i = 0_ i < numLocal_ ++i) {_      int concreteOutputType__      if (outputLocals != null && i < outputLocals.length) {_        int abstractOutputType = outputLocals[i]__        if (abstractOutputType == 0) {_          _          _          concreteOutputType = inputLocals[i]__        } else {_          int dim = abstractOutputType & DIM_MASK__          int kind = abstractOutputType & KIND_MASK__          if (kind == LOCAL_KIND) {_            _            _            _            concreteOutputType = dim + inputLocals[abstractOutputType & VALUE_MASK]__            if ((abstractOutputType & TOP_IF_LONG_OR_DOUBLE_FLAG) != 0_                && (concreteOutputType == LONG || concreteOutputType == DOUBLE)) {_              concreteOutputType = TOP__            }_          } else if (kind == STACK_KIND) {_            _            _            _            concreteOutputType = dim + inputStack[numStack - (abstractOutputType & VALUE_MASK)]__            if ((abstractOutputType & TOP_IF_LONG_OR_DOUBLE_FLAG) != 0_                && (concreteOutputType == LONG || concreteOutputType == DOUBLE)) {_              concreteOutputType = TOP__            }_          } else {_            concreteOutputType = abstractOutputType__          }_        }_      } else {_        _        _        concreteOutputType = inputLocals[i]__      }_      _      _      _      if (initializations != null) {_        concreteOutputType = getInitializedType(symbolTable, concreteOutputType)__      }_      frameChanged |= merge(symbolTable, concreteOutputType, dstFrame.inputLocals, i)__    }__    _    _    _    _    _    if (catchTypeIndex > 0) {_      for (int i = 0_ i < numLocal_ ++i) {_        frameChanged |= merge(symbolTable, inputLocals[i], dstFrame.inputLocals, i)__      }_      if (dstFrame.inputStack == null) {_        dstFrame.inputStack = new int[1]__        frameChanged = true__      }_      frameChanged |= merge(symbolTable, catchTypeIndex, dstFrame.inputStack, 0)__      return frameChanged__    }__    _    _    _    int numInputStack = inputStack.length + outputStackStart__    if (dstFrame.inputStack == null) {_      dstFrame.inputStack = new int[numInputStack + outputStackTop]__      frameChanged = true__    }_    _    _    _    for (int i = 0_ i < numInputStack_ ++i) {_      int concreteOutputType = inputStack[i]__      if (initializations != null) {_        concreteOutputType = getInitializedType(symbolTable, concreteOutputType)__      }_      frameChanged |= merge(symbolTable, concreteOutputType, dstFrame.inputStack, i)__    }_    _    _    for (int i = 0_ i < outputStackTop_ ++i) {_      int concreteOutputType__      int abstractOutputType = outputStack[i]__      int dim = abstractOutputType & DIM_MASK__      int kind = abstractOutputType & KIND_MASK__      if (kind == LOCAL_KIND) {_        concreteOutputType = dim + inputLocals[abstractOutputType & VALUE_MASK]__        if ((abstractOutputType & TOP_IF_LONG_OR_DOUBLE_FLAG) != 0_            && (concreteOutputType == LONG || concreteOutputType == DOUBLE)) {_          concreteOutputType = TOP__        }_      } else if (kind == STACK_KIND) {_        concreteOutputType = dim + inputStack[numStack - (abstractOutputType & VALUE_MASK)]__        if ((abstractOutputType & TOP_IF_LONG_OR_DOUBLE_FLAG) != 0_            && (concreteOutputType == LONG || concreteOutputType == DOUBLE)) {_          concreteOutputType = TOP__        }_      } else {_        concreteOutputType = abstractOutputType__      }_      if (initializations != null) {_        concreteOutputType = getInitializedType(symbolTable, concreteOutputType)__      }_      frameChanged |=_          merge(symbolTable, concreteOutputType, dstFrame.inputStack, numInputStack + i)__    }_    return frameChanged__  };merges,the,input,frame,of,the,given,link,frame,with,the,input,and,output,frames,of,this,link,frame,returns,literal,true,if,the,given,frame,has,been,changed,by,this,operation,the,input,and,output,frames,of,this,link,frame,are,never,changed,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,dst,frame,the,link,frame,whose,input,frame,must,be,updated,this,should,be,the,frame,of,a,successor,in,the,control,flow,graph,of,the,basic,block,corresponding,to,this,frame,param,catch,type,index,if,frame,corresponds,to,an,exception,handler,basic,block,the,type,table,index,of,the,caught,exception,type,otherwise,0,return,literal,true,if,the,input,frame,of,frame,has,been,changed,by,this,operation;final,boolean,merge,final,symbol,table,symbol,table,final,frame,dst,frame,final,int,catch,type,index,boolean,frame,changed,false,int,num,local,input,locals,length,int,num,stack,input,stack,length,if,dst,frame,input,locals,null,dst,frame,input,locals,new,int,num,local,frame,changed,true,for,int,i,0,i,num,local,i,int,concrete,output,type,if,output,locals,null,i,output,locals,length,int,abstract,output,type,output,locals,i,if,abstract,output,type,0,concrete,output,type,input,locals,i,else,int,dim,abstract,output,type,int,kind,abstract,output,type,if,kind,concrete,output,type,dim,input,locals,abstract,output,type,if,abstract,output,type,0,concrete,output,type,long,concrete,output,type,double,concrete,output,type,top,else,if,kind,concrete,output,type,dim,input,stack,num,stack,abstract,output,type,if,abstract,output,type,0,concrete,output,type,long,concrete,output,type,double,concrete,output,type,top,else,concrete,output,type,abstract,output,type,else,concrete,output,type,input,locals,i,if,initializations,null,concrete,output,type,get,initialized,type,symbol,table,concrete,output,type,frame,changed,merge,symbol,table,concrete,output,type,dst,frame,input,locals,i,if,catch,type,index,0,for,int,i,0,i,num,local,i,frame,changed,merge,symbol,table,input,locals,i,dst,frame,input,locals,i,if,dst,frame,input,stack,null,dst,frame,input,stack,new,int,1,frame,changed,true,frame,changed,merge,symbol,table,catch,type,index,dst,frame,input,stack,0,return,frame,changed,int,num,input,stack,input,stack,length,output,stack,start,if,dst,frame,input,stack,null,dst,frame,input,stack,new,int,num,input,stack,output,stack,top,frame,changed,true,for,int,i,0,i,num,input,stack,i,int,concrete,output,type,input,stack,i,if,initializations,null,concrete,output,type,get,initialized,type,symbol,table,concrete,output,type,frame,changed,merge,symbol,table,concrete,output,type,dst,frame,input,stack,i,for,int,i,0,i,output,stack,top,i,int,concrete,output,type,int,abstract,output,type,output,stack,i,int,dim,abstract,output,type,int,kind,abstract,output,type,if,kind,concrete,output,type,dim,input,locals,abstract,output,type,if,abstract,output,type,0,concrete,output,type,long,concrete,output,type,double,concrete,output,type,top,else,if,kind,concrete,output,type,dim,input,stack,num,stack,abstract,output,type,if,abstract,output,type,0,concrete,output,type,long,concrete,output,type,double,concrete,output,type,top,else,concrete,output,type,abstract,output,type,if,initializations,null,concrete,output,type,get,initialized,type,symbol,table,concrete,output,type,frame,changed,merge,symbol,table,concrete,output,type,dst,frame,input,stack,num,input,stack,i,return,frame,changed
Frame -> private static int getAbstractTypeFromDescriptor(       final SymbolTable symbolTable, final String buffer, final int offset);1531241461;Returns the abstract type corresponding to the given type descriptor.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param buffer a string ending with a type descriptor._@param offset the start offset of the type descriptor in buffer._@return the abstract type corresponding to the given type descriptor.;private static int getAbstractTypeFromDescriptor(_      final SymbolTable symbolTable, final String buffer, final int offset) {_    String internalName__    switch (buffer.charAt(offset)) {_      case 'V':_        return 0__      case 'Z':_      case 'C':_      case 'B':_      case 'S':_      case 'I':_        return INTEGER__      case 'F':_        return FLOAT__      case 'J':_        return LONG__      case 'D':_        return DOUBLE__      case 'L':_        internalName = buffer.substring(offset + 1, buffer.length() - 1)__        return REFERENCE_KIND | symbolTable.addType(internalName)__      case '[':_        int elementDescriptorOffset = offset + 1__        while (buffer.charAt(elementDescriptorOffset) == '[') {_          ++elementDescriptorOffset__        }_        int typeValue__        switch (buffer.charAt(elementDescriptorOffset)) {_          case 'Z':_            typeValue = BOOLEAN__            break__          case 'C':_            typeValue = CHAR__            break__          case 'B':_            typeValue = BYTE__            break__          case 'S':_            typeValue = SHORT__            break__          case 'I':_            typeValue = INTEGER__            break__          case 'F':_            typeValue = FLOAT__            break__          case 'J':_            typeValue = LONG__            break__          case 'D':_            typeValue = DOUBLE__            break__          case 'L':_            internalName = buffer.substring(elementDescriptorOffset + 1, buffer.length() - 1)__            typeValue = REFERENCE_KIND | symbolTable.addType(internalName)__            break__          default:_            throw new IllegalArgumentException()__        }_        return ((elementDescriptorOffset - offset) << DIM_SHIFT) | typeValue__      default:_        throw new IllegalArgumentException()__    }_  };returns,the,abstract,type,corresponding,to,the,given,type,descriptor,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,buffer,a,string,ending,with,a,type,descriptor,param,offset,the,start,offset,of,the,type,descriptor,in,buffer,return,the,abstract,type,corresponding,to,the,given,type,descriptor;private,static,int,get,abstract,type,from,descriptor,final,symbol,table,symbol,table,final,string,buffer,final,int,offset,string,internal,name,switch,buffer,char,at,offset,case,v,return,0,case,z,case,c,case,b,case,s,case,i,return,integer,case,f,return,float,case,j,return,long,case,d,return,double,case,l,internal,name,buffer,substring,offset,1,buffer,length,1,return,symbol,table,add,type,internal,name,case,int,element,descriptor,offset,offset,1,while,buffer,char,at,element,descriptor,offset,element,descriptor,offset,int,type,value,switch,buffer,char,at,element,descriptor,offset,case,z,type,value,boolean,break,case,c,type,value,char,break,case,b,type,value,byte,break,case,s,type,value,short,break,case,i,type,value,integer,break,case,f,type,value,float,break,case,j,type,value,long,break,case,d,type,value,double,break,case,l,internal,name,buffer,substring,element,descriptor,offset,1,buffer,length,1,type,value,symbol,table,add,type,internal,name,break,default,throw,new,illegal,argument,exception,return,element,descriptor,offset,offset,type,value,default,throw,new,illegal,argument,exception
Frame -> private static int getAbstractTypeFromDescriptor(       final SymbolTable symbolTable, final String buffer, final int offset);1536664245;Returns the abstract type corresponding to the given type descriptor.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param buffer a string ending with a type descriptor._@param offset the start offset of the type descriptor in buffer._@return the abstract type corresponding to the given type descriptor.;private static int getAbstractTypeFromDescriptor(_      final SymbolTable symbolTable, final String buffer, final int offset) {_    String internalName__    switch (buffer.charAt(offset)) {_      case 'V':_        return 0__      case 'Z':_      case 'C':_      case 'B':_      case 'S':_      case 'I':_        return INTEGER__      case 'F':_        return FLOAT__      case 'J':_        return LONG__      case 'D':_        return DOUBLE__      case 'L':_        internalName = buffer.substring(offset + 1, buffer.length() - 1)__        return REFERENCE_KIND | symbolTable.addType(internalName)__      case '[':_        int elementDescriptorOffset = offset + 1__        while (buffer.charAt(elementDescriptorOffset) == '[') {_          ++elementDescriptorOffset__        }_        int typeValue__        switch (buffer.charAt(elementDescriptorOffset)) {_          case 'Z':_            typeValue = BOOLEAN__            break__          case 'C':_            typeValue = CHAR__            break__          case 'B':_            typeValue = BYTE__            break__          case 'S':_            typeValue = SHORT__            break__          case 'I':_            typeValue = INTEGER__            break__          case 'F':_            typeValue = FLOAT__            break__          case 'J':_            typeValue = LONG__            break__          case 'D':_            typeValue = DOUBLE__            break__          case 'L':_            internalName = buffer.substring(elementDescriptorOffset + 1, buffer.length() - 1)__            typeValue = REFERENCE_KIND | symbolTable.addType(internalName)__            break__          default:_            throw new IllegalArgumentException()__        }_        return ((elementDescriptorOffset - offset) << DIM_SHIFT) | typeValue__      default:_        throw new IllegalArgumentException()__    }_  };returns,the,abstract,type,corresponding,to,the,given,type,descriptor,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,buffer,a,string,ending,with,a,type,descriptor,param,offset,the,start,offset,of,the,type,descriptor,in,buffer,return,the,abstract,type,corresponding,to,the,given,type,descriptor;private,static,int,get,abstract,type,from,descriptor,final,symbol,table,symbol,table,final,string,buffer,final,int,offset,string,internal,name,switch,buffer,char,at,offset,case,v,return,0,case,z,case,c,case,b,case,s,case,i,return,integer,case,f,return,float,case,j,return,long,case,d,return,double,case,l,internal,name,buffer,substring,offset,1,buffer,length,1,return,symbol,table,add,type,internal,name,case,int,element,descriptor,offset,offset,1,while,buffer,char,at,element,descriptor,offset,element,descriptor,offset,int,type,value,switch,buffer,char,at,element,descriptor,offset,case,z,type,value,boolean,break,case,c,type,value,char,break,case,b,type,value,byte,break,case,s,type,value,short,break,case,i,type,value,integer,break,case,f,type,value,float,break,case,j,type,value,long,break,case,d,type,value,double,break,case,l,internal,name,buffer,substring,element,descriptor,offset,1,buffer,length,1,type,value,symbol,table,add,type,internal,name,break,default,throw,new,illegal,argument,exception,return,element,descriptor,offset,offset,type,value,default,throw,new,illegal,argument,exception
Frame -> private static int getAbstractTypeFromDescriptor(       final SymbolTable symbolTable, final String buffer, final int offset);1537204147;Returns the abstract type corresponding to the given type descriptor.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param buffer a string ending with a type descriptor._@param offset the start offset of the type descriptor in buffer._@return the abstract type corresponding to the given type descriptor.;private static int getAbstractTypeFromDescriptor(_      final SymbolTable symbolTable, final String buffer, final int offset) {_    String internalName__    switch (buffer.charAt(offset)) {_      case 'V':_        return 0__      case 'Z':_      case 'C':_      case 'B':_      case 'S':_      case 'I':_        return INTEGER__      case 'F':_        return FLOAT__      case 'J':_        return LONG__      case 'D':_        return DOUBLE__      case 'L':_        internalName = buffer.substring(offset + 1, buffer.length() - 1)__        return REFERENCE_KIND | symbolTable.addType(internalName)__      case '[':_        int elementDescriptorOffset = offset + 1__        while (buffer.charAt(elementDescriptorOffset) == '[') {_          ++elementDescriptorOffset__        }_        int typeValue__        switch (buffer.charAt(elementDescriptorOffset)) {_          case 'Z':_            typeValue = BOOLEAN__            break__          case 'C':_            typeValue = CHAR__            break__          case 'B':_            typeValue = BYTE__            break__          case 'S':_            typeValue = SHORT__            break__          case 'I':_            typeValue = INTEGER__            break__          case 'F':_            typeValue = FLOAT__            break__          case 'J':_            typeValue = LONG__            break__          case 'D':_            typeValue = DOUBLE__            break__          case 'L':_            internalName = buffer.substring(elementDescriptorOffset + 1, buffer.length() - 1)__            typeValue = REFERENCE_KIND | symbolTable.addType(internalName)__            break__          default:_            throw new IllegalArgumentException()__        }_        return ((elementDescriptorOffset - offset) << DIM_SHIFT) | typeValue__      default:_        throw new IllegalArgumentException()__    }_  };returns,the,abstract,type,corresponding,to,the,given,type,descriptor,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,buffer,a,string,ending,with,a,type,descriptor,param,offset,the,start,offset,of,the,type,descriptor,in,buffer,return,the,abstract,type,corresponding,to,the,given,type,descriptor;private,static,int,get,abstract,type,from,descriptor,final,symbol,table,symbol,table,final,string,buffer,final,int,offset,string,internal,name,switch,buffer,char,at,offset,case,v,return,0,case,z,case,c,case,b,case,s,case,i,return,integer,case,f,return,float,case,j,return,long,case,d,return,double,case,l,internal,name,buffer,substring,offset,1,buffer,length,1,return,symbol,table,add,type,internal,name,case,int,element,descriptor,offset,offset,1,while,buffer,char,at,element,descriptor,offset,element,descriptor,offset,int,type,value,switch,buffer,char,at,element,descriptor,offset,case,z,type,value,boolean,break,case,c,type,value,char,break,case,b,type,value,byte,break,case,s,type,value,short,break,case,i,type,value,integer,break,case,f,type,value,float,break,case,j,type,value,long,break,case,d,type,value,double,break,case,l,internal,name,buffer,substring,element,descriptor,offset,1,buffer,length,1,type,value,symbol,table,add,type,internal,name,break,default,throw,new,illegal,argument,exception,return,element,descriptor,offset,offset,type,value,default,throw,new,illegal,argument,exception
Frame -> final void setInputFrameFromApiFormat(       final SymbolTable symbolTable,       final int nLocal,       final Object[] local,       final int nStack,       final Object[] stack);1531241461;Sets the input frame from the given public API frame description.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param nLocal the number of local variables._@param local the local variable types, described using the same format as in {@link_MethodVisitor#visitFrame}._@param nStack the number of operand stack elements._@param stack the operand stack types, described using the same format as in {@link_MethodVisitor#visitFrame}.;final void setInputFrameFromApiFormat(_      final SymbolTable symbolTable,_      final int nLocal,_      final Object[] local,_      final int nStack,_      final Object[] stack) {_    int inputLocalIndex = 0__    for (int i = 0_ i < nLocal_ ++i) {_      inputLocals[inputLocalIndex++] = getAbstractTypeFromApiFormat(symbolTable, local[i])__      if (local[i] == Opcodes.LONG || local[i] == Opcodes.DOUBLE) {_        inputLocals[inputLocalIndex++] = TOP__      }_    }_    while (inputLocalIndex < inputLocals.length) {_      inputLocals[inputLocalIndex++] = TOP__    }_    int nStackTop = 0__    for (int i = 0_ i < nStack_ ++i) {_      if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) {_        ++nStackTop__      }_    }_    inputStack = new int[nStack + nStackTop]__    int inputStackIndex = 0__    for (int i = 0_ i < nStack_ ++i) {_      inputStack[inputStackIndex++] = getAbstractTypeFromApiFormat(symbolTable, stack[i])__      if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) {_        inputStack[inputStackIndex++] = TOP__      }_    }_    outputStackTop = 0__    initializationCount = 0__  };sets,the,input,frame,from,the,given,public,api,frame,description,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,n,local,the,number,of,local,variables,param,local,the,local,variable,types,described,using,the,same,format,as,in,link,method,visitor,visit,frame,param,n,stack,the,number,of,operand,stack,elements,param,stack,the,operand,stack,types,described,using,the,same,format,as,in,link,method,visitor,visit,frame;final,void,set,input,frame,from,api,format,final,symbol,table,symbol,table,final,int,n,local,final,object,local,final,int,n,stack,final,object,stack,int,input,local,index,0,for,int,i,0,i,n,local,i,input,locals,input,local,index,get,abstract,type,from,api,format,symbol,table,local,i,if,local,i,opcodes,long,local,i,opcodes,double,input,locals,input,local,index,top,while,input,local,index,input,locals,length,input,locals,input,local,index,top,int,n,stack,top,0,for,int,i,0,i,n,stack,i,if,stack,i,opcodes,long,stack,i,opcodes,double,n,stack,top,input,stack,new,int,n,stack,n,stack,top,int,input,stack,index,0,for,int,i,0,i,n,stack,i,input,stack,input,stack,index,get,abstract,type,from,api,format,symbol,table,stack,i,if,stack,i,opcodes,long,stack,i,opcodes,double,input,stack,input,stack,index,top,output,stack,top,0,initialization,count,0
Frame -> final void setInputFrameFromApiFormat(       final SymbolTable symbolTable,       final int nLocal,       final Object[] local,       final int nStack,       final Object[] stack);1536664245;Sets the input frame from the given public API frame description.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param nLocal the number of local variables._@param local the local variable types, described using the same format as in {@link_MethodVisitor#visitFrame}._@param nStack the number of operand stack elements._@param stack the operand stack types, described using the same format as in {@link_MethodVisitor#visitFrame}.;final void setInputFrameFromApiFormat(_      final SymbolTable symbolTable,_      final int nLocal,_      final Object[] local,_      final int nStack,_      final Object[] stack) {_    int inputLocalIndex = 0__    for (int i = 0_ i < nLocal_ ++i) {_      inputLocals[inputLocalIndex++] = getAbstractTypeFromApiFormat(symbolTable, local[i])__      if (local[i] == Opcodes.LONG || local[i] == Opcodes.DOUBLE) {_        inputLocals[inputLocalIndex++] = TOP__      }_    }_    while (inputLocalIndex < inputLocals.length) {_      inputLocals[inputLocalIndex++] = TOP__    }_    int nStackTop = 0__    for (int i = 0_ i < nStack_ ++i) {_      if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) {_        ++nStackTop__      }_    }_    inputStack = new int[nStack + nStackTop]__    int inputStackIndex = 0__    for (int i = 0_ i < nStack_ ++i) {_      inputStack[inputStackIndex++] = getAbstractTypeFromApiFormat(symbolTable, stack[i])__      if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) {_        inputStack[inputStackIndex++] = TOP__      }_    }_    outputStackTop = 0__    initializationCount = 0__  };sets,the,input,frame,from,the,given,public,api,frame,description,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,n,local,the,number,of,local,variables,param,local,the,local,variable,types,described,using,the,same,format,as,in,link,method,visitor,visit,frame,param,n,stack,the,number,of,operand,stack,elements,param,stack,the,operand,stack,types,described,using,the,same,format,as,in,link,method,visitor,visit,frame;final,void,set,input,frame,from,api,format,final,symbol,table,symbol,table,final,int,n,local,final,object,local,final,int,n,stack,final,object,stack,int,input,local,index,0,for,int,i,0,i,n,local,i,input,locals,input,local,index,get,abstract,type,from,api,format,symbol,table,local,i,if,local,i,opcodes,long,local,i,opcodes,double,input,locals,input,local,index,top,while,input,local,index,input,locals,length,input,locals,input,local,index,top,int,n,stack,top,0,for,int,i,0,i,n,stack,i,if,stack,i,opcodes,long,stack,i,opcodes,double,n,stack,top,input,stack,new,int,n,stack,n,stack,top,int,input,stack,index,0,for,int,i,0,i,n,stack,i,input,stack,input,stack,index,get,abstract,type,from,api,format,symbol,table,stack,i,if,stack,i,opcodes,long,stack,i,opcodes,double,input,stack,input,stack,index,top,output,stack,top,0,initialization,count,0
Frame -> private int init(final ClassWriter cw, final int t);1366718246;Replaces the given type with the appropriate type if it is one of the_types on which a constructor is invoked in the basic block.__@param cw_the ClassWriter to which this label belongs._@param t_a type_@return t or, if t is one of the types on which a constructor is invoked_in the basic block, the type corresponding to this constructor.;private int init(final ClassWriter cw, final int t) {_        int s__        if (t == UNINITIALIZED_THIS) {_            s = OBJECT | cw.addType(cw.thisName)__        } else if ((t & (DIM | BASE_KIND)) == UNINITIALIZED) {_            String type = cw.typeTable[t & BASE_VALUE].strVal1__            s = OBJECT | cw.addType(type)__        } else {_            return t__        }_        for (int j = 0_ j < initializationCount_ ++j) {_            int u = initializations[j]__            int dim = u & DIM__            int kind = u & KIND__            if (kind == LOCAL) {_                u = dim + inputLocals[u & VALUE]__            } else if (kind == STACK) {_                u = dim + inputStack[inputStack.length - (u & VALUE)]__            }_            if (t == u) {_                return s__            }_        }_        return t__    };replaces,the,given,type,with,the,appropriate,type,if,it,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,cw,the,class,writer,to,which,this,label,belongs,param,t,a,type,return,t,or,if,t,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,the,type,corresponding,to,this,constructor;private,int,init,final,class,writer,cw,final,int,t,int,s,if,t,s,object,cw,add,type,cw,this,name,else,if,t,dim,uninitialized,string,type,cw,type,table,t,str,val1,s,object,cw,add,type,type,else,return,t,for,int,j,0,j,initialization,count,j,int,u,initializations,j,int,dim,u,dim,int,kind,u,kind,if,kind,local,u,dim,input,locals,u,value,else,if,kind,stack,u,dim,input,stack,input,stack,length,u,value,if,t,u,return,s,return,t
Frame -> private int init(final ClassWriter cw, final int t);1385423968;Replaces the given type with the appropriate type if it is one of the_types on which a constructor is invoked in the basic block.__@param cw_the ClassWriter to which this label belongs._@param t_a type_@return t or, if t is one of the types on which a constructor is invoked_in the basic block, the type corresponding to this constructor.;private int init(final ClassWriter cw, final int t) {_        int s__        if (t == UNINITIALIZED_THIS) {_            s = OBJECT | cw.addType(cw.thisName)__        } else if ((t & (DIM | BASE_KIND)) == UNINITIALIZED) {_            String type = cw.typeTable[t & BASE_VALUE].strVal1__            s = OBJECT | cw.addType(type)__        } else {_            return t__        }_        for (int j = 0_ j < initializationCount_ ++j) {_            int u = initializations[j]__            int dim = u & DIM__            int kind = u & KIND__            if (kind == LOCAL) {_                u = dim + inputLocals[u & VALUE]__            } else if (kind == STACK) {_                u = dim + inputStack[inputStack.length - (u & VALUE)]__            }_            if (t == u) {_                return s__            }_        }_        return t__    };replaces,the,given,type,with,the,appropriate,type,if,it,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,cw,the,class,writer,to,which,this,label,belongs,param,t,a,type,return,t,or,if,t,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,the,type,corresponding,to,this,constructor;private,int,init,final,class,writer,cw,final,int,t,int,s,if,t,s,object,cw,add,type,cw,this,name,else,if,t,dim,uninitialized,string,type,cw,type,table,t,str,val1,s,object,cw,add,type,type,else,return,t,for,int,j,0,j,initialization,count,j,int,u,initializations,j,int,dim,u,dim,int,kind,u,kind,if,kind,local,u,dim,input,locals,u,value,else,if,kind,stack,u,dim,input,stack,input,stack,length,u,value,if,t,u,return,s,return,t
Frame -> private int init(final ClassWriter cw, final int t);1395273982;Replaces the given type with the appropriate type if it is one of the_types on which a constructor is invoked in the basic block.__@param cw_the ClassWriter to which this label belongs._@param t_a type_@return t or, if t is one of the types on which a constructor is invoked_in the basic block, the type corresponding to this constructor.;private int init(final ClassWriter cw, final int t) {_        int s__        if (t == UNINITIALIZED_THIS) {_            s = OBJECT | cw.addType(cw.thisName)__        } else if ((t & (DIM | BASE_KIND)) == UNINITIALIZED) {_            String type = cw.typeTable[t & BASE_VALUE].strVal1__            s = OBJECT | cw.addType(type)__        } else {_            return t__        }_        for (int j = 0_ j < initializationCount_ ++j) {_            int u = initializations[j]__            int dim = u & DIM__            int kind = u & KIND__            if (kind == LOCAL) {_                u = dim + inputLocals[u & VALUE]__            } else if (kind == STACK) {_                u = dim + inputStack[inputStack.length - (u & VALUE)]__            }_            if (t == u) {_                return s__            }_        }_        return t__    };replaces,the,given,type,with,the,appropriate,type,if,it,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,cw,the,class,writer,to,which,this,label,belongs,param,t,a,type,return,t,or,if,t,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,the,type,corresponding,to,this,constructor;private,int,init,final,class,writer,cw,final,int,t,int,s,if,t,s,object,cw,add,type,cw,this,name,else,if,t,dim,uninitialized,string,type,cw,type,table,t,str,val1,s,object,cw,add,type,type,else,return,t,for,int,j,0,j,initialization,count,j,int,u,initializations,j,int,dim,u,dim,int,kind,u,kind,if,kind,local,u,dim,input,locals,u,value,else,if,kind,stack,u,dim,input,stack,input,stack,length,u,value,if,t,u,return,s,return,t
Frame -> private int init(final ClassWriter cw, final int t);1397644526;Replaces the given type with the appropriate type if it is one of the_types on which a constructor is invoked in the basic block.__@param cw_the ClassWriter to which this label belongs._@param t_a type_@return t or, if t is one of the types on which a constructor is invoked_in the basic block, the type corresponding to this constructor.;private int init(final ClassWriter cw, final int t) {_        int s__        if (t == UNINITIALIZED_THIS) {_            s = OBJECT | cw.addType(cw.thisName)__        } else if ((t & (DIM | BASE_KIND)) == UNINITIALIZED) {_            String type = cw.typeTable[t & BASE_VALUE].strVal1__            s = OBJECT | cw.addType(type)__        } else {_            return t__        }_        for (int j = 0_ j < initializationCount_ ++j) {_            int u = initializations[j]__            int dim = u & DIM__            int kind = u & KIND__            if (kind == LOCAL) {_                u = dim + inputLocals[u & VALUE]__            } else if (kind == STACK) {_                u = dim + inputStack[inputStack.length - (u & VALUE)]__            }_            if (t == u) {_                return s__            }_        }_        return t__    };replaces,the,given,type,with,the,appropriate,type,if,it,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,cw,the,class,writer,to,which,this,label,belongs,param,t,a,type,return,t,or,if,t,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,the,type,corresponding,to,this,constructor;private,int,init,final,class,writer,cw,final,int,t,int,s,if,t,s,object,cw,add,type,cw,this,name,else,if,t,dim,uninitialized,string,type,cw,type,table,t,str,val1,s,object,cw,add,type,type,else,return,t,for,int,j,0,j,initialization,count,j,int,u,initializations,j,int,dim,u,dim,int,kind,u,kind,if,kind,local,u,dim,input,locals,u,value,else,if,kind,stack,u,dim,input,stack,input,stack,length,u,value,if,t,u,return,s,return,t
Frame -> private int init(final ClassWriter cw, final int t);1398255950;Replaces the given type with the appropriate type if it is one of the_types on which a constructor is invoked in the basic block.__@param cw_the ClassWriter to which this label belongs._@param t_a type_@return t or, if t is one of the types on which a constructor is invoked_in the basic block, the type corresponding to this constructor.;private int init(final ClassWriter cw, final int t) {_        int s__        if (t == UNINITIALIZED_THIS) {_            s = OBJECT | cw.addType(cw.thisName)__        } else if ((t & (DIM | BASE_KIND)) == UNINITIALIZED) {_            String type = cw.typeTable[t & BASE_VALUE].strVal1__            s = OBJECT | cw.addType(type)__        } else {_            return t__        }_        for (int j = 0_ j < initializationCount_ ++j) {_            int u = initializations[j]__            int dim = u & DIM__            int kind = u & KIND__            if (kind == LOCAL) {_                u = dim + inputLocals[u & VALUE]__            } else if (kind == STACK) {_                u = dim + inputStack[inputStack.length - (u & VALUE)]__            }_            if (t == u) {_                return s__            }_        }_        return t__    };replaces,the,given,type,with,the,appropriate,type,if,it,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,cw,the,class,writer,to,which,this,label,belongs,param,t,a,type,return,t,or,if,t,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,the,type,corresponding,to,this,constructor;private,int,init,final,class,writer,cw,final,int,t,int,s,if,t,s,object,cw,add,type,cw,this,name,else,if,t,dim,uninitialized,string,type,cw,type,table,t,str,val1,s,object,cw,add,type,type,else,return,t,for,int,j,0,j,initialization,count,j,int,u,initializations,j,int,dim,u,dim,int,kind,u,kind,if,kind,local,u,dim,input,locals,u,value,else,if,kind,stack,u,dim,input,stack,input,stack,length,u,value,if,t,u,return,s,return,t
Frame -> private int init(final ClassWriter cw, final int t);1461047077;Replaces the given type with the appropriate type if it is one of the_types on which a constructor is invoked in the basic block.__@param cw_the ClassWriter to which this label belongs._@param t_a type_@return t or, if t is one of the types on which a constructor is invoked_in the basic block, the type corresponding to this constructor.;private int init(final ClassWriter cw, final int t) {_        int s__        if (t == UNINITIALIZED_THIS) {_            s = OBJECT | cw.addType(cw.thisName)__        } else if ((t & (DIM | BASE_KIND)) == UNINITIALIZED) {_            String type = cw.typeTable[t & BASE_VALUE].strVal1__            s = OBJECT | cw.addType(type)__        } else {_            return t__        }_        for (int j = 0_ j < initializationCount_ ++j) {_            int u = initializations[j]__            int dim = u & DIM__            int kind = u & KIND__            if (kind == LOCAL) {_                u = dim + inputLocals[u & VALUE]__            } else if (kind == STACK) {_                u = dim + inputStack[inputStack.length - (u & VALUE)]__            }_            if (t == u) {_                return s__            }_        }_        return t__    };replaces,the,given,type,with,the,appropriate,type,if,it,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,cw,the,class,writer,to,which,this,label,belongs,param,t,a,type,return,t,or,if,t,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,the,type,corresponding,to,this,constructor;private,int,init,final,class,writer,cw,final,int,t,int,s,if,t,s,object,cw,add,type,cw,this,name,else,if,t,dim,uninitialized,string,type,cw,type,table,t,str,val1,s,object,cw,add,type,type,else,return,t,for,int,j,0,j,initialization,count,j,int,u,initializations,j,int,dim,u,dim,int,kind,u,kind,if,kind,local,u,dim,input,locals,u,value,else,if,kind,stack,u,dim,input,stack,input,stack,length,u,value,if,t,u,return,s,return,t
Frame -> private int init(final ClassWriter cw, final int t);1483093254;Replaces the given type with the appropriate type if it is one of the_types on which a constructor is invoked in the basic block.__@param cw_the ClassWriter to which this label belongs._@param t_a type_@return t or, if t is one of the types on which a constructor is invoked_in the basic block, the type corresponding to this constructor.;private int init(final ClassWriter cw, final int t) {_        int s__        if (t == UNINITIALIZED_THIS) {_            s = OBJECT | cw.addType(cw.thisName)__        } else if ((t & (DIM | BASE_KIND)) == UNINITIALIZED) {_            String type = cw.typeTable[t & BASE_VALUE].strVal1__            s = OBJECT | cw.addType(type)__        } else {_            return t__        }_        for (int j = 0_ j < initializationCount_ ++j) {_            int u = initializations[j]__            int dim = u & DIM__            int kind = u & KIND__            if (kind == LOCAL) {_                u = dim + inputLocals[u & VALUE]__            } else if (kind == STACK) {_                u = dim + inputStack[inputStack.length - (u & VALUE)]__            }_            if (t == u) {_                return s__            }_        }_        return t__    };replaces,the,given,type,with,the,appropriate,type,if,it,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,cw,the,class,writer,to,which,this,label,belongs,param,t,a,type,return,t,or,if,t,is,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,the,type,corresponding,to,this,constructor;private,int,init,final,class,writer,cw,final,int,t,int,s,if,t,s,object,cw,add,type,cw,this,name,else,if,t,dim,uninitialized,string,type,cw,type,table,t,str,val1,s,object,cw,add,type,type,else,return,t,for,int,j,0,j,initialization,count,j,int,u,initializations,j,int,dim,u,dim,int,kind,u,kind,if,kind,local,u,dim,input,locals,u,value,else,if,kind,stack,u,dim,input,stack,input,stack,length,u,value,if,t,u,return,s,return,t
Frame -> Frame(final Label owner);1531241461;Constructs a new Frame.__@param owner the basic block to which these input and output stack map frames correspond.;Frame(final Label owner) {_    this.owner = owner__  };constructs,a,new,frame,param,owner,the,basic,block,to,which,these,input,and,output,stack,map,frames,correspond;frame,final,label,owner,this,owner,owner
Frame -> Frame(final Label owner);1536664245;Constructs a new Frame.__@param owner the basic block to which these input and output stack map frames correspond.;Frame(final Label owner) {_    this.owner = owner__  };constructs,a,new,frame,param,owner,the,basic,block,to,which,these,input,and,output,stack,map,frames,correspond;frame,final,label,owner,this,owner,owner
Frame -> Frame(final Label owner);1537204147;Constructs a new Frame.__@param owner the basic block to which these input and output stack map frames correspond.;Frame(final Label owner) {_    this.owner = owner__  };constructs,a,new,frame,param,owner,the,basic,block,to,which,these,input,and,output,stack,map,frames,correspond;frame,final,label,owner,this,owner,owner
Frame -> static int getAbstractTypeFromApiFormat(final SymbolTable symbolTable, final Object type);1531241461;Returns the abstract type corresponding to the given public API frame element type.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param type a frame element type described using the same format as in {@link_MethodVisitor#visitFrame}, i.e. either {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link_Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL}, or_{@link Opcodes#UNINITIALIZED_THIS}, or the internal name of a class, or a Label designating_a NEW instruction (for uninitialized types)._@return the abstract type corresponding to the given frame element type.;static int getAbstractTypeFromApiFormat(final SymbolTable symbolTable, final Object type) {_    if (type instanceof Integer) {_      return CONSTANT_KIND | ((Integer) type).intValue()__    } else if (type instanceof String) {_      String descriptor = Type.getObjectType((String) type).getDescriptor()__      return getAbstractTypeFromDescriptor(symbolTable, descriptor, 0)__    } else {_      return UNINITIALIZED_KIND_          | symbolTable.addUninitializedType("", ((Label) type).bytecodeOffset)__    }_  };returns,the,abstract,type,corresponding,to,the,given,public,api,frame,element,type,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,type,a,frame,element,type,described,using,the,same,format,as,in,link,method,visitor,visit,frame,i,e,either,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,or,the,internal,name,of,a,class,or,a,label,designating,a,new,instruction,for,uninitialized,types,return,the,abstract,type,corresponding,to,the,given,frame,element,type;static,int,get,abstract,type,from,api,format,final,symbol,table,symbol,table,final,object,type,if,type,instanceof,integer,return,integer,type,int,value,else,if,type,instanceof,string,string,descriptor,type,get,object,type,string,type,get,descriptor,return,get,abstract,type,from,descriptor,symbol,table,descriptor,0,else,return,symbol,table,add,uninitialized,type,label,type,bytecode,offset
Frame -> static int getAbstractTypeFromApiFormat(final SymbolTable symbolTable, final Object type);1536664245;Returns the abstract type corresponding to the given public API frame element type.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param type a frame element type described using the same format as in {@link_MethodVisitor#visitFrame}, i.e. either {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link_Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL}, or_{@link Opcodes#UNINITIALIZED_THIS}, or the internal name of a class, or a Label designating_a NEW instruction (for uninitialized types)._@return the abstract type corresponding to the given frame element type.;static int getAbstractTypeFromApiFormat(final SymbolTable symbolTable, final Object type) {_    if (type instanceof Integer) {_      return CONSTANT_KIND | ((Integer) type).intValue()__    } else if (type instanceof String) {_      String descriptor = Type.getObjectType((String) type).getDescriptor()__      return getAbstractTypeFromDescriptor(symbolTable, descriptor, 0)__    } else {_      return UNINITIALIZED_KIND_          | symbolTable.addUninitializedType("", ((Label) type).bytecodeOffset)__    }_  };returns,the,abstract,type,corresponding,to,the,given,public,api,frame,element,type,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,type,a,frame,element,type,described,using,the,same,format,as,in,link,method,visitor,visit,frame,i,e,either,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,or,the,internal,name,of,a,class,or,a,label,designating,a,new,instruction,for,uninitialized,types,return,the,abstract,type,corresponding,to,the,given,frame,element,type;static,int,get,abstract,type,from,api,format,final,symbol,table,symbol,table,final,object,type,if,type,instanceof,integer,return,integer,type,int,value,else,if,type,instanceof,string,string,descriptor,type,get,object,type,string,type,get,descriptor,return,get,abstract,type,from,descriptor,symbol,table,descriptor,0,else,return,symbol,table,add,uninitialized,type,label,type,bytecode,offset
Frame -> static int getAbstractTypeFromApiFormat(final SymbolTable symbolTable, final Object type);1537204147;Returns the abstract type corresponding to the given public API frame element type.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param type a frame element type described using the same format as in {@link_MethodVisitor#visitFrame}, i.e. either {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link_Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL}, or_{@link Opcodes#UNINITIALIZED_THIS}, or the internal name of a class, or a Label designating_a NEW instruction (for uninitialized types)._@return the abstract type corresponding to the given frame element type.;static int getAbstractTypeFromApiFormat(final SymbolTable symbolTable, final Object type) {_    if (type instanceof Integer) {_      return CONSTANT_KIND | ((Integer) type).intValue()__    } else if (type instanceof String) {_      String descriptor = Type.getObjectType((String) type).getDescriptor()__      return getAbstractTypeFromDescriptor(symbolTable, descriptor, 0)__    } else {_      return UNINITIALIZED_KIND_          | symbolTable.addUninitializedType("", ((Label) type).bytecodeOffset)__    }_  };returns,the,abstract,type,corresponding,to,the,given,public,api,frame,element,type,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,type,a,frame,element,type,described,using,the,same,format,as,in,link,method,visitor,visit,frame,i,e,either,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,or,the,internal,name,of,a,class,or,a,label,designating,a,new,instruction,for,uninitialized,types,return,the,abstract,type,corresponding,to,the,given,frame,element,type;static,int,get,abstract,type,from,api,format,final,symbol,table,symbol,table,final,object,type,if,type,instanceof,integer,return,integer,type,int,value,else,if,type,instanceof,string,string,descriptor,type,get,object,type,string,type,get,descriptor,return,get,abstract,type,from,descriptor,symbol,table,descriptor,0,else,return,symbol,table,add,uninitialized,type,label,type,bytecode,offset
Frame -> private static boolean merge(final ClassWriter cw, int t,             final int[] types, final int index);1366718246;Merges the type at the given index in the given type array with the given_type. Returns <tt>true</tt> if the type array has been modified by this_operation.__@param cw_the ClassWriter to which this label belongs._@param t_the type with which the type array element must be merged._@param types_an array of types._@param index_the index of the type that must be merged in 'types'._@return <tt>true</tt> if the type array has been modified by this_operation.;private static boolean merge(final ClassWriter cw, int t,_            final int[] types, final int index) {_        int u = types[index]__        if (u == t) {_            _            return false__        }_        if ((t & ~DIM) == NULL) {_            if (u == NULL) {_                return false__            }_            t = NULL__        }_        if (u == 0) {_            _            types[index] = t__            return true__        }_        int v__        if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {_            _            if (t == NULL) {_                _                return false__            } else if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {_                if ((u & BASE_KIND) == OBJECT) {_                    _                    _                    _                    v = (t & DIM) | OBJECT_                            | cw.getMergedType(t & BASE_VALUE, u & BASE_VALUE)__                } else {_                    _                    _                    v = OBJECT | cw.addType("java/lang/Object")__                }_            } else if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {_                _                _                v = OBJECT | cw.addType("java/lang/Object")__            } else {_                _                v = TOP__            }_        } else if (u == NULL) {_            _            _            v = (t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP__        } else {_            _            v = TOP__        }_        if (u != v) {_            types[index] = v__            return true__        }_        return false__    };merges,the,type,at,the,given,index,in,the,given,type,array,with,the,given,type,returns,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,t,the,type,with,which,the,type,array,element,must,be,merged,param,types,an,array,of,types,param,index,the,index,of,the,type,that,must,be,merged,in,types,return,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation;private,static,boolean,merge,final,class,writer,cw,int,t,final,int,types,final,int,index,int,u,types,index,if,u,t,return,false,if,t,dim,null,if,u,null,return,false,t,null,if,u,0,types,index,t,return,true,int,v,if,u,object,u,dim,0,if,t,null,return,false,else,if,t,dim,u,dim,if,u,object,v,t,dim,object,cw,get,merged,type,t,u,else,v,object,cw,add,type,java,lang,object,else,if,t,object,t,dim,0,v,object,cw,add,type,java,lang,object,else,v,top,else,if,u,null,v,t,object,t,dim,0,t,top,else,v,top,if,u,v,types,index,v,return,true,return,false
Frame -> private static boolean merge(final ClassWriter cw, int t,             final int[] types, final int index);1385423968;Merges the type at the given index in the given type array with the given_type. Returns <tt>true</tt> if the type array has been modified by this_operation.__@param cw_the ClassWriter to which this label belongs._@param t_the type with which the type array element must be merged._@param types_an array of types._@param index_the index of the type that must be merged in 'types'._@return <tt>true</tt> if the type array has been modified by this_operation.;private static boolean merge(final ClassWriter cw, int t,_            final int[] types, final int index) {_        int u = types[index]__        if (u == t) {_            _            return false__        }_        if ((t & ~DIM) == NULL) {_            if (u == NULL) {_                return false__            }_            t = NULL__        }_        if (u == 0) {_            _            types[index] = t__            return true__        }_        int v__        if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {_            _            if (t == NULL) {_                _                return false__            } else if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {_                if ((u & BASE_KIND) == OBJECT) {_                    _                    _                    _                    v = (t & DIM) | OBJECT_                            | cw.getMergedType(t & BASE_VALUE, u & BASE_VALUE)__                } else {_                    _                    _                    v = OBJECT | cw.addType("java/lang/Object")__                }_            } else if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {_                _                _                v = OBJECT | cw.addType("java/lang/Object")__            } else {_                _                v = TOP__            }_        } else if (u == NULL) {_            _            _            v = (t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP__        } else {_            _            v = TOP__        }_        if (u != v) {_            types[index] = v__            return true__        }_        return false__    };merges,the,type,at,the,given,index,in,the,given,type,array,with,the,given,type,returns,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,t,the,type,with,which,the,type,array,element,must,be,merged,param,types,an,array,of,types,param,index,the,index,of,the,type,that,must,be,merged,in,types,return,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation;private,static,boolean,merge,final,class,writer,cw,int,t,final,int,types,final,int,index,int,u,types,index,if,u,t,return,false,if,t,dim,null,if,u,null,return,false,t,null,if,u,0,types,index,t,return,true,int,v,if,u,object,u,dim,0,if,t,null,return,false,else,if,t,dim,u,dim,if,u,object,v,t,dim,object,cw,get,merged,type,t,u,else,v,object,cw,add,type,java,lang,object,else,if,t,object,t,dim,0,v,object,cw,add,type,java,lang,object,else,v,top,else,if,u,null,v,t,object,t,dim,0,t,top,else,v,top,if,u,v,types,index,v,return,true,return,false
Frame -> private static boolean merge(final ClassWriter cw, int t,             final int[] types, final int index);1395273982;Merges the type at the given index in the given type array with the given_type. Returns <tt>true</tt> if the type array has been modified by this_operation.__@param cw_the ClassWriter to which this label belongs._@param t_the type with which the type array element must be merged._@param types_an array of types._@param index_the index of the type that must be merged in 'types'._@return <tt>true</tt> if the type array has been modified by this_operation.;private static boolean merge(final ClassWriter cw, int t,_            final int[] types, final int index) {_        int u = types[index]__        if (u == t) {_            _            return false__        }_        if ((t & ~DIM) == NULL) {_            if (u == NULL) {_                return false__            }_            t = NULL__        }_        if (u == 0) {_            _            types[index] = t__            return true__        }_        int v__        if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {_            _            if (t == NULL) {_                _                return false__            } else if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {_                _                if ((u & BASE_KIND) == OBJECT) {_                    _                    _                    _                    v = (t & DIM) | OBJECT_                            | cw.getMergedType(t & BASE_VALUE, u & BASE_VALUE)__                } else {_                    _                    _                    v = OBJECT | cw.addType("java/lang/Object")__                }_            } else if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {_                _                _                _                int tdim = t & DIM__                int udim = u & DIM__                v = (udim != tdim ? Math.min(tdim, udim) : 0) | OBJECT_                        | cw.addType("java/lang/Object")__            } else {_                _                v = TOP__            }_        } else if (u == NULL) {_            _            _            v = (t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP__        } else {_            _            v = TOP__        }_        if (u != v) {_            types[index] = v__            return true__        }_        return false__    };merges,the,type,at,the,given,index,in,the,given,type,array,with,the,given,type,returns,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,t,the,type,with,which,the,type,array,element,must,be,merged,param,types,an,array,of,types,param,index,the,index,of,the,type,that,must,be,merged,in,types,return,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation;private,static,boolean,merge,final,class,writer,cw,int,t,final,int,types,final,int,index,int,u,types,index,if,u,t,return,false,if,t,dim,null,if,u,null,return,false,t,null,if,u,0,types,index,t,return,true,int,v,if,u,object,u,dim,0,if,t,null,return,false,else,if,t,dim,u,dim,if,u,object,v,t,dim,object,cw,get,merged,type,t,u,else,v,object,cw,add,type,java,lang,object,else,if,t,object,t,dim,0,int,tdim,t,dim,int,udim,u,dim,v,udim,tdim,math,min,tdim,udim,0,object,cw,add,type,java,lang,object,else,v,top,else,if,u,null,v,t,object,t,dim,0,t,top,else,v,top,if,u,v,types,index,v,return,true,return,false
Frame -> private static boolean merge(final ClassWriter cw, int t,             final int[] types, final int index);1397644526;Merges the type at the given index in the given type array with the given_type. Returns <tt>true</tt> if the type array has been modified by this_operation.__@param cw_the ClassWriter to which this label belongs._@param t_the type with which the type array element must be merged._@param types_an array of types._@param index_the index of the type that must be merged in 'types'._@return <tt>true</tt> if the type array has been modified by this_operation.;private static boolean merge(final ClassWriter cw, int t,_            final int[] types, final int index) {_        int u = types[index]__        if (u == t) {_            _            return false__        }_        if ((t & ~DIM) == NULL) {_            if (u == NULL) {_                return false__            }_            t = NULL__        }_        if (u == 0) {_            _            types[index] = t__            return true__        }_        int v__        if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {_            _            if (t == NULL) {_                _                return false__            } else if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {_                if ((u & BASE_KIND) == OBJECT) {_                    _                    _                    _                    v = (t & DIM) | OBJECT_                            | cw.getMergedType(t & BASE_VALUE, u & BASE_VALUE)__                } else {_                    _                    _                    v = OBJECT | cw.addType("java/lang/Object")__                }_            } else if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {_                _                _                v = OBJECT | cw.addType("java/lang/Object")__            } else {_                _                v = TOP__            }_        } else if (u == NULL) {_            _            _            v = (t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP__        } else {_            _            v = TOP__        }_        if (u != v) {_            types[index] = v__            return true__        }_        return false__    };merges,the,type,at,the,given,index,in,the,given,type,array,with,the,given,type,returns,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,t,the,type,with,which,the,type,array,element,must,be,merged,param,types,an,array,of,types,param,index,the,index,of,the,type,that,must,be,merged,in,types,return,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation;private,static,boolean,merge,final,class,writer,cw,int,t,final,int,types,final,int,index,int,u,types,index,if,u,t,return,false,if,t,dim,null,if,u,null,return,false,t,null,if,u,0,types,index,t,return,true,int,v,if,u,object,u,dim,0,if,t,null,return,false,else,if,t,dim,u,dim,if,u,object,v,t,dim,object,cw,get,merged,type,t,u,else,v,object,cw,add,type,java,lang,object,else,if,t,object,t,dim,0,v,object,cw,add,type,java,lang,object,else,v,top,else,if,u,null,v,t,object,t,dim,0,t,top,else,v,top,if,u,v,types,index,v,return,true,return,false
Frame -> private static boolean merge(final ClassWriter cw, int t,             final int[] types, final int index);1398255950;Merges the type at the given index in the given type array with the given_type. Returns <tt>true</tt> if the type array has been modified by this_operation.__@param cw_the ClassWriter to which this label belongs._@param t_the type with which the type array element must be merged._@param types_an array of types._@param index_the index of the type that must be merged in 'types'._@return <tt>true</tt> if the type array has been modified by this_operation.;private static boolean merge(final ClassWriter cw, int t,_            final int[] types, final int index) {_        int u = types[index]__        if (u == t) {_            _            return false__        }_        if ((t & ~DIM) == NULL) {_            if (u == NULL) {_                return false__            }_            t = NULL__        }_        if (u == 0) {_            _            types[index] = t__            return true__        }_        int v__        if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {_            _            if (t == NULL) {_                _                return false__            } else if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {_                _                if ((u & BASE_KIND) == OBJECT) {_                    _                    _                    _                    v = (t & DIM) | OBJECT_                            | cw.getMergedType(t & BASE_VALUE, u & BASE_VALUE)__                } else {_                    _                    _                    int vdim = ELEMENT_OF + (u & DIM)__                    v = vdim | OBJECT | cw.addType("java/lang/Object")__                }_            } else if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {_                _                _                _                _                int tdim = (((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0_                        : ELEMENT_OF) + (t & DIM)__                int udim = (((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0_                        : ELEMENT_OF) + (u & DIM)__                v = Math.min(tdim, udim) | OBJECT_                        | cw.addType("java/lang/Object")__            } else {_                _                v = TOP__            }_        } else if (u == NULL) {_            _            _            v = (t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP__        } else {_            _            v = TOP__        }_        if (u != v) {_            types[index] = v__            return true__        }_        return false__    };merges,the,type,at,the,given,index,in,the,given,type,array,with,the,given,type,returns,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,t,the,type,with,which,the,type,array,element,must,be,merged,param,types,an,array,of,types,param,index,the,index,of,the,type,that,must,be,merged,in,types,return,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation;private,static,boolean,merge,final,class,writer,cw,int,t,final,int,types,final,int,index,int,u,types,index,if,u,t,return,false,if,t,dim,null,if,u,null,return,false,t,null,if,u,0,types,index,t,return,true,int,v,if,u,object,u,dim,0,if,t,null,return,false,else,if,t,dim,u,dim,if,u,object,v,t,dim,object,cw,get,merged,type,t,u,else,int,vdim,u,dim,v,vdim,object,cw,add,type,java,lang,object,else,if,t,object,t,dim,0,int,tdim,t,dim,0,t,object,0,t,dim,int,udim,u,dim,0,u,object,0,u,dim,v,math,min,tdim,udim,object,cw,add,type,java,lang,object,else,v,top,else,if,u,null,v,t,object,t,dim,0,t,top,else,v,top,if,u,v,types,index,v,return,true,return,false
Frame -> private static boolean merge(final ClassWriter cw, int t,             final int[] types, final int index);1461047077;Merges the type at the given index in the given type array with the given_type. Returns <tt>true</tt> if the type array has been modified by this_operation.__@param cw_the ClassWriter to which this label belongs._@param t_the type with which the type array element must be merged._@param types_an array of types._@param index_the index of the type that must be merged in 'types'._@return <tt>true</tt> if the type array has been modified by this_operation.;private static boolean merge(final ClassWriter cw, int t,_            final int[] types, final int index) {_        int u = types[index]__        if (u == t) {_            _            return false__        }_        if ((t & ~DIM) == NULL) {_            if (u == NULL) {_                return false__            }_            t = NULL__        }_        if (u == 0) {_            _            types[index] = t__            return true__        }_        int v__        if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {_            _            if (t == NULL) {_                _                return false__            } else if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {_                _                if ((u & BASE_KIND) == OBJECT) {_                    _                    _                    _                    v = (t & DIM) | OBJECT_                            | cw.getMergedType(t & BASE_VALUE, u & BASE_VALUE)__                } else {_                    _                    _                    int vdim = ELEMENT_OF + (u & DIM)__                    v = vdim | OBJECT | cw.addType("java/lang/Object")__                }_            } else if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {_                _                _                _                _                int tdim = (((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0_                        : ELEMENT_OF) + (t & DIM)__                int udim = (((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0_                        : ELEMENT_OF) + (u & DIM)__                v = Math.min(tdim, udim) | OBJECT_                        | cw.addType("java/lang/Object")__            } else {_                _                v = TOP__            }_        } else if (u == NULL) {_            _            _            v = (t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP__        } else {_            _            v = TOP__        }_        if (u != v) {_            types[index] = v__            return true__        }_        return false__    };merges,the,type,at,the,given,index,in,the,given,type,array,with,the,given,type,returns,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,t,the,type,with,which,the,type,array,element,must,be,merged,param,types,an,array,of,types,param,index,the,index,of,the,type,that,must,be,merged,in,types,return,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation;private,static,boolean,merge,final,class,writer,cw,int,t,final,int,types,final,int,index,int,u,types,index,if,u,t,return,false,if,t,dim,null,if,u,null,return,false,t,null,if,u,0,types,index,t,return,true,int,v,if,u,object,u,dim,0,if,t,null,return,false,else,if,t,dim,u,dim,if,u,object,v,t,dim,object,cw,get,merged,type,t,u,else,int,vdim,u,dim,v,vdim,object,cw,add,type,java,lang,object,else,if,t,object,t,dim,0,int,tdim,t,dim,0,t,object,0,t,dim,int,udim,u,dim,0,u,object,0,u,dim,v,math,min,tdim,udim,object,cw,add,type,java,lang,object,else,v,top,else,if,u,null,v,t,object,t,dim,0,t,top,else,v,top,if,u,v,types,index,v,return,true,return,false
Frame -> private static boolean merge(final ClassWriter cw, int t,             final int[] types, final int index);1483093254;Merges the type at the given index in the given type array with the given_type. Returns <tt>true</tt> if the type array has been modified by this_operation.__@param cw_the ClassWriter to which this label belongs._@param t_the type with which the type array element must be merged._@param types_an array of types._@param index_the index of the type that must be merged in 'types'._@return <tt>true</tt> if the type array has been modified by this_operation.;private static boolean merge(final ClassWriter cw, int t,_            final int[] types, final int index) {_        int u = types[index]__        if (u == t) {_            _            return false__        }_        if ((t & ~DIM) == NULL) {_            if (u == NULL) {_                return false__            }_            t = NULL__        }_        if (u == 0) {_            _            types[index] = t__            return true__        }_        int v__        if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {_            _            if (t == NULL) {_                _                return false__            } else if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {_                _                if ((u & BASE_KIND) == OBJECT) {_                    _                    _                    _                    v = (t & DIM) | OBJECT_                            | cw.getMergedType(t & BASE_VALUE, u & BASE_VALUE)__                } else {_                    _                    _                    int vdim = ELEMENT_OF + (u & DIM)__                    v = vdim | OBJECT | cw.addType("java/lang/Object")__                }_            } else if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {_                _                _                _                _                int tdim = (((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0_                        : ELEMENT_OF) + (t & DIM)__                int udim = (((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0_                        : ELEMENT_OF) + (u & DIM)__                v = Math.min(tdim, udim) | OBJECT_                        | cw.addType("java/lang/Object")__            } else {_                _                v = TOP__            }_        } else if (u == NULL) {_            _            _            v = (t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP__        } else {_            _            v = TOP__        }_        if (u != v) {_            types[index] = v__            return true__        }_        return false__    };merges,the,type,at,the,given,index,in,the,given,type,array,with,the,given,type,returns,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,t,the,type,with,which,the,type,array,element,must,be,merged,param,types,an,array,of,types,param,index,the,index,of,the,type,that,must,be,merged,in,types,return,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation;private,static,boolean,merge,final,class,writer,cw,int,t,final,int,types,final,int,index,int,u,types,index,if,u,t,return,false,if,t,dim,null,if,u,null,return,false,t,null,if,u,0,types,index,t,return,true,int,v,if,u,object,u,dim,0,if,t,null,return,false,else,if,t,dim,u,dim,if,u,object,v,t,dim,object,cw,get,merged,type,t,u,else,int,vdim,u,dim,v,vdim,object,cw,add,type,java,lang,object,else,if,t,object,t,dim,0,int,tdim,t,dim,0,t,object,0,t,dim,int,udim,u,dim,0,u,object,0,u,dim,v,math,min,tdim,udim,object,cw,add,type,java,lang,object,else,v,top,else,if,u,null,v,t,object,t,dim,0,t,top,else,v,top,if,u,v,types,index,v,return,true,return,false
Frame -> private int getInitializedType(final SymbolTable symbolTable, final int abstractType);1531241461;Returns the "initialized" abstract type corresponding to the given abstract type.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param abstractType an abstract type._@return the REFERENCE_KIND abstract type corresponding to abstractType if it is_UNINITIALIZED_THIS or an UNINITIALIZED_KIND abstract type for one of the types on which a_constructor is invoked in the basic block. Otherwise returns abstractType.;private int getInitializedType(final SymbolTable symbolTable, final int abstractType) {_    if (abstractType == UNINITIALIZED_THIS_        || (abstractType & (DIM_MASK | KIND_MASK)) == UNINITIALIZED_KIND) {_      for (int i = 0_ i < initializationCount_ ++i) {_        int initializedType = initializations[i]__        int dim = initializedType & DIM_MASK__        int kind = initializedType & KIND_MASK__        int value = initializedType & VALUE_MASK__        if (kind == LOCAL_KIND) {_          initializedType = dim + inputLocals[value]__        } else if (kind == STACK_KIND) {_          initializedType = dim + inputStack[inputStack.length - value]__        }_        if (abstractType == initializedType) {_          if (abstractType == UNINITIALIZED_THIS) {_            return REFERENCE_KIND | symbolTable.addType(symbolTable.getClassName())__          } else {_            return REFERENCE_KIND_                | symbolTable.addType(symbolTable.getType(abstractType & VALUE_MASK).value)__          }_        }_      }_    }_    return abstractType__  };returns,the,initialized,abstract,type,corresponding,to,the,given,abstract,type,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,abstract,type,an,abstract,type,return,the,abstract,type,corresponding,to,abstract,type,if,it,is,or,an,abstract,type,for,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,otherwise,returns,abstract,type;private,int,get,initialized,type,final,symbol,table,symbol,table,final,int,abstract,type,if,abstract,type,abstract,type,for,int,i,0,i,initialization,count,i,int,initialized,type,initializations,i,int,dim,initialized,type,int,kind,initialized,type,int,value,initialized,type,if,kind,initialized,type,dim,input,locals,value,else,if,kind,initialized,type,dim,input,stack,input,stack,length,value,if,abstract,type,initialized,type,if,abstract,type,return,symbol,table,add,type,symbol,table,get,class,name,else,return,symbol,table,add,type,symbol,table,get,type,abstract,type,value,return,abstract,type
Frame -> private int getInitializedType(final SymbolTable symbolTable, final int abstractType);1536664245;Returns the "initialized" abstract type corresponding to the given abstract type.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param abstractType an abstract type._@return the REFERENCE_KIND abstract type corresponding to abstractType if it is_UNINITIALIZED_THIS or an UNINITIALIZED_KIND abstract type for one of the types on which a_constructor is invoked in the basic block. Otherwise returns abstractType.;private int getInitializedType(final SymbolTable symbolTable, final int abstractType) {_    if (abstractType == UNINITIALIZED_THIS_        || (abstractType & (DIM_MASK | KIND_MASK)) == UNINITIALIZED_KIND) {_      for (int i = 0_ i < initializationCount_ ++i) {_        int initializedType = initializations[i]__        int dim = initializedType & DIM_MASK__        int kind = initializedType & KIND_MASK__        int value = initializedType & VALUE_MASK__        if (kind == LOCAL_KIND) {_          initializedType = dim + inputLocals[value]__        } else if (kind == STACK_KIND) {_          initializedType = dim + inputStack[inputStack.length - value]__        }_        if (abstractType == initializedType) {_          if (abstractType == UNINITIALIZED_THIS) {_            return REFERENCE_KIND | symbolTable.addType(symbolTable.getClassName())__          } else {_            return REFERENCE_KIND_                | symbolTable.addType(symbolTable.getType(abstractType & VALUE_MASK).value)__          }_        }_      }_    }_    return abstractType__  };returns,the,initialized,abstract,type,corresponding,to,the,given,abstract,type,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,abstract,type,an,abstract,type,return,the,abstract,type,corresponding,to,abstract,type,if,it,is,or,an,abstract,type,for,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,otherwise,returns,abstract,type;private,int,get,initialized,type,final,symbol,table,symbol,table,final,int,abstract,type,if,abstract,type,abstract,type,for,int,i,0,i,initialization,count,i,int,initialized,type,initializations,i,int,dim,initialized,type,int,kind,initialized,type,int,value,initialized,type,if,kind,initialized,type,dim,input,locals,value,else,if,kind,initialized,type,dim,input,stack,input,stack,length,value,if,abstract,type,initialized,type,if,abstract,type,return,symbol,table,add,type,symbol,table,get,class,name,else,return,symbol,table,add,type,symbol,table,get,type,abstract,type,value,return,abstract,type
Frame -> private int getInitializedType(final SymbolTable symbolTable, final int abstractType);1537204147;Returns the "initialized" abstract type corresponding to the given abstract type.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param abstractType an abstract type._@return the REFERENCE_KIND abstract type corresponding to abstractType if it is_UNINITIALIZED_THIS or an UNINITIALIZED_KIND abstract type for one of the types on which a_constructor is invoked in the basic block. Otherwise returns abstractType.;private int getInitializedType(final SymbolTable symbolTable, final int abstractType) {_    if (abstractType == UNINITIALIZED_THIS_        || (abstractType & (DIM_MASK | KIND_MASK)) == UNINITIALIZED_KIND) {_      for (int i = 0_ i < initializationCount_ ++i) {_        int initializedType = initializations[i]__        int dim = initializedType & DIM_MASK__        int kind = initializedType & KIND_MASK__        int value = initializedType & VALUE_MASK__        if (kind == LOCAL_KIND) {_          initializedType = dim + inputLocals[value]__        } else if (kind == STACK_KIND) {_          initializedType = dim + inputStack[inputStack.length - value]__        }_        if (abstractType == initializedType) {_          if (abstractType == UNINITIALIZED_THIS) {_            return REFERENCE_KIND | symbolTable.addType(symbolTable.getClassName())__          } else {_            return REFERENCE_KIND_                | symbolTable.addType(symbolTable.getType(abstractType & VALUE_MASK).value)__          }_        }_      }_    }_    return abstractType__  };returns,the,initialized,abstract,type,corresponding,to,the,given,abstract,type,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,abstract,type,an,abstract,type,return,the,abstract,type,corresponding,to,abstract,type,if,it,is,or,an,abstract,type,for,one,of,the,types,on,which,a,constructor,is,invoked,in,the,basic,block,otherwise,returns,abstract,type;private,int,get,initialized,type,final,symbol,table,symbol,table,final,int,abstract,type,if,abstract,type,abstract,type,for,int,i,0,i,initialization,count,i,int,initialized,type,initializations,i,int,dim,initialized,type,int,kind,initialized,type,int,value,initialized,type,if,kind,initialized,type,dim,input,locals,value,else,if,kind,initialized,type,dim,input,stack,input,stack,length,value,if,abstract,type,initialized,type,if,abstract,type,return,symbol,table,add,type,symbol,table,get,class,name,else,return,symbol,table,add,type,symbol,table,get,type,abstract,type,value,return,abstract,type
Frame -> private void init(final int var);1366718246;Adds a new type to the list of types on which a constructor is invoked in_the basic block.__@param var_a type on a which a constructor is invoked.;private void init(final int var) {_        _        if (initializations == null) {_            initializations = new int[2]__        }_        int n = initializations.length__        if (initializationCount >= n) {_            int[] t = new int[Math.max(initializationCount + 1, 2 * n)]__            System.arraycopy(initializations, 0, t, 0, n)__            initializations = t__        }_        _        initializations[initializationCount++] = var__    };adds,a,new,type,to,the,list,of,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,var,a,type,on,a,which,a,constructor,is,invoked;private,void,init,final,int,var,if,initializations,null,initializations,new,int,2,int,n,initializations,length,if,initialization,count,n,int,t,new,int,math,max,initialization,count,1,2,n,system,arraycopy,initializations,0,t,0,n,initializations,t,initializations,initialization,count,var
Frame -> private void init(final int var);1385423968;Adds a new type to the list of types on which a constructor is invoked in_the basic block.__@param var_a type on a which a constructor is invoked.;private void init(final int var) {_        _        if (initializations == null) {_            initializations = new int[2]__        }_        int n = initializations.length__        if (initializationCount >= n) {_            int[] t = new int[Math.max(initializationCount + 1, 2 * n)]__            System.arraycopy(initializations, 0, t, 0, n)__            initializations = t__        }_        _        initializations[initializationCount++] = var__    };adds,a,new,type,to,the,list,of,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,var,a,type,on,a,which,a,constructor,is,invoked;private,void,init,final,int,var,if,initializations,null,initializations,new,int,2,int,n,initializations,length,if,initialization,count,n,int,t,new,int,math,max,initialization,count,1,2,n,system,arraycopy,initializations,0,t,0,n,initializations,t,initializations,initialization,count,var
Frame -> private void init(final int var);1395273982;Adds a new type to the list of types on which a constructor is invoked in_the basic block.__@param var_a type on a which a constructor is invoked.;private void init(final int var) {_        _        if (initializations == null) {_            initializations = new int[2]__        }_        int n = initializations.length__        if (initializationCount >= n) {_            int[] t = new int[Math.max(initializationCount + 1, 2 * n)]__            System.arraycopy(initializations, 0, t, 0, n)__            initializations = t__        }_        _        initializations[initializationCount++] = var__    };adds,a,new,type,to,the,list,of,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,var,a,type,on,a,which,a,constructor,is,invoked;private,void,init,final,int,var,if,initializations,null,initializations,new,int,2,int,n,initializations,length,if,initialization,count,n,int,t,new,int,math,max,initialization,count,1,2,n,system,arraycopy,initializations,0,t,0,n,initializations,t,initializations,initialization,count,var
Frame -> private void init(final int var);1397644526;Adds a new type to the list of types on which a constructor is invoked in_the basic block.__@param var_a type on a which a constructor is invoked.;private void init(final int var) {_        _        if (initializations == null) {_            initializations = new int[2]__        }_        int n = initializations.length__        if (initializationCount >= n) {_            int[] t = new int[Math.max(initializationCount + 1, 2 * n)]__            System.arraycopy(initializations, 0, t, 0, n)__            initializations = t__        }_        _        initializations[initializationCount++] = var__    };adds,a,new,type,to,the,list,of,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,var,a,type,on,a,which,a,constructor,is,invoked;private,void,init,final,int,var,if,initializations,null,initializations,new,int,2,int,n,initializations,length,if,initialization,count,n,int,t,new,int,math,max,initialization,count,1,2,n,system,arraycopy,initializations,0,t,0,n,initializations,t,initializations,initialization,count,var
Frame -> private void init(final int var);1398255950;Adds a new type to the list of types on which a constructor is invoked in_the basic block.__@param var_a type on a which a constructor is invoked.;private void init(final int var) {_        _        if (initializations == null) {_            initializations = new int[2]__        }_        int n = initializations.length__        if (initializationCount >= n) {_            int[] t = new int[Math.max(initializationCount + 1, 2 * n)]__            System.arraycopy(initializations, 0, t, 0, n)__            initializations = t__        }_        _        initializations[initializationCount++] = var__    };adds,a,new,type,to,the,list,of,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,var,a,type,on,a,which,a,constructor,is,invoked;private,void,init,final,int,var,if,initializations,null,initializations,new,int,2,int,n,initializations,length,if,initialization,count,n,int,t,new,int,math,max,initialization,count,1,2,n,system,arraycopy,initializations,0,t,0,n,initializations,t,initializations,initialization,count,var
Frame -> private void init(final int var);1461047077;Adds a new type to the list of types on which a constructor is invoked in_the basic block.__@param var_a type on a which a constructor is invoked.;private void init(final int var) {_        _        if (initializations == null) {_            initializations = new int[2]__        }_        int n = initializations.length__        if (initializationCount >= n) {_            int[] t = new int[Math.max(initializationCount + 1, 2 * n)]__            System.arraycopy(initializations, 0, t, 0, n)__            initializations = t__        }_        _        initializations[initializationCount++] = var__    };adds,a,new,type,to,the,list,of,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,var,a,type,on,a,which,a,constructor,is,invoked;private,void,init,final,int,var,if,initializations,null,initializations,new,int,2,int,n,initializations,length,if,initialization,count,n,int,t,new,int,math,max,initialization,count,1,2,n,system,arraycopy,initializations,0,t,0,n,initializations,t,initializations,initialization,count,var
Frame -> private void init(final int var);1483093254;Adds a new type to the list of types on which a constructor is invoked in_the basic block.__@param var_a type on a which a constructor is invoked.;private void init(final int var) {_        _        if (initializations == null) {_            initializations = new int[2]__        }_        int n = initializations.length__        if (initializationCount >= n) {_            int[] t = new int[Math.max(initializationCount + 1, 2 * n)]__            System.arraycopy(initializations, 0, t, 0, n)__            initializations = t__        }_        _        initializations[initializationCount++] = var__    };adds,a,new,type,to,the,list,of,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,var,a,type,on,a,which,a,constructor,is,invoked;private,void,init,final,int,var,if,initializations,null,initializations,new,int,2,int,n,initializations,length,if,initialization,count,n,int,t,new,int,math,max,initialization,count,1,2,n,system,arraycopy,initializations,0,t,0,n,initializations,t,initializations,initialization,count,var
Frame -> private void push(final int type);1366718246;Pushes a new type onto the output frame stack.__@param type_the type that must be pushed.;private void push(final int type) {_        _        if (outputStack == null) {_            outputStack = new int[10]__        }_        int n = outputStack.length__        if (outputStackTop >= n) {_            int[] t = new int[Math.max(outputStackTop + 1, 2 * n)]__            System.arraycopy(outputStack, 0, t, 0, n)__            outputStack = t__        }_        _        outputStack[outputStackTop++] = type__        _        int top = owner.inputStackTop + outputStackTop__        if (top > owner.outputStackMax) {_            owner.outputStackMax = top__        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,type,the,type,that,must,be,pushed;private,void,push,final,int,type,if,output,stack,null,output,stack,new,int,10,int,n,output,stack,length,if,output,stack,top,n,int,t,new,int,math,max,output,stack,top,1,2,n,system,arraycopy,output,stack,0,t,0,n,output,stack,t,output,stack,output,stack,top,type,int,top,owner,input,stack,top,output,stack,top,if,top,owner,output,stack,max,owner,output,stack,max,top
Frame -> private void push(final int type);1385423968;Pushes a new type onto the output frame stack.__@param type_the type that must be pushed.;private void push(final int type) {_        _        if (outputStack == null) {_            outputStack = new int[10]__        }_        int n = outputStack.length__        if (outputStackTop >= n) {_            int[] t = new int[Math.max(outputStackTop + 1, 2 * n)]__            System.arraycopy(outputStack, 0, t, 0, n)__            outputStack = t__        }_        _        outputStack[outputStackTop++] = type__        _        int top = owner.inputStackTop + outputStackTop__        if (top > owner.outputStackMax) {_            owner.outputStackMax = top__        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,type,the,type,that,must,be,pushed;private,void,push,final,int,type,if,output,stack,null,output,stack,new,int,10,int,n,output,stack,length,if,output,stack,top,n,int,t,new,int,math,max,output,stack,top,1,2,n,system,arraycopy,output,stack,0,t,0,n,output,stack,t,output,stack,output,stack,top,type,int,top,owner,input,stack,top,output,stack,top,if,top,owner,output,stack,max,owner,output,stack,max,top
Frame -> private void push(final int type);1395273982;Pushes a new type onto the output frame stack.__@param type_the type that must be pushed.;private void push(final int type) {_        _        if (outputStack == null) {_            outputStack = new int[10]__        }_        int n = outputStack.length__        if (outputStackTop >= n) {_            int[] t = new int[Math.max(outputStackTop + 1, 2 * n)]__            System.arraycopy(outputStack, 0, t, 0, n)__            outputStack = t__        }_        _        outputStack[outputStackTop++] = type__        _        int top = owner.inputStackTop + outputStackTop__        if (top > owner.outputStackMax) {_            owner.outputStackMax = top__        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,type,the,type,that,must,be,pushed;private,void,push,final,int,type,if,output,stack,null,output,stack,new,int,10,int,n,output,stack,length,if,output,stack,top,n,int,t,new,int,math,max,output,stack,top,1,2,n,system,arraycopy,output,stack,0,t,0,n,output,stack,t,output,stack,output,stack,top,type,int,top,owner,input,stack,top,output,stack,top,if,top,owner,output,stack,max,owner,output,stack,max,top
Frame -> private void push(final int type);1397644526;Pushes a new type onto the output frame stack.__@param type_the type that must be pushed.;private void push(final int type) {_        _        if (outputStack == null) {_            outputStack = new int[10]__        }_        int n = outputStack.length__        if (outputStackTop >= n) {_            int[] t = new int[Math.max(outputStackTop + 1, 2 * n)]__            System.arraycopy(outputStack, 0, t, 0, n)__            outputStack = t__        }_        _        outputStack[outputStackTop++] = type__        _        int top = owner.inputStackTop + outputStackTop__        if (top > owner.outputStackMax) {_            owner.outputStackMax = top__        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,type,the,type,that,must,be,pushed;private,void,push,final,int,type,if,output,stack,null,output,stack,new,int,10,int,n,output,stack,length,if,output,stack,top,n,int,t,new,int,math,max,output,stack,top,1,2,n,system,arraycopy,output,stack,0,t,0,n,output,stack,t,output,stack,output,stack,top,type,int,top,owner,input,stack,top,output,stack,top,if,top,owner,output,stack,max,owner,output,stack,max,top
Frame -> private void push(final int type);1398255950;Pushes a new type onto the output frame stack.__@param type_the type that must be pushed.;private void push(final int type) {_        _        if (outputStack == null) {_            outputStack = new int[10]__        }_        int n = outputStack.length__        if (outputStackTop >= n) {_            int[] t = new int[Math.max(outputStackTop + 1, 2 * n)]__            System.arraycopy(outputStack, 0, t, 0, n)__            outputStack = t__        }_        _        outputStack[outputStackTop++] = type__        _        int top = owner.inputStackTop + outputStackTop__        if (top > owner.outputStackMax) {_            owner.outputStackMax = top__        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,type,the,type,that,must,be,pushed;private,void,push,final,int,type,if,output,stack,null,output,stack,new,int,10,int,n,output,stack,length,if,output,stack,top,n,int,t,new,int,math,max,output,stack,top,1,2,n,system,arraycopy,output,stack,0,t,0,n,output,stack,t,output,stack,output,stack,top,type,int,top,owner,input,stack,top,output,stack,top,if,top,owner,output,stack,max,owner,output,stack,max,top
Frame -> private void push(final int type);1461047077;Pushes a new type onto the output frame stack.__@param type_the type that must be pushed.;private void push(final int type) {_        _        if (outputStack == null) {_            outputStack = new int[10]__        }_        int n = outputStack.length__        if (outputStackTop >= n) {_            int[] t = new int[Math.max(outputStackTop + 1, 2 * n)]__            System.arraycopy(outputStack, 0, t, 0, n)__            outputStack = t__        }_        _        outputStack[outputStackTop++] = type__        _        int top = owner.inputStackTop + outputStackTop__        if (top > owner.outputStackMax) {_            owner.outputStackMax = top__        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,type,the,type,that,must,be,pushed;private,void,push,final,int,type,if,output,stack,null,output,stack,new,int,10,int,n,output,stack,length,if,output,stack,top,n,int,t,new,int,math,max,output,stack,top,1,2,n,system,arraycopy,output,stack,0,t,0,n,output,stack,t,output,stack,output,stack,top,type,int,top,owner,input,stack,top,output,stack,top,if,top,owner,output,stack,max,owner,output,stack,max,top
Frame -> private void push(final int type);1483093254;Pushes a new type onto the output frame stack.__@param type_the type that must be pushed.;private void push(final int type) {_        _        if (outputStack == null) {_            outputStack = new int[10]__        }_        int n = outputStack.length__        if (outputStackTop >= n) {_            int[] t = new int[Math.max(outputStackTop + 1, 2 * n)]__            System.arraycopy(outputStack, 0, t, 0, n)__            outputStack = t__        }_        _        outputStack[outputStackTop++] = type__        _        int top = owner.inputStackTop + outputStackTop__        if (top > owner.outputStackMax) {_            owner.outputStackMax = top__        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,type,the,type,that,must,be,pushed;private,void,push,final,int,type,if,output,stack,null,output,stack,new,int,10,int,n,output,stack,length,if,output,stack,top,n,int,t,new,int,math,max,output,stack,top,1,2,n,system,arraycopy,output,stack,0,t,0,n,output,stack,t,output,stack,output,stack,top,type,int,top,owner,input,stack,top,output,stack,top,if,top,owner,output,stack,max,owner,output,stack,max,top
Frame -> static void putAbstractType(       final SymbolTable symbolTable, final int abstractType, final ByteVector output);1531241461;Put the given abstract type in the given ByteVector, using the JVMS verification_type_info_format used in StackMapTable attributes.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param abstractType an abstract type, restricted to {@link Frame#CONSTANT_KIND}, {@link_Frame#REFERENCE_KIND} or {@link Frame#UNINITIALIZED_KIND} types._@param output where the abstract type must be put._@see <a href="https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.4">JVMS_4.7.4</a>;static void putAbstractType(_      final SymbolTable symbolTable, final int abstractType, final ByteVector output) {_    int arrayDimensions = (abstractType & Frame.DIM_MASK) >> DIM_SHIFT__    if (arrayDimensions == 0) {_      int typeValue = abstractType & VALUE_MASK__      switch (abstractType & KIND_MASK) {_        case CONSTANT_KIND:_          output.putByte(typeValue)__          break__        case REFERENCE_KIND:_          output_              .putByte(ITEM_OBJECT)_              .putShort(symbolTable.addConstantClass(symbolTable.getType(typeValue).value).index)__          break__        case UNINITIALIZED_KIND:_          output.putByte(ITEM_UNINITIALIZED).putShort((int) symbolTable.getType(typeValue).data)__          break__        default:_          throw new AssertionError()__      }_    } else {_      _      StringBuilder typeDescriptor = new StringBuilder()__      while (arrayDimensions-- > 0) {_        typeDescriptor.append('[')__      }_      if ((abstractType & KIND_MASK) == REFERENCE_KIND) {_        typeDescriptor_            .append('L')_            .append(symbolTable.getType(abstractType & VALUE_MASK).value)_            .append('_')__      } else {_        switch (abstractType & VALUE_MASK) {_          case Frame.ITEM_ASM_BOOLEAN:_            typeDescriptor.append('Z')__            break__          case Frame.ITEM_ASM_BYTE:_            typeDescriptor.append('B')__            break__          case Frame.ITEM_ASM_CHAR:_            typeDescriptor.append('C')__            break__          case Frame.ITEM_ASM_SHORT:_            typeDescriptor.append('S')__            break__          case Frame.ITEM_INTEGER:_            typeDescriptor.append('I')__            break__          case Frame.ITEM_FLOAT:_            typeDescriptor.append('F')__            break__          case Frame.ITEM_LONG:_            typeDescriptor.append('J')__            break__          case Frame.ITEM_DOUBLE:_            typeDescriptor.append('D')__            break__          default:_            throw new AssertionError()__        }_      }_      output_          .putByte(ITEM_OBJECT)_          .putShort(symbolTable.addConstantClass(typeDescriptor.toString()).index)__    }_  };put,the,given,abstract,type,in,the,given,byte,vector,using,the,jvms,format,used,in,stack,map,table,attributes,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,abstract,type,an,abstract,type,restricted,to,link,frame,link,frame,or,link,frame,types,param,output,where,the,abstract,type,must,be,put,see,a,href,https,docs,oracle,com,javase,specs,jvms,se9,html,jvms,4,html,jvms,4,7,4,jvms,4,7,4,a;static,void,put,abstract,type,final,symbol,table,symbol,table,final,int,abstract,type,final,byte,vector,output,int,array,dimensions,abstract,type,frame,if,array,dimensions,0,int,type,value,abstract,type,switch,abstract,type,case,output,put,byte,type,value,break,case,output,put,byte,put,short,symbol,table,add,constant,class,symbol,table,get,type,type,value,value,index,break,case,output,put,byte,put,short,int,symbol,table,get,type,type,value,data,break,default,throw,new,assertion,error,else,string,builder,type,descriptor,new,string,builder,while,array,dimensions,0,type,descriptor,append,if,abstract,type,type,descriptor,append,l,append,symbol,table,get,type,abstract,type,value,append,else,switch,abstract,type,case,frame,type,descriptor,append,z,break,case,frame,type,descriptor,append,b,break,case,frame,type,descriptor,append,c,break,case,frame,type,descriptor,append,s,break,case,frame,type,descriptor,append,i,break,case,frame,type,descriptor,append,f,break,case,frame,type,descriptor,append,j,break,case,frame,type,descriptor,append,d,break,default,throw,new,assertion,error,output,put,byte,put,short,symbol,table,add,constant,class,type,descriptor,to,string,index
Frame -> static void putAbstractType(       final SymbolTable symbolTable, final int abstractType, final ByteVector output);1536664245;Put the given abstract type in the given ByteVector, using the JVMS verification_type_info_format used in StackMapTable attributes.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param abstractType an abstract type, restricted to {@link Frame#CONSTANT_KIND}, {@link_Frame#REFERENCE_KIND} or {@link Frame#UNINITIALIZED_KIND} types._@param output where the abstract type must be put._@see <a href="https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.4">JVMS_4.7.4</a>;static void putAbstractType(_      final SymbolTable symbolTable, final int abstractType, final ByteVector output) {_    int arrayDimensions = (abstractType & Frame.DIM_MASK) >> DIM_SHIFT__    if (arrayDimensions == 0) {_      int typeValue = abstractType & VALUE_MASK__      switch (abstractType & KIND_MASK) {_        case CONSTANT_KIND:_          output.putByte(typeValue)__          break__        case REFERENCE_KIND:_          output_              .putByte(ITEM_OBJECT)_              .putShort(symbolTable.addConstantClass(symbolTable.getType(typeValue).value).index)__          break__        case UNINITIALIZED_KIND:_          output.putByte(ITEM_UNINITIALIZED).putShort((int) symbolTable.getType(typeValue).data)__          break__        default:_          throw new AssertionError()__      }_    } else {_      _      StringBuilder typeDescriptor = new StringBuilder()__      while (arrayDimensions-- > 0) {_        typeDescriptor.append('[')__      }_      if ((abstractType & KIND_MASK) == REFERENCE_KIND) {_        typeDescriptor_            .append('L')_            .append(symbolTable.getType(abstractType & VALUE_MASK).value)_            .append('_')__      } else {_        switch (abstractType & VALUE_MASK) {_          case Frame.ITEM_ASM_BOOLEAN:_            typeDescriptor.append('Z')__            break__          case Frame.ITEM_ASM_BYTE:_            typeDescriptor.append('B')__            break__          case Frame.ITEM_ASM_CHAR:_            typeDescriptor.append('C')__            break__          case Frame.ITEM_ASM_SHORT:_            typeDescriptor.append('S')__            break__          case Frame.ITEM_INTEGER:_            typeDescriptor.append('I')__            break__          case Frame.ITEM_FLOAT:_            typeDescriptor.append('F')__            break__          case Frame.ITEM_LONG:_            typeDescriptor.append('J')__            break__          case Frame.ITEM_DOUBLE:_            typeDescriptor.append('D')__            break__          default:_            throw new AssertionError()__        }_      }_      output_          .putByte(ITEM_OBJECT)_          .putShort(symbolTable.addConstantClass(typeDescriptor.toString()).index)__    }_  };put,the,given,abstract,type,in,the,given,byte,vector,using,the,jvms,format,used,in,stack,map,table,attributes,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,abstract,type,an,abstract,type,restricted,to,link,frame,link,frame,or,link,frame,types,param,output,where,the,abstract,type,must,be,put,see,a,href,https,docs,oracle,com,javase,specs,jvms,se9,html,jvms,4,html,jvms,4,7,4,jvms,4,7,4,a;static,void,put,abstract,type,final,symbol,table,symbol,table,final,int,abstract,type,final,byte,vector,output,int,array,dimensions,abstract,type,frame,if,array,dimensions,0,int,type,value,abstract,type,switch,abstract,type,case,output,put,byte,type,value,break,case,output,put,byte,put,short,symbol,table,add,constant,class,symbol,table,get,type,type,value,value,index,break,case,output,put,byte,put,short,int,symbol,table,get,type,type,value,data,break,default,throw,new,assertion,error,else,string,builder,type,descriptor,new,string,builder,while,array,dimensions,0,type,descriptor,append,if,abstract,type,type,descriptor,append,l,append,symbol,table,get,type,abstract,type,value,append,else,switch,abstract,type,case,frame,type,descriptor,append,z,break,case,frame,type,descriptor,append,b,break,case,frame,type,descriptor,append,c,break,case,frame,type,descriptor,append,s,break,case,frame,type,descriptor,append,i,break,case,frame,type,descriptor,append,f,break,case,frame,type,descriptor,append,j,break,case,frame,type,descriptor,append,d,break,default,throw,new,assertion,error,output,put,byte,put,short,symbol,table,add,constant,class,type,descriptor,to,string,index
Frame -> static void putAbstractType(       final SymbolTable symbolTable, final int abstractType, final ByteVector output);1537204147;Put the given abstract type in the given ByteVector, using the JVMS verification_type_info_format used in StackMapTable attributes.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param abstractType an abstract type, restricted to {@link Frame#CONSTANT_KIND}, {@link_Frame#REFERENCE_KIND} or {@link Frame#UNINITIALIZED_KIND} types._@param output where the abstract type must be put._@see <a href="https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.4">JVMS_4.7.4</a>;static void putAbstractType(_      final SymbolTable symbolTable, final int abstractType, final ByteVector output) {_    int arrayDimensions = (abstractType & Frame.DIM_MASK) >> DIM_SHIFT__    if (arrayDimensions == 0) {_      int typeValue = abstractType & VALUE_MASK__      switch (abstractType & KIND_MASK) {_        case CONSTANT_KIND:_          output.putByte(typeValue)__          break__        case REFERENCE_KIND:_          output_              .putByte(ITEM_OBJECT)_              .putShort(symbolTable.addConstantClass(symbolTable.getType(typeValue).value).index)__          break__        case UNINITIALIZED_KIND:_          output.putByte(ITEM_UNINITIALIZED).putShort((int) symbolTable.getType(typeValue).data)__          break__        default:_          throw new AssertionError()__      }_    } else {_      _      StringBuilder typeDescriptor = new StringBuilder()__      while (arrayDimensions-- > 0) {_        typeDescriptor.append('[')__      }_      if ((abstractType & KIND_MASK) == REFERENCE_KIND) {_        typeDescriptor_            .append('L')_            .append(symbolTable.getType(abstractType & VALUE_MASK).value)_            .append('_')__      } else {_        switch (abstractType & VALUE_MASK) {_          case Frame.ITEM_ASM_BOOLEAN:_            typeDescriptor.append('Z')__            break__          case Frame.ITEM_ASM_BYTE:_            typeDescriptor.append('B')__            break__          case Frame.ITEM_ASM_CHAR:_            typeDescriptor.append('C')__            break__          case Frame.ITEM_ASM_SHORT:_            typeDescriptor.append('S')__            break__          case Frame.ITEM_INTEGER:_            typeDescriptor.append('I')__            break__          case Frame.ITEM_FLOAT:_            typeDescriptor.append('F')__            break__          case Frame.ITEM_LONG:_            typeDescriptor.append('J')__            break__          case Frame.ITEM_DOUBLE:_            typeDescriptor.append('D')__            break__          default:_            throw new AssertionError()__        }_      }_      output_          .putByte(ITEM_OBJECT)_          .putShort(symbolTable.addConstantClass(typeDescriptor.toString()).index)__    }_  };put,the,given,abstract,type,in,the,given,byte,vector,using,the,jvms,format,used,in,stack,map,table,attributes,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,abstract,type,an,abstract,type,restricted,to,link,frame,link,frame,or,link,frame,types,param,output,where,the,abstract,type,must,be,put,see,a,href,https,docs,oracle,com,javase,specs,jvms,se9,html,jvms,4,html,jvms,4,7,4,jvms,4,7,4,a;static,void,put,abstract,type,final,symbol,table,symbol,table,final,int,abstract,type,final,byte,vector,output,int,array,dimensions,abstract,type,frame,if,array,dimensions,0,int,type,value,abstract,type,switch,abstract,type,case,output,put,byte,type,value,break,case,output,put,byte,put,short,symbol,table,add,constant,class,symbol,table,get,type,type,value,value,index,break,case,output,put,byte,put,short,int,symbol,table,get,type,type,value,data,break,default,throw,new,assertion,error,else,string,builder,type,descriptor,new,string,builder,while,array,dimensions,0,type,descriptor,append,if,abstract,type,type,descriptor,append,l,append,symbol,table,get,type,abstract,type,value,append,else,switch,abstract,type,case,frame,type,descriptor,append,z,break,case,frame,type,descriptor,append,b,break,case,frame,type,descriptor,append,c,break,case,frame,type,descriptor,append,s,break,case,frame,type,descriptor,append,i,break,case,frame,type,descriptor,append,f,break,case,frame,type,descriptor,append,j,break,case,frame,type,descriptor,append,d,break,default,throw,new,assertion,error,output,put,byte,put,short,symbol,table,add,constant,class,type,descriptor,to,string,index
Frame -> private static int type(final ClassWriter cw, final String desc);1366718246;Returns the int encoding of the given type.__@param cw_the ClassWriter to which this label belongs._@param desc_a type descriptor._@return the int encoding of the given type.;private static int type(final ClassWriter cw, final String desc) {_        String t__        int index = desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0__        switch (desc.charAt(index)) {_        case 'V':_            return 0__        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_            return INTEGER__        case 'F':_            return FLOAT__        case 'J':_            return LONG__        case 'D':_            return DOUBLE__        case 'L':_            _            t = desc.substring(index + 1, desc.length() - 1)__            return OBJECT | cw.addType(t)__            _        default:_            _            int data__            int dims = index + 1__            while (desc.charAt(dims) == '[') {_                ++dims__            }_            switch (desc.charAt(dims)) {_            case 'Z':_                data = BOOLEAN__                break__            case 'C':_                data = CHAR__                break__            case 'B':_                data = BYTE__                break__            case 'S':_                data = SHORT__                break__            case 'I':_                data = INTEGER__                break__            case 'F':_                data = FLOAT__                break__            case 'J':_                data = LONG__                break__            case 'D':_                data = DOUBLE__                break__            _            default:_                _                t = desc.substring(dims + 1, desc.length() - 1)__                data = OBJECT | cw.addType(t)__            }_            return (dims - index) << 28 | data__        }_    };returns,the,int,encoding,of,the,given,type,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,a,type,descriptor,return,the,int,encoding,of,the,given,type;private,static,int,type,final,class,writer,cw,final,string,desc,string,t,int,index,desc,char,at,0,desc,index,of,1,0,switch,desc,char,at,index,case,v,return,0,case,z,case,c,case,b,case,s,case,i,return,integer,case,f,return,float,case,j,return,long,case,d,return,double,case,l,t,desc,substring,index,1,desc,length,1,return,object,cw,add,type,t,default,int,data,int,dims,index,1,while,desc,char,at,dims,dims,switch,desc,char,at,dims,case,z,data,boolean,break,case,c,data,char,break,case,b,data,byte,break,case,s,data,short,break,case,i,data,integer,break,case,f,data,float,break,case,j,data,long,break,case,d,data,double,break,default,t,desc,substring,dims,1,desc,length,1,data,object,cw,add,type,t,return,dims,index,28,data
Frame -> private static int type(final ClassWriter cw, final String desc);1385423968;Returns the int encoding of the given type.__@param cw_the ClassWriter to which this label belongs._@param desc_a type descriptor._@return the int encoding of the given type.;private static int type(final ClassWriter cw, final String desc) {_        String t__        int index = desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0__        switch (desc.charAt(index)) {_        case 'V':_            return 0__        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_            return INTEGER__        case 'F':_            return FLOAT__        case 'J':_            return LONG__        case 'D':_            return DOUBLE__        case 'L':_            _            t = desc.substring(index + 1, desc.length() - 1)__            return OBJECT | cw.addType(t)__            _        default:_            _            int data__            int dims = index + 1__            while (desc.charAt(dims) == '[') {_                ++dims__            }_            switch (desc.charAt(dims)) {_            case 'Z':_                data = BOOLEAN__                break__            case 'C':_                data = CHAR__                break__            case 'B':_                data = BYTE__                break__            case 'S':_                data = SHORT__                break__            case 'I':_                data = INTEGER__                break__            case 'F':_                data = FLOAT__                break__            case 'J':_                data = LONG__                break__            case 'D':_                data = DOUBLE__                break__            _            default:_                _                t = desc.substring(dims + 1, desc.length() - 1)__                data = OBJECT | cw.addType(t)__            }_            return (dims - index) << 28 | data__        }_    };returns,the,int,encoding,of,the,given,type,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,a,type,descriptor,return,the,int,encoding,of,the,given,type;private,static,int,type,final,class,writer,cw,final,string,desc,string,t,int,index,desc,char,at,0,desc,index,of,1,0,switch,desc,char,at,index,case,v,return,0,case,z,case,c,case,b,case,s,case,i,return,integer,case,f,return,float,case,j,return,long,case,d,return,double,case,l,t,desc,substring,index,1,desc,length,1,return,object,cw,add,type,t,default,int,data,int,dims,index,1,while,desc,char,at,dims,dims,switch,desc,char,at,dims,case,z,data,boolean,break,case,c,data,char,break,case,b,data,byte,break,case,s,data,short,break,case,i,data,integer,break,case,f,data,float,break,case,j,data,long,break,case,d,data,double,break,default,t,desc,substring,dims,1,desc,length,1,data,object,cw,add,type,t,return,dims,index,28,data
Frame -> private static int type(final ClassWriter cw, final String desc);1395273982;Returns the int encoding of the given type.__@param cw_the ClassWriter to which this label belongs._@param desc_a type descriptor._@return the int encoding of the given type.;private static int type(final ClassWriter cw, final String desc) {_        String t__        int index = desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0__        switch (desc.charAt(index)) {_        case 'V':_            return 0__        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_            return INTEGER__        case 'F':_            return FLOAT__        case 'J':_            return LONG__        case 'D':_            return DOUBLE__        case 'L':_            _            t = desc.substring(index + 1, desc.length() - 1)__            return OBJECT | cw.addType(t)__            _        default:_            _            int data__            int dims = index + 1__            while (desc.charAt(dims) == '[') {_                ++dims__            }_            switch (desc.charAt(dims)) {_            case 'Z':_                data = BOOLEAN__                break__            case 'C':_                data = CHAR__                break__            case 'B':_                data = BYTE__                break__            case 'S':_                data = SHORT__                break__            case 'I':_                data = INTEGER__                break__            case 'F':_                data = FLOAT__                break__            case 'J':_                data = LONG__                break__            case 'D':_                data = DOUBLE__                break__            _            default:_                _                t = desc.substring(dims + 1, desc.length() - 1)__                data = OBJECT | cw.addType(t)__            }_            return (dims - index) << 28 | data__        }_    };returns,the,int,encoding,of,the,given,type,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,a,type,descriptor,return,the,int,encoding,of,the,given,type;private,static,int,type,final,class,writer,cw,final,string,desc,string,t,int,index,desc,char,at,0,desc,index,of,1,0,switch,desc,char,at,index,case,v,return,0,case,z,case,c,case,b,case,s,case,i,return,integer,case,f,return,float,case,j,return,long,case,d,return,double,case,l,t,desc,substring,index,1,desc,length,1,return,object,cw,add,type,t,default,int,data,int,dims,index,1,while,desc,char,at,dims,dims,switch,desc,char,at,dims,case,z,data,boolean,break,case,c,data,char,break,case,b,data,byte,break,case,s,data,short,break,case,i,data,integer,break,case,f,data,float,break,case,j,data,long,break,case,d,data,double,break,default,t,desc,substring,dims,1,desc,length,1,data,object,cw,add,type,t,return,dims,index,28,data
Frame -> private static int type(final ClassWriter cw, final String desc);1397644526;Returns the int encoding of the given type.__@param cw_the ClassWriter to which this label belongs._@param desc_a type descriptor._@return the int encoding of the given type.;private static int type(final ClassWriter cw, final String desc) {_        String t__        int index = desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0__        switch (desc.charAt(index)) {_        case 'V':_            return 0__        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_            return INTEGER__        case 'F':_            return FLOAT__        case 'J':_            return LONG__        case 'D':_            return DOUBLE__        case 'L':_            _            t = desc.substring(index + 1, desc.length() - 1)__            return OBJECT | cw.addType(t)__            _        default:_            _            int data__            int dims = index + 1__            while (desc.charAt(dims) == '[') {_                ++dims__            }_            switch (desc.charAt(dims)) {_            case 'Z':_                data = BOOLEAN__                break__            case 'C':_                data = CHAR__                break__            case 'B':_                data = BYTE__                break__            case 'S':_                data = SHORT__                break__            case 'I':_                data = INTEGER__                break__            case 'F':_                data = FLOAT__                break__            case 'J':_                data = LONG__                break__            case 'D':_                data = DOUBLE__                break__            _            default:_                _                t = desc.substring(dims + 1, desc.length() - 1)__                data = OBJECT | cw.addType(t)__            }_            return (dims - index) << 28 | data__        }_    };returns,the,int,encoding,of,the,given,type,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,a,type,descriptor,return,the,int,encoding,of,the,given,type;private,static,int,type,final,class,writer,cw,final,string,desc,string,t,int,index,desc,char,at,0,desc,index,of,1,0,switch,desc,char,at,index,case,v,return,0,case,z,case,c,case,b,case,s,case,i,return,integer,case,f,return,float,case,j,return,long,case,d,return,double,case,l,t,desc,substring,index,1,desc,length,1,return,object,cw,add,type,t,default,int,data,int,dims,index,1,while,desc,char,at,dims,dims,switch,desc,char,at,dims,case,z,data,boolean,break,case,c,data,char,break,case,b,data,byte,break,case,s,data,short,break,case,i,data,integer,break,case,f,data,float,break,case,j,data,long,break,case,d,data,double,break,default,t,desc,substring,dims,1,desc,length,1,data,object,cw,add,type,t,return,dims,index,28,data
Frame -> private static int type(final ClassWriter cw, final String desc);1398255950;Returns the int encoding of the given type.__@param cw_the ClassWriter to which this label belongs._@param desc_a type descriptor._@return the int encoding of the given type.;private static int type(final ClassWriter cw, final String desc) {_        String t__        int index = desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0__        switch (desc.charAt(index)) {_        case 'V':_            return 0__        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_            return INTEGER__        case 'F':_            return FLOAT__        case 'J':_            return LONG__        case 'D':_            return DOUBLE__        case 'L':_            _            t = desc.substring(index + 1, desc.length() - 1)__            return OBJECT | cw.addType(t)__            _        default:_            _            int data__            int dims = index + 1__            while (desc.charAt(dims) == '[') {_                ++dims__            }_            switch (desc.charAt(dims)) {_            case 'Z':_                data = BOOLEAN__                break__            case 'C':_                data = CHAR__                break__            case 'B':_                data = BYTE__                break__            case 'S':_                data = SHORT__                break__            case 'I':_                data = INTEGER__                break__            case 'F':_                data = FLOAT__                break__            case 'J':_                data = LONG__                break__            case 'D':_                data = DOUBLE__                break__            _            default:_                _                t = desc.substring(dims + 1, desc.length() - 1)__                data = OBJECT | cw.addType(t)__            }_            return (dims - index) << 28 | data__        }_    };returns,the,int,encoding,of,the,given,type,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,a,type,descriptor,return,the,int,encoding,of,the,given,type;private,static,int,type,final,class,writer,cw,final,string,desc,string,t,int,index,desc,char,at,0,desc,index,of,1,0,switch,desc,char,at,index,case,v,return,0,case,z,case,c,case,b,case,s,case,i,return,integer,case,f,return,float,case,j,return,long,case,d,return,double,case,l,t,desc,substring,index,1,desc,length,1,return,object,cw,add,type,t,default,int,data,int,dims,index,1,while,desc,char,at,dims,dims,switch,desc,char,at,dims,case,z,data,boolean,break,case,c,data,char,break,case,b,data,byte,break,case,s,data,short,break,case,i,data,integer,break,case,f,data,float,break,case,j,data,long,break,case,d,data,double,break,default,t,desc,substring,dims,1,desc,length,1,data,object,cw,add,type,t,return,dims,index,28,data
Frame -> private static int type(final ClassWriter cw, final String desc);1461047077;Returns the int encoding of the given type.__@param cw_the ClassWriter to which this label belongs._@param desc_a type descriptor._@return the int encoding of the given type.;private static int type(final ClassWriter cw, final String desc) {_        String t__        int index = desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0__        switch (desc.charAt(index)) {_        case 'V':_            return 0__        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_            return INTEGER__        case 'F':_            return FLOAT__        case 'J':_            return LONG__        case 'D':_            return DOUBLE__        case 'L':_            _            t = desc.substring(index + 1, desc.length() - 1)__            return OBJECT | cw.addType(t)__            _        default:_            _            int data__            int dims = index + 1__            while (desc.charAt(dims) == '[') {_                ++dims__            }_            switch (desc.charAt(dims)) {_            case 'Z':_                data = BOOLEAN__                break__            case 'C':_                data = CHAR__                break__            case 'B':_                data = BYTE__                break__            case 'S':_                data = SHORT__                break__            case 'I':_                data = INTEGER__                break__            case 'F':_                data = FLOAT__                break__            case 'J':_                data = LONG__                break__            case 'D':_                data = DOUBLE__                break__            _            default:_                _                t = desc.substring(dims + 1, desc.length() - 1)__                data = OBJECT | cw.addType(t)__            }_            return (dims - index) << 28 | data__        }_    };returns,the,int,encoding,of,the,given,type,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,a,type,descriptor,return,the,int,encoding,of,the,given,type;private,static,int,type,final,class,writer,cw,final,string,desc,string,t,int,index,desc,char,at,0,desc,index,of,1,0,switch,desc,char,at,index,case,v,return,0,case,z,case,c,case,b,case,s,case,i,return,integer,case,f,return,float,case,j,return,long,case,d,return,double,case,l,t,desc,substring,index,1,desc,length,1,return,object,cw,add,type,t,default,int,data,int,dims,index,1,while,desc,char,at,dims,dims,switch,desc,char,at,dims,case,z,data,boolean,break,case,c,data,char,break,case,b,data,byte,break,case,s,data,short,break,case,i,data,integer,break,case,f,data,float,break,case,j,data,long,break,case,d,data,double,break,default,t,desc,substring,dims,1,desc,length,1,data,object,cw,add,type,t,return,dims,index,28,data
Frame -> private static int type(final ClassWriter cw, final String desc);1483093254;Returns the int encoding of the given type.__@param cw_the ClassWriter to which this label belongs._@param desc_a type descriptor._@return the int encoding of the given type.;private static int type(final ClassWriter cw, final String desc) {_        String t__        int index = desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0__        switch (desc.charAt(index)) {_        case 'V':_            return 0__        case 'Z':_        case 'C':_        case 'B':_        case 'S':_        case 'I':_            return INTEGER__        case 'F':_            return FLOAT__        case 'J':_            return LONG__        case 'D':_            return DOUBLE__        case 'L':_            _            t = desc.substring(index + 1, desc.length() - 1)__            return OBJECT | cw.addType(t)__            _        default:_            _            int data__            int dims = index + 1__            while (desc.charAt(dims) == '[') {_                ++dims__            }_            switch (desc.charAt(dims)) {_            case 'Z':_                data = BOOLEAN__                break__            case 'C':_                data = CHAR__                break__            case 'B':_                data = BYTE__                break__            case 'S':_                data = SHORT__                break__            case 'I':_                data = INTEGER__                break__            case 'F':_                data = FLOAT__                break__            case 'J':_                data = LONG__                break__            case 'D':_                data = DOUBLE__                break__            _            default:_                _                t = desc.substring(dims + 1, desc.length() - 1)__                data = OBJECT | cw.addType(t)__            }_            return (dims - index) << 28 | data__        }_    };returns,the,int,encoding,of,the,given,type,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,a,type,descriptor,return,the,int,encoding,of,the,given,type;private,static,int,type,final,class,writer,cw,final,string,desc,string,t,int,index,desc,char,at,0,desc,index,of,1,0,switch,desc,char,at,index,case,v,return,0,case,z,case,c,case,b,case,s,case,i,return,integer,case,f,return,float,case,j,return,long,case,d,return,double,case,l,t,desc,substring,index,1,desc,length,1,return,object,cw,add,type,t,default,int,data,int,dims,index,1,while,desc,char,at,dims,dims,switch,desc,char,at,dims,case,z,data,boolean,break,case,c,data,char,break,case,b,data,byte,break,case,s,data,short,break,case,i,data,integer,break,case,f,data,float,break,case,j,data,long,break,case,d,data,double,break,default,t,desc,substring,dims,1,desc,length,1,data,object,cw,add,type,t,return,dims,index,28,data
Frame -> final void setInputFrameFromDescriptor(       final SymbolTable symbolTable,       final int access,       final String descriptor,       final int maxLocals);1531241461;Sets the input frame from the given method description. This method is used to initialize the_first frame of a method, which is implicit (i.e. not stored explicitly in the StackMapTable_attribute).__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param access the method's access flags._@param descriptor the method descriptor._@param maxLocals the maximum number of local variables of the method.;final void setInputFrameFromDescriptor(_      final SymbolTable symbolTable,_      final int access,_      final String descriptor,_      final int maxLocals) {_    inputLocals = new int[maxLocals]__    inputStack = new int[0]__    int inputLocalIndex = 0__    if ((access & Opcodes.ACC_STATIC) == 0) {_      if ((access & Constants.ACC_CONSTRUCTOR) == 0) {_        inputLocals[inputLocalIndex++] =_            REFERENCE_KIND | symbolTable.addType(symbolTable.getClassName())__      } else {_        inputLocals[inputLocalIndex++] = UNINITIALIZED_THIS__      }_    }_    for (Type argumentType : Type.getArgumentTypes(descriptor)) {_      int abstractType =_          getAbstractTypeFromDescriptor(symbolTable, argumentType.getDescriptor(), 0)__      inputLocals[inputLocalIndex++] = abstractType__      if (abstractType == LONG || abstractType == DOUBLE) {_        inputLocals[inputLocalIndex++] = TOP__      }_    }_    while (inputLocalIndex < maxLocals) {_      inputLocals[inputLocalIndex++] = TOP__    }_  };sets,the,input,frame,from,the,given,method,description,this,method,is,used,to,initialize,the,first,frame,of,a,method,which,is,implicit,i,e,not,stored,explicitly,in,the,stack,map,table,attribute,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,access,the,method,s,access,flags,param,descriptor,the,method,descriptor,param,max,locals,the,maximum,number,of,local,variables,of,the,method;final,void,set,input,frame,from,descriptor,final,symbol,table,symbol,table,final,int,access,final,string,descriptor,final,int,max,locals,input,locals,new,int,max,locals,input,stack,new,int,0,int,input,local,index,0,if,access,opcodes,0,if,access,constants,0,input,locals,input,local,index,symbol,table,add,type,symbol,table,get,class,name,else,input,locals,input,local,index,for,type,argument,type,type,get,argument,types,descriptor,int,abstract,type,get,abstract,type,from,descriptor,symbol,table,argument,type,get,descriptor,0,input,locals,input,local,index,abstract,type,if,abstract,type,long,abstract,type,double,input,locals,input,local,index,top,while,input,local,index,max,locals,input,locals,input,local,index,top
Frame -> final void setInputFrameFromDescriptor(       final SymbolTable symbolTable,       final int access,       final String descriptor,       final int maxLocals);1536664245;Sets the input frame from the given method description. This method is used to initialize the_first frame of a method, which is implicit (i.e. not stored explicitly in the StackMapTable_attribute).__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param access the method's access flags._@param descriptor the method descriptor._@param maxLocals the maximum number of local variables of the method.;final void setInputFrameFromDescriptor(_      final SymbolTable symbolTable,_      final int access,_      final String descriptor,_      final int maxLocals) {_    inputLocals = new int[maxLocals]__    inputStack = new int[0]__    int inputLocalIndex = 0__    if ((access & Opcodes.ACC_STATIC) == 0) {_      if ((access & Constants.ACC_CONSTRUCTOR) == 0) {_        inputLocals[inputLocalIndex++] =_            REFERENCE_KIND | symbolTable.addType(symbolTable.getClassName())__      } else {_        inputLocals[inputLocalIndex++] = UNINITIALIZED_THIS__      }_    }_    for (Type argumentType : Type.getArgumentTypes(descriptor)) {_      int abstractType =_          getAbstractTypeFromDescriptor(symbolTable, argumentType.getDescriptor(), 0)__      inputLocals[inputLocalIndex++] = abstractType__      if (abstractType == LONG || abstractType == DOUBLE) {_        inputLocals[inputLocalIndex++] = TOP__      }_    }_    while (inputLocalIndex < maxLocals) {_      inputLocals[inputLocalIndex++] = TOP__    }_  };sets,the,input,frame,from,the,given,method,description,this,method,is,used,to,initialize,the,first,frame,of,a,method,which,is,implicit,i,e,not,stored,explicitly,in,the,stack,map,table,attribute,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,access,the,method,s,access,flags,param,descriptor,the,method,descriptor,param,max,locals,the,maximum,number,of,local,variables,of,the,method;final,void,set,input,frame,from,descriptor,final,symbol,table,symbol,table,final,int,access,final,string,descriptor,final,int,max,locals,input,locals,new,int,max,locals,input,stack,new,int,0,int,input,local,index,0,if,access,opcodes,0,if,access,constants,0,input,locals,input,local,index,symbol,table,add,type,symbol,table,get,class,name,else,input,locals,input,local,index,for,type,argument,type,type,get,argument,types,descriptor,int,abstract,type,get,abstract,type,from,descriptor,symbol,table,argument,type,get,descriptor,0,input,locals,input,local,index,abstract,type,if,abstract,type,long,abstract,type,double,input,locals,input,local,index,top,while,input,local,index,max,locals,input,locals,input,local,index,top
Frame -> final void setInputFrameFromDescriptor(       final SymbolTable symbolTable,       final int access,       final String descriptor,       final int maxLocals);1537204147;Sets the input frame from the given method description. This method is used to initialize the_first frame of a method, which is implicit (i.e. not stored explicitly in the StackMapTable_attribute).__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param access the method's access flags._@param descriptor the method descriptor._@param maxLocals the maximum number of local variables of the method.;final void setInputFrameFromDescriptor(_      final SymbolTable symbolTable,_      final int access,_      final String descriptor,_      final int maxLocals) {_    inputLocals = new int[maxLocals]__    inputStack = new int[0]__    int inputLocalIndex = 0__    if ((access & Opcodes.ACC_STATIC) == 0) {_      if ((access & Constants.ACC_CONSTRUCTOR) == 0) {_        inputLocals[inputLocalIndex++] =_            REFERENCE_KIND | symbolTable.addType(symbolTable.getClassName())__      } else {_        inputLocals[inputLocalIndex++] = UNINITIALIZED_THIS__      }_    }_    for (Type argumentType : Type.getArgumentTypes(descriptor)) {_      int abstractType =_          getAbstractTypeFromDescriptor(symbolTable, argumentType.getDescriptor(), 0)__      inputLocals[inputLocalIndex++] = abstractType__      if (abstractType == LONG || abstractType == DOUBLE) {_        inputLocals[inputLocalIndex++] = TOP__      }_    }_    while (inputLocalIndex < maxLocals) {_      inputLocals[inputLocalIndex++] = TOP__    }_  };sets,the,input,frame,from,the,given,method,description,this,method,is,used,to,initialize,the,first,frame,of,a,method,which,is,implicit,i,e,not,stored,explicitly,in,the,stack,map,table,attribute,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,access,the,method,s,access,flags,param,descriptor,the,method,descriptor,param,max,locals,the,maximum,number,of,local,variables,of,the,method;final,void,set,input,frame,from,descriptor,final,symbol,table,symbol,table,final,int,access,final,string,descriptor,final,int,max,locals,input,locals,new,int,max,locals,input,stack,new,int,0,int,input,local,index,0,if,access,opcodes,0,if,access,constants,0,input,locals,input,local,index,symbol,table,add,type,symbol,table,get,class,name,else,input,locals,input,local,index,for,type,argument,type,type,get,argument,types,descriptor,int,abstract,type,get,abstract,type,from,descriptor,symbol,table,argument,type,get,descriptor,0,input,locals,input,local,index,abstract,type,if,abstract,type,long,abstract,type,double,input,locals,input,local,index,top,while,input,local,index,max,locals,input,locals,input,local,index,top
Frame -> private int get(final int local);1366718246;Returns the output frame local variable type at the given index.__@param local_the index of the local that must be returned._@return the output frame local variable type at the given index.;private int get(final int local) {_        if (outputLocals == null || local >= outputLocals.length) {_            _            _            return LOCAL | local__        } else {_            int type = outputLocals[local]__            if (type == 0) {_                _                _                type = outputLocals[local] = LOCAL | local__            }_            return type__        }_    };returns,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,returned,return,the,output,frame,local,variable,type,at,the,given,index;private,int,get,final,int,local,if,output,locals,null,local,output,locals,length,return,local,local,else,int,type,output,locals,local,if,type,0,type,output,locals,local,local,local,return,type
Frame -> private int get(final int local);1385423968;Returns the output frame local variable type at the given index.__@param local_the index of the local that must be returned._@return the output frame local variable type at the given index.;private int get(final int local) {_        if (outputLocals == null || local >= outputLocals.length) {_            _            _            return LOCAL | local__        } else {_            int type = outputLocals[local]__            if (type == 0) {_                _                _                type = outputLocals[local] = LOCAL | local__            }_            return type__        }_    };returns,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,returned,return,the,output,frame,local,variable,type,at,the,given,index;private,int,get,final,int,local,if,output,locals,null,local,output,locals,length,return,local,local,else,int,type,output,locals,local,if,type,0,type,output,locals,local,local,local,return,type
Frame -> private int get(final int local);1395273982;Returns the output frame local variable type at the given index.__@param local_the index of the local that must be returned._@return the output frame local variable type at the given index.;private int get(final int local) {_        if (outputLocals == null || local >= outputLocals.length) {_            _            _            return LOCAL | local__        } else {_            int type = outputLocals[local]__            if (type == 0) {_                _                _                type = outputLocals[local] = LOCAL | local__            }_            return type__        }_    };returns,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,returned,return,the,output,frame,local,variable,type,at,the,given,index;private,int,get,final,int,local,if,output,locals,null,local,output,locals,length,return,local,local,else,int,type,output,locals,local,if,type,0,type,output,locals,local,local,local,return,type
Frame -> private int get(final int local);1397644526;Returns the output frame local variable type at the given index.__@param local_the index of the local that must be returned._@return the output frame local variable type at the given index.;private int get(final int local) {_        if (outputLocals == null || local >= outputLocals.length) {_            _            _            return LOCAL | local__        } else {_            int type = outputLocals[local]__            if (type == 0) {_                _                _                type = outputLocals[local] = LOCAL | local__            }_            return type__        }_    };returns,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,returned,return,the,output,frame,local,variable,type,at,the,given,index;private,int,get,final,int,local,if,output,locals,null,local,output,locals,length,return,local,local,else,int,type,output,locals,local,if,type,0,type,output,locals,local,local,local,return,type
Frame -> private int get(final int local);1398255950;Returns the output frame local variable type at the given index.__@param local_the index of the local that must be returned._@return the output frame local variable type at the given index.;private int get(final int local) {_        if (outputLocals == null || local >= outputLocals.length) {_            _            _            return LOCAL | local__        } else {_            int type = outputLocals[local]__            if (type == 0) {_                _                _                type = outputLocals[local] = LOCAL | local__            }_            return type__        }_    };returns,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,returned,return,the,output,frame,local,variable,type,at,the,given,index;private,int,get,final,int,local,if,output,locals,null,local,output,locals,length,return,local,local,else,int,type,output,locals,local,if,type,0,type,output,locals,local,local,local,return,type
Frame -> private int get(final int local);1461047077;Returns the output frame local variable type at the given index.__@param local_the index of the local that must be returned._@return the output frame local variable type at the given index.;private int get(final int local) {_        if (outputLocals == null || local >= outputLocals.length) {_            _            _            return LOCAL | local__        } else {_            int type = outputLocals[local]__            if (type == 0) {_                _                _                type = outputLocals[local] = LOCAL | local__            }_            return type__        }_    };returns,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,returned,return,the,output,frame,local,variable,type,at,the,given,index;private,int,get,final,int,local,if,output,locals,null,local,output,locals,length,return,local,local,else,int,type,output,locals,local,if,type,0,type,output,locals,local,local,local,return,type
Frame -> private int get(final int local);1483093254;Returns the output frame local variable type at the given index.__@param local_the index of the local that must be returned._@return the output frame local variable type at the given index.;private int get(final int local) {_        if (outputLocals == null || local >= outputLocals.length) {_            _            _            return LOCAL | local__        } else {_            int type = outputLocals[local]__            if (type == 0) {_                _                _                type = outputLocals[local] = LOCAL | local__            }_            return type__        }_    };returns,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,returned,return,the,output,frame,local,variable,type,at,the,given,index;private,int,get,final,int,local,if,output,locals,null,local,output,locals,length,return,local,local,else,int,type,output,locals,local,if,type,0,type,output,locals,local,local,local,return,type
Frame -> static int getAbstractTypeFromInternalName(       final SymbolTable symbolTable, final String internalName);1531241461;Returns the abstract type corresponding to the internal name of a class.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param internalName the internal name of a class. This must <i>not</i> be an array type_descriptor._@return the abstract type value corresponding to the given internal name.;static int getAbstractTypeFromInternalName(_      final SymbolTable symbolTable, final String internalName) {_    return REFERENCE_KIND | symbolTable.addType(internalName)__  };returns,the,abstract,type,corresponding,to,the,internal,name,of,a,class,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,internal,name,the,internal,name,of,a,class,this,must,i,not,i,be,an,array,type,descriptor,return,the,abstract,type,value,corresponding,to,the,given,internal,name;static,int,get,abstract,type,from,internal,name,final,symbol,table,symbol,table,final,string,internal,name,return,symbol,table,add,type,internal,name
Frame -> static int getAbstractTypeFromInternalName(       final SymbolTable symbolTable, final String internalName);1536664245;Returns the abstract type corresponding to the internal name of a class.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param internalName the internal name of a class. This must <i>not</i> be an array type_descriptor._@return the abstract type value corresponding to the given internal name.;static int getAbstractTypeFromInternalName(_      final SymbolTable symbolTable, final String internalName) {_    return REFERENCE_KIND | symbolTable.addType(internalName)__  };returns,the,abstract,type,corresponding,to,the,internal,name,of,a,class,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,internal,name,the,internal,name,of,a,class,this,must,i,not,i,be,an,array,type,descriptor,return,the,abstract,type,value,corresponding,to,the,given,internal,name;static,int,get,abstract,type,from,internal,name,final,symbol,table,symbol,table,final,string,internal,name,return,symbol,table,add,type,internal,name
Frame -> static int getAbstractTypeFromInternalName(       final SymbolTable symbolTable, final String internalName);1537204147;Returns the abstract type corresponding to the internal name of a class.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param internalName the internal name of a class. This must <i>not</i> be an array type_descriptor._@return the abstract type value corresponding to the given internal name.;static int getAbstractTypeFromInternalName(_      final SymbolTable symbolTable, final String internalName) {_    return REFERENCE_KIND | symbolTable.addType(internalName)__  };returns,the,abstract,type,corresponding,to,the,internal,name,of,a,class,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,internal,name,the,internal,name,of,a,class,this,must,i,not,i,be,an,array,type,descriptor,return,the,abstract,type,value,corresponding,to,the,given,internal,name;static,int,get,abstract,type,from,internal,name,final,symbol,table,symbol,table,final,string,internal,name,return,symbol,table,add,type,internal,name
Frame -> private void addInitializedType(final int abstractType);1531241461;Adds an abstract type to the list of types on which a constructor is invoked in the basic_block.__@param abstractType an abstract type on a which a constructor is invoked.;private void addInitializedType(final int abstractType) {_    _    if (initializations == null) {_      initializations = new int[2]__    }_    int initializationsLength = initializations.length__    if (initializationCount >= initializationsLength) {_      int[] newInitializations =_          new int[Math.max(initializationCount + 1, 2 * initializationsLength)]__      System.arraycopy(initializations, 0, newInitializations, 0, initializationsLength)__      initializations = newInitializations__    }_    _    initializations[initializationCount++] = abstractType__  };adds,an,abstract,type,to,the,list,of,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,abstract,type,an,abstract,type,on,a,which,a,constructor,is,invoked;private,void,add,initialized,type,final,int,abstract,type,if,initializations,null,initializations,new,int,2,int,initializations,length,initializations,length,if,initialization,count,initializations,length,int,new,initializations,new,int,math,max,initialization,count,1,2,initializations,length,system,arraycopy,initializations,0,new,initializations,0,initializations,length,initializations,new,initializations,initializations,initialization,count,abstract,type
Frame -> private void addInitializedType(final int abstractType);1536664245;Adds an abstract type to the list of types on which a constructor is invoked in the basic_block.__@param abstractType an abstract type on a which a constructor is invoked.;private void addInitializedType(final int abstractType) {_    _    if (initializations == null) {_      initializations = new int[2]__    }_    int initializationsLength = initializations.length__    if (initializationCount >= initializationsLength) {_      int[] newInitializations =_          new int[Math.max(initializationCount + 1, 2 * initializationsLength)]__      System.arraycopy(initializations, 0, newInitializations, 0, initializationsLength)__      initializations = newInitializations__    }_    _    initializations[initializationCount++] = abstractType__  };adds,an,abstract,type,to,the,list,of,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,abstract,type,an,abstract,type,on,a,which,a,constructor,is,invoked;private,void,add,initialized,type,final,int,abstract,type,if,initializations,null,initializations,new,int,2,int,initializations,length,initializations,length,if,initialization,count,initializations,length,int,new,initializations,new,int,math,max,initialization,count,1,2,initializations,length,system,arraycopy,initializations,0,new,initializations,0,initializations,length,initializations,new,initializations,initializations,initialization,count,abstract,type
Frame -> private void addInitializedType(final int abstractType);1537204147;Adds an abstract type to the list of types on which a constructor is invoked in the basic_block.__@param abstractType an abstract type on a which a constructor is invoked.;private void addInitializedType(final int abstractType) {_    _    if (initializations == null) {_      initializations = new int[2]__    }_    int initializationsLength = initializations.length__    if (initializationCount >= initializationsLength) {_      int[] newInitializations =_          new int[Math.max(initializationCount + 1, 2 * initializationsLength)]__      System.arraycopy(initializations, 0, newInitializations, 0, initializationsLength)__      initializations = newInitializations__    }_    _    initializations[initializationCount++] = abstractType__  };adds,an,abstract,type,to,the,list,of,types,on,which,a,constructor,is,invoked,in,the,basic,block,param,abstract,type,an,abstract,type,on,a,which,a,constructor,is,invoked;private,void,add,initialized,type,final,int,abstract,type,if,initializations,null,initializations,new,int,2,int,initializations,length,initializations,length,if,initialization,count,initializations,length,int,new,initializations,new,int,math,max,initialization,count,1,2,initializations,length,system,arraycopy,initializations,0,new,initializations,0,initializations,length,initializations,new,initializations,initializations,initialization,count,abstract,type
Frame -> private void set(final int local, final int type);1366718246;Sets the output frame local variable type at the given index.__@param local_the index of the local that must be set._@param type_the value of the local that must be set.;private void set(final int local, final int type) {_        _        if (outputLocals == null) {_            outputLocals = new int[10]__        }_        int n = outputLocals.length__        if (local >= n) {_            int[] t = new int[Math.max(local + 1, 2 * n)]__            System.arraycopy(outputLocals, 0, t, 0, n)__            outputLocals = t__        }_        _        outputLocals[local] = type__    };sets,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,set,param,type,the,value,of,the,local,that,must,be,set;private,void,set,final,int,local,final,int,type,if,output,locals,null,output,locals,new,int,10,int,n,output,locals,length,if,local,n,int,t,new,int,math,max,local,1,2,n,system,arraycopy,output,locals,0,t,0,n,output,locals,t,output,locals,local,type
Frame -> private void set(final int local, final int type);1385423968;Sets the output frame local variable type at the given index.__@param local_the index of the local that must be set._@param type_the value of the local that must be set.;private void set(final int local, final int type) {_        _        if (outputLocals == null) {_            outputLocals = new int[10]__        }_        int n = outputLocals.length__        if (local >= n) {_            int[] t = new int[Math.max(local + 1, 2 * n)]__            System.arraycopy(outputLocals, 0, t, 0, n)__            outputLocals = t__        }_        _        outputLocals[local] = type__    };sets,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,set,param,type,the,value,of,the,local,that,must,be,set;private,void,set,final,int,local,final,int,type,if,output,locals,null,output,locals,new,int,10,int,n,output,locals,length,if,local,n,int,t,new,int,math,max,local,1,2,n,system,arraycopy,output,locals,0,t,0,n,output,locals,t,output,locals,local,type
Frame -> private void set(final int local, final int type);1395273982;Sets the output frame local variable type at the given index.__@param local_the index of the local that must be set._@param type_the value of the local that must be set.;private void set(final int local, final int type) {_        _        if (outputLocals == null) {_            outputLocals = new int[10]__        }_        int n = outputLocals.length__        if (local >= n) {_            int[] t = new int[Math.max(local + 1, 2 * n)]__            System.arraycopy(outputLocals, 0, t, 0, n)__            outputLocals = t__        }_        _        outputLocals[local] = type__    };sets,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,set,param,type,the,value,of,the,local,that,must,be,set;private,void,set,final,int,local,final,int,type,if,output,locals,null,output,locals,new,int,10,int,n,output,locals,length,if,local,n,int,t,new,int,math,max,local,1,2,n,system,arraycopy,output,locals,0,t,0,n,output,locals,t,output,locals,local,type
Frame -> private void set(final int local, final int type);1397644526;Sets the output frame local variable type at the given index.__@param local_the index of the local that must be set._@param type_the value of the local that must be set.;private void set(final int local, final int type) {_        _        if (outputLocals == null) {_            outputLocals = new int[10]__        }_        int n = outputLocals.length__        if (local >= n) {_            int[] t = new int[Math.max(local + 1, 2 * n)]__            System.arraycopy(outputLocals, 0, t, 0, n)__            outputLocals = t__        }_        _        outputLocals[local] = type__    };sets,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,set,param,type,the,value,of,the,local,that,must,be,set;private,void,set,final,int,local,final,int,type,if,output,locals,null,output,locals,new,int,10,int,n,output,locals,length,if,local,n,int,t,new,int,math,max,local,1,2,n,system,arraycopy,output,locals,0,t,0,n,output,locals,t,output,locals,local,type
Frame -> private void set(final int local, final int type);1398255950;Sets the output frame local variable type at the given index.__@param local_the index of the local that must be set._@param type_the value of the local that must be set.;private void set(final int local, final int type) {_        _        if (outputLocals == null) {_            outputLocals = new int[10]__        }_        int n = outputLocals.length__        if (local >= n) {_            int[] t = new int[Math.max(local + 1, 2 * n)]__            System.arraycopy(outputLocals, 0, t, 0, n)__            outputLocals = t__        }_        _        outputLocals[local] = type__    };sets,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,set,param,type,the,value,of,the,local,that,must,be,set;private,void,set,final,int,local,final,int,type,if,output,locals,null,output,locals,new,int,10,int,n,output,locals,length,if,local,n,int,t,new,int,math,max,local,1,2,n,system,arraycopy,output,locals,0,t,0,n,output,locals,t,output,locals,local,type
Frame -> private void set(final int local, final int type);1461047077;Sets the output frame local variable type at the given index.__@param local_the index of the local that must be set._@param type_the value of the local that must be set.;private void set(final int local, final int type) {_        _        if (outputLocals == null) {_            outputLocals = new int[10]__        }_        int n = outputLocals.length__        if (local >= n) {_            int[] t = new int[Math.max(local + 1, 2 * n)]__            System.arraycopy(outputLocals, 0, t, 0, n)__            outputLocals = t__        }_        _        outputLocals[local] = type__    };sets,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,set,param,type,the,value,of,the,local,that,must,be,set;private,void,set,final,int,local,final,int,type,if,output,locals,null,output,locals,new,int,10,int,n,output,locals,length,if,local,n,int,t,new,int,math,max,local,1,2,n,system,arraycopy,output,locals,0,t,0,n,output,locals,t,output,locals,local,type
Frame -> private void set(final int local, final int type);1483093254;Sets the output frame local variable type at the given index.__@param local_the index of the local that must be set._@param type_the value of the local that must be set.;private void set(final int local, final int type) {_        _        if (outputLocals == null) {_            outputLocals = new int[10]__        }_        int n = outputLocals.length__        if (local >= n) {_            int[] t = new int[Math.max(local + 1, 2 * n)]__            System.arraycopy(outputLocals, 0, t, 0, n)__            outputLocals = t__        }_        _        outputLocals[local] = type__    };sets,the,output,frame,local,variable,type,at,the,given,index,param,local,the,index,of,the,local,that,must,be,set,param,type,the,value,of,the,local,that,must,be,set;private,void,set,final,int,local,final,int,type,if,output,locals,null,output,locals,new,int,10,int,n,output,locals,length,if,local,n,int,t,new,int,math,max,local,1,2,n,system,arraycopy,output,locals,0,t,0,n,output,locals,t,output,locals,local,type
Frame -> private static boolean merge(       final SymbolTable symbolTable,       final int sourceType,       final int[] dstTypes,       final int dstIndex);1531241461;Merges the type at the given index in the given abstract type array with the given type._Returns <tt>true</tt> if the type array has been modified by this operation.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param sourceType the abstract type with which the abstract type array element must be merged._This type should be of {@link #CONSTANT_KIND}, {@link #REFERENCE_KIND} or {@link_#UNINITIALIZED_KIND} kind, with positive or null array dimensions._@param dstTypes an array of abstract types. These types should be of {@link #CONSTANT_KIND},_{@link #REFERENCE_KIND} or {@link #UNINITIALIZED_KIND} kind, with positive or null array_dimensions._@param dstIndex the index of the type that must be merged in dstTypes._@return <tt>true</tt> if the type array has been modified by this operation.;private static boolean merge(_      final SymbolTable symbolTable,_      final int sourceType,_      final int[] dstTypes,_      final int dstIndex) {_    int dstType = dstTypes[dstIndex]__    if (dstType == sourceType) {_      _      return false__    }_    int srcType = sourceType__    if ((sourceType & ~DIM_MASK) == NULL) {_      if (dstType == NULL) {_        return false__      }_      srcType = NULL__    }_    if (dstType == 0) {_      _      dstTypes[dstIndex] = srcType__      return true__    }_    int mergedType__    if ((dstType & DIM_MASK) != 0 || (dstType & KIND_MASK) == REFERENCE_KIND) {_      _      if (srcType == NULL) {_        _        return false__      } else if ((srcType & (DIM_MASK | KIND_MASK)) == (dstType & (DIM_MASK | KIND_MASK))) {_        _        if ((dstType & KIND_MASK) == REFERENCE_KIND) {_          _          _          mergedType =_              (srcType & DIM_MASK)_                  | REFERENCE_KIND_                  | symbolTable.addMergedType(srcType & VALUE_MASK, dstType & VALUE_MASK)__        } else {_          _          _          int mergedDim = ELEMENT_OF + (srcType & DIM_MASK)__          mergedType = mergedDim | REFERENCE_KIND | symbolTable.addType("java/lang/Object")__        }_      } else if ((srcType & DIM_MASK) != 0 || (srcType & KIND_MASK) == REFERENCE_KIND) {_        _        _        _        _        int srcDim = srcType & DIM_MASK__        if (srcDim != 0 && (srcType & KIND_MASK) != REFERENCE_KIND) {_          srcDim = ELEMENT_OF + srcDim__        }_        int dstDim = dstType & DIM_MASK__        if (dstDim != 0 && (dstType & KIND_MASK) != REFERENCE_KIND) {_          dstDim = ELEMENT_OF + dstDim__        }_        mergedType =_            Math.min(srcDim, dstDim) | REFERENCE_KIND | symbolTable.addType("java/lang/Object")__      } else {_        _        mergedType = TOP__      }_    } else if (dstType == NULL) {_      _      _      mergedType =_          (srcType & DIM_MASK) != 0 || (srcType & KIND_MASK) == REFERENCE_KIND ? srcType : TOP__    } else {_      _      mergedType = TOP__    }_    if (mergedType != dstType) {_      dstTypes[dstIndex] = mergedType__      return true__    }_    return false__  };merges,the,type,at,the,given,index,in,the,given,abstract,type,array,with,the,given,type,returns,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,source,type,the,abstract,type,with,which,the,abstract,type,array,element,must,be,merged,this,type,should,be,of,link,link,or,link,kind,with,positive,or,null,array,dimensions,param,dst,types,an,array,of,abstract,types,these,types,should,be,of,link,link,or,link,kind,with,positive,or,null,array,dimensions,param,dst,index,the,index,of,the,type,that,must,be,merged,in,dst,types,return,tt,true,tt,if,the,type,array,has,been,modified,by,this,operation;private,static,boolean,merge,final,symbol,table,symbol,table,final,int,source,type,final,int,dst,types,final,int,dst,index,int,dst,type,dst,types,dst,index,if,dst,type,source,type,return,false,int,src,type,source,type,if,source,type,null,if,dst,type,null,return,false,src,type,null,if,dst,type,0,dst,types,dst,index,src,type,return,true,int,merged,type,if,dst,type,0,dst,type,if,src,type,null,return,false,else,if,src,type,dst,type,if,dst,type,merged,type,src,type,symbol,table,add,merged,type,src,type,dst,type,else,int,merged,dim,src,type,merged,type,merged,dim,symbol,table,add,type,java,lang,object,else,if,src,type,0,src,type,int,src,dim,src,type,if,src,dim,0,src,type,src,dim,src,dim,int,dst,dim,dst,type,if,dst,dim,0,dst,type,dst,dim,dst,dim,merged,type,math,min,src,dim,dst,dim,symbol,table,add,type,java,lang,object,else,merged,type,top,else,if,dst,type,null,merged,type,src,type,0,src,type,src,type,top,else,merged,type,top,if,merged,type,dst,type,dst,types,dst,index,merged,type,return,true,return,false
Frame -> private static boolean merge(       final SymbolTable symbolTable,       final int sourceType,       final int[] dstTypes,       final int dstIndex);1536664245;Merges the type at the given index in the given abstract type array with the given type._Returns {@literal true} if the type array has been modified by this operation.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param sourceType the abstract type with which the abstract type array element must be merged._This type should be of {@link #CONSTANT_KIND}, {@link #REFERENCE_KIND} or {@link_#UNINITIALIZED_KIND} kind, with positive or null array dimensions._@param dstTypes an array of abstract types. These types should be of {@link #CONSTANT_KIND},_{@link #REFERENCE_KIND} or {@link #UNINITIALIZED_KIND} kind, with positive or null array_dimensions._@param dstIndex the index of the type that must be merged in dstTypes._@return {@literal true} if the type array has been modified by this operation.;private static boolean merge(_      final SymbolTable symbolTable,_      final int sourceType,_      final int[] dstTypes,_      final int dstIndex) {_    int dstType = dstTypes[dstIndex]__    if (dstType == sourceType) {_      _      return false__    }_    int srcType = sourceType__    if ((sourceType & ~DIM_MASK) == NULL) {_      if (dstType == NULL) {_        return false__      }_      srcType = NULL__    }_    if (dstType == 0) {_      _      dstTypes[dstIndex] = srcType__      return true__    }_    int mergedType__    if ((dstType & DIM_MASK) != 0 || (dstType & KIND_MASK) == REFERENCE_KIND) {_      _      if (srcType == NULL) {_        _        return false__      } else if ((srcType & (DIM_MASK | KIND_MASK)) == (dstType & (DIM_MASK | KIND_MASK))) {_        _        if ((dstType & KIND_MASK) == REFERENCE_KIND) {_          _          _          mergedType =_              (srcType & DIM_MASK)_                  | REFERENCE_KIND_                  | symbolTable.addMergedType(srcType & VALUE_MASK, dstType & VALUE_MASK)__        } else {_          _          _          int mergedDim = ELEMENT_OF + (srcType & DIM_MASK)__          mergedType = mergedDim | REFERENCE_KIND | symbolTable.addType("java/lang/Object")__        }_      } else if ((srcType & DIM_MASK) != 0 || (srcType & KIND_MASK) == REFERENCE_KIND) {_        _        _        _        _        int srcDim = srcType & DIM_MASK__        if (srcDim != 0 && (srcType & KIND_MASK) != REFERENCE_KIND) {_          srcDim = ELEMENT_OF + srcDim__        }_        int dstDim = dstType & DIM_MASK__        if (dstDim != 0 && (dstType & KIND_MASK) != REFERENCE_KIND) {_          dstDim = ELEMENT_OF + dstDim__        }_        mergedType =_            Math.min(srcDim, dstDim) | REFERENCE_KIND | symbolTable.addType("java/lang/Object")__      } else {_        _        mergedType = TOP__      }_    } else if (dstType == NULL) {_      _      _      mergedType =_          (srcType & DIM_MASK) != 0 || (srcType & KIND_MASK) == REFERENCE_KIND ? srcType : TOP__    } else {_      _      mergedType = TOP__    }_    if (mergedType != dstType) {_      dstTypes[dstIndex] = mergedType__      return true__    }_    return false__  };merges,the,type,at,the,given,index,in,the,given,abstract,type,array,with,the,given,type,returns,literal,true,if,the,type,array,has,been,modified,by,this,operation,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,source,type,the,abstract,type,with,which,the,abstract,type,array,element,must,be,merged,this,type,should,be,of,link,link,or,link,kind,with,positive,or,null,array,dimensions,param,dst,types,an,array,of,abstract,types,these,types,should,be,of,link,link,or,link,kind,with,positive,or,null,array,dimensions,param,dst,index,the,index,of,the,type,that,must,be,merged,in,dst,types,return,literal,true,if,the,type,array,has,been,modified,by,this,operation;private,static,boolean,merge,final,symbol,table,symbol,table,final,int,source,type,final,int,dst,types,final,int,dst,index,int,dst,type,dst,types,dst,index,if,dst,type,source,type,return,false,int,src,type,source,type,if,source,type,null,if,dst,type,null,return,false,src,type,null,if,dst,type,0,dst,types,dst,index,src,type,return,true,int,merged,type,if,dst,type,0,dst,type,if,src,type,null,return,false,else,if,src,type,dst,type,if,dst,type,merged,type,src,type,symbol,table,add,merged,type,src,type,dst,type,else,int,merged,dim,src,type,merged,type,merged,dim,symbol,table,add,type,java,lang,object,else,if,src,type,0,src,type,int,src,dim,src,type,if,src,dim,0,src,type,src,dim,src,dim,int,dst,dim,dst,type,if,dst,dim,0,dst,type,dst,dim,dst,dim,merged,type,math,min,src,dim,dst,dim,symbol,table,add,type,java,lang,object,else,merged,type,top,else,if,dst,type,null,merged,type,src,type,0,src,type,src,type,top,else,merged,type,top,if,merged,type,dst,type,dst,types,dst,index,merged,type,return,true,return,false
Frame -> private static boolean merge(       final SymbolTable symbolTable,       final int sourceType,       final int[] dstTypes,       final int dstIndex);1537204147;Merges the type at the given index in the given abstract type array with the given type._Returns {@literal true} if the type array has been modified by this operation.__@param symbolTable the type table to use to lookup and store type {@link Symbol}._@param sourceType the abstract type with which the abstract type array element must be merged._This type should be of {@link #CONSTANT_KIND}, {@link #REFERENCE_KIND} or {@link_#UNINITIALIZED_KIND} kind, with positive or null array dimensions._@param dstTypes an array of abstract types. These types should be of {@link #CONSTANT_KIND},_{@link #REFERENCE_KIND} or {@link #UNINITIALIZED_KIND} kind, with positive or null array_dimensions._@param dstIndex the index of the type that must be merged in dstTypes._@return {@literal true} if the type array has been modified by this operation.;private static boolean merge(_      final SymbolTable symbolTable,_      final int sourceType,_      final int[] dstTypes,_      final int dstIndex) {_    int dstType = dstTypes[dstIndex]__    if (dstType == sourceType) {_      _      return false__    }_    int srcType = sourceType__    if ((sourceType & ~DIM_MASK) == NULL) {_      if (dstType == NULL) {_        return false__      }_      srcType = NULL__    }_    if (dstType == 0) {_      _      dstTypes[dstIndex] = srcType__      return true__    }_    int mergedType__    if ((dstType & DIM_MASK) != 0 || (dstType & KIND_MASK) == REFERENCE_KIND) {_      _      if (srcType == NULL) {_        _        return false__      } else if ((srcType & (DIM_MASK | KIND_MASK)) == (dstType & (DIM_MASK | KIND_MASK))) {_        _        if ((dstType & KIND_MASK) == REFERENCE_KIND) {_          _          _          mergedType =_              (srcType & DIM_MASK)_                  | REFERENCE_KIND_                  | symbolTable.addMergedType(srcType & VALUE_MASK, dstType & VALUE_MASK)__        } else {_          _          _          int mergedDim = ELEMENT_OF + (srcType & DIM_MASK)__          mergedType = mergedDim | REFERENCE_KIND | symbolTable.addType("java/lang/Object")__        }_      } else if ((srcType & DIM_MASK) != 0 || (srcType & KIND_MASK) == REFERENCE_KIND) {_        _        _        _        _        int srcDim = srcType & DIM_MASK__        if (srcDim != 0 && (srcType & KIND_MASK) != REFERENCE_KIND) {_          srcDim = ELEMENT_OF + srcDim__        }_        int dstDim = dstType & DIM_MASK__        if (dstDim != 0 && (dstType & KIND_MASK) != REFERENCE_KIND) {_          dstDim = ELEMENT_OF + dstDim__        }_        mergedType =_            Math.min(srcDim, dstDim) | REFERENCE_KIND | symbolTable.addType("java/lang/Object")__      } else {_        _        mergedType = TOP__      }_    } else if (dstType == NULL) {_      _      _      mergedType =_          (srcType & DIM_MASK) != 0 || (srcType & KIND_MASK) == REFERENCE_KIND ? srcType : TOP__    } else {_      _      mergedType = TOP__    }_    if (mergedType != dstType) {_      dstTypes[dstIndex] = mergedType__      return true__    }_    return false__  };merges,the,type,at,the,given,index,in,the,given,abstract,type,array,with,the,given,type,returns,literal,true,if,the,type,array,has,been,modified,by,this,operation,param,symbol,table,the,type,table,to,use,to,lookup,and,store,type,link,symbol,param,source,type,the,abstract,type,with,which,the,abstract,type,array,element,must,be,merged,this,type,should,be,of,link,link,or,link,kind,with,positive,or,null,array,dimensions,param,dst,types,an,array,of,abstract,types,these,types,should,be,of,link,link,or,link,kind,with,positive,or,null,array,dimensions,param,dst,index,the,index,of,the,type,that,must,be,merged,in,dst,types,return,literal,true,if,the,type,array,has,been,modified,by,this,operation;private,static,boolean,merge,final,symbol,table,symbol,table,final,int,source,type,final,int,dst,types,final,int,dst,index,int,dst,type,dst,types,dst,index,if,dst,type,source,type,return,false,int,src,type,source,type,if,source,type,null,if,dst,type,null,return,false,src,type,null,if,dst,type,0,dst,types,dst,index,src,type,return,true,int,merged,type,if,dst,type,0,dst,type,if,src,type,null,return,false,else,if,src,type,dst,type,if,dst,type,merged,type,src,type,symbol,table,add,merged,type,src,type,dst,type,else,int,merged,dim,src,type,merged,type,merged,dim,symbol,table,add,type,java,lang,object,else,if,src,type,0,src,type,int,src,dim,src,type,if,src,dim,0,src,type,src,dim,src,dim,int,dst,dim,dst,type,if,dst,dim,0,dst,type,dst,dim,dst,dim,merged,type,math,min,src,dim,dst,dim,symbol,table,add,type,java,lang,object,else,merged,type,top,else,if,dst,type,null,merged,type,src,type,0,src,type,src,type,top,else,merged,type,top,if,merged,type,dst,type,dst,types,dst,index,merged,type,return,true,return,false
Frame -> boolean merge(final ClassWriter cw, final Frame frame, final int edge);1366718246;Merges the input frame of the given basic block with the input and output_frames of this basic block. Returns <tt>true</tt> if the input frame of_the given label has been changed by this operation.__@param cw_the ClassWriter to which this label belongs._@param frame_the basic block whose input frame must be updated._@param edge_the kind of the {@link Edge} between this label and 'label'._See {@link Edge#info}._@return <tt>true</tt> if the input frame of the given label has been_changed by this operation.;boolean merge(final ClassWriter cw, final Frame frame, final int edge) {_        boolean changed = false__        int i, s, dim, kind, t___        int nLocal = inputLocals.length__        int nStack = inputStack.length__        if (frame.inputLocals == null) {_            frame.inputLocals = new int[nLocal]__            changed = true__        }__        for (i = 0_ i < nLocal_ ++i) {_            if (outputLocals != null && i < outputLocals.length) {_                s = outputLocals[i]__                if (s == 0) {_                    t = inputLocals[i]__                } else {_                    dim = s & DIM__                    kind = s & KIND__                    if (kind == BASE) {_                        t = s__                    } else {_                        if (kind == LOCAL) {_                            t = dim + inputLocals[s & VALUE]__                        } else {_                            t = dim + inputStack[nStack - (s & VALUE)]__                        }_                        if ((s & TOP_IF_LONG_OR_DOUBLE) != 0_                                && (t == LONG || t == DOUBLE)) {_                            t = TOP__                        }_                    }_                }_            } else {_                t = inputLocals[i]__            }_            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputLocals, i)__        }__        if (edge > 0) {_            for (i = 0_ i < nLocal_ ++i) {_                t = inputLocals[i]__                changed |= merge(cw, t, frame.inputLocals, i)__            }_            if (frame.inputStack == null) {_                frame.inputStack = new int[1]__                changed = true__            }_            changed |= merge(cw, edge, frame.inputStack, 0)__            return changed__        }__        int nInputStack = inputStack.length + owner.inputStackTop__        if (frame.inputStack == null) {_            frame.inputStack = new int[nInputStack + outputStackTop]__            changed = true__        }__        for (i = 0_ i < nInputStack_ ++i) {_            t = inputStack[i]__            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputStack, i)__        }_        for (i = 0_ i < outputStackTop_ ++i) {_            s = outputStack[i]__            dim = s & DIM__            kind = s & KIND__            if (kind == BASE) {_                t = s__            } else {_                if (kind == LOCAL) {_                    t = dim + inputLocals[s & VALUE]__                } else {_                    t = dim + inputStack[nStack - (s & VALUE)]__                }_                if ((s & TOP_IF_LONG_OR_DOUBLE) != 0_                        && (t == LONG || t == DOUBLE)) {_                    t = TOP__                }_            }_            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputStack, nInputStack + i)__        }_        return changed__    };merges,the,input,frame,of,the,given,basic,block,with,the,input,and,output,frames,of,this,basic,block,returns,tt,true,tt,if,the,input,frame,of,the,given,label,has,been,changed,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,frame,the,basic,block,whose,input,frame,must,be,updated,param,edge,the,kind,of,the,link,edge,between,this,label,and,label,see,link,edge,info,return,tt,true,tt,if,the,input,frame,of,the,given,label,has,been,changed,by,this,operation;boolean,merge,final,class,writer,cw,final,frame,frame,final,int,edge,boolean,changed,false,int,i,s,dim,kind,t,int,n,local,input,locals,length,int,n,stack,input,stack,length,if,frame,input,locals,null,frame,input,locals,new,int,n,local,changed,true,for,i,0,i,n,local,i,if,output,locals,null,i,output,locals,length,s,output,locals,i,if,s,0,t,input,locals,i,else,dim,s,dim,kind,s,kind,if,kind,base,t,s,else,if,kind,local,t,dim,input,locals,s,value,else,t,dim,input,stack,n,stack,s,value,if,s,0,t,long,t,double,t,top,else,t,input,locals,i,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,locals,i,if,edge,0,for,i,0,i,n,local,i,t,input,locals,i,changed,merge,cw,t,frame,input,locals,i,if,frame,input,stack,null,frame,input,stack,new,int,1,changed,true,changed,merge,cw,edge,frame,input,stack,0,return,changed,int,n,input,stack,input,stack,length,owner,input,stack,top,if,frame,input,stack,null,frame,input,stack,new,int,n,input,stack,output,stack,top,changed,true,for,i,0,i,n,input,stack,i,t,input,stack,i,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,stack,i,for,i,0,i,output,stack,top,i,s,output,stack,i,dim,s,dim,kind,s,kind,if,kind,base,t,s,else,if,kind,local,t,dim,input,locals,s,value,else,t,dim,input,stack,n,stack,s,value,if,s,0,t,long,t,double,t,top,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,stack,n,input,stack,i,return,changed
Frame -> boolean merge(final ClassWriter cw, final Frame frame, final int edge);1385423968;Merges the input frame of the given basic block with the input and output_frames of this basic block. Returns <tt>true</tt> if the input frame of_the given label has been changed by this operation.__@param cw_the ClassWriter to which this label belongs._@param frame_the basic block whose input frame must be updated._@param edge_the kind of the {@link Edge} between this label and 'label'._See {@link Edge#info}._@return <tt>true</tt> if the input frame of the given label has been_changed by this operation.;boolean merge(final ClassWriter cw, final Frame frame, final int edge) {_        boolean changed = false__        int i, s, dim, kind, t___        int nLocal = inputLocals.length__        int nStack = inputStack.length__        if (frame.inputLocals == null) {_            frame.inputLocals = new int[nLocal]__            changed = true__        }__        for (i = 0_ i < nLocal_ ++i) {_            if (outputLocals != null && i < outputLocals.length) {_                s = outputLocals[i]__                if (s == 0) {_                    t = inputLocals[i]__                } else {_                    dim = s & DIM__                    kind = s & KIND__                    if (kind == BASE) {_                        t = s__                    } else {_                        if (kind == LOCAL) {_                            t = dim + inputLocals[s & VALUE]__                        } else {_                            t = dim + inputStack[nStack - (s & VALUE)]__                        }_                        if ((s & TOP_IF_LONG_OR_DOUBLE) != 0_                                && (t == LONG || t == DOUBLE)) {_                            t = TOP__                        }_                    }_                }_            } else {_                t = inputLocals[i]__            }_            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputLocals, i)__        }__        if (edge > 0) {_            for (i = 0_ i < nLocal_ ++i) {_                t = inputLocals[i]__                changed |= merge(cw, t, frame.inputLocals, i)__            }_            if (frame.inputStack == null) {_                frame.inputStack = new int[1]__                changed = true__            }_            changed |= merge(cw, edge, frame.inputStack, 0)__            return changed__        }__        int nInputStack = inputStack.length + owner.inputStackTop__        if (frame.inputStack == null) {_            frame.inputStack = new int[nInputStack + outputStackTop]__            changed = true__        }__        for (i = 0_ i < nInputStack_ ++i) {_            t = inputStack[i]__            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputStack, i)__        }_        for (i = 0_ i < outputStackTop_ ++i) {_            s = outputStack[i]__            dim = s & DIM__            kind = s & KIND__            if (kind == BASE) {_                t = s__            } else {_                if (kind == LOCAL) {_                    t = dim + inputLocals[s & VALUE]__                } else {_                    t = dim + inputStack[nStack - (s & VALUE)]__                }_                if ((s & TOP_IF_LONG_OR_DOUBLE) != 0_                        && (t == LONG || t == DOUBLE)) {_                    t = TOP__                }_            }_            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputStack, nInputStack + i)__        }_        return changed__    };merges,the,input,frame,of,the,given,basic,block,with,the,input,and,output,frames,of,this,basic,block,returns,tt,true,tt,if,the,input,frame,of,the,given,label,has,been,changed,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,frame,the,basic,block,whose,input,frame,must,be,updated,param,edge,the,kind,of,the,link,edge,between,this,label,and,label,see,link,edge,info,return,tt,true,tt,if,the,input,frame,of,the,given,label,has,been,changed,by,this,operation;boolean,merge,final,class,writer,cw,final,frame,frame,final,int,edge,boolean,changed,false,int,i,s,dim,kind,t,int,n,local,input,locals,length,int,n,stack,input,stack,length,if,frame,input,locals,null,frame,input,locals,new,int,n,local,changed,true,for,i,0,i,n,local,i,if,output,locals,null,i,output,locals,length,s,output,locals,i,if,s,0,t,input,locals,i,else,dim,s,dim,kind,s,kind,if,kind,base,t,s,else,if,kind,local,t,dim,input,locals,s,value,else,t,dim,input,stack,n,stack,s,value,if,s,0,t,long,t,double,t,top,else,t,input,locals,i,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,locals,i,if,edge,0,for,i,0,i,n,local,i,t,input,locals,i,changed,merge,cw,t,frame,input,locals,i,if,frame,input,stack,null,frame,input,stack,new,int,1,changed,true,changed,merge,cw,edge,frame,input,stack,0,return,changed,int,n,input,stack,input,stack,length,owner,input,stack,top,if,frame,input,stack,null,frame,input,stack,new,int,n,input,stack,output,stack,top,changed,true,for,i,0,i,n,input,stack,i,t,input,stack,i,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,stack,i,for,i,0,i,output,stack,top,i,s,output,stack,i,dim,s,dim,kind,s,kind,if,kind,base,t,s,else,if,kind,local,t,dim,input,locals,s,value,else,t,dim,input,stack,n,stack,s,value,if,s,0,t,long,t,double,t,top,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,stack,n,input,stack,i,return,changed
Frame -> boolean merge(final ClassWriter cw, final Frame frame, final int edge);1395273982;Merges the input frame of the given basic block with the input and output_frames of this basic block. Returns <tt>true</tt> if the input frame of_the given label has been changed by this operation.__@param cw_the ClassWriter to which this label belongs._@param frame_the basic block whose input frame must be updated._@param edge_the kind of the {@link Edge} between this label and 'label'._See {@link Edge#info}._@return <tt>true</tt> if the input frame of the given label has been_changed by this operation.;boolean merge(final ClassWriter cw, final Frame frame, final int edge) {_        boolean changed = false__        int i, s, dim, kind, t___        int nLocal = inputLocals.length__        int nStack = inputStack.length__        if (frame.inputLocals == null) {_            frame.inputLocals = new int[nLocal]__            changed = true__        }__        for (i = 0_ i < nLocal_ ++i) {_            if (outputLocals != null && i < outputLocals.length) {_                s = outputLocals[i]__                if (s == 0) {_                    t = inputLocals[i]__                } else {_                    dim = s & DIM__                    kind = s & KIND__                    if (kind == BASE) {_                        t = s__                    } else {_                        if (kind == LOCAL) {_                            t = dim + inputLocals[s & VALUE]__                        } else {_                            t = dim + inputStack[nStack - (s & VALUE)]__                        }_                        if ((s & TOP_IF_LONG_OR_DOUBLE) != 0_                                && (t == LONG || t == DOUBLE)) {_                            t = TOP__                        }_                    }_                }_            } else {_                t = inputLocals[i]__            }_            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputLocals, i)__        }__        if (edge > 0) {_            for (i = 0_ i < nLocal_ ++i) {_                t = inputLocals[i]__                changed |= merge(cw, t, frame.inputLocals, i)__            }_            if (frame.inputStack == null) {_                frame.inputStack = new int[1]__                changed = true__            }_            changed |= merge(cw, edge, frame.inputStack, 0)__            return changed__        }__        int nInputStack = inputStack.length + owner.inputStackTop__        if (frame.inputStack == null) {_            frame.inputStack = new int[nInputStack + outputStackTop]__            changed = true__        }__        for (i = 0_ i < nInputStack_ ++i) {_            t = inputStack[i]__            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputStack, i)__        }_        for (i = 0_ i < outputStackTop_ ++i) {_            s = outputStack[i]__            dim = s & DIM__            kind = s & KIND__            if (kind == BASE) {_                t = s__            } else {_                if (kind == LOCAL) {_                    t = dim + inputLocals[s & VALUE]__                } else {_                    t = dim + inputStack[nStack - (s & VALUE)]__                }_                if ((s & TOP_IF_LONG_OR_DOUBLE) != 0_                        && (t == LONG || t == DOUBLE)) {_                    t = TOP__                }_            }_            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputStack, nInputStack + i)__        }_        return changed__    };merges,the,input,frame,of,the,given,basic,block,with,the,input,and,output,frames,of,this,basic,block,returns,tt,true,tt,if,the,input,frame,of,the,given,label,has,been,changed,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,frame,the,basic,block,whose,input,frame,must,be,updated,param,edge,the,kind,of,the,link,edge,between,this,label,and,label,see,link,edge,info,return,tt,true,tt,if,the,input,frame,of,the,given,label,has,been,changed,by,this,operation;boolean,merge,final,class,writer,cw,final,frame,frame,final,int,edge,boolean,changed,false,int,i,s,dim,kind,t,int,n,local,input,locals,length,int,n,stack,input,stack,length,if,frame,input,locals,null,frame,input,locals,new,int,n,local,changed,true,for,i,0,i,n,local,i,if,output,locals,null,i,output,locals,length,s,output,locals,i,if,s,0,t,input,locals,i,else,dim,s,dim,kind,s,kind,if,kind,base,t,s,else,if,kind,local,t,dim,input,locals,s,value,else,t,dim,input,stack,n,stack,s,value,if,s,0,t,long,t,double,t,top,else,t,input,locals,i,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,locals,i,if,edge,0,for,i,0,i,n,local,i,t,input,locals,i,changed,merge,cw,t,frame,input,locals,i,if,frame,input,stack,null,frame,input,stack,new,int,1,changed,true,changed,merge,cw,edge,frame,input,stack,0,return,changed,int,n,input,stack,input,stack,length,owner,input,stack,top,if,frame,input,stack,null,frame,input,stack,new,int,n,input,stack,output,stack,top,changed,true,for,i,0,i,n,input,stack,i,t,input,stack,i,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,stack,i,for,i,0,i,output,stack,top,i,s,output,stack,i,dim,s,dim,kind,s,kind,if,kind,base,t,s,else,if,kind,local,t,dim,input,locals,s,value,else,t,dim,input,stack,n,stack,s,value,if,s,0,t,long,t,double,t,top,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,stack,n,input,stack,i,return,changed
Frame -> boolean merge(final ClassWriter cw, final Frame frame, final int edge);1397644526;Merges the input frame of the given basic block with the input and output_frames of this basic block. Returns <tt>true</tt> if the input frame of_the given label has been changed by this operation.__@param cw_the ClassWriter to which this label belongs._@param frame_the basic block whose input frame must be updated._@param edge_the kind of the {@link Edge} between this label and 'label'._See {@link Edge#info}._@return <tt>true</tt> if the input frame of the given label has been_changed by this operation.;boolean merge(final ClassWriter cw, final Frame frame, final int edge) {_        boolean changed = false__        int i, s, dim, kind, t___        int nLocal = inputLocals.length__        int nStack = inputStack.length__        if (frame.inputLocals == null) {_            frame.inputLocals = new int[nLocal]__            changed = true__        }__        for (i = 0_ i < nLocal_ ++i) {_            if (outputLocals != null && i < outputLocals.length) {_                s = outputLocals[i]__                if (s == 0) {_                    t = inputLocals[i]__                } else {_                    dim = s & DIM__                    kind = s & KIND__                    if (kind == BASE) {_                        t = s__                    } else {_                        if (kind == LOCAL) {_                            t = dim + inputLocals[s & VALUE]__                        } else {_                            t = dim + inputStack[nStack - (s & VALUE)]__                        }_                        if ((s & TOP_IF_LONG_OR_DOUBLE) != 0_                                && (t == LONG || t == DOUBLE)) {_                            t = TOP__                        }_                    }_                }_            } else {_                t = inputLocals[i]__            }_            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputLocals, i)__        }__        if (edge > 0) {_            for (i = 0_ i < nLocal_ ++i) {_                t = inputLocals[i]__                changed |= merge(cw, t, frame.inputLocals, i)__            }_            if (frame.inputStack == null) {_                frame.inputStack = new int[1]__                changed = true__            }_            changed |= merge(cw, edge, frame.inputStack, 0)__            return changed__        }__        int nInputStack = inputStack.length + owner.inputStackTop__        if (frame.inputStack == null) {_            frame.inputStack = new int[nInputStack + outputStackTop]__            changed = true__        }__        for (i = 0_ i < nInputStack_ ++i) {_            t = inputStack[i]__            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputStack, i)__        }_        for (i = 0_ i < outputStackTop_ ++i) {_            s = outputStack[i]__            dim = s & DIM__            kind = s & KIND__            if (kind == BASE) {_                t = s__            } else {_                if (kind == LOCAL) {_                    t = dim + inputLocals[s & VALUE]__                } else {_                    t = dim + inputStack[nStack - (s & VALUE)]__                }_                if ((s & TOP_IF_LONG_OR_DOUBLE) != 0_                        && (t == LONG || t == DOUBLE)) {_                    t = TOP__                }_            }_            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputStack, nInputStack + i)__        }_        return changed__    };merges,the,input,frame,of,the,given,basic,block,with,the,input,and,output,frames,of,this,basic,block,returns,tt,true,tt,if,the,input,frame,of,the,given,label,has,been,changed,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,frame,the,basic,block,whose,input,frame,must,be,updated,param,edge,the,kind,of,the,link,edge,between,this,label,and,label,see,link,edge,info,return,tt,true,tt,if,the,input,frame,of,the,given,label,has,been,changed,by,this,operation;boolean,merge,final,class,writer,cw,final,frame,frame,final,int,edge,boolean,changed,false,int,i,s,dim,kind,t,int,n,local,input,locals,length,int,n,stack,input,stack,length,if,frame,input,locals,null,frame,input,locals,new,int,n,local,changed,true,for,i,0,i,n,local,i,if,output,locals,null,i,output,locals,length,s,output,locals,i,if,s,0,t,input,locals,i,else,dim,s,dim,kind,s,kind,if,kind,base,t,s,else,if,kind,local,t,dim,input,locals,s,value,else,t,dim,input,stack,n,stack,s,value,if,s,0,t,long,t,double,t,top,else,t,input,locals,i,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,locals,i,if,edge,0,for,i,0,i,n,local,i,t,input,locals,i,changed,merge,cw,t,frame,input,locals,i,if,frame,input,stack,null,frame,input,stack,new,int,1,changed,true,changed,merge,cw,edge,frame,input,stack,0,return,changed,int,n,input,stack,input,stack,length,owner,input,stack,top,if,frame,input,stack,null,frame,input,stack,new,int,n,input,stack,output,stack,top,changed,true,for,i,0,i,n,input,stack,i,t,input,stack,i,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,stack,i,for,i,0,i,output,stack,top,i,s,output,stack,i,dim,s,dim,kind,s,kind,if,kind,base,t,s,else,if,kind,local,t,dim,input,locals,s,value,else,t,dim,input,stack,n,stack,s,value,if,s,0,t,long,t,double,t,top,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,stack,n,input,stack,i,return,changed
Frame -> boolean merge(final ClassWriter cw, final Frame frame, final int edge);1398255950;Merges the input frame of the given basic block with the input and output_frames of this basic block. Returns <tt>true</tt> if the input frame of_the given label has been changed by this operation.__@param cw_the ClassWriter to which this label belongs._@param frame_the basic block whose input frame must be updated._@param edge_the kind of the {@link Edge} between this label and 'label'._See {@link Edge#info}._@return <tt>true</tt> if the input frame of the given label has been_changed by this operation.;boolean merge(final ClassWriter cw, final Frame frame, final int edge) {_        boolean changed = false__        int i, s, dim, kind, t___        int nLocal = inputLocals.length__        int nStack = inputStack.length__        if (frame.inputLocals == null) {_            frame.inputLocals = new int[nLocal]__            changed = true__        }__        for (i = 0_ i < nLocal_ ++i) {_            if (outputLocals != null && i < outputLocals.length) {_                s = outputLocals[i]__                if (s == 0) {_                    t = inputLocals[i]__                } else {_                    dim = s & DIM__                    kind = s & KIND__                    if (kind == BASE) {_                        t = s__                    } else {_                        if (kind == LOCAL) {_                            t = dim + inputLocals[s & VALUE]__                        } else {_                            t = dim + inputStack[nStack - (s & VALUE)]__                        }_                        if ((s & TOP_IF_LONG_OR_DOUBLE) != 0_                                && (t == LONG || t == DOUBLE)) {_                            t = TOP__                        }_                    }_                }_            } else {_                t = inputLocals[i]__            }_            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputLocals, i)__        }__        if (edge > 0) {_            for (i = 0_ i < nLocal_ ++i) {_                t = inputLocals[i]__                changed |= merge(cw, t, frame.inputLocals, i)__            }_            if (frame.inputStack == null) {_                frame.inputStack = new int[1]__                changed = true__            }_            changed |= merge(cw, edge, frame.inputStack, 0)__            return changed__        }__        int nInputStack = inputStack.length + owner.inputStackTop__        if (frame.inputStack == null) {_            frame.inputStack = new int[nInputStack + outputStackTop]__            changed = true__        }__        for (i = 0_ i < nInputStack_ ++i) {_            t = inputStack[i]__            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputStack, i)__        }_        for (i = 0_ i < outputStackTop_ ++i) {_            s = outputStack[i]__            dim = s & DIM__            kind = s & KIND__            if (kind == BASE) {_                t = s__            } else {_                if (kind == LOCAL) {_                    t = dim + inputLocals[s & VALUE]__                } else {_                    t = dim + inputStack[nStack - (s & VALUE)]__                }_                if ((s & TOP_IF_LONG_OR_DOUBLE) != 0_                        && (t == LONG || t == DOUBLE)) {_                    t = TOP__                }_            }_            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputStack, nInputStack + i)__        }_        return changed__    };merges,the,input,frame,of,the,given,basic,block,with,the,input,and,output,frames,of,this,basic,block,returns,tt,true,tt,if,the,input,frame,of,the,given,label,has,been,changed,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,frame,the,basic,block,whose,input,frame,must,be,updated,param,edge,the,kind,of,the,link,edge,between,this,label,and,label,see,link,edge,info,return,tt,true,tt,if,the,input,frame,of,the,given,label,has,been,changed,by,this,operation;boolean,merge,final,class,writer,cw,final,frame,frame,final,int,edge,boolean,changed,false,int,i,s,dim,kind,t,int,n,local,input,locals,length,int,n,stack,input,stack,length,if,frame,input,locals,null,frame,input,locals,new,int,n,local,changed,true,for,i,0,i,n,local,i,if,output,locals,null,i,output,locals,length,s,output,locals,i,if,s,0,t,input,locals,i,else,dim,s,dim,kind,s,kind,if,kind,base,t,s,else,if,kind,local,t,dim,input,locals,s,value,else,t,dim,input,stack,n,stack,s,value,if,s,0,t,long,t,double,t,top,else,t,input,locals,i,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,locals,i,if,edge,0,for,i,0,i,n,local,i,t,input,locals,i,changed,merge,cw,t,frame,input,locals,i,if,frame,input,stack,null,frame,input,stack,new,int,1,changed,true,changed,merge,cw,edge,frame,input,stack,0,return,changed,int,n,input,stack,input,stack,length,owner,input,stack,top,if,frame,input,stack,null,frame,input,stack,new,int,n,input,stack,output,stack,top,changed,true,for,i,0,i,n,input,stack,i,t,input,stack,i,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,stack,i,for,i,0,i,output,stack,top,i,s,output,stack,i,dim,s,dim,kind,s,kind,if,kind,base,t,s,else,if,kind,local,t,dim,input,locals,s,value,else,t,dim,input,stack,n,stack,s,value,if,s,0,t,long,t,double,t,top,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,stack,n,input,stack,i,return,changed
Frame -> boolean merge(final ClassWriter cw, final Frame frame, final int edge);1461047077;Merges the input frame of the given basic block with the input and output_frames of this basic block. Returns <tt>true</tt> if the input frame of_the given label has been changed by this operation.__@param cw_the ClassWriter to which this label belongs._@param frame_the basic block whose input frame must be updated._@param edge_the kind of the {@link Edge} between this label and 'label'._See {@link Edge#info}._@return <tt>true</tt> if the input frame of the given label has been_changed by this operation.;boolean merge(final ClassWriter cw, final Frame frame, final int edge) {_        boolean changed = false__        int i, s, dim, kind, t___        int nLocal = inputLocals.length__        int nStack = inputStack.length__        if (frame.inputLocals == null) {_            frame.inputLocals = new int[nLocal]__            changed = true__        }__        for (i = 0_ i < nLocal_ ++i) {_            if (outputLocals != null && i < outputLocals.length) {_                s = outputLocals[i]__                if (s == 0) {_                    t = inputLocals[i]__                } else {_                    dim = s & DIM__                    kind = s & KIND__                    if (kind == BASE) {_                        t = s__                    } else {_                        if (kind == LOCAL) {_                            t = dim + inputLocals[s & VALUE]__                        } else {_                            t = dim + inputStack[nStack - (s & VALUE)]__                        }_                        if ((s & TOP_IF_LONG_OR_DOUBLE) != 0_                                && (t == LONG || t == DOUBLE)) {_                            t = TOP__                        }_                    }_                }_            } else {_                t = inputLocals[i]__            }_            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputLocals, i)__        }__        if (edge > 0) {_            for (i = 0_ i < nLocal_ ++i) {_                t = inputLocals[i]__                changed |= merge(cw, t, frame.inputLocals, i)__            }_            if (frame.inputStack == null) {_                frame.inputStack = new int[1]__                changed = true__            }_            changed |= merge(cw, edge, frame.inputStack, 0)__            return changed__        }__        int nInputStack = inputStack.length + owner.inputStackTop__        if (frame.inputStack == null) {_            frame.inputStack = new int[nInputStack + outputStackTop]__            changed = true__        }__        for (i = 0_ i < nInputStack_ ++i) {_            t = inputStack[i]__            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputStack, i)__        }_        for (i = 0_ i < outputStackTop_ ++i) {_            s = outputStack[i]__            dim = s & DIM__            kind = s & KIND__            if (kind == BASE) {_                t = s__            } else {_                if (kind == LOCAL) {_                    t = dim + inputLocals[s & VALUE]__                } else {_                    t = dim + inputStack[nStack - (s & VALUE)]__                }_                if ((s & TOP_IF_LONG_OR_DOUBLE) != 0_                        && (t == LONG || t == DOUBLE)) {_                    t = TOP__                }_            }_            if (initializations != null) {_                t = init(cw, t)__            }_            changed |= merge(cw, t, frame.inputStack, nInputStack + i)__        }_        return changed__    };merges,the,input,frame,of,the,given,basic,block,with,the,input,and,output,frames,of,this,basic,block,returns,tt,true,tt,if,the,input,frame,of,the,given,label,has,been,changed,by,this,operation,param,cw,the,class,writer,to,which,this,label,belongs,param,frame,the,basic,block,whose,input,frame,must,be,updated,param,edge,the,kind,of,the,link,edge,between,this,label,and,label,see,link,edge,info,return,tt,true,tt,if,the,input,frame,of,the,given,label,has,been,changed,by,this,operation;boolean,merge,final,class,writer,cw,final,frame,frame,final,int,edge,boolean,changed,false,int,i,s,dim,kind,t,int,n,local,input,locals,length,int,n,stack,input,stack,length,if,frame,input,locals,null,frame,input,locals,new,int,n,local,changed,true,for,i,0,i,n,local,i,if,output,locals,null,i,output,locals,length,s,output,locals,i,if,s,0,t,input,locals,i,else,dim,s,dim,kind,s,kind,if,kind,base,t,s,else,if,kind,local,t,dim,input,locals,s,value,else,t,dim,input,stack,n,stack,s,value,if,s,0,t,long,t,double,t,top,else,t,input,locals,i,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,locals,i,if,edge,0,for,i,0,i,n,local,i,t,input,locals,i,changed,merge,cw,t,frame,input,locals,i,if,frame,input,stack,null,frame,input,stack,new,int,1,changed,true,changed,merge,cw,edge,frame,input,stack,0,return,changed,int,n,input,stack,input,stack,length,owner,input,stack,top,if,frame,input,stack,null,frame,input,stack,new,int,n,input,stack,output,stack,top,changed,true,for,i,0,i,n,input,stack,i,t,input,stack,i,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,stack,i,for,i,0,i,output,stack,top,i,s,output,stack,i,dim,s,dim,kind,s,kind,if,kind,base,t,s,else,if,kind,local,t,dim,input,locals,s,value,else,t,dim,input,stack,n,stack,s,value,if,s,0,t,long,t,double,t,top,if,initializations,null,t,init,cw,t,changed,merge,cw,t,frame,input,stack,n,input,stack,i,return,changed
Frame -> private int pop();1366718246;Pops a type from the output frame stack and returns its value.__@return the type that has been popped from the output frame stack.;private int pop() {_        if (outputStackTop > 0) {_            return outputStack[--outputStackTop]__        } else {_            _            return STACK | -(--owner.inputStackTop)__        }_    };pops,a,type,from,the,output,frame,stack,and,returns,its,value,return,the,type,that,has,been,popped,from,the,output,frame,stack;private,int,pop,if,output,stack,top,0,return,output,stack,output,stack,top,else,return,stack,owner,input,stack,top
Frame -> private int pop();1385423968;Pops a type from the output frame stack and returns its value.__@return the type that has been popped from the output frame stack.;private int pop() {_        if (outputStackTop > 0) {_            return outputStack[--outputStackTop]__        } else {_            _            return STACK | -(--owner.inputStackTop)__        }_    };pops,a,type,from,the,output,frame,stack,and,returns,its,value,return,the,type,that,has,been,popped,from,the,output,frame,stack;private,int,pop,if,output,stack,top,0,return,output,stack,output,stack,top,else,return,stack,owner,input,stack,top
Frame -> private int pop();1395273982;Pops a type from the output frame stack and returns its value.__@return the type that has been popped from the output frame stack.;private int pop() {_        if (outputStackTop > 0) {_            return outputStack[--outputStackTop]__        } else {_            _            return STACK | -(--owner.inputStackTop)__        }_    };pops,a,type,from,the,output,frame,stack,and,returns,its,value,return,the,type,that,has,been,popped,from,the,output,frame,stack;private,int,pop,if,output,stack,top,0,return,output,stack,output,stack,top,else,return,stack,owner,input,stack,top
Frame -> private int pop();1397644526;Pops a type from the output frame stack and returns its value.__@return the type that has been popped from the output frame stack.;private int pop() {_        if (outputStackTop > 0) {_            return outputStack[--outputStackTop]__        } else {_            _            return STACK | -(--owner.inputStackTop)__        }_    };pops,a,type,from,the,output,frame,stack,and,returns,its,value,return,the,type,that,has,been,popped,from,the,output,frame,stack;private,int,pop,if,output,stack,top,0,return,output,stack,output,stack,top,else,return,stack,owner,input,stack,top
Frame -> private int pop();1398255950;Pops a type from the output frame stack and returns its value.__@return the type that has been popped from the output frame stack.;private int pop() {_        if (outputStackTop > 0) {_            return outputStack[--outputStackTop]__        } else {_            _            return STACK | -(--owner.inputStackTop)__        }_    };pops,a,type,from,the,output,frame,stack,and,returns,its,value,return,the,type,that,has,been,popped,from,the,output,frame,stack;private,int,pop,if,output,stack,top,0,return,output,stack,output,stack,top,else,return,stack,owner,input,stack,top
Frame -> private int pop();1461047077;Pops a type from the output frame stack and returns its value.__@return the type that has been popped from the output frame stack.;private int pop() {_        if (outputStackTop > 0) {_            return outputStack[--outputStackTop]__        } else {_            _            return STACK | -(--owner.inputStackTop)__        }_    };pops,a,type,from,the,output,frame,stack,and,returns,its,value,return,the,type,that,has,been,popped,from,the,output,frame,stack;private,int,pop,if,output,stack,top,0,return,output,stack,output,stack,top,else,return,stack,owner,input,stack,top
Frame -> private int pop();1483093254;Pops a type from the output frame stack and returns its value.__@return the type that has been popped from the output frame stack.;private int pop() {_        if (outputStackTop > 0) {_            return outputStack[--outputStackTop]__        } else {_            _            return STACK | -(--owner.inputStackTop)__        }_    };pops,a,type,from,the,output,frame,stack,and,returns,its,value,return,the,type,that,has,been,popped,from,the,output,frame,stack;private,int,pop,if,output,stack,top,0,return,output,stack,output,stack,top,else,return,stack,owner,input,stack,top
Frame -> private int pop();1531241461;Pops an abstract type from the output frame stack and returns its value.__@return the abstract type that has been popped from the output frame stack.;private int pop() {_    if (outputStackTop > 0) {_      return outputStack[--outputStackTop]__    } else {_      _      return STACK_KIND | -(--outputStackStart)__    }_  };pops,an,abstract,type,from,the,output,frame,stack,and,returns,its,value,return,the,abstract,type,that,has,been,popped,from,the,output,frame,stack;private,int,pop,if,output,stack,top,0,return,output,stack,output,stack,top,else,return,output,stack,start
Frame -> private int pop();1536664245;Pops an abstract type from the output frame stack and returns its value.__@return the abstract type that has been popped from the output frame stack.;private int pop() {_    if (outputStackTop > 0) {_      return outputStack[--outputStackTop]__    } else {_      _      return STACK_KIND | -(--outputStackStart)__    }_  };pops,an,abstract,type,from,the,output,frame,stack,and,returns,its,value,return,the,abstract,type,that,has,been,popped,from,the,output,frame,stack;private,int,pop,if,output,stack,top,0,return,output,stack,output,stack,top,else,return,output,stack,start
Frame -> private int pop();1537204147;Pops an abstract type from the output frame stack and returns its value.__@return the abstract type that has been popped from the output frame stack.;private int pop() {_    if (outputStackTop > 0) {_      return outputStack[--outputStackTop]__    } else {_      _      return STACK_KIND | -(--outputStackStart)__    }_  };pops,an,abstract,type,from,the,output,frame,stack,and,returns,its,value,return,the,abstract,type,that,has,been,popped,from,the,output,frame,stack;private,int,pop,if,output,stack,top,0,return,output,stack,output,stack,top,else,return,output,stack,start
Frame -> private int getLocal(final int localIndex);1531241461;Returns the abstract type stored at the given local variable index in the output frame.__@param localIndex the index of the local variable whose value must be returned._@return the abstract type stored at the given local variable index in the output frame.;private int getLocal(final int localIndex) {_    if (outputLocals == null || localIndex >= outputLocals.length) {_      _      _      return LOCAL_KIND | localIndex__    } else {_      int abstractType = outputLocals[localIndex]__      if (abstractType == 0) {_        _        _        abstractType = outputLocals[localIndex] = LOCAL_KIND | localIndex__      }_      return abstractType__    }_  };returns,the,abstract,type,stored,at,the,given,local,variable,index,in,the,output,frame,param,local,index,the,index,of,the,local,variable,whose,value,must,be,returned,return,the,abstract,type,stored,at,the,given,local,variable,index,in,the,output,frame;private,int,get,local,final,int,local,index,if,output,locals,null,local,index,output,locals,length,return,local,index,else,int,abstract,type,output,locals,local,index,if,abstract,type,0,abstract,type,output,locals,local,index,local,index,return,abstract,type
Frame -> private int getLocal(final int localIndex);1536664245;Returns the abstract type stored at the given local variable index in the output frame.__@param localIndex the index of the local variable whose value must be returned._@return the abstract type stored at the given local variable index in the output frame.;private int getLocal(final int localIndex) {_    if (outputLocals == null || localIndex >= outputLocals.length) {_      _      _      return LOCAL_KIND | localIndex__    } else {_      int abstractType = outputLocals[localIndex]__      if (abstractType == 0) {_        _        _        abstractType = outputLocals[localIndex] = LOCAL_KIND | localIndex__      }_      return abstractType__    }_  };returns,the,abstract,type,stored,at,the,given,local,variable,index,in,the,output,frame,param,local,index,the,index,of,the,local,variable,whose,value,must,be,returned,return,the,abstract,type,stored,at,the,given,local,variable,index,in,the,output,frame;private,int,get,local,final,int,local,index,if,output,locals,null,local,index,output,locals,length,return,local,index,else,int,abstract,type,output,locals,local,index,if,abstract,type,0,abstract,type,output,locals,local,index,local,index,return,abstract,type
Frame -> private int getLocal(final int localIndex);1537204147;Returns the abstract type stored at the given local variable index in the output frame.__@param localIndex the index of the local variable whose value must be returned._@return the abstract type stored at the given local variable index in the output frame.;private int getLocal(final int localIndex) {_    if (outputLocals == null || localIndex >= outputLocals.length) {_      _      _      return LOCAL_KIND | localIndex__    } else {_      int abstractType = outputLocals[localIndex]__      if (abstractType == 0) {_        _        _        abstractType = outputLocals[localIndex] = LOCAL_KIND | localIndex__      }_      return abstractType__    }_  };returns,the,abstract,type,stored,at,the,given,local,variable,index,in,the,output,frame,param,local,index,the,index,of,the,local,variable,whose,value,must,be,returned,return,the,abstract,type,stored,at,the,given,local,variable,index,in,the,output,frame;private,int,get,local,final,int,local,index,if,output,locals,null,local,index,output,locals,length,return,local,index,else,int,abstract,type,output,locals,local,index,if,abstract,type,0,abstract,type,output,locals,local,index,local,index,return,abstract,type
Frame -> final void copyFrom(final Frame frame);1531241461;Sets this frame to the value of the given frame.__<p>WARNING: after this method is called the two frames share the same data structures. It is_recommended to discard the given frame to avoid unexpected side effects.__@param frame The new frame value.;final void copyFrom(final Frame frame) {_    inputLocals = frame.inputLocals__    inputStack = frame.inputStack__    outputStackStart = 0__    outputLocals = frame.outputLocals__    outputStack = frame.outputStack__    outputStackTop = frame.outputStackTop__    initializationCount = frame.initializationCount__    initializations = frame.initializations__  };sets,this,frame,to,the,value,of,the,given,frame,p,warning,after,this,method,is,called,the,two,frames,share,the,same,data,structures,it,is,recommended,to,discard,the,given,frame,to,avoid,unexpected,side,effects,param,frame,the,new,frame,value;final,void,copy,from,final,frame,frame,input,locals,frame,input,locals,input,stack,frame,input,stack,output,stack,start,0,output,locals,frame,output,locals,output,stack,frame,output,stack,output,stack,top,frame,output,stack,top,initialization,count,frame,initialization,count,initializations,frame,initializations
Frame -> final void copyFrom(final Frame frame);1536664245;Sets this frame to the value of the given frame.__<p>WARNING: after this method is called the two frames share the same data structures. It is_recommended to discard the given frame to avoid unexpected side effects.__@param frame The new frame value.;final void copyFrom(final Frame frame) {_    inputLocals = frame.inputLocals__    inputStack = frame.inputStack__    outputStackStart = 0__    outputLocals = frame.outputLocals__    outputStack = frame.outputStack__    outputStackTop = frame.outputStackTop__    initializationCount = frame.initializationCount__    initializations = frame.initializations__  };sets,this,frame,to,the,value,of,the,given,frame,p,warning,after,this,method,is,called,the,two,frames,share,the,same,data,structures,it,is,recommended,to,discard,the,given,frame,to,avoid,unexpected,side,effects,param,frame,the,new,frame,value;final,void,copy,from,final,frame,frame,input,locals,frame,input,locals,input,stack,frame,input,stack,output,stack,start,0,output,locals,frame,output,locals,output,stack,frame,output,stack,output,stack,top,frame,output,stack,top,initialization,count,frame,initialization,count,initializations,frame,initializations
Frame -> final void copyFrom(final Frame frame);1537204147;Sets this frame to the value of the given frame.__<p>WARNING: after this method is called the two frames share the same data structures. It is_recommended to discard the given frame to avoid unexpected side effects.__@param frame The new frame value.;final void copyFrom(final Frame frame) {_    inputLocals = frame.inputLocals__    inputStack = frame.inputStack__    outputStackStart = 0__    outputLocals = frame.outputLocals__    outputStack = frame.outputStack__    outputStackTop = frame.outputStackTop__    initializationCount = frame.initializationCount__    initializations = frame.initializations__  };sets,this,frame,to,the,value,of,the,given,frame,p,warning,after,this,method,is,called,the,two,frames,share,the,same,data,structures,it,is,recommended,to,discard,the,given,frame,to,avoid,unexpected,side,effects,param,frame,the,new,frame,value;final,void,copy,from,final,frame,frame,input,locals,frame,input,locals,input,stack,frame,input,stack,output,stack,start,0,output,locals,frame,output,locals,output,stack,frame,output,stack,output,stack,top,frame,output,stack,top,initialization,count,frame,initialization,count,initializations,frame,initializations
Frame -> private void push(final ClassWriter cw, final String desc);1366718246;Pushes a new type onto the output frame stack.__@param cw_the ClassWriter to which this label belongs._@param desc_the descriptor of the type to be pushed. Can also be a method_descriptor (in this case this method pushes its return type_onto the output frame stack).;private void push(final ClassWriter cw, final String desc) {_        int type = type(cw, desc)__        if (type != 0) {_            push(type)__            if (type == LONG || type == DOUBLE) {_                push(TOP)__            }_        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,the,descriptor,of,the,type,to,be,pushed,can,also,be,a,method,descriptor,in,this,case,this,method,pushes,its,return,type,onto,the,output,frame,stack;private,void,push,final,class,writer,cw,final,string,desc,int,type,type,cw,desc,if,type,0,push,type,if,type,long,type,double,push,top
Frame -> private void push(final ClassWriter cw, final String desc);1385423968;Pushes a new type onto the output frame stack.__@param cw_the ClassWriter to which this label belongs._@param desc_the descriptor of the type to be pushed. Can also be a method_descriptor (in this case this method pushes its return type_onto the output frame stack).;private void push(final ClassWriter cw, final String desc) {_        int type = type(cw, desc)__        if (type != 0) {_            push(type)__            if (type == LONG || type == DOUBLE) {_                push(TOP)__            }_        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,the,descriptor,of,the,type,to,be,pushed,can,also,be,a,method,descriptor,in,this,case,this,method,pushes,its,return,type,onto,the,output,frame,stack;private,void,push,final,class,writer,cw,final,string,desc,int,type,type,cw,desc,if,type,0,push,type,if,type,long,type,double,push,top
Frame -> private void push(final ClassWriter cw, final String desc);1395273982;Pushes a new type onto the output frame stack.__@param cw_the ClassWriter to which this label belongs._@param desc_the descriptor of the type to be pushed. Can also be a method_descriptor (in this case this method pushes its return type_onto the output frame stack).;private void push(final ClassWriter cw, final String desc) {_        int type = type(cw, desc)__        if (type != 0) {_            push(type)__            if (type == LONG || type == DOUBLE) {_                push(TOP)__            }_        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,the,descriptor,of,the,type,to,be,pushed,can,also,be,a,method,descriptor,in,this,case,this,method,pushes,its,return,type,onto,the,output,frame,stack;private,void,push,final,class,writer,cw,final,string,desc,int,type,type,cw,desc,if,type,0,push,type,if,type,long,type,double,push,top
Frame -> private void push(final ClassWriter cw, final String desc);1397644526;Pushes a new type onto the output frame stack.__@param cw_the ClassWriter to which this label belongs._@param desc_the descriptor of the type to be pushed. Can also be a method_descriptor (in this case this method pushes its return type_onto the output frame stack).;private void push(final ClassWriter cw, final String desc) {_        int type = type(cw, desc)__        if (type != 0) {_            push(type)__            if (type == LONG || type == DOUBLE) {_                push(TOP)__            }_        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,the,descriptor,of,the,type,to,be,pushed,can,also,be,a,method,descriptor,in,this,case,this,method,pushes,its,return,type,onto,the,output,frame,stack;private,void,push,final,class,writer,cw,final,string,desc,int,type,type,cw,desc,if,type,0,push,type,if,type,long,type,double,push,top
Frame -> private void push(final ClassWriter cw, final String desc);1398255950;Pushes a new type onto the output frame stack.__@param cw_the ClassWriter to which this label belongs._@param desc_the descriptor of the type to be pushed. Can also be a method_descriptor (in this case this method pushes its return type_onto the output frame stack).;private void push(final ClassWriter cw, final String desc) {_        int type = type(cw, desc)__        if (type != 0) {_            push(type)__            if (type == LONG || type == DOUBLE) {_                push(TOP)__            }_        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,the,descriptor,of,the,type,to,be,pushed,can,also,be,a,method,descriptor,in,this,case,this,method,pushes,its,return,type,onto,the,output,frame,stack;private,void,push,final,class,writer,cw,final,string,desc,int,type,type,cw,desc,if,type,0,push,type,if,type,long,type,double,push,top
Frame -> private void push(final ClassWriter cw, final String desc);1461047077;Pushes a new type onto the output frame stack.__@param cw_the ClassWriter to which this label belongs._@param desc_the descriptor of the type to be pushed. Can also be a method_descriptor (in this case this method pushes its return type_onto the output frame stack).;private void push(final ClassWriter cw, final String desc) {_        int type = type(cw, desc)__        if (type != 0) {_            push(type)__            if (type == LONG || type == DOUBLE) {_                push(TOP)__            }_        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,the,descriptor,of,the,type,to,be,pushed,can,also,be,a,method,descriptor,in,this,case,this,method,pushes,its,return,type,onto,the,output,frame,stack;private,void,push,final,class,writer,cw,final,string,desc,int,type,type,cw,desc,if,type,0,push,type,if,type,long,type,double,push,top
Frame -> private void push(final ClassWriter cw, final String desc);1483093254;Pushes a new type onto the output frame stack.__@param cw_the ClassWriter to which this label belongs._@param desc_the descriptor of the type to be pushed. Can also be a method_descriptor (in this case this method pushes its return type_onto the output frame stack).;private void push(final ClassWriter cw, final String desc) {_        int type = type(cw, desc)__        if (type != 0) {_            push(type)__            if (type == LONG || type == DOUBLE) {_                push(TOP)__            }_        }_    };pushes,a,new,type,onto,the,output,frame,stack,param,cw,the,class,writer,to,which,this,label,belongs,param,desc,the,descriptor,of,the,type,to,be,pushed,can,also,be,a,method,descriptor,in,this,case,this,method,pushes,its,return,type,onto,the,output,frame,stack;private,void,push,final,class,writer,cw,final,string,desc,int,type,type,cw,desc,if,type,0,push,type,if,type,long,type,double,push,top
Frame -> void initInputFrame(final ClassWriter cw, final int access,             final Type[] args, final int maxLocals);1366718246;Initializes the input frame of the first basic block from the method_descriptor.__@param cw_the ClassWriter to which this label belongs._@param access_the access flags of the method to which this label belongs._@param args_the formal parameter types of this method._@param maxLocals_the maximum number of local variables of this method.;void initInputFrame(final ClassWriter cw, final int access,_            final Type[] args, final int maxLocals) {_        inputLocals = new int[maxLocals]__        inputStack = new int[0]__        int i = 0__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {_                inputLocals[i++] = OBJECT | cw.addType(cw.thisName)__            } else {_                inputLocals[i++] = UNINITIALIZED_THIS__            }_        }_        for (int j = 0_ j < args.length_ ++j) {_            int t = type(cw, args[j].getDescriptor())__            inputLocals[i++] = t__            if (t == LONG || t == DOUBLE) {_                inputLocals[i++] = TOP__            }_        }_        while (i < maxLocals) {_            inputLocals[i++] = TOP__        }_    };initializes,the,input,frame,of,the,first,basic,block,from,the,method,descriptor,param,cw,the,class,writer,to,which,this,label,belongs,param,access,the,access,flags,of,the,method,to,which,this,label,belongs,param,args,the,formal,parameter,types,of,this,method,param,max,locals,the,maximum,number,of,local,variables,of,this,method;void,init,input,frame,final,class,writer,cw,final,int,access,final,type,args,final,int,max,locals,input,locals,new,int,max,locals,input,stack,new,int,0,int,i,0,if,access,opcodes,0,if,access,method,writer,0,input,locals,i,object,cw,add,type,cw,this,name,else,input,locals,i,for,int,j,0,j,args,length,j,int,t,type,cw,args,j,get,descriptor,input,locals,i,t,if,t,long,t,double,input,locals,i,top,while,i,max,locals,input,locals,i,top
Frame -> void initInputFrame(final ClassWriter cw, final int access,             final Type[] args, final int maxLocals);1385423968;Initializes the input frame of the first basic block from the method_descriptor.__@param cw_the ClassWriter to which this label belongs._@param access_the access flags of the method to which this label belongs._@param args_the formal parameter types of this method._@param maxLocals_the maximum number of local variables of this method.;void initInputFrame(final ClassWriter cw, final int access,_            final Type[] args, final int maxLocals) {_        inputLocals = new int[maxLocals]__        inputStack = new int[0]__        int i = 0__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {_                inputLocals[i++] = OBJECT | cw.addType(cw.thisName)__            } else {_                inputLocals[i++] = UNINITIALIZED_THIS__            }_        }_        for (int j = 0_ j < args.length_ ++j) {_            int t = type(cw, args[j].getDescriptor())__            inputLocals[i++] = t__            if (t == LONG || t == DOUBLE) {_                inputLocals[i++] = TOP__            }_        }_        while (i < maxLocals) {_            inputLocals[i++] = TOP__        }_    };initializes,the,input,frame,of,the,first,basic,block,from,the,method,descriptor,param,cw,the,class,writer,to,which,this,label,belongs,param,access,the,access,flags,of,the,method,to,which,this,label,belongs,param,args,the,formal,parameter,types,of,this,method,param,max,locals,the,maximum,number,of,local,variables,of,this,method;void,init,input,frame,final,class,writer,cw,final,int,access,final,type,args,final,int,max,locals,input,locals,new,int,max,locals,input,stack,new,int,0,int,i,0,if,access,opcodes,0,if,access,method,writer,0,input,locals,i,object,cw,add,type,cw,this,name,else,input,locals,i,for,int,j,0,j,args,length,j,int,t,type,cw,args,j,get,descriptor,input,locals,i,t,if,t,long,t,double,input,locals,i,top,while,i,max,locals,input,locals,i,top
Frame -> void initInputFrame(final ClassWriter cw, final int access,             final Type[] args, final int maxLocals);1395273982;Initializes the input frame of the first basic block from the method_descriptor.__@param cw_the ClassWriter to which this label belongs._@param access_the access flags of the method to which this label belongs._@param args_the formal parameter types of this method._@param maxLocals_the maximum number of local variables of this method.;void initInputFrame(final ClassWriter cw, final int access,_            final Type[] args, final int maxLocals) {_        inputLocals = new int[maxLocals]__        inputStack = new int[0]__        int i = 0__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {_                inputLocals[i++] = OBJECT | cw.addType(cw.thisName)__            } else {_                inputLocals[i++] = UNINITIALIZED_THIS__            }_        }_        for (int j = 0_ j < args.length_ ++j) {_            int t = type(cw, args[j].getDescriptor())__            inputLocals[i++] = t__            if (t == LONG || t == DOUBLE) {_                inputLocals[i++] = TOP__            }_        }_        while (i < maxLocals) {_            inputLocals[i++] = TOP__        }_    };initializes,the,input,frame,of,the,first,basic,block,from,the,method,descriptor,param,cw,the,class,writer,to,which,this,label,belongs,param,access,the,access,flags,of,the,method,to,which,this,label,belongs,param,args,the,formal,parameter,types,of,this,method,param,max,locals,the,maximum,number,of,local,variables,of,this,method;void,init,input,frame,final,class,writer,cw,final,int,access,final,type,args,final,int,max,locals,input,locals,new,int,max,locals,input,stack,new,int,0,int,i,0,if,access,opcodes,0,if,access,method,writer,0,input,locals,i,object,cw,add,type,cw,this,name,else,input,locals,i,for,int,j,0,j,args,length,j,int,t,type,cw,args,j,get,descriptor,input,locals,i,t,if,t,long,t,double,input,locals,i,top,while,i,max,locals,input,locals,i,top
Frame -> void initInputFrame(final ClassWriter cw, final int access,             final Type[] args, final int maxLocals);1397644526;Initializes the input frame of the first basic block from the method_descriptor.__@param cw_the ClassWriter to which this label belongs._@param access_the access flags of the method to which this label belongs._@param args_the formal parameter types of this method._@param maxLocals_the maximum number of local variables of this method.;void initInputFrame(final ClassWriter cw, final int access,_            final Type[] args, final int maxLocals) {_        inputLocals = new int[maxLocals]__        inputStack = new int[0]__        int i = 0__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {_                inputLocals[i++] = OBJECT | cw.addType(cw.thisName)__            } else {_                inputLocals[i++] = UNINITIALIZED_THIS__            }_        }_        for (int j = 0_ j < args.length_ ++j) {_            int t = type(cw, args[j].getDescriptor())__            inputLocals[i++] = t__            if (t == LONG || t == DOUBLE) {_                inputLocals[i++] = TOP__            }_        }_        while (i < maxLocals) {_            inputLocals[i++] = TOP__        }_    };initializes,the,input,frame,of,the,first,basic,block,from,the,method,descriptor,param,cw,the,class,writer,to,which,this,label,belongs,param,access,the,access,flags,of,the,method,to,which,this,label,belongs,param,args,the,formal,parameter,types,of,this,method,param,max,locals,the,maximum,number,of,local,variables,of,this,method;void,init,input,frame,final,class,writer,cw,final,int,access,final,type,args,final,int,max,locals,input,locals,new,int,max,locals,input,stack,new,int,0,int,i,0,if,access,opcodes,0,if,access,method,writer,0,input,locals,i,object,cw,add,type,cw,this,name,else,input,locals,i,for,int,j,0,j,args,length,j,int,t,type,cw,args,j,get,descriptor,input,locals,i,t,if,t,long,t,double,input,locals,i,top,while,i,max,locals,input,locals,i,top
Frame -> void initInputFrame(final ClassWriter cw, final int access,             final Type[] args, final int maxLocals);1398255950;Initializes the input frame of the first basic block from the method_descriptor.__@param cw_the ClassWriter to which this label belongs._@param access_the access flags of the method to which this label belongs._@param args_the formal parameter types of this method._@param maxLocals_the maximum number of local variables of this method.;void initInputFrame(final ClassWriter cw, final int access,_            final Type[] args, final int maxLocals) {_        inputLocals = new int[maxLocals]__        inputStack = new int[0]__        int i = 0__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {_                inputLocals[i++] = OBJECT | cw.addType(cw.thisName)__            } else {_                inputLocals[i++] = UNINITIALIZED_THIS__            }_        }_        for (int j = 0_ j < args.length_ ++j) {_            int t = type(cw, args[j].getDescriptor())__            inputLocals[i++] = t__            if (t == LONG || t == DOUBLE) {_                inputLocals[i++] = TOP__            }_        }_        while (i < maxLocals) {_            inputLocals[i++] = TOP__        }_    };initializes,the,input,frame,of,the,first,basic,block,from,the,method,descriptor,param,cw,the,class,writer,to,which,this,label,belongs,param,access,the,access,flags,of,the,method,to,which,this,label,belongs,param,args,the,formal,parameter,types,of,this,method,param,max,locals,the,maximum,number,of,local,variables,of,this,method;void,init,input,frame,final,class,writer,cw,final,int,access,final,type,args,final,int,max,locals,input,locals,new,int,max,locals,input,stack,new,int,0,int,i,0,if,access,opcodes,0,if,access,method,writer,0,input,locals,i,object,cw,add,type,cw,this,name,else,input,locals,i,for,int,j,0,j,args,length,j,int,t,type,cw,args,j,get,descriptor,input,locals,i,t,if,t,long,t,double,input,locals,i,top,while,i,max,locals,input,locals,i,top
Frame -> void initInputFrame(final ClassWriter cw, final int access,             final Type[] args, final int maxLocals);1461047077;Initializes the input frame of the first basic block from the method_descriptor.__@param cw_the ClassWriter to which this label belongs._@param access_the access flags of the method to which this label belongs._@param args_the formal parameter types of this method._@param maxLocals_the maximum number of local variables of this method.;void initInputFrame(final ClassWriter cw, final int access,_            final Type[] args, final int maxLocals) {_        inputLocals = new int[maxLocals]__        inputStack = new int[0]__        int i = 0__        if ((access & Opcodes.ACC_STATIC) == 0) {_            if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {_                inputLocals[i++] = OBJECT | cw.addType(cw.thisName)__            } else {_                inputLocals[i++] = UNINITIALIZED_THIS__            }_        }_        for (int j = 0_ j < args.length_ ++j) {_            int t = type(cw, args[j].getDescriptor())__            inputLocals[i++] = t__            if (t == LONG || t == DOUBLE) {_                inputLocals[i++] = TOP__            }_        }_        while (i < maxLocals) {_            inputLocals[i++] = TOP__        }_    };initializes,the,input,frame,of,the,first,basic,block,from,the,method,descriptor,param,cw,the,class,writer,to,which,this,label,belongs,param,access,the,access,flags,of,the,method,to,which,this,label,belongs,param,args,the,formal,parameter,types,of,this,method,param,max,locals,the,maximum,number,of,local,variables,of,this,method;void,init,input,frame,final,class,writer,cw,final,int,access,final,type,args,final,int,max,locals,input,locals,new,int,max,locals,input,stack,new,int,0,int,i,0,if,access,opcodes,0,if,access,method,writer,0,input,locals,i,object,cw,add,type,cw,this,name,else,input,locals,i,for,int,j,0,j,args,length,j,int,t,type,cw,args,j,get,descriptor,input,locals,i,t,if,t,long,t,double,input,locals,i,top,while,i,max,locals,input,locals,i,top
Frame -> final void accept(final MethodWriter methodWriter);1531241461;Makes the given {@link MethodWriter} visit the input frame of this {@link Frame}. The visit is_done with the {@link MethodWriter#visitFrameStart}, {@link MethodWriter#visitAbstractType} and_{@link MethodWriter#visitFrameEnd} methods.__@param methodWriter the {@link MethodWriter} that should visit the input frame of this {@link_Frame}.;final void accept(final MethodWriter methodWriter) {_    _    _    int[] localTypes = inputLocals__    int nLocal = 0__    int nTrailingTop = 0__    int i = 0__    while (i < localTypes.length) {_      int localType = localTypes[i]__      i += (localType == LONG || localType == DOUBLE) ? 2 : 1__      if (localType == TOP) {_        nTrailingTop++__      } else {_        nLocal += nTrailingTop + 1__        nTrailingTop = 0__      }_    }_    _    int[] stackTypes = inputStack__    int nStack = 0__    i = 0__    while (i < stackTypes.length) {_      int stackType = stackTypes[i]__      i += (stackType == LONG || stackType == DOUBLE) ? 2 : 1__      nStack++__    }_    _    int frameIndex = methodWriter.visitFrameStart(owner.bytecodeOffset, nLocal, nStack)__    i = 0__    while (nLocal-- > 0) {_      int localType = localTypes[i]__      i += (localType == LONG || localType == DOUBLE) ? 2 : 1__      methodWriter.visitAbstractType(frameIndex++, localType)__    }_    i = 0__    while (nStack-- > 0) {_      int stackType = stackTypes[i]__      i += (stackType == LONG || stackType == DOUBLE) ? 2 : 1__      methodWriter.visitAbstractType(frameIndex++, stackType)__    }_    methodWriter.visitFrameEnd()__  };makes,the,given,link,method,writer,visit,the,input,frame,of,this,link,frame,the,visit,is,done,with,the,link,method,writer,visit,frame,start,link,method,writer,visit,abstract,type,and,link,method,writer,visit,frame,end,methods,param,method,writer,the,link,method,writer,that,should,visit,the,input,frame,of,this,link,frame;final,void,accept,final,method,writer,method,writer,int,local,types,input,locals,int,n,local,0,int,n,trailing,top,0,int,i,0,while,i,local,types,length,int,local,type,local,types,i,i,local,type,long,local,type,double,2,1,if,local,type,top,n,trailing,top,else,n,local,n,trailing,top,1,n,trailing,top,0,int,stack,types,input,stack,int,n,stack,0,i,0,while,i,stack,types,length,int,stack,type,stack,types,i,i,stack,type,long,stack,type,double,2,1,n,stack,int,frame,index,method,writer,visit,frame,start,owner,bytecode,offset,n,local,n,stack,i,0,while,n,local,0,int,local,type,local,types,i,i,local,type,long,local,type,double,2,1,method,writer,visit,abstract,type,frame,index,local,type,i,0,while,n,stack,0,int,stack,type,stack,types,i,i,stack,type,long,stack,type,double,2,1,method,writer,visit,abstract,type,frame,index,stack,type,method,writer,visit,frame,end
Frame -> final void accept(final MethodWriter methodWriter);1536664245;Makes the given {@link MethodWriter} visit the input frame of this {@link Frame}. The visit is_done with the {@link MethodWriter#visitFrameStart}, {@link MethodWriter#visitAbstractType} and_{@link MethodWriter#visitFrameEnd} methods.__@param methodWriter the {@link MethodWriter} that should visit the input frame of this {@link_Frame}.;final void accept(final MethodWriter methodWriter) {_    _    _    int[] localTypes = inputLocals__    int nLocal = 0__    int nTrailingTop = 0__    int i = 0__    while (i < localTypes.length) {_      int localType = localTypes[i]__      i += (localType == LONG || localType == DOUBLE) ? 2 : 1__      if (localType == TOP) {_        nTrailingTop++__      } else {_        nLocal += nTrailingTop + 1__        nTrailingTop = 0__      }_    }_    _    int[] stackTypes = inputStack__    int nStack = 0__    i = 0__    while (i < stackTypes.length) {_      int stackType = stackTypes[i]__      i += (stackType == LONG || stackType == DOUBLE) ? 2 : 1__      nStack++__    }_    _    int frameIndex = methodWriter.visitFrameStart(owner.bytecodeOffset, nLocal, nStack)__    i = 0__    while (nLocal-- > 0) {_      int localType = localTypes[i]__      i += (localType == LONG || localType == DOUBLE) ? 2 : 1__      methodWriter.visitAbstractType(frameIndex++, localType)__    }_    i = 0__    while (nStack-- > 0) {_      int stackType = stackTypes[i]__      i += (stackType == LONG || stackType == DOUBLE) ? 2 : 1__      methodWriter.visitAbstractType(frameIndex++, stackType)__    }_    methodWriter.visitFrameEnd()__  };makes,the,given,link,method,writer,visit,the,input,frame,of,this,link,frame,the,visit,is,done,with,the,link,method,writer,visit,frame,start,link,method,writer,visit,abstract,type,and,link,method,writer,visit,frame,end,methods,param,method,writer,the,link,method,writer,that,should,visit,the,input,frame,of,this,link,frame;final,void,accept,final,method,writer,method,writer,int,local,types,input,locals,int,n,local,0,int,n,trailing,top,0,int,i,0,while,i,local,types,length,int,local,type,local,types,i,i,local,type,long,local,type,double,2,1,if,local,type,top,n,trailing,top,else,n,local,n,trailing,top,1,n,trailing,top,0,int,stack,types,input,stack,int,n,stack,0,i,0,while,i,stack,types,length,int,stack,type,stack,types,i,i,stack,type,long,stack,type,double,2,1,n,stack,int,frame,index,method,writer,visit,frame,start,owner,bytecode,offset,n,local,n,stack,i,0,while,n,local,0,int,local,type,local,types,i,i,local,type,long,local,type,double,2,1,method,writer,visit,abstract,type,frame,index,local,type,i,0,while,n,stack,0,int,stack,type,stack,types,i,i,stack,type,long,stack,type,double,2,1,method,writer,visit,abstract,type,frame,index,stack,type,method,writer,visit,frame,end
Frame -> final void accept(final MethodWriter methodWriter);1537204147;Makes the given {@link MethodWriter} visit the input frame of this {@link Frame}. The visit is_done with the {@link MethodWriter#visitFrameStart}, {@link MethodWriter#visitAbstractType} and_{@link MethodWriter#visitFrameEnd} methods.__@param methodWriter the {@link MethodWriter} that should visit the input frame of this {@link_Frame}.;final void accept(final MethodWriter methodWriter) {_    _    _    int[] localTypes = inputLocals__    int numLocal = 0__    int numTrailingTop = 0__    int i = 0__    while (i < localTypes.length) {_      int localType = localTypes[i]__      i += (localType == LONG || localType == DOUBLE) ? 2 : 1__      if (localType == TOP) {_        numTrailingTop++__      } else {_        numLocal += numTrailingTop + 1__        numTrailingTop = 0__      }_    }_    _    int[] stackTypes = inputStack__    int numStack = 0__    i = 0__    while (i < stackTypes.length) {_      int stackType = stackTypes[i]__      i += (stackType == LONG || stackType == DOUBLE) ? 2 : 1__      numStack++__    }_    _    int frameIndex = methodWriter.visitFrameStart(owner.bytecodeOffset, numLocal, numStack)__    i = 0__    while (numLocal-- > 0) {_      int localType = localTypes[i]__      i += (localType == LONG || localType == DOUBLE) ? 2 : 1__      methodWriter.visitAbstractType(frameIndex++, localType)__    }_    i = 0__    while (numStack-- > 0) {_      int stackType = stackTypes[i]__      i += (stackType == LONG || stackType == DOUBLE) ? 2 : 1__      methodWriter.visitAbstractType(frameIndex++, stackType)__    }_    methodWriter.visitFrameEnd()__  };makes,the,given,link,method,writer,visit,the,input,frame,of,this,link,frame,the,visit,is,done,with,the,link,method,writer,visit,frame,start,link,method,writer,visit,abstract,type,and,link,method,writer,visit,frame,end,methods,param,method,writer,the,link,method,writer,that,should,visit,the,input,frame,of,this,link,frame;final,void,accept,final,method,writer,method,writer,int,local,types,input,locals,int,num,local,0,int,num,trailing,top,0,int,i,0,while,i,local,types,length,int,local,type,local,types,i,i,local,type,long,local,type,double,2,1,if,local,type,top,num,trailing,top,else,num,local,num,trailing,top,1,num,trailing,top,0,int,stack,types,input,stack,int,num,stack,0,i,0,while,i,stack,types,length,int,stack,type,stack,types,i,i,stack,type,long,stack,type,double,2,1,num,stack,int,frame,index,method,writer,visit,frame,start,owner,bytecode,offset,num,local,num,stack,i,0,while,num,local,0,int,local,type,local,types,i,i,local,type,long,local,type,double,2,1,method,writer,visit,abstract,type,frame,index,local,type,i,0,while,num,stack,0,int,stack,type,stack,types,i,i,stack,type,long,stack,type,double,2,1,method,writer,visit,abstract,type,frame,index,stack,type,method,writer,visit,frame,end
