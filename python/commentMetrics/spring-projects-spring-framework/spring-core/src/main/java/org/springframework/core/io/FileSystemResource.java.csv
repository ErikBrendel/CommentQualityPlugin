# id;timestamp;commentText;codeText;commentWords;codeWords
FileSystemResource -> @Override 	public boolean isReadable();1328020251;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1329393628;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1356735495;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1357119239;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1368482696;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1398290143;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1444131013;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1468947211;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1469049917;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1473882375;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1493804641;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1500332081;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1509635140;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1515363508;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file.canRead() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,can,read,this,file,is,directory
FileSystemResource -> @Override 	public boolean isReadable();1529093534;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file != null ? this.file.canRead() && !this.file.isDirectory() :_				Files.isReadable(this.filePath) && !Files.isDirectory(this.filePath))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,null,this,file,can,read,this,file,is,directory,files,is,readable,this,file,path,files,is,directory,this,file,path
FileSystemResource -> @Override 	public boolean isReadable();1530190293;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file != null ? this.file.canRead() && !this.file.isDirectory() :_				Files.isReadable(this.filePath) && !Files.isDirectory(this.filePath))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,null,this,file,can,read,this,file,is,directory,files,is,readable,this,file,path,files,is,directory,this,file,path
FileSystemResource -> @Override 	public boolean isReadable();1539119591;This implementation checks whether the underlying file is marked as readable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canRead()_@see java.io.File#isDirectory();@Override_	public boolean isReadable() {_		return (this.file != null ? this.file.canRead() && !this.file.isDirectory() :_				Files.isReadable(this.filePath) && !Files.isDirectory(this.filePath))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,readable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,read,see,java,io,file,is,directory;override,public,boolean,is,readable,return,this,file,null,this,file,can,read,this,file,is,directory,files,is,readable,this,file,path,files,is,directory,this,file,path
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1328020251;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1329393628;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1356735495;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1357119239;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1368482696;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1398290143;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1444131013;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1468947211;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1469049917;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1473882375;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1493804641;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1500332081;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1509635140;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1515363508;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1529093534;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1530190293;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return new FileSystemResource(pathToUse)__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,new,file,system,resource,path,to,use
FileSystemResource -> @Override 	public Resource createRelative(String relativePath);1539119591;This implementation creates a FileSystemResource, applying the given path_relative to the path of the underlying file of this resource descriptor._@see org.springframework.util.StringUtils#applyRelativePath(String, String);@Override_	public Resource createRelative(String relativePath) {_		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath)__		return (this.file != null ? new FileSystemResource(pathToUse) :_				new FileSystemResource(this.filePath.getFileSystem(), pathToUse))__	};this,implementation,creates,a,file,system,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,file,of,this,resource,descriptor,see,org,springframework,util,string,utils,apply,relative,path,string,string;override,public,resource,create,relative,string,relative,path,string,path,to,use,string,utils,apply,relative,path,this,path,relative,path,return,this,file,null,new,file,system,resource,path,to,use,new,file,system,resource,this,file,path,get,file,system,path,to,use
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1356735495;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return new FileOutputStream(this.file)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,new,file,output,stream,this,file
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1368482696;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return new FileOutputStream(this.file)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,new,file,output,stream,this,file
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1398290143;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return new FileOutputStream(this.file)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,new,file,output,stream,this,file
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1444131013;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return new FileOutputStream(this.file)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,new,file,output,stream,this,file
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1468947211;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return new FileOutputStream(this.file)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,new,file,output,stream,this,file
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1469049917;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return new FileOutputStream(this.file)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,new,file,output,stream,this,file
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1473882375;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return new FileOutputStream(this.file)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,new,file,output,stream,this,file
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1493804641;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return new FileOutputStream(this.file)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,new,file,output,stream,this,file
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1500332081;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return Files.newOutputStream(this.file.toPath())__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,files,new,output,stream,this,file,to,path
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1509635140;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return Files.newOutputStream(this.file.toPath())__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,files,new,output,stream,this,file,to,path
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1515363508;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return Files.newOutputStream(this.file.toPath())__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,files,new,output,stream,this,file,to,path
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1529093534;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return Files.newOutputStream(this.filePath)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,files,new,output,stream,this,file,path
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1530190293;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return Files.newOutputStream(this.filePath)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,files,new,output,stream,this,file,path
FileSystemResource -> @Override 	public OutputStream getOutputStream() throws IOException;1539119591;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;@Override_	public OutputStream getOutputStream() throws IOException {_		return Files.newOutputStream(this.filePath)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;override,public,output,stream,get,output,stream,throws,ioexception,return,files,new,output,stream,this,file,path
FileSystemResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1473882375;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return new FileInputStream(this.file).getChannel()__	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,new,file,input,stream,this,file,get,channel
FileSystemResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1493804641;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return new FileInputStream(this.file).getChannel()__	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,new,file,input,stream,this,file,get,channel
FileSystemResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1500332081;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return FileChannel.open(getFile().toPath(), StandardOpenOption.READ)__	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,file,channel,open,get,file,to,path,standard,open,option,read
FileSystemResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1509635140;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		return FileChannel.open(this.file.toPath(), StandardOpenOption.READ)__	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,readable,byte,channel,readable,channel,throws,ioexception,return,file,channel,open,this,file,to,path,standard,open,option,read
FileSystemResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1515363508;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			return FileChannel.open(this.file.toPath(), StandardOpenOption.READ)__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,file,channel,open,this,file,to,path,standard,open,option,read,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
FileSystemResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1529093534;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			return FileChannel.open(this.filePath, StandardOpenOption.READ)__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,file,channel,open,this,file,path,standard,open,option,read,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
FileSystemResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1530190293;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			return FileChannel.open(this.filePath, StandardOpenOption.READ)__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,file,channel,open,this,file,path,standard,open,option,read,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
FileSystemResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1539119591;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			return FileChannel.open(this.filePath, StandardOpenOption.READ)__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,file,channel,open,this,file,path,standard,open,option,read,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
FileSystemResource -> @Override 	public boolean exists();1328020251;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1329393628;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1356735495;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1357119239;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1368482696;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1398290143;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1444131013;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1468947211;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1469049917;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1473882375;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1493804641;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1500332081;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1509635140;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1515363508;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return this.file.exists()__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,exists
FileSystemResource -> @Override 	public boolean exists();1529093534;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return (this.file != null ? this.file.exists() : Files.exists(this.filePath))__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,null,this,file,exists,files,exists,this,file,path
FileSystemResource -> @Override 	public boolean exists();1530190293;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return (this.file != null ? this.file.exists() : Files.exists(this.filePath))__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,null,this,file,exists,files,exists,this,file,path
FileSystemResource -> @Override 	public boolean exists();1539119591;This implementation returns whether the underlying file exists._@see java.io.File#exists();@Override_	public boolean exists() {_		return (this.file != null ? this.file.exists() : Files.exists(this.filePath))__	};this,implementation,returns,whether,the,underlying,file,exists,see,java,io,file,exists;override,public,boolean,exists,return,this,file,null,this,file,exists,files,exists,this,file,path
FileSystemResource -> @Override 	public int hashCode();1328020251;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1329393628;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1356735495;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1357119239;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1368482696;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1398290143;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1444131013;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1468947211;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1469049917;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1473882375;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1493804641;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1500332081;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1509635140;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1515363508;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1529093534;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1530190293;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public int hashCode();1539119591;This implementation returns the hash code of the underlying File reference.;@Override_	public int hashCode() {_		return this.path.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,file,reference;override,public,int,hash,code,return,this,path,hash,code
FileSystemResource -> @Override 	public long contentLength() throws IOException;1329393628;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1356735495;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1357119239;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1368482696;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1398290143;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1444131013;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1468947211;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1469049917;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1473882375;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1493804641;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1500332081;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1509635140;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1515363508;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return this.file.length()__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,length
FileSystemResource -> @Override 	public long contentLength() throws IOException;1529093534;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return (this.file != null ? this.file.length() : Files.size(this.filePath))__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,null,this,file,length,files,size,this,file,path
FileSystemResource -> @Override 	public long contentLength() throws IOException;1530190293;This implementation returns the underlying File's length.;@Override_	public long contentLength() throws IOException {_		return (this.file != null ? this.file.length() : Files.size(this.filePath))__	};this,implementation,returns,the,underlying,file,s,length;override,public,long,content,length,throws,ioexception,return,this,file,null,this,file,length,files,size,this,file,path
FileSystemResource -> @Override 	public long contentLength() throws IOException;1539119591;This implementation returns the underlying File/Path length.;@Override_	public long contentLength() throws IOException {_		if (this.file != null) {_			long length = this.file.length()__			if (length == 0L && !this.file.exists()) {_				throw new FileNotFoundException(getDescription() +_						" cannot be resolved in the file system for checking its content length")__			}_			return length__		}_		else {_			try {_				return Files.size(this.filePath)__			}_			catch (NoSuchFileException ex) {_				throw new FileNotFoundException(ex.getMessage())__			}_		}_	};this,implementation,returns,the,underlying,file,path,length;override,public,long,content,length,throws,ioexception,if,this,file,null,long,length,this,file,length,if,length,0l,this,file,exists,throw,new,file,not,found,exception,get,description,cannot,be,resolved,in,the,file,system,for,checking,its,content,length,return,length,else,try,return,files,size,this,file,path,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
FileSystemResource -> @Override 	public URL getURL() throws IOException;1328020251;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1329393628;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1356735495;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1357119239;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1368482696;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1398290143;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1444131013;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1468947211;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1469049917;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1473882375;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1493804641;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1500332081;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1509635140;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1515363508;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return this.file.toURI().toURL()__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1529093534;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return (this.file != null ? this.file.toURI().toURL() : this.filePath.toUri().toURL())__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,null,this,file,to,uri,to,url,this,file,path,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1530190293;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return (this.file != null ? this.file.toURI().toURL() : this.filePath.toUri().toURL())__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,null,this,file,to,uri,to,url,this,file,path,to,uri,to,url
FileSystemResource -> @Override 	public URL getURL() throws IOException;1539119591;This implementation returns a URL for the underlying file._@see java.io.File#toURI();@Override_	public URL getURL() throws IOException {_		return (this.file != null ? this.file.toURI().toURL() : this.filePath.toUri().toURL())__	};this,implementation,returns,a,url,for,the,underlying,file,see,java,io,file,to,uri;override,public,url,get,url,throws,ioexception,return,this,file,null,this,file,to,uri,to,url,this,file,path,to,uri,to,url
FileSystemResource -> public final String getPath();1328020251;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1329393628;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1356735495;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1357119239;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1368482696;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1398290143;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1444131013;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1468947211;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1469049917;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1473882375;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1493804641;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1500332081;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1509635140;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1515363508;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1529093534;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1530190293;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public final String getPath();1539119591;Return the file path for this resource.;public final String getPath() {_		return this.path__	};return,the,file,path,for,this,resource;public,final,string,get,path,return,this,path
FileSystemResource -> public InputStream getInputStream() throws IOException;1328020251;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;public InputStream getInputStream() throws IOException {_		return new FileInputStream(this.file)__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;public,input,stream,get,input,stream,throws,ioexception,return,new,file,input,stream,this,file
FileSystemResource -> public InputStream getInputStream() throws IOException;1329393628;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;public InputStream getInputStream() throws IOException {_		return new FileInputStream(this.file)__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;public,input,stream,get,input,stream,throws,ioexception,return,new,file,input,stream,this,file
FileSystemResource -> public InputStream getInputStream() throws IOException;1357119239;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;public InputStream getInputStream() throws IOException {_		return new FileInputStream(this.file)__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;public,input,stream,get,input,stream,throws,ioexception,return,new,file,input,stream,this,file
FileSystemResource -> @Override 	public String getFilename();1328020251;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1329393628;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1356735495;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1357119239;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1368482696;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1398290143;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1444131013;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1468947211;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1469049917;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1473882375;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1493804641;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1500332081;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1509635140;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1515363508;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return this.file.getName()__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,get,name
FileSystemResource -> @Override 	public String getFilename();1529093534;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return (this.file != null ? this.file.getName() : this.filePath.getFileName().toString())__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,null,this,file,get,name,this,file,path,get,file,name,to,string
FileSystemResource -> @Override 	public String getFilename();1530190293;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return (this.file != null ? this.file.getName() : this.filePath.getFileName().toString())__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,null,this,file,get,name,this,file,path,get,file,name,to,string
FileSystemResource -> @Override 	public String getFilename();1539119591;This implementation returns the name of the file._@see java.io.File#getName();@Override_	public String getFilename() {_		return (this.file != null ? this.file.getName() : this.filePath.getFileName().toString())__	};this,implementation,returns,the,name,of,the,file,see,java,io,file,get,name;override,public,string,get,filename,return,this,file,null,this,file,get,name,this,file,path,get,file,name,to,string
FileSystemResource -> @Override 	public boolean equals(Object obj);1328020251;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_		    (obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1329393628;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_		    (obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1356735495;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1357119239;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1368482696;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1398290143;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1444131013;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1468947211;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1469049917;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1473882375;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1493804641;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1500332081;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1509635140;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1515363508;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public boolean equals(Object obj);1529093534;This implementation compares the underlying File references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof FileSystemResource && this.path.equals(((FileSystemResource) obj).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,file,system,resource,this,path,equals,file,system,resource,obj,path
FileSystemResource -> @Override 	public File getFile();1328020251;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1329393628;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1356735495;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1357119239;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1368482696;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1398290143;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1444131013;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1468947211;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1469049917;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1473882375;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1493804641;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1500332081;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1509635140;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1515363508;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return this.file__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file
FileSystemResource -> @Override 	public File getFile();1529093534;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return (this.file != null ? this.file : this.filePath.toFile())__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file,null,this,file,this,file,path,to,file
FileSystemResource -> @Override 	public File getFile();1530190293;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return (this.file != null ? this.file : this.filePath.toFile())__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file,null,this,file,this,file,path,to,file
FileSystemResource -> @Override 	public File getFile();1539119591;This implementation returns the underlying File reference.;@Override_	public File getFile() {_		return (this.file != null ? this.file : this.filePath.toFile())__	};this,implementation,returns,the,underlying,file,reference;override,public,file,get,file,return,this,file,null,this,file,this,file,path,to,file
FileSystemResource -> public String getDescription();1328020251;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> public String getDescription();1329393628;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> public String getDescription();1357119239;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> @Override 	public boolean isFile();1468947211;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
FileSystemResource -> @Override 	public boolean isFile();1469049917;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
FileSystemResource -> @Override 	public boolean isFile();1473882375;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
FileSystemResource -> @Override 	public boolean isFile();1493804641;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
FileSystemResource -> @Override 	public boolean isFile();1500332081;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
FileSystemResource -> @Override 	public boolean isFile();1509635140;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
FileSystemResource -> @Override 	public boolean isFile();1515363508;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
FileSystemResource -> @Override 	public boolean isFile();1529093534;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
FileSystemResource -> @Override 	public boolean isFile();1530190293;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
FileSystemResource -> @Override 	public boolean isFile();1539119591;This implementation always indicates a file.;@Override_	public boolean isFile() {_		return true__	};this,implementation,always,indicates,a,file;override,public,boolean,is,file,return,true
FileSystemResource -> public FileSystemResource(String path);1328020251;Create a new FileSystemResource from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1329393628;Create a new FileSystemResource from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1356735495;Create a new FileSystemResource from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1357119239;Create a new FileSystemResource from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1368482696;Create a new FileSystemResource from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1398290143;Create a new {@code FileSystemResource} from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,code,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1444131013;Create a new {@code FileSystemResource} from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,code,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1468947211;Create a new {@code FileSystemResource} from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,code,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1469049917;Create a new {@code FileSystemResource} from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,code,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1473882375;Create a new {@code FileSystemResource} from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,code,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1493804641;Create a new {@code FileSystemResource} from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,code,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1500332081;Create a new {@code FileSystemResource} from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,code,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1509635140;Create a new {@code FileSystemResource} from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,code,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1515363508;Create a new {@code FileSystemResource} from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path;public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.file = new File(path)__		this.path = StringUtils.cleanPath(path)__	};create,a,new,code,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,file,new,file,path,this,path,string,utils,clean,path,path
FileSystemResource -> public FileSystemResource(String path);1529093534;Create a new {@code FileSystemResource} from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path_@see #FileSystemResource(Path);public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.file = new File(path)__		this.filePath = this.file.toPath()__	};create,a,new,code,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path,see,file,system,resource,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,file,new,file,path,this,file,path,this,file,to,path
FileSystemResource -> public FileSystemResource(String path);1530190293;Create a new {@code FileSystemResource} from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path_@see #FileSystemResource(Path);public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.file = new File(path)__		this.filePath = this.file.toPath()__	};create,a,new,code,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path,see,file,system,resource,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,file,new,file,path,this,file,path,this,file,to,path
FileSystemResource -> public FileSystemResource(String path);1539119591;Create a new {@code FileSystemResource} from a file path._<p>Note: When building relative resources via {@link #createRelative},_it makes a difference whether the specified resource base path here_ends with a slash or not. In the case of "C:/dir1/", relative paths_will be built underneath that root: e.g. relative path "dir2" ->_"C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply_at the same directory level: relative path "dir2" -> "C:/dir2"._@param path a file path_@see #FileSystemResource(Path);public FileSystemResource(String path) {_		Assert.notNull(path, "Path must not be null")__		this.path = StringUtils.cleanPath(path)__		this.file = new File(path)__		this.filePath = this.file.toPath()__	};create,a,new,code,file,system,resource,from,a,file,path,p,note,when,building,relative,resources,via,link,create,relative,it,makes,a,difference,whether,the,specified,resource,base,path,here,ends,with,a,slash,or,not,in,the,case,of,c,dir1,relative,paths,will,be,built,underneath,that,root,e,g,relative,path,dir2,c,dir1,dir2,in,the,case,of,c,dir1,relative,paths,will,apply,at,the,same,directory,level,relative,path,dir2,c,dir2,param,path,a,file,path,see,file,system,resource,path;public,file,system,resource,string,path,assert,not,null,path,path,must,not,be,null,this,path,string,utils,clean,path,path,this,file,new,file,path,this,file,path,this,file,to,path
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1356735495;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		return new FileInputStream(this.file)__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,return,new,file,input,stream,this,file
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1368482696;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		return new FileInputStream(this.file)__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,return,new,file,input,stream,this,file
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1398290143;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		return new FileInputStream(this.file)__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,return,new,file,input,stream,this,file
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1444131013;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		return new FileInputStream(this.file)__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,return,new,file,input,stream,this,file
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1468947211;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		return new FileInputStream(this.file)__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,return,new,file,input,stream,this,file
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1469049917;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		return new FileInputStream(this.file)__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,return,new,file,input,stream,this,file
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1473882375;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		return new FileInputStream(this.file)__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,return,new,file,input,stream,this,file
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1493804641;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		return new FileInputStream(this.file)__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,return,new,file,input,stream,this,file
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1500332081;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		return Files.newInputStream(this.file.toPath())__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,return,files,new,input,stream,this,file,to,path
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1509635140;This implementation opens a FileInputStream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		return Files.newInputStream(this.file.toPath())__	};this,implementation,opens,a,file,input,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,return,files,new,input,stream,this,file,to,path
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1515363508;This implementation opens a NIO file stream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		try {_			return Files.newInputStream(this.file.toPath())__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,nio,file,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,try,return,files,new,input,stream,this,file,to,path,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1529093534;This implementation opens a NIO file stream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		try {_			return Files.newInputStream(this.filePath)__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,nio,file,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,try,return,files,new,input,stream,this,file,path,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1530190293;This implementation opens a NIO file stream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		try {_			return Files.newInputStream(this.filePath)__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,nio,file,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,try,return,files,new,input,stream,this,file,path,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
FileSystemResource -> @Override 	public InputStream getInputStream() throws IOException;1539119591;This implementation opens a NIO file stream for the underlying file._@see java.io.FileInputStream;@Override_	public InputStream getInputStream() throws IOException {_		try {_			return Files.newInputStream(this.filePath)__		}_		catch (NoSuchFileException ex) {_			throw new FileNotFoundException(ex.getMessage())__		}_	};this,implementation,opens,a,nio,file,stream,for,the,underlying,file,see,java,io,file,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,try,return,files,new,input,stream,this,file,path,catch,no,such,file,exception,ex,throw,new,file,not,found,exception,ex,get,message
FileSystemResource -> public FileSystemResource(Path filePath);1529093534;Create a new {@code FileSystemResource} from a {@link Path} handle._<p>In contrast to {@link PathResource}, this variant strictly follows the_general {@link FileSystemResource} conventions, in particular in terms of_path cleaning and {@link #createRelative(String)} handling._@param filePath a Path handle to a file_@since 5.1_@see #FileSystemResource(File)_@see PathResource;public FileSystemResource(Path filePath) {_		Assert.notNull(filePath, "Path must not be null")__		this.filePath = filePath__		this.file = null__		this.path = StringUtils.cleanPath(filePath.toString())__	};create,a,new,code,file,system,resource,from,a,link,path,handle,p,in,contrast,to,link,path,resource,this,variant,strictly,follows,the,general,link,file,system,resource,conventions,in,particular,in,terms,of,path,cleaning,and,link,create,relative,string,handling,param,file,path,a,path,handle,to,a,file,since,5,1,see,file,system,resource,file,see,path,resource;public,file,system,resource,path,file,path,assert,not,null,file,path,path,must,not,be,null,this,file,path,file,path,this,file,null,this,path,string,utils,clean,path,file,path,to,string
FileSystemResource -> public FileSystemResource(Path filePath);1530190293;Create a new {@code FileSystemResource} from a {@link Path} handle._<p>In contrast to {@link PathResource}, this variant strictly follows the_general {@link FileSystemResource} conventions, in particular in terms of_path cleaning and {@link #createRelative(String)} handling._@param filePath a Path handle to a file_@since 5.1_@see #FileSystemResource(File)_@see PathResource;public FileSystemResource(Path filePath) {_		Assert.notNull(filePath, "Path must not be null")__		this.filePath = filePath__		this.file = null__		this.path = StringUtils.cleanPath(filePath.toString())__	};create,a,new,code,file,system,resource,from,a,link,path,handle,p,in,contrast,to,link,path,resource,this,variant,strictly,follows,the,general,link,file,system,resource,conventions,in,particular,in,terms,of,path,cleaning,and,link,create,relative,string,handling,param,file,path,a,path,handle,to,a,file,since,5,1,see,file,system,resource,file,see,path,resource;public,file,system,resource,path,file,path,assert,not,null,file,path,path,must,not,be,null,this,file,path,file,path,this,file,null,this,path,string,utils,clean,path,file,path,to,string
FileSystemResource -> public FileSystemResource(Path filePath);1539119591;Create a new {@code FileSystemResource} from a {@link Path} handle,_performing all file system interactions via NIO.2 instead of {@link File}._<p>In contrast to {@link PathResource}, this variant strictly follows the_general {@link FileSystemResource} conventions, in particular in terms of_path cleaning and {@link #createRelative(String)} handling._@param filePath a Path handle to a file_@since 5.1_@see #FileSystemResource(File);public FileSystemResource(Path filePath) {_		Assert.notNull(filePath, "Path must not be null")__		this.path = StringUtils.cleanPath(filePath.toString())__		this.file = null__		this.filePath = filePath__	};create,a,new,code,file,system,resource,from,a,link,path,handle,performing,all,file,system,interactions,via,nio,2,instead,of,link,file,p,in,contrast,to,link,path,resource,this,variant,strictly,follows,the,general,link,file,system,resource,conventions,in,particular,in,terms,of,path,cleaning,and,link,create,relative,string,handling,param,file,path,a,path,handle,to,a,file,since,5,1,see,file,system,resource,file;public,file,system,resource,path,file,path,assert,not,null,file,path,path,must,not,be,null,this,path,string,utils,clean,path,file,path,to,string,this,file,null,this,file,path,file,path
FileSystemResource -> @Override 	public String getDescription();1356735495;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> @Override 	public String getDescription();1368482696;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> @Override 	public String getDescription();1398290143;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> @Override 	public String getDescription();1444131013;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> @Override 	public String getDescription();1468947211;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> @Override 	public String getDescription();1469049917;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> @Override 	public String getDescription();1473882375;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> @Override 	public String getDescription();1493804641;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> @Override 	public String getDescription();1500332081;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> @Override 	public String getDescription();1509635140;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> @Override 	public String getDescription();1515363508;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + this.file.getAbsolutePath() + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,get,absolute,path
FileSystemResource -> @Override 	public String getDescription();1529093534;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + (this.file != null ? this.file.getAbsolutePath() : this.filePath.toAbsolutePath()) + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,null,this,file,get,absolute,path,this,file,path,to,absolute,path
FileSystemResource -> @Override 	public String getDescription();1530190293;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + (this.file != null ? this.file.getAbsolutePath() : this.filePath.toAbsolutePath()) + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,null,this,file,get,absolute,path,this,file,path,to,absolute,path
FileSystemResource -> @Override 	public String getDescription();1539119591;This implementation returns a description that includes the absolute_path of the file._@see java.io.File#getAbsolutePath();@Override_	public String getDescription() {_		return "file [" + (this.file != null ? this.file.getAbsolutePath() : this.filePath.toAbsolutePath()) + "]"__	};this,implementation,returns,a,description,that,includes,the,absolute,path,of,the,file,see,java,io,file,get,absolute,path;override,public,string,get,description,return,file,this,file,null,this,file,get,absolute,path,this,file,path,to,absolute,path
FileSystemResource -> @Override 	public URI getURI() throws IOException;1328020251;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1329393628;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1356735495;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1357119239;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1368482696;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1398290143;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1444131013;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1468947211;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1469049917;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1473882375;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1493804641;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1500332081;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1509635140;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1515363508;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return this.file.toURI()__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1529093534;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return (this.file != null ? this.file.toURI() : this.filePath.toUri())__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,null,this,file,to,uri,this,file,path,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1530190293;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return (this.file != null ? this.file.toURI() : this.filePath.toUri())__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,null,this,file,to,uri,this,file,path,to,uri
FileSystemResource -> @Override 	public URI getURI() throws IOException;1539119591;This implementation returns a URI for the underlying file._@see java.io.File#toURI();@Override_	public URI getURI() throws IOException {_		return (this.file != null ? this.file.toURI() : this.filePath.toUri())__	};this,implementation,returns,a,uri,for,the,underlying,file,see,java,io,file,to,uri;override,public,uri,get,uri,throws,ioexception,return,this,file,null,this,file,to,uri,this,file,path,to,uri
FileSystemResource -> public boolean isWritable();1328020251;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> public boolean isWritable();1329393628;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> public boolean isWritable();1357119239;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> @Override 	public boolean equals(Object other);1530190293;This implementation compares the underlying File references.;@Override_	public boolean equals(Object other) {_		return (this == other || (other instanceof FileSystemResource &&_				this.path.equals(((FileSystemResource) other).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,other,return,this,other,other,instanceof,file,system,resource,this,path,equals,file,system,resource,other,path
FileSystemResource -> @Override 	public boolean equals(Object other);1539119591;This implementation compares the underlying File references.;@Override_	public boolean equals(Object other) {_		return (this == other || (other instanceof FileSystemResource &&_				this.path.equals(((FileSystemResource) other).path)))__	};this,implementation,compares,the,underlying,file,references;override,public,boolean,equals,object,other,return,this,other,other,instanceof,file,system,resource,this,path,equals,file,system,resource,other,path
FileSystemResource -> public FileSystemResource(File file);1328020251;Create a new FileSystemResource from a File handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,file,system,resource,from,a,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1329393628;Create a new FileSystemResource from a File handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,file,system,resource,from,a,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1356735495;Create a new FileSystemResource from a File handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,file,system,resource,from,a,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1357119239;Create a new FileSystemResource from a File handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,file,system,resource,from,a,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1368482696;Create a new FileSystemResource from a File handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,file,system,resource,from,a,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1398290143;Create a new {@code FileSystemResource} from a {@link File} handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,code,file,system,resource,from,a,link,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1444131013;Create a new {@code FileSystemResource} from a {@link File} handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,code,file,system,resource,from,a,link,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1468947211;Create a new {@code FileSystemResource} from a {@link File} handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,code,file,system,resource,from,a,link,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1469049917;Create a new {@code FileSystemResource} from a {@link File} handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,code,file,system,resource,from,a,link,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1473882375;Create a new {@code FileSystemResource} from a {@link File} handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,code,file,system,resource,from,a,link,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1493804641;Create a new {@code FileSystemResource} from a {@link File} handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,code,file,system,resource,from,a,link,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1500332081;Create a new {@code FileSystemResource} from a {@link File} handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,code,file,system,resource,from,a,link,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1509635140;Create a new {@code FileSystemResource} from a {@link File} handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,code,file,system,resource,from,a,link,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1515363508;Create a new {@code FileSystemResource} from a {@link File} handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle;public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.file = file__		this.path = StringUtils.cleanPath(file.getPath())__	};create,a,new,code,file,system,resource,from,a,link,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,file,file,this,path,string,utils,clean,path,file,get,path
FileSystemResource -> public FileSystemResource(File file);1529093534;Create a new {@code FileSystemResource} from a {@link File} handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle_@see #FileSystemResource(Path)_@see #getFile();public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.path = StringUtils.cleanPath(file.getPath())__		this.file = file__		this.filePath = file.toPath()__	};create,a,new,code,file,system,resource,from,a,link,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle,see,file,system,resource,path,see,get,file;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,path,string,utils,clean,path,file,get,path,this,file,file,this,file,path,file,to,path
FileSystemResource -> public FileSystemResource(File file);1530190293;Create a new {@code FileSystemResource} from a {@link File} handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root_directory, use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which_indicates this directory as root for all relative paths._@param file a File handle_@see #FileSystemResource(Path)_@see #getFile();public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.path = StringUtils.cleanPath(file.getPath())__		this.file = file__		this.filePath = file.toPath()__	};create,a,new,code,file,system,resource,from,a,link,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle,see,file,system,resource,path,see,get,file;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,path,string,utils,clean,path,file,get,path,this,file,file,this,file,path,file,to,path
FileSystemResource -> public FileSystemResource(File file);1539119591;Create a new {@code FileSystemResource} from a {@link File} handle._<p>Note: When building relative resources via {@link #createRelative},_the relative path will apply <i>at the same directory level</i>:_e.g. new File("C:/dir1"), relative path "dir2" -> "C:/dir2"!_If you prefer to have relative paths built underneath the given root directory,_use the {@link #FileSystemResource(String) constructor with a file path}_to append a trailing slash to the root path: "C:/dir1/", which indicates_this directory as root for all relative paths._@param file a File handle_@see #FileSystemResource(Path)_@see #getFile();public FileSystemResource(File file) {_		Assert.notNull(file, "File must not be null")__		this.path = StringUtils.cleanPath(file.getPath())__		this.file = file__		this.filePath = file.toPath()__	};create,a,new,code,file,system,resource,from,a,link,file,handle,p,note,when,building,relative,resources,via,link,create,relative,the,relative,path,will,apply,i,at,the,same,directory,level,i,e,g,new,file,c,dir1,relative,path,dir2,c,dir2,if,you,prefer,to,have,relative,paths,built,underneath,the,given,root,directory,use,the,link,file,system,resource,string,constructor,with,a,file,path,to,append,a,trailing,slash,to,the,root,path,c,dir1,which,indicates,this,directory,as,root,for,all,relative,paths,param,file,a,file,handle,see,file,system,resource,path,see,get,file;public,file,system,resource,file,file,assert,not,null,file,file,must,not,be,null,this,path,string,utils,clean,path,file,get,path,this,file,file,this,file,path,file,to,path
FileSystemResource -> public OutputStream getOutputStream() throws IOException;1328020251;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;public OutputStream getOutputStream() throws IOException {_		return new FileOutputStream(this.file)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;public,output,stream,get,output,stream,throws,ioexception,return,new,file,output,stream,this,file
FileSystemResource -> public OutputStream getOutputStream() throws IOException;1329393628;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;public OutputStream getOutputStream() throws IOException {_		return new FileOutputStream(this.file)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;public,output,stream,get,output,stream,throws,ioexception,return,new,file,output,stream,this,file
FileSystemResource -> public OutputStream getOutputStream() throws IOException;1357119239;This implementation opens a FileOutputStream for the underlying file._@see java.io.FileOutputStream;public OutputStream getOutputStream() throws IOException {_		return new FileOutputStream(this.file)__	};this,implementation,opens,a,file,output,stream,for,the,underlying,file,see,java,io,file,output,stream;public,output,stream,get,output,stream,throws,ioexception,return,new,file,output,stream,this,file
FileSystemResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1493804641;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public WritableByteChannel writableChannel() throws IOException {_		return new FileOutputStream(this.file).getChannel()__	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,new,file,output,stream,this,file,get,channel
FileSystemResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1500332081;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public WritableByteChannel writableChannel() throws IOException {_		return FileChannel.open(getFile().toPath(), StandardOpenOption.WRITE)__	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,file,channel,open,get,file,to,path,standard,open,option,write
FileSystemResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1509635140;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public WritableByteChannel writableChannel() throws IOException {_		return FileChannel.open(this.file.toPath(), StandardOpenOption.WRITE)__	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,file,channel,open,this,file,to,path,standard,open,option,write
FileSystemResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1515363508;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public WritableByteChannel writableChannel() throws IOException {_		return FileChannel.open(this.file.toPath(), StandardOpenOption.WRITE)__	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,file,channel,open,this,file,to,path,standard,open,option,write
FileSystemResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1529093534;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public WritableByteChannel writableChannel() throws IOException {_		return FileChannel.open(this.filePath, StandardOpenOption.WRITE)__	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,file,channel,open,this,file,path,standard,open,option,write
FileSystemResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1530190293;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public WritableByteChannel writableChannel() throws IOException {_		return FileChannel.open(this.filePath, StandardOpenOption.WRITE)__	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,file,channel,open,this,file,path,standard,open,option,write
FileSystemResource -> @Override 	public WritableByteChannel writableChannel() throws IOException;1539119591;This implementation opens a FileChannel for the underlying file._@see java.nio.channels.FileChannel;@Override_	public WritableByteChannel writableChannel() throws IOException {_		return FileChannel.open(this.filePath, StandardOpenOption.WRITE)__	};this,implementation,opens,a,file,channel,for,the,underlying,file,see,java,nio,channels,file,channel;override,public,writable,byte,channel,writable,channel,throws,ioexception,return,file,channel,open,this,file,path,standard,open,option,write
FileSystemResource -> @Override 	public boolean isWritable();1356735495;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> @Override 	public boolean isWritable();1368482696;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> @Override 	public boolean isWritable();1398290143;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> @Override 	public boolean isWritable();1444131013;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> @Override 	public boolean isWritable();1468947211;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> @Override 	public boolean isWritable();1469049917;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> @Override 	public boolean isWritable();1473882375;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> @Override 	public boolean isWritable();1493804641;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> @Override 	public boolean isWritable();1500332081;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> @Override 	public boolean isWritable();1509635140;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> @Override 	public boolean isWritable();1515363508;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file.canWrite() && !this.file.isDirectory())__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,can,write,this,file,is,directory
FileSystemResource -> @Override 	public boolean isWritable();1529093534;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file != null ? this.file.canWrite() && !this.file.isDirectory() :_				Files.isWritable(this.filePath) && !Files.isDirectory(this.filePath))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,null,this,file,can,write,this,file,is,directory,files,is,writable,this,file,path,files,is,directory,this,file,path
FileSystemResource -> @Override 	public boolean isWritable();1530190293;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file != null ? this.file.canWrite() && !this.file.isDirectory() :_				Files.isWritable(this.filePath) && !Files.isDirectory(this.filePath))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,null,this,file,can,write,this,file,is,directory,files,is,writable,this,file,path,files,is,directory,this,file,path
FileSystemResource -> @Override 	public boolean isWritable();1539119591;This implementation checks whether the underlying file is marked as writable_(and corresponds to an actual file with content, not to a directory)._@see java.io.File#canWrite()_@see java.io.File#isDirectory();@Override_	public boolean isWritable() {_		return (this.file != null ? this.file.canWrite() && !this.file.isDirectory() :_				Files.isWritable(this.filePath) && !Files.isDirectory(this.filePath))__	};this,implementation,checks,whether,the,underlying,file,is,marked,as,writable,and,corresponds,to,an,actual,file,with,content,not,to,a,directory,see,java,io,file,can,write,see,java,io,file,is,directory;override,public,boolean,is,writable,return,this,file,null,this,file,can,write,this,file,is,directory,files,is,writable,this,file,path,files,is,directory,this,file,path
