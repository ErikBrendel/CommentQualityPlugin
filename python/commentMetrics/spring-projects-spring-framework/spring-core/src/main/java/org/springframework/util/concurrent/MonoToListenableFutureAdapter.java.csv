commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override @Nullable public T get() {     return this.processor.block(). }
false;public;2;7;;@Override @Nullable public T get(long timeout, TimeUnit unit) {     Assert.notNull(unit, "TimeUnit must not be null").     Duration duration = Duration.ofMillis(TimeUnit.MILLISECONDS.convert(timeout, unit)).     return this.processor.block(duration). }
false;public;1;9;;@Override public boolean cancel(boolean mayInterruptIfRunning) {     if (isCancelled()) {         return false.     }     this.processor.cancel().     // isCancelled may still return false, if mono completed before the cancel     return this.processor.isCancelled(). }
false;public;0;4;;@Override public boolean isCancelled() {     return this.processor.isCancelled(). }
false;public;0;4;;@Override public boolean isDone() {     return this.processor.isTerminated(). }
false;public;1;4;;@Override public void addCallback(ListenableFutureCallback<? super T> callback) {     this.registry.addCallback(callback). }
false;public;2;5;;@Override public void addCallback(SuccessCallback<? super T> success, FailureCallback failure) {     this.registry.addSuccessCallback(success).     this.registry.addFailureCallback(failure). }
