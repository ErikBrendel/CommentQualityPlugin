commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Obtain a {@link DataSize} representing the specified number of bytes.  * @param bytes the number of bytes, positive or negative  * @return a {@link DataSize}  */ ;/**  * Obtain a {@link DataSize} representing the specified number of bytes.  * @param bytes the number of bytes, positive or negative  * @return a {@link DataSize}  */ public static DataSize ofBytes(long bytes) {     return new DataSize(bytes). }
true;public,static;1;3;/**  * Obtain a {@link DataSize} representing the specified number of kilobytes.  * @param kilobytes the number of kilobytes, positive or negative  * @return a {@link DataSize}  */ ;/**  * Obtain a {@link DataSize} representing the specified number of kilobytes.  * @param kilobytes the number of kilobytes, positive or negative  * @return a {@link DataSize}  */ public static DataSize ofKilobytes(long kilobytes) {     return new DataSize(Math.multiplyExact(kilobytes, BYTES_PER_KB)). }
true;public,static;1;3;/**  * Obtain a {@link DataSize} representing the specified number of megabytes.  * @param megabytes the number of megabytes, positive or negative  * @return a {@link DataSize}  */ ;/**  * Obtain a {@link DataSize} representing the specified number of megabytes.  * @param megabytes the number of megabytes, positive or negative  * @return a {@link DataSize}  */ public static DataSize ofMegabytes(long megabytes) {     return new DataSize(Math.multiplyExact(megabytes, BYTES_PER_MB)). }
true;public,static;1;3;/**  * Obtain a {@link DataSize} representing the specified number of gigabytes.  * @param gigabytes the number of gigabytes, positive or negative  * @return a {@link DataSize}  */ ;/**  * Obtain a {@link DataSize} representing the specified number of gigabytes.  * @param gigabytes the number of gigabytes, positive or negative  * @return a {@link DataSize}  */ public static DataSize ofGigabytes(long gigabytes) {     return new DataSize(Math.multiplyExact(gigabytes, BYTES_PER_GB)). }
true;public,static;1;3;/**  * Obtain a {@link DataSize} representing the specified number of terabytes.  * @param terabytes the number of terabytes, positive or negative  * @return a {@link DataSize}  */ ;/**  * Obtain a {@link DataSize} representing the specified number of terabytes.  * @param terabytes the number of terabytes, positive or negative  * @return a {@link DataSize}  */ public static DataSize ofTerabytes(long terabytes) {     return new DataSize(Math.multiplyExact(terabytes, BYTES_PER_TB)). }
true;public,static;2;4;/**  * Obtain a {@link DataSize} representing an amount in the specified {@link DataUnit}.  * @param amount the amount of the size, measured in terms of the unit,  * positive or negative  * @return a corresponding {@link DataSize}  */ ;/**  * Obtain a {@link DataSize} representing an amount in the specified {@link DataUnit}.  * @param amount the amount of the size, measured in terms of the unit,  * positive or negative  * @return a corresponding {@link DataSize}  */ public static DataSize of(long amount, DataUnit unit) {     Assert.notNull(unit, "Unit must not be null").     return new DataSize(Math.multiplyExact(amount, unit.size().toBytes())). }
true;public,static;1;3;/**  * Obtain a {@link DataSize} from a text string such as {@code 12MB} using  * {@link DataUnit#BYTES} if no unit is specified.  * <p>  * Examples:  * <pre>  * "12KB" -- parses as "12 kilobytes"  * "5MB"  -- parses as "5 megabytes"  * "20"   -- parses as "20 bytes"  * </pre>  * @param text the text to parse  * @return the parsed {@link DataSize}  * @see #parse(CharSequence, DataUnit)  */ ;/**  * Obtain a {@link DataSize} from a text string such as {@code 12MB} using  * {@link DataUnit#BYTES} if no unit is specified.  * <p>  * Examples:  * <pre>  * "12KB" -- parses as "12 kilobytes"  * "5MB"  -- parses as "5 megabytes"  * "20"   -- parses as "20 bytes"  * </pre>  * @param text the text to parse  * @return the parsed {@link DataSize}  * @see #parse(CharSequence, DataUnit)  */ public static DataSize parse(CharSequence text) {     return parse(text, null). }
true;public,static;2;13;/**  * Obtain a {@link DataSize} from a text string such as {@code 12MB} using  * the specified default {@link DataUnit} if no unit is specified.  * <p>  * The string starts with a number followed optionally by a unit matching one of the  * supported {@link DataUnit suffixes}.  * <p>  * Examples:  * <pre>  * "12KB" -- parses as "12 kilobytes"  * "5MB"  -- parses as "5 megabytes"  * "20"   -- parses as "20 kilobytes" (where the {@code defaultUnit} is {@link DataUnit#KILOBYTES})  * </pre>  * @param text the text to parse  * @return the parsed {@link DataSize}  */ ;/**  * Obtain a {@link DataSize} from a text string such as {@code 12MB} using  * the specified default {@link DataUnit} if no unit is specified.  * <p>  * The string starts with a number followed optionally by a unit matching one of the  * supported {@link DataUnit suffixes}.  * <p>  * Examples:  * <pre>  * "12KB" -- parses as "12 kilobytes"  * "5MB"  -- parses as "5 megabytes"  * "20"   -- parses as "20 kilobytes" (where the {@code defaultUnit} is {@link DataUnit#KILOBYTES})  * </pre>  * @param text the text to parse  * @return the parsed {@link DataSize}  */ public static DataSize parse(CharSequence text, @Nullable DataUnit defaultUnit) {     Assert.notNull(text, "Text must not be null").     try {         Matcher matcher = PATTERN.matcher(text).         Assert.state(matcher.matches(), "Does not match data size pattern").         DataUnit unit = determineDataUnit(matcher.group(2), defaultUnit).         long amount = Long.parseLong(matcher.group(1)).         return DataSize.of(amount, unit).     } catch (Exception ex) {         throw new IllegalArgumentException("'" + text + "' is not a valid data size", ex).     } }
false;private,static;2;4;;private static DataUnit determineDataUnit(String suffix, @Nullable DataUnit defaultUnit) {     DataUnit defaultUnitToUse = (defaultUnit != null ? defaultUnit : DataUnit.BYTES).     return (StringUtils.hasLength(suffix) ? DataUnit.fromSuffix(suffix) : defaultUnitToUse). }
true;public;0;3;/**  * Checks if this size is negative, excluding zero.  * @return true if this size has a size less than zero bytes  */ ;/**  * Checks if this size is negative, excluding zero.  * @return true if this size has a size less than zero bytes  */ public boolean isNegative() {     return this.bytes < 0. }
true;public;0;3;/**  * Return the number of bytes in this instance.  * @return the number of bytes  */ ;/**  * Return the number of bytes in this instance.  * @return the number of bytes  */ public long toBytes() {     return this.bytes. }
true;public;0;3;/**  * Return the number of kilobytes in this instance.  * @return the number of kilobytes  */ ;/**  * Return the number of kilobytes in this instance.  * @return the number of kilobytes  */ public long toKilobytes() {     return this.bytes / BYTES_PER_KB. }
true;public;0;3;/**  * Return the number of megabytes in this instance.  * @return the number of megabytes  */ ;/**  * Return the number of megabytes in this instance.  * @return the number of megabytes  */ public long toMegabytes() {     return this.bytes / BYTES_PER_MB. }
true;public;0;3;/**  * Return the number of gigabytes in this instance.  * @return the number of gigabytes  */ ;/**  * Return the number of gigabytes in this instance.  * @return the number of gigabytes  */ public long toGigabytes() {     return this.bytes / BYTES_PER_GB. }
true;public;0;3;/**  * Return the number of terabytes in this instance.  * @return the number of terabytes  */ ;/**  * Return the number of terabytes in this instance.  * @return the number of terabytes  */ public long toTerabytes() {     return this.bytes / BYTES_PER_TB. }
false;public;1;4;;@Override public int compareTo(DataSize other) {     return Long.compare(this.bytes, other.bytes). }
false;public;0;4;;@Override public String toString() {     return String.format("%dB", this.bytes). }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     DataSize otherSize = (DataSize) other.     return (this.bytes == otherSize.bytes). }
false;public;0;4;;@Override public int hashCode() {     return Long.hashCode(this.bytes). }
