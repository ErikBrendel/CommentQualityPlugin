commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the prefix to use for the names of newly created threads.  * Default is "SimpleAsyncTaskExecutor-".  */ ;/**  * Specify the prefix to use for the names of newly created threads.  * Default is "SimpleAsyncTaskExecutor-".  */ public void setThreadNamePrefix(@Nullable String threadNamePrefix) {     this.threadNamePrefix = (threadNamePrefix != null ? threadNamePrefix : getDefaultThreadNamePrefix()). }
true;public;0;3;/**  * Return the thread name prefix to use for the names of newly  * created threads.  */ ;/**  * Return the thread name prefix to use for the names of newly  * created threads.  */ public String getThreadNamePrefix() {     return this.threadNamePrefix. }
true;public;1;3;/**  * Set the priority of the threads that this factory creates.  * Default is 5.  * @see java.lang.Thread#NORM_PRIORITY  */ ;/**  * Set the priority of the threads that this factory creates.  * Default is 5.  * @see java.lang.Thread#NORM_PRIORITY  */ public void setThreadPriority(int threadPriority) {     this.threadPriority = threadPriority. }
true;public;0;3;/**  * Return the priority of the threads that this factory creates.  */ ;/**  * Return the priority of the threads that this factory creates.  */ public int getThreadPriority() {     return this.threadPriority. }
true;public;1;3;/**  * Set whether this factory is supposed to create daemon threads,  * just executing as long as the application itself is running.  * <p>Default is "false": Concrete factories usually support explicit cancelling.  * Hence, if the application shuts down, Runnables will by default finish their  * execution.  * <p>Specify "true" for eager shutdown of threads which still actively execute  * a {@link Runnable} at the time that the application itself shuts down.  * @see java.lang.Thread#setDaemon  */ ;/**  * Set whether this factory is supposed to create daemon threads,  * just executing as long as the application itself is running.  * <p>Default is "false": Concrete factories usually support explicit cancelling.  * Hence, if the application shuts down, Runnables will by default finish their  * execution.  * <p>Specify "true" for eager shutdown of threads which still actively execute  * a {@link Runnable} at the time that the application itself shuts down.  * @see java.lang.Thread#setDaemon  */ public void setDaemon(boolean daemon) {     this.daemon = daemon. }
true;public;0;3;/**  * Return whether this factory should create daemon threads.  */ ;/**  * Return whether this factory should create daemon threads.  */ public boolean isDaemon() {     return this.daemon. }
true;public;1;3;/**  * Specify the name of the thread group that threads should be created in.  * @see #setThreadGroup  */ ;/**  * Specify the name of the thread group that threads should be created in.  * @see #setThreadGroup  */ public void setThreadGroupName(String name) {     this.threadGroup = new ThreadGroup(name). }
true;public;1;3;/**  * Specify the thread group that threads should be created in.  * @see #setThreadGroupName  */ ;/**  * Specify the thread group that threads should be created in.  * @see #setThreadGroupName  */ public void setThreadGroup(@Nullable ThreadGroup threadGroup) {     this.threadGroup = threadGroup. }
true;public;0;4;/**  * Return the thread group that threads should be created in  * (or {@code null} for the default group).  */ ;/**  * Return the thread group that threads should be created in  * (or {@code null} for the default group).  */ @Nullable public ThreadGroup getThreadGroup() {     return this.threadGroup. }
true;public;1;6;/**  * Template method for the creation of a new {@link Thread}.  * <p>The default implementation creates a new Thread for the given  * {@link Runnable}, applying an appropriate thread name.  * @param runnable the Runnable to execute  * @see #nextThreadName()  */ ;/**  * Template method for the creation of a new {@link Thread}.  * <p>The default implementation creates a new Thread for the given  * {@link Runnable}, applying an appropriate thread name.  * @param runnable the Runnable to execute  * @see #nextThreadName()  */ public Thread createThread(Runnable runnable) {     Thread thread = new Thread(getThreadGroup(), runnable, nextThreadName()).     thread.setPriority(getThreadPriority()).     thread.setDaemon(isDaemon()).     return thread. }
true;protected;0;3;/**  * Return the thread name to use for a newly created {@link Thread}.  * <p>The default implementation returns the specified thread name prefix  * with an increasing thread count appended: e.g. "SimpleAsyncTaskExecutor-0".  * @see #getThreadNamePrefix()  */ ;/**  * Return the thread name to use for a newly created {@link Thread}.  * <p>The default implementation returns the specified thread name prefix  * with an increasing thread count appended: e.g. "SimpleAsyncTaskExecutor-0".  * @see #getThreadNamePrefix()  */ protected String nextThreadName() {     return getThreadNamePrefix() + this.threadCount.incrementAndGet(). }
true;protected;0;3;/**  * Build the default thread name prefix for this factory.  * @return the default thread name prefix (never {@code null})  */ ;/**  * Build the default thread name prefix for this factory.  * @return the default thread name prefix (never {@code null})  */ protected String getDefaultThreadNamePrefix() {     return ClassUtils.getShortName(getClass()) + "-". }
