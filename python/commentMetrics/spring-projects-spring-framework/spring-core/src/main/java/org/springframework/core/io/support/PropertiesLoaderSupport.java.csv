commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set local properties, e.g. via the "props" tag in XML bean definitions.  * These can be considered defaults, to be overridden by properties  * loaded from files.  */ ;/**  * Set local properties, e.g. via the "props" tag in XML bean definitions.  * These can be considered defaults, to be overridden by properties  * loaded from files.  */ public void setProperties(Properties properties) {     this.localProperties = new Properties[] { properties }. }
true;public;1;3;/**  * Set local properties, e.g. via the "props" tag in XML bean definitions,  * allowing for merging multiple properties sets into one.  */ ;/**  * Set local properties, e.g. via the "props" tag in XML bean definitions,  * allowing for merging multiple properties sets into one.  */ public void setPropertiesArray(Properties... propertiesArray) {     this.localProperties = propertiesArray. }
true;public;1;3;/**  * Set a location of a properties file to be loaded.  * <p>Can point to a classic properties file or to an XML file  * that follows JDK 1.5's properties XML format.  */ ;/**  * Set a location of a properties file to be loaded.  * <p>Can point to a classic properties file or to an XML file  * that follows JDK 1.5's properties XML format.  */ public void setLocation(Resource location) {     this.locations = new Resource[] { location }. }
true;public;1;3;/**  * Set locations of properties files to be loaded.  * <p>Can point to classic properties files or to XML files  * that follow JDK 1.5's properties XML format.  * <p>Note: Properties defined in later files will override  * properties defined earlier files, in case of overlapping keys.  * Hence, make sure that the most specific files are the last  * ones in the given list of locations.  */ ;/**  * Set locations of properties files to be loaded.  * <p>Can point to classic properties files or to XML files  * that follow JDK 1.5's properties XML format.  * <p>Note: Properties defined in later files will override  * properties defined earlier files, in case of overlapping keys.  * Hence, make sure that the most specific files are the last  * ones in the given list of locations.  */ public void setLocations(Resource... locations) {     this.locations = locations. }
true;public;1;3;/**  * Set whether local properties override properties from files.  * <p>Default is "false": Properties from files override local defaults.  * Can be switched to "true" to let local properties override defaults  * from files.  */ ;/**  * Set whether local properties override properties from files.  * <p>Default is "false": Properties from files override local defaults.  * Can be switched to "true" to let local properties override defaults  * from files.  */ public void setLocalOverride(boolean localOverride) {     this.localOverride = localOverride. }
true;public;1;3;/**  * Set if failure to find the property resource should be ignored.  * <p>"true" is appropriate if the properties file is completely optional.  * Default is "false".  */ ;/**  * Set if failure to find the property resource should be ignored.  * <p>"true" is appropriate if the properties file is completely optional.  * Default is "false".  */ public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {     this.ignoreResourceNotFound = ignoreResourceNotFound. }
true;public;1;3;/**  * Set the encoding to use for parsing properties files.  * <p>Default is none, using the {@code java.util.Properties}  * default encoding.  * <p>Only applies to classic properties files, not to XML files.  * @see org.springframework.util.PropertiesPersister#load  */ ;/**  * Set the encoding to use for parsing properties files.  * <p>Default is none, using the {@code java.util.Properties}  * default encoding.  * <p>Only applies to classic properties files, not to XML files.  * @see org.springframework.util.PropertiesPersister#load  */ public void setFileEncoding(String encoding) {     this.fileEncoding = encoding. }
true;public;1;4;/**  * Set the PropertiesPersister to use for parsing properties files.  * The default is DefaultPropertiesPersister.  * @see org.springframework.util.DefaultPropertiesPersister  */ ;/**  * Set the PropertiesPersister to use for parsing properties files.  * The default is DefaultPropertiesPersister.  * @see org.springframework.util.DefaultPropertiesPersister  */ public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {     this.propertiesPersister = (propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister()). }
true;protected;0;21;/**  * Return a merged Properties instance containing both the  * loaded properties and properties set on this FactoryBean.  */ ;/**  * Return a merged Properties instance containing both the  * loaded properties and properties set on this FactoryBean.  */ protected Properties mergeProperties() throws IOException {     Properties result = new Properties().     if (this.localOverride) {         // Load properties from file upfront, to let local properties override.         loadProperties(result).     }     if (this.localProperties != null) {         for (Properties localProp : this.localProperties) {             CollectionUtils.mergePropertiesIntoMap(localProp, result).         }     }     if (!this.localOverride) {         // Load properties from file afterwards, to let those properties override.         loadProperties(result).     }     return result. }
true;protected;1;23;/**  * Load properties into the given instance.  * @param props the Properties instance to load into  * @throws IOException in case of I/O errors  * @see #setLocations  */ ;/**  * Load properties into the given instance.  * @param props the Properties instance to load into  * @throws IOException in case of I/O errors  * @see #setLocations  */ protected void loadProperties(Properties props) throws IOException {     if (this.locations != null) {         for (Resource location : this.locations) {             if (logger.isTraceEnabled()) {                 logger.trace("Loading properties file from " + location).             }             try {                 PropertiesLoaderUtils.fillProperties(props, new EncodedResource(location, this.fileEncoding), this.propertiesPersister).             } catch (FileNotFoundException | UnknownHostException ex) {                 if (this.ignoreResourceNotFound) {                     if (logger.isDebugEnabled()) {                         logger.debug("Properties resource not found: " + ex.getMessage()).                     }                 } else {                     throw ex.                 }             }         }     } }
