# id;timestamp;commentText;codeText;commentWords;codeWords
PropertiesLoaderSupport -> public void setProperties(Properties properties);1328020251;Set local properties, e.g. via the "props" tag in XML bean definitions._These can be considered defaults, to be overridden by properties_loaded from files.;public void setProperties(Properties properties) {_		this.localProperties = new Properties[] {properties}__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,these,can,be,considered,defaults,to,be,overridden,by,properties,loaded,from,files;public,void,set,properties,properties,properties,this,local,properties,new,properties,properties
PropertiesLoaderSupport -> public void setProperties(Properties properties);1329142650;Set local properties, e.g. via the "props" tag in XML bean definitions._These can be considered defaults, to be overridden by properties_loaded from files.;public void setProperties(Properties properties) {_		this.localProperties = new Properties[] {properties}__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,these,can,be,considered,defaults,to,be,overridden,by,properties,loaded,from,files;public,void,set,properties,properties,properties,this,local,properties,new,properties,properties
PropertiesLoaderSupport -> public void setProperties(Properties properties);1356735495;Set local properties, e.g. via the "props" tag in XML bean definitions._These can be considered defaults, to be overridden by properties_loaded from files.;public void setProperties(Properties properties) {_		this.localProperties = new Properties[] {properties}__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,these,can,be,considered,defaults,to,be,overridden,by,properties,loaded,from,files;public,void,set,properties,properties,properties,this,local,properties,new,properties,properties
PropertiesLoaderSupport -> public void setProperties(Properties properties);1362408075;Set local properties, e.g. via the "props" tag in XML bean definitions._These can be considered defaults, to be overridden by properties_loaded from files.;public void setProperties(Properties properties) {_		this.localProperties = new Properties[] {properties}__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,these,can,be,considered,defaults,to,be,overridden,by,properties,loaded,from,files;public,void,set,properties,properties,properties,this,local,properties,new,properties,properties
PropertiesLoaderSupport -> public void setProperties(Properties properties);1408624154;Set local properties, e.g. via the "props" tag in XML bean definitions._These can be considered defaults, to be overridden by properties_loaded from files.;public void setProperties(Properties properties) {_		this.localProperties = new Properties[] {properties}__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,these,can,be,considered,defaults,to,be,overridden,by,properties,loaded,from,files;public,void,set,properties,properties,properties,this,local,properties,new,properties,properties
PropertiesLoaderSupport -> public void setProperties(Properties properties);1486719670;Set local properties, e.g. via the "props" tag in XML bean definitions._These can be considered defaults, to be overridden by properties_loaded from files.;public void setProperties(Properties properties) {_		this.localProperties = new Properties[] {properties}__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,these,can,be,considered,defaults,to,be,overridden,by,properties,loaded,from,files;public,void,set,properties,properties,properties,this,local,properties,new,properties,properties
PropertiesLoaderSupport -> public void setProperties(Properties properties);1491903930;Set local properties, e.g. via the "props" tag in XML bean definitions._These can be considered defaults, to be overridden by properties_loaded from files.;public void setProperties(Properties properties) {_		this.localProperties = new Properties[] {properties}__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,these,can,be,considered,defaults,to,be,overridden,by,properties,loaded,from,files;public,void,set,properties,properties,properties,this,local,properties,new,properties,properties
PropertiesLoaderSupport -> public void setProperties(Properties properties);1496837955;Set local properties, e.g. via the "props" tag in XML bean definitions._These can be considered defaults, to be overridden by properties_loaded from files.;public void setProperties(Properties properties) {_		this.localProperties = new Properties[] {properties}__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,these,can,be,considered,defaults,to,be,overridden,by,properties,loaded,from,files;public,void,set,properties,properties,properties,this,local,properties,new,properties,properties
PropertiesLoaderSupport -> public void setProperties(Properties properties);1498780456;Set local properties, e.g. via the "props" tag in XML bean definitions._These can be considered defaults, to be overridden by properties_loaded from files.;public void setProperties(Properties properties) {_		this.localProperties = new Properties[] {properties}__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,these,can,be,considered,defaults,to,be,overridden,by,properties,loaded,from,files;public,void,set,properties,properties,properties,this,local,properties,new,properties,properties
PropertiesLoaderSupport -> public void setProperties(Properties properties);1530174524;Set local properties, e.g. via the "props" tag in XML bean definitions._These can be considered defaults, to be overridden by properties_loaded from files.;public void setProperties(Properties properties) {_		this.localProperties = new Properties[] {properties}__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,these,can,be,considered,defaults,to,be,overridden,by,properties,loaded,from,files;public,void,set,properties,properties,properties,this,local,properties,new,properties,properties
PropertiesLoaderSupport -> public void setProperties(Properties properties);1532091916;Set local properties, e.g. via the "props" tag in XML bean definitions._These can be considered defaults, to be overridden by properties_loaded from files.;public void setProperties(Properties properties) {_		this.localProperties = new Properties[] {properties}__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,these,can,be,considered,defaults,to,be,overridden,by,properties,loaded,from,files;public,void,set,properties,properties,properties,this,local,properties,new,properties,properties
PropertiesLoaderSupport -> public void setFileEncoding(String encoding);1328020251;Set the encoding to use for parsing properties files._<p>Default is none, using the <code>java.util.Properties</code>_default encoding._<p>Only applies to classic properties files, not to XML files._@see org.springframework.util.PropertiesPersister#load;public void setFileEncoding(String encoding) {_		this.fileEncoding = encoding__	};set,the,encoding,to,use,for,parsing,properties,files,p,default,is,none,using,the,code,java,util,properties,code,default,encoding,p,only,applies,to,classic,properties,files,not,to,xml,files,see,org,springframework,util,properties,persister,load;public,void,set,file,encoding,string,encoding,this,file,encoding,encoding
PropertiesLoaderSupport -> public void setFileEncoding(String encoding);1329142650;Set the encoding to use for parsing properties files._<p>Default is none, using the <code>java.util.Properties</code>_default encoding._<p>Only applies to classic properties files, not to XML files._@see org.springframework.util.PropertiesPersister#load;public void setFileEncoding(String encoding) {_		this.fileEncoding = encoding__	};set,the,encoding,to,use,for,parsing,properties,files,p,default,is,none,using,the,code,java,util,properties,code,default,encoding,p,only,applies,to,classic,properties,files,not,to,xml,files,see,org,springframework,util,properties,persister,load;public,void,set,file,encoding,string,encoding,this,file,encoding,encoding
PropertiesLoaderSupport -> public void setFileEncoding(String encoding);1356735495;Set the encoding to use for parsing properties files._<p>Default is none, using the {@code java.util.Properties}_default encoding._<p>Only applies to classic properties files, not to XML files._@see org.springframework.util.PropertiesPersister#load;public void setFileEncoding(String encoding) {_		this.fileEncoding = encoding__	};set,the,encoding,to,use,for,parsing,properties,files,p,default,is,none,using,the,code,java,util,properties,default,encoding,p,only,applies,to,classic,properties,files,not,to,xml,files,see,org,springframework,util,properties,persister,load;public,void,set,file,encoding,string,encoding,this,file,encoding,encoding
PropertiesLoaderSupport -> public void setFileEncoding(String encoding);1362408075;Set the encoding to use for parsing properties files._<p>Default is none, using the {@code java.util.Properties}_default encoding._<p>Only applies to classic properties files, not to XML files._@see org.springframework.util.PropertiesPersister#load;public void setFileEncoding(String encoding) {_		this.fileEncoding = encoding__	};set,the,encoding,to,use,for,parsing,properties,files,p,default,is,none,using,the,code,java,util,properties,default,encoding,p,only,applies,to,classic,properties,files,not,to,xml,files,see,org,springframework,util,properties,persister,load;public,void,set,file,encoding,string,encoding,this,file,encoding,encoding
PropertiesLoaderSupport -> public void setFileEncoding(String encoding);1408624154;Set the encoding to use for parsing properties files._<p>Default is none, using the {@code java.util.Properties}_default encoding._<p>Only applies to classic properties files, not to XML files._@see org.springframework.util.PropertiesPersister#load;public void setFileEncoding(String encoding) {_		this.fileEncoding = encoding__	};set,the,encoding,to,use,for,parsing,properties,files,p,default,is,none,using,the,code,java,util,properties,default,encoding,p,only,applies,to,classic,properties,files,not,to,xml,files,see,org,springframework,util,properties,persister,load;public,void,set,file,encoding,string,encoding,this,file,encoding,encoding
PropertiesLoaderSupport -> public void setFileEncoding(String encoding);1486719670;Set the encoding to use for parsing properties files._<p>Default is none, using the {@code java.util.Properties}_default encoding._<p>Only applies to classic properties files, not to XML files._@see org.springframework.util.PropertiesPersister#load;public void setFileEncoding(String encoding) {_		this.fileEncoding = encoding__	};set,the,encoding,to,use,for,parsing,properties,files,p,default,is,none,using,the,code,java,util,properties,default,encoding,p,only,applies,to,classic,properties,files,not,to,xml,files,see,org,springframework,util,properties,persister,load;public,void,set,file,encoding,string,encoding,this,file,encoding,encoding
PropertiesLoaderSupport -> public void setFileEncoding(String encoding);1491903930;Set the encoding to use for parsing properties files._<p>Default is none, using the {@code java.util.Properties}_default encoding._<p>Only applies to classic properties files, not to XML files._@see org.springframework.util.PropertiesPersister#load;public void setFileEncoding(String encoding) {_		this.fileEncoding = encoding__	};set,the,encoding,to,use,for,parsing,properties,files,p,default,is,none,using,the,code,java,util,properties,default,encoding,p,only,applies,to,classic,properties,files,not,to,xml,files,see,org,springframework,util,properties,persister,load;public,void,set,file,encoding,string,encoding,this,file,encoding,encoding
PropertiesLoaderSupport -> public void setFileEncoding(String encoding);1496837955;Set the encoding to use for parsing properties files._<p>Default is none, using the {@code java.util.Properties}_default encoding._<p>Only applies to classic properties files, not to XML files._@see org.springframework.util.PropertiesPersister#load;public void setFileEncoding(String encoding) {_		this.fileEncoding = encoding__	};set,the,encoding,to,use,for,parsing,properties,files,p,default,is,none,using,the,code,java,util,properties,default,encoding,p,only,applies,to,classic,properties,files,not,to,xml,files,see,org,springframework,util,properties,persister,load;public,void,set,file,encoding,string,encoding,this,file,encoding,encoding
PropertiesLoaderSupport -> public void setFileEncoding(String encoding);1498780456;Set the encoding to use for parsing properties files._<p>Default is none, using the {@code java.util.Properties}_default encoding._<p>Only applies to classic properties files, not to XML files._@see org.springframework.util.PropertiesPersister#load;public void setFileEncoding(String encoding) {_		this.fileEncoding = encoding__	};set,the,encoding,to,use,for,parsing,properties,files,p,default,is,none,using,the,code,java,util,properties,default,encoding,p,only,applies,to,classic,properties,files,not,to,xml,files,see,org,springframework,util,properties,persister,load;public,void,set,file,encoding,string,encoding,this,file,encoding,encoding
PropertiesLoaderSupport -> public void setFileEncoding(String encoding);1530174524;Set the encoding to use for parsing properties files._<p>Default is none, using the {@code java.util.Properties}_default encoding._<p>Only applies to classic properties files, not to XML files._@see org.springframework.util.PropertiesPersister#load;public void setFileEncoding(String encoding) {_		this.fileEncoding = encoding__	};set,the,encoding,to,use,for,parsing,properties,files,p,default,is,none,using,the,code,java,util,properties,default,encoding,p,only,applies,to,classic,properties,files,not,to,xml,files,see,org,springframework,util,properties,persister,load;public,void,set,file,encoding,string,encoding,this,file,encoding,encoding
PropertiesLoaderSupport -> public void setFileEncoding(String encoding);1532091916;Set the encoding to use for parsing properties files._<p>Default is none, using the {@code java.util.Properties}_default encoding._<p>Only applies to classic properties files, not to XML files._@see org.springframework.util.PropertiesPersister#load;public void setFileEncoding(String encoding) {_		this.fileEncoding = encoding__	};set,the,encoding,to,use,for,parsing,properties,files,p,default,is,none,using,the,code,java,util,properties,default,encoding,p,only,applies,to,classic,properties,files,not,to,xml,files,see,org,springframework,util,properties,persister,load;public,void,set,file,encoding,string,encoding,this,file,encoding,encoding
PropertiesLoaderSupport -> protected Properties mergeProperties() throws IOException;1328020251;Return a merged Properties instance containing both the_loaded properties and properties set on this FactoryBean.;protected Properties mergeProperties() throws IOException {_		Properties result = new Properties()___		if (this.localOverride) {_			_			loadProperties(result)__		}__		if (this.localProperties != null) {_			for (Properties localProp : this.localProperties) {_				CollectionUtils.mergePropertiesIntoMap(localProp, result)__			}_		}__		if (!this.localOverride) {_			_			loadProperties(result)__		}__		return result__	};return,a,merged,properties,instance,containing,both,the,loaded,properties,and,properties,set,on,this,factory,bean;protected,properties,merge,properties,throws,ioexception,properties,result,new,properties,if,this,local,override,load,properties,result,if,this,local,properties,null,for,properties,local,prop,this,local,properties,collection,utils,merge,properties,into,map,local,prop,result,if,this,local,override,load,properties,result,return,result
PropertiesLoaderSupport -> protected Properties mergeProperties() throws IOException;1329142650;Return a merged Properties instance containing both the_loaded properties and properties set on this FactoryBean.;protected Properties mergeProperties() throws IOException {_		Properties result = new Properties()___		if (this.localOverride) {_			_			loadProperties(result)__		}__		if (this.localProperties != null) {_			for (Properties localProp : this.localProperties) {_				CollectionUtils.mergePropertiesIntoMap(localProp, result)__			}_		}__		if (!this.localOverride) {_			_			loadProperties(result)__		}__		return result__	};return,a,merged,properties,instance,containing,both,the,loaded,properties,and,properties,set,on,this,factory,bean;protected,properties,merge,properties,throws,ioexception,properties,result,new,properties,if,this,local,override,load,properties,result,if,this,local,properties,null,for,properties,local,prop,this,local,properties,collection,utils,merge,properties,into,map,local,prop,result,if,this,local,override,load,properties,result,return,result
PropertiesLoaderSupport -> protected Properties mergeProperties() throws IOException;1356735495;Return a merged Properties instance containing both the_loaded properties and properties set on this FactoryBean.;protected Properties mergeProperties() throws IOException {_		Properties result = new Properties()___		if (this.localOverride) {_			_			loadProperties(result)__		}__		if (this.localProperties != null) {_			for (Properties localProp : this.localProperties) {_				CollectionUtils.mergePropertiesIntoMap(localProp, result)__			}_		}__		if (!this.localOverride) {_			_			loadProperties(result)__		}__		return result__	};return,a,merged,properties,instance,containing,both,the,loaded,properties,and,properties,set,on,this,factory,bean;protected,properties,merge,properties,throws,ioexception,properties,result,new,properties,if,this,local,override,load,properties,result,if,this,local,properties,null,for,properties,local,prop,this,local,properties,collection,utils,merge,properties,into,map,local,prop,result,if,this,local,override,load,properties,result,return,result
PropertiesLoaderSupport -> protected Properties mergeProperties() throws IOException;1362408075;Return a merged Properties instance containing both the_loaded properties and properties set on this FactoryBean.;protected Properties mergeProperties() throws IOException {_		Properties result = new Properties()___		if (this.localOverride) {_			_			loadProperties(result)__		}__		if (this.localProperties != null) {_			for (Properties localProp : this.localProperties) {_				CollectionUtils.mergePropertiesIntoMap(localProp, result)__			}_		}__		if (!this.localOverride) {_			_			loadProperties(result)__		}__		return result__	};return,a,merged,properties,instance,containing,both,the,loaded,properties,and,properties,set,on,this,factory,bean;protected,properties,merge,properties,throws,ioexception,properties,result,new,properties,if,this,local,override,load,properties,result,if,this,local,properties,null,for,properties,local,prop,this,local,properties,collection,utils,merge,properties,into,map,local,prop,result,if,this,local,override,load,properties,result,return,result
PropertiesLoaderSupport -> protected Properties mergeProperties() throws IOException;1408624154;Return a merged Properties instance containing both the_loaded properties and properties set on this FactoryBean.;protected Properties mergeProperties() throws IOException {_		Properties result = new Properties()___		if (this.localOverride) {_			_			loadProperties(result)__		}__		if (this.localProperties != null) {_			for (Properties localProp : this.localProperties) {_				CollectionUtils.mergePropertiesIntoMap(localProp, result)__			}_		}__		if (!this.localOverride) {_			_			loadProperties(result)__		}__		return result__	};return,a,merged,properties,instance,containing,both,the,loaded,properties,and,properties,set,on,this,factory,bean;protected,properties,merge,properties,throws,ioexception,properties,result,new,properties,if,this,local,override,load,properties,result,if,this,local,properties,null,for,properties,local,prop,this,local,properties,collection,utils,merge,properties,into,map,local,prop,result,if,this,local,override,load,properties,result,return,result
PropertiesLoaderSupport -> protected Properties mergeProperties() throws IOException;1486719670;Return a merged Properties instance containing both the_loaded properties and properties set on this FactoryBean.;protected Properties mergeProperties() throws IOException {_		Properties result = new Properties()___		if (this.localOverride) {_			_			loadProperties(result)__		}__		if (this.localProperties != null) {_			for (Properties localProp : this.localProperties) {_				CollectionUtils.mergePropertiesIntoMap(localProp, result)__			}_		}__		if (!this.localOverride) {_			_			loadProperties(result)__		}__		return result__	};return,a,merged,properties,instance,containing,both,the,loaded,properties,and,properties,set,on,this,factory,bean;protected,properties,merge,properties,throws,ioexception,properties,result,new,properties,if,this,local,override,load,properties,result,if,this,local,properties,null,for,properties,local,prop,this,local,properties,collection,utils,merge,properties,into,map,local,prop,result,if,this,local,override,load,properties,result,return,result
PropertiesLoaderSupport -> protected Properties mergeProperties() throws IOException;1491903930;Return a merged Properties instance containing both the_loaded properties and properties set on this FactoryBean.;protected Properties mergeProperties() throws IOException {_		Properties result = new Properties()___		if (this.localOverride) {_			_			loadProperties(result)__		}__		if (this.localProperties != null) {_			for (Properties localProp : this.localProperties) {_				CollectionUtils.mergePropertiesIntoMap(localProp, result)__			}_		}__		if (!this.localOverride) {_			_			loadProperties(result)__		}__		return result__	};return,a,merged,properties,instance,containing,both,the,loaded,properties,and,properties,set,on,this,factory,bean;protected,properties,merge,properties,throws,ioexception,properties,result,new,properties,if,this,local,override,load,properties,result,if,this,local,properties,null,for,properties,local,prop,this,local,properties,collection,utils,merge,properties,into,map,local,prop,result,if,this,local,override,load,properties,result,return,result
PropertiesLoaderSupport -> protected Properties mergeProperties() throws IOException;1496837955;Return a merged Properties instance containing both the_loaded properties and properties set on this FactoryBean.;protected Properties mergeProperties() throws IOException {_		Properties result = new Properties()___		if (this.localOverride) {_			_			loadProperties(result)__		}__		if (this.localProperties != null) {_			for (Properties localProp : this.localProperties) {_				CollectionUtils.mergePropertiesIntoMap(localProp, result)__			}_		}__		if (!this.localOverride) {_			_			loadProperties(result)__		}__		return result__	};return,a,merged,properties,instance,containing,both,the,loaded,properties,and,properties,set,on,this,factory,bean;protected,properties,merge,properties,throws,ioexception,properties,result,new,properties,if,this,local,override,load,properties,result,if,this,local,properties,null,for,properties,local,prop,this,local,properties,collection,utils,merge,properties,into,map,local,prop,result,if,this,local,override,load,properties,result,return,result
PropertiesLoaderSupport -> protected Properties mergeProperties() throws IOException;1498780456;Return a merged Properties instance containing both the_loaded properties and properties set on this FactoryBean.;protected Properties mergeProperties() throws IOException {_		Properties result = new Properties()___		if (this.localOverride) {_			_			loadProperties(result)__		}__		if (this.localProperties != null) {_			for (Properties localProp : this.localProperties) {_				CollectionUtils.mergePropertiesIntoMap(localProp, result)__			}_		}__		if (!this.localOverride) {_			_			loadProperties(result)__		}__		return result__	};return,a,merged,properties,instance,containing,both,the,loaded,properties,and,properties,set,on,this,factory,bean;protected,properties,merge,properties,throws,ioexception,properties,result,new,properties,if,this,local,override,load,properties,result,if,this,local,properties,null,for,properties,local,prop,this,local,properties,collection,utils,merge,properties,into,map,local,prop,result,if,this,local,override,load,properties,result,return,result
PropertiesLoaderSupport -> protected Properties mergeProperties() throws IOException;1530174524;Return a merged Properties instance containing both the_loaded properties and properties set on this FactoryBean.;protected Properties mergeProperties() throws IOException {_		Properties result = new Properties()___		if (this.localOverride) {_			_			loadProperties(result)__		}__		if (this.localProperties != null) {_			for (Properties localProp : this.localProperties) {_				CollectionUtils.mergePropertiesIntoMap(localProp, result)__			}_		}__		if (!this.localOverride) {_			_			loadProperties(result)__		}__		return result__	};return,a,merged,properties,instance,containing,both,the,loaded,properties,and,properties,set,on,this,factory,bean;protected,properties,merge,properties,throws,ioexception,properties,result,new,properties,if,this,local,override,load,properties,result,if,this,local,properties,null,for,properties,local,prop,this,local,properties,collection,utils,merge,properties,into,map,local,prop,result,if,this,local,override,load,properties,result,return,result
PropertiesLoaderSupport -> protected Properties mergeProperties() throws IOException;1532091916;Return a merged Properties instance containing both the_loaded properties and properties set on this FactoryBean.;protected Properties mergeProperties() throws IOException {_		Properties result = new Properties()___		if (this.localOverride) {_			_			loadProperties(result)__		}__		if (this.localProperties != null) {_			for (Properties localProp : this.localProperties) {_				CollectionUtils.mergePropertiesIntoMap(localProp, result)__			}_		}__		if (!this.localOverride) {_			_			loadProperties(result)__		}__		return result__	};return,a,merged,properties,instance,containing,both,the,loaded,properties,and,properties,set,on,this,factory,bean;protected,properties,merge,properties,throws,ioexception,properties,result,new,properties,if,this,local,override,load,properties,result,if,this,local,properties,null,for,properties,local,prop,this,local,properties,collection,utils,merge,properties,into,map,local,prop,result,if,this,local,override,load,properties,result,return,result
PropertiesLoaderSupport -> public void setPropertiesArray(Properties[] propertiesArray);1328020251;Set local properties, e.g. via the "props" tag in XML bean definitions,_allowing for merging multiple properties sets into one.;public void setPropertiesArray(Properties[] propertiesArray) {_		this.localProperties = propertiesArray__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,allowing,for,merging,multiple,properties,sets,into,one;public,void,set,properties,array,properties,properties,array,this,local,properties,properties,array
PropertiesLoaderSupport -> public void setPropertiesArray(Properties[] propertiesArray);1329142650;Set local properties, e.g. via the "props" tag in XML bean definitions,_allowing for merging multiple properties sets into one.;public void setPropertiesArray(Properties[] propertiesArray) {_		this.localProperties = propertiesArray__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,allowing,for,merging,multiple,properties,sets,into,one;public,void,set,properties,array,properties,properties,array,this,local,properties,properties,array
PropertiesLoaderSupport -> public void setPropertiesArray(Properties[] propertiesArray);1356735495;Set local properties, e.g. via the "props" tag in XML bean definitions,_allowing for merging multiple properties sets into one.;public void setPropertiesArray(Properties[] propertiesArray) {_		this.localProperties = propertiesArray__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,allowing,for,merging,multiple,properties,sets,into,one;public,void,set,properties,array,properties,properties,array,this,local,properties,properties,array
PropertiesLoaderSupport -> public void setPropertiesArray(Properties[] propertiesArray);1362408075;Set local properties, e.g. via the "props" tag in XML bean definitions,_allowing for merging multiple properties sets into one.;public void setPropertiesArray(Properties[] propertiesArray) {_		this.localProperties = propertiesArray__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,allowing,for,merging,multiple,properties,sets,into,one;public,void,set,properties,array,properties,properties,array,this,local,properties,properties,array
PropertiesLoaderSupport -> public void setLocations(Resource... locations);1408624154;Set locations of properties files to be loaded._<p>Can point to classic properties files or to XML files_that follow JDK 1.5's properties XML format._<p>Note: Properties defined in later files will override_properties defined earlier files, in case of overlapping keys._Hence, make sure that the most specific files are the last_ones in the given list of locations.;public void setLocations(Resource... locations) {_		this.locations = locations__	};set,locations,of,properties,files,to,be,loaded,p,can,point,to,classic,properties,files,or,to,xml,files,that,follow,jdk,1,5,s,properties,xml,format,p,note,properties,defined,in,later,files,will,override,properties,defined,earlier,files,in,case,of,overlapping,keys,hence,make,sure,that,the,most,specific,files,are,the,last,ones,in,the,given,list,of,locations;public,void,set,locations,resource,locations,this,locations,locations
PropertiesLoaderSupport -> public void setLocations(Resource... locations);1486719670;Set locations of properties files to be loaded._<p>Can point to classic properties files or to XML files_that follow JDK 1.5's properties XML format._<p>Note: Properties defined in later files will override_properties defined earlier files, in case of overlapping keys._Hence, make sure that the most specific files are the last_ones in the given list of locations.;public void setLocations(Resource... locations) {_		this.locations = locations__	};set,locations,of,properties,files,to,be,loaded,p,can,point,to,classic,properties,files,or,to,xml,files,that,follow,jdk,1,5,s,properties,xml,format,p,note,properties,defined,in,later,files,will,override,properties,defined,earlier,files,in,case,of,overlapping,keys,hence,make,sure,that,the,most,specific,files,are,the,last,ones,in,the,given,list,of,locations;public,void,set,locations,resource,locations,this,locations,locations
PropertiesLoaderSupport -> public void setLocations(Resource... locations);1491903930;Set locations of properties files to be loaded._<p>Can point to classic properties files or to XML files_that follow JDK 1.5's properties XML format._<p>Note: Properties defined in later files will override_properties defined earlier files, in case of overlapping keys._Hence, make sure that the most specific files are the last_ones in the given list of locations.;public void setLocations(Resource... locations) {_		this.locations = locations__	};set,locations,of,properties,files,to,be,loaded,p,can,point,to,classic,properties,files,or,to,xml,files,that,follow,jdk,1,5,s,properties,xml,format,p,note,properties,defined,in,later,files,will,override,properties,defined,earlier,files,in,case,of,overlapping,keys,hence,make,sure,that,the,most,specific,files,are,the,last,ones,in,the,given,list,of,locations;public,void,set,locations,resource,locations,this,locations,locations
PropertiesLoaderSupport -> public void setLocations(Resource... locations);1496837955;Set locations of properties files to be loaded._<p>Can point to classic properties files or to XML files_that follow JDK 1.5's properties XML format._<p>Note: Properties defined in later files will override_properties defined earlier files, in case of overlapping keys._Hence, make sure that the most specific files are the last_ones in the given list of locations.;public void setLocations(Resource... locations) {_		this.locations = locations__	};set,locations,of,properties,files,to,be,loaded,p,can,point,to,classic,properties,files,or,to,xml,files,that,follow,jdk,1,5,s,properties,xml,format,p,note,properties,defined,in,later,files,will,override,properties,defined,earlier,files,in,case,of,overlapping,keys,hence,make,sure,that,the,most,specific,files,are,the,last,ones,in,the,given,list,of,locations;public,void,set,locations,resource,locations,this,locations,locations
PropertiesLoaderSupport -> public void setLocations(Resource... locations);1498780456;Set locations of properties files to be loaded._<p>Can point to classic properties files or to XML files_that follow JDK 1.5's properties XML format._<p>Note: Properties defined in later files will override_properties defined earlier files, in case of overlapping keys._Hence, make sure that the most specific files are the last_ones in the given list of locations.;public void setLocations(Resource... locations) {_		this.locations = locations__	};set,locations,of,properties,files,to,be,loaded,p,can,point,to,classic,properties,files,or,to,xml,files,that,follow,jdk,1,5,s,properties,xml,format,p,note,properties,defined,in,later,files,will,override,properties,defined,earlier,files,in,case,of,overlapping,keys,hence,make,sure,that,the,most,specific,files,are,the,last,ones,in,the,given,list,of,locations;public,void,set,locations,resource,locations,this,locations,locations
PropertiesLoaderSupport -> public void setLocations(Resource... locations);1530174524;Set locations of properties files to be loaded._<p>Can point to classic properties files or to XML files_that follow JDK 1.5's properties XML format._<p>Note: Properties defined in later files will override_properties defined earlier files, in case of overlapping keys._Hence, make sure that the most specific files are the last_ones in the given list of locations.;public void setLocations(Resource... locations) {_		this.locations = locations__	};set,locations,of,properties,files,to,be,loaded,p,can,point,to,classic,properties,files,or,to,xml,files,that,follow,jdk,1,5,s,properties,xml,format,p,note,properties,defined,in,later,files,will,override,properties,defined,earlier,files,in,case,of,overlapping,keys,hence,make,sure,that,the,most,specific,files,are,the,last,ones,in,the,given,list,of,locations;public,void,set,locations,resource,locations,this,locations,locations
PropertiesLoaderSupport -> public void setLocations(Resource... locations);1532091916;Set locations of properties files to be loaded._<p>Can point to classic properties files or to XML files_that follow JDK 1.5's properties XML format._<p>Note: Properties defined in later files will override_properties defined earlier files, in case of overlapping keys._Hence, make sure that the most specific files are the last_ones in the given list of locations.;public void setLocations(Resource... locations) {_		this.locations = locations__	};set,locations,of,properties,files,to,be,loaded,p,can,point,to,classic,properties,files,or,to,xml,files,that,follow,jdk,1,5,s,properties,xml,format,p,note,properties,defined,in,later,files,will,override,properties,defined,earlier,files,in,case,of,overlapping,keys,hence,make,sure,that,the,most,specific,files,are,the,last,ones,in,the,given,list,of,locations;public,void,set,locations,resource,locations,this,locations,locations
PropertiesLoaderSupport -> public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister);1496837955;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,nullable,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesLoaderSupport -> public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister);1498780456;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,nullable,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesLoaderSupport -> public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister);1530174524;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,nullable,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesLoaderSupport -> public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister);1532091916;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,nullable,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesLoaderSupport -> public void setLocation(Resource location);1328020251;Set a location of a properties file to be loaded._<p>Can point to a classic properties file or to an XML file_that follows JDK 1.5's properties XML format.;public void setLocation(Resource location) {_		this.locations = new Resource[] {location}__	};set,a,location,of,a,properties,file,to,be,loaded,p,can,point,to,a,classic,properties,file,or,to,an,xml,file,that,follows,jdk,1,5,s,properties,xml,format;public,void,set,location,resource,location,this,locations,new,resource,location
PropertiesLoaderSupport -> public void setLocation(Resource location);1329142650;Set a location of a properties file to be loaded._<p>Can point to a classic properties file or to an XML file_that follows JDK 1.5's properties XML format.;public void setLocation(Resource location) {_		this.locations = new Resource[] {location}__	};set,a,location,of,a,properties,file,to,be,loaded,p,can,point,to,a,classic,properties,file,or,to,an,xml,file,that,follows,jdk,1,5,s,properties,xml,format;public,void,set,location,resource,location,this,locations,new,resource,location
PropertiesLoaderSupport -> public void setLocation(Resource location);1356735495;Set a location of a properties file to be loaded._<p>Can point to a classic properties file or to an XML file_that follows JDK 1.5's properties XML format.;public void setLocation(Resource location) {_		this.locations = new Resource[] {location}__	};set,a,location,of,a,properties,file,to,be,loaded,p,can,point,to,a,classic,properties,file,or,to,an,xml,file,that,follows,jdk,1,5,s,properties,xml,format;public,void,set,location,resource,location,this,locations,new,resource,location
PropertiesLoaderSupport -> public void setLocation(Resource location);1362408075;Set a location of a properties file to be loaded._<p>Can point to a classic properties file or to an XML file_that follows JDK 1.5's properties XML format.;public void setLocation(Resource location) {_		this.locations = new Resource[] {location}__	};set,a,location,of,a,properties,file,to,be,loaded,p,can,point,to,a,classic,properties,file,or,to,an,xml,file,that,follows,jdk,1,5,s,properties,xml,format;public,void,set,location,resource,location,this,locations,new,resource,location
PropertiesLoaderSupport -> public void setLocation(Resource location);1408624154;Set a location of a properties file to be loaded._<p>Can point to a classic properties file or to an XML file_that follows JDK 1.5's properties XML format.;public void setLocation(Resource location) {_		this.locations = new Resource[] {location}__	};set,a,location,of,a,properties,file,to,be,loaded,p,can,point,to,a,classic,properties,file,or,to,an,xml,file,that,follows,jdk,1,5,s,properties,xml,format;public,void,set,location,resource,location,this,locations,new,resource,location
PropertiesLoaderSupport -> public void setLocation(Resource location);1486719670;Set a location of a properties file to be loaded._<p>Can point to a classic properties file or to an XML file_that follows JDK 1.5's properties XML format.;public void setLocation(Resource location) {_		this.locations = new Resource[] {location}__	};set,a,location,of,a,properties,file,to,be,loaded,p,can,point,to,a,classic,properties,file,or,to,an,xml,file,that,follows,jdk,1,5,s,properties,xml,format;public,void,set,location,resource,location,this,locations,new,resource,location
PropertiesLoaderSupport -> public void setLocation(Resource location);1491903930;Set a location of a properties file to be loaded._<p>Can point to a classic properties file or to an XML file_that follows JDK 1.5's properties XML format.;public void setLocation(Resource location) {_		this.locations = new Resource[] {location}__	};set,a,location,of,a,properties,file,to,be,loaded,p,can,point,to,a,classic,properties,file,or,to,an,xml,file,that,follows,jdk,1,5,s,properties,xml,format;public,void,set,location,resource,location,this,locations,new,resource,location
PropertiesLoaderSupport -> public void setLocation(Resource location);1496837955;Set a location of a properties file to be loaded._<p>Can point to a classic properties file or to an XML file_that follows JDK 1.5's properties XML format.;public void setLocation(Resource location) {_		this.locations = new Resource[] {location}__	};set,a,location,of,a,properties,file,to,be,loaded,p,can,point,to,a,classic,properties,file,or,to,an,xml,file,that,follows,jdk,1,5,s,properties,xml,format;public,void,set,location,resource,location,this,locations,new,resource,location
PropertiesLoaderSupport -> public void setLocation(Resource location);1498780456;Set a location of a properties file to be loaded._<p>Can point to a classic properties file or to an XML file_that follows JDK 1.5's properties XML format.;public void setLocation(Resource location) {_		this.locations = new Resource[] {location}__	};set,a,location,of,a,properties,file,to,be,loaded,p,can,point,to,a,classic,properties,file,or,to,an,xml,file,that,follows,jdk,1,5,s,properties,xml,format;public,void,set,location,resource,location,this,locations,new,resource,location
PropertiesLoaderSupport -> public void setLocation(Resource location);1530174524;Set a location of a properties file to be loaded._<p>Can point to a classic properties file or to an XML file_that follows JDK 1.5's properties XML format.;public void setLocation(Resource location) {_		this.locations = new Resource[] {location}__	};set,a,location,of,a,properties,file,to,be,loaded,p,can,point,to,a,classic,properties,file,or,to,an,xml,file,that,follows,jdk,1,5,s,properties,xml,format;public,void,set,location,resource,location,this,locations,new,resource,location
PropertiesLoaderSupport -> public void setLocation(Resource location);1532091916;Set a location of a properties file to be loaded._<p>Can point to a classic properties file or to an XML file_that follows JDK 1.5's properties XML format.;public void setLocation(Resource location) {_		this.locations = new Resource[] {location}__	};set,a,location,of,a,properties,file,to,be,loaded,p,can,point,to,a,classic,properties,file,or,to,an,xml,file,that,follows,jdk,1,5,s,properties,xml,format;public,void,set,location,resource,location,this,locations,new,resource,location
PropertiesLoaderSupport -> protected void loadProperties(Properties props) throws IOException;1328020251;Load properties into the given instance._@param props the Properties instance to load into_@throws java.io.IOException in case of I/O errors_@see #setLocations;protected void loadProperties(Properties props) throws IOException {_		if (this.locations != null) {_			for (Resource location : this.locations) {_				if (logger.isInfoEnabled()) {_					logger.info("Loading properties file from " + location)__				}_				InputStream is = null__				try {_					is = location.getInputStream()___					String filename = (location instanceof AbstractFileResolvingResource) ?_							location.getFilename() : null__					if (filename != null && filename.endsWith(XML_FILE_EXTENSION)) {_						this.propertiesPersister.loadFromXml(props, is)__					}_					else {_						if (this.fileEncoding != null) {_							this.propertiesPersister.load(props, new InputStreamReader(is, this.fileEncoding))__						}_						else {_							this.propertiesPersister.load(props, is)__						}_					}_				}_				catch (IOException ex) {_					if (this.ignoreResourceNotFound) {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not load properties from " + location + ": " + ex.getMessage())__						}_					}_					else {_						throw ex__					}_				}_				finally {_					if (is != null) {_						is.close()__					}_				}_			}_		}_	};load,properties,into,the,given,instance,param,props,the,properties,instance,to,load,into,throws,java,io,ioexception,in,case,of,i,o,errors,see,set,locations;protected,void,load,properties,properties,props,throws,ioexception,if,this,locations,null,for,resource,location,this,locations,if,logger,is,info,enabled,logger,info,loading,properties,file,from,location,input,stream,is,null,try,is,location,get,input,stream,string,filename,location,instanceof,abstract,file,resolving,resource,location,get,filename,null,if,filename,null,filename,ends,with,this,properties,persister,load,from,xml,props,is,else,if,this,file,encoding,null,this,properties,persister,load,props,new,input,stream,reader,is,this,file,encoding,else,this,properties,persister,load,props,is,catch,ioexception,ex,if,this,ignore,resource,not,found,if,logger,is,warn,enabled,logger,warn,could,not,load,properties,from,location,ex,get,message,else,throw,ex,finally,if,is,null,is,close
PropertiesLoaderSupport -> protected void loadProperties(Properties props) throws IOException;1329142650;Load properties into the given instance._@param props the Properties instance to load into_@throws java.io.IOException in case of I/O errors_@see #setLocations;protected void loadProperties(Properties props) throws IOException {_		if (this.locations != null) {_			for (Resource location : this.locations) {_				if (logger.isInfoEnabled()) {_					logger.info("Loading properties file from " + location)__				}_				InputStream is = null__				try {_					is = location.getInputStream()__					String filename = location.getFilename()__					if (filename != null && filename.endsWith(XML_FILE_EXTENSION)) {_						this.propertiesPersister.loadFromXml(props, is)__					}_					else {_						if (this.fileEncoding != null) {_							this.propertiesPersister.load(props, new InputStreamReader(is, this.fileEncoding))__						}_						else {_							this.propertiesPersister.load(props, is)__						}_					}_				}_				catch (IOException ex) {_					if (this.ignoreResourceNotFound) {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not load properties from " + location + ": " + ex.getMessage())__						}_					}_					else {_						throw ex__					}_				}_				finally {_					if (is != null) {_						is.close()__					}_				}_			}_		}_	};load,properties,into,the,given,instance,param,props,the,properties,instance,to,load,into,throws,java,io,ioexception,in,case,of,i,o,errors,see,set,locations;protected,void,load,properties,properties,props,throws,ioexception,if,this,locations,null,for,resource,location,this,locations,if,logger,is,info,enabled,logger,info,loading,properties,file,from,location,input,stream,is,null,try,is,location,get,input,stream,string,filename,location,get,filename,if,filename,null,filename,ends,with,this,properties,persister,load,from,xml,props,is,else,if,this,file,encoding,null,this,properties,persister,load,props,new,input,stream,reader,is,this,file,encoding,else,this,properties,persister,load,props,is,catch,ioexception,ex,if,this,ignore,resource,not,found,if,logger,is,warn,enabled,logger,warn,could,not,load,properties,from,location,ex,get,message,else,throw,ex,finally,if,is,null,is,close
PropertiesLoaderSupport -> protected void loadProperties(Properties props) throws IOException;1356735495;Load properties into the given instance._@param props the Properties instance to load into_@throws java.io.IOException in case of I/O errors_@see #setLocations;protected void loadProperties(Properties props) throws IOException {_		if (this.locations != null) {_			for (Resource location : this.locations) {_				if (logger.isInfoEnabled()) {_					logger.info("Loading properties file from " + location)__				}_				InputStream is = null__				try {_					is = location.getInputStream()__					String filename = location.getFilename()__					if (filename != null && filename.endsWith(XML_FILE_EXTENSION)) {_						this.propertiesPersister.loadFromXml(props, is)__					}_					else {_						if (this.fileEncoding != null) {_							this.propertiesPersister.load(props, new InputStreamReader(is, this.fileEncoding))__						}_						else {_							this.propertiesPersister.load(props, is)__						}_					}_				}_				catch (IOException ex) {_					if (this.ignoreResourceNotFound) {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not load properties from " + location + ": " + ex.getMessage())__						}_					}_					else {_						throw ex__					}_				}_				finally {_					if (is != null) {_						is.close()__					}_				}_			}_		}_	};load,properties,into,the,given,instance,param,props,the,properties,instance,to,load,into,throws,java,io,ioexception,in,case,of,i,o,errors,see,set,locations;protected,void,load,properties,properties,props,throws,ioexception,if,this,locations,null,for,resource,location,this,locations,if,logger,is,info,enabled,logger,info,loading,properties,file,from,location,input,stream,is,null,try,is,location,get,input,stream,string,filename,location,get,filename,if,filename,null,filename,ends,with,this,properties,persister,load,from,xml,props,is,else,if,this,file,encoding,null,this,properties,persister,load,props,new,input,stream,reader,is,this,file,encoding,else,this,properties,persister,load,props,is,catch,ioexception,ex,if,this,ignore,resource,not,found,if,logger,is,warn,enabled,logger,warn,could,not,load,properties,from,location,ex,get,message,else,throw,ex,finally,if,is,null,is,close
PropertiesLoaderSupport -> protected void loadProperties(Properties props) throws IOException;1362408075;Load properties into the given instance._@param props the Properties instance to load into_@throws IOException in case of I/O errors_@see #setLocations;protected void loadProperties(Properties props) throws IOException {_		if (this.locations != null) {_			for (Resource location : this.locations) {_				if (logger.isInfoEnabled()) {_					logger.info("Loading properties file from " + location)__				}_				try {_					PropertiesLoaderUtils.fillProperties(_							props, new EncodedResource(location, this.fileEncoding), this.propertiesPersister)__				}_				catch (IOException ex) {_					if (this.ignoreResourceNotFound) {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not load properties from " + location + ": " + ex.getMessage())__						}_					}_					else {_						throw ex__					}_				}_			}_		}_	};load,properties,into,the,given,instance,param,props,the,properties,instance,to,load,into,throws,ioexception,in,case,of,i,o,errors,see,set,locations;protected,void,load,properties,properties,props,throws,ioexception,if,this,locations,null,for,resource,location,this,locations,if,logger,is,info,enabled,logger,info,loading,properties,file,from,location,try,properties,loader,utils,fill,properties,props,new,encoded,resource,location,this,file,encoding,this,properties,persister,catch,ioexception,ex,if,this,ignore,resource,not,found,if,logger,is,warn,enabled,logger,warn,could,not,load,properties,from,location,ex,get,message,else,throw,ex
PropertiesLoaderSupport -> protected void loadProperties(Properties props) throws IOException;1408624154;Load properties into the given instance._@param props the Properties instance to load into_@throws IOException in case of I/O errors_@see #setLocations;protected void loadProperties(Properties props) throws IOException {_		if (this.locations != null) {_			for (Resource location : this.locations) {_				if (logger.isInfoEnabled()) {_					logger.info("Loading properties file from " + location)__				}_				try {_					PropertiesLoaderUtils.fillProperties(_							props, new EncodedResource(location, this.fileEncoding), this.propertiesPersister)__				}_				catch (IOException ex) {_					if (this.ignoreResourceNotFound) {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not load properties from " + location + ": " + ex.getMessage())__						}_					}_					else {_						throw ex__					}_				}_			}_		}_	};load,properties,into,the,given,instance,param,props,the,properties,instance,to,load,into,throws,ioexception,in,case,of,i,o,errors,see,set,locations;protected,void,load,properties,properties,props,throws,ioexception,if,this,locations,null,for,resource,location,this,locations,if,logger,is,info,enabled,logger,info,loading,properties,file,from,location,try,properties,loader,utils,fill,properties,props,new,encoded,resource,location,this,file,encoding,this,properties,persister,catch,ioexception,ex,if,this,ignore,resource,not,found,if,logger,is,warn,enabled,logger,warn,could,not,load,properties,from,location,ex,get,message,else,throw,ex
PropertiesLoaderSupport -> protected void loadProperties(Properties props) throws IOException;1486719670;Load properties into the given instance._@param props the Properties instance to load into_@throws IOException in case of I/O errors_@see #setLocations;protected void loadProperties(Properties props) throws IOException {_		if (this.locations != null) {_			for (Resource location : this.locations) {_				if (logger.isDebugEnabled()) {_					logger.debug("Loading properties file from " + location)__				}_				try {_					PropertiesLoaderUtils.fillProperties(_							props, new EncodedResource(location, this.fileEncoding), this.propertiesPersister)__				}_				catch (FileNotFoundException ex) {_					if (this.ignoreResourceNotFound) {_						if (logger.isInfoEnabled()) {_							logger.info("Properties resource not found: " + ex.getMessage())__						}_					}_					else {_						throw ex__					}_				}_			}_		}_	};load,properties,into,the,given,instance,param,props,the,properties,instance,to,load,into,throws,ioexception,in,case,of,i,o,errors,see,set,locations;protected,void,load,properties,properties,props,throws,ioexception,if,this,locations,null,for,resource,location,this,locations,if,logger,is,debug,enabled,logger,debug,loading,properties,file,from,location,try,properties,loader,utils,fill,properties,props,new,encoded,resource,location,this,file,encoding,this,properties,persister,catch,file,not,found,exception,ex,if,this,ignore,resource,not,found,if,logger,is,info,enabled,logger,info,properties,resource,not,found,ex,get,message,else,throw,ex
PropertiesLoaderSupport -> protected void loadProperties(Properties props) throws IOException;1491903930;Load properties into the given instance._@param props the Properties instance to load into_@throws IOException in case of I/O errors_@see #setLocations;protected void loadProperties(Properties props) throws IOException {_		if (this.locations != null) {_			for (Resource location : this.locations) {_				if (logger.isDebugEnabled()) {_					logger.debug("Loading properties file from " + location)__				}_				try {_					PropertiesLoaderUtils.fillProperties(_							props, new EncodedResource(location, this.fileEncoding), this.propertiesPersister)__				}_				catch (FileNotFoundException | UnknownHostException ex) {_					if (this.ignoreResourceNotFound) {_						if (logger.isInfoEnabled()) {_							logger.info("Properties resource not found: " + ex.getMessage())__						}_					}_					else {_						throw ex__					}_				}_			}_		}_	};load,properties,into,the,given,instance,param,props,the,properties,instance,to,load,into,throws,ioexception,in,case,of,i,o,errors,see,set,locations;protected,void,load,properties,properties,props,throws,ioexception,if,this,locations,null,for,resource,location,this,locations,if,logger,is,debug,enabled,logger,debug,loading,properties,file,from,location,try,properties,loader,utils,fill,properties,props,new,encoded,resource,location,this,file,encoding,this,properties,persister,catch,file,not,found,exception,unknown,host,exception,ex,if,this,ignore,resource,not,found,if,logger,is,info,enabled,logger,info,properties,resource,not,found,ex,get,message,else,throw,ex
PropertiesLoaderSupport -> protected void loadProperties(Properties props) throws IOException;1496837955;Load properties into the given instance._@param props the Properties instance to load into_@throws IOException in case of I/O errors_@see #setLocations;protected void loadProperties(Properties props) throws IOException {_		if (this.locations != null) {_			for (Resource location : this.locations) {_				if (logger.isDebugEnabled()) {_					logger.debug("Loading properties file from " + location)__				}_				try {_					PropertiesLoaderUtils.fillProperties(_							props, new EncodedResource(location, this.fileEncoding), this.propertiesPersister)__				}_				catch (FileNotFoundException | UnknownHostException ex) {_					if (this.ignoreResourceNotFound) {_						if (logger.isInfoEnabled()) {_							logger.info("Properties resource not found: " + ex.getMessage())__						}_					}_					else {_						throw ex__					}_				}_			}_		}_	};load,properties,into,the,given,instance,param,props,the,properties,instance,to,load,into,throws,ioexception,in,case,of,i,o,errors,see,set,locations;protected,void,load,properties,properties,props,throws,ioexception,if,this,locations,null,for,resource,location,this,locations,if,logger,is,debug,enabled,logger,debug,loading,properties,file,from,location,try,properties,loader,utils,fill,properties,props,new,encoded,resource,location,this,file,encoding,this,properties,persister,catch,file,not,found,exception,unknown,host,exception,ex,if,this,ignore,resource,not,found,if,logger,is,info,enabled,logger,info,properties,resource,not,found,ex,get,message,else,throw,ex
PropertiesLoaderSupport -> protected void loadProperties(Properties props) throws IOException;1498780456;Load properties into the given instance._@param props the Properties instance to load into_@throws IOException in case of I/O errors_@see #setLocations;protected void loadProperties(Properties props) throws IOException {_		if (this.locations != null) {_			for (Resource location : this.locations) {_				if (logger.isDebugEnabled()) {_					logger.debug("Loading properties file from " + location)__				}_				try {_					PropertiesLoaderUtils.fillProperties(_							props, new EncodedResource(location, this.fileEncoding), this.propertiesPersister)__				}_				catch (FileNotFoundException | UnknownHostException ex) {_					if (this.ignoreResourceNotFound) {_						if (logger.isInfoEnabled()) {_							logger.info("Properties resource not found: " + ex.getMessage())__						}_					}_					else {_						throw ex__					}_				}_			}_		}_	};load,properties,into,the,given,instance,param,props,the,properties,instance,to,load,into,throws,ioexception,in,case,of,i,o,errors,see,set,locations;protected,void,load,properties,properties,props,throws,ioexception,if,this,locations,null,for,resource,location,this,locations,if,logger,is,debug,enabled,logger,debug,loading,properties,file,from,location,try,properties,loader,utils,fill,properties,props,new,encoded,resource,location,this,file,encoding,this,properties,persister,catch,file,not,found,exception,unknown,host,exception,ex,if,this,ignore,resource,not,found,if,logger,is,info,enabled,logger,info,properties,resource,not,found,ex,get,message,else,throw,ex
PropertiesLoaderSupport -> protected void loadProperties(Properties props) throws IOException;1530174524;Load properties into the given instance._@param props the Properties instance to load into_@throws IOException in case of I/O errors_@see #setLocations;protected void loadProperties(Properties props) throws IOException {_		if (this.locations != null) {_			for (Resource location : this.locations) {_				if (logger.isDebugEnabled()) {_					logger.debug("Loading properties file from " + location)__				}_				try {_					PropertiesLoaderUtils.fillProperties(_							props, new EncodedResource(location, this.fileEncoding), this.propertiesPersister)__				}_				catch (FileNotFoundException | UnknownHostException ex) {_					if (this.ignoreResourceNotFound) {_						if (logger.isInfoEnabled()) {_							logger.info("Properties resource not found: " + ex.getMessage())__						}_					}_					else {_						throw ex__					}_				}_			}_		}_	};load,properties,into,the,given,instance,param,props,the,properties,instance,to,load,into,throws,ioexception,in,case,of,i,o,errors,see,set,locations;protected,void,load,properties,properties,props,throws,ioexception,if,this,locations,null,for,resource,location,this,locations,if,logger,is,debug,enabled,logger,debug,loading,properties,file,from,location,try,properties,loader,utils,fill,properties,props,new,encoded,resource,location,this,file,encoding,this,properties,persister,catch,file,not,found,exception,unknown,host,exception,ex,if,this,ignore,resource,not,found,if,logger,is,info,enabled,logger,info,properties,resource,not,found,ex,get,message,else,throw,ex
PropertiesLoaderSupport -> protected void loadProperties(Properties props) throws IOException;1532091916;Load properties into the given instance._@param props the Properties instance to load into_@throws IOException in case of I/O errors_@see #setLocations;protected void loadProperties(Properties props) throws IOException {_		if (this.locations != null) {_			for (Resource location : this.locations) {_				if (logger.isTraceEnabled()) {_					logger.trace("Loading properties file from " + location)__				}_				try {_					PropertiesLoaderUtils.fillProperties(_							props, new EncodedResource(location, this.fileEncoding), this.propertiesPersister)__				}_				catch (FileNotFoundException | UnknownHostException ex) {_					if (this.ignoreResourceNotFound) {_						if (logger.isDebugEnabled()) {_							logger.debug("Properties resource not found: " + ex.getMessage())__						}_					}_					else {_						throw ex__					}_				}_			}_		}_	};load,properties,into,the,given,instance,param,props,the,properties,instance,to,load,into,throws,ioexception,in,case,of,i,o,errors,see,set,locations;protected,void,load,properties,properties,props,throws,ioexception,if,this,locations,null,for,resource,location,this,locations,if,logger,is,trace,enabled,logger,trace,loading,properties,file,from,location,try,properties,loader,utils,fill,properties,props,new,encoded,resource,location,this,file,encoding,this,properties,persister,catch,file,not,found,exception,unknown,host,exception,ex,if,this,ignore,resource,not,found,if,logger,is,debug,enabled,logger,debug,properties,resource,not,found,ex,get,message,else,throw,ex
PropertiesLoaderSupport -> public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound);1328020251;Set if failure to find the property resource should be ignored._<p>"true" is appropriate if the properties file is completely optional._Default is "false".;public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {_		this.ignoreResourceNotFound = ignoreResourceNotFound__	};set,if,failure,to,find,the,property,resource,should,be,ignored,p,true,is,appropriate,if,the,properties,file,is,completely,optional,default,is,false;public,void,set,ignore,resource,not,found,boolean,ignore,resource,not,found,this,ignore,resource,not,found,ignore,resource,not,found
PropertiesLoaderSupport -> public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound);1329142650;Set if failure to find the property resource should be ignored._<p>"true" is appropriate if the properties file is completely optional._Default is "false".;public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {_		this.ignoreResourceNotFound = ignoreResourceNotFound__	};set,if,failure,to,find,the,property,resource,should,be,ignored,p,true,is,appropriate,if,the,properties,file,is,completely,optional,default,is,false;public,void,set,ignore,resource,not,found,boolean,ignore,resource,not,found,this,ignore,resource,not,found,ignore,resource,not,found
PropertiesLoaderSupport -> public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound);1356735495;Set if failure to find the property resource should be ignored._<p>"true" is appropriate if the properties file is completely optional._Default is "false".;public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {_		this.ignoreResourceNotFound = ignoreResourceNotFound__	};set,if,failure,to,find,the,property,resource,should,be,ignored,p,true,is,appropriate,if,the,properties,file,is,completely,optional,default,is,false;public,void,set,ignore,resource,not,found,boolean,ignore,resource,not,found,this,ignore,resource,not,found,ignore,resource,not,found
PropertiesLoaderSupport -> public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound);1362408075;Set if failure to find the property resource should be ignored._<p>"true" is appropriate if the properties file is completely optional._Default is "false".;public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {_		this.ignoreResourceNotFound = ignoreResourceNotFound__	};set,if,failure,to,find,the,property,resource,should,be,ignored,p,true,is,appropriate,if,the,properties,file,is,completely,optional,default,is,false;public,void,set,ignore,resource,not,found,boolean,ignore,resource,not,found,this,ignore,resource,not,found,ignore,resource,not,found
PropertiesLoaderSupport -> public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound);1408624154;Set if failure to find the property resource should be ignored._<p>"true" is appropriate if the properties file is completely optional._Default is "false".;public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {_		this.ignoreResourceNotFound = ignoreResourceNotFound__	};set,if,failure,to,find,the,property,resource,should,be,ignored,p,true,is,appropriate,if,the,properties,file,is,completely,optional,default,is,false;public,void,set,ignore,resource,not,found,boolean,ignore,resource,not,found,this,ignore,resource,not,found,ignore,resource,not,found
PropertiesLoaderSupport -> public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound);1486719670;Set if failure to find the property resource should be ignored._<p>"true" is appropriate if the properties file is completely optional._Default is "false".;public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {_		this.ignoreResourceNotFound = ignoreResourceNotFound__	};set,if,failure,to,find,the,property,resource,should,be,ignored,p,true,is,appropriate,if,the,properties,file,is,completely,optional,default,is,false;public,void,set,ignore,resource,not,found,boolean,ignore,resource,not,found,this,ignore,resource,not,found,ignore,resource,not,found
PropertiesLoaderSupport -> public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound);1491903930;Set if failure to find the property resource should be ignored._<p>"true" is appropriate if the properties file is completely optional._Default is "false".;public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {_		this.ignoreResourceNotFound = ignoreResourceNotFound__	};set,if,failure,to,find,the,property,resource,should,be,ignored,p,true,is,appropriate,if,the,properties,file,is,completely,optional,default,is,false;public,void,set,ignore,resource,not,found,boolean,ignore,resource,not,found,this,ignore,resource,not,found,ignore,resource,not,found
PropertiesLoaderSupport -> public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound);1496837955;Set if failure to find the property resource should be ignored._<p>"true" is appropriate if the properties file is completely optional._Default is "false".;public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {_		this.ignoreResourceNotFound = ignoreResourceNotFound__	};set,if,failure,to,find,the,property,resource,should,be,ignored,p,true,is,appropriate,if,the,properties,file,is,completely,optional,default,is,false;public,void,set,ignore,resource,not,found,boolean,ignore,resource,not,found,this,ignore,resource,not,found,ignore,resource,not,found
PropertiesLoaderSupport -> public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound);1498780456;Set if failure to find the property resource should be ignored._<p>"true" is appropriate if the properties file is completely optional._Default is "false".;public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {_		this.ignoreResourceNotFound = ignoreResourceNotFound__	};set,if,failure,to,find,the,property,resource,should,be,ignored,p,true,is,appropriate,if,the,properties,file,is,completely,optional,default,is,false;public,void,set,ignore,resource,not,found,boolean,ignore,resource,not,found,this,ignore,resource,not,found,ignore,resource,not,found
PropertiesLoaderSupport -> public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound);1530174524;Set if failure to find the property resource should be ignored._<p>"true" is appropriate if the properties file is completely optional._Default is "false".;public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {_		this.ignoreResourceNotFound = ignoreResourceNotFound__	};set,if,failure,to,find,the,property,resource,should,be,ignored,p,true,is,appropriate,if,the,properties,file,is,completely,optional,default,is,false;public,void,set,ignore,resource,not,found,boolean,ignore,resource,not,found,this,ignore,resource,not,found,ignore,resource,not,found
PropertiesLoaderSupport -> public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound);1532091916;Set if failure to find the property resource should be ignored._<p>"true" is appropriate if the properties file is completely optional._Default is "false".;public void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {_		this.ignoreResourceNotFound = ignoreResourceNotFound__	};set,if,failure,to,find,the,property,resource,should,be,ignored,p,true,is,appropriate,if,the,properties,file,is,completely,optional,default,is,false;public,void,set,ignore,resource,not,found,boolean,ignore,resource,not,found,this,ignore,resource,not,found,ignore,resource,not,found
PropertiesLoaderSupport -> public void setPropertiesArray(Properties... propertiesArray);1408624154;Set local properties, e.g. via the "props" tag in XML bean definitions,_allowing for merging multiple properties sets into one.;public void setPropertiesArray(Properties... propertiesArray) {_		this.localProperties = propertiesArray__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,allowing,for,merging,multiple,properties,sets,into,one;public,void,set,properties,array,properties,properties,array,this,local,properties,properties,array
PropertiesLoaderSupport -> public void setPropertiesArray(Properties... propertiesArray);1486719670;Set local properties, e.g. via the "props" tag in XML bean definitions,_allowing for merging multiple properties sets into one.;public void setPropertiesArray(Properties... propertiesArray) {_		this.localProperties = propertiesArray__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,allowing,for,merging,multiple,properties,sets,into,one;public,void,set,properties,array,properties,properties,array,this,local,properties,properties,array
PropertiesLoaderSupport -> public void setPropertiesArray(Properties... propertiesArray);1491903930;Set local properties, e.g. via the "props" tag in XML bean definitions,_allowing for merging multiple properties sets into one.;public void setPropertiesArray(Properties... propertiesArray) {_		this.localProperties = propertiesArray__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,allowing,for,merging,multiple,properties,sets,into,one;public,void,set,properties,array,properties,properties,array,this,local,properties,properties,array
PropertiesLoaderSupport -> public void setPropertiesArray(Properties... propertiesArray);1496837955;Set local properties, e.g. via the "props" tag in XML bean definitions,_allowing for merging multiple properties sets into one.;public void setPropertiesArray(Properties... propertiesArray) {_		this.localProperties = propertiesArray__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,allowing,for,merging,multiple,properties,sets,into,one;public,void,set,properties,array,properties,properties,array,this,local,properties,properties,array
PropertiesLoaderSupport -> public void setPropertiesArray(Properties... propertiesArray);1498780456;Set local properties, e.g. via the "props" tag in XML bean definitions,_allowing for merging multiple properties sets into one.;public void setPropertiesArray(Properties... propertiesArray) {_		this.localProperties = propertiesArray__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,allowing,for,merging,multiple,properties,sets,into,one;public,void,set,properties,array,properties,properties,array,this,local,properties,properties,array
PropertiesLoaderSupport -> public void setPropertiesArray(Properties... propertiesArray);1530174524;Set local properties, e.g. via the "props" tag in XML bean definitions,_allowing for merging multiple properties sets into one.;public void setPropertiesArray(Properties... propertiesArray) {_		this.localProperties = propertiesArray__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,allowing,for,merging,multiple,properties,sets,into,one;public,void,set,properties,array,properties,properties,array,this,local,properties,properties,array
PropertiesLoaderSupport -> public void setPropertiesArray(Properties... propertiesArray);1532091916;Set local properties, e.g. via the "props" tag in XML bean definitions,_allowing for merging multiple properties sets into one.;public void setPropertiesArray(Properties... propertiesArray) {_		this.localProperties = propertiesArray__	};set,local,properties,e,g,via,the,props,tag,in,xml,bean,definitions,allowing,for,merging,multiple,properties,sets,into,one;public,void,set,properties,array,properties,properties,array,this,local,properties,properties,array
PropertiesLoaderSupport -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1328020251;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesLoaderSupport -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1329142650;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesLoaderSupport -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1356735495;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesLoaderSupport -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1362408075;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesLoaderSupport -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1408624154;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesLoaderSupport -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1486719670;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesLoaderSupport -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1491903930;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesLoaderSupport -> public void setLocations(Resource[] locations);1328020251;Set locations of properties files to be loaded._<p>Can point to classic properties files or to XML files_that follow JDK 1.5's properties XML format._<p>Note: Properties defined in later files will override_properties defined earlier files, in case of overlapping keys._Hence, make sure that the most specific files are the last_ones in the given list of locations.;public void setLocations(Resource[] locations) {_		this.locations = locations__	};set,locations,of,properties,files,to,be,loaded,p,can,point,to,classic,properties,files,or,to,xml,files,that,follow,jdk,1,5,s,properties,xml,format,p,note,properties,defined,in,later,files,will,override,properties,defined,earlier,files,in,case,of,overlapping,keys,hence,make,sure,that,the,most,specific,files,are,the,last,ones,in,the,given,list,of,locations;public,void,set,locations,resource,locations,this,locations,locations
PropertiesLoaderSupport -> public void setLocations(Resource[] locations);1329142650;Set locations of properties files to be loaded._<p>Can point to classic properties files or to XML files_that follow JDK 1.5's properties XML format._<p>Note: Properties defined in later files will override_properties defined earlier files, in case of overlapping keys._Hence, make sure that the most specific files are the last_ones in the given list of locations.;public void setLocations(Resource[] locations) {_		this.locations = locations__	};set,locations,of,properties,files,to,be,loaded,p,can,point,to,classic,properties,files,or,to,xml,files,that,follow,jdk,1,5,s,properties,xml,format,p,note,properties,defined,in,later,files,will,override,properties,defined,earlier,files,in,case,of,overlapping,keys,hence,make,sure,that,the,most,specific,files,are,the,last,ones,in,the,given,list,of,locations;public,void,set,locations,resource,locations,this,locations,locations
PropertiesLoaderSupport -> public void setLocations(Resource[] locations);1356735495;Set locations of properties files to be loaded._<p>Can point to classic properties files or to XML files_that follow JDK 1.5's properties XML format._<p>Note: Properties defined in later files will override_properties defined earlier files, in case of overlapping keys._Hence, make sure that the most specific files are the last_ones in the given list of locations.;public void setLocations(Resource[] locations) {_		this.locations = locations__	};set,locations,of,properties,files,to,be,loaded,p,can,point,to,classic,properties,files,or,to,xml,files,that,follow,jdk,1,5,s,properties,xml,format,p,note,properties,defined,in,later,files,will,override,properties,defined,earlier,files,in,case,of,overlapping,keys,hence,make,sure,that,the,most,specific,files,are,the,last,ones,in,the,given,list,of,locations;public,void,set,locations,resource,locations,this,locations,locations
PropertiesLoaderSupport -> public void setLocations(Resource[] locations);1362408075;Set locations of properties files to be loaded._<p>Can point to classic properties files or to XML files_that follow JDK 1.5's properties XML format._<p>Note: Properties defined in later files will override_properties defined earlier files, in case of overlapping keys._Hence, make sure that the most specific files are the last_ones in the given list of locations.;public void setLocations(Resource[] locations) {_		this.locations = locations__	};set,locations,of,properties,files,to,be,loaded,p,can,point,to,classic,properties,files,or,to,xml,files,that,follow,jdk,1,5,s,properties,xml,format,p,note,properties,defined,in,later,files,will,override,properties,defined,earlier,files,in,case,of,overlapping,keys,hence,make,sure,that,the,most,specific,files,are,the,last,ones,in,the,given,list,of,locations;public,void,set,locations,resource,locations,this,locations,locations
PropertiesLoaderSupport -> public void setLocalOverride(boolean localOverride);1328020251;Set whether local properties override properties from files._<p>Default is "false": Properties from files override local defaults._Can be switched to "true" to let local properties override defaults_from files.;public void setLocalOverride(boolean localOverride) {_		this.localOverride = localOverride__	};set,whether,local,properties,override,properties,from,files,p,default,is,false,properties,from,files,override,local,defaults,can,be,switched,to,true,to,let,local,properties,override,defaults,from,files;public,void,set,local,override,boolean,local,override,this,local,override,local,override
PropertiesLoaderSupport -> public void setLocalOverride(boolean localOverride);1329142650;Set whether local properties override properties from files._<p>Default is "false": Properties from files override local defaults._Can be switched to "true" to let local properties override defaults_from files.;public void setLocalOverride(boolean localOverride) {_		this.localOverride = localOverride__	};set,whether,local,properties,override,properties,from,files,p,default,is,false,properties,from,files,override,local,defaults,can,be,switched,to,true,to,let,local,properties,override,defaults,from,files;public,void,set,local,override,boolean,local,override,this,local,override,local,override
PropertiesLoaderSupport -> public void setLocalOverride(boolean localOverride);1356735495;Set whether local properties override properties from files._<p>Default is "false": Properties from files override local defaults._Can be switched to "true" to let local properties override defaults_from files.;public void setLocalOverride(boolean localOverride) {_		this.localOverride = localOverride__	};set,whether,local,properties,override,properties,from,files,p,default,is,false,properties,from,files,override,local,defaults,can,be,switched,to,true,to,let,local,properties,override,defaults,from,files;public,void,set,local,override,boolean,local,override,this,local,override,local,override
PropertiesLoaderSupport -> public void setLocalOverride(boolean localOverride);1362408075;Set whether local properties override properties from files._<p>Default is "false": Properties from files override local defaults._Can be switched to "true" to let local properties override defaults_from files.;public void setLocalOverride(boolean localOverride) {_		this.localOverride = localOverride__	};set,whether,local,properties,override,properties,from,files,p,default,is,false,properties,from,files,override,local,defaults,can,be,switched,to,true,to,let,local,properties,override,defaults,from,files;public,void,set,local,override,boolean,local,override,this,local,override,local,override
PropertiesLoaderSupport -> public void setLocalOverride(boolean localOverride);1408624154;Set whether local properties override properties from files._<p>Default is "false": Properties from files override local defaults._Can be switched to "true" to let local properties override defaults_from files.;public void setLocalOverride(boolean localOverride) {_		this.localOverride = localOverride__	};set,whether,local,properties,override,properties,from,files,p,default,is,false,properties,from,files,override,local,defaults,can,be,switched,to,true,to,let,local,properties,override,defaults,from,files;public,void,set,local,override,boolean,local,override,this,local,override,local,override
PropertiesLoaderSupport -> public void setLocalOverride(boolean localOverride);1486719670;Set whether local properties override properties from files._<p>Default is "false": Properties from files override local defaults._Can be switched to "true" to let local properties override defaults_from files.;public void setLocalOverride(boolean localOverride) {_		this.localOverride = localOverride__	};set,whether,local,properties,override,properties,from,files,p,default,is,false,properties,from,files,override,local,defaults,can,be,switched,to,true,to,let,local,properties,override,defaults,from,files;public,void,set,local,override,boolean,local,override,this,local,override,local,override
PropertiesLoaderSupport -> public void setLocalOverride(boolean localOverride);1491903930;Set whether local properties override properties from files._<p>Default is "false": Properties from files override local defaults._Can be switched to "true" to let local properties override defaults_from files.;public void setLocalOverride(boolean localOverride) {_		this.localOverride = localOverride__	};set,whether,local,properties,override,properties,from,files,p,default,is,false,properties,from,files,override,local,defaults,can,be,switched,to,true,to,let,local,properties,override,defaults,from,files;public,void,set,local,override,boolean,local,override,this,local,override,local,override
PropertiesLoaderSupport -> public void setLocalOverride(boolean localOverride);1496837955;Set whether local properties override properties from files._<p>Default is "false": Properties from files override local defaults._Can be switched to "true" to let local properties override defaults_from files.;public void setLocalOverride(boolean localOverride) {_		this.localOverride = localOverride__	};set,whether,local,properties,override,properties,from,files,p,default,is,false,properties,from,files,override,local,defaults,can,be,switched,to,true,to,let,local,properties,override,defaults,from,files;public,void,set,local,override,boolean,local,override,this,local,override,local,override
PropertiesLoaderSupport -> public void setLocalOverride(boolean localOverride);1498780456;Set whether local properties override properties from files._<p>Default is "false": Properties from files override local defaults._Can be switched to "true" to let local properties override defaults_from files.;public void setLocalOverride(boolean localOverride) {_		this.localOverride = localOverride__	};set,whether,local,properties,override,properties,from,files,p,default,is,false,properties,from,files,override,local,defaults,can,be,switched,to,true,to,let,local,properties,override,defaults,from,files;public,void,set,local,override,boolean,local,override,this,local,override,local,override
PropertiesLoaderSupport -> public void setLocalOverride(boolean localOverride);1530174524;Set whether local properties override properties from files._<p>Default is "false": Properties from files override local defaults._Can be switched to "true" to let local properties override defaults_from files.;public void setLocalOverride(boolean localOverride) {_		this.localOverride = localOverride__	};set,whether,local,properties,override,properties,from,files,p,default,is,false,properties,from,files,override,local,defaults,can,be,switched,to,true,to,let,local,properties,override,defaults,from,files;public,void,set,local,override,boolean,local,override,this,local,override,local,override
PropertiesLoaderSupport -> public void setLocalOverride(boolean localOverride);1532091916;Set whether local properties override properties from files._<p>Default is "false": Properties from files override local defaults._Can be switched to "true" to let local properties override defaults_from files.;public void setLocalOverride(boolean localOverride) {_		this.localOverride = localOverride__	};set,whether,local,properties,override,properties,from,files,p,default,is,false,properties,from,files,override,local,defaults,can,be,switched,to,true,to,let,local,properties,override,defaults,from,files;public,void,set,local,override,boolean,local,override,this,local,override,local,override
