commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Type getType() {     return this.type. }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof ParameterizedTypeReference && this.type.equals(((ParameterizedTypeReference<?>) other).type))). }
false;public;0;4;;@Override public int hashCode() {     return this.type.hashCode(). }
false;public;0;4;;@Override public String toString() {     return "ParameterizedTypeReference<" + this.type + ">". }
true;public,static;1;4;/**  * Build a {@code ParameterizedTypeReference} wrapping the given type.  * @param type a generic type (possibly obtained via reflection,  * e.g. from {@link java.lang.reflect.Method#getGenericReturnType()})  * @return a corresponding reference which may be passed into  * {@code ParameterizedTypeReference}-accepting methods  * @since 4.3.12  */ ;/**  * Build a {@code ParameterizedTypeReference} wrapping the given type.  * @param type a generic type (possibly obtained via reflection,  * e.g. from {@link java.lang.reflect.Method#getGenericReturnType()})  * @return a corresponding reference which may be passed into  * {@code ParameterizedTypeReference}-accepting methods  * @since 4.3.12  */ public static <T> ParameterizedTypeReference<T> forType(Type type) {     return new ParameterizedTypeReference<T>(type) {     }. }
false;private,static;1;12;;private static Class<?> findParameterizedTypeReferenceSubclass(Class<?> child) {     Class<?> parent = child.getSuperclass().     if (Object.class == parent) {         throw new IllegalStateException("Expected ParameterizedTypeReference superclass").     } else if (ParameterizedTypeReference.class == parent) {         return child.     } else {         return findParameterizedTypeReferenceSubclass(parent).     } }
