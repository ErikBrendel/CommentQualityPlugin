# id;timestamp;commentText;codeText;commentWords;codeWords
OverridingClassLoader -> public OverridingClassLoader(ClassLoader parent, ClassLoader overrideDelegate);1460395177;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for_@param overrideDelegate the ClassLoader to delegate to for overriding_@since 4.3;public OverridingClassLoader(ClassLoader parent, ClassLoader overrideDelegate) {_		super(parent)__		this.overrideDelegate = overrideDelegate__		for (String packageName : DEFAULT_EXCLUDED_PACKAGES) {_			excludePackage(packageName)__		}_	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for,param,override,delegate,the,class,loader,to,delegate,to,for,overriding,since,4,3;public,overriding,class,loader,class,loader,parent,class,loader,override,delegate,super,parent,this,override,delegate,override,delegate,for,string,package,name,exclude,package,package,name
OverridingClassLoader -> public OverridingClassLoader(ClassLoader parent, ClassLoader overrideDelegate);1460430854;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for_@param overrideDelegate the ClassLoader to delegate to for overriding_@since 4.3;public OverridingClassLoader(ClassLoader parent, ClassLoader overrideDelegate) {_		super(parent)__		this.overrideDelegate = overrideDelegate__		for (String packageName : DEFAULT_EXCLUDED_PACKAGES) {_			excludePackage(packageName)__		}_	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for,param,override,delegate,the,class,loader,to,delegate,to,for,overriding,since,4,3;public,overriding,class,loader,class,loader,parent,class,loader,override,delegate,super,parent,this,override,delegate,override,delegate,for,string,package,name,exclude,package,package,name
OverridingClassLoader -> public OverridingClassLoader(ClassLoader parent, ClassLoader overrideDelegate);1467677340;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for_@param overrideDelegate the ClassLoader to delegate to for overriding_@since 4.3;public OverridingClassLoader(ClassLoader parent, ClassLoader overrideDelegate) {_		super(parent)__		this.overrideDelegate = overrideDelegate__		for (String packageName : DEFAULT_EXCLUDED_PACKAGES) {_			excludePackage(packageName)__		}_	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for,param,override,delegate,the,class,loader,to,delegate,to,for,overriding,since,4,3;public,overriding,class,loader,class,loader,parent,class,loader,override,delegate,super,parent,this,override,delegate,override,delegate,for,string,package,name,exclude,package,package,name
OverridingClassLoader -> public OverridingClassLoader(ClassLoader parent, ClassLoader overrideDelegate);1495868221;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for_@param overrideDelegate the ClassLoader to delegate to for overriding_@since 4.3;public OverridingClassLoader(ClassLoader parent, ClassLoader overrideDelegate) {_		super(parent)__		this.overrideDelegate = overrideDelegate__		for (String packageName : DEFAULT_EXCLUDED_PACKAGES) {_			excludePackage(packageName)__		}_	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for,param,override,delegate,the,class,loader,to,delegate,to,for,overriding,since,4,3;public,overriding,class,loader,class,loader,parent,class,loader,override,delegate,super,parent,this,override,delegate,override,delegate,for,string,package,name,exclude,package,package,name
OverridingClassLoader -> @Nullable 	protected byte[] loadBytesForClass(String name) throws ClassNotFoundException;1495868221;Load the defining bytes for the given class,_to be turned into a Class object through a {@link #defineClass} call._<p>The default implementation delegates to {@link #openStreamForClass}_and {@link #transformIfNecessary}._@param name the name of the class_@return the byte content (with transformers already applied),_or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;@Nullable_	protected byte[] loadBytesForClass(String name) throws ClassNotFoundException {_		InputStream is = openStreamForClass(name)__		if (is == null) {_			return null__		}_		try {_			_			byte[] bytes = FileCopyUtils.copyToByteArray(is)__			_			return transformIfNecessary(name, bytes)__		}_		catch (IOException ex) {_			throw new ClassNotFoundException("Cannot load resource for class [" + name + "]", ex)__		}_	};load,the,defining,bytes,for,the,given,class,to,be,turned,into,a,class,object,through,a,link,define,class,call,p,the,default,implementation,delegates,to,link,open,stream,for,class,and,link,transform,if,necessary,param,name,the,name,of,the,class,return,the,byte,content,with,transformers,already,applied,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;nullable,protected,byte,load,bytes,for,class,string,name,throws,class,not,found,exception,input,stream,is,open,stream,for,class,name,if,is,null,return,null,try,byte,bytes,file,copy,utils,copy,to,byte,array,is,return,transform,if,necessary,name,bytes,catch,ioexception,ex,throw,new,class,not,found,exception,cannot,load,resource,for,class,name,ex
OverridingClassLoader -> @Nullable 	protected byte[] loadBytesForClass(String name) throws ClassNotFoundException;1496837955;Load the defining bytes for the given class,_to be turned into a Class object through a {@link #defineClass} call._<p>The default implementation delegates to {@link #openStreamForClass}_and {@link #transformIfNecessary}._@param name the name of the class_@return the byte content (with transformers already applied),_or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;@Nullable_	protected byte[] loadBytesForClass(String name) throws ClassNotFoundException {_		InputStream is = openStreamForClass(name)__		if (is == null) {_			return null__		}_		try {_			_			byte[] bytes = FileCopyUtils.copyToByteArray(is)__			_			return transformIfNecessary(name, bytes)__		}_		catch (IOException ex) {_			throw new ClassNotFoundException("Cannot load resource for class [" + name + "]", ex)__		}_	};load,the,defining,bytes,for,the,given,class,to,be,turned,into,a,class,object,through,a,link,define,class,call,p,the,default,implementation,delegates,to,link,open,stream,for,class,and,link,transform,if,necessary,param,name,the,name,of,the,class,return,the,byte,content,with,transformers,already,applied,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;nullable,protected,byte,load,bytes,for,class,string,name,throws,class,not,found,exception,input,stream,is,open,stream,for,class,name,if,is,null,return,null,try,byte,bytes,file,copy,utils,copy,to,byte,array,is,return,transform,if,necessary,name,bytes,catch,ioexception,ex,throw,new,class,not,found,exception,cannot,load,resource,for,class,name,ex
OverridingClassLoader -> @Nullable 	protected byte[] loadBytesForClass(String name) throws ClassNotFoundException;1498780456;Load the defining bytes for the given class,_to be turned into a Class object through a {@link #defineClass} call._<p>The default implementation delegates to {@link #openStreamForClass}_and {@link #transformIfNecessary}._@param name the name of the class_@return the byte content (with transformers already applied),_or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;@Nullable_	protected byte[] loadBytesForClass(String name) throws ClassNotFoundException {_		InputStream is = openStreamForClass(name)__		if (is == null) {_			return null__		}_		try {_			_			byte[] bytes = FileCopyUtils.copyToByteArray(is)__			_			return transformIfNecessary(name, bytes)__		}_		catch (IOException ex) {_			throw new ClassNotFoundException("Cannot load resource for class [" + name + "]", ex)__		}_	};load,the,defining,bytes,for,the,given,class,to,be,turned,into,a,class,object,through,a,link,define,class,call,p,the,default,implementation,delegates,to,link,open,stream,for,class,and,link,transform,if,necessary,param,name,the,name,of,the,class,return,the,byte,content,with,transformers,already,applied,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;nullable,protected,byte,load,bytes,for,class,string,name,throws,class,not,found,exception,input,stream,is,open,stream,for,class,name,if,is,null,return,null,try,byte,bytes,file,copy,utils,copy,to,byte,array,is,return,transform,if,necessary,name,bytes,catch,ioexception,ex,throw,new,class,not,found,exception,cannot,load,resource,for,class,name,ex
OverridingClassLoader -> @Nullable 	protected byte[] loadBytesForClass(String name) throws ClassNotFoundException;1530174524;Load the defining bytes for the given class,_to be turned into a Class object through a {@link #defineClass} call._<p>The default implementation delegates to {@link #openStreamForClass}_and {@link #transformIfNecessary}._@param name the name of the class_@return the byte content (with transformers already applied),_or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;@Nullable_	protected byte[] loadBytesForClass(String name) throws ClassNotFoundException {_		InputStream is = openStreamForClass(name)__		if (is == null) {_			return null__		}_		try {_			_			byte[] bytes = FileCopyUtils.copyToByteArray(is)__			_			return transformIfNecessary(name, bytes)__		}_		catch (IOException ex) {_			throw new ClassNotFoundException("Cannot load resource for class [" + name + "]", ex)__		}_	};load,the,defining,bytes,for,the,given,class,to,be,turned,into,a,class,object,through,a,link,define,class,call,p,the,default,implementation,delegates,to,link,open,stream,for,class,and,link,transform,if,necessary,param,name,the,name,of,the,class,return,the,byte,content,with,transformers,already,applied,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;nullable,protected,byte,load,bytes,for,class,string,name,throws,class,not,found,exception,input,stream,is,open,stream,for,class,name,if,is,null,return,null,try,byte,bytes,file,copy,utils,copy,to,byte,array,is,return,transform,if,necessary,name,bytes,catch,ioexception,ex,throw,new,class,not,found,exception,cannot,load,resource,for,class,name,ex
OverridingClassLoader -> protected InputStream openStreamForClass(String name);1328020251;Open an InputStream for the specified class._<p>The default implementation loads a standard class file through_the parent ClassLoader's <code>getResourceAsStream</code> method._@param name the name of the class_@return the InputStream containing the byte code for the specified class;protected InputStream openStreamForClass(String name) {_		String internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX__		return getParent().getResourceAsStream(internalName)__	};open,an,input,stream,for,the,specified,class,p,the,default,implementation,loads,a,standard,class,file,through,the,parent,class,loader,s,code,get,resource,as,stream,code,method,param,name,the,name,of,the,class,return,the,input,stream,containing,the,byte,code,for,the,specified,class;protected,input,stream,open,stream,for,class,string,name,string,internal,name,name,replace,return,get,parent,get,resource,as,stream,internal,name
OverridingClassLoader -> protected InputStream openStreamForClass(String name);1356735495;Open an InputStream for the specified class._<p>The default implementation loads a standard class file through_the parent ClassLoader's {@code getResourceAsStream} method._@param name the name of the class_@return the InputStream containing the byte code for the specified class;protected InputStream openStreamForClass(String name) {_		String internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX__		return getParent().getResourceAsStream(internalName)__	};open,an,input,stream,for,the,specified,class,p,the,default,implementation,loads,a,standard,class,file,through,the,parent,class,loader,s,code,get,resource,as,stream,method,param,name,the,name,of,the,class,return,the,input,stream,containing,the,byte,code,for,the,specified,class;protected,input,stream,open,stream,for,class,string,name,string,internal,name,name,replace,return,get,parent,get,resource,as,stream,internal,name
OverridingClassLoader -> protected InputStream openStreamForClass(String name);1385412762;Open an InputStream for the specified class._<p>The default implementation loads a standard class file through_the parent ClassLoader's {@code getResourceAsStream} method._@param name the name of the class_@return the InputStream containing the byte code for the specified class;protected InputStream openStreamForClass(String name) {_		String internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX__		return getParent().getResourceAsStream(internalName)__	};open,an,input,stream,for,the,specified,class,p,the,default,implementation,loads,a,standard,class,file,through,the,parent,class,loader,s,code,get,resource,as,stream,method,param,name,the,name,of,the,class,return,the,input,stream,containing,the,byte,code,for,the,specified,class;protected,input,stream,open,stream,for,class,string,name,string,internal,name,name,replace,return,get,parent,get,resource,as,stream,internal,name
OverridingClassLoader -> protected InputStream openStreamForClass(String name);1412253193;Open an InputStream for the specified class._<p>The default implementation loads a standard class file through_the parent ClassLoader's {@code getResourceAsStream} method._@param name the name of the class_@return the InputStream containing the byte code for the specified class;protected InputStream openStreamForClass(String name) {_		String internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX__		return getParent().getResourceAsStream(internalName)__	};open,an,input,stream,for,the,specified,class,p,the,default,implementation,loads,a,standard,class,file,through,the,parent,class,loader,s,code,get,resource,as,stream,method,param,name,the,name,of,the,class,return,the,input,stream,containing,the,byte,code,for,the,specified,class;protected,input,stream,open,stream,for,class,string,name,string,internal,name,name,replace,return,get,parent,get,resource,as,stream,internal,name
OverridingClassLoader -> protected InputStream openStreamForClass(String name);1460395177;Open an InputStream for the specified class._<p>The default implementation loads a standard class file through_the parent ClassLoader's {@code getResourceAsStream} method._@param name the name of the class_@return the InputStream containing the byte code for the specified class;protected InputStream openStreamForClass(String name) {_		String internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX__		return getParent().getResourceAsStream(internalName)__	};open,an,input,stream,for,the,specified,class,p,the,default,implementation,loads,a,standard,class,file,through,the,parent,class,loader,s,code,get,resource,as,stream,method,param,name,the,name,of,the,class,return,the,input,stream,containing,the,byte,code,for,the,specified,class;protected,input,stream,open,stream,for,class,string,name,string,internal,name,name,replace,return,get,parent,get,resource,as,stream,internal,name
OverridingClassLoader -> protected InputStream openStreamForClass(String name);1460430854;Open an InputStream for the specified class._<p>The default implementation loads a standard class file through_the parent ClassLoader's {@code getResourceAsStream} method._@param name the name of the class_@return the InputStream containing the byte code for the specified class;protected InputStream openStreamForClass(String name) {_		String internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX__		return getParent().getResourceAsStream(internalName)__	};open,an,input,stream,for,the,specified,class,p,the,default,implementation,loads,a,standard,class,file,through,the,parent,class,loader,s,code,get,resource,as,stream,method,param,name,the,name,of,the,class,return,the,input,stream,containing,the,byte,code,for,the,specified,class;protected,input,stream,open,stream,for,class,string,name,string,internal,name,name,replace,return,get,parent,get,resource,as,stream,internal,name
OverridingClassLoader -> protected InputStream openStreamForClass(String name);1467677340;Open an InputStream for the specified class._<p>The default implementation loads a standard class file through_the parent ClassLoader's {@code getResourceAsStream} method._@param name the name of the class_@return the InputStream containing the byte code for the specified class;protected InputStream openStreamForClass(String name) {_		String internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX__		return getParent().getResourceAsStream(internalName)__	};open,an,input,stream,for,the,specified,class,p,the,default,implementation,loads,a,standard,class,file,through,the,parent,class,loader,s,code,get,resource,as,stream,method,param,name,the,name,of,the,class,return,the,input,stream,containing,the,byte,code,for,the,specified,class;protected,input,stream,open,stream,for,class,string,name,string,internal,name,name,replace,return,get,parent,get,resource,as,stream,internal,name
OverridingClassLoader -> protected InputStream openStreamForClass(String name);1495868221;Open an InputStream for the specified class._<p>The default implementation loads a standard class file through_the parent ClassLoader's {@code getResourceAsStream} method._@param name the name of the class_@return the InputStream containing the byte code for the specified class;protected InputStream openStreamForClass(String name) {_		String internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX__		return getParent().getResourceAsStream(internalName)__	};open,an,input,stream,for,the,specified,class,p,the,default,implementation,loads,a,standard,class,file,through,the,parent,class,loader,s,code,get,resource,as,stream,method,param,name,the,name,of,the,class,return,the,input,stream,containing,the,byte,code,for,the,specified,class;protected,input,stream,open,stream,for,class,string,name,string,internal,name,name,replace,return,get,parent,get,resource,as,stream,internal,name
OverridingClassLoader -> public OverridingClassLoader(ClassLoader parent);1328020251;Create a new OverridingClassLoader for the given class loader._@param parent the ClassLoader to build an overriding ClassLoader for;public OverridingClassLoader(ClassLoader parent) {_		super(parent)__		for (String packageName : DEFAULT_EXCLUDED_PACKAGES) {_			excludePackage(packageName)__		}_	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for;public,overriding,class,loader,class,loader,parent,super,parent,for,string,package,name,exclude,package,package,name
OverridingClassLoader -> public OverridingClassLoader(ClassLoader parent);1356735495;Create a new OverridingClassLoader for the given class loader._@param parent the ClassLoader to build an overriding ClassLoader for;public OverridingClassLoader(ClassLoader parent) {_		super(parent)__		for (String packageName : DEFAULT_EXCLUDED_PACKAGES) {_			excludePackage(packageName)__		}_	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for;public,overriding,class,loader,class,loader,parent,super,parent,for,string,package,name,exclude,package,package,name
OverridingClassLoader -> public OverridingClassLoader(ClassLoader parent);1385412762;Create a new OverridingClassLoader for the given class loader._@param parent the ClassLoader to build an overriding ClassLoader for;public OverridingClassLoader(ClassLoader parent) {_		super(parent)__		for (String packageName : DEFAULT_EXCLUDED_PACKAGES) {_			excludePackage(packageName)__		}_	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for;public,overriding,class,loader,class,loader,parent,super,parent,for,string,package,name,exclude,package,package,name
OverridingClassLoader -> public OverridingClassLoader(ClassLoader parent);1412253193;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for;public OverridingClassLoader(ClassLoader parent) {_		super(parent)__		for (String packageName : DEFAULT_EXCLUDED_PACKAGES) {_			excludePackage(packageName)__		}_	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for;public,overriding,class,loader,class,loader,parent,super,parent,for,string,package,name,exclude,package,package,name
OverridingClassLoader -> public OverridingClassLoader(ClassLoader parent);1460395177;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for;public OverridingClassLoader(ClassLoader parent) {_		this(parent, null)__	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for;public,overriding,class,loader,class,loader,parent,this,parent,null
OverridingClassLoader -> public OverridingClassLoader(ClassLoader parent);1460430854;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for;public OverridingClassLoader(ClassLoader parent) {_		this(parent, null)__	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for;public,overriding,class,loader,class,loader,parent,this,parent,null
OverridingClassLoader -> public OverridingClassLoader(ClassLoader parent);1467677340;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for;public OverridingClassLoader(ClassLoader parent) {_		this(parent, null)__	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for;public,overriding,class,loader,class,loader,parent,this,parent,null
OverridingClassLoader -> public OverridingClassLoader(ClassLoader parent);1495868221;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for;public OverridingClassLoader(ClassLoader parent) {_		this(parent, null)__	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for;public,overriding,class,loader,class,loader,parent,this,parent,null
OverridingClassLoader -> protected byte[] loadBytesForClass(String name) throws ClassNotFoundException;1328020251;Load the defining bytes for the given class,_to be turned into a Class object through a {@link #defineClass} call._<p>The default implementation delegates to {@link #openStreamForClass}_and {@link #transformIfNecessary}._@param name the name of the class_@return the byte content (with transformers already applied),_or <code>null</code> if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected byte[] loadBytesForClass(String name) throws ClassNotFoundException {_		InputStream is = openStreamForClass(name)__		if (is == null) {_			return null__		}_		try {_			_			byte[] bytes = FileCopyUtils.copyToByteArray(is)__			_			return transformIfNecessary(name, bytes)__		}_		catch (IOException ex) {_			throw new ClassNotFoundException("Cannot load resource for class [" + name + "]", ex)__		}_	};load,the,defining,bytes,for,the,given,class,to,be,turned,into,a,class,object,through,a,link,define,class,call,p,the,default,implementation,delegates,to,link,open,stream,for,class,and,link,transform,if,necessary,param,name,the,name,of,the,class,return,the,byte,content,with,transformers,already,applied,or,code,null,code,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,byte,load,bytes,for,class,string,name,throws,class,not,found,exception,input,stream,is,open,stream,for,class,name,if,is,null,return,null,try,byte,bytes,file,copy,utils,copy,to,byte,array,is,return,transform,if,necessary,name,bytes,catch,ioexception,ex,throw,new,class,not,found,exception,cannot,load,resource,for,class,name,ex
OverridingClassLoader -> protected byte[] loadBytesForClass(String name) throws ClassNotFoundException;1356735495;Load the defining bytes for the given class,_to be turned into a Class object through a {@link #defineClass} call._<p>The default implementation delegates to {@link #openStreamForClass}_and {@link #transformIfNecessary}._@param name the name of the class_@return the byte content (with transformers already applied),_or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected byte[] loadBytesForClass(String name) throws ClassNotFoundException {_		InputStream is = openStreamForClass(name)__		if (is == null) {_			return null__		}_		try {_			_			byte[] bytes = FileCopyUtils.copyToByteArray(is)__			_			return transformIfNecessary(name, bytes)__		}_		catch (IOException ex) {_			throw new ClassNotFoundException("Cannot load resource for class [" + name + "]", ex)__		}_	};load,the,defining,bytes,for,the,given,class,to,be,turned,into,a,class,object,through,a,link,define,class,call,p,the,default,implementation,delegates,to,link,open,stream,for,class,and,link,transform,if,necessary,param,name,the,name,of,the,class,return,the,byte,content,with,transformers,already,applied,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,byte,load,bytes,for,class,string,name,throws,class,not,found,exception,input,stream,is,open,stream,for,class,name,if,is,null,return,null,try,byte,bytes,file,copy,utils,copy,to,byte,array,is,return,transform,if,necessary,name,bytes,catch,ioexception,ex,throw,new,class,not,found,exception,cannot,load,resource,for,class,name,ex
OverridingClassLoader -> protected byte[] loadBytesForClass(String name) throws ClassNotFoundException;1385412762;Load the defining bytes for the given class,_to be turned into a Class object through a {@link #defineClass} call._<p>The default implementation delegates to {@link #openStreamForClass}_and {@link #transformIfNecessary}._@param name the name of the class_@return the byte content (with transformers already applied),_or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected byte[] loadBytesForClass(String name) throws ClassNotFoundException {_		InputStream is = openStreamForClass(name)__		if (is == null) {_			return null__		}_		try {_			_			byte[] bytes = FileCopyUtils.copyToByteArray(is)__			_			return transformIfNecessary(name, bytes)__		}_		catch (IOException ex) {_			throw new ClassNotFoundException("Cannot load resource for class [" + name + "]", ex)__		}_	};load,the,defining,bytes,for,the,given,class,to,be,turned,into,a,class,object,through,a,link,define,class,call,p,the,default,implementation,delegates,to,link,open,stream,for,class,and,link,transform,if,necessary,param,name,the,name,of,the,class,return,the,byte,content,with,transformers,already,applied,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,byte,load,bytes,for,class,string,name,throws,class,not,found,exception,input,stream,is,open,stream,for,class,name,if,is,null,return,null,try,byte,bytes,file,copy,utils,copy,to,byte,array,is,return,transform,if,necessary,name,bytes,catch,ioexception,ex,throw,new,class,not,found,exception,cannot,load,resource,for,class,name,ex
OverridingClassLoader -> protected byte[] loadBytesForClass(String name) throws ClassNotFoundException;1412253193;Load the defining bytes for the given class,_to be turned into a Class object through a {@link #defineClass} call._<p>The default implementation delegates to {@link #openStreamForClass}_and {@link #transformIfNecessary}._@param name the name of the class_@return the byte content (with transformers already applied),_or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected byte[] loadBytesForClass(String name) throws ClassNotFoundException {_		InputStream is = openStreamForClass(name)__		if (is == null) {_			return null__		}_		try {_			_			byte[] bytes = FileCopyUtils.copyToByteArray(is)__			_			return transformIfNecessary(name, bytes)__		}_		catch (IOException ex) {_			throw new ClassNotFoundException("Cannot load resource for class [" + name + "]", ex)__		}_	};load,the,defining,bytes,for,the,given,class,to,be,turned,into,a,class,object,through,a,link,define,class,call,p,the,default,implementation,delegates,to,link,open,stream,for,class,and,link,transform,if,necessary,param,name,the,name,of,the,class,return,the,byte,content,with,transformers,already,applied,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,byte,load,bytes,for,class,string,name,throws,class,not,found,exception,input,stream,is,open,stream,for,class,name,if,is,null,return,null,try,byte,bytes,file,copy,utils,copy,to,byte,array,is,return,transform,if,necessary,name,bytes,catch,ioexception,ex,throw,new,class,not,found,exception,cannot,load,resource,for,class,name,ex
OverridingClassLoader -> protected byte[] loadBytesForClass(String name) throws ClassNotFoundException;1460395177;Load the defining bytes for the given class,_to be turned into a Class object through a {@link #defineClass} call._<p>The default implementation delegates to {@link #openStreamForClass}_and {@link #transformIfNecessary}._@param name the name of the class_@return the byte content (with transformers already applied),_or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected byte[] loadBytesForClass(String name) throws ClassNotFoundException {_		InputStream is = openStreamForClass(name)__		if (is == null) {_			return null__		}_		try {_			_			byte[] bytes = FileCopyUtils.copyToByteArray(is)__			_			return transformIfNecessary(name, bytes)__		}_		catch (IOException ex) {_			throw new ClassNotFoundException("Cannot load resource for class [" + name + "]", ex)__		}_	};load,the,defining,bytes,for,the,given,class,to,be,turned,into,a,class,object,through,a,link,define,class,call,p,the,default,implementation,delegates,to,link,open,stream,for,class,and,link,transform,if,necessary,param,name,the,name,of,the,class,return,the,byte,content,with,transformers,already,applied,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,byte,load,bytes,for,class,string,name,throws,class,not,found,exception,input,stream,is,open,stream,for,class,name,if,is,null,return,null,try,byte,bytes,file,copy,utils,copy,to,byte,array,is,return,transform,if,necessary,name,bytes,catch,ioexception,ex,throw,new,class,not,found,exception,cannot,load,resource,for,class,name,ex
OverridingClassLoader -> protected byte[] loadBytesForClass(String name) throws ClassNotFoundException;1460430854;Load the defining bytes for the given class,_to be turned into a Class object through a {@link #defineClass} call._<p>The default implementation delegates to {@link #openStreamForClass}_and {@link #transformIfNecessary}._@param name the name of the class_@return the byte content (with transformers already applied),_or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected byte[] loadBytesForClass(String name) throws ClassNotFoundException {_		InputStream is = openStreamForClass(name)__		if (is == null) {_			return null__		}_		try {_			_			byte[] bytes = FileCopyUtils.copyToByteArray(is)__			_			return transformIfNecessary(name, bytes)__		}_		catch (IOException ex) {_			throw new ClassNotFoundException("Cannot load resource for class [" + name + "]", ex)__		}_	};load,the,defining,bytes,for,the,given,class,to,be,turned,into,a,class,object,through,a,link,define,class,call,p,the,default,implementation,delegates,to,link,open,stream,for,class,and,link,transform,if,necessary,param,name,the,name,of,the,class,return,the,byte,content,with,transformers,already,applied,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,byte,load,bytes,for,class,string,name,throws,class,not,found,exception,input,stream,is,open,stream,for,class,name,if,is,null,return,null,try,byte,bytes,file,copy,utils,copy,to,byte,array,is,return,transform,if,necessary,name,bytes,catch,ioexception,ex,throw,new,class,not,found,exception,cannot,load,resource,for,class,name,ex
OverridingClassLoader -> protected byte[] loadBytesForClass(String name) throws ClassNotFoundException;1467677340;Load the defining bytes for the given class,_to be turned into a Class object through a {@link #defineClass} call._<p>The default implementation delegates to {@link #openStreamForClass}_and {@link #transformIfNecessary}._@param name the name of the class_@return the byte content (with transformers already applied),_or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected byte[] loadBytesForClass(String name) throws ClassNotFoundException {_		InputStream is = openStreamForClass(name)__		if (is == null) {_			return null__		}_		try {_			_			byte[] bytes = FileCopyUtils.copyToByteArray(is)__			_			return transformIfNecessary(name, bytes)__		}_		catch (IOException ex) {_			throw new ClassNotFoundException("Cannot load resource for class [" + name + "]", ex)__		}_	};load,the,defining,bytes,for,the,given,class,to,be,turned,into,a,class,object,through,a,link,define,class,call,p,the,default,implementation,delegates,to,link,open,stream,for,class,and,link,transform,if,necessary,param,name,the,name,of,the,class,return,the,byte,content,with,transformers,already,applied,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,byte,load,bytes,for,class,string,name,throws,class,not,found,exception,input,stream,is,open,stream,for,class,name,if,is,null,return,null,try,byte,bytes,file,copy,utils,copy,to,byte,array,is,return,transform,if,necessary,name,bytes,catch,ioexception,ex,throw,new,class,not,found,exception,cannot,load,resource,for,class,name,ex
OverridingClassLoader -> @Nullable 	protected InputStream openStreamForClass(String name);1496837955;Open an InputStream for the specified class._<p>The default implementation loads a standard class file through_the parent ClassLoader's {@code getResourceAsStream} method._@param name the name of the class_@return the InputStream containing the byte code for the specified class;@Nullable_	protected InputStream openStreamForClass(String name) {_		String internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX__		return getParent().getResourceAsStream(internalName)__	};open,an,input,stream,for,the,specified,class,p,the,default,implementation,loads,a,standard,class,file,through,the,parent,class,loader,s,code,get,resource,as,stream,method,param,name,the,name,of,the,class,return,the,input,stream,containing,the,byte,code,for,the,specified,class;nullable,protected,input,stream,open,stream,for,class,string,name,string,internal,name,name,replace,return,get,parent,get,resource,as,stream,internal,name
OverridingClassLoader -> @Nullable 	protected InputStream openStreamForClass(String name);1498780456;Open an InputStream for the specified class._<p>The default implementation loads a standard class file through_the parent ClassLoader's {@code getResourceAsStream} method._@param name the name of the class_@return the InputStream containing the byte code for the specified class;@Nullable_	protected InputStream openStreamForClass(String name) {_		String internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX__		return getParent().getResourceAsStream(internalName)__	};open,an,input,stream,for,the,specified,class,p,the,default,implementation,loads,a,standard,class,file,through,the,parent,class,loader,s,code,get,resource,as,stream,method,param,name,the,name,of,the,class,return,the,input,stream,containing,the,byte,code,for,the,specified,class;nullable,protected,input,stream,open,stream,for,class,string,name,string,internal,name,name,replace,return,get,parent,get,resource,as,stream,internal,name
OverridingClassLoader -> @Nullable 	protected InputStream openStreamForClass(String name);1530174524;Open an InputStream for the specified class._<p>The default implementation loads a standard class file through_the parent ClassLoader's {@code getResourceAsStream} method._@param name the name of the class_@return the InputStream containing the byte code for the specified class;@Nullable_	protected InputStream openStreamForClass(String name) {_		String internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX__		return getParent().getResourceAsStream(internalName)__	};open,an,input,stream,for,the,specified,class,p,the,default,implementation,loads,a,standard,class,file,through,the,parent,class,loader,s,code,get,resource,as,stream,method,param,name,the,name,of,the,class,return,the,input,stream,containing,the,byte,code,for,the,specified,class;nullable,protected,input,stream,open,stream,for,class,string,name,string,internal,name,name,replace,return,get,parent,get,resource,as,stream,internal,name
OverridingClassLoader -> public OverridingClassLoader(@Nullable ClassLoader parent);1496837955;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for;public OverridingClassLoader(@Nullable ClassLoader parent) {_		this(parent, null)__	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for;public,overriding,class,loader,nullable,class,loader,parent,this,parent,null
OverridingClassLoader -> public OverridingClassLoader(@Nullable ClassLoader parent);1498780456;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for;public OverridingClassLoader(@Nullable ClassLoader parent) {_		this(parent, null)__	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for;public,overriding,class,loader,nullable,class,loader,parent,this,parent,null
OverridingClassLoader -> public OverridingClassLoader(@Nullable ClassLoader parent);1530174524;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for;public OverridingClassLoader(@Nullable ClassLoader parent) {_		this(parent, null)__	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for;public,overriding,class,loader,nullable,class,loader,parent,this,parent,null
OverridingClassLoader -> public OverridingClassLoader(@Nullable ClassLoader parent, @Nullable ClassLoader overrideDelegate);1496837955;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for_@param overrideDelegate the ClassLoader to delegate to for overriding_@since 4.3;public OverridingClassLoader(@Nullable ClassLoader parent, @Nullable ClassLoader overrideDelegate) {_		super(parent)__		this.overrideDelegate = overrideDelegate__		for (String packageName : DEFAULT_EXCLUDED_PACKAGES) {_			excludePackage(packageName)__		}_	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for,param,override,delegate,the,class,loader,to,delegate,to,for,overriding,since,4,3;public,overriding,class,loader,nullable,class,loader,parent,nullable,class,loader,override,delegate,super,parent,this,override,delegate,override,delegate,for,string,package,name,exclude,package,package,name
OverridingClassLoader -> public OverridingClassLoader(@Nullable ClassLoader parent, @Nullable ClassLoader overrideDelegate);1498780456;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for_@param overrideDelegate the ClassLoader to delegate to for overriding_@since 4.3;public OverridingClassLoader(@Nullable ClassLoader parent, @Nullable ClassLoader overrideDelegate) {_		super(parent)__		this.overrideDelegate = overrideDelegate__		for (String packageName : DEFAULT_EXCLUDED_PACKAGES) {_			excludePackage(packageName)__		}_	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for,param,override,delegate,the,class,loader,to,delegate,to,for,overriding,since,4,3;public,overriding,class,loader,nullable,class,loader,parent,nullable,class,loader,override,delegate,super,parent,this,override,delegate,override,delegate,for,string,package,name,exclude,package,package,name
OverridingClassLoader -> public OverridingClassLoader(@Nullable ClassLoader parent, @Nullable ClassLoader overrideDelegate);1530174524;Create a new OverridingClassLoader for the given ClassLoader._@param parent the ClassLoader to build an overriding ClassLoader for_@param overrideDelegate the ClassLoader to delegate to for overriding_@since 4.3;public OverridingClassLoader(@Nullable ClassLoader parent, @Nullable ClassLoader overrideDelegate) {_		super(parent)__		this.overrideDelegate = overrideDelegate__		for (String packageName : DEFAULT_EXCLUDED_PACKAGES) {_			excludePackage(packageName)__		}_	};create,a,new,overriding,class,loader,for,the,given,class,loader,param,parent,the,class,loader,to,build,an,overriding,class,loader,for,param,override,delegate,the,class,loader,to,delegate,to,for,overriding,since,4,3;public,overriding,class,loader,nullable,class,loader,parent,nullable,class,loader,override,delegate,super,parent,this,override,delegate,override,delegate,for,string,package,name,exclude,package,package,name
OverridingClassLoader -> protected byte[] transformIfNecessary(String name, byte[] bytes);1328020251;Transformation hook to be implemented by subclasses._<p>The default implementation simply returns the given bytes as-is._@param name the fully-qualified name of the class being transformed_@param bytes the raw bytes of the class_@return the transformed bytes (never <code>null</code>__same as the input bytes if the transformation produced no changes);protected byte[] transformIfNecessary(String name, byte[] bytes) {_		return bytes__	};transformation,hook,to,be,implemented,by,subclasses,p,the,default,implementation,simply,returns,the,given,bytes,as,is,param,name,the,fully,qualified,name,of,the,class,being,transformed,param,bytes,the,raw,bytes,of,the,class,return,the,transformed,bytes,never,code,null,code,same,as,the,input,bytes,if,the,transformation,produced,no,changes;protected,byte,transform,if,necessary,string,name,byte,bytes,return,bytes
OverridingClassLoader -> protected byte[] transformIfNecessary(String name, byte[] bytes);1356735495;Transformation hook to be implemented by subclasses._<p>The default implementation simply returns the given bytes as-is._@param name the fully-qualified name of the class being transformed_@param bytes the raw bytes of the class_@return the transformed bytes (never {@code null}__same as the input bytes if the transformation produced no changes);protected byte[] transformIfNecessary(String name, byte[] bytes) {_		return bytes__	};transformation,hook,to,be,implemented,by,subclasses,p,the,default,implementation,simply,returns,the,given,bytes,as,is,param,name,the,fully,qualified,name,of,the,class,being,transformed,param,bytes,the,raw,bytes,of,the,class,return,the,transformed,bytes,never,code,null,same,as,the,input,bytes,if,the,transformation,produced,no,changes;protected,byte,transform,if,necessary,string,name,byte,bytes,return,bytes
OverridingClassLoader -> protected byte[] transformIfNecessary(String name, byte[] bytes);1385412762;Transformation hook to be implemented by subclasses._<p>The default implementation simply returns the given bytes as-is._@param name the fully-qualified name of the class being transformed_@param bytes the raw bytes of the class_@return the transformed bytes (never {@code null}__same as the input bytes if the transformation produced no changes);protected byte[] transformIfNecessary(String name, byte[] bytes) {_		return bytes__	};transformation,hook,to,be,implemented,by,subclasses,p,the,default,implementation,simply,returns,the,given,bytes,as,is,param,name,the,fully,qualified,name,of,the,class,being,transformed,param,bytes,the,raw,bytes,of,the,class,return,the,transformed,bytes,never,code,null,same,as,the,input,bytes,if,the,transformation,produced,no,changes;protected,byte,transform,if,necessary,string,name,byte,bytes,return,bytes
OverridingClassLoader -> protected byte[] transformIfNecessary(String name, byte[] bytes);1412253193;Transformation hook to be implemented by subclasses._<p>The default implementation simply returns the given bytes as-is._@param name the fully-qualified name of the class being transformed_@param bytes the raw bytes of the class_@return the transformed bytes (never {@code null}__same as the input bytes if the transformation produced no changes);protected byte[] transformIfNecessary(String name, byte[] bytes) {_		return bytes__	};transformation,hook,to,be,implemented,by,subclasses,p,the,default,implementation,simply,returns,the,given,bytes,as,is,param,name,the,fully,qualified,name,of,the,class,being,transformed,param,bytes,the,raw,bytes,of,the,class,return,the,transformed,bytes,never,code,null,same,as,the,input,bytes,if,the,transformation,produced,no,changes;protected,byte,transform,if,necessary,string,name,byte,bytes,return,bytes
OverridingClassLoader -> protected byte[] transformIfNecessary(String name, byte[] bytes);1460395177;Transformation hook to be implemented by subclasses._<p>The default implementation simply returns the given bytes as-is._@param name the fully-qualified name of the class being transformed_@param bytes the raw bytes of the class_@return the transformed bytes (never {@code null}__same as the input bytes if the transformation produced no changes);protected byte[] transformIfNecessary(String name, byte[] bytes) {_		return bytes__	};transformation,hook,to,be,implemented,by,subclasses,p,the,default,implementation,simply,returns,the,given,bytes,as,is,param,name,the,fully,qualified,name,of,the,class,being,transformed,param,bytes,the,raw,bytes,of,the,class,return,the,transformed,bytes,never,code,null,same,as,the,input,bytes,if,the,transformation,produced,no,changes;protected,byte,transform,if,necessary,string,name,byte,bytes,return,bytes
OverridingClassLoader -> protected byte[] transformIfNecessary(String name, byte[] bytes);1460430854;Transformation hook to be implemented by subclasses._<p>The default implementation simply returns the given bytes as-is._@param name the fully-qualified name of the class being transformed_@param bytes the raw bytes of the class_@return the transformed bytes (never {@code null}__same as the input bytes if the transformation produced no changes);protected byte[] transformIfNecessary(String name, byte[] bytes) {_		return bytes__	};transformation,hook,to,be,implemented,by,subclasses,p,the,default,implementation,simply,returns,the,given,bytes,as,is,param,name,the,fully,qualified,name,of,the,class,being,transformed,param,bytes,the,raw,bytes,of,the,class,return,the,transformed,bytes,never,code,null,same,as,the,input,bytes,if,the,transformation,produced,no,changes;protected,byte,transform,if,necessary,string,name,byte,bytes,return,bytes
OverridingClassLoader -> protected byte[] transformIfNecessary(String name, byte[] bytes);1467677340;Transformation hook to be implemented by subclasses._<p>The default implementation simply returns the given bytes as-is._@param name the fully-qualified name of the class being transformed_@param bytes the raw bytes of the class_@return the transformed bytes (never {@code null}__same as the input bytes if the transformation produced no changes);protected byte[] transformIfNecessary(String name, byte[] bytes) {_		return bytes__	};transformation,hook,to,be,implemented,by,subclasses,p,the,default,implementation,simply,returns,the,given,bytes,as,is,param,name,the,fully,qualified,name,of,the,class,being,transformed,param,bytes,the,raw,bytes,of,the,class,return,the,transformed,bytes,never,code,null,same,as,the,input,bytes,if,the,transformation,produced,no,changes;protected,byte,transform,if,necessary,string,name,byte,bytes,return,bytes
OverridingClassLoader -> protected byte[] transformIfNecessary(String name, byte[] bytes);1495868221;Transformation hook to be implemented by subclasses._<p>The default implementation simply returns the given bytes as-is._@param name the fully-qualified name of the class being transformed_@param bytes the raw bytes of the class_@return the transformed bytes (never {@code null}__same as the input bytes if the transformation produced no changes);protected byte[] transformIfNecessary(String name, byte[] bytes) {_		return bytes__	};transformation,hook,to,be,implemented,by,subclasses,p,the,default,implementation,simply,returns,the,given,bytes,as,is,param,name,the,fully,qualified,name,of,the,class,being,transformed,param,bytes,the,raw,bytes,of,the,class,return,the,transformed,bytes,never,code,null,same,as,the,input,bytes,if,the,transformation,produced,no,changes;protected,byte,transform,if,necessary,string,name,byte,bytes,return,bytes
OverridingClassLoader -> protected byte[] transformIfNecessary(String name, byte[] bytes);1496837955;Transformation hook to be implemented by subclasses._<p>The default implementation simply returns the given bytes as-is._@param name the fully-qualified name of the class being transformed_@param bytes the raw bytes of the class_@return the transformed bytes (never {@code null}__same as the input bytes if the transformation produced no changes);protected byte[] transformIfNecessary(String name, byte[] bytes) {_		return bytes__	};transformation,hook,to,be,implemented,by,subclasses,p,the,default,implementation,simply,returns,the,given,bytes,as,is,param,name,the,fully,qualified,name,of,the,class,being,transformed,param,bytes,the,raw,bytes,of,the,class,return,the,transformed,bytes,never,code,null,same,as,the,input,bytes,if,the,transformation,produced,no,changes;protected,byte,transform,if,necessary,string,name,byte,bytes,return,bytes
OverridingClassLoader -> protected byte[] transformIfNecessary(String name, byte[] bytes);1498780456;Transformation hook to be implemented by subclasses._<p>The default implementation simply returns the given bytes as-is._@param name the fully-qualified name of the class being transformed_@param bytes the raw bytes of the class_@return the transformed bytes (never {@code null}__same as the input bytes if the transformation produced no changes);protected byte[] transformIfNecessary(String name, byte[] bytes) {_		return bytes__	};transformation,hook,to,be,implemented,by,subclasses,p,the,default,implementation,simply,returns,the,given,bytes,as,is,param,name,the,fully,qualified,name,of,the,class,being,transformed,param,bytes,the,raw,bytes,of,the,class,return,the,transformed,bytes,never,code,null,same,as,the,input,bytes,if,the,transformation,produced,no,changes;protected,byte,transform,if,necessary,string,name,byte,bytes,return,bytes
OverridingClassLoader -> protected byte[] transformIfNecessary(String name, byte[] bytes);1530174524;Transformation hook to be implemented by subclasses._<p>The default implementation simply returns the given bytes as-is._@param name the fully-qualified name of the class being transformed_@param bytes the raw bytes of the class_@return the transformed bytes (never {@code null}__same as the input bytes if the transformation produced no changes);protected byte[] transformIfNecessary(String name, byte[] bytes) {_		return bytes__	};transformation,hook,to,be,implemented,by,subclasses,p,the,default,implementation,simply,returns,the,given,bytes,as,is,param,name,the,fully,qualified,name,of,the,class,being,transformed,param,bytes,the,raw,bytes,of,the,class,return,the,transformed,bytes,never,code,null,same,as,the,input,bytes,if,the,transformation,produced,no,changes;protected,byte,transform,if,necessary,string,name,byte,bytes,return,bytes
OverridingClassLoader -> protected Class loadClassForOverriding(String name) throws ClassNotFoundException;1328020251;Load the specified class for overriding purposes in this ClassLoader._<p>The default implementation delegates to {@link #findLoadedClass},_{@link #loadBytesForClass} and {@link #defineClass}._@param name the name of the class_@return the Class object, or <code>null</code> if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected Class loadClassForOverriding(String name) throws ClassNotFoundException {_		Class result = findLoadedClass(name)__		if (result == null) {_			byte[] bytes = loadBytesForClass(name)__			if (bytes != null) {_				result = defineClass(name, bytes, 0, bytes.length)__			}_		}_		return result__	};load,the,specified,class,for,overriding,purposes,in,this,class,loader,p,the,default,implementation,delegates,to,link,find,loaded,class,link,load,bytes,for,class,and,link,define,class,param,name,the,name,of,the,class,return,the,class,object,or,code,null,code,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,class,load,class,for,overriding,string,name,throws,class,not,found,exception,class,result,find,loaded,class,name,if,result,null,byte,bytes,load,bytes,for,class,name,if,bytes,null,result,define,class,name,bytes,0,bytes,length,return,result
OverridingClassLoader -> protected Class loadClassForOverriding(String name) throws ClassNotFoundException;1356735495;Load the specified class for overriding purposes in this ClassLoader._<p>The default implementation delegates to {@link #findLoadedClass},_{@link #loadBytesForClass} and {@link #defineClass}._@param name the name of the class_@return the Class object, or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected Class loadClassForOverriding(String name) throws ClassNotFoundException {_		Class result = findLoadedClass(name)__		if (result == null) {_			byte[] bytes = loadBytesForClass(name)__			if (bytes != null) {_				result = defineClass(name, bytes, 0, bytes.length)__			}_		}_		return result__	};load,the,specified,class,for,overriding,purposes,in,this,class,loader,p,the,default,implementation,delegates,to,link,find,loaded,class,link,load,bytes,for,class,and,link,define,class,param,name,the,name,of,the,class,return,the,class,object,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,class,load,class,for,overriding,string,name,throws,class,not,found,exception,class,result,find,loaded,class,name,if,result,null,byte,bytes,load,bytes,for,class,name,if,bytes,null,result,define,class,name,bytes,0,bytes,length,return,result
OverridingClassLoader -> @Nullable 	protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException;1495868221;Load the specified class for overriding purposes in this ClassLoader._<p>The default implementation delegates to {@link #findLoadedClass},_{@link #loadBytesForClass} and {@link #defineClass}._@param name the name of the class_@return the Class object, or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;@Nullable_	protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {_		Class<?> result = findLoadedClass(name)__		if (result == null) {_			byte[] bytes = loadBytesForClass(name)__			if (bytes != null) {_				result = defineClass(name, bytes, 0, bytes.length)__			}_		}_		return result__	};load,the,specified,class,for,overriding,purposes,in,this,class,loader,p,the,default,implementation,delegates,to,link,find,loaded,class,link,load,bytes,for,class,and,link,define,class,param,name,the,name,of,the,class,return,the,class,object,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;nullable,protected,class,load,class,for,overriding,string,name,throws,class,not,found,exception,class,result,find,loaded,class,name,if,result,null,byte,bytes,load,bytes,for,class,name,if,bytes,null,result,define,class,name,bytes,0,bytes,length,return,result
OverridingClassLoader -> @Nullable 	protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException;1496837955;Load the specified class for overriding purposes in this ClassLoader._<p>The default implementation delegates to {@link #findLoadedClass},_{@link #loadBytesForClass} and {@link #defineClass}._@param name the name of the class_@return the Class object, or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;@Nullable_	protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {_		Class<?> result = findLoadedClass(name)__		if (result == null) {_			byte[] bytes = loadBytesForClass(name)__			if (bytes != null) {_				result = defineClass(name, bytes, 0, bytes.length)__			}_		}_		return result__	};load,the,specified,class,for,overriding,purposes,in,this,class,loader,p,the,default,implementation,delegates,to,link,find,loaded,class,link,load,bytes,for,class,and,link,define,class,param,name,the,name,of,the,class,return,the,class,object,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;nullable,protected,class,load,class,for,overriding,string,name,throws,class,not,found,exception,class,result,find,loaded,class,name,if,result,null,byte,bytes,load,bytes,for,class,name,if,bytes,null,result,define,class,name,bytes,0,bytes,length,return,result
OverridingClassLoader -> @Nullable 	protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException;1498780456;Load the specified class for overriding purposes in this ClassLoader._<p>The default implementation delegates to {@link #findLoadedClass},_{@link #loadBytesForClass} and {@link #defineClass}._@param name the name of the class_@return the Class object, or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;@Nullable_	protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {_		Class<?> result = findLoadedClass(name)__		if (result == null) {_			byte[] bytes = loadBytesForClass(name)__			if (bytes != null) {_				result = defineClass(name, bytes, 0, bytes.length)__			}_		}_		return result__	};load,the,specified,class,for,overriding,purposes,in,this,class,loader,p,the,default,implementation,delegates,to,link,find,loaded,class,link,load,bytes,for,class,and,link,define,class,param,name,the,name,of,the,class,return,the,class,object,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;nullable,protected,class,load,class,for,overriding,string,name,throws,class,not,found,exception,class,result,find,loaded,class,name,if,result,null,byte,bytes,load,bytes,for,class,name,if,bytes,null,result,define,class,name,bytes,0,bytes,length,return,result
OverridingClassLoader -> @Nullable 	protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException;1530174524;Load the specified class for overriding purposes in this ClassLoader._<p>The default implementation delegates to {@link #findLoadedClass},_{@link #loadBytesForClass} and {@link #defineClass}._@param name the name of the class_@return the Class object, or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;@Nullable_	protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {_		Class<?> result = findLoadedClass(name)__		if (result == null) {_			byte[] bytes = loadBytesForClass(name)__			if (bytes != null) {_				result = defineClass(name, bytes, 0, bytes.length)__			}_		}_		return result__	};load,the,specified,class,for,overriding,purposes,in,this,class,loader,p,the,default,implementation,delegates,to,link,find,loaded,class,link,load,bytes,for,class,and,link,define,class,param,name,the,name,of,the,class,return,the,class,object,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;nullable,protected,class,load,class,for,overriding,string,name,throws,class,not,found,exception,class,result,find,loaded,class,name,if,result,null,byte,bytes,load,bytes,for,class,name,if,bytes,null,result,define,class,name,bytes,0,bytes,length,return,result
OverridingClassLoader -> protected boolean isEligibleForOverriding(String className);1328020251;Determine whether the specified class is eligible for overriding_by this class loader._@param className the class name to check_@return whether the specified class is eligible_@see #isExcluded;protected boolean isEligibleForOverriding(String className) {_		return !isExcluded(className)__	};determine,whether,the,specified,class,is,eligible,for,overriding,by,this,class,loader,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,is,excluded;protected,boolean,is,eligible,for,overriding,string,class,name,return,is,excluded,class,name
OverridingClassLoader -> protected boolean isEligibleForOverriding(String className);1356735495;Determine whether the specified class is eligible for overriding_by this class loader._@param className the class name to check_@return whether the specified class is eligible_@see #isExcluded;protected boolean isEligibleForOverriding(String className) {_		return !isExcluded(className)__	};determine,whether,the,specified,class,is,eligible,for,overriding,by,this,class,loader,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,is,excluded;protected,boolean,is,eligible,for,overriding,string,class,name,return,is,excluded,class,name
OverridingClassLoader -> protected boolean isEligibleForOverriding(String className);1385412762;Determine whether the specified class is eligible for overriding_by this class loader._@param className the class name to check_@return whether the specified class is eligible_@see #isExcluded;protected boolean isEligibleForOverriding(String className) {_		return !isExcluded(className)__	};determine,whether,the,specified,class,is,eligible,for,overriding,by,this,class,loader,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,is,excluded;protected,boolean,is,eligible,for,overriding,string,class,name,return,is,excluded,class,name
OverridingClassLoader -> protected boolean isEligibleForOverriding(String className);1412253193;Determine whether the specified class is eligible for overriding_by this class loader._@param className the class name to check_@return whether the specified class is eligible_@see #isExcluded;protected boolean isEligibleForOverriding(String className) {_		return !isExcluded(className)__	};determine,whether,the,specified,class,is,eligible,for,overriding,by,this,class,loader,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,is,excluded;protected,boolean,is,eligible,for,overriding,string,class,name,return,is,excluded,class,name
OverridingClassLoader -> protected boolean isEligibleForOverriding(String className);1460395177;Determine whether the specified class is eligible for overriding_by this class loader._@param className the class name to check_@return whether the specified class is eligible_@see #isExcluded;protected boolean isEligibleForOverriding(String className) {_		return !isExcluded(className)__	};determine,whether,the,specified,class,is,eligible,for,overriding,by,this,class,loader,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,is,excluded;protected,boolean,is,eligible,for,overriding,string,class,name,return,is,excluded,class,name
OverridingClassLoader -> protected boolean isEligibleForOverriding(String className);1460430854;Determine whether the specified class is eligible for overriding_by this class loader._@param className the class name to check_@return whether the specified class is eligible_@see #isExcluded;protected boolean isEligibleForOverriding(String className) {_		return !isExcluded(className)__	};determine,whether,the,specified,class,is,eligible,for,overriding,by,this,class,loader,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,is,excluded;protected,boolean,is,eligible,for,overriding,string,class,name,return,is,excluded,class,name
OverridingClassLoader -> protected boolean isEligibleForOverriding(String className);1467677340;Determine whether the specified class is eligible for overriding_by this class loader._@param className the class name to check_@return whether the specified class is eligible_@see #isExcluded;protected boolean isEligibleForOverriding(String className) {_		return !isExcluded(className)__	};determine,whether,the,specified,class,is,eligible,for,overriding,by,this,class,loader,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,is,excluded;protected,boolean,is,eligible,for,overriding,string,class,name,return,is,excluded,class,name
OverridingClassLoader -> protected boolean isEligibleForOverriding(String className);1495868221;Determine whether the specified class is eligible for overriding_by this class loader._@param className the class name to check_@return whether the specified class is eligible_@see #isExcluded;protected boolean isEligibleForOverriding(String className) {_		return !isExcluded(className)__	};determine,whether,the,specified,class,is,eligible,for,overriding,by,this,class,loader,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,is,excluded;protected,boolean,is,eligible,for,overriding,string,class,name,return,is,excluded,class,name
OverridingClassLoader -> protected boolean isEligibleForOverriding(String className);1496837955;Determine whether the specified class is eligible for overriding_by this class loader._@param className the class name to check_@return whether the specified class is eligible_@see #isExcluded;protected boolean isEligibleForOverriding(String className) {_		return !isExcluded(className)__	};determine,whether,the,specified,class,is,eligible,for,overriding,by,this,class,loader,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,is,excluded;protected,boolean,is,eligible,for,overriding,string,class,name,return,is,excluded,class,name
OverridingClassLoader -> protected boolean isEligibleForOverriding(String className);1498780456;Determine whether the specified class is eligible for overriding_by this class loader._@param className the class name to check_@return whether the specified class is eligible_@see #isExcluded;protected boolean isEligibleForOverriding(String className) {_		return !isExcluded(className)__	};determine,whether,the,specified,class,is,eligible,for,overriding,by,this,class,loader,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,is,excluded;protected,boolean,is,eligible,for,overriding,string,class,name,return,is,excluded,class,name
OverridingClassLoader -> protected boolean isEligibleForOverriding(String className);1530174524;Determine whether the specified class is eligible for overriding_by this class loader._@param className the class name to check_@return whether the specified class is eligible_@see #isExcluded;protected boolean isEligibleForOverriding(String className) {_		return !isExcluded(className)__	};determine,whether,the,specified,class,is,eligible,for,overriding,by,this,class,loader,param,class,name,the,class,name,to,check,return,whether,the,specified,class,is,eligible,see,is,excluded;protected,boolean,is,eligible,for,overriding,string,class,name,return,is,excluded,class,name
OverridingClassLoader -> protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException;1385412762;Load the specified class for overriding purposes in this ClassLoader._<p>The default implementation delegates to {@link #findLoadedClass},_{@link #loadBytesForClass} and {@link #defineClass}._@param name the name of the class_@return the Class object, or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {_		Class<?> result = findLoadedClass(name)__		if (result == null) {_			byte[] bytes = loadBytesForClass(name)__			if (bytes != null) {_				result = defineClass(name, bytes, 0, bytes.length)__			}_		}_		return result__	};load,the,specified,class,for,overriding,purposes,in,this,class,loader,p,the,default,implementation,delegates,to,link,find,loaded,class,link,load,bytes,for,class,and,link,define,class,param,name,the,name,of,the,class,return,the,class,object,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,class,load,class,for,overriding,string,name,throws,class,not,found,exception,class,result,find,loaded,class,name,if,result,null,byte,bytes,load,bytes,for,class,name,if,bytes,null,result,define,class,name,bytes,0,bytes,length,return,result
OverridingClassLoader -> protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException;1412253193;Load the specified class for overriding purposes in this ClassLoader._<p>The default implementation delegates to {@link #findLoadedClass},_{@link #loadBytesForClass} and {@link #defineClass}._@param name the name of the class_@return the Class object, or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {_		Class<?> result = findLoadedClass(name)__		if (result == null) {_			byte[] bytes = loadBytesForClass(name)__			if (bytes != null) {_				result = defineClass(name, bytes, 0, bytes.length)__			}_		}_		return result__	};load,the,specified,class,for,overriding,purposes,in,this,class,loader,p,the,default,implementation,delegates,to,link,find,loaded,class,link,load,bytes,for,class,and,link,define,class,param,name,the,name,of,the,class,return,the,class,object,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,class,load,class,for,overriding,string,name,throws,class,not,found,exception,class,result,find,loaded,class,name,if,result,null,byte,bytes,load,bytes,for,class,name,if,bytes,null,result,define,class,name,bytes,0,bytes,length,return,result
OverridingClassLoader -> protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException;1460395177;Load the specified class for overriding purposes in this ClassLoader._<p>The default implementation delegates to {@link #findLoadedClass},_{@link #loadBytesForClass} and {@link #defineClass}._@param name the name of the class_@return the Class object, or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {_		Class<?> result = findLoadedClass(name)__		if (result == null) {_			byte[] bytes = loadBytesForClass(name)__			if (bytes != null) {_				result = defineClass(name, bytes, 0, bytes.length)__			}_		}_		return result__	};load,the,specified,class,for,overriding,purposes,in,this,class,loader,p,the,default,implementation,delegates,to,link,find,loaded,class,link,load,bytes,for,class,and,link,define,class,param,name,the,name,of,the,class,return,the,class,object,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,class,load,class,for,overriding,string,name,throws,class,not,found,exception,class,result,find,loaded,class,name,if,result,null,byte,bytes,load,bytes,for,class,name,if,bytes,null,result,define,class,name,bytes,0,bytes,length,return,result
OverridingClassLoader -> protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException;1460430854;Load the specified class for overriding purposes in this ClassLoader._<p>The default implementation delegates to {@link #findLoadedClass},_{@link #loadBytesForClass} and {@link #defineClass}._@param name the name of the class_@return the Class object, or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {_		Class<?> result = findLoadedClass(name)__		if (result == null) {_			byte[] bytes = loadBytesForClass(name)__			if (bytes != null) {_				result = defineClass(name, bytes, 0, bytes.length)__			}_		}_		return result__	};load,the,specified,class,for,overriding,purposes,in,this,class,loader,p,the,default,implementation,delegates,to,link,find,loaded,class,link,load,bytes,for,class,and,link,define,class,param,name,the,name,of,the,class,return,the,class,object,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,class,load,class,for,overriding,string,name,throws,class,not,found,exception,class,result,find,loaded,class,name,if,result,null,byte,bytes,load,bytes,for,class,name,if,bytes,null,result,define,class,name,bytes,0,bytes,length,return,result
OverridingClassLoader -> protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException;1467677340;Load the specified class for overriding purposes in this ClassLoader._<p>The default implementation delegates to {@link #findLoadedClass},_{@link #loadBytesForClass} and {@link #defineClass}._@param name the name of the class_@return the Class object, or {@code null} if no class defined for that name_@throws ClassNotFoundException if the class for the given name couldn't be loaded;protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {_		Class<?> result = findLoadedClass(name)__		if (result == null) {_			byte[] bytes = loadBytesForClass(name)__			if (bytes != null) {_				result = defineClass(name, bytes, 0, bytes.length)__			}_		}_		return result__	};load,the,specified,class,for,overriding,purposes,in,this,class,loader,p,the,default,implementation,delegates,to,link,find,loaded,class,link,load,bytes,for,class,and,link,define,class,param,name,the,name,of,the,class,return,the,class,object,or,code,null,if,no,class,defined,for,that,name,throws,class,not,found,exception,if,the,class,for,the,given,name,couldn,t,be,loaded;protected,class,load,class,for,overriding,string,name,throws,class,not,found,exception,class,result,find,loaded,class,name,if,result,null,byte,bytes,load,bytes,for,class,name,if,bytes,null,result,define,class,name,bytes,0,bytes,length,return,result
