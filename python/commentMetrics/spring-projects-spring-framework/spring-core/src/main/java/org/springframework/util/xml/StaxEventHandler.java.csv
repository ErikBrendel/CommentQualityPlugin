commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void setDocumentLocator(@Nullable Locator locator) {     if (locator != null) {         this.eventFactory.setLocation(new LocatorLocationAdapter(locator)).     } }
false;protected;0;4;;@Override protected void startDocumentInternal() throws XMLStreamException {     this.eventWriter.add(this.eventFactory.createStartDocument()). }
false;protected;0;4;;@Override protected void endDocumentInternal() throws XMLStreamException {     this.eventWriter.add(this.eventFactory.createEndDocument()). }
false;protected;3;10;;@Override protected void startElementInternal(QName name, Attributes atts, Map<String, String> namespaceMapping) throws XMLStreamException {     List<Attribute> attributes = getAttributes(atts).     List<Namespace> namespaces = getNamespaces(namespaceMapping).     this.eventWriter.add(this.eventFactory.createStartElement(name, attributes.iterator(), namespaces.iterator())). }
false;private;1;6;;private List<Namespace> getNamespaces(Map<String, String> namespaceMappings) {     List<Namespace> result = new ArrayList<>(namespaceMappings.size()).     namespaceMappings.forEach((prefix, namespaceUri) -> result.add(this.eventFactory.createNamespace(prefix, namespaceUri))).     return result. }
false;private;1;11;;private List<Attribute> getAttributes(Attributes attributes) {     int attrLength = attributes.getLength().     List<Attribute> result = new ArrayList<>(attrLength).     for (int i = 0. i < attrLength. i++) {         QName attrName = toQName(attributes.getURI(i), attributes.getQName(i)).         if (!isNamespaceDeclaration(attrName)) {             result.add(this.eventFactory.createAttribute(attrName, attributes.getValue(i))).         }     }     return result. }
false;protected;2;5;;@Override protected void endElementInternal(QName name, Map<String, String> namespaceMapping) throws XMLStreamException {     List<Namespace> namespaces = getNamespaces(namespaceMapping).     this.eventWriter.add(this.eventFactory.createEndElement(name, namespaces.iterator())). }
false;protected;1;4;;@Override protected void charactersInternal(String data) throws XMLStreamException {     this.eventWriter.add(this.eventFactory.createCharacters(data)). }
false;protected;1;4;;@Override protected void cDataInternal(String data) throws XMLStreamException {     this.eventWriter.add(this.eventFactory.createCData(data)). }
false;protected;1;4;;@Override protected void ignorableWhitespaceInternal(String data) throws XMLStreamException {     this.eventWriter.add(this.eventFactory.createIgnorableSpace(data)). }
false;protected;2;4;;@Override protected void processingInstructionInternal(String target, String data) throws XMLStreamException {     this.eventWriter.add(this.eventFactory.createProcessingInstruction(target, data)). }
false;protected;1;4;;@Override protected void dtdInternal(String dtd) throws XMLStreamException {     this.eventWriter.add(this.eventFactory.createDTD(dtd)). }
false;protected;1;4;;@Override protected void commentInternal(String comment) throws XMLStreamException {     this.eventWriter.add(this.eventFactory.createComment(comment)). }
true;protected;1;3;// Ignored ;// Ignored @Override protected void skippedEntityInternal(String name) { }
false;public;0;4;;@Override public int getLineNumber() {     return this.locator.getLineNumber(). }
false;public;0;4;;@Override public int getColumnNumber() {     return this.locator.getColumnNumber(). }
false;public;0;4;;@Override public int getCharacterOffset() {     return -1. }
false;public;0;4;;@Override public String getPublicId() {     return this.locator.getPublicId(). }
false;public;0;4;;@Override public String getSystemId() {     return this.locator.getSystemId(). }
