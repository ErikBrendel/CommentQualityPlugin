commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the reactive type for this descriptor.  */ ;/**  * Return the reactive type for this descriptor.  */ public Class<?> getReactiveType() {     return this.reactiveType. }
true;public;0;3;/**  * Return {@code true} if the reactive type can produce more than 1 value  * can be produced and is therefore a good fit to adapt to {@code Flux}.  * A {@code false} return value implies the reactive type can produce 1  * value at most and is therefore a good fit to adapt to {@code Mono}.  */ ;/**  * Return {@code true} if the reactive type can produce more than 1 value  * can be produced and is therefore a good fit to adapt to {@code Flux}.  * A {@code false} return value implies the reactive type can produce 1  * value at most and is therefore a good fit to adapt to {@code Mono}.  */ public boolean isMultiValue() {     return this.multiValue. }
true;public;0;3;/**  * Return {@code true} if the reactive type can complete with no values.  */ ;/**  * Return {@code true} if the reactive type can complete with no values.  */ public boolean supportsEmpty() {     return (this.emptyValueSupplier != null). }
true;public;0;3;/**  * Return {@code true} if the reactive type does not produce any values and  * only provides completion and error signals.  */ ;/**  * Return {@code true} if the reactive type does not produce any values and  * only provides completion and error signals.  */ public boolean isNoValue() {     return this.noValue. }
true;public;0;4;/**  * Return an empty-value instance for the underlying reactive or async type.  * Use of this type implies {@link #supportsEmpty()} is true.  */ ;/**  * Return an empty-value instance for the underlying reactive or async type.  * Use of this type implies {@link #supportsEmpty()} is true.  */ public Object getEmptyValue() {     Assert.state(this.emptyValueSupplier != null, "Empty values not supported").     return this.emptyValueSupplier.get(). }
false;public;1;10;;@Override public boolean equals(@Nullable Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     return this.reactiveType.equals(((ReactiveTypeDescriptor) other).reactiveType). }
false;public;0;4;;@Override public int hashCode() {     return this.reactiveType.hashCode(). }
true;public,static;2;3;/**  * Descriptor for a reactive type that can produce 0..N values.  * @param type the reactive type  * @param emptySupplier a supplier of an empty-value instance of the reactive type  */ ;/**  * Descriptor for a reactive type that can produce 0..N values.  * @param type the reactive type  * @param emptySupplier a supplier of an empty-value instance of the reactive type  */ public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier) {     return new ReactiveTypeDescriptor(type, emptySupplier, true, false). }
true;public,static;2;3;/**  * Descriptor for a reactive type that can produce 0..1 values.  * @param type the reactive type  * @param emptySupplier a supplier of an empty-value instance of the reactive type  */ ;/**  * Descriptor for a reactive type that can produce 0..1 values.  * @param type the reactive type  * @param emptySupplier a supplier of an empty-value instance of the reactive type  */ public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier) {     return new ReactiveTypeDescriptor(type, emptySupplier, false, false). }
true;public,static;1;3;/**  * Descriptor for a reactive type that must produce 1 value to complete.  * @param type the reactive type  */ ;/**  * Descriptor for a reactive type that must produce 1 value to complete.  * @param type the reactive type  */ public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type) {     return new ReactiveTypeDescriptor(type, null, false, false). }
true;public,static;2;3;/**  * Descriptor for a reactive type that does not produce any values.  * @param type the reactive type  * @param emptySupplier a supplier of an empty-value instance of the reactive type  */ ;/**  * Descriptor for a reactive type that does not produce any values.  * @param type the reactive type  * @param emptySupplier a supplier of an empty-value instance of the reactive type  */ public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier) {     return new ReactiveTypeDescriptor(type, emptySupplier, false, true). }
