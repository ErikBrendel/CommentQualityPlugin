# id;timestamp;commentText;codeText;commentWords;codeWords
ReactiveTypeDescriptor -> public boolean supportsEmpty();1480301091;Return {@code true} if the reactive type can complete with no values.;public boolean supportsEmpty() {_		return this.supportsEmpty__	};return,code,true,if,the,reactive,type,can,complete,with,no,values;public,boolean,supports,empty,return,this,supports,empty
ReactiveTypeDescriptor -> public boolean supportsEmpty();1496259743;Return {@code true} if the reactive type can complete with no values.;public boolean supportsEmpty() {_		return this.supportsEmpty__	};return,code,true,if,the,reactive,type,can,complete,with,no,values;public,boolean,supports,empty,return,this,supports,empty
ReactiveTypeDescriptor -> public boolean supportsEmpty();1496837955;Return {@code true} if the reactive type can complete with no values.;public boolean supportsEmpty() {_		return this.supportsEmpty__	};return,code,true,if,the,reactive,type,can,complete,with,no,values;public,boolean,supports,empty,return,this,supports,empty
ReactiveTypeDescriptor -> public boolean supportsEmpty();1498780456;Return {@code true} if the reactive type can complete with no values.;public boolean supportsEmpty() {_		return (this.emptyValueSupplier != null)__	};return,code,true,if,the,reactive,type,can,complete,with,no,values;public,boolean,supports,empty,return,this,empty,value,supplier,null
ReactiveTypeDescriptor -> public boolean supportsEmpty();1510530380;Return {@code true} if the reactive type can complete with no values.;public boolean supportsEmpty() {_		return (this.emptyValueSupplier != null)__	};return,code,true,if,the,reactive,type,can,complete,with,no,values;public,boolean,supports,empty,return,this,empty,value,supplier,null
ReactiveTypeDescriptor -> public boolean supportsEmpty();1526693566;Return {@code true} if the reactive type can complete with no values.;public boolean supportsEmpty() {_		return (this.emptyValueSupplier != null)__	};return,code,true,if,the,reactive,type,can,complete,with,no,values;public,boolean,supports,empty,return,this,empty,value,supplier,null
ReactiveTypeDescriptor -> public boolean supportsEmpty();1530174524;Return {@code true} if the reactive type can complete with no values.;public boolean supportsEmpty() {_		return (this.emptyValueSupplier != null)__	};return,code,true,if,the,reactive,type,can,complete,with,no,values;public,boolean,supports,empty,return,this,empty,value,supplier,null
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier);1480301091;Descriptor for a reactive type that can produce 0..1 values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, true, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,1,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,single,optional,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,true,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier);1496259743;Descriptor for a reactive type that can produce 0..1 values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, true, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,1,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,single,optional,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,true,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier);1496837955;Descriptor for a reactive type that can produce 0..1 values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, true, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,1,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,single,optional,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,true,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier);1498780456;Descriptor for a reactive type that can produce 0..1 values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,1,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,single,optional,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier);1510530380;Descriptor for a reactive type that can produce 0..1 values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,1,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,single,optional,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier);1526693566;Descriptor for a reactive type that can produce 0..1 values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,1,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,single,optional,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier);1530174524;Descriptor for a reactive type that can produce 0..1 values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,1,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,single,optional,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier);1480301091;Descriptor for a reactive type that does not produce any values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, true, true)__	};descriptor,for,a,reactive,type,that,does,not,produce,any,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,no,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,true,true
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier);1496259743;Descriptor for a reactive type that does not produce any values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, true, true)__	};descriptor,for,a,reactive,type,that,does,not,produce,any,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,no,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,true,true
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier);1496837955;Descriptor for a reactive type that does not produce any values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, true, true)__	};descriptor,for,a,reactive,type,that,does,not,produce,any,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,no,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,true,true
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier);1498780456;Descriptor for a reactive type that does not produce any values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, true)__	};descriptor,for,a,reactive,type,that,does,not,produce,any,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,no,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,true
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier);1510530380;Descriptor for a reactive type that does not produce any values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, true)__	};descriptor,for,a,reactive,type,that,does,not,produce,any,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,no,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,true
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier);1526693566;Descriptor for a reactive type that does not produce any values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, true)__	};descriptor,for,a,reactive,type,that,does,not,produce,any,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,no,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,true
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier);1530174524;Descriptor for a reactive type that does not produce any values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, false, true)__	};descriptor,for,a,reactive,type,that,does,not,produce,any,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,no,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,false,true
ReactiveTypeDescriptor -> public Class<?> getReactiveType();1480301091;Return the reactive type the descriptor was created for.;public Class<?> getReactiveType() {_		return this.reactiveType__	};return,the,reactive,type,the,descriptor,was,created,for;public,class,get,reactive,type,return,this,reactive,type
ReactiveTypeDescriptor -> public Class<?> getReactiveType();1496259743;Return the reactive type the descriptor was created for.;public Class<?> getReactiveType() {_		return this.reactiveType__	};return,the,reactive,type,the,descriptor,was,created,for;public,class,get,reactive,type,return,this,reactive,type
ReactiveTypeDescriptor -> public Class<?> getReactiveType();1496837955;Return the reactive type the descriptor was created for.;public Class<?> getReactiveType() {_		return this.reactiveType__	};return,the,reactive,type,the,descriptor,was,created,for;public,class,get,reactive,type,return,this,reactive,type
ReactiveTypeDescriptor -> public Class<?> getReactiveType();1498780456;Return the reactive type the descriptor was created for.;public Class<?> getReactiveType() {_		return this.reactiveType__	};return,the,reactive,type,the,descriptor,was,created,for;public,class,get,reactive,type,return,this,reactive,type
ReactiveTypeDescriptor -> public Class<?> getReactiveType();1510530380;Return the reactive type the descriptor was created for.;public Class<?> getReactiveType() {_		return this.reactiveType__	};return,the,reactive,type,the,descriptor,was,created,for;public,class,get,reactive,type,return,this,reactive,type
ReactiveTypeDescriptor -> public Class<?> getReactiveType();1526693566;Return the reactive type for this descriptor.;public Class<?> getReactiveType() {_		return this.reactiveType__	};return,the,reactive,type,for,this,descriptor;public,class,get,reactive,type,return,this,reactive,type
ReactiveTypeDescriptor -> public Class<?> getReactiveType();1530174524;Return the reactive type for this descriptor.;public Class<?> getReactiveType() {_		return this.reactiveType__	};return,the,reactive,type,for,this,descriptor;public,class,get,reactive,type,return,this,reactive,type
ReactiveTypeDescriptor -> public boolean isNoValue();1480301091;Return {@code true} if the reactive type does not produce any values and_only provides completion and error signals.;public boolean isNoValue() {_		return this.noValue__	};return,code,true,if,the,reactive,type,does,not,produce,any,values,and,only,provides,completion,and,error,signals;public,boolean,is,no,value,return,this,no,value
ReactiveTypeDescriptor -> public boolean isNoValue();1496259743;Return {@code true} if the reactive type does not produce any values and_only provides completion and error signals.;public boolean isNoValue() {_		return this.noValue__	};return,code,true,if,the,reactive,type,does,not,produce,any,values,and,only,provides,completion,and,error,signals;public,boolean,is,no,value,return,this,no,value
ReactiveTypeDescriptor -> public boolean isNoValue();1496837955;Return {@code true} if the reactive type does not produce any values and_only provides completion and error signals.;public boolean isNoValue() {_		return this.noValue__	};return,code,true,if,the,reactive,type,does,not,produce,any,values,and,only,provides,completion,and,error,signals;public,boolean,is,no,value,return,this,no,value
ReactiveTypeDescriptor -> public boolean isNoValue();1498780456;Return {@code true} if the reactive type does not produce any values and_only provides completion and error signals.;public boolean isNoValue() {_		return this.noValue__	};return,code,true,if,the,reactive,type,does,not,produce,any,values,and,only,provides,completion,and,error,signals;public,boolean,is,no,value,return,this,no,value
ReactiveTypeDescriptor -> public boolean isNoValue();1510530380;Return {@code true} if the reactive type does not produce any values and_only provides completion and error signals.;public boolean isNoValue() {_		return this.noValue__	};return,code,true,if,the,reactive,type,does,not,produce,any,values,and,only,provides,completion,and,error,signals;public,boolean,is,no,value,return,this,no,value
ReactiveTypeDescriptor -> public boolean isNoValue();1526693566;Return {@code true} if the reactive type does not produce any values and_only provides completion and error signals.;public boolean isNoValue() {_		return this.noValue__	};return,code,true,if,the,reactive,type,does,not,produce,any,values,and,only,provides,completion,and,error,signals;public,boolean,is,no,value,return,this,no,value
ReactiveTypeDescriptor -> public boolean isNoValue();1530174524;Return {@code true} if the reactive type does not produce any values and_only provides completion and error signals.;public boolean isNoValue() {_		return this.noValue__	};return,code,true,if,the,reactive,type,does,not,produce,any,values,and,only,provides,completion,and,error,signals;public,boolean,is,no,value,return,this,no,value
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier);1480301091;Descriptor for a reactive type that can produce 0..N values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, true, true, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,n,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,multi,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,true,true,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier);1496259743;Descriptor for a reactive type that can produce 0..N values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, true, true, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,n,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,multi,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,true,true,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier);1496837955;Descriptor for a reactive type that can produce 0..N values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, true, true, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,n,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,multi,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,true,true,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier);1498780456;Descriptor for a reactive type that can produce 0..N values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, true, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,n,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,multi,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,true,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier);1510530380;Descriptor for a reactive type that can produce 0..N values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, true, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,n,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,multi,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,true,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier);1526693566;Descriptor for a reactive type that can produce 0..N values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, true, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,n,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,multi,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,true,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier);1530174524;Descriptor for a reactive type that can produce 0..N values._@param type the reactive type_@param emptySupplier a supplier of an empty-value instance of the reactive type;public static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier) {_		return new ReactiveTypeDescriptor(type, emptySupplier, true, false)__	};descriptor,for,a,reactive,type,that,can,produce,0,n,values,param,type,the,reactive,type,param,empty,supplier,a,supplier,of,an,empty,value,instance,of,the,reactive,type;public,static,reactive,type,descriptor,multi,value,class,type,supplier,empty,supplier,return,new,reactive,type,descriptor,type,empty,supplier,true,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type);1480301091;Descriptor for a reactive type that must produce 1 value to complete._@param type the reactive type;public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type) {_		return new ReactiveTypeDescriptor(type, null, false, false, false)__	};descriptor,for,a,reactive,type,that,must,produce,1,value,to,complete,param,type,the,reactive,type;public,static,reactive,type,descriptor,single,required,value,class,type,return,new,reactive,type,descriptor,type,null,false,false,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type);1496259743;Descriptor for a reactive type that must produce 1 value to complete._@param type the reactive type;public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type) {_		return new ReactiveTypeDescriptor(type, null, false, false, false)__	};descriptor,for,a,reactive,type,that,must,produce,1,value,to,complete,param,type,the,reactive,type;public,static,reactive,type,descriptor,single,required,value,class,type,return,new,reactive,type,descriptor,type,null,false,false,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type);1496837955;Descriptor for a reactive type that must produce 1 value to complete._@param type the reactive type;public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type) {_		return new ReactiveTypeDescriptor(type, null, false, false, false)__	};descriptor,for,a,reactive,type,that,must,produce,1,value,to,complete,param,type,the,reactive,type;public,static,reactive,type,descriptor,single,required,value,class,type,return,new,reactive,type,descriptor,type,null,false,false,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type);1498780456;Descriptor for a reactive type that must produce 1 value to complete._@param type the reactive type;public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type) {_		return new ReactiveTypeDescriptor(type, null, false, false)__	};descriptor,for,a,reactive,type,that,must,produce,1,value,to,complete,param,type,the,reactive,type;public,static,reactive,type,descriptor,single,required,value,class,type,return,new,reactive,type,descriptor,type,null,false,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type);1510530380;Descriptor for a reactive type that must produce 1 value to complete._@param type the reactive type;public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type) {_		return new ReactiveTypeDescriptor(type, null, false, false)__	};descriptor,for,a,reactive,type,that,must,produce,1,value,to,complete,param,type,the,reactive,type;public,static,reactive,type,descriptor,single,required,value,class,type,return,new,reactive,type,descriptor,type,null,false,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type);1526693566;Descriptor for a reactive type that must produce 1 value to complete._@param type the reactive type;public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type) {_		return new ReactiveTypeDescriptor(type, null, false, false)__	};descriptor,for,a,reactive,type,that,must,produce,1,value,to,complete,param,type,the,reactive,type;public,static,reactive,type,descriptor,single,required,value,class,type,return,new,reactive,type,descriptor,type,null,false,false
ReactiveTypeDescriptor -> public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type);1530174524;Descriptor for a reactive type that must produce 1 value to complete._@param type the reactive type;public static ReactiveTypeDescriptor singleRequiredValue(Class<?> type) {_		return new ReactiveTypeDescriptor(type, null, false, false)__	};descriptor,for,a,reactive,type,that,must,produce,1,value,to,complete,param,type,the,reactive,type;public,static,reactive,type,descriptor,single,required,value,class,type,return,new,reactive,type,descriptor,type,null,false,false
ReactiveTypeDescriptor -> private ReactiveTypeDescriptor(Class<?> reactiveType, @Nullable Supplier<?> emptySupplier, 			boolean multiValue, boolean noValue);1498780456;Private constructor. See static factory methods.;private ReactiveTypeDescriptor(Class<?> reactiveType, @Nullable Supplier<?> emptySupplier,_			boolean multiValue, boolean noValue) {__		Assert.notNull(reactiveType, "'reactiveType' must not be null")__		this.reactiveType = reactiveType__		this.emptyValueSupplier = emptySupplier__		this.multiValue = multiValue__		this.noValue = noValue__	};private,constructor,see,static,factory,methods;private,reactive,type,descriptor,class,reactive,type,nullable,supplier,empty,supplier,boolean,multi,value,boolean,no,value,assert,not,null,reactive,type,reactive,type,must,not,be,null,this,reactive,type,reactive,type,this,empty,value,supplier,empty,supplier,this,multi,value,multi,value,this,no,value,no,value
ReactiveTypeDescriptor -> private ReactiveTypeDescriptor(Class<?> reactiveType, @Nullable Supplier<?> emptySupplier, 			boolean multiValue, boolean noValue);1510530380;Private constructor. See static factory methods.;private ReactiveTypeDescriptor(Class<?> reactiveType, @Nullable Supplier<?> emptySupplier,_			boolean multiValue, boolean noValue) {__		Assert.notNull(reactiveType, "'reactiveType' must not be null")__		this.reactiveType = reactiveType__		this.emptyValueSupplier = emptySupplier__		this.multiValue = multiValue__		this.noValue = noValue__	};private,constructor,see,static,factory,methods;private,reactive,type,descriptor,class,reactive,type,nullable,supplier,empty,supplier,boolean,multi,value,boolean,no,value,assert,not,null,reactive,type,reactive,type,must,not,be,null,this,reactive,type,reactive,type,this,empty,value,supplier,empty,supplier,this,multi,value,multi,value,this,no,value,no,value
ReactiveTypeDescriptor -> private ReactiveTypeDescriptor(Class<?> reactiveType, @Nullable Supplier<?> emptySupplier, 			boolean multiValue, boolean noValue);1526693566;Private constructor. See static factory methods.;private ReactiveTypeDescriptor(Class<?> reactiveType, @Nullable Supplier<?> emptySupplier,_			boolean multiValue, boolean noValue) {__		Assert.notNull(reactiveType, "'reactiveType' must not be null")__		this.reactiveType = reactiveType__		this.emptyValueSupplier = emptySupplier__		this.multiValue = multiValue__		this.noValue = noValue__	};private,constructor,see,static,factory,methods;private,reactive,type,descriptor,class,reactive,type,nullable,supplier,empty,supplier,boolean,multi,value,boolean,no,value,assert,not,null,reactive,type,reactive,type,must,not,be,null,this,reactive,type,reactive,type,this,empty,value,supplier,empty,supplier,this,multi,value,multi,value,this,no,value,no,value
ReactiveTypeDescriptor -> private ReactiveTypeDescriptor(Class<?> reactiveType, @Nullable Supplier<?> emptySupplier, 			boolean multiValue, boolean noValue);1530174524;Private constructor. See static factory methods.;private ReactiveTypeDescriptor(Class<?> reactiveType, @Nullable Supplier<?> emptySupplier,_			boolean multiValue, boolean noValue) {__		Assert.notNull(reactiveType, "'reactiveType' must not be null")__		this.reactiveType = reactiveType__		this.emptyValueSupplier = emptySupplier__		this.multiValue = multiValue__		this.noValue = noValue__	};private,constructor,see,static,factory,methods;private,reactive,type,descriptor,class,reactive,type,nullable,supplier,empty,supplier,boolean,multi,value,boolean,no,value,assert,not,null,reactive,type,reactive,type,must,not,be,null,this,reactive,type,reactive,type,this,empty,value,supplier,empty,supplier,this,multi,value,multi,value,this,no,value,no,value
ReactiveTypeDescriptor -> public Object getEmptyValue();1480301091;Return an empty-value instance for the underlying reactive or async type._Use of this type implies {@link #supportsEmpty()} is true.;public Object getEmptyValue() {_		Assert.isTrue(supportsEmpty(), "Empty values not supported.")__		return this.emptyValueSupplier.get()__	};return,an,empty,value,instance,for,the,underlying,reactive,or,async,type,use,of,this,type,implies,link,supports,empty,is,true;public,object,get,empty,value,assert,is,true,supports,empty,empty,values,not,supported,return,this,empty,value,supplier,get
ReactiveTypeDescriptor -> public Object getEmptyValue();1496259743;Return an empty-value instance for the underlying reactive or async type._Use of this type implies {@link #supportsEmpty()} is true.;public Object getEmptyValue() {_		Assert.isTrue(supportsEmpty(), "Empty values not supported.")__		return this.emptyValueSupplier.get()__	};return,an,empty,value,instance,for,the,underlying,reactive,or,async,type,use,of,this,type,implies,link,supports,empty,is,true;public,object,get,empty,value,assert,is,true,supports,empty,empty,values,not,supported,return,this,empty,value,supplier,get
ReactiveTypeDescriptor -> public Object getEmptyValue();1496837955;Return an empty-value instance for the underlying reactive or async type._Use of this type implies {@link #supportsEmpty()} is true.;public Object getEmptyValue() {_		Assert.isTrue(supportsEmpty(), "Empty values not supported.")__		return this.emptyValueSupplier.get()__	};return,an,empty,value,instance,for,the,underlying,reactive,or,async,type,use,of,this,type,implies,link,supports,empty,is,true;public,object,get,empty,value,assert,is,true,supports,empty,empty,values,not,supported,return,this,empty,value,supplier,get
ReactiveTypeDescriptor -> public Object getEmptyValue();1498780456;Return an empty-value instance for the underlying reactive or async type._Use of this type implies {@link #supportsEmpty()} is true.;public Object getEmptyValue() {_		Assert.state(this.emptyValueSupplier != null, "Empty values not supported")__		return this.emptyValueSupplier.get()__	};return,an,empty,value,instance,for,the,underlying,reactive,or,async,type,use,of,this,type,implies,link,supports,empty,is,true;public,object,get,empty,value,assert,state,this,empty,value,supplier,null,empty,values,not,supported,return,this,empty,value,supplier,get
ReactiveTypeDescriptor -> public Object getEmptyValue();1510530380;Return an empty-value instance for the underlying reactive or async type._Use of this type implies {@link #supportsEmpty()} is true.;public Object getEmptyValue() {_		Assert.state(this.emptyValueSupplier != null, "Empty values not supported")__		return this.emptyValueSupplier.get()__	};return,an,empty,value,instance,for,the,underlying,reactive,or,async,type,use,of,this,type,implies,link,supports,empty,is,true;public,object,get,empty,value,assert,state,this,empty,value,supplier,null,empty,values,not,supported,return,this,empty,value,supplier,get
ReactiveTypeDescriptor -> public Object getEmptyValue();1526693566;Return an empty-value instance for the underlying reactive or async type._Use of this type implies {@link #supportsEmpty()} is true.;public Object getEmptyValue() {_		Assert.state(this.emptyValueSupplier != null, "Empty values not supported")__		return this.emptyValueSupplier.get()__	};return,an,empty,value,instance,for,the,underlying,reactive,or,async,type,use,of,this,type,implies,link,supports,empty,is,true;public,object,get,empty,value,assert,state,this,empty,value,supplier,null,empty,values,not,supported,return,this,empty,value,supplier,get
ReactiveTypeDescriptor -> public Object getEmptyValue();1530174524;Return an empty-value instance for the underlying reactive or async type._Use of this type implies {@link #supportsEmpty()} is true.;public Object getEmptyValue() {_		Assert.state(this.emptyValueSupplier != null, "Empty values not supported")__		return this.emptyValueSupplier.get()__	};return,an,empty,value,instance,for,the,underlying,reactive,or,async,type,use,of,this,type,implies,link,supports,empty,is,true;public,object,get,empty,value,assert,state,this,empty,value,supplier,null,empty,values,not,supported,return,this,empty,value,supplier,get
ReactiveTypeDescriptor -> public boolean isMultiValue();1480301091;Return {@code true} if the reactive type can produce more than 1 value_can be produced and is therefore a good fit to adapt to {@code Flux}._A {@code false} return value implies the reactive type can produce 1_value at most and is therefore a good fit to adapt to {@code Mono}.;public boolean isMultiValue() {_		return this.multiValue__	};return,code,true,if,the,reactive,type,can,produce,more,than,1,value,can,be,produced,and,is,therefore,a,good,fit,to,adapt,to,code,flux,a,code,false,return,value,implies,the,reactive,type,can,produce,1,value,at,most,and,is,therefore,a,good,fit,to,adapt,to,code,mono;public,boolean,is,multi,value,return,this,multi,value
ReactiveTypeDescriptor -> public boolean isMultiValue();1496259743;Return {@code true} if the reactive type can produce more than 1 value_can be produced and is therefore a good fit to adapt to {@code Flux}._A {@code false} return value implies the reactive type can produce 1_value at most and is therefore a good fit to adapt to {@code Mono}.;public boolean isMultiValue() {_		return this.multiValue__	};return,code,true,if,the,reactive,type,can,produce,more,than,1,value,can,be,produced,and,is,therefore,a,good,fit,to,adapt,to,code,flux,a,code,false,return,value,implies,the,reactive,type,can,produce,1,value,at,most,and,is,therefore,a,good,fit,to,adapt,to,code,mono;public,boolean,is,multi,value,return,this,multi,value
ReactiveTypeDescriptor -> public boolean isMultiValue();1496837955;Return {@code true} if the reactive type can produce more than 1 value_can be produced and is therefore a good fit to adapt to {@code Flux}._A {@code false} return value implies the reactive type can produce 1_value at most and is therefore a good fit to adapt to {@code Mono}.;public boolean isMultiValue() {_		return this.multiValue__	};return,code,true,if,the,reactive,type,can,produce,more,than,1,value,can,be,produced,and,is,therefore,a,good,fit,to,adapt,to,code,flux,a,code,false,return,value,implies,the,reactive,type,can,produce,1,value,at,most,and,is,therefore,a,good,fit,to,adapt,to,code,mono;public,boolean,is,multi,value,return,this,multi,value
ReactiveTypeDescriptor -> public boolean isMultiValue();1498780456;Return {@code true} if the reactive type can produce more than 1 value_can be produced and is therefore a good fit to adapt to {@code Flux}._A {@code false} return value implies the reactive type can produce 1_value at most and is therefore a good fit to adapt to {@code Mono}.;public boolean isMultiValue() {_		return this.multiValue__	};return,code,true,if,the,reactive,type,can,produce,more,than,1,value,can,be,produced,and,is,therefore,a,good,fit,to,adapt,to,code,flux,a,code,false,return,value,implies,the,reactive,type,can,produce,1,value,at,most,and,is,therefore,a,good,fit,to,adapt,to,code,mono;public,boolean,is,multi,value,return,this,multi,value
ReactiveTypeDescriptor -> public boolean isMultiValue();1510530380;Return {@code true} if the reactive type can produce more than 1 value_can be produced and is therefore a good fit to adapt to {@code Flux}._A {@code false} return value implies the reactive type can produce 1_value at most and is therefore a good fit to adapt to {@code Mono}.;public boolean isMultiValue() {_		return this.multiValue__	};return,code,true,if,the,reactive,type,can,produce,more,than,1,value,can,be,produced,and,is,therefore,a,good,fit,to,adapt,to,code,flux,a,code,false,return,value,implies,the,reactive,type,can,produce,1,value,at,most,and,is,therefore,a,good,fit,to,adapt,to,code,mono;public,boolean,is,multi,value,return,this,multi,value
ReactiveTypeDescriptor -> public boolean isMultiValue();1526693566;Return {@code true} if the reactive type can produce more than 1 value_can be produced and is therefore a good fit to adapt to {@code Flux}._A {@code false} return value implies the reactive type can produce 1_value at most and is therefore a good fit to adapt to {@code Mono}.;public boolean isMultiValue() {_		return this.multiValue__	};return,code,true,if,the,reactive,type,can,produce,more,than,1,value,can,be,produced,and,is,therefore,a,good,fit,to,adapt,to,code,flux,a,code,false,return,value,implies,the,reactive,type,can,produce,1,value,at,most,and,is,therefore,a,good,fit,to,adapt,to,code,mono;public,boolean,is,multi,value,return,this,multi,value
ReactiveTypeDescriptor -> public boolean isMultiValue();1530174524;Return {@code true} if the reactive type can produce more than 1 value_can be produced and is therefore a good fit to adapt to {@code Flux}._A {@code false} return value implies the reactive type can produce 1_value at most and is therefore a good fit to adapt to {@code Mono}.;public boolean isMultiValue() {_		return this.multiValue__	};return,code,true,if,the,reactive,type,can,produce,more,than,1,value,can,be,produced,and,is,therefore,a,good,fit,to,adapt,to,code,flux,a,code,false,return,value,implies,the,reactive,type,can,produce,1,value,at,most,and,is,therefore,a,good,fit,to,adapt,to,code,mono;public,boolean,is,multi,value,return,this,multi,value
ReactiveTypeDescriptor -> private ReactiveTypeDescriptor(Class<?> reactiveType, @Nullable Supplier<?> emptySupplier, 			boolean multiValue, boolean canBeEmpty, boolean noValue);1496259743;Private constructor. See static factory methods.;private ReactiveTypeDescriptor(Class<?> reactiveType, @Nullable Supplier<?> emptySupplier,_			boolean multiValue, boolean canBeEmpty, boolean noValue) {__		Assert.notNull(reactiveType, "'reactiveType' must not be null")__		Assert.isTrue(!canBeEmpty || emptySupplier != null, "Empty value supplier is required.")__		this.reactiveType = reactiveType__		this.emptyValueSupplier = emptySupplier__		this.multiValue = multiValue__		this.supportsEmpty = canBeEmpty__		this.noValue = noValue__	};private,constructor,see,static,factory,methods;private,reactive,type,descriptor,class,reactive,type,nullable,supplier,empty,supplier,boolean,multi,value,boolean,can,be,empty,boolean,no,value,assert,not,null,reactive,type,reactive,type,must,not,be,null,assert,is,true,can,be,empty,empty,supplier,null,empty,value,supplier,is,required,this,reactive,type,reactive,type,this,empty,value,supplier,empty,supplier,this,multi,value,multi,value,this,supports,empty,can,be,empty,this,no,value,no,value
ReactiveTypeDescriptor -> private ReactiveTypeDescriptor(Class<?> reactiveType, @Nullable Supplier<?> emptySupplier, 			boolean multiValue, boolean canBeEmpty, boolean noValue);1496837955;Private constructor. See static factory methods.;private ReactiveTypeDescriptor(Class<?> reactiveType, @Nullable Supplier<?> emptySupplier,_			boolean multiValue, boolean canBeEmpty, boolean noValue) {__		Assert.notNull(reactiveType, "'reactiveType' must not be null")__		Assert.isTrue(!canBeEmpty || emptySupplier != null, "Empty value supplier is required.")__		this.reactiveType = reactiveType__		this.emptyValueSupplier = emptySupplier__		this.multiValue = multiValue__		this.supportsEmpty = canBeEmpty__		this.noValue = noValue__	};private,constructor,see,static,factory,methods;private,reactive,type,descriptor,class,reactive,type,nullable,supplier,empty,supplier,boolean,multi,value,boolean,can,be,empty,boolean,no,value,assert,not,null,reactive,type,reactive,type,must,not,be,null,assert,is,true,can,be,empty,empty,supplier,null,empty,value,supplier,is,required,this,reactive,type,reactive,type,this,empty,value,supplier,empty,supplier,this,multi,value,multi,value,this,supports,empty,can,be,empty,this,no,value,no,value
