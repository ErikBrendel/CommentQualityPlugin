# id;timestamp;commentText;codeText;commentWords;codeWords
DomUtils -> @Nullable 	public static Element getChildElementByTagName(Element ele, String childEleName);1495868221;Utility method that returns the first child element identified by its name._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return the {@code org.w3c.dom.Element} instance, or {@code null} if none found;@Nullable_	public static Element getChildElementByTagName(Element ele, String childEleName) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleName, "Element name must not be null")__		NodeList nl = ele.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleName)) {_				return (Element) node__			}_		}_		return null__	};utility,method,that,returns,the,first,child,element,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,code,org,w3c,dom,element,instance,or,code,null,if,none,found;nullable,public,static,element,get,child,element,by,tag,name,element,ele,string,child,ele,name,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,name,element,name,must,not,be,null,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,return,element,node,return,null
DomUtils -> @Nullable 	public static Element getChildElementByTagName(Element ele, String childEleName);1530174524;Utility method that returns the first child element identified by its name._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return the {@code org.w3c.dom.Element} instance, or {@code null} if none found;@Nullable_	public static Element getChildElementByTagName(Element ele, String childEleName) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleName, "Element name must not be null")__		NodeList nl = ele.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleName)) {_				return (Element) node__			}_		}_		return null__	};utility,method,that,returns,the,first,child,element,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,code,org,w3c,dom,element,instance,or,code,null,if,none,found;nullable,public,static,element,get,child,element,by,tag,name,element,ele,string,child,ele,name,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,name,element,name,must,not,be,null,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,return,element,node,return,null
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String... childEleNames);1388762328;Retrieves all child elements of the given DOM element that match any of the given element names._Only looks at the direct child level of the given element_ do not go into further depth_(in contrast to the DOM API's {@code getElementsByTagName} method)._@param ele the DOM element to analyze_@param childEleNames the child element names to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String... childEleNames) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleNames, "Element names collection must not be null")__		List<String> childEleNameList = Arrays.asList(childEleNames)__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<Element>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleNameList)) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieves,all,child,elements,of,the,given,dom,element,that,match,any,of,the,given,element,names,only,looks,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,names,the,child,element,names,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,names,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,names,element,names,collection,must,not,be,null,list,string,child,ele,name,list,arrays,as,list,child,ele,names,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,element,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,list,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String... childEleNames);1467730834;Retrieves all child elements of the given DOM element that match any of the given element names._Only looks at the direct child level of the given element_ do not go into further depth_(in contrast to the DOM API's {@code getElementsByTagName} method)._@param ele the DOM element to analyze_@param childEleNames the child element names to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String... childEleNames) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleNames, "Element names collection must not be null")__		List<String> childEleNameList = Arrays.asList(childEleNames)__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleNameList)) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieves,all,child,elements,of,the,given,dom,element,that,match,any,of,the,given,element,names,only,looks,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,names,the,child,element,names,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,names,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,names,element,names,collection,must,not,be,null,list,string,child,ele,name,list,arrays,as,list,child,ele,names,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,list,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String... childEleNames);1495868221;Retrieves all child elements of the given DOM element that match any of the given element names._Only looks at the direct child level of the given element_ do not go into further depth_(in contrast to the DOM API's {@code getElementsByTagName} method)._@param ele the DOM element to analyze_@param childEleNames the child element names to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String... childEleNames) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleNames, "Element names collection must not be null")__		List<String> childEleNameList = Arrays.asList(childEleNames)__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleNameList)) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieves,all,child,elements,of,the,given,dom,element,that,match,any,of,the,given,element,names,only,looks,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,names,the,child,element,names,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,names,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,names,element,names,collection,must,not,be,null,list,string,child,ele,name,list,arrays,as,list,child,ele,names,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,list,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String... childEleNames);1530174524;Retrieves all child elements of the given DOM element that match any of the given element names._Only looks at the direct child level of the given element_ do not go into further depth_(in contrast to the DOM API's {@code getElementsByTagName} method)._@param ele the DOM element to analyze_@param childEleNames the child element names to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String... childEleNames) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleNames, "Element names collection must not be null")__		List<String> childEleNameList = Arrays.asList(childEleNames)__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleNameList)) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieves,all,child,elements,of,the,given,dom,element,that,match,any,of,the,given,element,names,only,looks,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,names,the,child,element,names,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,names,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,names,element,names,collection,must,not,be,null,list,string,child,ele,name,list,arrays,as,list,child,ele,names,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,list,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String[] childEleNames);1328020251;Retrieve all child elements of the given DOM element that match any of the given element names. Only look at the_direct child level of the given element_ do not go into further depth (in contrast to the DOM API's_<code>getElementsByTagName</code> method).__@param ele		   the DOM element to analyze_@param childEleNames the child element names to look for_@return a List of child <code>org.w3c.dom.Element</code> instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String[] childEleNames) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleNames, "Element names collection must not be null")__		List<String> childEleNameList = Arrays.asList(childEleNames)__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<Element>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleNameList)) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieve,all,child,elements,of,the,given,dom,element,that,match,any,of,the,given,element,names,only,look,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,code,method,param,ele,the,dom,element,to,analyze,param,child,ele,names,the,child,element,names,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,code,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,names,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,names,element,names,collection,must,not,be,null,list,string,child,ele,name,list,arrays,as,list,child,ele,names,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,element,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,list,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String[] childEleNames);1356735495;Retrieve all child elements of the given DOM element that match any of the given element names. Only look at the_direct child level of the given element_ do not go into further depth (in contrast to the DOM API's_{@code getElementsByTagName} method).__@param ele           the DOM element to analyze_@param childEleNames the child element names to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String[] childEleNames) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleNames, "Element names collection must not be null")__		List<String> childEleNameList = Arrays.asList(childEleNames)__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<Element>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleNameList)) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieve,all,child,elements,of,the,given,dom,element,that,match,any,of,the,given,element,names,only,look,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,names,the,child,element,names,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,names,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,names,element,names,collection,must,not,be,null,list,string,child,ele,name,list,arrays,as,list,child,ele,names,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,element,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,list,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String[] childEleNames);1375309221;Retrieves all child elements of the given DOM element that match any of the given element names._Only looks at the direct child level of the given element_ do not go into further depth_(in contrast to the DOM API's {@code getElementsByTagName} method)._@param ele the DOM element to analyze_@param childEleNames the child element names to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String[] childEleNames) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleNames, "Element names collection must not be null")__		List<String> childEleNameList = Arrays.asList(childEleNames)__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<Element>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleNameList)) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieves,all,child,elements,of,the,given,dom,element,that,match,any,of,the,given,element,names,only,looks,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,names,the,child,element,names,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,names,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,names,element,names,collection,must,not,be,null,list,string,child,ele,name,list,arrays,as,list,child,ele,names,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,element,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,list,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String[] childEleNames);1385412762;Retrieves all child elements of the given DOM element that match any of the given element names._Only looks at the direct child level of the given element_ do not go into further depth_(in contrast to the DOM API's {@code getElementsByTagName} method)._@param ele the DOM element to analyze_@param childEleNames the child element names to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String[] childEleNames) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleNames, "Element names collection must not be null")__		List<String> childEleNameList = Arrays.asList(childEleNames)__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<Element>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleNameList)) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieves,all,child,elements,of,the,given,dom,element,that,match,any,of,the,given,element,names,only,looks,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,names,the,child,element,names,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,names,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,names,element,names,collection,must,not,be,null,list,string,child,ele,name,list,arrays,as,list,child,ele,names,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,element,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,list,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String childEleName);1328020251;Retrieve all child elements of the given DOM element that match the given element name. Only look at the direct_child level of the given element_ do not go into further depth (in contrast to the DOM API's_<code>getElementsByTagName</code> method).__@param ele		  the DOM element to analyze_@param childEleName the child element name to look for_@return a List of child <code>org.w3c.dom.Element</code> instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String childEleName) {_		return getChildElementsByTagName(ele, new String[]{childEleName})__	};retrieve,all,child,elements,of,the,given,dom,element,that,match,the,given,element,name,only,look,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,code,method,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,code,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,name,return,get,child,elements,by,tag,name,ele,new,string,child,ele,name
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String childEleName);1356735495;Retrieve all child elements of the given DOM element that match the given element name. Only look at the direct_child level of the given element_ do not go into further depth (in contrast to the DOM API's_{@code getElementsByTagName} method).__@param ele          the DOM element to analyze_@param childEleName the child element name to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String childEleName) {_		return getChildElementsByTagName(ele, new String[]{childEleName})__	};retrieve,all,child,elements,of,the,given,dom,element,that,match,the,given,element,name,only,look,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,name,return,get,child,elements,by,tag,name,ele,new,string,child,ele,name
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String childEleName);1375309221;Retrieves all child elements of the given DOM element that match the given element name._Only look at the direct child level of the given element_ do not go into further depth_(in contrast to the DOM API's {@code getElementsByTagName} method)._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String childEleName) {_		return getChildElementsByTagName(ele, new String[]{childEleName})__	};retrieves,all,child,elements,of,the,given,dom,element,that,match,the,given,element,name,only,look,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,name,return,get,child,elements,by,tag,name,ele,new,string,child,ele,name
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String childEleName);1385412762;Retrieves all child elements of the given DOM element that match the given element name._Only look at the direct child level of the given element_ do not go into further depth_(in contrast to the DOM API's {@code getElementsByTagName} method)._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String childEleName) {_		return getChildElementsByTagName(ele, new String[]{childEleName})__	};retrieves,all,child,elements,of,the,given,dom,element,that,match,the,given,element,name,only,look,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,name,return,get,child,elements,by,tag,name,ele,new,string,child,ele,name
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String childEleName);1388762328;Retrieves all child elements of the given DOM element that match the given element name._Only look at the direct child level of the given element_ do not go into further depth_(in contrast to the DOM API's {@code getElementsByTagName} method)._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String childEleName) {_		return getChildElementsByTagName(ele, new String[] {childEleName})__	};retrieves,all,child,elements,of,the,given,dom,element,that,match,the,given,element,name,only,look,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,name,return,get,child,elements,by,tag,name,ele,new,string,child,ele,name
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String childEleName);1467730834;Retrieves all child elements of the given DOM element that match the given element name._Only look at the direct child level of the given element_ do not go into further depth_(in contrast to the DOM API's {@code getElementsByTagName} method)._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String childEleName) {_		return getChildElementsByTagName(ele, new String[] {childEleName})__	};retrieves,all,child,elements,of,the,given,dom,element,that,match,the,given,element,name,only,look,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,name,return,get,child,elements,by,tag,name,ele,new,string,child,ele,name
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String childEleName);1495868221;Retrieves all child elements of the given DOM element that match the given element name._Only look at the direct child level of the given element_ do not go into further depth_(in contrast to the DOM API's {@code getElementsByTagName} method)._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String childEleName) {_		return getChildElementsByTagName(ele, new String[] {childEleName})__	};retrieves,all,child,elements,of,the,given,dom,element,that,match,the,given,element,name,only,look,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,name,return,get,child,elements,by,tag,name,ele,new,string,child,ele,name
DomUtils -> public static List<Element> getChildElementsByTagName(Element ele, String childEleName);1530174524;Retrieves all child elements of the given DOM element that match the given element name._Only look at the direct child level of the given element_ do not go into further depth_(in contrast to the DOM API's {@code getElementsByTagName} method)._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return a List of child {@code org.w3c.dom.Element} instances_@see org.w3c.dom.Element_@see org.w3c.dom.Element#getElementsByTagName;public static List<Element> getChildElementsByTagName(Element ele, String childEleName) {_		return getChildElementsByTagName(ele, new String[] {childEleName})__	};retrieves,all,child,elements,of,the,given,dom,element,that,match,the,given,element,name,only,look,at,the,direct,child,level,of,the,given,element,do,not,go,into,further,depth,in,contrast,to,the,dom,api,s,code,get,elements,by,tag,name,method,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,a,list,of,child,code,org,w3c,dom,element,instances,see,org,w3c,dom,element,see,org,w3c,dom,element,get,elements,by,tag,name;public,static,list,element,get,child,elements,by,tag,name,element,ele,string,child,ele,name,return,get,child,elements,by,tag,name,ele,new,string,child,ele,name
DomUtils -> public static String getTextValue(Element valueEle);1328020251;Extract the text value from the given DOM element, ignoring XML comments. <p>Appends all CharacterData nodes and_EntityReference nodes into a single String value, excluding Comment nodes.__@see CharacterData_@see EntityReference_@see Comment;public static String getTextValue(Element valueEle) {_		Assert.notNull(valueEle, "Element must not be null")__		StringBuilder sb = new StringBuilder()__		NodeList nl = valueEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node item = nl.item(i)__			if ((item instanceof CharacterData && !(item instanceof Comment)) || item instanceof EntityReference) {_				sb.append(item.getNodeValue())__			}_		}_		return sb.toString()__	};extract,the,text,value,from,the,given,dom,element,ignoring,xml,comments,p,appends,all,character,data,nodes,and,entity,reference,nodes,into,a,single,string,value,excluding,comment,nodes,see,character,data,see,entity,reference,see,comment;public,static,string,get,text,value,element,value,ele,assert,not,null,value,ele,element,must,not,be,null,string,builder,sb,new,string,builder,node,list,nl,value,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,item,nl,item,i,if,item,instanceof,character,data,item,instanceof,comment,item,instanceof,entity,reference,sb,append,item,get,node,value,return,sb,to,string
DomUtils -> public static String getTextValue(Element valueEle);1356735495;Extract the text value from the given DOM element, ignoring XML comments. <p>Appends all CharacterData nodes and_EntityReference nodes into a single String value, excluding Comment nodes.__@see CharacterData_@see EntityReference_@see Comment;public static String getTextValue(Element valueEle) {_		Assert.notNull(valueEle, "Element must not be null")__		StringBuilder sb = new StringBuilder()__		NodeList nl = valueEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node item = nl.item(i)__			if ((item instanceof CharacterData && !(item instanceof Comment)) || item instanceof EntityReference) {_				sb.append(item.getNodeValue())__			}_		}_		return sb.toString()__	};extract,the,text,value,from,the,given,dom,element,ignoring,xml,comments,p,appends,all,character,data,nodes,and,entity,reference,nodes,into,a,single,string,value,excluding,comment,nodes,see,character,data,see,entity,reference,see,comment;public,static,string,get,text,value,element,value,ele,assert,not,null,value,ele,element,must,not,be,null,string,builder,sb,new,string,builder,node,list,nl,value,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,item,nl,item,i,if,item,instanceof,character,data,item,instanceof,comment,item,instanceof,entity,reference,sb,append,item,get,node,value,return,sb,to,string
DomUtils -> public static String getTextValue(Element valueEle);1375309221;Extracts the text value from the given DOM element, ignoring XML comments._<p>Appends all CharacterData nodes and EntityReference nodes into a single_String value, excluding Comment nodes. Only exposes actual user-specified_text, no default values of any kind._@see CharacterData_@see EntityReference_@see Comment;public static String getTextValue(Element valueEle) {_		Assert.notNull(valueEle, "Element must not be null")__		StringBuilder sb = new StringBuilder()__		NodeList nl = valueEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node item = nl.item(i)__			if ((item instanceof CharacterData && !(item instanceof Comment)) || item instanceof EntityReference) {_				sb.append(item.getNodeValue())__			}_		}_		return sb.toString()__	};extracts,the,text,value,from,the,given,dom,element,ignoring,xml,comments,p,appends,all,character,data,nodes,and,entity,reference,nodes,into,a,single,string,value,excluding,comment,nodes,only,exposes,actual,user,specified,text,no,default,values,of,any,kind,see,character,data,see,entity,reference,see,comment;public,static,string,get,text,value,element,value,ele,assert,not,null,value,ele,element,must,not,be,null,string,builder,sb,new,string,builder,node,list,nl,value,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,item,nl,item,i,if,item,instanceof,character,data,item,instanceof,comment,item,instanceof,entity,reference,sb,append,item,get,node,value,return,sb,to,string
DomUtils -> public static String getTextValue(Element valueEle);1385412762;Extracts the text value from the given DOM element, ignoring XML comments._<p>Appends all CharacterData nodes and EntityReference nodes into a single_String value, excluding Comment nodes. Only exposes actual user-specified_text, no default values of any kind._@see CharacterData_@see EntityReference_@see Comment;public static String getTextValue(Element valueEle) {_		Assert.notNull(valueEle, "Element must not be null")__		StringBuilder sb = new StringBuilder()__		NodeList nl = valueEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node item = nl.item(i)__			if ((item instanceof CharacterData && !(item instanceof Comment)) || item instanceof EntityReference) {_				sb.append(item.getNodeValue())__			}_		}_		return sb.toString()__	};extracts,the,text,value,from,the,given,dom,element,ignoring,xml,comments,p,appends,all,character,data,nodes,and,entity,reference,nodes,into,a,single,string,value,excluding,comment,nodes,only,exposes,actual,user,specified,text,no,default,values,of,any,kind,see,character,data,see,entity,reference,see,comment;public,static,string,get,text,value,element,value,ele,assert,not,null,value,ele,element,must,not,be,null,string,builder,sb,new,string,builder,node,list,nl,value,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,item,nl,item,i,if,item,instanceof,character,data,item,instanceof,comment,item,instanceof,entity,reference,sb,append,item,get,node,value,return,sb,to,string
DomUtils -> public static String getTextValue(Element valueEle);1388762328;Extracts the text value from the given DOM element, ignoring XML comments._<p>Appends all CharacterData nodes and EntityReference nodes into a single_String value, excluding Comment nodes. Only exposes actual user-specified_text, no default values of any kind._@see CharacterData_@see EntityReference_@see Comment;public static String getTextValue(Element valueEle) {_		Assert.notNull(valueEle, "Element must not be null")__		StringBuilder sb = new StringBuilder()__		NodeList nl = valueEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node item = nl.item(i)__			if ((item instanceof CharacterData && !(item instanceof Comment)) || item instanceof EntityReference) {_				sb.append(item.getNodeValue())__			}_		}_		return sb.toString()__	};extracts,the,text,value,from,the,given,dom,element,ignoring,xml,comments,p,appends,all,character,data,nodes,and,entity,reference,nodes,into,a,single,string,value,excluding,comment,nodes,only,exposes,actual,user,specified,text,no,default,values,of,any,kind,see,character,data,see,entity,reference,see,comment;public,static,string,get,text,value,element,value,ele,assert,not,null,value,ele,element,must,not,be,null,string,builder,sb,new,string,builder,node,list,nl,value,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,item,nl,item,i,if,item,instanceof,character,data,item,instanceof,comment,item,instanceof,entity,reference,sb,append,item,get,node,value,return,sb,to,string
DomUtils -> public static String getTextValue(Element valueEle);1467730834;Extracts the text value from the given DOM element, ignoring XML comments._<p>Appends all CharacterData nodes and EntityReference nodes into a single_String value, excluding Comment nodes. Only exposes actual user-specified_text, no default values of any kind._@see CharacterData_@see EntityReference_@see Comment;public static String getTextValue(Element valueEle) {_		Assert.notNull(valueEle, "Element must not be null")__		StringBuilder sb = new StringBuilder()__		NodeList nl = valueEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node item = nl.item(i)__			if ((item instanceof CharacterData && !(item instanceof Comment)) || item instanceof EntityReference) {_				sb.append(item.getNodeValue())__			}_		}_		return sb.toString()__	};extracts,the,text,value,from,the,given,dom,element,ignoring,xml,comments,p,appends,all,character,data,nodes,and,entity,reference,nodes,into,a,single,string,value,excluding,comment,nodes,only,exposes,actual,user,specified,text,no,default,values,of,any,kind,see,character,data,see,entity,reference,see,comment;public,static,string,get,text,value,element,value,ele,assert,not,null,value,ele,element,must,not,be,null,string,builder,sb,new,string,builder,node,list,nl,value,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,item,nl,item,i,if,item,instanceof,character,data,item,instanceof,comment,item,instanceof,entity,reference,sb,append,item,get,node,value,return,sb,to,string
DomUtils -> public static String getTextValue(Element valueEle);1495868221;Extracts the text value from the given DOM element, ignoring XML comments._<p>Appends all CharacterData nodes and EntityReference nodes into a single_String value, excluding Comment nodes. Only exposes actual user-specified_text, no default values of any kind._@see CharacterData_@see EntityReference_@see Comment;public static String getTextValue(Element valueEle) {_		Assert.notNull(valueEle, "Element must not be null")__		StringBuilder sb = new StringBuilder()__		NodeList nl = valueEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node item = nl.item(i)__			if ((item instanceof CharacterData && !(item instanceof Comment)) || item instanceof EntityReference) {_				sb.append(item.getNodeValue())__			}_		}_		return sb.toString()__	};extracts,the,text,value,from,the,given,dom,element,ignoring,xml,comments,p,appends,all,character,data,nodes,and,entity,reference,nodes,into,a,single,string,value,excluding,comment,nodes,only,exposes,actual,user,specified,text,no,default,values,of,any,kind,see,character,data,see,entity,reference,see,comment;public,static,string,get,text,value,element,value,ele,assert,not,null,value,ele,element,must,not,be,null,string,builder,sb,new,string,builder,node,list,nl,value,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,item,nl,item,i,if,item,instanceof,character,data,item,instanceof,comment,item,instanceof,entity,reference,sb,append,item,get,node,value,return,sb,to,string
DomUtils -> public static String getTextValue(Element valueEle);1530174524;Extracts the text value from the given DOM element, ignoring XML comments._<p>Appends all CharacterData nodes and EntityReference nodes into a single_String value, excluding Comment nodes. Only exposes actual user-specified_text, no default values of any kind._@see CharacterData_@see EntityReference_@see Comment;public static String getTextValue(Element valueEle) {_		Assert.notNull(valueEle, "Element must not be null")__		StringBuilder sb = new StringBuilder()__		NodeList nl = valueEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node item = nl.item(i)__			if ((item instanceof CharacterData && !(item instanceof Comment)) || item instanceof EntityReference) {_				sb.append(item.getNodeValue())__			}_		}_		return sb.toString()__	};extracts,the,text,value,from,the,given,dom,element,ignoring,xml,comments,p,appends,all,character,data,nodes,and,entity,reference,nodes,into,a,single,string,value,excluding,comment,nodes,only,exposes,actual,user,specified,text,no,default,values,of,any,kind,see,character,data,see,entity,reference,see,comment;public,static,string,get,text,value,element,value,ele,assert,not,null,value,ele,element,must,not,be,null,string,builder,sb,new,string,builder,node,list,nl,value,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,item,nl,item,i,if,item,instanceof,character,data,item,instanceof,comment,item,instanceof,entity,reference,sb,append,item,get,node,value,return,sb,to,string
DomUtils -> private static boolean nodeNameMatch(Node node, String desiredName);1328020251;Matches the given node's name and local name against the given desired name.;private static boolean nodeNameMatch(Node node, String desiredName) {_		return (desiredName.equals(node.getNodeName()) || desiredName.equals(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,name;private,static,boolean,node,name,match,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, String desiredName);1356735495;Matches the given node's name and local name against the given desired name.;private static boolean nodeNameMatch(Node node, String desiredName) {_		return (desiredName.equals(node.getNodeName()) || desiredName.equals(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,name;private,static,boolean,node,name,match,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, String desiredName);1375309221;Matches the given node's name and local name against the given desired name.;private static boolean nodeNameMatch(Node node, String desiredName) {_		return (desiredName.equals(node.getNodeName()) || desiredName.equals(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,name;private,static,boolean,node,name,match,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, String desiredName);1385412762;Matches the given node's name and local name against the given desired name.;private static boolean nodeNameMatch(Node node, String desiredName) {_		return (desiredName.equals(node.getNodeName()) || desiredName.equals(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,name;private,static,boolean,node,name,match,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, String desiredName);1388762328;Matches the given node's name and local name against the given desired name.;private static boolean nodeNameMatch(Node node, String desiredName) {_		return (desiredName.equals(node.getNodeName()) || desiredName.equals(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,name;private,static,boolean,node,name,match,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, String desiredName);1467730834;Matches the given node's name and local name against the given desired name.;private static boolean nodeNameMatch(Node node, String desiredName) {_		return (desiredName.equals(node.getNodeName()) || desiredName.equals(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,name;private,static,boolean,node,name,match,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, String desiredName);1495868221;Matches the given node's name and local name against the given desired name.;private static boolean nodeNameMatch(Node node, String desiredName) {_		return (desiredName.equals(node.getNodeName()) || desiredName.equals(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,name;private,static,boolean,node,name,match,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, String desiredName);1530174524;Matches the given node's name and local name against the given desired name.;private static boolean nodeNameMatch(Node node, String desiredName) {_		return (desiredName.equals(node.getNodeName()) || desiredName.equals(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,name;private,static,boolean,node,name,match,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,node,get,local,name
DomUtils -> public static boolean nodeNameEquals(Node node, String desiredName);1328020251;Namespace-aware equals comparison. Returns <code>true</code> if either {@link Node#getLocalName} or {@link_Node#getNodeName} equals <code>desiredName</code>, otherwise returns <code>false</code>.;public static boolean nodeNameEquals(Node node, String desiredName) {_		Assert.notNull(node, "Node must not be null")__		Assert.notNull(desiredName, "Desired name must not be null")__		return nodeNameMatch(node, desiredName)__	};namespace,aware,equals,comparison,returns,code,true,code,if,either,link,node,get,local,name,or,link,node,get,node,name,equals,code,desired,name,code,otherwise,returns,code,false,code;public,static,boolean,node,name,equals,node,node,string,desired,name,assert,not,null,node,node,must,not,be,null,assert,not,null,desired,name,desired,name,must,not,be,null,return,node,name,match,node,desired,name
DomUtils -> public static boolean nodeNameEquals(Node node, String desiredName);1356735495;Namespace-aware equals comparison. Returns {@code true} if either {@link Node#getLocalName} or {@link_Node#getNodeName} equals {@code desiredName}, otherwise returns {@code false}.;public static boolean nodeNameEquals(Node node, String desiredName) {_		Assert.notNull(node, "Node must not be null")__		Assert.notNull(desiredName, "Desired name must not be null")__		return nodeNameMatch(node, desiredName)__	};namespace,aware,equals,comparison,returns,code,true,if,either,link,node,get,local,name,or,link,node,get,node,name,equals,code,desired,name,otherwise,returns,code,false;public,static,boolean,node,name,equals,node,node,string,desired,name,assert,not,null,node,node,must,not,be,null,assert,not,null,desired,name,desired,name,must,not,be,null,return,node,name,match,node,desired,name
DomUtils -> public static boolean nodeNameEquals(Node node, String desiredName);1375309221;Namespace-aware equals comparison. Returns {@code true} if either_{@link Node#getLocalName} or {@link Node#getNodeName} equals_{@code desiredName}, otherwise returns {@code false}.;public static boolean nodeNameEquals(Node node, String desiredName) {_		Assert.notNull(node, "Node must not be null")__		Assert.notNull(desiredName, "Desired name must not be null")__		return nodeNameMatch(node, desiredName)__	};namespace,aware,equals,comparison,returns,code,true,if,either,link,node,get,local,name,or,link,node,get,node,name,equals,code,desired,name,otherwise,returns,code,false;public,static,boolean,node,name,equals,node,node,string,desired,name,assert,not,null,node,node,must,not,be,null,assert,not,null,desired,name,desired,name,must,not,be,null,return,node,name,match,node,desired,name
DomUtils -> public static boolean nodeNameEquals(Node node, String desiredName);1385412762;Namespace-aware equals comparison. Returns {@code true} if either_{@link Node#getLocalName} or {@link Node#getNodeName} equals_{@code desiredName}, otherwise returns {@code false}.;public static boolean nodeNameEquals(Node node, String desiredName) {_		Assert.notNull(node, "Node must not be null")__		Assert.notNull(desiredName, "Desired name must not be null")__		return nodeNameMatch(node, desiredName)__	};namespace,aware,equals,comparison,returns,code,true,if,either,link,node,get,local,name,or,link,node,get,node,name,equals,code,desired,name,otherwise,returns,code,false;public,static,boolean,node,name,equals,node,node,string,desired,name,assert,not,null,node,node,must,not,be,null,assert,not,null,desired,name,desired,name,must,not,be,null,return,node,name,match,node,desired,name
DomUtils -> public static boolean nodeNameEquals(Node node, String desiredName);1388762328;Namespace-aware equals comparison. Returns {@code true} if either_{@link Node#getLocalName} or {@link Node#getNodeName} equals_{@code desiredName}, otherwise returns {@code false}.;public static boolean nodeNameEquals(Node node, String desiredName) {_		Assert.notNull(node, "Node must not be null")__		Assert.notNull(desiredName, "Desired name must not be null")__		return nodeNameMatch(node, desiredName)__	};namespace,aware,equals,comparison,returns,code,true,if,either,link,node,get,local,name,or,link,node,get,node,name,equals,code,desired,name,otherwise,returns,code,false;public,static,boolean,node,name,equals,node,node,string,desired,name,assert,not,null,node,node,must,not,be,null,assert,not,null,desired,name,desired,name,must,not,be,null,return,node,name,match,node,desired,name
DomUtils -> public static boolean nodeNameEquals(Node node, String desiredName);1467730834;Namespace-aware equals comparison. Returns {@code true} if either_{@link Node#getLocalName} or {@link Node#getNodeName} equals_{@code desiredName}, otherwise returns {@code false}.;public static boolean nodeNameEquals(Node node, String desiredName) {_		Assert.notNull(node, "Node must not be null")__		Assert.notNull(desiredName, "Desired name must not be null")__		return nodeNameMatch(node, desiredName)__	};namespace,aware,equals,comparison,returns,code,true,if,either,link,node,get,local,name,or,link,node,get,node,name,equals,code,desired,name,otherwise,returns,code,false;public,static,boolean,node,name,equals,node,node,string,desired,name,assert,not,null,node,node,must,not,be,null,assert,not,null,desired,name,desired,name,must,not,be,null,return,node,name,match,node,desired,name
DomUtils -> public static boolean nodeNameEquals(Node node, String desiredName);1495868221;Namespace-aware equals comparison. Returns {@code true} if either_{@link Node#getLocalName} or {@link Node#getNodeName} equals_{@code desiredName}, otherwise returns {@code false}.;public static boolean nodeNameEquals(Node node, String desiredName) {_		Assert.notNull(node, "Node must not be null")__		Assert.notNull(desiredName, "Desired name must not be null")__		return nodeNameMatch(node, desiredName)__	};namespace,aware,equals,comparison,returns,code,true,if,either,link,node,get,local,name,or,link,node,get,node,name,equals,code,desired,name,otherwise,returns,code,false;public,static,boolean,node,name,equals,node,node,string,desired,name,assert,not,null,node,node,must,not,be,null,assert,not,null,desired,name,desired,name,must,not,be,null,return,node,name,match,node,desired,name
DomUtils -> public static boolean nodeNameEquals(Node node, String desiredName);1530174524;Namespace-aware equals comparison. Returns {@code true} if either_{@link Node#getLocalName} or {@link Node#getNodeName} equals_{@code desiredName}, otherwise returns {@code false}.;public static boolean nodeNameEquals(Node node, String desiredName) {_		Assert.notNull(node, "Node must not be null")__		Assert.notNull(desiredName, "Desired name must not be null")__		return nodeNameMatch(node, desiredName)__	};namespace,aware,equals,comparison,returns,code,true,if,either,link,node,get,local,name,or,link,node,get,node,name,equals,code,desired,name,otherwise,returns,code,false;public,static,boolean,node,name,equals,node,node,string,desired,name,assert,not,null,node,node,must,not,be,null,assert,not,null,desired,name,desired,name,must,not,be,null,return,node,name,match,node,desired,name
DomUtils -> @Nullable 	public static String getChildElementValueByTagName(Element ele, String childEleName);1495868221;Utility method that returns the first child element value identified by its name._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return the extracted text value, or {@code null} if no child element found;@Nullable_	public static String getChildElementValueByTagName(Element ele, String childEleName) {_		Element child = getChildElementByTagName(ele, childEleName)__		return (child != null ? getTextValue(child) : null)__	};utility,method,that,returns,the,first,child,element,value,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,extracted,text,value,or,code,null,if,no,child,element,found;nullable,public,static,string,get,child,element,value,by,tag,name,element,ele,string,child,ele,name,element,child,get,child,element,by,tag,name,ele,child,ele,name,return,child,null,get,text,value,child,null
DomUtils -> @Nullable 	public static String getChildElementValueByTagName(Element ele, String childEleName);1530174524;Utility method that returns the first child element value identified by its name._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return the extracted text value, or {@code null} if no child element found;@Nullable_	public static String getChildElementValueByTagName(Element ele, String childEleName) {_		Element child = getChildElementByTagName(ele, childEleName)__		return (child != null ? getTextValue(child) : null)__	};utility,method,that,returns,the,first,child,element,value,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,extracted,text,value,or,code,null,if,no,child,element,found;nullable,public,static,string,get,child,element,value,by,tag,name,element,ele,string,child,ele,name,element,child,get,child,element,by,tag,name,ele,child,ele,name,return,child,null,get,text,value,child,null
DomUtils -> private static boolean nodeNameMatch(Node node, Collection<?> desiredNames);1385412762;Matches the given node's name and local name against the given desired names.;private static boolean nodeNameMatch(Node node, Collection<?> desiredNames) {_		return (desiredNames.contains(node.getNodeName()) || desiredNames.contains(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,names;private,static,boolean,node,name,match,node,node,collection,desired,names,return,desired,names,contains,node,get,node,name,desired,names,contains,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, Collection<?> desiredNames);1388762328;Matches the given node's name and local name against the given desired names.;private static boolean nodeNameMatch(Node node, Collection<?> desiredNames) {_		return (desiredNames.contains(node.getNodeName()) || desiredNames.contains(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,names;private,static,boolean,node,name,match,node,node,collection,desired,names,return,desired,names,contains,node,get,node,name,desired,names,contains,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, Collection<?> desiredNames);1467730834;Matches the given node's name and local name against the given desired names.;private static boolean nodeNameMatch(Node node, Collection<?> desiredNames) {_		return (desiredNames.contains(node.getNodeName()) || desiredNames.contains(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,names;private,static,boolean,node,name,match,node,node,collection,desired,names,return,desired,names,contains,node,get,node,name,desired,names,contains,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, Collection<?> desiredNames);1495868221;Matches the given node's name and local name against the given desired names.;private static boolean nodeNameMatch(Node node, Collection<?> desiredNames) {_		return (desiredNames.contains(node.getNodeName()) || desiredNames.contains(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,names;private,static,boolean,node,name,match,node,node,collection,desired,names,return,desired,names,contains,node,get,node,name,desired,names,contains,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, Collection<?> desiredNames);1530174524;Matches the given node's name and local name against the given desired names.;private static boolean nodeNameMatch(Node node, Collection<?> desiredNames) {_		return (desiredNames.contains(node.getNodeName()) || desiredNames.contains(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,names;private,static,boolean,node,name,match,node,node,collection,desired,names,return,desired,names,contains,node,get,node,name,desired,names,contains,node,get,local,name
DomUtils -> public static Element getChildElementByTagName(Element ele, String childEleName);1328020251;Utility method that returns the first child element identified by its name.__@param ele		  the DOM element to analyze_@param childEleName the child element name to look for_@return the <code>org.w3c.dom.Element</code> instance, or <code>null</code> if none found;public static Element getChildElementByTagName(Element ele, String childEleName) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleName, "Element name must not be null")__		NodeList nl = ele.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleName)) {_				return (Element) node__			}_		}_		return null__	};utility,method,that,returns,the,first,child,element,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,code,org,w3c,dom,element,code,instance,or,code,null,code,if,none,found;public,static,element,get,child,element,by,tag,name,element,ele,string,child,ele,name,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,name,element,name,must,not,be,null,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,return,element,node,return,null
DomUtils -> public static Element getChildElementByTagName(Element ele, String childEleName);1356735495;Utility method that returns the first child element identified by its name.__@param ele          the DOM element to analyze_@param childEleName the child element name to look for_@return the {@code org.w3c.dom.Element} instance, or {@code null} if none found;public static Element getChildElementByTagName(Element ele, String childEleName) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleName, "Element name must not be null")__		NodeList nl = ele.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleName)) {_				return (Element) node__			}_		}_		return null__	};utility,method,that,returns,the,first,child,element,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,code,org,w3c,dom,element,instance,or,code,null,if,none,found;public,static,element,get,child,element,by,tag,name,element,ele,string,child,ele,name,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,name,element,name,must,not,be,null,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,return,element,node,return,null
DomUtils -> public static Element getChildElementByTagName(Element ele, String childEleName);1375309221;Utility method that returns the first child element identified by its name._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return the {@code org.w3c.dom.Element} instance, or {@code null} if none found;public static Element getChildElementByTagName(Element ele, String childEleName) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleName, "Element name must not be null")__		NodeList nl = ele.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleName)) {_				return (Element) node__			}_		}_		return null__	};utility,method,that,returns,the,first,child,element,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,code,org,w3c,dom,element,instance,or,code,null,if,none,found;public,static,element,get,child,element,by,tag,name,element,ele,string,child,ele,name,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,name,element,name,must,not,be,null,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,return,element,node,return,null
DomUtils -> public static Element getChildElementByTagName(Element ele, String childEleName);1385412762;Utility method that returns the first child element identified by its name._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return the {@code org.w3c.dom.Element} instance, or {@code null} if none found;public static Element getChildElementByTagName(Element ele, String childEleName) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleName, "Element name must not be null")__		NodeList nl = ele.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleName)) {_				return (Element) node__			}_		}_		return null__	};utility,method,that,returns,the,first,child,element,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,code,org,w3c,dom,element,instance,or,code,null,if,none,found;public,static,element,get,child,element,by,tag,name,element,ele,string,child,ele,name,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,name,element,name,must,not,be,null,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,return,element,node,return,null
DomUtils -> public static Element getChildElementByTagName(Element ele, String childEleName);1388762328;Utility method that returns the first child element identified by its name._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return the {@code org.w3c.dom.Element} instance, or {@code null} if none found;public static Element getChildElementByTagName(Element ele, String childEleName) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleName, "Element name must not be null")__		NodeList nl = ele.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleName)) {_				return (Element) node__			}_		}_		return null__	};utility,method,that,returns,the,first,child,element,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,code,org,w3c,dom,element,instance,or,code,null,if,none,found;public,static,element,get,child,element,by,tag,name,element,ele,string,child,ele,name,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,name,element,name,must,not,be,null,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,return,element,node,return,null
DomUtils -> public static Element getChildElementByTagName(Element ele, String childEleName);1467730834;Utility method that returns the first child element identified by its name._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return the {@code org.w3c.dom.Element} instance, or {@code null} if none found;public static Element getChildElementByTagName(Element ele, String childEleName) {_		Assert.notNull(ele, "Element must not be null")__		Assert.notNull(childEleName, "Element name must not be null")__		NodeList nl = ele.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && nodeNameMatch(node, childEleName)) {_				return (Element) node__			}_		}_		return null__	};utility,method,that,returns,the,first,child,element,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,code,org,w3c,dom,element,instance,or,code,null,if,none,found;public,static,element,get,child,element,by,tag,name,element,ele,string,child,ele,name,assert,not,null,ele,element,must,not,be,null,assert,not,null,child,ele,name,element,name,must,not,be,null,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,match,node,child,ele,name,return,element,node,return,null
DomUtils -> public static List<Element> getChildElements(Element ele);1328020251;Retrieve all child elements of the given DOM element__@param ele		   the DOM element to analyze_@return a List of child <code>org.w3c.dom.Element</code> instances;public static List<Element> getChildElements(Element ele) {_		Assert.notNull(ele, "Element must not be null")__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<Element>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieve,all,child,elements,of,the,given,dom,element,param,ele,the,dom,element,to,analyze,return,a,list,of,child,code,org,w3c,dom,element,code,instances;public,static,list,element,get,child,elements,element,ele,assert,not,null,ele,element,must,not,be,null,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,element,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElements(Element ele);1356735495;Retrieve all child elements of the given DOM element__@param ele           the DOM element to analyze_@return a List of child {@code org.w3c.dom.Element} instances;public static List<Element> getChildElements(Element ele) {_		Assert.notNull(ele, "Element must not be null")__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<Element>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieve,all,child,elements,of,the,given,dom,element,param,ele,the,dom,element,to,analyze,return,a,list,of,child,code,org,w3c,dom,element,instances;public,static,list,element,get,child,elements,element,ele,assert,not,null,ele,element,must,not,be,null,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,element,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElements(Element ele);1375309221;Retrieves all child elements of the given DOM element_@param ele the DOM element to analyze_@return a List of child {@code org.w3c.dom.Element} instances;public static List<Element> getChildElements(Element ele) {_		Assert.notNull(ele, "Element must not be null")__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<Element>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieves,all,child,elements,of,the,given,dom,element,param,ele,the,dom,element,to,analyze,return,a,list,of,child,code,org,w3c,dom,element,instances;public,static,list,element,get,child,elements,element,ele,assert,not,null,ele,element,must,not,be,null,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,element,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElements(Element ele);1385412762;Retrieves all child elements of the given DOM element_@param ele the DOM element to analyze_@return a List of child {@code org.w3c.dom.Element} instances;public static List<Element> getChildElements(Element ele) {_		Assert.notNull(ele, "Element must not be null")__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<Element>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieves,all,child,elements,of,the,given,dom,element,param,ele,the,dom,element,to,analyze,return,a,list,of,child,code,org,w3c,dom,element,instances;public,static,list,element,get,child,elements,element,ele,assert,not,null,ele,element,must,not,be,null,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,element,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElements(Element ele);1388762328;Retrieves all child elements of the given DOM element_@param ele the DOM element to analyze_@return a List of child {@code org.w3c.dom.Element} instances;public static List<Element> getChildElements(Element ele) {_		Assert.notNull(ele, "Element must not be null")__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<Element>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieves,all,child,elements,of,the,given,dom,element,param,ele,the,dom,element,to,analyze,return,a,list,of,child,code,org,w3c,dom,element,instances;public,static,list,element,get,child,elements,element,ele,assert,not,null,ele,element,must,not,be,null,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,element,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElements(Element ele);1467730834;Retrieves all child elements of the given DOM element_@param ele the DOM element to analyze_@return a List of child {@code org.w3c.dom.Element} instances;public static List<Element> getChildElements(Element ele) {_		Assert.notNull(ele, "Element must not be null")__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieves,all,child,elements,of,the,given,dom,element,param,ele,the,dom,element,to,analyze,return,a,list,of,child,code,org,w3c,dom,element,instances;public,static,list,element,get,child,elements,element,ele,assert,not,null,ele,element,must,not,be,null,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElements(Element ele);1495868221;Retrieves all child elements of the given DOM element_@param ele the DOM element to analyze_@return a List of child {@code org.w3c.dom.Element} instances;public static List<Element> getChildElements(Element ele) {_		Assert.notNull(ele, "Element must not be null")__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieves,all,child,elements,of,the,given,dom,element,param,ele,the,dom,element,to,analyze,return,a,list,of,child,code,org,w3c,dom,element,instances;public,static,list,element,get,child,elements,element,ele,assert,not,null,ele,element,must,not,be,null,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,child,eles,add,element,node,return,child,eles
DomUtils -> public static List<Element> getChildElements(Element ele);1530174524;Retrieves all child elements of the given DOM element._@param ele the DOM element to analyze_@return a List of child {@code org.w3c.dom.Element} instances;public static List<Element> getChildElements(Element ele) {_		Assert.notNull(ele, "Element must not be null")__		NodeList nl = ele.getChildNodes()__		List<Element> childEles = new ArrayList<>()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				childEles.add((Element) node)__			}_		}_		return childEles__	};retrieves,all,child,elements,of,the,given,dom,element,param,ele,the,dom,element,to,analyze,return,a,list,of,child,code,org,w3c,dom,element,instances;public,static,list,element,get,child,elements,element,ele,assert,not,null,ele,element,must,not,be,null,node,list,nl,ele,get,child,nodes,list,element,child,eles,new,array,list,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,child,eles,add,element,node,return,child,eles
DomUtils -> private static boolean nodeNameMatch(Node node, Collection desiredNames);1328020251;Matches the given node's name and local name against the given desired names.;private static boolean nodeNameMatch(Node node, Collection desiredNames) {_		return (desiredNames.contains(node.getNodeName()) || desiredNames.contains(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,names;private,static,boolean,node,name,match,node,node,collection,desired,names,return,desired,names,contains,node,get,node,name,desired,names,contains,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, Collection desiredNames);1356735495;Matches the given node's name and local name against the given desired names.;private static boolean nodeNameMatch(Node node, Collection desiredNames) {_		return (desiredNames.contains(node.getNodeName()) || desiredNames.contains(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,names;private,static,boolean,node,name,match,node,node,collection,desired,names,return,desired,names,contains,node,get,node,name,desired,names,contains,node,get,local,name
DomUtils -> private static boolean nodeNameMatch(Node node, Collection desiredNames);1375309221;Matches the given node's name and local name against the given desired names.;private static boolean nodeNameMatch(Node node, Collection desiredNames) {_		return (desiredNames.contains(node.getNodeName()) || desiredNames.contains(node.getLocalName()))__	};matches,the,given,node,s,name,and,local,name,against,the,given,desired,names;private,static,boolean,node,name,match,node,node,collection,desired,names,return,desired,names,contains,node,get,node,name,desired,names,contains,node,get,local,name
DomUtils -> public static String getChildElementValueByTagName(Element ele, String childEleName);1328020251;Utility method that returns the first child element value identified by its name.__@param ele		  the DOM element to analyze_@param childEleName the child element name to look for_@return the extracted text value, or <code>null</code> if no child element found;public static String getChildElementValueByTagName(Element ele, String childEleName) {_		Element child = getChildElementByTagName(ele, childEleName)__		return (child != null ? getTextValue(child) : null)__	};utility,method,that,returns,the,first,child,element,value,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,extracted,text,value,or,code,null,code,if,no,child,element,found;public,static,string,get,child,element,value,by,tag,name,element,ele,string,child,ele,name,element,child,get,child,element,by,tag,name,ele,child,ele,name,return,child,null,get,text,value,child,null
DomUtils -> public static String getChildElementValueByTagName(Element ele, String childEleName);1356735495;Utility method that returns the first child element value identified by its name.__@param ele          the DOM element to analyze_@param childEleName the child element name to look for_@return the extracted text value, or {@code null} if no child element found;public static String getChildElementValueByTagName(Element ele, String childEleName) {_		Element child = getChildElementByTagName(ele, childEleName)__		return (child != null ? getTextValue(child) : null)__	};utility,method,that,returns,the,first,child,element,value,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,extracted,text,value,or,code,null,if,no,child,element,found;public,static,string,get,child,element,value,by,tag,name,element,ele,string,child,ele,name,element,child,get,child,element,by,tag,name,ele,child,ele,name,return,child,null,get,text,value,child,null
DomUtils -> public static String getChildElementValueByTagName(Element ele, String childEleName);1375309221;Utility method that returns the first child element value identified by its name._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return the extracted text value, or {@code null} if no child element found;public static String getChildElementValueByTagName(Element ele, String childEleName) {_		Element child = getChildElementByTagName(ele, childEleName)__		return (child != null ? getTextValue(child) : null)__	};utility,method,that,returns,the,first,child,element,value,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,extracted,text,value,or,code,null,if,no,child,element,found;public,static,string,get,child,element,value,by,tag,name,element,ele,string,child,ele,name,element,child,get,child,element,by,tag,name,ele,child,ele,name,return,child,null,get,text,value,child,null
DomUtils -> public static String getChildElementValueByTagName(Element ele, String childEleName);1385412762;Utility method that returns the first child element value identified by its name._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return the extracted text value, or {@code null} if no child element found;public static String getChildElementValueByTagName(Element ele, String childEleName) {_		Element child = getChildElementByTagName(ele, childEleName)__		return (child != null ? getTextValue(child) : null)__	};utility,method,that,returns,the,first,child,element,value,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,extracted,text,value,or,code,null,if,no,child,element,found;public,static,string,get,child,element,value,by,tag,name,element,ele,string,child,ele,name,element,child,get,child,element,by,tag,name,ele,child,ele,name,return,child,null,get,text,value,child,null
DomUtils -> public static String getChildElementValueByTagName(Element ele, String childEleName);1388762328;Utility method that returns the first child element value identified by its name._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return the extracted text value, or {@code null} if no child element found;public static String getChildElementValueByTagName(Element ele, String childEleName) {_		Element child = getChildElementByTagName(ele, childEleName)__		return (child != null ? getTextValue(child) : null)__	};utility,method,that,returns,the,first,child,element,value,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,extracted,text,value,or,code,null,if,no,child,element,found;public,static,string,get,child,element,value,by,tag,name,element,ele,string,child,ele,name,element,child,get,child,element,by,tag,name,ele,child,ele,name,return,child,null,get,text,value,child,null
DomUtils -> public static String getChildElementValueByTagName(Element ele, String childEleName);1467730834;Utility method that returns the first child element value identified by its name._@param ele the DOM element to analyze_@param childEleName the child element name to look for_@return the extracted text value, or {@code null} if no child element found;public static String getChildElementValueByTagName(Element ele, String childEleName) {_		Element child = getChildElementByTagName(ele, childEleName)__		return (child != null ? getTextValue(child) : null)__	};utility,method,that,returns,the,first,child,element,value,identified,by,its,name,param,ele,the,dom,element,to,analyze,param,child,ele,name,the,child,element,name,to,look,for,return,the,extracted,text,value,or,code,null,if,no,child,element,found;public,static,string,get,child,element,value,by,tag,name,element,ele,string,child,ele,name,element,child,get,child,element,by,tag,name,ele,child,ele,name,return,child,null,get,text,value,child,null
DomUtils -> public static ContentHandler createContentHandler(Node node);1328020251;Returns a SAX <code>ContentHandler</code> that transforms callback calls to DOM <code>Node</code>s.__@param node the node to publish events to_@return the content handler;public static ContentHandler createContentHandler(Node node) {_		return new DomContentHandler(node)__	};returns,a,sax,code,content,handler,code,that,transforms,callback,calls,to,dom,code,node,code,s,param,node,the,node,to,publish,events,to,return,the,content,handler;public,static,content,handler,create,content,handler,node,node,return,new,dom,content,handler,node
DomUtils -> public static ContentHandler createContentHandler(Node node);1356735495;Returns a SAX {@code ContentHandler} that transforms callback calls to DOM {@code Node}s.__@param node the node to publish events to_@return the content handler;public static ContentHandler createContentHandler(Node node) {_		return new DomContentHandler(node)__	};returns,a,sax,code,content,handler,that,transforms,callback,calls,to,dom,code,node,s,param,node,the,node,to,publish,events,to,return,the,content,handler;public,static,content,handler,create,content,handler,node,node,return,new,dom,content,handler,node
DomUtils -> public static ContentHandler createContentHandler(Node node);1375309221;Returns a SAX {@code ContentHandler} that transforms callback calls to DOM {@code Node}s._@param node the node to publish events to_@return the content handler;public static ContentHandler createContentHandler(Node node) {_		return new DomContentHandler(node)__	};returns,a,sax,code,content,handler,that,transforms,callback,calls,to,dom,code,node,s,param,node,the,node,to,publish,events,to,return,the,content,handler;public,static,content,handler,create,content,handler,node,node,return,new,dom,content,handler,node
DomUtils -> public static ContentHandler createContentHandler(Node node);1385412762;Returns a SAX {@code ContentHandler} that transforms callback calls to DOM {@code Node}s._@param node the node to publish events to_@return the content handler;public static ContentHandler createContentHandler(Node node) {_		return new DomContentHandler(node)__	};returns,a,sax,code,content,handler,that,transforms,callback,calls,to,dom,code,node,s,param,node,the,node,to,publish,events,to,return,the,content,handler;public,static,content,handler,create,content,handler,node,node,return,new,dom,content,handler,node
DomUtils -> public static ContentHandler createContentHandler(Node node);1388762328;Returns a SAX {@code ContentHandler} that transforms callback calls to DOM {@code Node}s._@param node the node to publish events to_@return the content handler;public static ContentHandler createContentHandler(Node node) {_		return new DomContentHandler(node)__	};returns,a,sax,code,content,handler,that,transforms,callback,calls,to,dom,code,node,s,param,node,the,node,to,publish,events,to,return,the,content,handler;public,static,content,handler,create,content,handler,node,node,return,new,dom,content,handler,node
DomUtils -> public static ContentHandler createContentHandler(Node node);1467730834;Returns a SAX {@code ContentHandler} that transforms callback calls to DOM {@code Node}s._@param node the node to publish events to_@return the content handler;public static ContentHandler createContentHandler(Node node) {_		return new DomContentHandler(node)__	};returns,a,sax,code,content,handler,that,transforms,callback,calls,to,dom,code,node,s,param,node,the,node,to,publish,events,to,return,the,content,handler;public,static,content,handler,create,content,handler,node,node,return,new,dom,content,handler,node
DomUtils -> public static ContentHandler createContentHandler(Node node);1495868221;Returns a SAX {@code ContentHandler} that transforms callback calls to DOM {@code Node}s._@param node the node to publish events to_@return the content handler;public static ContentHandler createContentHandler(Node node) {_		return new DomContentHandler(node)__	};returns,a,sax,code,content,handler,that,transforms,callback,calls,to,dom,code,node,s,param,node,the,node,to,publish,events,to,return,the,content,handler;public,static,content,handler,create,content,handler,node,node,return,new,dom,content,handler,node
DomUtils -> public static ContentHandler createContentHandler(Node node);1530174524;Returns a SAX {@code ContentHandler} that transforms callback calls to DOM {@code Node}s._@param node the node to publish events to_@return the content handler;public static ContentHandler createContentHandler(Node node) {_		return new DomContentHandler(node)__	};returns,a,sax,code,content,handler,that,transforms,callback,calls,to,dom,code,node,s,param,node,the,node,to,publish,events,to,return,the,content,handler;public,static,content,handler,create,content,handler,node,node,return,new,dom,content,handler,node
