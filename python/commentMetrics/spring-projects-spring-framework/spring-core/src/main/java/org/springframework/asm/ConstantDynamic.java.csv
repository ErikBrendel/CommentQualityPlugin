commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the name of this constant.  *  * @return the name of this constant.  */ ;/**  * Returns the name of this constant.  *  * @return the name of this constant.  */ public String getName() {     return name. }
true;public;0;3;/**  * Returns the type of this constant.  *  * @return the type of this constant, as a field descriptor.  */ ;/**  * Returns the type of this constant.  *  * @return the type of this constant, as a field descriptor.  */ public String getDescriptor() {     return descriptor. }
true;public;0;3;/**  * Returns the bootstrap method used to compute the value of this constant.  *  * @return the bootstrap method used to compute the value of this constant.  */ ;/**  * Returns the bootstrap method used to compute the value of this constant.  *  * @return the bootstrap method used to compute the value of this constant.  */ public Handle getBootstrapMethod() {     return bootstrapMethod. }
true;public;0;3;/**  * Returns the number of arguments passed to the bootstrap method, in order to compute the value  * of this constant.  *  * @return the number of arguments passed to the bootstrap method, in order to compute the value  *     of this constant.  */ ;/**  * Returns the number of arguments passed to the bootstrap method, in order to compute the value  * of this constant.  *  * @return the number of arguments passed to the bootstrap method, in order to compute the value  *     of this constant.  */ public int getBootstrapMethodArgumentCount() {     return bootstrapMethodArguments.length. }
true;public;1;3;/**  * Returns an argument passed to the bootstrap method, in order to compute the value of this  * constant.  *  * @param index an argument index, between 0 and {@link #getBootstrapMethodArgumentCount()}  *     (exclusive).  * @return the argument passed to the bootstrap method, with the given index.  */ ;/**  * Returns an argument passed to the bootstrap method, in order to compute the value of this  * constant.  *  * @param index an argument index, between 0 and {@link #getBootstrapMethodArgumentCount()}  *     (exclusive).  * @return the argument passed to the bootstrap method, with the given index.  */ public Object getBootstrapMethodArgument(final int index) {     return bootstrapMethodArguments[index]. }
true;;0;3;/**  * Returns the arguments to pass to the bootstrap method, in order to compute the value of this  * constant. WARNING: this array must not be modified, and must not be returned to the user.  *  * @return the arguments to pass to the bootstrap method, in order to compute the value of this  *     constant.  */ ;/**  * Returns the arguments to pass to the bootstrap method, in order to compute the value of this  * constant. WARNING: this array must not be modified, and must not be returned to the user.  *  * @return the arguments to pass to the bootstrap method, in order to compute the value of this  *     constant.  */ Object[] getBootstrapMethodArgumentsUnsafe() {     return bootstrapMethodArguments. }
true;public;0;4;/**  * Returns the size of this constant.  *  * @return the size of this constant, i.e., 2 for {@code long} and {@code double}, 1 otherwise.  */ ;/**  * Returns the size of this constant.  *  * @return the size of this constant, i.e., 2 for {@code long} and {@code double}, 1 otherwise.  */ public int getSize() {     char firstCharOfDescriptor = descriptor.charAt(0).     return (firstCharOfDescriptor == 'J' || firstCharOfDescriptor == 'D') ? 2 : 1. }
false;public;1;14;;@Override public boolean equals(final Object object) {     if (object == this) {         return true.     }     if (!(object instanceof ConstantDynamic)) {         return false.     }     ConstantDynamic constantDynamic = (ConstantDynamic) object.     return name.equals(constantDynamic.name) && descriptor.equals(constantDynamic.descriptor) && bootstrapMethod.equals(constantDynamic.bootstrapMethod) && Arrays.equals(bootstrapMethodArguments, constantDynamic.bootstrapMethodArguments). }
false;public;0;7;;@Override public int hashCode() {     return name.hashCode() ^ Integer.rotateLeft(descriptor.hashCode(), 8) ^ Integer.rotateLeft(bootstrapMethod.hashCode(), 16) ^ Integer.rotateLeft(Arrays.hashCode(bootstrapMethodArguments), 24). }
false;public;0;10;;@Override public String toString() {     return name + " : " + descriptor + ' ' + bootstrapMethod + ' ' + Arrays.toString(bootstrapMethodArguments). }
