commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the {@link DataBufferFactory} that created this buffer.  * @return the creating buffer factory  */ ;/**  * Return the {@link DataBufferFactory} that created this buffer.  * @return the creating buffer factory  */ DataBufferFactory factory().
true;;2;1;/**  * Return the index of the first byte in this buffer that matches  * the given predicate.  * @param predicate the predicate to match  * @param fromIndex the index to start the search from  * @return the index of the first byte that matches {@code predicate}.  * or {@code -1} if none match  */ ;/**  * Return the index of the first byte in this buffer that matches  * the given predicate.  * @param predicate the predicate to match  * @param fromIndex the index to start the search from  * @return the index of the first byte that matches {@code predicate}.  * or {@code -1} if none match  */ int indexOf(IntPredicate predicate, int fromIndex).
true;;2;1;/**  * Return the index of the last byte in this buffer that matches  * the given predicate.  * @param predicate the predicate to match  * @param fromIndex the index to start the search from  * @return the index of the last byte that matches {@code predicate}.  * or {@code -1} if none match  */ ;/**  * Return the index of the last byte in this buffer that matches  * the given predicate.  * @param predicate the predicate to match  * @param fromIndex the index to start the search from  * @return the index of the last byte that matches {@code predicate}.  * or {@code -1} if none match  */ int lastIndexOf(IntPredicate predicate, int fromIndex).
true;;0;1;/**  * Return the number of bytes that can be read from this data buffer.  * @return the readable byte count  */ ;/**  * Return the number of bytes that can be read from this data buffer.  * @return the readable byte count  */ int readableByteCount().
true;;0;1;/**  * Return the number of bytes that can be written to this data buffer.  * @return the writable byte count  * @since 5.0.1  */ ;/**  * Return the number of bytes that can be written to this data buffer.  * @return the writable byte count  * @since 5.0.1  */ int writableByteCount().
true;;0;1;/**  * Return the number of bytes that this buffer can contain.  * @return the capacity  * @since 5.0.1  */ ;/**  * Return the number of bytes that this buffer can contain.  * @return the capacity  * @since 5.0.1  */ int capacity().
true;;1;1;/**  * Set the number of bytes that this buffer can contain.  * <p>If the new capacity is lower than the current capacity, the contents  * of this buffer will be truncated. If the new capacity is higher than  * the current capacity, it will be expanded.  * @param capacity the new capacity  * @return this buffer  */ ;/**  * Set the number of bytes that this buffer can contain.  * <p>If the new capacity is lower than the current capacity, the contents  * of this buffer will be truncated. If the new capacity is higher than  * the current capacity, it will be expanded.  * @param capacity the new capacity  * @return this buffer  */ DataBuffer capacity(int capacity).
true;default;1;3;/**  * Ensure that the current buffer has enough {@link #writableByteCount()}  * to write the amount of data given as an argument. If not, the missing  * capacity will be added to the buffer.  * @param capacity the writable capacity to check for  * @return this buffer  * @since 5.1.4  */ ;/**  * Ensure that the current buffer has enough {@link #writableByteCount()}  * to write the amount of data given as an argument. If not, the missing  * capacity will be added to the buffer.  * @param capacity the writable capacity to check for  * @return this buffer  * @since 5.1.4  */ default DataBuffer ensureCapacity(int capacity) {     return this. }
true;;0;1;/**  * Return the position from which this buffer will read.  * @return the read position  * @since 5.0.1  */ ;/**  * Return the position from which this buffer will read.  * @return the read position  * @since 5.0.1  */ int readPosition().
true;;1;1;/**  * Set the position from which this buffer will read.  * @param readPosition the new read position  * @return this buffer  * @throws IndexOutOfBoundsException if {@code readPosition} is smaller than 0  * or greater than {@link #writePosition()}  * @since 5.0.1  */ ;/**  * Set the position from which this buffer will read.  * @param readPosition the new read position  * @return this buffer  * @throws IndexOutOfBoundsException if {@code readPosition} is smaller than 0  * or greater than {@link #writePosition()}  * @since 5.0.1  */ DataBuffer readPosition(int readPosition).
true;;0;1;/**  * Return the position to which this buffer will write.  * @return the write position  * @since 5.0.1  */ ;/**  * Return the position to which this buffer will write.  * @return the write position  * @since 5.0.1  */ int writePosition().
true;;1;1;/**  * Set the position to which this buffer will write.  * @param writePosition the new write position  * @return this buffer  * @throws IndexOutOfBoundsException if {@code writePosition} is smaller than  * {@link #readPosition()} or greater than {@link #capacity()}  * @since 5.0.1  */ ;/**  * Set the position to which this buffer will write.  * @param writePosition the new write position  * @return this buffer  * @throws IndexOutOfBoundsException if {@code writePosition} is smaller than  * {@link #readPosition()} or greater than {@link #capacity()}  * @since 5.0.1  */ DataBuffer writePosition(int writePosition).
true;;1;1;/**  * Read a single byte at the given index from this data buffer.  * @param index the index at which the byte will be read  * @return the byte at the given index  * @throws IndexOutOfBoundsException when {@code index} is out of bounds  * @since 5.0.4  */ ;/**  * Read a single byte at the given index from this data buffer.  * @param index the index at which the byte will be read  * @return the byte at the given index  * @throws IndexOutOfBoundsException when {@code index} is out of bounds  * @since 5.0.4  */ byte getByte(int index).
true;;0;1;/**  * Read a single byte from the current reading position from this data buffer.  * @return the byte at this buffer's current reading position  */ ;/**  * Read a single byte from the current reading position from this data buffer.  * @return the byte at this buffer's current reading position  */ byte read().
true;;1;1;/**  * Read this buffer's data into the specified destination, starting at the current  * reading position of this buffer.  * @param destination the array into which the bytes are to be written  * @return this buffer  */ ;/**  * Read this buffer's data into the specified destination, starting at the current  * reading position of this buffer.  * @param destination the array into which the bytes are to be written  * @return this buffer  */ DataBuffer read(byte[] destination).
true;;3;1;/**  * Read at most {@code length} bytes of this buffer into the specified destination,  * starting at the current reading position of this buffer.  * @param destination the array into which the bytes are to be written  * @param offset the index within {@code destination} of the first byte to be written  * @param length the maximum number of bytes to be written in {@code destination}  * @return this buffer  */ ;/**  * Read at most {@code length} bytes of this buffer into the specified destination,  * starting at the current reading position of this buffer.  * @param destination the array into which the bytes are to be written  * @param offset the index within {@code destination} of the first byte to be written  * @param length the maximum number of bytes to be written in {@code destination}  * @return this buffer  */ DataBuffer read(byte[] destination, int offset, int length).
true;;1;1;/**  * Write a single byte into this buffer at the current writing position.  * @param b the byte to be written  * @return this buffer  */ ;/**  * Write a single byte into this buffer at the current writing position.  * @param b the byte to be written  * @return this buffer  */ DataBuffer write(byte b).
true;;1;1;/**  * Write the given source into this buffer, starting at the current writing position  * of this buffer.  * @param source the bytes to be written into this buffer  * @return this buffer  */ ;/**  * Write the given source into this buffer, starting at the current writing position  * of this buffer.  * @param source the bytes to be written into this buffer  * @return this buffer  */ DataBuffer write(byte[] source).
true;;3;1;/**  * Write at most {@code length} bytes of the given source into this buffer, starting  * at the current writing position of this buffer.  * @param source the bytes to be written into this buffer  * @param offset the index within {@code source} to start writing from  * @param length the maximum number of bytes to be written from {@code source}  * @return this buffer  */ ;/**  * Write at most {@code length} bytes of the given source into this buffer, starting  * at the current writing position of this buffer.  * @param source the bytes to be written into this buffer  * @param offset the index within {@code source} to start writing from  * @param length the maximum number of bytes to be written from {@code source}  * @return this buffer  */ DataBuffer write(byte[] source, int offset, int length).
true;;1;1;/**  * Write one or more {@code DataBuffer}s to this buffer, starting at the current  * writing position. It is the responsibility of the caller to  * {@linkplain DataBufferUtils#release(DataBuffer) release} the given data buffers.  * @param buffers the byte buffers to write into this buffer  * @return this buffer  */ ;/**  * Write one or more {@code DataBuffer}s to this buffer, starting at the current  * writing position. It is the responsibility of the caller to  * {@linkplain DataBufferUtils#release(DataBuffer) release} the given data buffers.  * @param buffers the byte buffers to write into this buffer  * @return this buffer  */ DataBuffer write(DataBuffer... buffers).
true;;1;1;/**  * Write one or more {@link ByteBuffer} to this buffer, starting at the current  * writing position.  * @param buffers the byte buffers to write into this buffer  * @return this buffer  */ ;/**  * Write one or more {@link ByteBuffer} to this buffer, starting at the current  * writing position.  * @param buffers the byte buffers to write into this buffer  * @return this buffer  */ DataBuffer write(ByteBuffer... buffers).
true;default;2;31;/**  * Write the given {@code CharSequence} using the given {@code Charset},  * starting at the current writing position.  * @param charSequence the char sequence to write into this buffer  * @param charset the charset to encode the char sequence with  * @return this buffer  * @since 5.1.4  */ ;/**  * Write the given {@code CharSequence} using the given {@code Charset},  * starting at the current writing position.  * @param charSequence the char sequence to write into this buffer  * @param charset the charset to encode the char sequence with  * @return this buffer  * @since 5.1.4  */ default DataBuffer write(CharSequence charSequence, Charset charset) {     Assert.notNull(charSequence, "CharSequence must not be null").     Assert.notNull(charset, "Charset must not be null").     if (charSequence.length() != 0) {         CharsetEncoder charsetEncoder = charset.newEncoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE).         CharBuffer inBuffer = CharBuffer.wrap(charSequence).         int estimatedSize = (int) (inBuffer.remaining() * charsetEncoder.averageBytesPerChar()).         ByteBuffer outBuffer = ensureCapacity(estimatedSize).asByteBuffer(writePosition(), writableByteCount()).         while (true) {             CoderResult cr = (inBuffer.hasRemaining() ? charsetEncoder.encode(inBuffer, outBuffer, true) : CoderResult.UNDERFLOW).             if (cr.isUnderflow()) {                 cr = charsetEncoder.flush(outBuffer).             }             if (cr.isUnderflow()) {                 break.             }             if (cr.isOverflow()) {                 writePosition(outBuffer.position()).                 int maximumSize = (int) (inBuffer.remaining() * charsetEncoder.maxBytesPerChar()).                 ensureCapacity(maximumSize).                 outBuffer = asByteBuffer(writePosition(), writableByteCount()).             }         }         writePosition(outBuffer.position()).     }     return this. }
true;;2;1;/**  * Create a new {@code DataBuffer} whose contents is a shared subsequence of this  * data buffer's content.  Data between this data buffer and the returned buffer is  * shared. though changes in the returned buffer's position will not be reflected  * in the reading nor writing position of this data buffer.  * <p><strong>Note</strong> that this method will <strong>not</strong> call  * {@link DataBufferUtils#retain(DataBuffer)} on the resulting slice: the reference  * count will not be increased.  * @param index the index at which to start the slice  * @param length the length of the slice  * @return the specified slice of this data buffer  */ ;/**  * Create a new {@code DataBuffer} whose contents is a shared subsequence of this  * data buffer's content.  Data between this data buffer and the returned buffer is  * shared. though changes in the returned buffer's position will not be reflected  * in the reading nor writing position of this data buffer.  * <p><strong>Note</strong> that this method will <strong>not</strong> call  * {@link DataBufferUtils#retain(DataBuffer)} on the resulting slice: the reference  * count will not be increased.  * @param index the index at which to start the slice  * @param length the length of the slice  * @return the specified slice of this data buffer  */ DataBuffer slice(int index, int length).
true;;0;1;/**  * Expose this buffer's bytes as a {@link ByteBuffer}. Data between this  * {@code DataBuffer} and the returned {@code ByteBuffer} is shared. though  * changes in the returned buffer's {@linkplain ByteBuffer#position() position}  * will not be reflected in the reading nor writing position of this data buffer.  * @return this data buffer as a byte buffer  */ ;/**  * Expose this buffer's bytes as a {@link ByteBuffer}. Data between this  * {@code DataBuffer} and the returned {@code ByteBuffer} is shared. though  * changes in the returned buffer's {@linkplain ByteBuffer#position() position}  * will not be reflected in the reading nor writing position of this data buffer.  * @return this data buffer as a byte buffer  */ ByteBuffer asByteBuffer().
true;;2;1;/**  * Expose a subsequence of this buffer's bytes as a {@link ByteBuffer}. Data between  * this {@code DataBuffer} and the returned {@code ByteBuffer} is shared. though  * changes in the returned buffer's {@linkplain ByteBuffer#position() position}  * will not be reflected in the reading nor writing position of this data buffer.  * @param index the index at which to start the byte buffer  * @param length the length of the returned byte buffer  * @return this data buffer as a byte buffer  * @since 5.0.1  */ ;/**  * Expose a subsequence of this buffer's bytes as a {@link ByteBuffer}. Data between  * this {@code DataBuffer} and the returned {@code ByteBuffer} is shared. though  * changes in the returned buffer's {@linkplain ByteBuffer#position() position}  * will not be reflected in the reading nor writing position of this data buffer.  * @param index the index at which to start the byte buffer  * @param length the length of the returned byte buffer  * @return this data buffer as a byte buffer  * @since 5.0.1  */ ByteBuffer asByteBuffer(int index, int length).
true;;0;1;/**  * Expose this buffer's data as an {@link InputStream}. Both data and read position are  * shared between the returned stream and this data buffer. The underlying buffer will  * <strong>not</strong> be {@linkplain DataBufferUtils#release(DataBuffer) released}  * when the input stream is {@linkplain InputStream#close() closed}.  * @return this data buffer as an input stream  * @see #asInputStream(boolean)  */ ;/**  * Expose this buffer's data as an {@link InputStream}. Both data and read position are  * shared between the returned stream and this data buffer. The underlying buffer will  * <strong>not</strong> be {@linkplain DataBufferUtils#release(DataBuffer) released}  * when the input stream is {@linkplain InputStream#close() closed}.  * @return this data buffer as an input stream  * @see #asInputStream(boolean)  */ InputStream asInputStream().
true;;1;1;/**  * Expose this buffer's data as an {@link InputStream}. Both data and read position are  * shared between the returned stream and this data buffer.  * @param releaseOnClose whether the underlying buffer will be  * {@linkplain DataBufferUtils#release(DataBuffer) released} when the input stream is  * {@linkplain InputStream#close() closed}.  * @return this data buffer as an input stream  * @since 5.0.4  */ ;/**  * Expose this buffer's data as an {@link InputStream}. Both data and read position are  * shared between the returned stream and this data buffer.  * @param releaseOnClose whether the underlying buffer will be  * {@linkplain DataBufferUtils#release(DataBuffer) released} when the input stream is  * {@linkplain InputStream#close() closed}.  * @return this data buffer as an input stream  * @since 5.0.4  */ InputStream asInputStream(boolean releaseOnClose).
true;;0;1;/**  * Expose this buffer's data as an {@link OutputStream}. Both data and write position are  * shared between the returned stream and this data buffer.  * @return this data buffer as an output stream  */ ;/**  * Expose this buffer's data as an {@link OutputStream}. Both data and write position are  * shared between the returned stream and this data buffer.  * @return this data buffer as an output stream  */ OutputStream asOutputStream().
