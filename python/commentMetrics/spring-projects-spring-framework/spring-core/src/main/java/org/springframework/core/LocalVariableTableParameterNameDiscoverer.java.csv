commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;@Override @Nullable public String[] getParameterNames(Method method) {     Method originalMethod = BridgeMethodResolver.findBridgedMethod(method).     Class<?> declaringClass = originalMethod.getDeclaringClass().     Map<Member, String[]> map = this.parameterNamesCache.get(declaringClass).     if (map == null) {         map = inspectClass(declaringClass).         this.parameterNamesCache.put(declaringClass, map).     }     if (map != NO_DEBUG_INFO_MAP) {         return map.get(originalMethod).     }     return null. }
false;public;1;14;;@Override @Nullable public String[] getParameterNames(Constructor<?> ctor) {     Class<?> declaringClass = ctor.getDeclaringClass().     Map<Member, String[]> map = this.parameterNamesCache.get(declaringClass).     if (map == null) {         map = inspectClass(declaringClass).         this.parameterNamesCache.put(declaringClass, map).     }     if (map != NO_DEBUG_INFO_MAP) {         return map.get(ctor).     }     return null. }
true;private;1;40;/**  * Inspects the target class. Exceptions will be logged and a maker map returned  * to indicate the lack of debug information.  */ ;/**  * Inspects the target class. Exceptions will be logged and a maker map returned  * to indicate the lack of debug information.  */ private Map<Member, String[]> inspectClass(Class<?> clazz) {     InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz)).     if (is == null) {         // simply means this method of discovering parameter names won't work.         if (logger.isDebugEnabled()) {             logger.debug("Cannot find '.class' file for class [" + clazz + "] - unable to determine constructor/method parameter names").         }         return NO_DEBUG_INFO_MAP.     }     try {         ClassReader classReader = new ClassReader(is).         Map<Member, String[]> map = new ConcurrentHashMap<>(32).         classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0).         return map.     } catch (IOException ex) {         if (logger.isDebugEnabled()) {             logger.debug("Exception thrown while reading '.class' file for class [" + clazz + "] - unable to determine constructor/method parameter names", ex).         }     } catch (IllegalArgumentException ex) {         if (logger.isDebugEnabled()) {             logger.debug("ASM ClassReader failed to parse class file [" + clazz + "], probably due to a new Java class file version that isn't supported yet " + "- unable to determine constructor/method parameter names", ex).         }     } finally {         try {             is.close().         } catch (IOException ex) {         // ignore         }     }     return NO_DEBUG_INFO_MAP. }
false;public;5;9;;@Override @Nullable public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {     // exclude synthetic + bridged && static class initialization     if (!isSyntheticOrBridged(access) && !STATIC_CLASS_INIT.equals(name)) {         return new LocalVariableTableVisitor(this.clazz, this.memberMap, name, desc, isStatic(access)).     }     return null. }
false;private,static;1;3;;private static boolean isSyntheticOrBridged(int access) {     return (((access & Opcodes.ACC_SYNTHETIC) | (access & Opcodes.ACC_BRIDGE)) > 0). }
false;private,static;1;3;;private static boolean isStatic(int access) {     return ((access & Opcodes.ACC_STATIC) > 0). }
false;public;6;9;;@Override public void visitLocalVariable(String name, String description, String signature, Label start, Label end, int index) {     this.hasLvtInfo = true.     for (int i = 0. i < this.lvtSlotIndex.length. i++) {         if (this.lvtSlotIndex[i] == index) {             this.parameterNames[i] = name.         }     } }
false;public;0;10;;@Override public void visitEnd() {     if (this.hasLvtInfo || (this.isStatic && this.parameterNames.length == 0)) {         // visitLocalVariable will never be called for static no args methods         // which doesn't use any local variables.         // This means that hasLvtInfo could be false for that kind of methods         // even if the class has local variable info.         this.memberMap.put(resolveMember(), this.parameterNames).     } }
false;private;0;17;;private Member resolveMember() {     ClassLoader loader = this.clazz.getClassLoader().     Class<?>[] argTypes = new Class<?>[this.args.length].     for (int i = 0. i < this.args.length. i++) {         argTypes[i] = ClassUtils.resolveClassName(this.args[i].getClassName(), loader).     }     try {         if (CONSTRUCTOR.equals(this.name)) {             return this.clazz.getDeclaredConstructor(argTypes).         }         return this.clazz.getDeclaredMethod(this.name, argTypes).     } catch (NoSuchMethodException ex) {         throw new IllegalStateException("Method [" + this.name + "] was discovered in the .class file but cannot be resolved in the class object", ex).     } }
false;private,static;2;14;;private static int[] computeLvtSlotIndices(boolean isStatic, Type[] paramTypes) {     int[] lvtIndex = new int[paramTypes.length].     int nextIndex = (isStatic ? 0 : 1).     for (int i = 0. i < paramTypes.length. i++) {         lvtIndex[i] = nextIndex.         if (isWideType(paramTypes[i])) {             nextIndex += 2.         } else {             nextIndex++.         }     }     return lvtIndex. }
false;private,static;1;4;;private static boolean isWideType(Type aType) {     // float is not a wide type     return (aType == Type.LONG_TYPE || aType == Type.DOUBLE_TYPE). }
