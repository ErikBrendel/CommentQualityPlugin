# id;timestamp;commentText;codeText;commentWords;codeWords
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1328020251;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<Member, String[]>()__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), false)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,member,string,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,false,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1337254729;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<Member, String[]>()__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), false)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,member,string,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,false,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1344552803;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<Member, String[]>()__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,member,string,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1355352386;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<Member, String[]>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,member,string,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1356735495;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<Member, String[]>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,member,string,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1357119239;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<Member, String[]>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,member,string,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1362408075;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<Member, String[]>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,member,string,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1366717765;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<Member, String[]>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz +_						"] - unable to determine constructors/methods parameter names", ex)__			}_		}_		catch (IllegalArgumentException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("ASM ClassReader failed to parse class file [" + clazz +_						"], probably due to a new Java class file version that isn't supported yet " +_						"- unable to determine constructors/methods parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,member,string,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,ex,catch,illegal,argument,exception,ex,if,logger,is,debug,enabled,logger,debug,asm,class,reader,failed,to,parse,class,file,clazz,probably,due,to,a,new,java,class,file,version,that,isn,t,supported,yet,unable,to,determine,constructors,methods,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1368482696;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz_						+ "] - unable to determine constructors/methods parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<Member, String[]>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz +_						"] - unable to determine constructors/methods parameter names", ex)__			}_		}_		catch (IllegalArgumentException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("ASM ClassReader failed to parse class file [" + clazz +_						"], probably due to a new Java class file version that isn't supported yet " +_						"- unable to determine constructors/methods parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,member,string,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructors,methods,parameter,names,ex,catch,illegal,argument,exception,ex,if,logger,is,debug,enabled,logger,debug,asm,class,reader,failed,to,parse,class,file,clazz,probably,due,to,a,new,java,class,file,version,that,isn,t,supported,yet,unable,to,determine,constructors,methods,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1398638870;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<Member, String[]>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names", ex)__			}_		}_		catch (IllegalArgumentException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("ASM ClassReader failed to parse class file [" + clazz +_						"], probably due to a new Java class file version that isn't supported yet " +_						"- unable to determine constructor/method parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,member,string,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,ex,catch,illegal,argument,exception,ex,if,logger,is,debug,enabled,logger,debug,asm,class,reader,failed,to,parse,class,file,clazz,probably,due,to,a,new,java,class,file,version,that,isn,t,supported,yet,unable,to,determine,constructor,method,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1403611325;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<Member, String[]>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names", ex)__			}_		}_		catch (IllegalArgumentException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("ASM ClassReader failed to parse class file [" + clazz +_						"], probably due to a new Java class file version that isn't supported yet " +_						"- unable to determine constructor/method parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,member,string,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,ex,catch,illegal,argument,exception,ex,if,logger,is,debug,enabled,logger,debug,asm,class,reader,failed,to,parse,class,file,clazz,probably,due,to,a,new,java,class,file,version,that,isn,t,supported,yet,unable,to,determine,constructor,method,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1467730834;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names", ex)__			}_		}_		catch (IllegalArgumentException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("ASM ClassReader failed to parse class file [" + clazz +_						"], probably due to a new Java class file version that isn't supported yet " +_						"- unable to determine constructor/method parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,ex,catch,illegal,argument,exception,ex,if,logger,is,debug,enabled,logger,debug,asm,class,reader,failed,to,parse,class,file,clazz,probably,due,to,a,new,java,class,file,version,that,isn,t,supported,yet,unable,to,determine,constructor,method,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1484857261;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names", ex)__			}_		}_		catch (IllegalArgumentException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("ASM ClassReader failed to parse class file [" + clazz +_						"], probably due to a new Java class file version that isn't supported yet " +_						"- unable to determine constructor/method parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,ex,catch,illegal,argument,exception,ex,if,logger,is,debug,enabled,logger,debug,asm,class,reader,failed,to,parse,class,file,clazz,probably,due,to,a,new,java,class,file,version,that,isn,t,supported,yet,unable,to,determine,constructor,method,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1496837955;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names", ex)__			}_		}_		catch (IllegalArgumentException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("ASM ClassReader failed to parse class file [" + clazz +_						"], probably due to a new Java class file version that isn't supported yet " +_						"- unable to determine constructor/method parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,ex,catch,illegal,argument,exception,ex,if,logger,is,debug,enabled,logger,debug,asm,class,reader,failed,to,parse,class,file,clazz,probably,due,to,a,new,java,class,file,version,that,isn,t,supported,yet,unable,to,determine,constructor,method,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1502974979;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names", ex)__			}_		}_		catch (IllegalArgumentException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("ASM ClassReader failed to parse class file [" + clazz +_						"], probably due to a new Java class file version that isn't supported yet " +_						"- unable to determine constructor/method parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,ex,catch,illegal,argument,exception,ex,if,logger,is,debug,enabled,logger,debug,asm,class,reader,failed,to,parse,class,file,clazz,probably,due,to,a,new,java,class,file,version,that,isn,t,supported,yet,unable,to,determine,constructor,method,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
LocalVariableTableParameterNameDiscoverer -> private Map<Member, String[]> inspectClass(Class<?> clazz);1530174524;Inspects the target class. Exceptions will be logged and a maker map returned_to indicate the lack of debug information.;private Map<Member, String[]> inspectClass(Class<?> clazz) {_		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))__		if (is == null) {_			_			_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot find '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names")__			}_			return NO_DEBUG_INFO_MAP__		}_		try {_			ClassReader classReader = new ClassReader(is)__			Map<Member, String[]> map = new ConcurrentHashMap<>(32)__			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)__			return map__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Exception thrown while reading '.class' file for class [" + clazz +_						"] - unable to determine constructor/method parameter names", ex)__			}_		}_		catch (IllegalArgumentException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("ASM ClassReader failed to parse class file [" + clazz +_						"], probably due to a new Java class file version that isn't supported yet " +_						"- unable to determine constructor/method parameter names", ex)__			}_		}_		finally {_			try {_				is.close()__			}_			catch (IOException ex) {_				_			}_		}_		return NO_DEBUG_INFO_MAP__	};inspects,the,target,class,exceptions,will,be,logged,and,a,maker,map,returned,to,indicate,the,lack,of,debug,information;private,map,member,string,inspect,class,class,clazz,input,stream,is,clazz,get,resource,as,stream,class,utils,get,class,file,name,clazz,if,is,null,if,logger,is,debug,enabled,logger,debug,cannot,find,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,return,try,class,reader,class,reader,new,class,reader,is,map,member,string,map,new,concurrent,hash,map,32,class,reader,accept,new,parameter,name,discovering,visitor,clazz,map,0,return,map,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,exception,thrown,while,reading,class,file,for,class,clazz,unable,to,determine,constructor,method,parameter,names,ex,catch,illegal,argument,exception,ex,if,logger,is,debug,enabled,logger,debug,asm,class,reader,failed,to,parse,class,file,clazz,probably,due,to,a,new,java,class,file,version,that,isn,t,supported,yet,unable,to,determine,constructor,method,parameter,names,ex,finally,try,is,close,catch,ioexception,ex,return
