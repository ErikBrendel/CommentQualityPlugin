commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void shouldThrowOnNullComparator() throws Exception {     new ConvertingComparator<>(null, this.converter). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void shouldThrowOnNullConverter() throws Exception {     new ConvertingComparator<String, Integer>(this.comparator, null). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void shouldThrowOnNullConversionService() throws Exception {     new ConvertingComparator<String, Integer>(this.comparator, null, Integer.class). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void shouldThrowOnNullType() throws Exception {     new ConvertingComparator<String, Integer>(this.comparator, this.conversionService, null). }
false;public;0;6;;@Test public void shouldUseConverterOnCompare() throws Exception {     ConvertingComparator<String, Integer> convertingComparator = new ConvertingComparator<>(this.comparator, this.converter).     testConversion(convertingComparator). }
false;public;0;6;;@Test public void shouldUseConversionServiceOnCompare() throws Exception {     ConvertingComparator<String, Integer> convertingComparator = new ConvertingComparator<>(comparator, conversionService, Integer.class).     testConversion(convertingComparator). }
false;public;0;4;;@Test public void shouldGetForConverter() throws Exception {     testConversion(new ConvertingComparator<>(comparator, converter)). }
false;private;1;6;;private void testConversion(ConvertingComparator<String, Integer> convertingComparator) {     assertThat(convertingComparator.compare("0", "0"), is(0)).     assertThat(convertingComparator.compare("0", "1"), is(-1)).     assertThat(convertingComparator.compare("1", "0"), is(1)).     comparator.assertCalled(). }
false;public;0;7;;@Test public void shouldGetMapEntryKeys() throws Exception {     ArrayList<Entry<String, Integer>> list = createReverseOrderMapEntryList().     Comparator<Map.Entry<String, Integer>> comparator = ConvertingComparator.mapEntryKeys(new ComparableComparator<String>()).     Collections.sort(list, comparator).     assertThat(list.get(0).getKey(), is("a")). }
false;public;0;7;;@Test public void shouldGetMapEntryValues() throws Exception {     ArrayList<Entry<String, Integer>> list = createReverseOrderMapEntryList().     Comparator<Map.Entry<String, Integer>> comparator = ConvertingComparator.mapEntryValues(new ComparableComparator<Integer>()).     Collections.sort(list, comparator).     assertThat(list.get(0).getValue(), is(1)). }
false;private;0;9;;private ArrayList<Entry<String, Integer>> createReverseOrderMapEntryList() {     Map<String, Integer> map = new LinkedHashMap<>().     map.put("b", 2).     map.put("a", 1).     ArrayList<Entry<String, Integer>> list = new ArrayList<>(map.entrySet()).     assertThat(list.get(0).getKey(), is("b")).     return list. }
false;public;1;4;;@Override public Integer convert(String source) {     return Integer.valueOf(source). }
false;public;2;7;;@Override public int compare(Integer o1, Integer o2) {     assertThat(o1, instanceOf(Integer.class)).     assertThat(o2, instanceOf(Integer.class)).     this.called = true.     return super.compare(o1, o2). }
false;public;0;3;;public void assertCalled() {     assertThat(this.called, is(true)). }
