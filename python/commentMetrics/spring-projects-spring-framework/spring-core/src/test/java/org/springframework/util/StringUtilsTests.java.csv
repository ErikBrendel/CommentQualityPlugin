# id;timestamp;commentText;codeText;commentWords;codeWords
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparators() throws Exception;1328020251;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparators() throws Exception {_		final String variant = "proper northern"__		final String localeString = "en GB " + variant__		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,using,spaces,as,separators,throws,exception,final,string,variant,proper,northern,final,string,locale,string,en,gb,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparators() throws Exception;1337236962;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparators() throws Exception {_		final String variant = "proper northern"__		final String localeString = "en GB " + variant__		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,using,spaces,as,separators,throws,exception,final,string,variant,proper,northern,final,string,locale,string,en,gb,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparators() throws Exception;1400189212;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparators() throws Exception {_		final String variant = "proper northern"__		final String localeString = "en GB " + variant__		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,using,spaces,as,separators,throws,exception,final,string,variant,proper,northern,final,string,locale,string,en,gb,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception;1328020251;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception {_		final String variant = "proper northern"__		final String localeString = "en GB            " + variant_ _		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,using,spaces,as,separators,with,lots,of,leading,whitespace,throws,exception,final,string,variant,proper,northern,final,string,locale,string,en,gb,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception;1337236962;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception {_		final String variant = "proper northern"__		final String localeString = "en GB            " + variant_ _		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,using,spaces,as,separators,with,lots,of,leading,whitespace,throws,exception,final,string,variant,proper,northern,final,string,locale,string,en,gb,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception;1400189212;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariantUsingSpacesAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception {_		final String variant = "proper northern"__		final String localeString = "en GB            " + variant_ _		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,using,spaces,as,separators,with,lots,of,leading,whitespace,throws,exception,final,string,variant,proper,northern,final,string,locale,string,en,gb,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithSameLowercaseTokenForLanguageAndCountry();1337236962;See SPR-9420.;public void testParseLocaleWithSameLowercaseTokenForLanguageAndCountry() {_		assertEquals("tr_TR", StringUtils.parseLocaleString("tr_tr").toString())__		assertEquals("bg_BG_vnt", StringUtils.parseLocaleString("bg_bg_vnt").toString())__	};see,spr,9420;public,void,test,parse,locale,with,same,lowercase,token,for,language,and,country,assert,equals,string,utils,parse,locale,string,to,string,assert,equals,string,utils,parse,locale,string,to,string
StringUtilsTests -> public void testParseLocaleWithSameLowercaseTokenForLanguageAndCountry();1400189212;See SPR-9420.;public void testParseLocaleWithSameLowercaseTokenForLanguageAndCountry() {_		assertEquals("tr_TR", StringUtils.parseLocaleString("tr_tr").toString())__		assertEquals("bg_BG_vnt", StringUtils.parseLocaleString("bg_bg_vnt").toString())__	};see,spr,9420;public,void,test,parse,locale,with,same,lowercase,token,for,language,and,country,assert,equals,string,utils,parse,locale,string,to,string,assert,equals,string,utils,parse,locale,string,to,string
StringUtilsTests -> public void testParseLocaleWithMultiSpecialCharactersInVariant() throws Exception;1328020251;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-8637">See SPR-8637</a>.;public void testParseLocaleWithMultiSpecialCharactersInVariant() throws Exception {_		final String variant = "proper-northern"__		final String localeString = "en_GB_" + variant__		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,8637,see,spr,8637,a;public,void,test,parse,locale,with,multi,special,characters,in,variant,throws,exception,final,string,variant,proper,northern,final,string,locale,string,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiSpecialCharactersInVariant() throws Exception;1337236962;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-8637">See SPR-8637</a>.;public void testParseLocaleWithMultiSpecialCharactersInVariant() throws Exception {_		final String variant = "proper-northern"__		final String localeString = "en_GB_" + variant__		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,8637,see,spr,8637,a;public,void,test,parse,locale,with,multi,special,characters,in,variant,throws,exception,final,string,variant,proper,northern,final,string,locale,string,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiSpecialCharactersInVariant() throws Exception;1400189212;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-8637">See SPR-8637</a>.;public void testParseLocaleWithMultiSpecialCharactersInVariant() throws Exception {_		final String variant = "proper-northern"__		final String localeString = "en_GB_" + variant__		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,8637,see,spr,8637,a;public,void,test,parse,locale,with,multi,special,characters,in,variant,throws,exception,final,string,variant,proper,northern,final,string,locale,string,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariantUsingUnderscoresAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception;1328020251;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariantUsingUnderscoresAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception {_		final String variant = "proper_northern"__		final String localeString = "en_GB_____" + variant_ _		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,using,underscores,as,separators,with,lots,of,leading,whitespace,throws,exception,final,string,variant,final,string,locale,string,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariantUsingUnderscoresAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception;1337236962;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariantUsingUnderscoresAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception {_		final String variant = "proper_northern"__		final String localeString = "en_GB_____" + variant_ _		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,using,underscores,as,separators,with,lots,of,leading,whitespace,throws,exception,final,string,variant,final,string,locale,string,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariantUsingUnderscoresAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception;1400189212;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariantUsingUnderscoresAsSeparatorsWithLotsOfLeadingWhitespace() throws Exception {_		final String variant = "proper_northern"__		final String localeString = "en_GB_____" + variant_ _		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,using,underscores,as,separators,with,lots,of,leading,whitespace,throws,exception,final,string,variant,final,string,locale,string,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1400531359;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1431007368;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1472128018;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1472202842;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1472210853;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1473942665;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1474045154;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1491898314;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1496837955;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1508667152;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1508675477;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1508696986;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1519308837;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1520774010;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1530188116;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> @Test 	public void testCommaDelimitedListToStringArrayEmptyStrings();1531905026;We expect to see the empty Strings in the output.;@Test_	public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;test,public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> public void testCommaDelimitedListToStringArrayEmptyStrings();1328020251;We expect to see the empty Strings in the output.;public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> public void testCommaDelimitedListToStringArrayEmptyStrings();1337236962;We expect to see the empty Strings in the output.;public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> public void testCommaDelimitedListToStringArrayEmptyStrings();1400189212;We expect to see the empty Strings in the output.;public void testCommaDelimitedListToStringArrayEmptyStrings() {_		_		String[] sa = StringUtils.commaDelimitedListToStringArray("a,,b")__		assertEquals("a,,b produces array length 3", 3, sa.length)__		assertTrue("components are correct",_				sa[0].equals("a") && sa[1].equals("") && sa[2].equals("b"))___		sa = new String[] {"", "", "a", ""}__		doTestCommaDelimitedListToStringArrayLegalMatch(sa)__	};we,expect,to,see,the,empty,strings,in,the,output;public,void,test,comma,delimited,list,to,string,array,empty,strings,string,sa,string,utils,comma,delimited,list,to,string,array,a,b,assert,equals,a,b,produces,array,length,3,3,sa,length,assert,true,components,are,correct,sa,0,equals,a,sa,1,equals,sa,2,equals,b,sa,new,string,a,do,test,comma,delimited,list,to,string,array,legal,match,sa
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariant() throws Exception;1328020251;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariant() throws Exception {_		final String variant = "proper_northern"__		final String localeString = "en_GB_" + variant__		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,throws,exception,final,string,variant,final,string,locale,string,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariant() throws Exception;1337236962;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariant() throws Exception {_		final String variant = "proper_northern"__		final String localeString = "en_GB_" + variant__		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,throws,exception,final,string,variant,final,string,locale,string,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariant() throws Exception;1400189212;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariant() throws Exception {_		final String variant = "proper_northern"__		final String localeString = "en_GB_" + variant__		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,throws,exception,final,string,variant,final,string,locale,string,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithInvalidCharacters();1328020251;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-7779">See SPR-7779</a>.;public void testParseLocaleWithInvalidCharacters() {_		try {_			StringUtils.parseLocaleString("%0D%0AContent-length:30%0D%0A%0D%0A%3Cscript%3Ealert%28123%29%3C/script%3E")__			fail("Should have thrown IllegalArgumentException")__		}_		catch (IllegalArgumentException ex) {_			_		}_	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,7779,see,spr,7779,a;public,void,test,parse,locale,with,invalid,characters,try,string,utils,parse,locale,string,0d,0acontent,length,30,0d,0a,0d,0a,3cscript,3ealert,28123,29,3c,script,3e,fail,should,have,thrown,illegal,argument,exception,catch,illegal,argument,exception,ex
StringUtilsTests -> public void testParseLocaleWithInvalidCharacters();1337236962;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-7779">See SPR-7779</a>.;public void testParseLocaleWithInvalidCharacters() {_		try {_			StringUtils.parseLocaleString("%0D%0AContent-length:30%0D%0A%0D%0A%3Cscript%3Ealert%28123%29%3C/script%3E")__			fail("Should have thrown IllegalArgumentException")__		}_		catch (IllegalArgumentException ex) {_			_		}_	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,7779,see,spr,7779,a;public,void,test,parse,locale,with,invalid,characters,try,string,utils,parse,locale,string,0d,0acontent,length,30,0d,0a,0d,0a,3cscript,3ealert,28123,29,3c,script,3e,fail,should,have,thrown,illegal,argument,exception,catch,illegal,argument,exception,ex
StringUtilsTests -> public void testParseLocaleWithInvalidCharacters();1400189212;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-7779">See SPR-7779</a>.;public void testParseLocaleWithInvalidCharacters() {_		try {_			StringUtils.parseLocaleString("%0D%0AContent-length:30%0D%0A%0D%0A%3Cscript%3Ealert%28123%29%3C/script%3E")__			fail("Should have thrown IllegalArgumentException")__		}_		catch (IllegalArgumentException ex) {_			_		}_	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,7779,see,spr,7779,a;public,void,test,parse,locale,with,invalid,characters,try,string,utils,parse,locale,string,0d,0acontent,length,30,0d,0a,0d,0a,3cscript,3ealert,28123,29,3c,script,3e,fail,should,have,thrown,illegal,argument,exception,catch,illegal,argument,exception,ex
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators() throws Exception;1328020251;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators() throws Exception {_		final String variant = "proper northern"__		final String localeString = "en_GB_" + variant__		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,using,mixture,of,underscores,and,spaces,as,separators,throws,exception,final,string,variant,proper,northern,final,string,locale,string,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators() throws Exception;1337236962;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators() throws Exception {_		final String variant = "proper northern"__		final String localeString = "en_GB_" + variant__		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,using,mixture,of,underscores,and,spaces,as,separators,throws,exception,final,string,variant,proper,northern,final,string,locale,string,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
StringUtilsTests -> public void testParseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators() throws Exception;1400189212;<a href="http://opensource.atlassian.com/projects/spring/browse/SPR-3671">See SPR-3671</a>.;public void testParseLocaleWithMultiValuedVariantUsingMixtureOfUnderscoresAndSpacesAsSeparators() throws Exception {_		final String variant = "proper northern"__		final String localeString = "en_GB_" + variant__		Locale locale = StringUtils.parseLocaleString(localeString)__		assertEquals("Multi-valued variant portion of the Locale not extracted correctly.", variant, locale.getVariant())__	};a,href,http,opensource,atlassian,com,projects,spring,browse,spr,3671,see,spr,3671,a;public,void,test,parse,locale,with,multi,valued,variant,using,mixture,of,underscores,and,spaces,as,separators,throws,exception,final,string,variant,proper,northern,final,string,locale,string,variant,locale,locale,string,utils,parse,locale,string,locale,string,assert,equals,multi,valued,variant,portion,of,the,locale,not,extracted,correctly,variant,locale,get,variant
