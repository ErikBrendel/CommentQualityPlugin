commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() throws NoSuchMethodException {     method = getClass().getMethod("method", String.class, Long.TYPE).     stringParameter = new MethodParameter(method, 0).     longParameter = new MethodParameter(method, 1).     intReturnType = new MethodParameter(method, -1). }
false;public;0;20;;@Test public void testEquals() throws NoSuchMethodException {     assertEquals(stringParameter, stringParameter).     assertEquals(longParameter, longParameter).     assertEquals(intReturnType, intReturnType).     assertFalse(stringParameter.equals(longParameter)).     assertFalse(stringParameter.equals(intReturnType)).     assertFalse(longParameter.equals(stringParameter)).     assertFalse(longParameter.equals(intReturnType)).     assertFalse(intReturnType.equals(stringParameter)).     assertFalse(intReturnType.equals(longParameter)).     Method method = getClass().getMethod("method", String.class, Long.TYPE).     MethodParameter methodParameter = new MethodParameter(method, 0).     assertEquals(stringParameter, methodParameter).     assertEquals(methodParameter, stringParameter).     assertNotEquals(longParameter, methodParameter).     assertNotEquals(methodParameter, longParameter). }
false;public;0;11;;@Test public void testHashCode() throws NoSuchMethodException {     assertEquals(stringParameter.hashCode(), stringParameter.hashCode()).     assertEquals(longParameter.hashCode(), longParameter.hashCode()).     assertEquals(intReturnType.hashCode(), intReturnType.hashCode()).     Method method = getClass().getMethod("method", String.class, Long.TYPE).     MethodParameter methodParameter = new MethodParameter(method, 0).     assertEquals(stringParameter.hashCode(), methodParameter.hashCode()).     assertNotEquals(longParameter.hashCode(), methodParameter.hashCode()). }
false;public;0;12;;@Test @SuppressWarnings("deprecation") public void testFactoryMethods() {     assertEquals(stringParameter, MethodParameter.forMethodOrConstructor(method, 0)).     assertEquals(longParameter, MethodParameter.forMethodOrConstructor(method, 1)).     assertEquals(stringParameter, MethodParameter.forExecutable(method, 0)).     assertEquals(longParameter, MethodParameter.forExecutable(method, 1)).     assertEquals(stringParameter, MethodParameter.forParameter(method.getParameters()[0])).     assertEquals(longParameter, MethodParameter.forParameter(method.getParameters()[1])). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testIndexValidation() {     new MethodParameter(method, 2). }
false;public;0;7;;@Test public void annotatedConstructorParameterInStaticNestedClass() throws Exception {     Constructor<?> constructor = NestedClass.class.getDeclaredConstructor(String.class).     MethodParameter methodParameter = MethodParameter.forExecutable(constructor, 0).     assertEquals(String.class, methodParameter.getParameterType()).     assertNotNull("Failed to find @Param annotation", methodParameter.getParameterAnnotation(Param.class)). }
false;public;0;16;;// SPR-16652 @Test public void annotatedConstructorParameterInInnerClass() throws Exception {     Constructor<?> constructor = InnerClass.class.getConstructor(getClass(), String.class, Callable.class).     MethodParameter methodParameter = MethodParameter.forExecutable(constructor, 0).     assertEquals(getClass(), methodParameter.getParameterType()).     assertNull(methodParameter.getParameterAnnotation(Param.class)).     methodParameter = MethodParameter.forExecutable(constructor, 1).     assertEquals(String.class, methodParameter.getParameterType()).     assertNotNull("Failed to find @Param annotation", methodParameter.getParameterAnnotation(Param.class)).     methodParameter = MethodParameter.forExecutable(constructor, 2).     assertEquals(Callable.class, methodParameter.getParameterType()).     assertNull(methodParameter.getParameterAnnotation(Param.class)). }
false;public;0;17;;// SPR-16734 @Test public void genericConstructorParameterInInnerClass() throws Exception {     Constructor<?> constructor = InnerClass.class.getConstructor(getClass(), String.class, Callable.class).     MethodParameter methodParameter = MethodParameter.forExecutable(constructor, 0).     assertEquals(getClass(), methodParameter.getParameterType()).     assertEquals(getClass(), methodParameter.getGenericParameterType()).     methodParameter = MethodParameter.forExecutable(constructor, 1).     assertEquals(String.class, methodParameter.getParameterType()).     assertEquals(String.class, methodParameter.getGenericParameterType()).     methodParameter = MethodParameter.forExecutable(constructor, 2).     assertEquals(Callable.class, methodParameter.getParameterType()).     assertEquals(ResolvableType.forClassWithGenerics(Callable.class, Integer.class).getType(), methodParameter.getGenericParameterType()). }
false;public;2;3;;public int method(String p1, long p2) {     return 42. }
