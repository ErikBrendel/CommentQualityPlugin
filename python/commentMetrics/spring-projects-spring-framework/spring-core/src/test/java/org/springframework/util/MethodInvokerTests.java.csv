commented;modifiers;parameterAmount;loc;comment;code
false;public;0;45;;@Test public void plainMethodInvoker() throws Exception {     // sanity check: singleton, non-static should work     TestClass1 tc1 = new TestClass1().     MethodInvoker mi = new MethodInvoker().     mi.setTargetObject(tc1).     mi.setTargetMethod("method1").     mi.prepare().     Integer i = (Integer) mi.invoke().     assertEquals(1, i.intValue()).     // defensive check: singleton, non-static should work with null array     tc1 = new TestClass1().     mi = new MethodInvoker().     mi.setTargetObject(tc1).     mi.setTargetMethod("method1").     mi.setArguments((Object[]) null).     mi.prepare().     i = (Integer) mi.invoke().     assertEquals(1, i.intValue()).     // sanity check: check that argument count matching works     mi = new MethodInvoker().     mi.setTargetClass(TestClass1.class).     mi.setTargetMethod("supertypes").     mi.setArguments(new ArrayList<>(), new ArrayList<>(), "hello").     mi.prepare().     assertEquals("hello", mi.invoke()).     mi = new MethodInvoker().     mi.setTargetClass(TestClass1.class).     mi.setTargetMethod("supertypes2").     mi.setArguments(new ArrayList<>(), new ArrayList<>(), "hello", "bogus").     mi.prepare().     assertEquals("hello", mi.invoke()).     // Sanity check: check that argument conversion doesn't work with plain MethodInvoker     mi = new MethodInvoker().     mi.setTargetClass(TestClass1.class).     mi.setTargetMethod("supertypes2").     mi.setArguments(new ArrayList<>(), new ArrayList<>(), "hello", Boolean.TRUE).     exception.expect(NoSuchMethodException.class).     mi.prepare(). }
false;public;0;10;;@Test public void stringWithMethodInvoker() throws Exception {     MethodInvoker methodInvoker = new MethodInvoker().     methodInvoker.setTargetObject(new Greeter()).     methodInvoker.setTargetMethod("greet").     methodInvoker.setArguments("no match").     exception.expect(NoSuchMethodException.class).     methodInvoker.prepare(). }
false;public;0;10;;@Test public void purchaserWithMethodInvoker() throws Exception {     MethodInvoker methodInvoker = new MethodInvoker().     methodInvoker.setTargetObject(new Greeter()).     methodInvoker.setTargetMethod("greet").     methodInvoker.setArguments(new Purchaser()).     methodInvoker.prepare().     String greeting = (String) methodInvoker.invoke().     assertEquals("purchaser: hello", greeting). }
false;public;0;10;;@Test public void shopperWithMethodInvoker() throws Exception {     MethodInvoker methodInvoker = new MethodInvoker().     methodInvoker.setTargetObject(new Greeter()).     methodInvoker.setTargetMethod("greet").     methodInvoker.setArguments(new Shopper()).     methodInvoker.prepare().     String greeting = (String) methodInvoker.invoke().     assertEquals("purchaser: may I help you?", greeting). }
false;public;0;10;;@Test public void salesmanWithMethodInvoker() throws Exception {     MethodInvoker methodInvoker = new MethodInvoker().     methodInvoker.setTargetObject(new Greeter()).     methodInvoker.setTargetMethod("greet").     methodInvoker.setArguments(new Salesman()).     methodInvoker.prepare().     String greeting = (String) methodInvoker.invoke().     assertEquals("greetable: how are sales?", greeting). }
false;public;0;10;;@Test public void customerWithMethodInvoker() throws Exception {     MethodInvoker methodInvoker = new MethodInvoker().     methodInvoker.setTargetObject(new Greeter()).     methodInvoker.setTargetMethod("greet").     methodInvoker.setArguments(new Customer()).     methodInvoker.prepare().     String greeting = (String) methodInvoker.invoke().     assertEquals("customer: good day", greeting). }
false;public;0;10;;@Test public void regularWithMethodInvoker() throws Exception {     MethodInvoker methodInvoker = new MethodInvoker().     methodInvoker.setTargetObject(new Greeter()).     methodInvoker.setTargetMethod("greet").     methodInvoker.setArguments(new Regular("Kotter")).     methodInvoker.prepare().     String greeting = (String) methodInvoker.invoke().     assertEquals("regular: welcome back Kotter", greeting). }
false;public;0;10;;@Test public void vipWithMethodInvoker() throws Exception {     MethodInvoker methodInvoker = new MethodInvoker().     methodInvoker.setTargetObject(new Greeter()).     methodInvoker.setTargetMethod("greet").     methodInvoker.setArguments(new VIP("Fonzie")).     methodInvoker.prepare().     String greeting = (String) methodInvoker.invoke().     assertEquals("regular: whassup dude?", greeting). }
false;public;0;3;;public int method1() {     return ++_field1. }
false;public,static;0;3;;public static int staticMethod1() {     return ++TestClass1._staticField1. }
false;public,static;0;2;;public static void voidRetvalMethod() { }
false;public,static;1;2;;public static void nullArgument(Object arg) { }
false;public,static;1;2;;public static void intArgument(int arg) { }
false;public,static;1;2;;public static void intArguments(int[] arg) { }
false;public,static;2;3;;public static String supertypes(Collection<?> c, Integer i) {     return i.toString(). }
false;public,static;3;3;;public static String supertypes(Collection<?> c, List<?> l, String s) {     return s. }
false;public,static;3;3;;public static String supertypes2(Collection<?> c, List<?> l, Integer i) {     return i.toString(). }
false;public,static;4;3;;public static String supertypes2(Collection<?> c, List<?> l, String s, Integer i) {     return s. }
false;public,static;4;3;;public static String supertypes2(Collection<?> c, List<?> l, String s, String s2) {     return s. }
true;public;1;3;// should handle Salesman (only interface) ;// should handle Salesman (only interface) public String greet(Greetable greetable) {     return "greetable: " + greetable.getGreeting(). }
true;protected;1;3;// should handle Shopper (beats Greetable since it is a class) ;// should handle Shopper (beats Greetable since it is a class) protected String greet(Purchaser purchaser) {     return "purchaser: " + purchaser.getGreeting(). }
true;;1;3;// should handle Customer (exact match) ;// should handle Customer (exact match) String greet(Customer customer) {     return "customer: " + customer.getGreeting(). }
true;private;1;3;// should handle Regular (exact) and VIP (closest match) ;// should handle Regular (exact) and VIP (closest match) private String greet(Regular regular) {     return "regular: " + regular.getGreeting(). }
false;;0;1;;String getGreeting().
false;public;0;4;;@Override public String getGreeting() {     return "hello". }
false;public;0;4;;@Override public String getGreeting() {     return "may I help you?". }
false;public;0;4;;@Override public String getGreeting() {     return "how are sales?". }
false;public;0;4;;@Override public String getGreeting() {     return "good day". }
false;public;0;4;;@Override public String getGreeting() {     return "welcome back " + name. }
false;public;0;4;;@Override public String getGreeting() {     return "whassup dude?". }
