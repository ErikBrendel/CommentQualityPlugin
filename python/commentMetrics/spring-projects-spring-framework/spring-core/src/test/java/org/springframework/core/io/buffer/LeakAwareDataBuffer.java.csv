commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;12;;private static AssertionError createLeakError(DataBuffer delegate) {     String message = String.format("DataBuffer leak detected: {%s} has not been released.%n" + "Stack trace of buffer allocation statement follows:", delegate).     AssertionError result = new AssertionError(message).     // remove first four irrelevant stack trace elements     StackTraceElement[] oldTrace = result.getStackTrace().     StackTraceElement[] newTrace = new StackTraceElement[oldTrace.length - 4].     System.arraycopy(oldTrace, 4, newTrace, 0, oldTrace.length - 4).     result.setStackTrace(newTrace).     return result. }
false;;0;3;;AssertionError leakError() {     return this.leakError. }
false;public;0;4;;@Override public boolean isAllocated() {     return this.refCount > 0. }
false;public;0;5;;@Override public PooledDataBuffer retain() {     this.refCount++.     return this. }
false;public;0;5;;@Override public boolean release() {     this.refCount--.     return this.refCount == 0. }
false;public;0;4;;// delegation @Override public LeakAwareDataBufferFactory factory() {     return this.dataBufferFactory. }
false;public;2;4;;@Override public int indexOf(IntPredicate predicate, int fromIndex) {     return this.delegate.indexOf(predicate, fromIndex). }
false;public;2;4;;@Override public int lastIndexOf(IntPredicate predicate, int fromIndex) {     return this.delegate.lastIndexOf(predicate, fromIndex). }
false;public;0;4;;@Override public int readableByteCount() {     return this.delegate.readableByteCount(). }
false;public;0;4;;@Override public int writableByteCount() {     return this.delegate.writableByteCount(). }
false;public;0;4;;@Override public int readPosition() {     return this.delegate.readPosition(). }
false;public;1;4;;@Override public DataBuffer readPosition(int readPosition) {     return this.delegate.readPosition(readPosition). }
false;public;0;4;;@Override public int writePosition() {     return this.delegate.writePosition(). }
false;public;1;4;;@Override public DataBuffer writePosition(int writePosition) {     return this.delegate.writePosition(writePosition). }
false;public;0;4;;@Override public int capacity() {     return this.delegate.capacity(). }
false;public;1;4;;@Override public DataBuffer capacity(int newCapacity) {     return this.delegate.capacity(newCapacity). }
false;public;1;4;;@Override public DataBuffer ensureCapacity(int capacity) {     return this.delegate.ensureCapacity(capacity). }
false;public;1;4;;@Override public byte getByte(int index) {     return this.delegate.getByte(index). }
false;public;0;4;;@Override public byte read() {     return this.delegate.read(). }
false;public;1;4;;@Override public DataBuffer read(byte[] destination) {     return this.delegate.read(destination). }
false;public;3;4;;@Override public DataBuffer read(byte[] destination, int offset, int length) {     return this.delegate.read(destination, offset, length). }
false;public;1;4;;@Override public DataBuffer write(byte b) {     return this.delegate.write(b). }
false;public;1;4;;@Override public DataBuffer write(byte[] source) {     return this.delegate.write(source). }
false;public;3;4;;@Override public DataBuffer write(byte[] source, int offset, int length) {     return this.delegate.write(source, offset, length). }
false;public;1;4;;@Override public DataBuffer write(DataBuffer... buffers) {     return this.delegate.write(buffers). }
false;public;1;4;;@Override public DataBuffer write(ByteBuffer... buffers) {     return this.delegate.write(buffers). }
false;public;2;4;;@Override public DataBuffer write(CharSequence charSequence, Charset charset) {     return this.delegate.write(charSequence, charset). }
false;public;2;4;;@Override public DataBuffer slice(int index, int length) {     return this.delegate.slice(index, length). }
false;public;0;4;;@Override public ByteBuffer asByteBuffer() {     return this.delegate.asByteBuffer(). }
false;public;2;4;;@Override public ByteBuffer asByteBuffer(int index, int length) {     return this.delegate.asByteBuffer(index, length). }
false;public;0;4;;@Override public InputStream asInputStream() {     return this.delegate.asInputStream(). }
false;public;1;4;;@Override public InputStream asInputStream(boolean releaseOnClose) {     return this.delegate.asInputStream(releaseOnClose). }
false;public;0;4;;@Override public OutputStream asOutputStream() {     return this.delegate.asOutputStream(). }
false;public;1;10;;@Override public boolean equals(Object o) {     if (o instanceof LeakAwareDataBuffer) {         LeakAwareDataBuffer other = (LeakAwareDataBuffer) o.         return this.delegate.equals(other.delegate).     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return this.delegate.hashCode(). }
false;public;0;4;;@Override public String toString() {     return String.format("LeakAwareDataBuffer (%s)", this.delegate). }
