commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void namePatternMatches() throws Exception {     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClass", "org.springframework.core.type.AspectJTypeFilterTests.SomeClass").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClass", "*").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClass", "*..SomeClass").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClass", "org..SomeClass"). }
false;public;0;5;;@Test public void namePatternNoMatches() throws Exception {     assertNoMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClass", "org.springframework.core.type.AspectJTypeFilterTests.SomeClassX"). }
false;public;0;27;;@Test public void subclassPatternMatches() throws Exception {     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassExtendingSomeClass", "org.springframework.core.type.AspectJTypeFilterTests.SomeClass+").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassExtendingSomeClass", "*+").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassExtendingSomeClass", "java.lang.Object+").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassImplementingSomeInterface", "org.springframework.core.type.AspectJTypeFilterTests.SomeInterface+").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassImplementingSomeInterface", "*+").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassImplementingSomeInterface", "java.lang.Object+").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface", "org.springframework.core.type.AspectJTypeFilterTests.SomeInterface+").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface", "org.springframework.core.type.AspectJTypeFilterTests.SomeClassExtendingSomeClass+").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface", "org.springframework.core.type.AspectJTypeFilterTests.SomeClass+").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface", "*+").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface", "java.lang.Object+"). }
false;public;0;5;;@Test public void subclassPatternNoMatches() throws Exception {     assertNoMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassExtendingSomeClass", "java.lang.String+"). }
false;public;0;15;;@Test public void annotationPatternMatches() throws Exception {     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent", "@org.springframework.stereotype.Component *..*").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent", "@* *..*").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent", "@*..* *..*").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent", "@*..*Component *..*").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent", "@org.springframework.stereotype.Component *..*Component").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent", "@org.springframework.stereotype.Component *"). }
false;public;0;5;;@Test public void annotationPatternNoMatches() throws Exception {     assertNoMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent", "@org.springframework.stereotype.Repository *..*"). }
false;public;0;13;;@Test public void compositionPatternMatches() throws Exception {     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClass", "!*..SomeOtherClass").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface", "org.springframework.core.type.AspectJTypeFilterTests.SomeInterface+ " + "&& org.springframework.core.type.AspectJTypeFilterTests.SomeClass+ " + "&& org.springframework.core.type.AspectJTypeFilterTests.SomeClassExtendingSomeClass+").     assertMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface", "org.springframework.core.type.AspectJTypeFilterTests.SomeInterface+ " + "|| org.springframework.core.type.AspectJTypeFilterTests.SomeClass+ " + "|| org.springframework.core.type.AspectJTypeFilterTests.SomeClassExtendingSomeClass+"). }
false;public;0;5;;@Test public void compositionPatternNoMatches() throws Exception {     assertNoMatch("org.springframework.core.type.AspectJTypeFilterTests$SomeClass", "*..Bogus && org.springframework.core.type.AspectJTypeFilterTests.SomeClass"). }
false;private;2;8;;private void assertMatch(String type, String typePattern) throws Exception {     MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory().     MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(type).     AspectJTypeFilter filter = new AspectJTypeFilter(typePattern, getClass().getClassLoader()).     assertTrue(filter.match(metadataReader, metadataReaderFactory)).     ClassloadingAssertions.assertClassNotLoaded(type). }
false;private;2;8;;private void assertNoMatch(String type, String typePattern) throws Exception {     MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory().     MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(type).     AspectJTypeFilter filter = new AspectJTypeFilter(typePattern, getClass().getClassLoader()).     assertFalse(filter.match(metadataReader, metadataReaderFactory)).     ClassloadingAssertions.assertClassNotLoaded(type). }
