commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;9;;@Parameterized.Parameters(name = "{0}") public static Object[][] buffers() {     return new Object[][] { { new NettyDataBufferFactory(new UnpooledByteBufAllocator(true)) }, { new NettyDataBufferFactory(new UnpooledByteBufAllocator(false)) }, { new NettyDataBufferFactory(new PooledByteBufAllocator(true)) }, { new NettyDataBufferFactory(new PooledByteBufAllocator(false)) } }. }
false;private;1;3;;private PooledDataBuffer createDataBuffer(int capacity) {     return (PooledDataBuffer) dataBufferFactory.allocateBuffer(capacity). }
false;public;0;11;;@Test public void retainAndRelease() {     PooledDataBuffer buffer = createDataBuffer(1).     buffer.write((byte) 'a').     buffer.retain().     boolean result = buffer.release().     assertFalse(result).     result = buffer.release().     assertTrue(result). }
false;public;0;8;;@Test(expected = IllegalStateException.class) public void tooManyReleases() {     PooledDataBuffer buffer = createDataBuffer(1).     buffer.write((byte) 'a').     buffer.release().     buffer.release(). }
