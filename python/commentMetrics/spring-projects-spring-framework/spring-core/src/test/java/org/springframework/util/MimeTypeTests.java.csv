# id;timestamp;commentText;codeText;commentWords;codeWords
MimeTypeTests -> @Test 	public void parseMimeTypeSingleQuotedParameterValue();1435091425;SPR-8917;@Test_	public void parseMimeTypeSingleQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr='v>alue'")__		assertEquals("'v>alue'", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,single,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeSingleQuotedParameterValue();1460644739;SPR-8917;@Test_	public void parseMimeTypeSingleQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr='v>alue'")__		assertEquals("'v>alue'", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,single,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeSingleQuotedParameterValue();1460988078;SPR-8917;@Test_	public void parseMimeTypeSingleQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr='v>alue'")__		assertEquals("'v>alue'", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,single,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeSingleQuotedParameterValue();1468964586;SPR-8917;@Test_	public void parseMimeTypeSingleQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr='v>alue'")__		assertEquals("'v>alue'", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,single,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeSingleQuotedParameterValue();1472213779;SPR-8917;@Test_	public void parseMimeTypeSingleQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr='v>alue'")__		assertEquals("'v>alue'", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,single,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeSingleQuotedParameterValue();1481292266;SPR-8917;@Test_	public void parseMimeTypeSingleQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr='v>alue'")__		assertEquals("'v>alue'", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,single,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeSingleQuotedParameterValue();1500972359;SPR-8917;@Test_	public void parseMimeTypeSingleQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr='v>alue'")__		assertEquals("'v>alue'", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,single,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeSingleQuotedParameterValue();1517575447;SPR-8917;@Test_	public void parseMimeTypeSingleQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr='v>alue'")__		assertEquals("'v>alue'", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,single,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeQuotedParameterValue();1435091425;SPR-8917;@Test_	public void parseMimeTypeQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr=\"v>alue\"")__		assertEquals("\"v>alue\"", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeQuotedParameterValue();1460644739;SPR-8917;@Test_	public void parseMimeTypeQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr=\"v>alue\"")__		assertEquals("\"v>alue\"", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeQuotedParameterValue();1460988078;SPR-8917;@Test_	public void parseMimeTypeQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr=\"v>alue\"")__		assertEquals("\"v>alue\"", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeQuotedParameterValue();1468964586;SPR-8917;@Test_	public void parseMimeTypeQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr=\"v>alue\"")__		assertEquals("\"v>alue\"", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeQuotedParameterValue();1472213779;SPR-8917;@Test_	public void parseMimeTypeQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr=\"v>alue\"")__		assertEquals("\"v>alue\"", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeQuotedParameterValue();1481292266;SPR-8917;@Test_	public void parseMimeTypeQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr=\"v>alue\"")__		assertEquals("\"v>alue\"", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeQuotedParameterValue();1500972359;SPR-8917;@Test_	public void parseMimeTypeQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr=\"v>alue\"")__		assertEquals("\"v>alue\"", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void parseMimeTypeQuotedParameterValue();1517575447;SPR-8917;@Test_	public void parseMimeTypeQuotedParameterValue() {_		MimeType mimeType = MimeTypeUtils.parseMimeType("audio/*_attr=\"v>alue\"")__		assertEquals("\"v>alue\"", mimeType.getParameter("attr"))__	};spr,8917;test,public,void,parse,mime,type,quoted,parameter,value,mime,type,mime,type,mime,type,utils,parse,mime,type,audio,attr,v,alue,assert,equals,v,alue,mime,type,get,parameter,attr
MimeTypeTests -> @Test 	public void equalsIsCaseInsensitiveForCharsets();1435091425;SPR-13157_@since 4.2;@Test_	public void equalsIsCaseInsensitiveForCharsets() {_		MimeType m1 = new MimeType("text", "plain", singletonMap("charset", "UTF-8"))__		MimeType m2 = new MimeType("text", "plain", singletonMap("charset", "utf-8"))__		assertEquals(m1, m2)__		assertEquals(m2, m1)__	};spr,13157,since,4,2;test,public,void,equals,is,case,insensitive,for,charsets,mime,type,m1,new,mime,type,text,plain,singleton,map,charset,utf,8,mime,type,m2,new,mime,type,text,plain,singleton,map,charset,utf,8,assert,equals,m1,m2,assert,equals,m2,m1
MimeTypeTests -> @Test 	public void equalsIsCaseInsensitiveForCharsets();1460644739;SPR-13157_@since 4.2;@Test_	public void equalsIsCaseInsensitiveForCharsets() {_		MimeType m1 = new MimeType("text", "plain", singletonMap("charset", "UTF-8"))__		MimeType m2 = new MimeType("text", "plain", singletonMap("charset", "utf-8"))__		assertEquals(m1, m2)__		assertEquals(m2, m1)__	};spr,13157,since,4,2;test,public,void,equals,is,case,insensitive,for,charsets,mime,type,m1,new,mime,type,text,plain,singleton,map,charset,utf,8,mime,type,m2,new,mime,type,text,plain,singleton,map,charset,utf,8,assert,equals,m1,m2,assert,equals,m2,m1
MimeTypeTests -> @Test 	public void equalsIsCaseInsensitiveForCharsets();1460988078;SPR-13157_@since 4.2;@Test_	public void equalsIsCaseInsensitiveForCharsets() {_		MimeType m1 = new MimeType("text", "plain", singletonMap("charset", "UTF-8"))__		MimeType m2 = new MimeType("text", "plain", singletonMap("charset", "utf-8"))__		assertEquals(m1, m2)__		assertEquals(m2, m1)__	};spr,13157,since,4,2;test,public,void,equals,is,case,insensitive,for,charsets,mime,type,m1,new,mime,type,text,plain,singleton,map,charset,utf,8,mime,type,m2,new,mime,type,text,plain,singleton,map,charset,utf,8,assert,equals,m1,m2,assert,equals,m2,m1
MimeTypeTests -> @Test 	public void equalsIsCaseInsensitiveForCharsets();1468964586;SPR-13157_@since 4.2;@Test_	public void equalsIsCaseInsensitiveForCharsets() {_		MimeType m1 = new MimeType("text", "plain", singletonMap("charset", "UTF-8"))__		MimeType m2 = new MimeType("text", "plain", singletonMap("charset", "utf-8"))__		assertEquals(m1, m2)__		assertEquals(m2, m1)__	};spr,13157,since,4,2;test,public,void,equals,is,case,insensitive,for,charsets,mime,type,m1,new,mime,type,text,plain,singleton,map,charset,utf,8,mime,type,m2,new,mime,type,text,plain,singleton,map,charset,utf,8,assert,equals,m1,m2,assert,equals,m2,m1
MimeTypeTests -> @Test 	public void equalsIsCaseInsensitiveForCharsets();1472213779;SPR-13157_@since 4.2;@Test_	public void equalsIsCaseInsensitiveForCharsets() {_		MimeType m1 = new MimeType("text", "plain", singletonMap("charset", "UTF-8"))__		MimeType m2 = new MimeType("text", "plain", singletonMap("charset", "utf-8"))__		assertEquals(m1, m2)__		assertEquals(m2, m1)__	};spr,13157,since,4,2;test,public,void,equals,is,case,insensitive,for,charsets,mime,type,m1,new,mime,type,text,plain,singleton,map,charset,utf,8,mime,type,m2,new,mime,type,text,plain,singleton,map,charset,utf,8,assert,equals,m1,m2,assert,equals,m2,m1
MimeTypeTests -> @Test 	public void equalsIsCaseInsensitiveForCharsets();1481292266;SPR-13157_@since 4.2;@Test_	public void equalsIsCaseInsensitiveForCharsets() {_		MimeType m1 = new MimeType("text", "plain", singletonMap("charset", "UTF-8"))__		MimeType m2 = new MimeType("text", "plain", singletonMap("charset", "utf-8"))__		assertEquals(m1, m2)__		assertEquals(m2, m1)__	};spr,13157,since,4,2;test,public,void,equals,is,case,insensitive,for,charsets,mime,type,m1,new,mime,type,text,plain,singleton,map,charset,utf,8,mime,type,m2,new,mime,type,text,plain,singleton,map,charset,utf,8,assert,equals,m1,m2,assert,equals,m2,m1
MimeTypeTests -> @Test 	public void equalsIsCaseInsensitiveForCharsets();1500972359;SPR-13157_@since 4.2;@Test_	public void equalsIsCaseInsensitiveForCharsets() {_		MimeType m1 = new MimeType("text", "plain", singletonMap("charset", "UTF-8"))__		MimeType m2 = new MimeType("text", "plain", singletonMap("charset", "utf-8"))__		assertEquals(m1, m2)__		assertEquals(m2, m1)__	};spr,13157,since,4,2;test,public,void,equals,is,case,insensitive,for,charsets,mime,type,m1,new,mime,type,text,plain,singleton,map,charset,utf,8,mime,type,m2,new,mime,type,text,plain,singleton,map,charset,utf,8,assert,equals,m1,m2,assert,equals,m2,m1
MimeTypeTests -> @Test 	public void equalsIsCaseInsensitiveForCharsets();1517575447;SPR-13157_@since 4.2;@Test_	public void equalsIsCaseInsensitiveForCharsets() {_		MimeType m1 = new MimeType("text", "plain", singletonMap("charset", "UTF-8"))__		MimeType m2 = new MimeType("text", "plain", singletonMap("charset", "utf-8"))__		assertEquals(m1, m2)__		assertEquals(m2, m1)__		assertEquals(0, m1.compareTo(m2))__		assertEquals(0, m2.compareTo(m1))__	};spr,13157,since,4,2;test,public,void,equals,is,case,insensitive,for,charsets,mime,type,m1,new,mime,type,text,plain,singleton,map,charset,utf,8,mime,type,m2,new,mime,type,text,plain,singleton,map,charset,utf,8,assert,equals,m1,m2,assert,equals,m2,m1,assert,equals,0,m1,compare,to,m2,assert,equals,0,m2,compare,to,m1
MimeTypeTests -> @Test 	public void equalsIsCaseInsensitiveForCharsets();1518447318;SPR-13157_@since 4.2;@Test_	public void equalsIsCaseInsensitiveForCharsets() {_		MimeType m1 = new MimeType("text", "plain", singletonMap("charset", "UTF-8"))__		MimeType m2 = new MimeType("text", "plain", singletonMap("charset", "utf-8"))__		assertEquals(m1, m2)__		assertEquals(m2, m1)__		assertEquals(0, m1.compareTo(m2))__		assertEquals(0, m2.compareTo(m1))__	};spr,13157,since,4,2;test,public,void,equals,is,case,insensitive,for,charsets,mime,type,m1,new,mime,type,text,plain,singleton,map,charset,utf,8,mime,type,m2,new,mime,type,text,plain,singleton,map,charset,utf,8,assert,equals,m1,m2,assert,equals,m2,m1,assert,equals,0,m1,compare,to,m2,assert,equals,0,m2,compare,to,m1
MimeTypeTests -> @Test 	public void equalsIsCaseInsensitiveForCharsets();1522194969;SPR-13157_@since 4.2;@Test_	public void equalsIsCaseInsensitiveForCharsets() {_		MimeType m1 = new MimeType("text", "plain", singletonMap("charset", "UTF-8"))__		MimeType m2 = new MimeType("text", "plain", singletonMap("charset", "utf-8"))__		assertEquals(m1, m2)__		assertEquals(m2, m1)__		assertEquals(0, m1.compareTo(m2))__		assertEquals(0, m2.compareTo(m1))__	};spr,13157,since,4,2;test,public,void,equals,is,case,insensitive,for,charsets,mime,type,m1,new,mime,type,text,plain,singleton,map,charset,utf,8,mime,type,m2,new,mime,type,text,plain,singleton,map,charset,utf,8,assert,equals,m1,m2,assert,equals,m2,m1,assert,equals,0,m1,compare,to,m2,assert,equals,0,m2,compare,to,m1
MimeTypeTests -> @Test 	public void equalsIsCaseInsensitiveForCharsets();1542168307;SPR-13157_@since 4.2;@Test_	public void equalsIsCaseInsensitiveForCharsets() {_		MimeType m1 = new MimeType("text", "plain", singletonMap("charset", "UTF-8"))__		MimeType m2 = new MimeType("text", "plain", singletonMap("charset", "utf-8"))__		assertEquals(m1, m2)__		assertEquals(m2, m1)__		assertEquals(0, m1.compareTo(m2))__		assertEquals(0, m2.compareTo(m1))__	};spr,13157,since,4,2;test,public,void,equals,is,case,insensitive,for,charsets,mime,type,m1,new,mime,type,text,plain,singleton,map,charset,utf,8,mime,type,m2,new,mime,type,text,plain,singleton,map,charset,utf,8,assert,equals,m1,m2,assert,equals,m2,m1,assert,equals,0,m1,compare,to,m2,assert,equals,0,m2,compare,to,m1
