commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void withClasses() {     assertTrue(TypeUtils.isAssignable(Object.class, Object.class)).     assertTrue(TypeUtils.isAssignable(Object.class, String.class)).     assertFalse(TypeUtils.isAssignable(String.class, Object.class)).     assertTrue(TypeUtils.isAssignable(List.class, List.class)).     assertTrue(TypeUtils.isAssignable(List.class, LinkedList.class)).     assertFalse(TypeUtils.isAssignable(List.class, Collection.class)).     assertFalse(TypeUtils.isAssignable(List.class, HashSet.class)). }
false;public;0;22;;@Test public void withParameterizedTypes() throws Exception {     Type objectsType = getClass().getField("objects").getGenericType().     Type openObjectsType = getClass().getField("openObjects").getGenericType().     Type stringsType = getClass().getField("strings").getGenericType().     assertTrue(TypeUtils.isAssignable(Object.class, objectsType)).     assertTrue(TypeUtils.isAssignable(Object.class, openObjectsType)).     assertTrue(TypeUtils.isAssignable(Object.class, stringsType)).     assertTrue(TypeUtils.isAssignable(List.class, objectsType)).     assertTrue(TypeUtils.isAssignable(List.class, openObjectsType)).     assertTrue(TypeUtils.isAssignable(List.class, stringsType)).     assertTrue(TypeUtils.isAssignable(objectsType, List.class)).     assertTrue(TypeUtils.isAssignable(openObjectsType, List.class)).     assertTrue(TypeUtils.isAssignable(stringsType, List.class)).     assertTrue(TypeUtils.isAssignable(objectsType, objectsType)).     assertTrue(TypeUtils.isAssignable(openObjectsType, openObjectsType)).     assertTrue(TypeUtils.isAssignable(stringsType, stringsType)).     assertTrue(TypeUtils.isAssignable(openObjectsType, objectsType)).     assertTrue(TypeUtils.isAssignable(openObjectsType, stringsType)).     assertFalse(TypeUtils.isAssignable(stringsType, objectsType)).     assertFalse(TypeUtils.isAssignable(objectsType, stringsType)). }
false;public;0;18;;@Test public void withWildcardTypes() throws Exception {     ParameterizedType openObjectsType = (ParameterizedType) getClass().getField("openObjects").getGenericType().     ParameterizedType openNumbersType = (ParameterizedType) getClass().getField("openNumbers").getGenericType().     Type storableObjectListType = getClass().getField("storableObjectList").getGenericType().     Type objectType = getClass().getField("object").getGenericType().     Type numberType = getClass().getField("number").getGenericType().     Type stringType = getClass().getField("string").getGenericType().     // '?'     Type openWildcard = openObjectsType.getActualTypeArguments()[0].     // '? extends number'     Type openNumbersWildcard = openNumbersType.getActualTypeArguments()[0].     assertTrue(TypeUtils.isAssignable(openWildcard, objectType)).     assertTrue(TypeUtils.isAssignable(openNumbersWildcard, numberType)).     assertFalse(TypeUtils.isAssignable(openNumbersWildcard, stringType)).     assertFalse(TypeUtils.isAssignable(storableObjectListType, openObjectsType)). }
false;public;0;14;;@Test public void withGenericArrayTypes() throws Exception {     Type arrayType = getClass().getField("array").getGenericType().     Type openArrayType = getClass().getField("openArray").getGenericType().     assertTrue(TypeUtils.isAssignable(Object.class, arrayType)).     assertTrue(TypeUtils.isAssignable(Object.class, openArrayType)).     assertTrue(TypeUtils.isAssignable(List[].class, arrayType)).     assertTrue(TypeUtils.isAssignable(List[].class, openArrayType)).     assertTrue(TypeUtils.isAssignable(arrayType, List[].class)).     assertTrue(TypeUtils.isAssignable(openArrayType, List[].class)).     assertTrue(TypeUtils.isAssignable(arrayType, arrayType)).     assertTrue(TypeUtils.isAssignable(openArrayType, openArrayType)).     assertTrue(TypeUtils.isAssignable(openArrayType, arrayType)). }
