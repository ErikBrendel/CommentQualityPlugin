commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void instanceVariableIsAnAnnotationAwareOrderComparator() {     assertThat(AnnotationAwareOrderComparator.INSTANCE, is(instanceOf(AnnotationAwareOrderComparator.class))). }
false;public;0;9;;@Test public void sortInstances() {     List<Object> list = new ArrayList<>().     list.add(new B()).     list.add(new A()).     AnnotationAwareOrderComparator.sort(list).     assertTrue(list.get(0) instanceof A).     assertTrue(list.get(1) instanceof B). }
false;public;0;9;;@Test public void sortInstancesWithPriority() {     List<Object> list = new ArrayList<>().     list.add(new B2()).     list.add(new A2()).     AnnotationAwareOrderComparator.sort(list).     assertTrue(list.get(0) instanceof A2).     assertTrue(list.get(1) instanceof B2). }
false;public;0;9;;@Test public void sortInstancesWithOrderAndPriority() {     List<Object> list = new ArrayList<>().     list.add(new B()).     list.add(new A2()).     AnnotationAwareOrderComparator.sort(list).     assertTrue(list.get(0) instanceof A2).     assertTrue(list.get(1) instanceof B). }
false;public;0;9;;@Test public void sortInstancesWithSubclass() {     List<Object> list = new ArrayList<>().     list.add(new B()).     list.add(new C()).     AnnotationAwareOrderComparator.sort(list).     assertTrue(list.get(0) instanceof C).     assertTrue(list.get(1) instanceof B). }
false;public;0;9;;@Test public void sortClasses() {     List<Object> list = new ArrayList<>().     list.add(B.class).     list.add(A.class).     AnnotationAwareOrderComparator.sort(list).     assertEquals(A.class, list.get(0)).     assertEquals(B.class, list.get(1)). }
false;public;0;9;;@Test public void sortClassesWithSubclass() {     List<Object> list = new ArrayList<>().     list.add(B.class).     list.add(C.class).     AnnotationAwareOrderComparator.sort(list).     assertEquals(C.class, list.get(0)).     assertEquals(B.class, list.get(1)). }
false;public;0;13;;@Test public void sortWithNulls() {     List<Object> list = new ArrayList<>().     list.add(null).     list.add(B.class).     list.add(null).     list.add(A.class).     AnnotationAwareOrderComparator.sort(list).     assertEquals(A.class, list.get(0)).     assertEquals(B.class, list.get(1)).     assertNull(list.get(2)).     assertNull(list.get(3)). }
