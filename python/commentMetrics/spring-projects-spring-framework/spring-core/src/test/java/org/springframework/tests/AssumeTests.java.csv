commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void trackOriginalTestGroups() {     this.originalTestGroups = System.getProperty(TEST_GROUPS_SYSTEM_PROPERTY). }
false;public;0;9;;@After public void restoreOriginalTestGroups() {     if (this.originalTestGroups != null) {         setTestGroups(this.originalTestGroups).     } else {         setTestGroups("").     } }
false;public;0;6;;@Test public void assumeGroupWithNoActiveTestGroups() {     setTestGroups("").     Assume.group(JMXMP).     fail("assumption should have failed"). }
false;public;0;6;;@Test public void assumeGroupWithNoMatchingActiveTestGroup() {     setTestGroups(PERFORMANCE, CI).     Assume.group(JMXMP).     fail("assumption should have failed"). }
false;public;0;10;;@Test public void assumeGroupWithMatchingActiveTestGroup() {     setTestGroups(JMXMP).     try {         Assume.group(JMXMP).     } catch (AssumptionViolatedException ex) {         fail("assumption should NOT have failed").     } }
false;public;0;4;;@Test public void assumeGroupWithBogusActiveTestGroup() {     assertBogusActiveTestGroupBehavior("bogus"). }
false;public;0;4;;@Test public void assumeGroupWithAllMinusBogusActiveTestGroup() {     assertBogusActiveTestGroupBehavior("all-bogus"). }
false;private;1;22;;private void assertBogusActiveTestGroupBehavior(String testGroups) {     // Should result in something similar to the following:     //      // java.lang.IllegalStateException: Failed to parse 'testGroups' system property:     // Unable to find test group 'bogus' when parsing testGroups value: 'all-bogus'.     // Available groups include: [LONG_RUNNING,PERFORMANCE,JMXMP,CI]     setTestGroups(testGroups).     try {         Assume.group(JMXMP).         fail("assumption should have failed").     } catch (IllegalStateException ex) {         assertThat(ex.getMessage(), startsWith("Failed to parse '" + TEST_GROUPS_SYSTEM_PROPERTY + "' system property: ")).         assertThat(ex.getCause(), instanceOf(IllegalArgumentException.class)).         assertThat(ex.getCause().getMessage(), equalTo("Unable to find test group 'bogus' when parsing testGroups value: '" + testGroups + "'. Available groups include: [LONG_RUNNING,PERFORMANCE,JMXMP,CI]")).     } }
false;private;1;3;;private void setTestGroups(TestGroup... testGroups) {     setTestGroups(Arrays.stream(testGroups).map(TestGroup::name).collect(joining(", "))). }
false;private;1;3;;private void setTestGroups(String testGroups) {     System.setProperty(TEST_GROUPS_SYSTEM_PROPERTY, testGroups). }
