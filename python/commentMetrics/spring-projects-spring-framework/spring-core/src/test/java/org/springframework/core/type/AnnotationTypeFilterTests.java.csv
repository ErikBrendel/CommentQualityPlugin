commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testDirectAnnotationMatch() throws Exception {     MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory().     String classUnderTest = "org.springframework.core.type.AnnotationTypeFilterTests$SomeComponent".     MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest).     AnnotationTypeFilter filter = new AnnotationTypeFilter(InheritedAnnotation.class).     assertTrue(filter.match(metadataReader, metadataReaderFactory)).     ClassloadingAssertions.assertClassNotLoaded(classUnderTest). }
false;public;0;11;;@Test public void testInheritedAnnotationFromInterfaceDoesNotMatch() throws Exception {     MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory().     String classUnderTest = "org.springframework.core.type.AnnotationTypeFilterTests$SomeClassWithSomeComponentInterface".     MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest).     AnnotationTypeFilter filter = new AnnotationTypeFilter(InheritedAnnotation.class).     // Must fail as annotation on interfaces should not be considered a match     assertFalse(filter.match(metadataReader, metadataReaderFactory)).     ClassloadingAssertions.assertClassNotLoaded(classUnderTest). }
false;public;0;10;;@Test public void testInheritedAnnotationFromBaseClassDoesMatch() throws Exception {     MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory().     String classUnderTest = "org.springframework.core.type.AnnotationTypeFilterTests$SomeSubclassOfSomeComponent".     MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest).     AnnotationTypeFilter filter = new AnnotationTypeFilter(InheritedAnnotation.class).     assertTrue(filter.match(metadataReader, metadataReaderFactory)).     ClassloadingAssertions.assertClassNotLoaded(classUnderTest). }
false;public;0;11;;@Test public void testNonInheritedAnnotationDoesNotMatch() throws Exception {     MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory().     String classUnderTest = "org.springframework.core.type.AnnotationTypeFilterTests$SomeSubclassOfSomeClassMarkedWithNonInheritedAnnotation".     MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest).     AnnotationTypeFilter filter = new AnnotationTypeFilter(NonInheritedAnnotation.class).     // Must fail as annotation isn't inherited     assertFalse(filter.match(metadataReader, metadataReaderFactory)).     ClassloadingAssertions.assertClassNotLoaded(classUnderTest). }
false;public;0;10;;@Test public void testNonAnnotatedClassDoesntMatch() throws Exception {     MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory().     String classUnderTest = "org.springframework.core.type.AnnotationTypeFilterTests$SomeNonCandidateClass".     MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest).     AnnotationTypeFilter filter = new AnnotationTypeFilter(Component.class).     assertFalse(filter.match(metadataReader, metadataReaderFactory)).     ClassloadingAssertions.assertClassNotLoaded(classUnderTest). }
false;public;0;10;;@Test public void testMatchesInterfacesIfConfigured() throws Exception {     MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory().     String classUnderTest = "org.springframework.core.type.AnnotationTypeFilterTests$SomeClassWithSomeComponentInterface".     MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest).     AnnotationTypeFilter filter = new AnnotationTypeFilter(InheritedAnnotation.class, false, true).     assertTrue(filter.match(metadataReader, metadataReaderFactory)).     ClassloadingAssertions.assertClassNotLoaded(classUnderTest). }
