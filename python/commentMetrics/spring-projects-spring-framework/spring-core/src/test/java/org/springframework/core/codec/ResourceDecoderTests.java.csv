commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override @Test public void canDecode() {     assertTrue(this.decoder.canDecode(forClass(InputStreamResource.class), MimeTypeUtils.TEXT_PLAIN)).     assertTrue(this.decoder.canDecode(forClass(ByteArrayResource.class), MimeTypeUtils.TEXT_PLAIN)).     assertTrue(this.decoder.canDecode(forClass(Resource.class), MimeTypeUtils.TEXT_PLAIN)).     assertTrue(this.decoder.canDecode(forClass(InputStreamResource.class), MimeTypeUtils.APPLICATION_JSON)).     assertFalse(this.decoder.canDecode(forClass(Object.class), MimeTypeUtils.APPLICATION_JSON)). }
false;public;0;20;;@Override @Test public void decode() {     Flux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes)).     testDecodeAll(input, Resource.class, step -> step.consumeNextWith(resource -> {         try {             byte[] bytes = StreamUtils.copyToByteArray(resource.getInputStream()).             assertEquals("foobar", new String(bytes)).         } catch (IOException e) {             fail(e.getMessage()).         }     }).expectComplete().verify()). }
false;protected;4;14;;@Override protected void testDecodeError(Publisher<DataBuffer> input, ResolvableType outputType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {     input = Flux.concat(Flux.from(input).take(1), Flux.error(new InputException())).     Flux<Resource> result = this.decoder.decode(input, outputType, mimeType, hints).     StepVerifier.create(result).expectError(InputException.class).verify(). }
false;public;0;19;;@Override public void decodeToMono() throws Exception {     Flux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes)).     testDecodeToMonoAll(input, Resource.class, step -> step.consumeNextWith(resource -> {         try {             byte[] bytes = StreamUtils.copyToByteArray(resource.getInputStream()).             assertEquals("foobar", new String(bytes)).         } catch (IOException e) {             fail(e.getMessage()).         }     }).expectComplete().verify()). }
