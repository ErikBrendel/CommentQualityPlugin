commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before // on JDK 9 @SuppressWarnings("deprecation") public void setUp() throws Exception {     DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance().     documentBuilderFactory.setNamespaceAware(true).     documentBuilder = documentBuilderFactory.newDocumentBuilder().     result = documentBuilder.newDocument().     xmlReader = org.xml.sax.helpers.XMLReaderFactory.createXMLReader(). }
false;public;0;9;;@Test public void contentHandlerDocumentNamespacePrefixes() throws Exception {     xmlReader.setFeature("http://xml.org/sax/features/namespace-prefixes", true).     handler = new DomContentHandler(result).     expected = documentBuilder.parse(new InputSource(new StringReader(XML_1))).     xmlReader.setContentHandler(handler).     xmlReader.parse(new InputSource(new StringReader(XML_1))).     assertThat("Invalid result", result, isSimilarTo(expected)). }
false;public;0;8;;@Test public void contentHandlerDocumentNoNamespacePrefixes() throws Exception {     handler = new DomContentHandler(result).     expected = documentBuilder.parse(new InputSource(new StringReader(XML_1))).     xmlReader.setContentHandler(handler).     xmlReader.parse(new InputSource(new StringReader(XML_1))).     assertThat("Invalid result", result, isSimilarTo(expected)). }
false;public;0;10;;@Test public void contentHandlerElement() throws Exception {     Element rootElement = result.createElementNS("namespace", "root").     result.appendChild(rootElement).     handler = new DomContentHandler(rootElement).     expected = documentBuilder.parse(new InputSource(new StringReader(XML_2_EXPECTED))).     xmlReader.setContentHandler(handler).     xmlReader.parse(new InputSource(new StringReader(XML_2_SNIPPET))).     assertThat("Invalid result", result, isSimilarTo(expected)). }
