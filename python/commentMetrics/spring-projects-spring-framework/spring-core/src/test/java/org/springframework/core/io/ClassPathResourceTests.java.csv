commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void stringConstructorRaisesExceptionWithFullyQualifiedPath() {     assertExceptionContainsFullyQualifiedPath(new ClassPathResource(FQ_RESOURCE_PATH)). }
false;public;0;4;;@Test public void classLiteralConstructorRaisesExceptionWithFullyQualifiedPath() {     assertExceptionContainsFullyQualifiedPath(new ClassPathResource(NONEXISTENT_RESOURCE_NAME, getClass())). }
false;public;0;4;;@Test public void classLoaderConstructorRaisesExceptionWithFullyQualifiedPath() {     assertExceptionContainsFullyQualifiedPath(new ClassPathResource(FQ_RESOURCE_PATH, getClass().getClassLoader())). }
false;public;0;4;;@Test public void getDescriptionWithStringConstructor() {     assertDescriptionContainsExpectedPath(new ClassPathResource(FQ_RESOURCE_PATH), FQ_RESOURCE_PATH). }
false;public;0;5;;@Test public void getDescriptionWithStringConstructorAndLeadingSlash() {     assertDescriptionContainsExpectedPath(new ClassPathResource(FQ_RESOURCE_PATH_WITH_LEADING_SLASH), FQ_RESOURCE_PATH). }
false;public;0;5;;@Test public void getDescriptionWithClassLiteralConstructor() {     assertDescriptionContainsExpectedPath(new ClassPathResource(NONEXISTENT_RESOURCE_NAME, getClass()), FQ_RESOURCE_PATH). }
false;public;0;5;;@Test public void getDescriptionWithClassLiteralConstructorAndLeadingSlash() {     assertDescriptionContainsExpectedPath(new ClassPathResource(FQ_RESOURCE_PATH_WITH_LEADING_SLASH, getClass()), FQ_RESOURCE_PATH). }
false;public;0;5;;@Test public void getDescriptionWithClassLoaderConstructor() {     assertDescriptionContainsExpectedPath(new ClassPathResource(FQ_RESOURCE_PATH, getClass().getClassLoader()), FQ_RESOURCE_PATH). }
false;public;0;5;;@Test public void getDescriptionWithClassLoaderConstructorAndLeadingSlash() {     assertDescriptionContainsExpectedPath(new ClassPathResource(FQ_RESOURCE_PATH_WITH_LEADING_SLASH, getClass().getClassLoader()), FQ_RESOURCE_PATH). }
false;public;0;5;;@Test public void dropLeadingSlashForClassLoaderAccess() {     assertEquals("test.html", new ClassPathResource("/test.html").getPath()).     assertEquals("test.html", ((ClassPathResource) new ClassPathResource("").createRelative("/test.html")).getPath()). }
false;public;0;5;;@Test public void preserveLeadingSlashForClassRelativeAccess() {     assertEquals("/test.html", new ClassPathResource("/test.html", getClass()).getPath()).     assertEquals("/test.html", ((ClassPathResource) new ClassPathResource("", getClass()).createRelative("/test.html")).getPath()). }
false;public;0;10;;@Test public void directoryNotReadable() {     Resource fileDir = new ClassPathResource("org/springframework/core").     assertTrue(fileDir.exists()).     assertFalse(fileDir.isReadable()).     Resource jarDir = new ClassPathResource("reactor/core").     assertTrue(jarDir.exists()).     assertFalse(jarDir.isReadable()). }
false;private;2;8;;private void assertDescriptionContainsExpectedPath(ClassPathResource resource, String expectedPath) {     Matcher matcher = DESCRIPTION_PATTERN.matcher(resource.getDescription()).     assertTrue(matcher.matches()).     assertEquals(1, matcher.groupCount()).     String match = matcher.group(1).     assertEquals(expectedPath, match). }
false;private;1;10;;private void assertExceptionContainsFullyQualifiedPath(ClassPathResource resource) {     try {         resource.getInputStream().         fail("FileNotFoundException expected for resource: " + resource).     } catch (IOException ex) {         assertThat(ex, instanceOf(FileNotFoundException.class)).         assertThat(ex.getMessage(), containsString(FQ_RESOURCE_PATH)).     } }
