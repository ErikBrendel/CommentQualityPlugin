commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void defaultInstance() {     ExponentialBackOff backOff = new ExponentialBackOff().     BackOffExecution execution = backOff.start().     assertEquals(2000L, execution.nextBackOff()).     assertEquals(3000L, execution.nextBackOff()).     assertEquals(4500L, execution.nextBackOff()). }
false;public;0;9;;@Test public void simpleIncrease() {     ExponentialBackOff backOff = new ExponentialBackOff(100L, 2.0).     BackOffExecution execution = backOff.start().     assertEquals(100L, execution.nextBackOff()).     assertEquals(200L, execution.nextBackOff()).     assertEquals(400L, execution.nextBackOff()).     assertEquals(800L, execution.nextBackOff()). }
false;public;0;11;;@Test public void fixedIncrease() {     ExponentialBackOff backOff = new ExponentialBackOff(100L, 1.0).     backOff.setMaxElapsedTime(300L).     BackOffExecution execution = backOff.start().     assertEquals(100L, execution.nextBackOff()).     assertEquals(100L, execution.nextBackOff()).     assertEquals(100L, execution.nextBackOff()).     assertEquals(BackOffExecution.STOP, execution.nextBackOff()). }
false;public;0;11;;@Test public void maxIntervalReached() {     ExponentialBackOff backOff = new ExponentialBackOff(2000L, 2.0).     backOff.setMaxInterval(4000L).     BackOffExecution execution = backOff.start().     assertEquals(2000L, execution.nextBackOff()).     assertEquals(4000L, execution.nextBackOff()).     // max reached     assertEquals(4000L, execution.nextBackOff()).     assertEquals(4000L, execution.nextBackOff()). }
false;public;0;10;;@Test public void maxAttemptsReached() {     ExponentialBackOff backOff = new ExponentialBackOff(2000L, 2.0).     backOff.setMaxElapsedTime(4000L).     BackOffExecution execution = backOff.start().     assertEquals(2000L, execution.nextBackOff()).     assertEquals(4000L, execution.nextBackOff()).     // > 4 sec wait in total     assertEquals(BackOffExecution.STOP, execution.nextBackOff()). }
false;public;0;17;;@Test public void startReturnDifferentInstances() {     ExponentialBackOff backOff = new ExponentialBackOff().     backOff.setInitialInterval(2000L).     backOff.setMultiplier(2.0).     backOff.setMaxElapsedTime(4000L).     BackOffExecution execution = backOff.start().     BackOffExecution execution2 = backOff.start().     assertEquals(2000L, execution.nextBackOff()).     assertEquals(2000L, execution2.nextBackOff()).     assertEquals(4000L, execution.nextBackOff()).     assertEquals(4000L, execution2.nextBackOff()).     assertEquals(BackOffExecution.STOP, execution.nextBackOff()).     assertEquals(BackOffExecution.STOP, execution2.nextBackOff()). }
false;public;0;7;;@Test public void invalidInterval() {     ExponentialBackOff backOff = new ExponentialBackOff().     thrown.expect(IllegalArgumentException.class).     backOff.setMultiplier(0.9). }
false;public;0;9;;@Test public void maxIntervalReachedImmediately() {     ExponentialBackOff backOff = new ExponentialBackOff(1000L, 2.0).     backOff.setMaxInterval(50L).     BackOffExecution execution = backOff.start().     assertEquals(50L, execution.nextBackOff()).     assertEquals(50L, execution.nextBackOff()). }
false;public;0;10;;@Test public void toStringContent() {     ExponentialBackOff backOff = new ExponentialBackOff(2000L, 2.0).     BackOffExecution execution = backOff.start().     assertEquals("ExponentialBackOff{currentInterval=n/a, multiplier=2.0}", execution.toString()).     execution.nextBackOff().     assertEquals("ExponentialBackOff{currentInterval=2000ms, multiplier=2.0}", execution.toString()).     execution.nextBackOff().     assertEquals("ExponentialBackOff{currentInterval=4000ms, multiplier=2.0}", execution.toString()). }
