commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void targetBeforeSameDepth() throws Exception {     Class<? extends Throwable> foundClass = findClosestMatch(TargetException.class, SameDepthException.class).     assertEquals(TargetException.class, foundClass). }
false;public;0;5;;@Test public void sameDepthBeforeTarget() throws Exception {     Class<? extends Throwable> foundClass = findClosestMatch(SameDepthException.class, TargetException.class).     assertEquals(TargetException.class, foundClass). }
false;public;0;5;;@Test public void lowestDepthBeforeTarget() throws Exception {     Class<? extends Throwable> foundClass = findClosestMatch(LowestDepthException.class, TargetException.class).     assertEquals(TargetException.class, foundClass). }
false;public;0;5;;@Test public void targetBeforeLowestDepth() throws Exception {     Class<? extends Throwable> foundClass = findClosestMatch(TargetException.class, LowestDepthException.class).     assertEquals(TargetException.class, foundClass). }
false;public;0;5;;@Test public void noDepthBeforeTarget() throws Exception {     Class<? extends Throwable> foundClass = findClosestMatch(NoDepthException.class, TargetException.class).     assertEquals(TargetException.class, foundClass). }
false;public;0;5;;@Test public void noDepthBeforeHighestDepth() throws Exception {     Class<? extends Throwable> foundClass = findClosestMatch(NoDepthException.class, HighestDepthException.class).     assertEquals(HighestDepthException.class, foundClass). }
false;public;0;5;;@Test public void highestDepthBeforeNoDepth() throws Exception {     Class<? extends Throwable> foundClass = findClosestMatch(HighestDepthException.class, NoDepthException.class).     assertEquals(HighestDepthException.class, foundClass). }
false;public;0;5;;@Test public void highestDepthBeforeLowestDepth() throws Exception {     Class<? extends Throwable> foundClass = findClosestMatch(HighestDepthException.class, LowestDepthException.class).     assertEquals(LowestDepthException.class, foundClass). }
false;public;0;5;;@Test public void lowestDepthBeforeHighestDepth() throws Exception {     Class<? extends Throwable> foundClass = findClosestMatch(LowestDepthException.class, HighestDepthException.class).     assertEquals(LowestDepthException.class, foundClass). }
false;private;1;4;;private Class<? extends Throwable> findClosestMatch(Class<? extends Throwable>... classes) {     return ExceptionDepthComparator.findClosestMatch(Arrays.asList(classes), new TargetException()). }
