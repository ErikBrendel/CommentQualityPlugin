commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void ofBytesToBytes() {     assertEquals(1024, DataSize.ofBytes(1024).toBytes()). }
false;public;0;4;;@Test public void ofBytesToKilobytes() {     assertEquals(1, DataSize.ofBytes(1024).toKilobytes()). }
false;public;0;4;;@Test public void ofKilobytesToKilobytes() {     assertEquals(1024, DataSize.ofKilobytes(1024).toKilobytes()). }
false;public;0;4;;@Test public void ofKilobytesToMegabytes() {     assertEquals(1, DataSize.ofKilobytes(1024).toMegabytes()). }
false;public;0;4;;@Test public void ofMegabytesToMegabytes() {     assertEquals(1024, DataSize.ofMegabytes(1024).toMegabytes()). }
false;public;0;4;;@Test public void ofMegabytesToGigabytes() {     assertEquals(2, DataSize.ofMegabytes(2048).toGigabytes()). }
false;public;0;4;;@Test public void ofGigabytesToGigabytes() {     assertEquals(4096, DataSize.ofGigabytes(4096).toGigabytes()). }
false;public;0;4;;@Test public void ofGigabytesToTerabytes() {     assertEquals(4, DataSize.ofGigabytes(4096).toTerabytes()). }
false;public;0;4;;@Test public void ofTerabytesToGigabytes() {     assertEquals(1024, DataSize.ofTerabytes(1).toGigabytes()). }
false;public;0;4;;@Test public void ofWithBytesUnit() {     assertEquals(DataSize.ofBytes(10), DataSize.of(10, DataUnit.BYTES)). }
false;public;0;4;;@Test public void ofWithKilobytesUnit() {     assertEquals(DataSize.ofKilobytes(20), DataSize.of(20, DataUnit.KILOBYTES)). }
false;public;0;4;;@Test public void ofWithMegabytesUnit() {     assertEquals(DataSize.ofMegabytes(30), DataSize.of(30, DataUnit.MEGABYTES)). }
false;public;0;4;;@Test public void ofWithGigabytesUnit() {     assertEquals(DataSize.ofGigabytes(40), DataSize.of(40, DataUnit.GIGABYTES)). }
false;public;0;4;;@Test public void ofWithTerabytesUnit() {     assertEquals(DataSize.ofTerabytes(50), DataSize.of(50, DataUnit.TERABYTES)). }
false;public;0;4;;@Test public void parseWithDefaultUnitUsesBytes() {     assertEquals(DataSize.ofKilobytes(1), DataSize.parse("1024")). }
false;public;0;4;;@Test public void parseNegativeNumberWithDefaultUnitUsesBytes() {     assertEquals(DataSize.ofBytes(-1), DataSize.parse("-1")). }
false;public;0;4;;@Test public void parseWithNullDefaultUnitUsesBytes() {     assertEquals(DataSize.ofKilobytes(1), DataSize.parse("1024", null)). }
false;public;0;4;;@Test public void parseNegativeNumberWithNullDefaultUnitUsesBytes() {     assertEquals(DataSize.ofKilobytes(-1), DataSize.parse("-1024", null)). }
false;public;0;4;;@Test public void parseWithCustomDefaultUnit() {     assertEquals(DataSize.ofKilobytes(1), DataSize.parse("1", DataUnit.KILOBYTES)). }
false;public;0;4;;@Test public void parseNegativeNumberWithCustomDefaultUnit() {     assertEquals(DataSize.ofKilobytes(-1), DataSize.parse("-1", DataUnit.KILOBYTES)). }
false;public;0;4;;@Test public void parseWithBytes() {     assertEquals(DataSize.ofKilobytes(1), DataSize.parse("1024B")). }
false;public;0;4;;@Test public void parseWithNegativeBytes() {     assertEquals(DataSize.ofKilobytes(-1), DataSize.parse("-1024B")). }
false;public;0;4;;@Test public void parseWithPositiveBytes() {     assertEquals(DataSize.ofKilobytes(1), DataSize.parse("+1024B")). }
false;public;0;4;;@Test public void parseWithKilobytes() {     assertEquals(DataSize.ofBytes(1024), DataSize.parse("1KB")). }
false;public;0;4;;@Test public void parseWithNegativeKilobytes() {     assertEquals(DataSize.ofBytes(-1024), DataSize.parse("-1KB")). }
false;public;0;4;;@Test public void parseWithMegabytes() {     assertEquals(DataSize.ofMegabytes(4), DataSize.parse("4MB")). }
false;public;0;4;;@Test public void parseWithNegativeMegabytes() {     assertEquals(DataSize.ofMegabytes(-4), DataSize.parse("-4MB")). }
false;public;0;4;;@Test public void parseWithGigabytes() {     assertEquals(DataSize.ofMegabytes(1024), DataSize.parse("1GB")). }
false;public;0;4;;@Test public void parseWithNegativeGigabytes() {     assertEquals(DataSize.ofMegabytes(-1024), DataSize.parse("-1GB")). }
false;public;0;4;;@Test public void parseWithTerabytes() {     assertEquals(DataSize.ofTerabytes(1), DataSize.parse("1TB")). }
false;public;0;4;;@Test public void parseWithNegativeTerabytes() {     assertEquals(DataSize.ofTerabytes(-1), DataSize.parse("-1TB")). }
false;public;0;4;;@Test public void isNegativeWithPositive() {     assertFalse(DataSize.ofBytes(50).isNegative()). }
false;public;0;4;;@Test public void isNegativeWithZero() {     assertFalse(DataSize.ofBytes(0).isNegative()). }
false;public;0;4;;@Test public void isNegativeWithNegative() {     assertTrue(DataSize.ofBytes(-1).isNegative()). }
false;public;0;4;;@Test public void toStringUsesBytes() {     assertEquals("1024B", DataSize.ofKilobytes(1).toString()). }
false;public;0;4;;@Test public void toStringWithNegativeBytes() {     assertEquals("-1024B", DataSize.ofKilobytes(-1).toString()). }
false;public;0;7;;@Test public void parseWithUnsupportedUnit() {     this.thrown.expect(IllegalArgumentException.class).     this.thrown.expectMessage("3WB").     this.thrown.expectMessage("is not a valid data size").     DataSize.parse("3WB"). }
