commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testStringToCharacter() {     assertEquals(Character.valueOf('1'), conversionService.convert("1", Character.class)). }
false;public;0;4;;@Test public void testStringToCharacterEmptyString() {     assertEquals(null, conversionService.convert("", Character.class)). }
false;public;0;4;;@Test(expected = ConversionFailedException.class) public void testStringToCharacterInvalidString() {     conversionService.convert("invalid", Character.class). }
false;public;0;4;;@Test public void testCharacterToString() {     assertEquals("3", conversionService.convert('3', String.class)). }
false;public;0;10;;@Test public void testStringToBooleanTrue() {     assertEquals(true, conversionService.convert("true", Boolean.class)).     assertEquals(true, conversionService.convert("on", Boolean.class)).     assertEquals(true, conversionService.convert("yes", Boolean.class)).     assertEquals(true, conversionService.convert("1", Boolean.class)).     assertEquals(true, conversionService.convert("TRUE", Boolean.class)).     assertEquals(true, conversionService.convert("ON", Boolean.class)).     assertEquals(true, conversionService.convert("YES", Boolean.class)). }
false;public;0;10;;@Test public void testStringToBooleanFalse() {     assertEquals(false, conversionService.convert("false", Boolean.class)).     assertEquals(false, conversionService.convert("off", Boolean.class)).     assertEquals(false, conversionService.convert("no", Boolean.class)).     assertEquals(false, conversionService.convert("0", Boolean.class)).     assertEquals(false, conversionService.convert("FALSE", Boolean.class)).     assertEquals(false, conversionService.convert("OFF", Boolean.class)).     assertEquals(false, conversionService.convert("NO", Boolean.class)). }
false;public;0;4;;@Test public void testStringToBooleanEmptyString() {     assertEquals(null, conversionService.convert("", Boolean.class)). }
false;public;0;4;;@Test(expected = ConversionFailedException.class) public void testStringToBooleanInvalidString() {     conversionService.convert("invalid", Boolean.class). }
false;public;0;4;;@Test public void testBooleanToString() {     assertEquals("true", conversionService.convert(true, String.class)). }
false;public;0;4;;@Test public void testStringToByte() {     assertEquals(Byte.valueOf("1"), conversionService.convert("1", Byte.class)). }
false;public;0;4;;@Test public void testByteToString() {     assertEquals("65", conversionService.convert("A".getBytes()[0], String.class)). }
false;public;0;4;;@Test public void testStringToShort() {     assertEquals(Short.valueOf("1"), conversionService.convert("1", Short.class)). }
false;public;0;5;;@Test public void testShortToString() {     short three = 3.     assertEquals("3", conversionService.convert(three, String.class)). }
false;public;0;4;;@Test public void testStringToInteger() {     assertEquals(Integer.valueOf(1), conversionService.convert("1", Integer.class)). }
false;public;0;4;;@Test public void testIntegerToString() {     assertEquals("3", conversionService.convert(3, String.class)). }
false;public;0;4;;@Test public void testStringToLong() {     assertEquals(Long.valueOf(1), conversionService.convert("1", Long.class)). }
false;public;0;4;;@Test public void testLongToString() {     assertEquals("3", conversionService.convert(3L, String.class)). }
false;public;0;4;;@Test public void testStringToFloat() {     assertEquals(Float.valueOf("1.0"), conversionService.convert("1.0", Float.class)). }
false;public;0;4;;@Test public void testFloatToString() {     assertEquals("1.0", conversionService.convert(Float.valueOf("1.0"), String.class)). }
false;public;0;4;;@Test public void testStringToDouble() {     assertEquals(Double.valueOf("1.0"), conversionService.convert("1.0", Double.class)). }
false;public;0;4;;@Test public void testDoubleToString() {     assertEquals("1.0", conversionService.convert(Double.valueOf("1.0"), String.class)). }
false;public;0;4;;@Test public void testStringToBigInteger() {     assertEquals(new BigInteger("1"), conversionService.convert("1", BigInteger.class)). }
false;public;0;4;;@Test public void testBigIntegerToString() {     assertEquals("100", conversionService.convert(new BigInteger("100"), String.class)). }
false;public;0;4;;@Test public void testStringToBigDecimal() {     assertEquals(new BigDecimal("1.0"), conversionService.convert("1.0", BigDecimal.class)). }
false;public;0;4;;@Test public void testBigDecimalToString() {     assertEquals("100.00", conversionService.convert(new BigDecimal("100.00"), String.class)). }
false;public;0;4;;@Test public void testStringToNumber() {     assertEquals(new BigDecimal("1.0"), conversionService.convert("1.0", Number.class)). }
false;public;0;4;;@Test public void testStringToNumberEmptyString() {     assertEquals(null, conversionService.convert("", Number.class)). }
false;public;0;4;;@Test public void testStringToEnum() {     assertEquals(Foo.BAR, conversionService.convert("BAR", Foo.class)). }
false;public;0;4;;@Test public void testStringToEnumWithSubclass() {     assertEquals(SubFoo.BAZ, conversionService.convert("BAZ", SubFoo.BAR.getClass())). }
false;public;0;4;;@Test public void testStringToEnumEmptyString() {     assertEquals(null, conversionService.convert("", Foo.class)). }
false;public;0;4;;@Test public void testEnumToString() {     assertEquals("BAR", conversionService.convert(Foo.BAR, String.class)). }
false;public;0;4;;@Test public void testIntegerToEnum() {     assertEquals(Foo.BAR, conversionService.convert(0, Foo.class)). }
false;public;0;4;;@Test public void testIntegerToEnumWithSubclass() {     assertEquals(SubFoo.BAZ, conversionService.convert(1, SubFoo.BAR.getClass())). }
false;public;0;4;;@Test public void testIntegerToEnumNull() {     assertEquals(null, conversionService.convert(null, Foo.class)). }
false;public;0;4;;@Test public void testEnumToInteger() {     assertEquals(Integer.valueOf(0), conversionService.convert(Foo.BAR, Integer.class)). }
false;public;0;5;;@Test public void testStringToEnumSet() throws Exception {     assertEquals(EnumSet.of(Foo.BAR), conversionService.convert("BAR", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField("enumSet")))). }
false;public;0;4;;@Test public void testStringToLocale() {     assertEquals(Locale.ENGLISH, conversionService.convert("en", Locale.class)). }
false;public;0;4;;@Test public void testStringToLocaleWithCountry() {     assertEquals(Locale.US, conversionService.convert("en_US", Locale.class)). }
false;public;0;4;;@Test public void testStringToLocaleWithLanguageTag() {     assertEquals(Locale.US, conversionService.convert("en-US", Locale.class)). }
false;public;0;4;;@Test public void testStringToCharset() {     assertEquals(StandardCharsets.UTF_8, conversionService.convert("UTF-8", Charset.class)). }
false;public;0;4;;@Test public void testCharsetToString() {     assertEquals("UTF-8", conversionService.convert(StandardCharsets.UTF_8, String.class)). }
false;public;0;4;;@Test public void testStringToCurrency() {     assertEquals(Currency.getInstance("EUR"), conversionService.convert("EUR", Currency.class)). }
false;public;0;4;;@Test public void testCurrencyToString() {     assertEquals("USD", conversionService.convert(Currency.getInstance("USD"), String.class)). }
false;public;0;5;;@Test public void testStringToString() {     String str = "test".     assertSame(str, conversionService.convert(str, String.class)). }
false;public;0;7;;@Test public void testUuidToStringAndStringToUuid() {     UUID uuid = UUID.randomUUID().     String convertToString = conversionService.convert(uuid, String.class).     UUID convertToUUID = conversionService.convert(convertToString, UUID.class).     assertEquals(uuid, convertToUUID). }
false;public;0;4;;@Test public void testNumberToNumber() {     assertEquals(Long.valueOf(1), conversionService.convert(1, Long.class)). }
false;public;0;4;;@Test(expected = ConversionFailedException.class) public void testNumberToNumberNotSupportedNumber() {     conversionService.convert(1, CustomNumber.class). }
false;public;0;4;;@Test public void testNumberToCharacter() {     assertEquals(Character.valueOf('A'), conversionService.convert(65, Character.class)). }
false;public;0;4;;@Test public void testCharacterToNumber() {     assertEquals(Integer.valueOf(65), conversionService.convert('A', Integer.class)). }
false;public;0;7;;// collection conversion @Test public void convertArrayToCollectionInterface() {     List<?> result = conversionService.convert(new String[] { "1", "2", "3" }, List.class).     assertEquals("1", result.get(0)).     assertEquals("2", result.get(1)).     assertEquals("3", result.get(2)). }
false;public;0;9;;@Test public void convertArrayToCollectionGenericTypeConversion() throws Exception {     @SuppressWarnings("unchecked")     List<Integer> result = (List<Integer>) conversionService.convert(new String[] { "1", "2", "3" }, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField("genericList"))).     assertEquals(Integer.valueOf(1), result.get(0)).     assertEquals(Integer.valueOf(2), result.get(1)).     assertEquals(Integer.valueOf(3), result.get(2)). }
false;public;0;9;;@Test public void convertArrayToStream() throws Exception {     String[] source = { "1", "3", "4" }.     @SuppressWarnings("unchecked")     Stream<Integer> result = (Stream<Integer>) this.conversionService.convert(source, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField("genericStream"))).     assertEquals(8, result.mapToInt((x) -> x).sum()). }
false;public;0;12;;@Test public void testSpr7766() throws Exception {     ConverterRegistry registry = (conversionService).     registry.addConverter(new ColorConverter()).     @SuppressWarnings("unchecked")     List<Color> colors = (List<Color>) conversionService.convert(new String[] { "ffffff", "#000000" }, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(new MethodParameter(getClass().getMethod("handlerMethod", List.class), 0))).     assertEquals(2, colors.size()).     assertEquals(Color.WHITE, colors.get(0)).     assertEquals(Color.BLACK, colors.get(1)). }
false;public;0;7;;@Test public void convertArrayToCollectionImpl() {     LinkedList<?> result = conversionService.convert(new String[] { "1", "2", "3" }, LinkedList.class).     assertEquals("1", result.get(0)).     assertEquals("2", result.get(1)).     assertEquals("3", result.get(2)). }
false;public;0;4;;@Test(expected = ConversionFailedException.class) public void convertArrayToAbstractCollection() {     conversionService.convert(new String[] { "1", "2", "3" }, AbstractList.class). }
false;public;0;5;;@Test public void convertArrayToString() {     String result = conversionService.convert(new String[] { "1", "2", "3" }, String.class).     assertEquals("1,2,3", result). }
false;public;0;5;;@Test public void convertArrayToStringWithElementConversion() {     String result = conversionService.convert(new Integer[] { 1, 2, 3 }, String.class).     assertEquals("1,2,3", result). }
false;public;0;5;;@Test public void convertEmptyArrayToString() {     String result = conversionService.convert(new String[0], String.class).     assertEquals("", result). }
false;public;0;8;;@Test public void convertStringToArray() {     String[] result = conversionService.convert("1,2,3", String[].class).     assertEquals(3, result.length).     assertEquals("1", result[0]).     assertEquals("2", result[1]).     assertEquals("3", result[2]). }
false;public;0;8;;@Test public void convertStringToArrayWithElementConversion() {     Integer[] result = conversionService.convert("1,2,3", Integer[].class).     assertEquals(3, result.length).     assertEquals(Integer.valueOf(1), result[0]).     assertEquals(Integer.valueOf(2), result[1]).     assertEquals(Integer.valueOf(3), result[2]). }
false;public;0;8;;@Test public void convertStringToPrimitiveArrayWithElementConversion() {     int[] result = conversionService.convert("1,2,3", int[].class).     assertEquals(3, result.length).     assertEquals(1, result[0]).     assertEquals(2, result[1]).     assertEquals(3, result[2]). }
false;public;0;5;;@Test public void convertEmptyStringToArray() {     String[] result = conversionService.convert("", String[].class).     assertEquals(0, result.length). }
false;public;0;6;;@Test public void convertArrayToObject() {     Object[] array = new Object[] { 3L }.     Object result = conversionService.convert(array, Long.class).     assertEquals(3L, result). }
false;public;0;6;;@Test public void convertArrayToObjectWithElementConversion() {     String[] array = new String[] { "3" }.     Integer result = conversionService.convert(array, Integer.class).     assertEquals(Integer.valueOf(3), result). }
false;public;0;6;;@Test public void convertArrayToObjectAssignableTargetType() {     Long[] array = new Long[] { 3L }.     Long[] result = (Long[]) conversionService.convert(array, Object.class).     assertArrayEquals(array, result). }
false;public;0;6;;@Test public void convertObjectToArray() {     Object[] result = conversionService.convert(3L, Object[].class).     assertEquals(1, result.length).     assertEquals(3L, result[0]). }
false;public;0;6;;@Test public void convertObjectToArrayWithElementConversion() {     Integer[] result = conversionService.convert(3L, Integer[].class).     assertEquals(1, result.length).     assertEquals(Integer.valueOf(3), result[0]). }
false;public;0;11;;@Test public void convertCollectionToArray() {     List<String> list = new ArrayList<>().     list.add("1").     list.add("2").     list.add("3").     String[] result = conversionService.convert(list, String[].class).     assertEquals("1", result[0]).     assertEquals("2", result[1]).     assertEquals("3", result[2]). }
false;public;0;11;;@Test public void convertCollectionToArrayWithElementConversion() {     List<String> list = new ArrayList<>().     list.add("1").     list.add("2").     list.add("3").     Integer[] result = conversionService.convert(list, Integer[].class).     assertEquals(Integer.valueOf(1), result[0]).     assertEquals(Integer.valueOf(2), result[1]).     assertEquals(Integer.valueOf(3), result[2]). }
false;public;0;6;;@Test public void convertCollectionToString() {     List<String> list = Arrays.asList("foo", "bar").     String result = conversionService.convert(list, String.class).     assertEquals("foo,bar", result). }
false;public;0;7;;@Test public void convertCollectionToStringWithElementConversion() throws Exception {     List<Integer> list = Arrays.asList(3, 5).     String result = (String) conversionService.convert(list, new TypeDescriptor(getClass().getField("genericList")), TypeDescriptor.valueOf(String.class)).     assertEquals("3,5", result). }
false;public;0;8;;@Test public void convertStringToCollection() {     List<?> result = conversionService.convert("1,2,3", List.class).     assertEquals(3, result.size()).     assertEquals("1", result.get(0)).     assertEquals("2", result.get(1)).     assertEquals("3", result.get(2)). }
false;public;0;9;;@Test public void convertStringToCollectionWithElementConversion() throws Exception {     List<?> result = (List) conversionService.convert("1,2,3", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField("genericList"))).     assertEquals(3, result.size()).     assertEquals(1, result.get(0)).     assertEquals(2, result.get(1)).     assertEquals(3, result.get(2)). }
false;public;0;5;;@Test public void convertEmptyStringToCollection() {     Collection<?> result = conversionService.convert("", Collection.class).     assertEquals(0, result.size()). }
false;public;0;6;;@Test public void convertCollectionToObject() {     List<Long> list = Collections.singletonList(3L).     Long result = conversionService.convert(list, Long.class).     assertEquals(Long.valueOf(3), result). }
false;public;0;6;;@Test public void convertCollectionToObjectWithElementConversion() {     List<String> list = Collections.singletonList("3").     Integer result = conversionService.convert(list, Integer.class).     assertEquals(Integer.valueOf(3), result). }
false;public;0;7;;@Test public void convertCollectionToObjectAssignableTarget() throws Exception {     Collection<String> source = new ArrayList<>().     source.add("foo").     Object result = conversionService.convert(source, new TypeDescriptor(getClass().getField("assignableTarget"))).     assertEquals(source, result). }
false;public;0;9;;@Test public void convertCollectionToObjectWithCustomConverter() {     List<String> source = new ArrayList<>().     source.add("A").     source.add("B").     conversionService.addConverter(List.class, ListWrapper.class, ListWrapper::new).     ListWrapper result = conversionService.convert(source, ListWrapper.class).     assertSame(source, result.getList()). }
false;public;0;6;;@Test public void convertObjectToCollection() {     List<?> result = conversionService.convert(3L, List.class).     assertEquals(1, result.size()).     assertEquals(3L, result.get(0)). }
false;public;0;8;;@Test public void convertObjectToCollectionWithElementConversion() throws Exception {     @SuppressWarnings("unchecked")     List<Integer> result = (List<Integer>) conversionService.convert(3L, TypeDescriptor.valueOf(Long.class), new TypeDescriptor(getClass().getField("genericList"))).     assertEquals(1, result.size()).     assertEquals(Integer.valueOf(3), result.get(0)). }
false;public;0;7;;@Test public void convertStringArrayToIntegerArray() {     Integer[] result = conversionService.convert(new String[] { "1", "2", "3" }, Integer[].class).     assertEquals(Integer.valueOf(1), result[0]).     assertEquals(Integer.valueOf(2), result[1]).     assertEquals(Integer.valueOf(3), result[2]). }
false;public;0;7;;@Test public void convertStringArrayToIntArray() {     int[] result = conversionService.convert(new String[] { "1", "2", "3" }, int[].class).     assertEquals(1, result[0]).     assertEquals(2, result[1]).     assertEquals(3, result[2]). }
false;public;0;7;;@Test public void convertIntegerArrayToIntegerArray() {     Integer[] result = conversionService.convert(new Integer[] { 1, 2, 3 }, Integer[].class).     assertEquals(Integer.valueOf(1), result[0]).     assertEquals(Integer.valueOf(2), result[1]).     assertEquals(Integer.valueOf(3), result[2]). }
false;public;0;7;;@Test public void convertIntegerArrayToIntArray() {     int[] result = conversionService.convert(new Integer[] { 1, 2, 3 }, int[].class).     assertEquals(1, result[0]).     assertEquals(2, result[1]).     assertEquals(3, result[2]). }
false;public;0;7;;@Test public void convertObjectArrayToIntegerArray() {     Integer[] result = conversionService.convert(new Object[] { 1, 2, 3 }, Integer[].class).     assertEquals(Integer.valueOf(1), result[0]).     assertEquals(Integer.valueOf(2), result[1]).     assertEquals(Integer.valueOf(3), result[2]). }
false;public;0;7;;@Test public void convertObjectArrayToIntArray() {     int[] result = conversionService.convert(new Object[] { 1, 2, 3 }, int[].class).     assertEquals(1, result[0]).     assertEquals(2, result[1]).     assertEquals(3, result[2]). }
false;public;0;6;;@Test public void convertByteArrayToWrapperArray() {     byte[] byteArray = new byte[] { 1, 2, 3 }.     Byte[] converted = conversionService.convert(byteArray, Byte[].class).     assertThat(converted, equalTo(new Byte[] { 1, 2, 3 })). }
false;public;0;7;;@Test public void convertArrayToArrayAssignable() {     int[] result = conversionService.convert(new int[] { 1, 2, 3 }, int[].class).     assertEquals(1, result[0]).     assertEquals(2, result[1]).     assertEquals(3, result[2]). }
false;public;0;13;;@Test public void convertListOfNonStringifiable() {     List<Object> list = Arrays.asList(new TestEntity(1L), new TestEntity(2L)).     assertTrue(conversionService.canConvert(list.getClass(), String.class)).     try {         conversionService.convert(list, String.class).     } catch (ConversionFailedException ex) {         assertTrue(ex.getMessage().contains(list.getClass().getName())).         assertTrue(ex.getCause() instanceof ConverterNotFoundException).         assertTrue(ex.getCause().getMessage().contains(TestEntity.class.getName())).     } }
false;public;0;7;;@Test public void convertListOfStringToString() {     List<String> list = Arrays.asList("Foo", "Bar").     assertTrue(conversionService.canConvert(list.getClass(), String.class)).     String result = conversionService.convert(list, String.class).     assertEquals("Foo,Bar", result). }
false;public;0;9;;@Test public void convertListOfListToString() {     List<String> list1 = Arrays.asList("Foo", "Bar").     List<String> list2 = Arrays.asList("Baz", "Boop").     List<List<String>> list = Arrays.asList(list1, list2).     assertTrue(conversionService.canConvert(list.getClass(), String.class)).     String result = conversionService.convert(list, String.class).     assertEquals("Foo,Bar,Baz,Boop", result). }
false;public;0;13;;@Test public void convertCollectionToCollection() throws Exception {     Set<String> foo = new LinkedHashSet<>().     foo.add("1").     foo.add("2").     foo.add("3").     @SuppressWarnings("unchecked")     List<Integer> bar = (List<Integer>) conversionService.convert(foo, TypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField("genericList"))).     assertEquals(Integer.valueOf(1), bar.get(0)).     assertEquals(Integer.valueOf(2), bar.get(1)).     assertEquals(Integer.valueOf(3), bar.get(2)). }
false;public;0;7;;@Test public void convertCollectionToCollectionNull() throws Exception {     @SuppressWarnings("unchecked")     List<Integer> bar = (List<Integer>) conversionService.convert(null, TypeDescriptor.valueOf(LinkedHashSet.class), new TypeDescriptor(getClass().getField("genericList"))).     assertNull(bar). }
false;public;0;13;;@Test @SuppressWarnings("rawtypes") public void convertCollectionToCollectionNotGeneric() {     Set<String> foo = new LinkedHashSet<>().     foo.add("1").     foo.add("2").     foo.add("3").     List bar = (List) conversionService.convert(foo, TypeDescriptor.valueOf(LinkedHashSet.class), TypeDescriptor.valueOf(List.class)).     assertEquals("1", bar.get(0)).     assertEquals("2", bar.get(1)).     assertEquals("3", bar.get(2)). }
false;public;0;15;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void convertCollectionToCollectionSpecialCaseSourceImpl() throws Exception {     Map map = new LinkedHashMap().     map.put("1", "1").     map.put("2", "2").     map.put("3", "3").     Collection values = map.values().     List<Integer> bar = (List<Integer>) conversionService.convert(values, TypeDescriptor.forObject(values), new TypeDescriptor(getClass().getField("genericList"))).     assertEquals(3, bar.size()).     assertEquals(Integer.valueOf(1), bar.get(0)).     assertEquals(Integer.valueOf(2), bar.get(1)).     assertEquals(Integer.valueOf(3), bar.get(2)). }
false;public;0;11;;@Test public void collection() {     List<String> strings = new ArrayList<>().     strings.add("3").     strings.add("9").     @SuppressWarnings("unchecked")     List<Integer> integers = (List<Integer>) conversionService.convert(strings, TypeDescriptor.collection(List.class, TypeDescriptor.valueOf(Integer.class))).     assertEquals(Integer.valueOf(3), integers.get(0)).     assertEquals(Integer.valueOf(9), integers.get(1)). }
false;public;0;11;;@Test public void convertMapToMap() throws Exception {     Map<String, String> foo = new HashMap<>().     foo.put("1", "BAR").     foo.put("2", "BAZ").     @SuppressWarnings("unchecked")     Map<Integer, Foo> map = (Map<Integer, Foo>) conversionService.convert(foo, TypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField("genericMap"))).     assertEquals(Foo.BAR, map.get(1)).     assertEquals(Foo.BAZ, map.get(2)). }
false;public;0;9;;@Test @SuppressWarnings("rawtypes") public void convertHashMapValuesToList() {     Map<String, Integer> hashMap = new LinkedHashMap<>().     hashMap.put("1", 1).     hashMap.put("2", 2).     List converted = conversionService.convert(hashMap.values(), List.class).     assertEquals(Arrays.asList(1, 2), converted). }
false;public;0;11;;@Test public void map() {     Map<String, String> strings = new HashMap<>().     strings.put("3", "9").     strings.put("6", "31").     @SuppressWarnings("unchecked")     Map<Integer, Integer> integers = (Map<Integer, Integer>) conversionService.convert(strings, TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(Integer.class))).     assertEquals(Integer.valueOf(9), integers.get(3)).     assertEquals(Integer.valueOf(31), integers.get(6)). }
false;public;0;9;;@Test public void convertPropertiesToString() {     Properties foo = new Properties().     foo.setProperty("1", "BAR").     foo.setProperty("2", "BAZ").     String result = conversionService.convert(foo, String.class).     assertTrue(result.contains("1=BAR")).     assertTrue(result.contains("2=BAZ")). }
false;public;0;8;;@Test public void convertStringToProperties() {     Properties result = conversionService.convert("a=b\nc=2\nd=", Properties.class).     assertEquals(3, result.size()).     assertEquals("b", result.getProperty("a")).     assertEquals("2", result.getProperty("c")).     assertEquals("", result.getProperty("d")). }
false;public;0;7;;@Test public void convertStringToPropertiesWithSpaces() {     Properties result = conversionService.convert("   foo=bar\n   bar=baz\n    baz=boop", Properties.class).     assertEquals("bar", result.get("foo")).     assertEquals("baz", result.get("bar")).     assertEquals("boop", result.get("baz")). }
false;public;0;9;;// generic object conversion @Test public void convertObjectToStringWithValueOfMethodPresentUsingToString() {     ISBN.reset().     assertEquals("123456789", conversionService.convert(new ISBN("123456789"), String.class)).     assertEquals("constructor invocations", 1, ISBN.constructorCount).     assertEquals("valueOf() invocations", 0, ISBN.valueOfCount).     assertEquals("toString() invocations", 1, ISBN.toStringCount). }
false;public;0;10;;@Test public void convertObjectToObjectUsingValueOfMethod() {     ISBN.reset().     assertEquals(new ISBN("123456789"), conversionService.convert("123456789", ISBN.class)).     assertEquals("valueOf() invocations", 1, ISBN.valueOfCount).     // valueOf() invokes the constructor     assertEquals("constructor invocations", 2, ISBN.constructorCount).     assertEquals("toString() invocations", 0, ISBN.toStringCount). }
false;public;0;8;;@Test public void convertObjectToStringUsingToString() {     SSN.reset().     assertEquals("123456789", conversionService.convert(new SSN("123456789"), String.class)).     assertEquals("constructor invocations", 1, SSN.constructorCount).     assertEquals("toString() invocations", 1, SSN.toStringCount). }
false;public;0;8;;@Test public void convertObjectToObjectUsingObjectConstructor() {     SSN.reset().     assertEquals(new SSN("123456789"), conversionService.convert("123456789", SSN.class)).     assertEquals("constructor invocations", 2, SSN.constructorCount).     assertEquals("toString() invocations", 0, SSN.toStringCount). }
false;public;0;4;;@Test public void convertStringToTimezone() {     assertEquals("GMT+02:00", conversionService.convert("GMT+2", TimeZone.class).getID()). }
false;public;0;4;;@Test public void convertObjectToStringWithJavaTimeOfMethodPresent() {     assertTrue(conversionService.convert(ZoneId.of("GMT+1"), String.class).startsWith("GMT+")). }
false;public;0;4;;@Test public void convertObjectToStringNotSupported() {     assertFalse(conversionService.canConvert(TestEntity.class, String.class)). }
false;public;0;4;;@Test public void convertObjectToObjectWithJavaTimeOfMethod() {     assertEquals(ZoneId.of("GMT+1"), conversionService.convert("GMT+1", ZoneId.class)). }
false;public;0;4;;@Test(expected = ConverterNotFoundException.class) public void convertObjectToObjectNoValueOfMethodOrConstructor() {     conversionService.convert(Long.valueOf(3), SSN.class). }
false;public;0;5;;@Test public void convertObjectToObjectFinderMethod() {     TestEntity e = conversionService.convert(1L, TestEntity.class).     assertEquals(Long.valueOf(1), e.getId()). }
false;public;0;6;;@Test public void convertObjectToObjectFinderMethodWithNull() {     TestEntity entity = (TestEntity) conversionService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(TestEntity.class)).     assertNull(entity). }
false;public;0;5;;@Test public void convertObjectToObjectFinderMethodWithIdConversion() {     TestEntity entity = conversionService.convert("1", TestEntity.class).     assertEquals(Long.valueOf(1), entity.getId()). }
false;public;0;5;;@Test public void convertCharArrayToString() {     String converted = conversionService.convert(new char[] { 'a', 'b', 'c' }, String.class).     assertThat(converted, equalTo("a,b,c")). }
false;public;0;5;;@Test public void convertStringToCharArray() {     char[] converted = conversionService.convert("a,b,c", char[].class).     assertThat(converted, equalTo(new char[] { 'a', 'b', 'c' })). }
false;public;0;6;;@Test public void convertStringToCustomCharArray() {     conversionService.addConverter(String.class, char[].class, String::toCharArray).     char[] converted = conversionService.convert("abc", char[].class).     assertThat(converted, equalTo(new char[] { 'a', 'b', 'c' })). }
false;public;0;9;;@Test @SuppressWarnings("unchecked") public void multidimensionalArrayToListConversionShouldConvertEntriesCorrectly() {     String[][] grid = new String[][] { new String[] { "1", "2", "3", "4" }, new String[] { "5", "6", "7", "8" }, new String[] { "9", "10", "11", "12" } }.     List<String[]> converted = conversionService.convert(grid, List.class).     String[][] convertedBack = conversionService.convert(converted, String[][].class).     assertArrayEquals(grid, convertedBack). }
false;public;0;8;;@Test public void convertCannotOptimizeArray() {     conversionService.addConverter(Byte.class, Byte.class, source -> (byte) (source + 1)).     byte[] byteArray = new byte[] { 1, 2, 3 }.     byte[] converted = conversionService.convert(byteArray, byte[].class).     assertNotSame(byteArray, converted).     assertArrayEquals(new byte[] { 2, 3, 4 }, converted). }
false;public;0;10;;@Test @SuppressWarnings("unchecked") public void convertObjectToOptional() {     Method method = ClassUtils.getMethod(TestEntity.class, "handleOptionalValue", Optional.class).     MethodParameter parameter = new MethodParameter(method, 0).     TypeDescriptor descriptor = new TypeDescriptor(parameter).     Object actual = conversionService.convert("1,2,3", TypeDescriptor.valueOf(String.class), descriptor).     assertEquals(Optional.class, actual.getClass()).     assertEquals(Arrays.asList(1, 2, 3), ((Optional<List<Integer>>) actual).get()). }
false;public;0;6;;@Test public void convertObjectToOptionalNull() {     assertSame(Optional.empty(), conversionService.convert(null, TypeDescriptor.valueOf(Object.class), TypeDescriptor.valueOf(Optional.class))).     assertSame(Optional.empty(), conversionService.convert(null, Optional.class)). }
false;public;0;6;;@Test public void convertExistingOptional() {     assertSame(Optional.empty(), conversionService.convert(Optional.empty(), TypeDescriptor.valueOf(Object.class), TypeDescriptor.valueOf(Optional.class))).     assertSame(Optional.empty(), conversionService.convert(Optional.empty(), Optional.class)). }
false;public;0;16;;@Test public void testPerformance1() {     Assume.group(TestGroup.PERFORMANCE).     StopWatch watch = new StopWatch("integer->string conversionPerformance").     watch.start("convert 4,000,000 with conversion service").     for (int i = 0. i < 4000000. i++) {         conversionService.convert(3, String.class).     }     watch.stop().     watch.start("convert 4,000,000 manually").     for (int i = 0. i < 4000000. i++) {         Integer.valueOf(3).toString().     }     watch.stop(). // System.out.println(watch.prettyPrint()). }
false;public;1;2;;public void handlerMethod(List<Color> color) { }
false;;0;4;;@Override String s() {     return "x". }
false;;0;4;;@Override String s() {     return "y". }
false;abstract;0;1;;abstract String s().
false;public;1;7;;@Override public Color convert(String source) {     if (!source.startsWith("#")) {         source = "#" + source.     }     return Color.decode(source). }
false;public;0;4;;@Override public double doubleValue() {     return 0. }
false;public;0;4;;@Override public float floatValue() {     return 0. }
false;public;0;4;;@Override public int intValue() {     return 0. }
false;public;0;4;;@Override public long longValue() {     return 0. }
false;public;0;3;;public Long getId() {     return id. }
false;public,static;1;3;;public static TestEntity findTestEntity(Long id) {     return new TestEntity(id). }
false;public;1;2;;public void handleOptionalValue(Optional<List<Integer>> value) { }
false;public;0;3;;public List<?> getList() {     return list. }
false;static;0;4;;static void reset() {     constructorCount = 0.     toStringCount = 0. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (!(o instanceof SSN)) {         return false.     }     SSN ssn = (SSN) o.     return this.value.equals(ssn.value). }
false;public;0;4;;@Override public int hashCode() {     return value.hashCode(). }
false;public;0;5;;@Override public String toString() {     toStringCount++.     return value. }
false;static;0;5;;static void reset() {     constructorCount = 0.     toStringCount = 0.     valueOfCount = 0. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (!(o instanceof ISBN)) {         return false.     }     ISBN isbn = (ISBN) o.     return this.value.equals(isbn.value). }
false;public;0;4;;@Override public int hashCode() {     return value.hashCode(). }
false;public;0;5;;@Override public String toString() {     toStringCount++.     return value. }
false;public,static;1;5;;@SuppressWarnings("unused") public static ISBN valueOf(String value) {     valueOfCount++.     return new ISBN(value). }
