commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     conversionService.addConverter(new CollectionToCollectionConverter(conversionService)). }
false;public;0;22;;@Test public void scalarList() throws Exception {     List<String> list = new ArrayList<>().     list.add("9").     list.add("37").     TypeDescriptor sourceType = TypeDescriptor.forObject(list).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarListTarget")).     assertTrue(conversionService.canConvert(sourceType, targetType)).     try {         conversionService.convert(list, sourceType, targetType).     } catch (ConversionFailedException ex) {         assertTrue(ex.getCause() instanceof ConverterNotFoundException).     }     conversionService.addConverterFactory(new StringToNumberConverterFactory()).     assertTrue(conversionService.canConvert(sourceType, targetType)).     @SuppressWarnings("unchecked")     List<Integer> result = (List<Integer>) conversionService.convert(list, sourceType, targetType).     assertFalse(list.equals(result)).     assertEquals(9, result.get(0).intValue()).     assertEquals(37, result.get(1).intValue()). }
false;public;0;10;;@Test public void emptyListToList() throws Exception {     conversionService.addConverter(new CollectionToCollectionConverter(conversionService)).     conversionService.addConverterFactory(new StringToNumberConverterFactory()).     List<String> list = new ArrayList<>().     TypeDescriptor sourceType = TypeDescriptor.forObject(list).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyListTarget")).     assertTrue(conversionService.canConvert(sourceType, targetType)).     assertEquals(list, conversionService.convert(list, sourceType, targetType)). }
false;public;0;13;;@Test public void emptyListToListDifferentTargetType() throws Exception {     conversionService.addConverter(new CollectionToCollectionConverter(conversionService)).     conversionService.addConverterFactory(new StringToNumberConverterFactory()).     List<String> list = new ArrayList<>().     TypeDescriptor sourceType = TypeDescriptor.forObject(list).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyListDifferentTarget")).     assertTrue(conversionService.canConvert(sourceType, targetType)).     @SuppressWarnings("unchecked")     LinkedList<Integer> result = (LinkedList<Integer>) conversionService.convert(list, sourceType, targetType).     assertEquals(LinkedList.class, result.getClass()).     assertTrue(result.isEmpty()). }
false;public;0;9;;@Test public void collectionToObjectInteraction() throws Exception {     List<List<String>> list = new ArrayList<>().     list.add(Arrays.asList("9", "12")).     list.add(Arrays.asList("37", "23")).     conversionService.addConverter(new CollectionToObjectConverter(conversionService)).     assertTrue(conversionService.canConvert(List.class, List.class)).     assertSame(list, conversionService.convert(list, List.class)). }
false;public;0;11;;@Test @SuppressWarnings("unchecked") public void arrayCollectionToObjectInteraction() throws Exception {     List<String>[] array = new List[2].     array[0] = Arrays.asList("9", "12").     array[1] = Arrays.asList("37", "23").     conversionService.addConverter(new ArrayToCollectionConverter(conversionService)).     conversionService.addConverter(new CollectionToObjectConverter(conversionService)).     assertTrue(conversionService.canConvert(String[].class, List.class)).     assertEquals(Arrays.asList(array), conversionService.convert(array, List.class)). }
false;public;0;18;;@Test @SuppressWarnings("unchecked") public void objectToCollection() throws Exception {     List<List<String>> list = new ArrayList<>().     list.add(Arrays.asList("9", "12")).     list.add(Arrays.asList("37", "23")).     conversionService.addConverterFactory(new StringToNumberConverterFactory()).     conversionService.addConverter(new ObjectToCollectionConverter(conversionService)).     conversionService.addConverter(new CollectionToObjectConverter(conversionService)).     TypeDescriptor sourceType = TypeDescriptor.forObject(list).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("objectToCollection")).     assertTrue(conversionService.canConvert(sourceType, targetType)).     List<List<List<Integer>>> result = (List<List<List<Integer>>>) conversionService.convert(list, sourceType, targetType).     assertEquals((Integer) 9, result.get(0).get(0).get(0)).     assertEquals((Integer) 12, result.get(0).get(1).get(0)).     assertEquals((Integer) 37, result.get(1).get(0).get(0)).     assertEquals((Integer) 23, result.get(1).get(1).get(0)). }
false;public;0;19;;@Test @SuppressWarnings("unchecked") public void stringToCollection() throws Exception {     List<List<String>> list = new ArrayList<>().     list.add(Arrays.asList("9,12")).     list.add(Arrays.asList("37,23")).     conversionService.addConverterFactory(new StringToNumberConverterFactory()).     conversionService.addConverter(new StringToCollectionConverter(conversionService)).     conversionService.addConverter(new ObjectToCollectionConverter(conversionService)).     conversionService.addConverter(new CollectionToObjectConverter(conversionService)).     TypeDescriptor sourceType = TypeDescriptor.forObject(list).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("objectToCollection")).     assertTrue(conversionService.canConvert(sourceType, targetType)).     List<List<List<Integer>>> result = (List<List<List<Integer>>>) conversionService.convert(list, sourceType, targetType).     assertEquals((Integer) 9, result.get(0).get(0).get(0)).     assertEquals((Integer) 12, result.get(0).get(0).get(1)).     assertEquals((Integer) 37, result.get(1).get(0).get(0)).     assertEquals((Integer) 23, result.get(1).get(0).get(1)). }
false;public;0;6;;@Test public void convertEmptyVector_shouldReturnEmptyArrayList() {     Vector<String> vector = new Vector<>().     vector.add("Element").     testCollectionConversionToArrayList(vector). }
false;public;0;6;;@Test public void convertNonEmptyVector_shouldReturnNonEmptyArrayList() {     Vector<String> vector = new Vector<>().     vector.add("Element").     testCollectionConversionToArrayList(vector). }
false;public;0;6;;@Test public void testCollectionsEmptyList() throws Exception {     CollectionToCollectionConverter converter = new CollectionToCollectionConverter(new GenericConversionService()).     TypeDescriptor type = new TypeDescriptor(getClass().getField("list")).     converter.convert(list, type, TypeDescriptor.valueOf(Class.forName("java.util.Collections$EmptyList"))). }
false;private;1;7;;@SuppressWarnings("rawtypes") private void testCollectionConversionToArrayList(Collection<String> aSource) {     Object myConverted = (new CollectionToCollectionConverter(new GenericConversionService())).convert(aSource, TypeDescriptor.forObject(aSource), TypeDescriptor.forObject(new ArrayList())).     assertTrue(myConverted instanceof ArrayList<?>).     assertEquals(aSource.size(), ((ArrayList<?>) myConverted).size()). }
false;public;0;6;;@Test public void listToCollectionNoCopyRequired() throws NoSuchFieldException {     List<?> input = new ArrayList<>(Arrays.asList("foo", "bar")).     assertSame(input, conversionService.convert(input, TypeDescriptor.forObject(input), new TypeDescriptor(getClass().getField("wildcardCollection")))). }
false;public;0;9;;@Test public void differentImpls() throws Exception {     List<Resource> resources = new ArrayList<>().     resources.add(new ClassPathResource("test")).     resources.add(new FileSystemResource("test")).     resources.add(new TestResource()).     TypeDescriptor sourceType = TypeDescriptor.forObject(resources).     assertSame(resources, conversionService.convert(resources, sourceType, new TypeDescriptor(getClass().getField("resources")))). }
false;public;0;10;;@Test public void mixedInNulls() throws Exception {     List<Resource> resources = new ArrayList<>().     resources.add(new ClassPathResource("test")).     resources.add(null).     resources.add(new FileSystemResource("test")).     resources.add(new TestResource()).     TypeDescriptor sourceType = TypeDescriptor.forObject(resources).     assertSame(resources, conversionService.convert(resources, sourceType, new TypeDescriptor(getClass().getField("resources")))). }
false;public;0;8;;@Test public void allNulls() throws Exception {     List<Resource> resources = new ArrayList<>().     resources.add(null).     resources.add(null).     TypeDescriptor sourceType = TypeDescriptor.forObject(resources).     assertSame(resources, conversionService.convert(resources, sourceType, new TypeDescriptor(getClass().getField("resources")))). }
false;public;0;8;;@Test(expected = ConverterNotFoundException.class) public void elementTypesNotConvertible() throws Exception {     List<String> resources = new ArrayList<>().     resources.add(null).     resources.add(null).     TypeDescriptor sourceType = new TypeDescriptor(getClass().getField("strings")).     assertEquals(resources, conversionService.convert(resources, sourceType, new TypeDescriptor(getClass().getField("resources")))). }
false;public;0;8;;@Test(expected = ConversionFailedException.class) public void nothingInCommon() throws Exception {     List<Object> resources = new ArrayList<>().     resources.add(new ClassPathResource("test")).     resources.add(3).     TypeDescriptor sourceType = TypeDescriptor.forObject(resources).     assertEquals(resources, conversionService.convert(resources, sourceType, new TypeDescriptor(getClass().getField("resources")))). }
false;public;0;9;;@Test public void testStringToEnumSet() throws Exception {     conversionService.addConverterFactory(new StringToEnumConverterFactory()).     List<String> list = new ArrayList<>().     list.add("A").     list.add("C").     assertEquals(EnumSet.of(MyEnum.A, MyEnum.C), conversionService.convert(list, TypeDescriptor.forObject(list), new TypeDescriptor(getClass().getField("enumSet")))). }
false;public;0;4;;@Override public InputStream getInputStream() throws IOException {     return null. }
false;public;0;4;;@Override public boolean exists() {     return false. }
false;public;0;4;;@Override public boolean isReadable() {     return false. }
false;public;0;4;;@Override public boolean isOpen() {     return false. }
false;public;0;4;;@Override public boolean isFile() {     return false. }
false;public;0;4;;@Override public URL getURL() throws IOException {     return null. }
false;public;0;4;;@Override public URI getURI() throws IOException {     return null. }
false;public;0;4;;@Override public File getFile() throws IOException {     return null. }
false;public;0;4;;@Override public long contentLength() throws IOException {     return 0. }
false;public;0;4;;@Override public long lastModified() throws IOException {     return 0. }
false;public;1;4;;@Override public Resource createRelative(String relativePath) throws IOException {     return null. }
false;public;0;4;;@Override public String getFilename() {     return null. }
false;public;0;4;;@Override public String getDescription() {     return null. }
