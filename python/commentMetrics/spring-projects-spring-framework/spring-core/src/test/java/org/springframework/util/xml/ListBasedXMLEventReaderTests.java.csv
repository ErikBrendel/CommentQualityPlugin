commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void standard() throws Exception {     String xml = "<foo><bar>baz</bar></foo>".     List<XMLEvent> events = readEvents(xml).     ListBasedXMLEventReader reader = new ListBasedXMLEventReader(events).     StringWriter resultWriter = new StringWriter().     XMLEventWriter writer = this.outputFactory.createXMLEventWriter(resultWriter).     writer.add(reader).     assertThat(resultWriter.toString(), isSimilarTo(xml)). }
false;public;0;14;;@Test public void testGetElementText() throws Exception {     String xml = "<foo><bar>baz</bar></foo>".     List<XMLEvent> events = readEvents(xml).     ListBasedXMLEventReader reader = new ListBasedXMLEventReader(events).     assertEquals(START_DOCUMENT, reader.nextEvent().getEventType()).     assertEquals(START_ELEMENT, reader.nextEvent().getEventType()).     assertEquals(START_ELEMENT, reader.nextEvent().getEventType()).     assertEquals("baz", reader.getElementText()).     assertEquals(END_ELEMENT, reader.nextEvent().getEventType()).     assertEquals(END_DOCUMENT, reader.nextEvent().getEventType()). }
false;public;0;18;;@Test public void testGetElementTextThrowsExceptionAtWrongPosition() throws Exception {     String xml = "<foo><bar>baz</bar></foo>".     List<XMLEvent> events = readEvents(xml).     ListBasedXMLEventReader reader = new ListBasedXMLEventReader(events).     assertEquals(START_DOCUMENT, reader.nextEvent().getEventType()).     try {         reader.getElementText().         fail("Should have thrown XMLStreamException").     } catch (XMLStreamException ex) {         // expected         assertTrue(ex.getMessage().startsWith("Not at START_ELEMENT")).     } }
false;private;1;8;;private List<XMLEvent> readEvents(String xml) throws XMLStreamException {     XMLEventReader reader = this.inputFactory.createXMLEventReader(new StringReader(xml)).     List<XMLEvent> events = new ArrayList<>().     while (reader.hasNext()) {         events.add(reader.nextEvent()).     }     return events. }
