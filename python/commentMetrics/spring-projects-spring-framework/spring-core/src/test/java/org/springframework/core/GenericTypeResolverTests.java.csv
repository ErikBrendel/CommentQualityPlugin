# id;timestamp;commentText;codeText;commentWords;codeWords
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1340122048;Extract some value of the type supported by the interface (i.e., by_a concrete, non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1344186578;Extract some value of the type supported by the interface (i.e., by_a concrete, non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1353522416;Extract some value of the type supported by the interface (i.e., by_a concrete, non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1356735495;Extract some value of the type supported by the interface (i.e., by_a concrete, non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1372363092;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1377020217;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1381389591;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1381787404;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1382747217;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1383155455;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1383229700;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1385412762;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1391465807;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1399392386;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1431022697;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1431375743;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1440078573;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1458843770;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1467730834;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1467844672;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1491831389;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1491898149;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType);1492093025;Extract some value of the type supported by the interface (i.e., by a concrete,_non-generic implementation of the interface).;public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {_			return null__		};extract,some,value,of,the,type,supported,by,the,interface,i,e,by,a,concrete,non,generic,implementation,of,the,interface;public,static,t,t,extract,value,from,my,interface,type,t,my,interface,type,return,null
GenericTypeResolverTests -> @Test 	public void genericMethodReturnTypes();1344186578;@since 3.2;@Test_	public void genericMethodReturnTypes() {__		Method notParameterized = findMethod(MyTypeWithMethods.class, "notParameterized", new Class[] {})__		assertEquals(String.class, resolveReturnTypeForGenericMethod(notParameterized, new Object[] {}))___		Method notParameterizedWithArguments = findMethod(MyTypeWithMethods.class, "notParameterizedWithArguments",_			new Class[] { Integer.class, Boolean.class })__		assertEquals(String.class,_			resolveReturnTypeForGenericMethod(notParameterizedWithArguments, new Object[] { 99, true }))___		Method createProxy = findMethod(MyTypeWithMethods.class, "createProxy", new Class[] { Object.class })__		assertEquals(String.class, resolveReturnTypeForGenericMethod(createProxy, new Object[] { "foo" }))___		Method createNamedProxyWithDifferentTypes = findMethod(MyTypeWithMethods.class, "createNamedProxy",_			new Class[] { String.class, Object.class })__		_		assertNull(resolveReturnTypeForGenericMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma" }))__		assertEquals(Long.class,_			resolveReturnTypeForGenericMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma", 99L }))___		Method createNamedProxyWithDuplicateTypes = findMethod(MyTypeWithMethods.class, "createNamedProxy",_			new Class[] { String.class, Object.class })__		assertEquals(String.class,_			resolveReturnTypeForGenericMethod(createNamedProxyWithDuplicateTypes, new Object[] { "enigma", "foo" }))___		Method createMock = findMethod(MyTypeWithMethods.class, "createMock", new Class[] { Class.class })__		assertEquals(Runnable.class, resolveReturnTypeForGenericMethod(createMock, new Object[] { Runnable.class }))___		Method createNamedMock = findMethod(MyTypeWithMethods.class, "createNamedMock", new Class[] { String.class,_			Class.class })__		assertEquals(Runnable.class,_			resolveReturnTypeForGenericMethod(createNamedMock, new Object[] { "foo", Runnable.class }))___		Method createVMock = findMethod(MyTypeWithMethods.class, "createVMock",_			new Class[] { Object.class, Class.class })__		assertEquals(Runnable.class,_			resolveReturnTypeForGenericMethod(createVMock, new Object[] { "foo", Runnable.class }))___		_		_		_		Method extractValueFrom = findMethod(MyTypeWithMethods.class, "extractValueFrom",_			new Class[] { MyInterfaceType.class })__		assertEquals(Object.class,_			resolveReturnTypeForGenericMethod(extractValueFrom, new Object[] { new MySimpleInterfaceType() }))___		_		_		Map<Integer, Boolean> map = new HashMap<Integer, Boolean>()__		map.put(0, false)__		map.put(1, true)__		Method extractMagicValue = findMethod(MyTypeWithMethods.class, "extractMagicValue", new Class[] { Map.class })__		assertEquals(Object.class, resolveReturnTypeForGenericMethod(extractMagicValue, new Object[] { map }))__	};since,3,2;test,public,void,generic,method,return,types,method,not,parameterized,find,method,my,type,with,methods,class,not,parameterized,new,class,assert,equals,string,class,resolve,return,type,for,generic,method,not,parameterized,new,object,method,not,parameterized,with,arguments,find,method,my,type,with,methods,class,not,parameterized,with,arguments,new,class,integer,class,boolean,class,assert,equals,string,class,resolve,return,type,for,generic,method,not,parameterized,with,arguments,new,object,99,true,method,create,proxy,find,method,my,type,with,methods,class,create,proxy,new,class,object,class,assert,equals,string,class,resolve,return,type,for,generic,method,create,proxy,new,object,foo,method,create,named,proxy,with,different,types,find,method,my,type,with,methods,class,create,named,proxy,new,class,string,class,object,class,assert,null,resolve,return,type,for,generic,method,create,named,proxy,with,different,types,new,object,enigma,assert,equals,long,class,resolve,return,type,for,generic,method,create,named,proxy,with,different,types,new,object,enigma,99l,method,create,named,proxy,with,duplicate,types,find,method,my,type,with,methods,class,create,named,proxy,new,class,string,class,object,class,assert,equals,string,class,resolve,return,type,for,generic,method,create,named,proxy,with,duplicate,types,new,object,enigma,foo,method,create,mock,find,method,my,type,with,methods,class,create,mock,new,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,mock,new,object,runnable,class,method,create,named,mock,find,method,my,type,with,methods,class,create,named,mock,new,class,string,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,named,mock,new,object,foo,runnable,class,method,create,vmock,find,method,my,type,with,methods,class,create,vmock,new,class,object,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,vmock,new,object,foo,runnable,class,method,extract,value,from,find,method,my,type,with,methods,class,extract,value,from,new,class,my,interface,type,class,assert,equals,object,class,resolve,return,type,for,generic,method,extract,value,from,new,object,new,my,simple,interface,type,map,integer,boolean,map,new,hash,map,integer,boolean,map,put,0,false,map,put,1,true,method,extract,magic,value,find,method,my,type,with,methods,class,extract,magic,value,new,class,map,class,assert,equals,object,class,resolve,return,type,for,generic,method,extract,magic,value,new,object,map
GenericTypeResolverTests -> @Test 	public void genericMethodReturnTypes();1353522416;@since 3.2;@Test_	public void genericMethodReturnTypes() {__		Method notParameterized = findMethod(MyTypeWithMethods.class, "notParameterized", new Class[] {})__		assertEquals(String.class, resolveReturnTypeForGenericMethod(notParameterized, new Object[] {}))___		Method notParameterizedWithArguments = findMethod(MyTypeWithMethods.class, "notParameterizedWithArguments",_			new Class[] { Integer.class, Boolean.class })__		assertEquals(String.class,_			resolveReturnTypeForGenericMethod(notParameterizedWithArguments, new Object[] { 99, true }))___		Method createProxy = findMethod(MyTypeWithMethods.class, "createProxy", new Class[] { Object.class })__		assertEquals(String.class, resolveReturnTypeForGenericMethod(createProxy, new Object[] { "foo" }))___		Method createNamedProxyWithDifferentTypes = findMethod(MyTypeWithMethods.class, "createNamedProxy",_			new Class[] { String.class, Object.class })__		_		assertNull(resolveReturnTypeForGenericMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma" }))__		assertEquals(Long.class,_			resolveReturnTypeForGenericMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma", 99L }))___		Method createNamedProxyWithDuplicateTypes = findMethod(MyTypeWithMethods.class, "createNamedProxy",_			new Class[] { String.class, Object.class })__		assertEquals(String.class,_			resolveReturnTypeForGenericMethod(createNamedProxyWithDuplicateTypes, new Object[] { "enigma", "foo" }))___		Method createMock = findMethod(MyTypeWithMethods.class, "createMock", new Class[] { Class.class })__		assertEquals(Runnable.class, resolveReturnTypeForGenericMethod(createMock, new Object[] { Runnable.class }))___		Method createNamedMock = findMethod(MyTypeWithMethods.class, "createNamedMock", new Class[] { String.class,_			Class.class })__		assertEquals(Runnable.class,_			resolveReturnTypeForGenericMethod(createNamedMock, new Object[] { "foo", Runnable.class }))___		Method createVMock = findMethod(MyTypeWithMethods.class, "createVMock",_			new Class[] { Object.class, Class.class })__		assertEquals(Runnable.class,_			resolveReturnTypeForGenericMethod(createVMock, new Object[] { "foo", Runnable.class }))___		_		_		_		Method extractValueFrom = findMethod(MyTypeWithMethods.class, "extractValueFrom",_			new Class[] { MyInterfaceType.class })__		assertEquals(Object.class,_			resolveReturnTypeForGenericMethod(extractValueFrom, new Object[] { new MySimpleInterfaceType() }))___		_		_		Map<Integer, Boolean> map = new HashMap<Integer, Boolean>()__		map.put(0, false)__		map.put(1, true)__		Method extractMagicValue = findMethod(MyTypeWithMethods.class, "extractMagicValue", new Class[] { Map.class })__		assertEquals(Object.class, resolveReturnTypeForGenericMethod(extractMagicValue, new Object[] { map }))__	};since,3,2;test,public,void,generic,method,return,types,method,not,parameterized,find,method,my,type,with,methods,class,not,parameterized,new,class,assert,equals,string,class,resolve,return,type,for,generic,method,not,parameterized,new,object,method,not,parameterized,with,arguments,find,method,my,type,with,methods,class,not,parameterized,with,arguments,new,class,integer,class,boolean,class,assert,equals,string,class,resolve,return,type,for,generic,method,not,parameterized,with,arguments,new,object,99,true,method,create,proxy,find,method,my,type,with,methods,class,create,proxy,new,class,object,class,assert,equals,string,class,resolve,return,type,for,generic,method,create,proxy,new,object,foo,method,create,named,proxy,with,different,types,find,method,my,type,with,methods,class,create,named,proxy,new,class,string,class,object,class,assert,null,resolve,return,type,for,generic,method,create,named,proxy,with,different,types,new,object,enigma,assert,equals,long,class,resolve,return,type,for,generic,method,create,named,proxy,with,different,types,new,object,enigma,99l,method,create,named,proxy,with,duplicate,types,find,method,my,type,with,methods,class,create,named,proxy,new,class,string,class,object,class,assert,equals,string,class,resolve,return,type,for,generic,method,create,named,proxy,with,duplicate,types,new,object,enigma,foo,method,create,mock,find,method,my,type,with,methods,class,create,mock,new,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,mock,new,object,runnable,class,method,create,named,mock,find,method,my,type,with,methods,class,create,named,mock,new,class,string,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,named,mock,new,object,foo,runnable,class,method,create,vmock,find,method,my,type,with,methods,class,create,vmock,new,class,object,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,vmock,new,object,foo,runnable,class,method,extract,value,from,find,method,my,type,with,methods,class,extract,value,from,new,class,my,interface,type,class,assert,equals,object,class,resolve,return,type,for,generic,method,extract,value,from,new,object,new,my,simple,interface,type,map,integer,boolean,map,new,hash,map,integer,boolean,map,put,0,false,map,put,1,true,method,extract,magic,value,find,method,my,type,with,methods,class,extract,magic,value,new,class,map,class,assert,equals,object,class,resolve,return,type,for,generic,method,extract,magic,value,new,object,map
GenericTypeResolverTests -> @Test 	public void genericMethodReturnTypes();1356735495;@since 3.2;@Test_	public void genericMethodReturnTypes() {__		Method notParameterized = findMethod(MyTypeWithMethods.class, "notParameterized", new Class[] {})__		assertEquals(String.class, resolveReturnTypeForGenericMethod(notParameterized, new Object[] {}))___		Method notParameterizedWithArguments = findMethod(MyTypeWithMethods.class, "notParameterizedWithArguments",_			new Class[] { Integer.class, Boolean.class })__		assertEquals(String.class,_			resolveReturnTypeForGenericMethod(notParameterizedWithArguments, new Object[] { 99, true }))___		Method createProxy = findMethod(MyTypeWithMethods.class, "createProxy", new Class[] { Object.class })__		assertEquals(String.class, resolveReturnTypeForGenericMethod(createProxy, new Object[] { "foo" }))___		Method createNamedProxyWithDifferentTypes = findMethod(MyTypeWithMethods.class, "createNamedProxy",_			new Class[] { String.class, Object.class })__		_		assertNull(resolveReturnTypeForGenericMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma" }))__		assertEquals(Long.class,_			resolveReturnTypeForGenericMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma", 99L }))___		Method createNamedProxyWithDuplicateTypes = findMethod(MyTypeWithMethods.class, "createNamedProxy",_			new Class[] { String.class, Object.class })__		assertEquals(String.class,_			resolveReturnTypeForGenericMethod(createNamedProxyWithDuplicateTypes, new Object[] { "enigma", "foo" }))___		Method createMock = findMethod(MyTypeWithMethods.class, "createMock", new Class[] { Class.class })__		assertEquals(Runnable.class, resolveReturnTypeForGenericMethod(createMock, new Object[] { Runnable.class }))___		Method createNamedMock = findMethod(MyTypeWithMethods.class, "createNamedMock", new Class[] { String.class,_			Class.class })__		assertEquals(Runnable.class,_			resolveReturnTypeForGenericMethod(createNamedMock, new Object[] { "foo", Runnable.class }))___		Method createVMock = findMethod(MyTypeWithMethods.class, "createVMock",_			new Class[] { Object.class, Class.class })__		assertEquals(Runnable.class,_			resolveReturnTypeForGenericMethod(createVMock, new Object[] { "foo", Runnable.class }))___		_		_		_		Method extractValueFrom = findMethod(MyTypeWithMethods.class, "extractValueFrom",_			new Class[] { MyInterfaceType.class })__		assertEquals(Object.class,_			resolveReturnTypeForGenericMethod(extractValueFrom, new Object[] { new MySimpleInterfaceType() }))___		_		_		Map<Integer, Boolean> map = new HashMap<Integer, Boolean>()__		map.put(0, false)__		map.put(1, true)__		Method extractMagicValue = findMethod(MyTypeWithMethods.class, "extractMagicValue", new Class[] { Map.class })__		assertEquals(Object.class, resolveReturnTypeForGenericMethod(extractMagicValue, new Object[] { map }))__	};since,3,2;test,public,void,generic,method,return,types,method,not,parameterized,find,method,my,type,with,methods,class,not,parameterized,new,class,assert,equals,string,class,resolve,return,type,for,generic,method,not,parameterized,new,object,method,not,parameterized,with,arguments,find,method,my,type,with,methods,class,not,parameterized,with,arguments,new,class,integer,class,boolean,class,assert,equals,string,class,resolve,return,type,for,generic,method,not,parameterized,with,arguments,new,object,99,true,method,create,proxy,find,method,my,type,with,methods,class,create,proxy,new,class,object,class,assert,equals,string,class,resolve,return,type,for,generic,method,create,proxy,new,object,foo,method,create,named,proxy,with,different,types,find,method,my,type,with,methods,class,create,named,proxy,new,class,string,class,object,class,assert,null,resolve,return,type,for,generic,method,create,named,proxy,with,different,types,new,object,enigma,assert,equals,long,class,resolve,return,type,for,generic,method,create,named,proxy,with,different,types,new,object,enigma,99l,method,create,named,proxy,with,duplicate,types,find,method,my,type,with,methods,class,create,named,proxy,new,class,string,class,object,class,assert,equals,string,class,resolve,return,type,for,generic,method,create,named,proxy,with,duplicate,types,new,object,enigma,foo,method,create,mock,find,method,my,type,with,methods,class,create,mock,new,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,mock,new,object,runnable,class,method,create,named,mock,find,method,my,type,with,methods,class,create,named,mock,new,class,string,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,named,mock,new,object,foo,runnable,class,method,create,vmock,find,method,my,type,with,methods,class,create,vmock,new,class,object,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,vmock,new,object,foo,runnable,class,method,extract,value,from,find,method,my,type,with,methods,class,extract,value,from,new,class,my,interface,type,class,assert,equals,object,class,resolve,return,type,for,generic,method,extract,value,from,new,object,new,my,simple,interface,type,map,integer,boolean,map,new,hash,map,integer,boolean,map,put,0,false,map,put,1,true,method,extract,magic,value,find,method,my,type,with,methods,class,extract,magic,value,new,class,map,class,assert,equals,object,class,resolve,return,type,for,generic,method,extract,magic,value,new,object,map
GenericTypeResolverTests -> @Test 	public void genericMethodReturnTypes();1372363092;@since 3.2;@Test_	public void genericMethodReturnTypes() {__		Method notParameterized = findMethod(MyTypeWithMethods.class, "notParameterized", new Class[] {})__		assertEquals(String.class, resolveReturnTypeForGenericMethod(notParameterized, new Object[] {}))___		Method notParameterizedWithArguments = findMethod(MyTypeWithMethods.class, "notParameterizedWithArguments",_			new Class[] { Integer.class, Boolean.class })__		assertEquals(String.class,_			resolveReturnTypeForGenericMethod(notParameterizedWithArguments, new Object[] { 99, true }))___		Method createProxy = findMethod(MyTypeWithMethods.class, "createProxy", new Class[] { Object.class })__		assertEquals(String.class, resolveReturnTypeForGenericMethod(createProxy, new Object[] { "foo" }))___		Method createNamedProxyWithDifferentTypes = findMethod(MyTypeWithMethods.class, "createNamedProxy",_			new Class[] { String.class, Object.class })__		_		assertNull(resolveReturnTypeForGenericMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma" }))__		assertEquals(Long.class,_			resolveReturnTypeForGenericMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma", 99L }))___		Method createNamedProxyWithDuplicateTypes = findMethod(MyTypeWithMethods.class, "createNamedProxy",_			new Class[] { String.class, Object.class })__		assertEquals(String.class,_			resolveReturnTypeForGenericMethod(createNamedProxyWithDuplicateTypes, new Object[] { "enigma", "foo" }))___		Method createMock = findMethod(MyTypeWithMethods.class, "createMock", new Class[] { Class.class })__		assertEquals(Runnable.class, resolveReturnTypeForGenericMethod(createMock, new Object[] { Runnable.class }))___		Method createNamedMock = findMethod(MyTypeWithMethods.class, "createNamedMock", new Class[] { String.class,_			Class.class })__		assertEquals(Runnable.class,_			resolveReturnTypeForGenericMethod(createNamedMock, new Object[] { "foo", Runnable.class }))___		Method createVMock = findMethod(MyTypeWithMethods.class, "createVMock",_			new Class[] { Object.class, Class.class })__		assertEquals(Runnable.class,_			resolveReturnTypeForGenericMethod(createVMock, new Object[] { "foo", Runnable.class }))___		_		_		_		Method extractValueFrom = findMethod(MyTypeWithMethods.class, "extractValueFrom",_			new Class[] { MyInterfaceType.class })__		assertEquals(Object.class,_			resolveReturnTypeForGenericMethod(extractValueFrom, new Object[] { new MySimpleInterfaceType() }))___		_		_		Map<Integer, Boolean> map = new HashMap<Integer, Boolean>()__		map.put(0, false)__		map.put(1, true)__		Method extractMagicValue = findMethod(MyTypeWithMethods.class, "extractMagicValue", new Class[] { Map.class })__		assertEquals(Object.class, resolveReturnTypeForGenericMethod(extractMagicValue, new Object[] { map }))__	};since,3,2;test,public,void,generic,method,return,types,method,not,parameterized,find,method,my,type,with,methods,class,not,parameterized,new,class,assert,equals,string,class,resolve,return,type,for,generic,method,not,parameterized,new,object,method,not,parameterized,with,arguments,find,method,my,type,with,methods,class,not,parameterized,with,arguments,new,class,integer,class,boolean,class,assert,equals,string,class,resolve,return,type,for,generic,method,not,parameterized,with,arguments,new,object,99,true,method,create,proxy,find,method,my,type,with,methods,class,create,proxy,new,class,object,class,assert,equals,string,class,resolve,return,type,for,generic,method,create,proxy,new,object,foo,method,create,named,proxy,with,different,types,find,method,my,type,with,methods,class,create,named,proxy,new,class,string,class,object,class,assert,null,resolve,return,type,for,generic,method,create,named,proxy,with,different,types,new,object,enigma,assert,equals,long,class,resolve,return,type,for,generic,method,create,named,proxy,with,different,types,new,object,enigma,99l,method,create,named,proxy,with,duplicate,types,find,method,my,type,with,methods,class,create,named,proxy,new,class,string,class,object,class,assert,equals,string,class,resolve,return,type,for,generic,method,create,named,proxy,with,duplicate,types,new,object,enigma,foo,method,create,mock,find,method,my,type,with,methods,class,create,mock,new,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,mock,new,object,runnable,class,method,create,named,mock,find,method,my,type,with,methods,class,create,named,mock,new,class,string,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,named,mock,new,object,foo,runnable,class,method,create,vmock,find,method,my,type,with,methods,class,create,vmock,new,class,object,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,vmock,new,object,foo,runnable,class,method,extract,value,from,find,method,my,type,with,methods,class,extract,value,from,new,class,my,interface,type,class,assert,equals,object,class,resolve,return,type,for,generic,method,extract,value,from,new,object,new,my,simple,interface,type,map,integer,boolean,map,new,hash,map,integer,boolean,map,put,0,false,map,put,1,true,method,extract,magic,value,find,method,my,type,with,methods,class,extract,magic,value,new,class,map,class,assert,equals,object,class,resolve,return,type,for,generic,method,extract,magic,value,new,object,map
GenericTypeResolverTests -> @Test 	public void genericMethodReturnTypes();1377020217;@since 3.2;@Test_	public void genericMethodReturnTypes() {_		Method notParameterized = findMethod(MyTypeWithMethods.class, "notParameterized", new Class[] {})__		assertEquals(String.class, resolveReturnTypeForGenericMethod(notParameterized, new Object[] {}))___		Method notParameterizedWithArguments = findMethod(MyTypeWithMethods.class, "notParameterizedWithArguments",_			new Class[] { Integer.class, Boolean.class })__		assertEquals(String.class,_			resolveReturnTypeForGenericMethod(notParameterizedWithArguments, new Object[] { 99, true }))___		Method createProxy = findMethod(MyTypeWithMethods.class, "createProxy", new Class[] { Object.class })__		assertEquals(String.class, resolveReturnTypeForGenericMethod(createProxy, new Object[] { "foo" }))___		Method createNamedProxyWithDifferentTypes = findMethod(MyTypeWithMethods.class, "createNamedProxy",_			new Class[] { String.class, Object.class })__		_		assertNull(resolveReturnTypeForGenericMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma" }))__		assertEquals(Long.class,_			resolveReturnTypeForGenericMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma", 99L }))___		Method createNamedProxyWithDuplicateTypes = findMethod(MyTypeWithMethods.class, "createNamedProxy",_			new Class[] { String.class, Object.class })__		assertEquals(String.class,_			resolveReturnTypeForGenericMethod(createNamedProxyWithDuplicateTypes, new Object[] { "enigma", "foo" }))___		Method createMock = findMethod(MyTypeWithMethods.class, "createMock", new Class[] { Class.class })__		assertEquals(Runnable.class, resolveReturnTypeForGenericMethod(createMock, new Object[] { Runnable.class }))___		Method createNamedMock = findMethod(MyTypeWithMethods.class, "createNamedMock", new Class[] { String.class,_			Class.class })__		assertEquals(Runnable.class,_			resolveReturnTypeForGenericMethod(createNamedMock, new Object[] { "foo", Runnable.class }))___		Method createVMock = findMethod(MyTypeWithMethods.class, "createVMock",_			new Class[] { Object.class, Class.class })__		assertEquals(Runnable.class,_			resolveReturnTypeForGenericMethod(createVMock, new Object[] { "foo", Runnable.class }))___		_		_		_		Method extractValueFrom = findMethod(MyTypeWithMethods.class, "extractValueFrom",_			new Class[] { MyInterfaceType.class })__		assertEquals(Object.class,_			resolveReturnTypeForGenericMethod(extractValueFrom, new Object[] { new MySimpleInterfaceType() }))___		_		_		Map<Integer, Boolean> map = new HashMap<Integer, Boolean>()__		map.put(0, false)__		map.put(1, true)__		Method extractMagicValue = findMethod(MyTypeWithMethods.class, "extractMagicValue", new Class[] { Map.class })__		assertEquals(Object.class, resolveReturnTypeForGenericMethod(extractMagicValue, new Object[] { map }))__	};since,3,2;test,public,void,generic,method,return,types,method,not,parameterized,find,method,my,type,with,methods,class,not,parameterized,new,class,assert,equals,string,class,resolve,return,type,for,generic,method,not,parameterized,new,object,method,not,parameterized,with,arguments,find,method,my,type,with,methods,class,not,parameterized,with,arguments,new,class,integer,class,boolean,class,assert,equals,string,class,resolve,return,type,for,generic,method,not,parameterized,with,arguments,new,object,99,true,method,create,proxy,find,method,my,type,with,methods,class,create,proxy,new,class,object,class,assert,equals,string,class,resolve,return,type,for,generic,method,create,proxy,new,object,foo,method,create,named,proxy,with,different,types,find,method,my,type,with,methods,class,create,named,proxy,new,class,string,class,object,class,assert,null,resolve,return,type,for,generic,method,create,named,proxy,with,different,types,new,object,enigma,assert,equals,long,class,resolve,return,type,for,generic,method,create,named,proxy,with,different,types,new,object,enigma,99l,method,create,named,proxy,with,duplicate,types,find,method,my,type,with,methods,class,create,named,proxy,new,class,string,class,object,class,assert,equals,string,class,resolve,return,type,for,generic,method,create,named,proxy,with,duplicate,types,new,object,enigma,foo,method,create,mock,find,method,my,type,with,methods,class,create,mock,new,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,mock,new,object,runnable,class,method,create,named,mock,find,method,my,type,with,methods,class,create,named,mock,new,class,string,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,named,mock,new,object,foo,runnable,class,method,create,vmock,find,method,my,type,with,methods,class,create,vmock,new,class,object,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,vmock,new,object,foo,runnable,class,method,extract,value,from,find,method,my,type,with,methods,class,extract,value,from,new,class,my,interface,type,class,assert,equals,object,class,resolve,return,type,for,generic,method,extract,value,from,new,object,new,my,simple,interface,type,map,integer,boolean,map,new,hash,map,integer,boolean,map,put,0,false,map,put,1,true,method,extract,magic,value,find,method,my,type,with,methods,class,extract,magic,value,new,class,map,class,assert,equals,object,class,resolve,return,type,for,generic,method,extract,magic,value,new,object,map
GenericTypeResolverTests -> @Test 	public void genericMethodReturnTypes();1381389591;@since 3.2;@Test_	public void genericMethodReturnTypes() {_		Method notParameterized = findMethod(MyTypeWithMethods.class, "notParameterized", new Class[] {})__		assertEquals(String.class, resolveReturnTypeForGenericMethod(notParameterized, new Object[] {}))___		Method notParameterizedWithArguments = findMethod(MyTypeWithMethods.class, "notParameterizedWithArguments",_			new Class[] { Integer.class, Boolean.class })__		assertEquals(String.class,_			resolveReturnTypeForGenericMethod(notParameterizedWithArguments, new Object[] { 99, true }))___		Method createProxy = findMethod(MyTypeWithMethods.class, "createProxy", new Class[] { Object.class })__		assertEquals(String.class, resolveReturnTypeForGenericMethod(createProxy, new Object[] { "foo" }))___		Method createNamedProxyWithDifferentTypes = findMethod(MyTypeWithMethods.class, "createNamedProxy",_			new Class[] { String.class, Object.class })__		_		assertNull(resolveReturnTypeForGenericMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma" }))__		assertEquals(Long.class,_			resolveReturnTypeForGenericMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma", 99L }))___		Method createNamedProxyWithDuplicateTypes = findMethod(MyTypeWithMethods.class, "createNamedProxy",_			new Class[] { String.class, Object.class })__		assertEquals(String.class,_			resolveReturnTypeForGenericMethod(createNamedProxyWithDuplicateTypes, new Object[] { "enigma", "foo" }))___		Method createMock = findMethod(MyTypeWithMethods.class, "createMock", new Class[] { Class.class })__		assertEquals(Runnable.class, resolveReturnTypeForGenericMethod(createMock, new Object[] { Runnable.class }))___		Method createNamedMock = findMethod(MyTypeWithMethods.class, "createNamedMock", new Class[] { String.class,_			Class.class })__		assertEquals(Runnable.class,_			resolveReturnTypeForGenericMethod(createNamedMock, new Object[] { "foo", Runnable.class }))___		Method createVMock = findMethod(MyTypeWithMethods.class, "createVMock",_			new Class[] { Object.class, Class.class })__		assertEquals(Runnable.class,_			resolveReturnTypeForGenericMethod(createVMock, new Object[] { "foo", Runnable.class }))___		_		_		_		Method extractValueFrom = findMethod(MyTypeWithMethods.class, "extractValueFrom",_			new Class[] { MyInterfaceType.class })__		assertEquals(Object.class,_			resolveReturnTypeForGenericMethod(extractValueFrom, new Object[] { new MySimpleInterfaceType() }))___		_		_		Map<Integer, Boolean> map = new HashMap<Integer, Boolean>()__		map.put(0, false)__		map.put(1, true)__		Method extractMagicValue = findMethod(MyTypeWithMethods.class, "extractMagicValue", new Class[] { Map.class })__		assertEquals(Object.class, resolveReturnTypeForGenericMethod(extractMagicValue, new Object[] { map }))__	};since,3,2;test,public,void,generic,method,return,types,method,not,parameterized,find,method,my,type,with,methods,class,not,parameterized,new,class,assert,equals,string,class,resolve,return,type,for,generic,method,not,parameterized,new,object,method,not,parameterized,with,arguments,find,method,my,type,with,methods,class,not,parameterized,with,arguments,new,class,integer,class,boolean,class,assert,equals,string,class,resolve,return,type,for,generic,method,not,parameterized,with,arguments,new,object,99,true,method,create,proxy,find,method,my,type,with,methods,class,create,proxy,new,class,object,class,assert,equals,string,class,resolve,return,type,for,generic,method,create,proxy,new,object,foo,method,create,named,proxy,with,different,types,find,method,my,type,with,methods,class,create,named,proxy,new,class,string,class,object,class,assert,null,resolve,return,type,for,generic,method,create,named,proxy,with,different,types,new,object,enigma,assert,equals,long,class,resolve,return,type,for,generic,method,create,named,proxy,with,different,types,new,object,enigma,99l,method,create,named,proxy,with,duplicate,types,find,method,my,type,with,methods,class,create,named,proxy,new,class,string,class,object,class,assert,equals,string,class,resolve,return,type,for,generic,method,create,named,proxy,with,duplicate,types,new,object,enigma,foo,method,create,mock,find,method,my,type,with,methods,class,create,mock,new,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,mock,new,object,runnable,class,method,create,named,mock,find,method,my,type,with,methods,class,create,named,mock,new,class,string,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,named,mock,new,object,foo,runnable,class,method,create,vmock,find,method,my,type,with,methods,class,create,vmock,new,class,object,class,class,class,assert,equals,runnable,class,resolve,return,type,for,generic,method,create,vmock,new,object,foo,runnable,class,method,extract,value,from,find,method,my,type,with,methods,class,extract,value,from,new,class,my,interface,type,class,assert,equals,object,class,resolve,return,type,for,generic,method,extract,value,from,new,object,new,my,simple,interface,type,map,integer,boolean,map,new,hash,map,integer,boolean,map,put,0,false,map,put,1,true,method,extract,magic,value,find,method,my,type,with,methods,class,extract,magic,value,new,class,map,class,assert,equals,object,class,resolve,return,type,for,generic,method,extract,magic,value,new,object,map
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1340122048;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1344186578;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1353522416;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1356735495;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1372363092;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1377020217;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1381389591;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1381787404;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1382747217;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1383155455;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1383229700;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1385412762;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1391465807;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1399392386;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1431022697;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1431375743;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1440078573;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1458843770;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1467730834;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1467844672;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1491831389;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1491898149;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <MOCK> MOCK createMock(Class<MOCK> toMock);1492093025;Simulates factory methods found in libraries such as Mockito and EasyMock.;public static <MOCK> MOCK createMock(Class<MOCK> toMock) {_			return null__		};simulates,factory,methods,found,in,libraries,such,as,mockito,and,easy,mock;public,static,mock,mock,create,mock,class,mock,to,mock,return,null
GenericTypeResolverTests -> @Test 	public void testResolveType();1356735495;@since 3.2;@Test_	public void testResolveType() {_			Method intMessageMethod = findMethod(MyTypeWithMethods.class, "readIntegerInputMessage", MyInterfaceType.class)__			MethodParameter intMessageMethodParam = new MethodParameter(intMessageMethod, 0)__			assertEquals(MyInterfaceType.class,_							resolveType(intMessageMethodParam.getGenericParameterType(), new HashMap<TypeVariable, Type>()))___			Method intArrMessageMethod = findMethod(MyTypeWithMethods.class, "readIntegerArrayInputMessage", MyInterfaceType[].class)__			MethodParameter intArrMessageMethodParam = new MethodParameter(intArrMessageMethod, 0)__			assertEquals(MyInterfaceType[].class,_							resolveType(intArrMessageMethodParam.getGenericParameterType(), new HashMap<TypeVariable, Type>()))___			Method genericArrMessageMethod = findMethod(MySimpleTypeWithMethods.class, "readGenericArrayInputMessage", Object[].class)__			MethodParameter genericArrMessageMethodParam = new MethodParameter(genericArrMessageMethod, 0)__			Map<TypeVariable, Type> varMap = getTypeVariableMap(MySimpleTypeWithMethods.class)__			assertEquals(Integer[].class, resolveType(genericArrMessageMethodParam.getGenericParameterType(), varMap))__	};since,3,2;test,public,void,test,resolve,type,method,int,message,method,find,method,my,type,with,methods,class,read,integer,input,message,my,interface,type,class,method,parameter,int,message,method,param,new,method,parameter,int,message,method,0,assert,equals,my,interface,type,class,resolve,type,int,message,method,param,get,generic,parameter,type,new,hash,map,type,variable,type,method,int,arr,message,method,find,method,my,type,with,methods,class,read,integer,array,input,message,my,interface,type,class,method,parameter,int,arr,message,method,param,new,method,parameter,int,arr,message,method,0,assert,equals,my,interface,type,class,resolve,type,int,arr,message,method,param,get,generic,parameter,type,new,hash,map,type,variable,type,method,generic,arr,message,method,find,method,my,simple,type,with,methods,class,read,generic,array,input,message,object,class,method,parameter,generic,arr,message,method,param,new,method,parameter,generic,arr,message,method,0,map,type,variable,type,var,map,get,type,variable,map,my,simple,type,with,methods,class,assert,equals,integer,class,resolve,type,generic,arr,message,method,param,get,generic,parameter,type,var,map
GenericTypeResolverTests -> @Test 	public void testResolveType();1372363092;@since 3.2;@Test_	public void testResolveType() {_		Method intMessageMethod = findMethod(MyTypeWithMethods.class, "readIntegerInputMessage", MyInterfaceType.class)__		MethodParameter intMessageMethodParam = new MethodParameter(intMessageMethod, 0)__		assertEquals(MyInterfaceType.class,_			resolveType(intMessageMethodParam.getGenericParameterType(), new HashMap<TypeVariable, Type>()))___		Method intArrMessageMethod = findMethod(MyTypeWithMethods.class, "readIntegerArrayInputMessage",_			MyInterfaceType[].class)__		MethodParameter intArrMessageMethodParam = new MethodParameter(intArrMessageMethod, 0)__		assertEquals(MyInterfaceType[].class,_			resolveType(intArrMessageMethodParam.getGenericParameterType(), new HashMap<TypeVariable, Type>()))___		Method genericArrMessageMethod = findMethod(MySimpleTypeWithMethods.class, "readGenericArrayInputMessage",_			Object[].class)__		MethodParameter genericArrMessageMethodParam = new MethodParameter(genericArrMessageMethod, 0)__		Map<TypeVariable, Type> varMap = getTypeVariableMap(MySimpleTypeWithMethods.class)__		assertEquals(Integer[].class, resolveType(genericArrMessageMethodParam.getGenericParameterType(), varMap))__	};since,3,2;test,public,void,test,resolve,type,method,int,message,method,find,method,my,type,with,methods,class,read,integer,input,message,my,interface,type,class,method,parameter,int,message,method,param,new,method,parameter,int,message,method,0,assert,equals,my,interface,type,class,resolve,type,int,message,method,param,get,generic,parameter,type,new,hash,map,type,variable,type,method,int,arr,message,method,find,method,my,type,with,methods,class,read,integer,array,input,message,my,interface,type,class,method,parameter,int,arr,message,method,param,new,method,parameter,int,arr,message,method,0,assert,equals,my,interface,type,class,resolve,type,int,arr,message,method,param,get,generic,parameter,type,new,hash,map,type,variable,type,method,generic,arr,message,method,find,method,my,simple,type,with,methods,class,read,generic,array,input,message,object,class,method,parameter,generic,arr,message,method,param,new,method,parameter,generic,arr,message,method,0,map,type,variable,type,var,map,get,type,variable,map,my,simple,type,with,methods,class,assert,equals,integer,class,resolve,type,generic,arr,message,method,param,get,generic,parameter,type,var,map
GenericTypeResolverTests -> @Test 	public void testResolveType();1377020217;@since 3.2;@Test_	public void testResolveType() {_		Method intMessageMethod = findMethod(MyTypeWithMethods.class, "readIntegerInputMessage", MyInterfaceType.class)__		MethodParameter intMessageMethodParam = new MethodParameter(intMessageMethod, 0)__		assertEquals(MyInterfaceType.class,_			resolveType(intMessageMethodParam.getGenericParameterType(), new HashMap<TypeVariable, Type>()))___		Method intArrMessageMethod = findMethod(MyTypeWithMethods.class, "readIntegerArrayInputMessage",_			MyInterfaceType[].class)__		MethodParameter intArrMessageMethodParam = new MethodParameter(intArrMessageMethod, 0)__		assertEquals(MyInterfaceType[].class,_			resolveType(intArrMessageMethodParam.getGenericParameterType(), new HashMap<TypeVariable, Type>()))___		Method genericArrMessageMethod = findMethod(MySimpleTypeWithMethods.class, "readGenericArrayInputMessage",_			Object[].class)__		MethodParameter genericArrMessageMethodParam = new MethodParameter(genericArrMessageMethod, 0)__		Map<TypeVariable, Type> varMap = getTypeVariableMap(MySimpleTypeWithMethods.class)__		assertEquals(Integer[].class, resolveType(genericArrMessageMethodParam.getGenericParameterType(), varMap))__	};since,3,2;test,public,void,test,resolve,type,method,int,message,method,find,method,my,type,with,methods,class,read,integer,input,message,my,interface,type,class,method,parameter,int,message,method,param,new,method,parameter,int,message,method,0,assert,equals,my,interface,type,class,resolve,type,int,message,method,param,get,generic,parameter,type,new,hash,map,type,variable,type,method,int,arr,message,method,find,method,my,type,with,methods,class,read,integer,array,input,message,my,interface,type,class,method,parameter,int,arr,message,method,param,new,method,parameter,int,arr,message,method,0,assert,equals,my,interface,type,class,resolve,type,int,arr,message,method,param,get,generic,parameter,type,new,hash,map,type,variable,type,method,generic,arr,message,method,find,method,my,simple,type,with,methods,class,read,generic,array,input,message,object,class,method,parameter,generic,arr,message,method,param,new,method,parameter,generic,arr,message,method,0,map,type,variable,type,var,map,get,type,variable,map,my,simple,type,with,methods,class,assert,equals,integer,class,resolve,type,generic,arr,message,method,param,get,generic,parameter,type,var,map
GenericTypeResolverTests -> @Test 	public void testResolveType();1381389591;@since 3.2;@Test_	public void testResolveType() {_		Method intMessageMethod = findMethod(MyTypeWithMethods.class, "readIntegerInputMessage", MyInterfaceType.class)__		MethodParameter intMessageMethodParam = new MethodParameter(intMessageMethod, 0)__		assertEquals(MyInterfaceType.class,_			resolveType(intMessageMethodParam.getGenericParameterType(), new HashMap<TypeVariable, Type>()))___		Method intArrMessageMethod = findMethod(MyTypeWithMethods.class, "readIntegerArrayInputMessage",_			MyInterfaceType[].class)__		MethodParameter intArrMessageMethodParam = new MethodParameter(intArrMessageMethod, 0)__		assertEquals(MyInterfaceType[].class,_			resolveType(intArrMessageMethodParam.getGenericParameterType(), new HashMap<TypeVariable, Type>()))___		Method genericArrMessageMethod = findMethod(MySimpleTypeWithMethods.class, "readGenericArrayInputMessage",_			Object[].class)__		MethodParameter genericArrMessageMethodParam = new MethodParameter(genericArrMessageMethod, 0)__		Map<TypeVariable, Type> varMap = getTypeVariableMap(MySimpleTypeWithMethods.class)__		assertEquals(Integer[].class, resolveType(genericArrMessageMethodParam.getGenericParameterType(), varMap))__	};since,3,2;test,public,void,test,resolve,type,method,int,message,method,find,method,my,type,with,methods,class,read,integer,input,message,my,interface,type,class,method,parameter,int,message,method,param,new,method,parameter,int,message,method,0,assert,equals,my,interface,type,class,resolve,type,int,message,method,param,get,generic,parameter,type,new,hash,map,type,variable,type,method,int,arr,message,method,find,method,my,type,with,methods,class,read,integer,array,input,message,my,interface,type,class,method,parameter,int,arr,message,method,param,new,method,parameter,int,arr,message,method,0,assert,equals,my,interface,type,class,resolve,type,int,arr,message,method,param,get,generic,parameter,type,new,hash,map,type,variable,type,method,generic,arr,message,method,find,method,my,simple,type,with,methods,class,read,generic,array,input,message,object,class,method,parameter,generic,arr,message,method,param,new,method,parameter,generic,arr,message,method,0,map,type,variable,type,var,map,get,type,variable,map,my,simple,type,with,methods,class,assert,equals,integer,class,resolve,type,generic,arr,message,method,param,get,generic,parameter,type,var,map
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1340122048;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1344186578;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1353522416;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1356735495;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1372363092;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1377020217;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1381389591;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1381787404;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1382747217;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1383155455;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1383229700;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1385412762;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1391465807;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1399392386;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1431022697;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1431375743;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1440078573;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1458843770;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1467730834;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1467844672;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1491831389;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1491898149;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <V extends Object, T> T createVMock(V name, Class<T> toMock);1492093025;Similar to {@link #createNamedMock(String, Class)} but adds an additional_parameterized type.;public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {_			return null__		};similar,to,link,create,named,mock,string,class,but,adds,an,additional,parameterized,type;public,static,v,extends,object,t,t,create,vmock,v,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1340122048;Similar to {@link #createProxy(Object)} but adds an additional argument_before the argument of type {@code T}. Note that they may potentially_be of the same time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1344186578;Similar to {@link #createProxy(Object)} but adds an additional argument_before the argument of type {@code T}. Note that they may potentially_be of the same time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1353522416;Similar to {@link #createProxy(Object)} but adds an additional argument_before the argument of type {@code T}. Note that they may potentially_be of the same time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1356735495;Similar to {@link #createProxy(Object)} but adds an additional argument_before the argument of type {@code T}. Note that they may potentially_be of the same time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1372363092;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1377020217;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1381389591;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1381787404;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1382747217;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1383155455;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1383229700;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1385412762;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1391465807;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1399392386;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1431022697;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1431375743;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1440078573;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1458843770;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1467730834;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1467844672;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1491831389;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1491898149;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedProxy(String name, T object);1492093025;Similar to {@link #createProxy(Object)} but adds an additional argument before_the argument of type {@code T}. Note that they may potentially be of the same_time when invoked!;public static <T> T createNamedProxy(String name, T object) {_			return null__		};similar,to,link,create,proxy,object,but,adds,an,additional,argument,before,the,argument,of,type,code,t,note,that,they,may,potentially,be,of,the,same,time,when,invoked;public,static,t,t,create,named,proxy,string,name,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1340122048;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1344186578;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1353522416;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1356735495;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1372363092;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1377020217;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1381389591;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1381787404;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1382747217;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1383155455;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1383229700;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1385412762;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1391465807;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1399392386;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1431022697;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1431375743;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1440078573;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1458843770;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1467730834;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1467844672;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1491831389;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1491898149;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <K, V> V extractMagicValue(Map<K, V> map);1492093025;Extract some magic value from the supplied map.;public static <K, V> V extractMagicValue(Map<K, V> map) {_			return null__		};extract,some,magic,value,from,the,supplied,map;public,static,k,v,v,extract,magic,value,map,k,v,map,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1340122048;Simulates a factory method that wraps the supplied object in a proxy_of the same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1344186578;Simulates a factory method that wraps the supplied object in a proxy_of the same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1353522416;Simulates a factory method that wraps the supplied object in a proxy_of the same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1356735495;Simulates a factory method that wraps the supplied object in a proxy_of the same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1372363092;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1377020217;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1381389591;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1381787404;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1382747217;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1383155455;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1383229700;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1385412762;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1391465807;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1399392386;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1431022697;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1431375743;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1440078573;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1458843770;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1467730834;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1467844672;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1491831389;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1491898149;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createProxy(T object);1492093025;Simulates a factory method that wraps the supplied object in a proxy of the_same type.;public static <T> T createProxy(T object) {_			return null__		};simulates,a,factory,method,that,wraps,the,supplied,object,in,a,proxy,of,the,same,type;public,static,t,t,create,proxy,t,object,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1340122048;Similar to {@link #createMock(Class)} but adds an additional method_argument before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1344186578;Similar to {@link #createMock(Class)} but adds an additional method_argument before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1353522416;Similar to {@link #createMock(Class)} but adds an additional method_argument before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1356735495;Similar to {@link #createMock(Class)} but adds an additional method_argument before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1372363092;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1377020217;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1381389591;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1381787404;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1382747217;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1383155455;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1383229700;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1385412762;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1391465807;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1399392386;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1431022697;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1431375743;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1440078573;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1458843770;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1467730834;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1467844672;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1491831389;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1491898149;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
GenericTypeResolverTests -> MyTypeWithMethods -> public static <T> T createNamedMock(String name, Class<T> toMock);1492093025;Similar to {@link #createMock(Class)} but adds an additional method argument_before the parameterized argument.;public static <T> T createNamedMock(String name, Class<T> toMock) {_			return null__		};similar,to,link,create,mock,class,but,adds,an,additional,method,argument,before,the,parameterized,argument;public,static,t,t,create,named,mock,string,name,class,t,to,mock,return,null
