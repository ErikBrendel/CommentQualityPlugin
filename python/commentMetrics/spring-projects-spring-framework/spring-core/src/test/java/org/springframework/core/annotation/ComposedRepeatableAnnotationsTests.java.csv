commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void getNonRepeatableAnnotation() {     expectNonRepeatableAnnotation().     getMergedRepeatableAnnotations(getClass(), NonRepeatable.class). }
false;public;0;5;;@Test public void getInvalidRepeatableAnnotationContainerMissingValueAttribute() {     expectContainerMissingValueAttribute().     getMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerMissingValueAttribute.class). }
false;public;0;5;;@Test public void getInvalidRepeatableAnnotationContainerWithNonArrayValueAttribute() {     expectContainerWithNonArrayValueAttribute().     getMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithNonArrayValueAttribute.class). }
false;public;0;6;;@Test public void getInvalidRepeatableAnnotationContainerWithArrayValueAttributeButWrongComponentType() {     expectContainerWithArrayValueAttributeButWrongComponentType().     getMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithArrayValueAttributeButWrongComponentType.class). }
false;public;0;4;;@Test public void getRepeatableAnnotationsOnClass() {     assertGetRepeatableAnnotations(RepeatableClass.class). }
false;public;0;4;;@Test public void getRepeatableAnnotationsOnSuperclass() {     assertGetRepeatableAnnotations(SubRepeatableClass.class). }
false;public;0;4;;@Test public void getComposedRepeatableAnnotationsOnClass() {     assertGetRepeatableAnnotations(ComposedRepeatableClass.class). }
false;public;0;4;;@Test public void getComposedRepeatableAnnotationsMixedWithContainerOnClass() {     assertGetRepeatableAnnotations(ComposedRepeatableMixedWithContainerClass.class). }
false;public;0;4;;@Test public void getComposedContainerForRepeatableAnnotationsOnClass() {     assertGetRepeatableAnnotations(ComposedContainerClass.class). }
false;public;0;6;;@Test public void getNoninheritedComposedRepeatableAnnotationsOnClass() {     Class<?> element = NoninheritedRepeatableClass.class.     Set<Noninherited> annotations = getMergedRepeatableAnnotations(element, Noninherited.class).     assertNoninheritedRepeatableAnnotations(annotations). }
false;public;0;7;;@Test public void getNoninheritedComposedRepeatableAnnotationsOnSuperclass() {     Class<?> element = SubNoninheritedRepeatableClass.class.     Set<Noninherited> annotations = getMergedRepeatableAnnotations(element, Noninherited.class).     assertNotNull(annotations).     assertEquals(0, annotations.size()). }
false;public;0;5;;@Test public void findNonRepeatableAnnotation() {     expectNonRepeatableAnnotation().     findMergedRepeatableAnnotations(getClass(), NonRepeatable.class). }
false;public;0;5;;@Test public void findInvalidRepeatableAnnotationContainerMissingValueAttribute() {     expectContainerMissingValueAttribute().     findMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerMissingValueAttribute.class). }
false;public;0;5;;@Test public void findInvalidRepeatableAnnotationContainerWithNonArrayValueAttribute() {     expectContainerWithNonArrayValueAttribute().     findMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithNonArrayValueAttribute.class). }
false;public;0;6;;@Test public void findInvalidRepeatableAnnotationContainerWithArrayValueAttributeButWrongComponentType() {     expectContainerWithArrayValueAttributeButWrongComponentType().     findMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithArrayValueAttributeButWrongComponentType.class). }
false;public;0;4;;@Test public void findRepeatableAnnotationsOnClass() {     assertFindRepeatableAnnotations(RepeatableClass.class). }
false;public;0;4;;@Test public void findRepeatableAnnotationsOnSuperclass() {     assertFindRepeatableAnnotations(SubRepeatableClass.class). }
false;public;0;4;;@Test public void findComposedRepeatableAnnotationsOnClass() {     assertFindRepeatableAnnotations(ComposedRepeatableClass.class). }
false;public;0;4;;@Test public void findComposedRepeatableAnnotationsMixedWithContainerOnClass() {     assertFindRepeatableAnnotations(ComposedRepeatableMixedWithContainerClass.class). }
false;public;0;6;;@Test public void findNoninheritedComposedRepeatableAnnotationsOnClass() {     Class<?> element = NoninheritedRepeatableClass.class.     Set<Noninherited> annotations = findMergedRepeatableAnnotations(element, Noninherited.class).     assertNoninheritedRepeatableAnnotations(annotations). }
false;public;0;6;;@Test public void findNoninheritedComposedRepeatableAnnotationsOnSuperclass() {     Class<?> element = SubNoninheritedRepeatableClass.class.     Set<Noninherited> annotations = findMergedRepeatableAnnotations(element, Noninherited.class).     assertNoninheritedRepeatableAnnotations(annotations). }
false;public;0;4;;@Test public void findComposedContainerForRepeatableAnnotationsOnClass() {     assertFindRepeatableAnnotations(ComposedContainerClass.class). }
false;private;0;6;;private void expectNonRepeatableAnnotation() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage(startsWith("Annotation type must be a repeatable annotation")).     exception.expectMessage(containsString("failed to resolve container type for")).     exception.expectMessage(containsString(NonRepeatable.class.getName())). }
false;private;0;8;;private void expectContainerMissingValueAttribute() {     exception.expect(AnnotationConfigurationException.class).     exception.expectMessage(startsWith("Invalid declaration of container type")).     exception.expectMessage(containsString(ContainerMissingValueAttribute.class.getName())).     exception.expectMessage(containsString("for repeatable annotation")).     exception.expectMessage(containsString(InvalidRepeatable.class.getName())).     exception.expectCause(isA(NoSuchMethodException.class)). }
false;private;0;7;;private void expectContainerWithNonArrayValueAttribute() {     exception.expect(AnnotationConfigurationException.class).     exception.expectMessage(startsWith("Container type")).     exception.expectMessage(containsString(ContainerWithNonArrayValueAttribute.class.getName())).     exception.expectMessage(containsString("must declare a 'value' attribute for an array of type")).     exception.expectMessage(containsString(InvalidRepeatable.class.getName())). }
false;private;0;7;;private void expectContainerWithArrayValueAttributeButWrongComponentType() {     exception.expect(AnnotationConfigurationException.class).     exception.expectMessage(startsWith("Container type")).     exception.expectMessage(containsString(ContainerWithArrayValueAttributeButWrongComponentType.class.getName())).     exception.expectMessage(containsString("must declare a 'value' attribute for an array of type")).     exception.expectMessage(containsString(InvalidRepeatable.class.getName())). }
false;private;1;12;;private void assertGetRepeatableAnnotations(AnnotatedElement element) {     assertNotNull(element).     Set<PeteRepeat> peteRepeats = getMergedRepeatableAnnotations(element, PeteRepeat.class).     assertNotNull(peteRepeats).     assertEquals(3, peteRepeats.size()).     Iterator<PeteRepeat> iterator = peteRepeats.iterator().     assertEquals("A", iterator.next().value()).     assertEquals("B", iterator.next().value()).     assertEquals("C", iterator.next().value()). }
false;private;1;12;;private void assertFindRepeatableAnnotations(AnnotatedElement element) {     assertNotNull(element).     Set<PeteRepeat> peteRepeats = findMergedRepeatableAnnotations(element, PeteRepeat.class).     assertNotNull(peteRepeats).     assertEquals(3, peteRepeats.size()).     Iterator<PeteRepeat> iterator = peteRepeats.iterator().     assertEquals("A", iterator.next().value()).     assertEquals("B", iterator.next().value()).     assertEquals("C", iterator.next().value()). }
false;private;1;9;;private void assertNoninheritedRepeatableAnnotations(Set<Noninherited> annotations) {     assertNotNull(annotations).     assertEquals(3, annotations.size()).     Iterator<Noninherited> iterator = annotations.iterator().     assertEquals("A", iterator.next().value()).     assertEquals("B", iterator.next().value()).     assertEquals("C", iterator.next().value()). }
