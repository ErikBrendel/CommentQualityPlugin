commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void shouldNeedComparator() throws Exception {     new InvertibleComparator<>(null). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void shouldNeedComparatorWithAscending() throws Exception {     new InvertibleComparator<>(null, true). }
false;public;0;6;;@Test public void shouldDefaultToAscending() throws Exception {     InvertibleComparator<Integer> invertibleComparator = new InvertibleComparator<>(comparator).     assertThat(invertibleComparator.isAscending(), is(true)).     assertThat(invertibleComparator.compare(1, 2), is(-1)). }
false;public;0;9;;@Test public void shouldInvert() throws Exception {     InvertibleComparator<Integer> invertibleComparator = new InvertibleComparator<>(comparator).     assertThat(invertibleComparator.isAscending(), is(true)).     assertThat(invertibleComparator.compare(1, 2), is(-1)).     invertibleComparator.invertOrder().     assertThat(invertibleComparator.isAscending(), is(false)).     assertThat(invertibleComparator.compare(1, 2), is(1)). }
false;public;0;5;;@Test public void shouldCompareAscending() throws Exception {     InvertibleComparator<Integer> invertibleComparator = new InvertibleComparator<>(comparator, true).     assertThat(invertibleComparator.compare(1, 2), is(-1)). }
false;public;0;5;;@Test public void shouldCompareDescending() throws Exception {     InvertibleComparator<Integer> invertibleComparator = new InvertibleComparator<>(comparator, false).     assertThat(invertibleComparator.compare(1, 2), is(1)). }
