commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before // on JDK 9 @SuppressWarnings("deprecation") public void createXMLReader() throws Exception {     xmlReader = org.xml.sax.helpers.XMLReaderFactory.createXMLReader(). }
false;public;0;16;;@Test public void noNamespacePrefixes() throws Exception {     Assume.assumeTrue(wwwSpringframeworkOrgIsAccessible()).     StringWriter stringWriter = new StringWriter().     AbstractStaxHandler handler = createStaxHandler(new StreamResult(stringWriter)).     xmlReader.setContentHandler(handler).     xmlReader.setProperty("http://xml.org/sax/properties/lexical-handler", handler).     xmlReader.setFeature("http://xml.org/sax/features/namespaces", true).     xmlReader.setFeature("http://xml.org/sax/features/namespace-prefixes", false).     xmlReader.parse(new InputSource(new StringReader(COMPLEX_XML))).     assertThat(stringWriter.toString(), isSimilarTo(COMPLEX_XML).withNodeFilter(nodeFilter)). }
false;private,static;0;9;;private static boolean wwwSpringframeworkOrgIsAccessible() {     try {         new Socket("www.springframework.org", 80).close().     } catch (Exception e) {         return false.     }     return true. }
false;public;0;16;;@Test public void namespacePrefixes() throws Exception {     Assume.assumeTrue(wwwSpringframeworkOrgIsAccessible()).     StringWriter stringWriter = new StringWriter().     AbstractStaxHandler handler = createStaxHandler(new StreamResult(stringWriter)).     xmlReader.setContentHandler(handler).     xmlReader.setProperty("http://xml.org/sax/properties/lexical-handler", handler).     xmlReader.setFeature("http://xml.org/sax/features/namespaces", true).     xmlReader.setFeature("http://xml.org/sax/features/namespace-prefixes", true).     xmlReader.parse(new InputSource(new StringReader(COMPLEX_XML))).     assertThat(stringWriter.toString(), isSimilarTo(COMPLEX_XML).withNodeFilter(nodeFilter)). }
false;public;0;20;;@Test public void noNamespacePrefixesDom() throws Exception {     DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance().     documentBuilderFactory.setNamespaceAware(true).     DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder().     Document expected = documentBuilder.parse(new InputSource(new StringReader(SIMPLE_XML))).     Document result = documentBuilder.newDocument().     AbstractStaxHandler handler = createStaxHandler(new DOMResult(result)).     xmlReader.setContentHandler(handler).     xmlReader.setProperty("http://xml.org/sax/properties/lexical-handler", handler).     xmlReader.setFeature("http://xml.org/sax/features/namespaces", true).     xmlReader.setFeature("http://xml.org/sax/features/namespace-prefixes", false).     xmlReader.parse(new InputSource(new StringReader(SIMPLE_XML))).     assertThat(result, isSimilarTo(expected).withNodeFilter(nodeFilter)). }
false;public;0;20;;@Test public void namespacePrefixesDom() throws Exception {     DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance().     documentBuilderFactory.setNamespaceAware(true).     DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder().     Document expected = documentBuilder.parse(new InputSource(new StringReader(SIMPLE_XML))).     Document result = documentBuilder.newDocument().     AbstractStaxHandler handler = createStaxHandler(new DOMResult(result)).     xmlReader.setContentHandler(handler).     xmlReader.setProperty("http://xml.org/sax/properties/lexical-handler", handler).     xmlReader.setFeature("http://xml.org/sax/features/namespaces", true).     xmlReader.setFeature("http://xml.org/sax/features/namespace-prefixes", true).     xmlReader.parse(new InputSource(new StringReader(SIMPLE_XML))).     assertThat(expected, isSimilarTo(result).withNodeFilter(nodeFilter)). }
false;protected,abstract;1;1;;protected abstract AbstractStaxHandler createStaxHandler(Result result) throws XMLStreamException.
