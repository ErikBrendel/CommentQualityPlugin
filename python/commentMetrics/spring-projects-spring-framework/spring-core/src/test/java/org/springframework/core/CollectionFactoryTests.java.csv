# id;timestamp;commentText;codeText;commentWords;codeWords
CollectionFactoryTests -> @Test 	public void createApproximateCollectionIsNotTypeSafe();1418229361;The test demonstrates that the generics-based API for_{@link CollectionFactory#createApproximateCollection(Object, int)}_is not type-safe._<p>Specifically, the parameterized type {@code E} is not bound to_the type of elements contained in the {@code collection} argument_passed to {@code createApproximateCollection()}. Thus casting the_value returned by {@link EnumSet#copyOf(EnumSet)} to_{@code (Collection<E>)} cannot guarantee that the returned collection_actually contains elements of type {@code E}.;@Test_	public void createApproximateCollectionIsNotTypeSafe() {_		Collection<Integer> ints = createApproximateCollection(EnumSet.of(Color.BLUE), 3)___		_		_		try {_			_			_			ints.iterator().next().intValue()__			fail("Should have thrown a ClassCastException")__		}_		catch (ClassCastException e) {_			_		}_	};the,test,demonstrates,that,the,generics,based,api,for,link,collection,factory,create,approximate,collection,object,int,is,not,type,safe,p,specifically,the,parameterized,type,code,e,is,not,bound,to,the,type,of,elements,contained,in,the,code,collection,argument,passed,to,code,create,approximate,collection,thus,casting,the,value,returned,by,link,enum,set,copy,of,enum,set,to,code,collection,e,cannot,guarantee,that,the,returned,collection,actually,contains,elements,of,type,code,e;test,public,void,create,approximate,collection,is,not,type,safe,collection,integer,ints,create,approximate,collection,enum,set,of,color,blue,3,try,ints,iterator,next,int,value,fail,should,have,thrown,a,class,cast,exception,catch,class,cast,exception,e
CollectionFactoryTests -> @Test 	public void createApproximateCollectionIsNotTypeSafe();1418248740;The test demonstrates that the generics-based API for_{@link CollectionFactory#createApproximateCollection(Object, int)}_is not type-safe._<p>Specifically, the parameterized type {@code E} is not bound to_the type of elements contained in the {@code collection} argument_passed to {@code createApproximateCollection()}. Thus casting the_value returned by {@link EnumSet#copyOf(EnumSet)} to_{@code (Collection<E>)} cannot guarantee that the returned collection_actually contains elements of type {@code E}.;@Test_	public void createApproximateCollectionIsNotTypeSafe() {_		Collection<Integer> ints = createApproximateCollection(EnumSet.of(Color.BLUE), 3)___		_		_		try {_			_			_			_			ints.add(42)__			fail("Should have thrown a ClassCastException")__		}_		catch (ClassCastException e) {_			_		}_	};the,test,demonstrates,that,the,generics,based,api,for,link,collection,factory,create,approximate,collection,object,int,is,not,type,safe,p,specifically,the,parameterized,type,code,e,is,not,bound,to,the,type,of,elements,contained,in,the,code,collection,argument,passed,to,code,create,approximate,collection,thus,casting,the,value,returned,by,link,enum,set,copy,of,enum,set,to,code,collection,e,cannot,guarantee,that,the,returned,collection,actually,contains,elements,of,type,code,e;test,public,void,create,approximate,collection,is,not,type,safe,collection,integer,ints,create,approximate,collection,enum,set,of,color,blue,3,try,ints,add,42,fail,should,have,thrown,a,class,cast,exception,catch,class,cast,exception,e
CollectionFactoryTests -> @Test 	public void createApproximateMapIsNotTypeSafeForEnumMap();1418309741;The test demonstrates that the generics-based API for_{@link CollectionFactory#createApproximateMap(Object, int)}_is not type-safe._<p>The reasoning is similar that described in_{@link #createApproximateCollectionIsNotTypeSafe()}.;@Test_	public void createApproximateMapIsNotTypeSafeForEnumMap() {_		EnumMap<Color, Integer> enumMap = new EnumMap<>(Color.class)__		enumMap.put(Color.RED, 1)__		enumMap.put(Color.BLUE, 2)__		Map<String, Integer> map = createApproximateMap(enumMap, 3)___		_		_		try {_			_			_			_			map.put("foo", 1)__			fail("Should have thrown a ClassCastException")__		}_		catch (ClassCastException e) {_			_		}_	};the,test,demonstrates,that,the,generics,based,api,for,link,collection,factory,create,approximate,map,object,int,is,not,type,safe,p,the,reasoning,is,similar,that,described,in,link,create,approximate,collection,is,not,type,safe;test,public,void,create,approximate,map,is,not,type,safe,for,enum,map,enum,map,color,integer,enum,map,new,enum,map,color,class,enum,map,put,color,red,1,enum,map,put,color,blue,2,map,string,integer,map,create,approximate,map,enum,map,3,try,map,put,foo,1,fail,should,have,thrown,a,class,cast,exception,catch,class,cast,exception,e
CollectionFactoryTests -> @Test 	public void createApproximateMapIsNotTypeSafeForEnumMap();1467730834;The test demonstrates that the generics-based API for_{@link CollectionFactory#createApproximateMap(Object, int)}_is not type-safe._<p>The reasoning is similar that described in_{@link #createApproximateCollectionIsNotTypeSafe()}.;@Test_	public void createApproximateMapIsNotTypeSafeForEnumMap() {_		EnumMap<Color, Integer> enumMap = new EnumMap<>(Color.class)__		enumMap.put(Color.RED, 1)__		enumMap.put(Color.BLUE, 2)__		Map<String, Integer> map = createApproximateMap(enumMap, 3)___		_		_		try {_			_			_			_			map.put("foo", 1)__			fail("Should have thrown a ClassCastException")__		}_		catch (ClassCastException e) {_			_		}_	};the,test,demonstrates,that,the,generics,based,api,for,link,collection,factory,create,approximate,map,object,int,is,not,type,safe,p,the,reasoning,is,similar,that,described,in,link,create,approximate,collection,is,not,type,safe;test,public,void,create,approximate,map,is,not,type,safe,for,enum,map,enum,map,color,integer,enum,map,new,enum,map,color,class,enum,map,put,color,red,1,enum,map,put,color,blue,2,map,string,integer,map,create,approximate,map,enum,map,3,try,map,put,foo,1,fail,should,have,thrown,a,class,cast,exception,catch,class,cast,exception,e
CollectionFactoryTests -> @Test 	public void createApproximateMapIsNotTypeSafeForEnumMap();1490611887;The test demonstrates that the generics-based API for_{@link CollectionFactory#createApproximateMap(Object, int)}_is not type-safe._<p>The reasoning is similar that described in_{@link #createApproximateCollectionIsNotTypeSafe()}.;@Test_	public void createApproximateMapIsNotTypeSafeForEnumMap() {_		EnumMap<Color, Integer> enumMap = new EnumMap<>(Color.class)__		enumMap.put(Color.RED, 1)__		enumMap.put(Color.BLUE, 2)__		Map<String, Integer> map = createApproximateMap(enumMap, 3)___		_		_		try {_			_			_			_			map.put("foo", 1)__			fail("Should have thrown a ClassCastException")__		}_		catch (ClassCastException e) {_			_		}_	};the,test,demonstrates,that,the,generics,based,api,for,link,collection,factory,create,approximate,map,object,int,is,not,type,safe,p,the,reasoning,is,similar,that,described,in,link,create,approximate,collection,is,not,type,safe;test,public,void,create,approximate,map,is,not,type,safe,for,enum,map,enum,map,color,integer,enum,map,new,enum,map,color,class,enum,map,put,color,red,1,enum,map,put,color,blue,2,map,string,integer,map,create,approximate,map,enum,map,3,try,map,put,foo,1,fail,should,have,thrown,a,class,cast,exception,catch,class,cast,exception,e
CollectionFactoryTests -> @Test 	public void createApproximateMapIsNotTypeSafeForEnumMap();1545740431;The test demonstrates that the generics-based API for_{@link CollectionFactory#createApproximateMap(Object, int)}_is not type-safe._<p>The reasoning is similar that described in_{@link #createApproximateCollectionIsNotTypeSafeForEnumSet}.;@Test_	public void createApproximateMapIsNotTypeSafeForEnumMap() {_		EnumMap<Color, Integer> enumMap = new EnumMap<>(Color.class)__		enumMap.put(Color.RED, 1)__		enumMap.put(Color.BLUE, 2)__		Map<String, Integer> map = createApproximateMap(enumMap, 3)___		_		_		try {_			_			_			_			map.put("foo", 1)__			fail("Should have thrown a ClassCastException")__		}_		catch (ClassCastException e) {_			_		}_	};the,test,demonstrates,that,the,generics,based,api,for,link,collection,factory,create,approximate,map,object,int,is,not,type,safe,p,the,reasoning,is,similar,that,described,in,link,create,approximate,collection,is,not,type,safe,for,enum,set;test,public,void,create,approximate,map,is,not,type,safe,for,enum,map,enum,map,color,integer,enum,map,new,enum,map,color,class,enum,map,put,color,red,1,enum,map,put,color,blue,2,map,string,integer,map,create,approximate,map,enum,map,3,try,map,put,foo,1,fail,should,have,thrown,a,class,cast,exception,catch,class,cast,exception,e
CollectionFactoryTests -> @Test 	public void createApproximateCollectionIsNotTypeSafeForEnumSet();1418309741;The test demonstrates that the generics-based API for_{@link CollectionFactory#createApproximateCollection(Object, int)}_is not type-safe._<p>Specifically, the parameterized type {@code E} is not bound to_the type of elements contained in the {@code collection} argument_passed to {@code createApproximateCollection()}. Thus casting the_value returned by {@link EnumSet#copyOf(EnumSet)} to_{@code (Collection<E>)} cannot guarantee that the returned collection_actually contains elements of type {@code E}.;@Test_	public void createApproximateCollectionIsNotTypeSafeForEnumSet() {_		Collection<Integer> ints = createApproximateCollection(EnumSet.of(Color.BLUE), 3)___		_		_		try {_			_			_			_			ints.add(42)__			fail("Should have thrown a ClassCastException")__		}_		catch (ClassCastException e) {_			_		}_	};the,test,demonstrates,that,the,generics,based,api,for,link,collection,factory,create,approximate,collection,object,int,is,not,type,safe,p,specifically,the,parameterized,type,code,e,is,not,bound,to,the,type,of,elements,contained,in,the,code,collection,argument,passed,to,code,create,approximate,collection,thus,casting,the,value,returned,by,link,enum,set,copy,of,enum,set,to,code,collection,e,cannot,guarantee,that,the,returned,collection,actually,contains,elements,of,type,code,e;test,public,void,create,approximate,collection,is,not,type,safe,for,enum,set,collection,integer,ints,create,approximate,collection,enum,set,of,color,blue,3,try,ints,add,42,fail,should,have,thrown,a,class,cast,exception,catch,class,cast,exception,e
CollectionFactoryTests -> @Test 	public void createApproximateCollectionIsNotTypeSafeForEnumSet();1467730834;The test demonstrates that the generics-based API for_{@link CollectionFactory#createApproximateCollection(Object, int)}_is not type-safe._<p>Specifically, the parameterized type {@code E} is not bound to_the type of elements contained in the {@code collection} argument_passed to {@code createApproximateCollection()}. Thus casting the_value returned by {@link EnumSet#copyOf(EnumSet)} to_{@code (Collection<E>)} cannot guarantee that the returned collection_actually contains elements of type {@code E}.;@Test_	public void createApproximateCollectionIsNotTypeSafeForEnumSet() {_		Collection<Integer> ints = createApproximateCollection(EnumSet.of(Color.BLUE), 3)___		_		_		try {_			_			_			_			ints.add(42)__			fail("Should have thrown a ClassCastException")__		}_		catch (ClassCastException e) {_			_		}_	};the,test,demonstrates,that,the,generics,based,api,for,link,collection,factory,create,approximate,collection,object,int,is,not,type,safe,p,specifically,the,parameterized,type,code,e,is,not,bound,to,the,type,of,elements,contained,in,the,code,collection,argument,passed,to,code,create,approximate,collection,thus,casting,the,value,returned,by,link,enum,set,copy,of,enum,set,to,code,collection,e,cannot,guarantee,that,the,returned,collection,actually,contains,elements,of,type,code,e;test,public,void,create,approximate,collection,is,not,type,safe,for,enum,set,collection,integer,ints,create,approximate,collection,enum,set,of,color,blue,3,try,ints,add,42,fail,should,have,thrown,a,class,cast,exception,catch,class,cast,exception,e
CollectionFactoryTests -> @Test 	public void createApproximateCollectionIsNotTypeSafeForEnumSet();1490611887;The test demonstrates that the generics-based API for_{@link CollectionFactory#createApproximateCollection(Object, int)}_is not type-safe._<p>Specifically, the parameterized type {@code E} is not bound to_the type of elements contained in the {@code collection} argument_passed to {@code createApproximateCollection()}. Thus casting the_value returned by {@link EnumSet#copyOf(EnumSet)} to_{@code (Collection<E>)} cannot guarantee that the returned collection_actually contains elements of type {@code E}.;@Test_	public void createApproximateCollectionIsNotTypeSafeForEnumSet() {_		Collection<Integer> ints = createApproximateCollection(EnumSet.of(Color.BLUE), 3)___		_		_		try {_			_			_			_			ints.add(42)__			fail("Should have thrown a ClassCastException")__		}_		catch (ClassCastException e) {_			_		}_	};the,test,demonstrates,that,the,generics,based,api,for,link,collection,factory,create,approximate,collection,object,int,is,not,type,safe,p,specifically,the,parameterized,type,code,e,is,not,bound,to,the,type,of,elements,contained,in,the,code,collection,argument,passed,to,code,create,approximate,collection,thus,casting,the,value,returned,by,link,enum,set,copy,of,enum,set,to,code,collection,e,cannot,guarantee,that,the,returned,collection,actually,contains,elements,of,type,code,e;test,public,void,create,approximate,collection,is,not,type,safe,for,enum,set,collection,integer,ints,create,approximate,collection,enum,set,of,color,blue,3,try,ints,add,42,fail,should,have,thrown,a,class,cast,exception,catch,class,cast,exception,e
CollectionFactoryTests -> @Test 	public void createApproximateCollectionIsNotTypeSafeForEnumSet();1545740431;The test demonstrates that the generics-based API for_{@link CollectionFactory#createApproximateCollection(Object, int)}_is not type-safe._<p>Specifically, the parameterized type {@code E} is not bound to_the type of elements contained in the {@code collection} argument_passed to {@code createApproximateCollection()}. Thus casting the_value returned by {@link EnumSet#copyOf(EnumSet)} to_{@code (Collection<E>)} cannot guarantee that the returned collection_actually contains elements of type {@code E}.;@Test_	public void createApproximateCollectionIsNotTypeSafeForEnumSet() {_		Collection<Integer> ints = createApproximateCollection(EnumSet.of(Color.BLUE), 3)___		_		_		try {_			_			_			_			ints.add(42)__			fail("Should have thrown a ClassCastException")__		}_		catch (ClassCastException e) {_			_		}_	};the,test,demonstrates,that,the,generics,based,api,for,link,collection,factory,create,approximate,collection,object,int,is,not,type,safe,p,specifically,the,parameterized,type,code,e,is,not,bound,to,the,type,of,elements,contained,in,the,code,collection,argument,passed,to,code,create,approximate,collection,thus,casting,the,value,returned,by,link,enum,set,copy,of,enum,set,to,code,collection,e,cannot,guarantee,that,the,returned,collection,actually,contains,elements,of,type,code,e;test,public,void,create,approximate,collection,is,not,type,safe,for,enum,set,collection,integer,ints,create,approximate,collection,enum,set,of,color,blue,3,try,ints,add,42,fail,should,have,thrown,a,class,cast,exception,catch,class,cast,exception,e
CollectionFactoryTests -> @Test 	public void createApproximateMapIsNotTypeSafe();1418229361;The test demonstrates that the generics-based API for_{@link CollectionFactory#createApproximateMap(Object, int)}_is not type-safe._<p>The reasoning is similar that described in_{@link #createApproximateCollectionIsNotTypeSafe()}.;@Test_	public void createApproximateMapIsNotTypeSafe() {_		EnumMap<Color, Integer> enumMap = new EnumMap<>(Color.class)__		enumMap.put(Color.RED, 1)__		enumMap.put(Color.BLUE, 2)__		Map<String, Integer> map = createApproximateMap(enumMap, 3)___		_		_		try {_			_			_			map.keySet().iterator().next().split(",")__			fail("Should have thrown a ClassCastException")__		}_		catch (ClassCastException e) {_			_		}_	};the,test,demonstrates,that,the,generics,based,api,for,link,collection,factory,create,approximate,map,object,int,is,not,type,safe,p,the,reasoning,is,similar,that,described,in,link,create,approximate,collection,is,not,type,safe;test,public,void,create,approximate,map,is,not,type,safe,enum,map,color,integer,enum,map,new,enum,map,color,class,enum,map,put,color,red,1,enum,map,put,color,blue,2,map,string,integer,map,create,approximate,map,enum,map,3,try,map,key,set,iterator,next,split,fail,should,have,thrown,a,class,cast,exception,catch,class,cast,exception,e
CollectionFactoryTests -> @Test 	public void createApproximateMapIsNotTypeSafe();1418248740;The test demonstrates that the generics-based API for_{@link CollectionFactory#createApproximateMap(Object, int)}_is not type-safe._<p>The reasoning is similar that described in_{@link #createApproximateCollectionIsNotTypeSafe()}.;@Test_	public void createApproximateMapIsNotTypeSafe() {_		EnumMap<Color, Integer> enumMap = new EnumMap<>(Color.class)__		enumMap.put(Color.RED, 1)__		enumMap.put(Color.BLUE, 2)__		Map<String, Integer> map = createApproximateMap(enumMap, 3)___		_		_		try {_			_			_			_			map.put("foo", 1)__			fail("Should have thrown a ClassCastException")__		}_		catch (ClassCastException e) {_			_		}_	};the,test,demonstrates,that,the,generics,based,api,for,link,collection,factory,create,approximate,map,object,int,is,not,type,safe,p,the,reasoning,is,similar,that,described,in,link,create,approximate,collection,is,not,type,safe;test,public,void,create,approximate,map,is,not,type,safe,enum,map,color,integer,enum,map,new,enum,map,color,class,enum,map,put,color,red,1,enum,map,put,color,blue,2,map,string,integer,map,create,approximate,map,enum,map,3,try,map,put,foo,1,fail,should,have,thrown,a,class,cast,exception,catch,class,cast,exception,e
