commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void forField() throws Exception {     Type type = SerializableTypeWrapper.forField(Fields.class.getField("parameterizedType")).     assertThat(type.toString(), equalTo("java.util.List<java.lang.String>")).     assertSerializable(type). }
false;public;0;7;;@Test public void forMethodParameter() throws Exception {     Method method = Methods.class.getDeclaredMethod("method", Class.class, Object.class).     Type type = SerializableTypeWrapper.forMethodParameter(MethodParameter.forExecutable(method, 0)).     assertThat(type.toString(), equalTo("java.lang.Class<T>")).     assertSerializable(type). }
false;public;0;7;;@Test public void forConstructor() throws Exception {     Constructor<?> constructor = Constructors.class.getDeclaredConstructor(List.class).     Type type = SerializableTypeWrapper.forMethodParameter(MethodParameter.forExecutable(constructor, 0)).     assertThat(type.toString(), equalTo("java.util.List<java.lang.String>")).     assertSerializable(type). }
false;public;0;6;;@Test public void classType() throws Exception {     Type type = SerializableTypeWrapper.forField(Fields.class.getField("classType")).     assertThat(type.toString(), equalTo("class java.lang.String")).     assertSerializable(type). }
false;public;0;7;;@Test public void genericArrayType() throws Exception {     GenericArrayType type = (GenericArrayType) SerializableTypeWrapper.forField(Fields.class.getField("genericArrayType")).     assertThat(type.toString(), equalTo("java.util.List<java.lang.String>[]")).     assertSerializable(type).     assertSerializable(type.getGenericComponentType()). }
false;public;0;10;;@Test public void parameterizedType() throws Exception {     ParameterizedType type = (ParameterizedType) SerializableTypeWrapper.forField(Fields.class.getField("parameterizedType")).     assertThat(type.toString(), equalTo("java.util.List<java.lang.String>")).     assertSerializable(type).     assertSerializable(type.getOwnerType()).     assertSerializable(type.getRawType()).     assertSerializable(type.getActualTypeArguments()).     assertSerializable(type.getActualTypeArguments()[0]). }
false;public;0;7;;@Test public void typeVariableType() throws Exception {     TypeVariable<?> type = (TypeVariable<?>) SerializableTypeWrapper.forField(Fields.class.getField("typeVariableType")).     assertThat(type.toString(), equalTo("T")).     assertSerializable(type).     assertSerializable(type.getBounds()). }
false;public;0;9;;@Test public void wildcardType() throws Exception {     ParameterizedType typeSource = (ParameterizedType) SerializableTypeWrapper.forField(Fields.class.getField("wildcardType")).     WildcardType type = (WildcardType) typeSource.getActualTypeArguments()[0].     assertThat(type.toString(), equalTo("? extends java.lang.CharSequence")).     assertSerializable(type).     assertSerializable(type.getLowerBounds()).     assertSerializable(type.getUpperBounds()). }
false;private;1;8;;private void assertSerializable(Object source) throws Exception {     ByteArrayOutputStream bos = new ByteArrayOutputStream().     ObjectOutputStream oos = new ObjectOutputStream(bos).     oos.writeObject(source).     oos.close().     ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray())).     assertThat(ois.readObject(), equalTo(source)). }
false;;2;1;;<T> List<T> method(Class<T> p1, T p2).
