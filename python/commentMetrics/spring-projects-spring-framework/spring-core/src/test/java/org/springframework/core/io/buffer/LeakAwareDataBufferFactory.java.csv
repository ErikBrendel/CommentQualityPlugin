# id;timestamp;commentText;codeText;commentWords;codeWords
LeakAwareDataBufferFactory -> public void checkForLeaks();1542112537;Checks whether all of the data buffers allocated by this factory have also been released._If not, then an {@link AssertionError} is thrown. Typically used from a JUnit {@link After}_method.;public void checkForLeaks() {_		this.created.stream()_				.filter(LeakAwareDataBuffer::isAllocated)_				.findFirst()_				.map(LeakAwareDataBuffer::leakError)_				.ifPresent(leakError -> {_					throw leakError__				})__	};checks,whether,all,of,the,data,buffers,allocated,by,this,factory,have,also,been,released,if,not,then,an,link,assertion,error,is,thrown,typically,used,from,a,junit,link,after,method;public,void,check,for,leaks,this,created,stream,filter,leak,aware,data,buffer,is,allocated,find,first,map,leak,aware,data,buffer,leak,error,if,present,leak,error,throw,leak,error
LeakAwareDataBufferFactory -> public void checkForLeaks();1542375206;Checks whether all of the data buffers allocated by this factory have also been released._If not, then an {@link AssertionError} is thrown. Typically used from a JUnit {@link After}_method.;public void checkForLeaks() {_		this.created.stream()_				.filter(LeakAwareDataBuffer::isAllocated)_				.findFirst()_				.map(LeakAwareDataBuffer::leakError)_				.ifPresent(leakError -> {_					throw leakError__				})__	};checks,whether,all,of,the,data,buffers,allocated,by,this,factory,have,also,been,released,if,not,then,an,link,assertion,error,is,thrown,typically,used,from,a,junit,link,after,method;public,void,check,for,leaks,this,created,stream,filter,leak,aware,data,buffer,is,allocated,find,first,map,leak,aware,data,buffer,leak,error,if,present,leak,error,throw,leak,error
LeakAwareDataBufferFactory -> public void checkForLeaks();1542642985;Checks whether all of the data buffers allocated by this factory have also been released._If not, then an {@link AssertionError} is thrown. Typically used from a JUnit {@link After}_method.;public void checkForLeaks() {_		this.created.stream()_				.filter(LeakAwareDataBuffer::isAllocated)_				.findFirst()_				.map(LeakAwareDataBuffer::leakError)_				.ifPresent(leakError -> {_					throw leakError__				})__	};checks,whether,all,of,the,data,buffers,allocated,by,this,factory,have,also,been,released,if,not,then,an,link,assertion,error,is,thrown,typically,used,from,a,junit,link,after,method;public,void,check,for,leaks,this,created,stream,filter,leak,aware,data,buffer,is,allocated,find,first,map,leak,aware,data,buffer,leak,error,if,present,leak,error,throw,leak,error
LeakAwareDataBufferFactory -> public LeakAwareDataBufferFactory();1542112537;Creates a new {@code LeakAwareDataBufferFactory} by wrapping a_{@link DefaultDataBufferFactory}.;public LeakAwareDataBufferFactory() {_		this(new DefaultDataBufferFactory())__	};creates,a,new,code,leak,aware,data,buffer,factory,by,wrapping,a,link,default,data,buffer,factory;public,leak,aware,data,buffer,factory,this,new,default,data,buffer,factory
LeakAwareDataBufferFactory -> public LeakAwareDataBufferFactory();1542375206;Creates a new {@code LeakAwareDataBufferFactory} by wrapping a_{@link DefaultDataBufferFactory}.;public LeakAwareDataBufferFactory() {_		this(new DefaultDataBufferFactory())__	};creates,a,new,code,leak,aware,data,buffer,factory,by,wrapping,a,link,default,data,buffer,factory;public,leak,aware,data,buffer,factory,this,new,default,data,buffer,factory
LeakAwareDataBufferFactory -> public LeakAwareDataBufferFactory();1542642985;Creates a new {@code LeakAwareDataBufferFactory} by wrapping a_{@link DefaultDataBufferFactory}.;public LeakAwareDataBufferFactory() {_		this(new DefaultDataBufferFactory())__	};creates,a,new,code,leak,aware,data,buffer,factory,by,wrapping,a,link,default,data,buffer,factory;public,leak,aware,data,buffer,factory,this,new,default,data,buffer,factory
LeakAwareDataBufferFactory -> public LeakAwareDataBufferFactory(DataBufferFactory delegate);1542112537;Creates a new {@code LeakAwareDataBufferFactory} by wrapping the given delegate._@param delegate the delegate buffer factory to wrap.;public LeakAwareDataBufferFactory(DataBufferFactory delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};creates,a,new,code,leak,aware,data,buffer,factory,by,wrapping,the,given,delegate,param,delegate,the,delegate,buffer,factory,to,wrap;public,leak,aware,data,buffer,factory,data,buffer,factory,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
LeakAwareDataBufferFactory -> public LeakAwareDataBufferFactory(DataBufferFactory delegate);1542375206;Creates a new {@code LeakAwareDataBufferFactory} by wrapping the given delegate._@param delegate the delegate buffer factory to wrap.;public LeakAwareDataBufferFactory(DataBufferFactory delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};creates,a,new,code,leak,aware,data,buffer,factory,by,wrapping,the,given,delegate,param,delegate,the,delegate,buffer,factory,to,wrap;public,leak,aware,data,buffer,factory,data,buffer,factory,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
LeakAwareDataBufferFactory -> public LeakAwareDataBufferFactory(DataBufferFactory delegate);1542642985;Creates a new {@code LeakAwareDataBufferFactory} by wrapping the given delegate._@param delegate the delegate buffer factory to wrap.;public LeakAwareDataBufferFactory(DataBufferFactory delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};creates,a,new,code,leak,aware,data,buffer,factory,by,wrapping,the,given,delegate,param,delegate,the,delegate,buffer,factory,to,wrap;public,leak,aware,data,buffer,factory,data,buffer,factory,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
