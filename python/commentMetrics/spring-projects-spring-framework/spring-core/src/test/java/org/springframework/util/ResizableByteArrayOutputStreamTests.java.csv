commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() throws Exception {     this.baos = new ResizableByteArrayOutputStream(INITIAL_CAPACITY).     this.helloBytes = "Hello World".getBytes("UTF-8"). }
false;public;0;9;;@Test public void resize() throws Exception {     assertEquals(INITIAL_CAPACITY, this.baos.capacity()).     this.baos.write(helloBytes).     int size = 64.     this.baos.resize(size).     assertEquals(size, this.baos.capacity()).     assertByteArrayEqualsString(this.baos). }
false;public;0;8;;@Test public void autoGrow() {     assertEquals(INITIAL_CAPACITY, this.baos.capacity()).     for (int i = 0. i < 129. i++) {         this.baos.write(0).     }     assertEquals(256, this.baos.capacity()). }
false;public;0;8;;@Test public void grow() throws Exception {     assertEquals(INITIAL_CAPACITY, this.baos.capacity()).     this.baos.write(helloBytes).     this.baos.grow(1000).     assertEquals(this.helloBytes.length + 1000, this.baos.capacity()).     assertByteArrayEqualsString(this.baos). }
false;public;0;5;;@Test public void write() throws Exception {     this.baos.write(helloBytes).     assertByteArrayEqualsString(this.baos). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void failResize() throws Exception {     this.baos.write(helloBytes).     this.baos.resize(5). }
false;private;1;3;;private void assertByteArrayEqualsString(ResizableByteArrayOutputStream actual) {     assertArrayEquals(helloBytes, actual.toByteArray()). }
