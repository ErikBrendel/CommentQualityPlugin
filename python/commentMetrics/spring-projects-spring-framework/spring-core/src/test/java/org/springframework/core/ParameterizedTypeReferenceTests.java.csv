commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void stringTypeReference() {     ParameterizedTypeReference<String> typeReference = new ParameterizedTypeReference<String>() {     }.     assertEquals(String.class, typeReference.getType()). }
false;public;0;6;;@Test public void mapTypeReference() throws Exception {     Type mapType = getClass().getMethod("mapMethod").getGenericReturnType().     ParameterizedTypeReference<Map<Object, String>> typeReference = new ParameterizedTypeReference<Map<Object, String>>() {     }.     assertEquals(mapType, typeReference.getType()). }
false;public;0;6;;@Test public void listTypeReference() throws Exception {     Type listType = getClass().getMethod("listMethod").getGenericReturnType().     ParameterizedTypeReference<List<String>> typeReference = new ParameterizedTypeReference<List<String>>() {     }.     assertEquals(listType, typeReference.getType()). }
false;public;0;6;;@Test public void reflectiveTypeReferenceWithSpecificDeclaration() throws Exception {     Type listType = getClass().getMethod("listMethod").getGenericReturnType().     ParameterizedTypeReference<List<String>> typeReference = ParameterizedTypeReference.forType(listType).     assertEquals(listType, typeReference.getType()). }
false;public;0;6;;@Test public void reflectiveTypeReferenceWithGenericDeclaration() throws Exception {     Type listType = getClass().getMethod("listMethod").getGenericReturnType().     ParameterizedTypeReference<?> typeReference = ParameterizedTypeReference.forType(listType).     assertEquals(listType, typeReference.getType()). }
false;public,static;0;3;;public static Map<Object, String> mapMethod() {     return null. }
false;public,static;0;3;;public static List<String> listMethod() {     return null. }
