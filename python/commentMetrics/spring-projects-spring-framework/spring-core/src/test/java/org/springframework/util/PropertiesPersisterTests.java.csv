commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void propertiesPersister() throws IOException {     String propString = "code1=message1\ncode2:message2".     Properties props = loadProperties(propString, false).     String propCopy = storeProperties(props, null, false).     loadProperties(propCopy, false). }
false;public;0;7;;@Test public void propertiesPersisterWithWhitespace() throws IOException {     String propString = " code1\t= \tmessage1\n  code2 \t  :\t mess\\\n \t  age2".     Properties props = loadProperties(propString, false).     String propCopy = storeProperties(props, null, false).     loadProperties(propCopy, false). }
false;public;0;7;;@Test public void propertiesPersisterWithHeader() throws IOException {     String propString = "code1=message1\ncode2:message2".     Properties props = loadProperties(propString, false).     String propCopy = storeProperties(props, "myHeader", false).     loadProperties(propCopy, false). }
false;public;0;7;;@Test public void propertiesPersisterWithEmptyValue() throws IOException {     String propString = "code1=message1\ncode2:message2\ncode3=".     Properties props = loadProperties(propString, false).     String propCopy = storeProperties(props, null, false).     loadProperties(propCopy, false). }
false;public;0;7;;@Test public void propertiesPersisterWithReader() throws IOException {     String propString = "code1=message1\ncode2:message2".     Properties props = loadProperties(propString, true).     String propCopy = storeProperties(props, null, true).     loadProperties(propCopy, false). }
false;public;0;7;;@Test public void propertiesPersisterWithReaderAndWhitespace() throws IOException {     String propString = " code1\t= \tmessage1\n  code2 \t  :\t mess\\\n \t  age2".     Properties props = loadProperties(propString, true).     String propCopy = storeProperties(props, null, true).     loadProperties(propCopy, false). }
false;public;0;7;;@Test public void propertiesPersisterWithReaderAndHeader() throws IOException {     String propString = "code1\t=\tmessage1\n  code2 \t  : \t message2".     Properties props = loadProperties(propString, true).     String propCopy = storeProperties(props, "myHeader", true).     loadProperties(propCopy, false). }
false;public;0;7;;@Test public void propertiesPersisterWithReaderAndEmptyValue() throws IOException {     String propString = "code1=message1\ncode2:message2\ncode3=".     Properties props = loadProperties(propString, true).     String propCopy = storeProperties(props, null, true).     loadProperties(propCopy, false). }
false;private;2;13;;private Properties loadProperties(String propString, boolean useReader) throws IOException {     DefaultPropertiesPersister persister = new DefaultPropertiesPersister().     Properties props = new Properties().     if (useReader) {         persister.load(props, new StringReader(propString)).     } else {         persister.load(props, new ByteArrayInputStream(propString.getBytes())).     }     assertEquals("message1", props.getProperty("code1")).     assertEquals("message2", props.getProperty("code2")).     return props. }
false;private;3;20;;private String storeProperties(Properties props, String header, boolean useWriter) throws IOException {     DefaultPropertiesPersister persister = new DefaultPropertiesPersister().     String propCopy = null.     if (useWriter) {         StringWriter propWriter = new StringWriter().         persister.store(props, propWriter, header).         propCopy = propWriter.toString().     } else {         ByteArrayOutputStream propOut = new ByteArrayOutputStream().         persister.store(props, propOut, header).         propCopy = new String(propOut.toByteArray()).     }     if (header != null) {         assertTrue(propCopy.contains(header)).     }     assertTrue(propCopy.contains("\ncode1=message1")).     assertTrue(propCopy.contains("\ncode2=message2")).     return propCopy. }
