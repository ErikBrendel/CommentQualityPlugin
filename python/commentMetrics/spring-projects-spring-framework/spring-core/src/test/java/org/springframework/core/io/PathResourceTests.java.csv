commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;3;;private static String platformPath(String string) {     return string.replace('/', File.separatorChar). }
false;public;0;6;;@Test public void nullPath() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Path must not be null").     new PathResource((Path) null). }
false;public;0;6;;@Test public void nullPathString() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Path must not be null").     new PathResource((String) null). }
false;public;0;6;;@Test public void nullUri() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("URI must not be null").     new PathResource((URI) null). }
false;public;0;6;;@Test public void createFromPath() {     Path path = Paths.get(TEST_FILE).     PathResource resource = new PathResource(path).     assertThat(resource.getPath(), equalTo(TEST_FILE)). }
false;public;0;5;;@Test public void createFromString() {     PathResource resource = new PathResource(TEST_FILE).     assertThat(resource.getPath(), equalTo(TEST_FILE)). }
false;public;0;6;;@Test public void createFromUri() {     File file = new File(TEST_FILE).     PathResource resource = new PathResource(file.toURI()).     assertThat(resource.getPath(), equalTo(file.getAbsoluteFile().toString())). }
false;public;0;5;;@Test public void getPathForFile() {     PathResource resource = new PathResource(TEST_FILE).     assertThat(resource.getPath(), equalTo(TEST_FILE)). }
false;public;0;5;;@Test public void getPathForDir() {     PathResource resource = new PathResource(TEST_DIR).     assertThat(resource.getPath(), equalTo(TEST_DIR)). }
false;public;0;5;;@Test public void fileExists() {     PathResource resource = new PathResource(TEST_FILE).     assertThat(resource.exists(), equalTo(true)). }
false;public;0;5;;@Test public void dirExists() {     PathResource resource = new PathResource(TEST_DIR).     assertThat(resource.exists(), equalTo(true)). }
false;public;0;5;;@Test public void fileDoesNotExist() {     PathResource resource = new PathResource(NON_EXISTING_FILE).     assertThat(resource.exists(), equalTo(false)). }
false;public;0;5;;@Test public void fileIsReadable() {     PathResource resource = new PathResource(TEST_FILE).     assertThat(resource.isReadable(), equalTo(true)). }
false;public;0;5;;@Test public void doesNotExistIsNotReadable() {     PathResource resource = new PathResource(NON_EXISTING_FILE).     assertThat(resource.isReadable(), equalTo(false)). }
false;public;0;5;;@Test public void directoryIsNotReadable() {     PathResource resource = new PathResource(TEST_DIR).     assertThat(resource.isReadable(), equalTo(false)). }
false;public;0;6;;@Test public void getInputStream() throws IOException {     PathResource resource = new PathResource(TEST_FILE).     byte[] bytes = FileCopyUtils.copyToByteArray(resource.getInputStream()).     assertThat(bytes.length, greaterThan(0)). }
false;public;0;6;;@Test public void getInputStreamForDir() throws IOException {     PathResource resource = new PathResource(TEST_DIR).     thrown.expect(FileNotFoundException.class).     resource.getInputStream(). }
false;public;0;6;;@Test public void getInputStreamDoesNotExist() throws IOException {     PathResource resource = new PathResource(NON_EXISTING_FILE).     thrown.expect(FileNotFoundException.class).     resource.getInputStream(). }
false;public;0;5;;@Test public void getUrl() throws IOException {     PathResource resource = new PathResource(TEST_FILE).     assertThat(resource.getURL().toString(), Matchers.endsWith("core/io/example.properties")). }
false;public;0;5;;@Test public void getUri() throws IOException {     PathResource resource = new PathResource(TEST_FILE).     assertThat(resource.getURI().toString(), Matchers.endsWith("core/io/example.properties")). }
false;public;0;6;;@Test public void getFile() throws IOException {     PathResource resource = new PathResource(TEST_FILE).     File file = new File(TEST_FILE).     assertThat(resource.getFile().getAbsoluteFile(), equalTo(file.getAbsoluteFile())). }
false;public;0;9;;@Test public void getFileUnsupported() throws IOException {     Path path = mock(Path.class).     given(path.normalize()).willReturn(path).     given(path.toFile()).willThrow(new UnsupportedOperationException()).     PathResource resource = new PathResource(path).     thrown.expect(FileNotFoundException.class).     resource.getFile(). }
false;public;0;6;;@Test public void contentLength() throws IOException {     PathResource resource = new PathResource(TEST_FILE).     File file = new File(TEST_FILE).     assertThat(resource.contentLength(), equalTo(file.length())). }
false;public;0;6;;@Test public void contentLengthForDirectory() throws IOException {     PathResource resource = new PathResource(TEST_DIR).     File file = new File(TEST_DIR).     assertThat(resource.contentLength(), equalTo(file.length())). }
false;public;0;6;;@Test public void lastModified() throws IOException {     PathResource resource = new PathResource(TEST_FILE).     File file = new File(TEST_FILE).     assertThat(resource.lastModified() / 1000, equalTo(file.lastModified() / 1000)). }
false;public;0;5;;@Test public void createRelativeFromDir() throws IOException {     Resource resource = new PathResource(TEST_DIR).createRelative("example.properties").     assertThat(resource, equalTo((Resource) new PathResource(TEST_FILE))). }
false;public;0;5;;@Test public void createRelativeFromFile() throws IOException {     Resource resource = new PathResource(TEST_FILE).createRelative("../example.properties").     assertThat(resource, equalTo((Resource) new PathResource(TEST_FILE))). }
false;public;0;5;;@Test public void filename() {     Resource resource = new PathResource(TEST_FILE).     assertThat(resource.getFilename(), equalTo("example.properties")). }
false;public;0;6;;@Test public void description() {     Resource resource = new PathResource(TEST_FILE).     assertThat(resource.getDescription(), containsString("path [")).     assertThat(resource.getDescription(), containsString(TEST_FILE)). }
false;public;0;5;;@Test public void fileIsWritable() {     PathResource resource = new PathResource(TEST_FILE).     assertThat(resource.isWritable(), equalTo(true)). }
false;public;0;5;;@Test public void directoryIsNotWritable() {     PathResource resource = new PathResource(TEST_DIR).     assertThat(resource.isWritable(), equalTo(false)). }
false;public;0;6;;@Test public void outputStream() throws IOException {     PathResource resource = new PathResource(temporaryFolder.newFile("test").toPath()).     FileCopyUtils.copy("test".getBytes(StandardCharsets.UTF_8), resource.getOutputStream()).     assertThat(resource.contentLength(), equalTo(4L)). }
false;public;0;8;;@Test public void doesNotExistOutputStream() throws IOException {     File file = temporaryFolder.newFile("test").     file.delete().     PathResource resource = new PathResource(file.toPath()).     FileCopyUtils.copy("test".getBytes(), resource.getOutputStream()).     assertThat(resource.contentLength(), equalTo(4L)). }
false;public;0;6;;@Test public void directoryOutputStream() throws IOException {     PathResource resource = new PathResource(TEST_DIR).     thrown.expect(FileNotFoundException.class).     resource.getOutputStream(). }
false;public;0;17;;@Test public void getReadableByteChannel() throws IOException {     PathResource resource = new PathResource(TEST_FILE).     ReadableByteChannel channel = null.     try {         channel = resource.readableChannel().         ByteBuffer buffer = ByteBuffer.allocate((int) resource.contentLength()).         channel.read(buffer).         buffer.rewind().         assertThat(buffer.limit(), greaterThan(0)).     } finally {         if (channel != null) {             channel.close().         }     } }
false;public;0;10;;@Test public void getReadableByteChannelForDir() throws IOException {     PathResource resource = new PathResource(TEST_DIR).     try {         resource.readableChannel().     } catch (AccessDeniedException ex) {     // on Windows     } }
false;public;0;6;;@Test public void getReadableByteChannelDoesNotExist() throws IOException {     PathResource resource = new PathResource(NON_EXISTING_FILE).     thrown.expect(FileNotFoundException.class).     resource.readableChannel(). }
false;public;0;16;;@Test public void getWritableChannel() throws IOException {     PathResource resource = new PathResource(temporaryFolder.newFile("test").toPath()).     ByteBuffer buffer = ByteBuffer.wrap("test".getBytes(StandardCharsets.UTF_8)).     WritableByteChannel channel = null.     try {         channel = resource.writableChannel().         channel.write(buffer).     } finally {         if (channel != null) {             channel.close().         }     }     assertThat(resource.contentLength(), equalTo(4L)). }
