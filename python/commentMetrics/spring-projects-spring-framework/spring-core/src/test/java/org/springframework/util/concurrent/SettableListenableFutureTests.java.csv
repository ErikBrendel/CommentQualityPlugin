commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void validateInitialValues() {     assertFalse(settableListenableFuture.isCancelled()).     assertFalse(settableListenableFuture.isDone()). }
false;public;0;8;;@Test public void returnsSetValue() throws ExecutionException, InterruptedException {     String string = "hello".     assertTrue(settableListenableFuture.set(string)).     assertThat(settableListenableFuture.get(), equalTo(string)).     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;9;;@Test public void returnsSetValueFromCompletable() throws ExecutionException, InterruptedException {     String string = "hello".     assertTrue(settableListenableFuture.set(string)).     Future<String> completable = settableListenableFuture.completable().     assertThat(completable.get(), equalTo(string)).     assertFalse(completable.isCancelled()).     assertTrue(completable.isDone()). }
false;public;0;6;;@Test public void setValueUpdatesDoneStatus() {     settableListenableFuture.set("hello").     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;16;;@Test public void throwsSetExceptionWrappedInExecutionException() throws Exception {     Throwable exception = new RuntimeException().     assertTrue(settableListenableFuture.setException(exception)).     try {         settableListenableFuture.get().         fail("Expected ExecutionException").     } catch (ExecutionException ex) {         assertThat(ex.getCause(), equalTo(exception)).     }     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;17;;@Test public void throwsSetExceptionWrappedInExecutionExceptionFromCompletable() throws Exception {     Throwable exception = new RuntimeException().     assertTrue(settableListenableFuture.setException(exception)).     Future<String> completable = settableListenableFuture.completable().     try {         completable.get().         fail("Expected ExecutionException").     } catch (ExecutionException ex) {         assertThat(ex.getCause(), equalTo(exception)).     }     assertFalse(completable.isCancelled()).     assertTrue(completable.isDone()). }
false;public;0;16;;@Test public void throwsSetErrorWrappedInExecutionException() throws Exception {     Throwable exception = new OutOfMemoryError().     assertTrue(settableListenableFuture.setException(exception)).     try {         settableListenableFuture.get().         fail("Expected ExecutionException").     } catch (ExecutionException ex) {         assertThat(ex.getCause(), equalTo(exception)).     }     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;17;;@Test public void throwsSetErrorWrappedInExecutionExceptionFromCompletable() throws Exception {     Throwable exception = new OutOfMemoryError().     assertTrue(settableListenableFuture.setException(exception)).     Future<String> completable = settableListenableFuture.completable().     try {         completable.get().         fail("Expected ExecutionException").     } catch (ExecutionException ex) {         assertThat(ex.getCause(), equalTo(exception)).     }     assertFalse(completable.isCancelled()).     assertTrue(completable.isDone()). }
false;public;1;4;;@Override public void onSuccess(String result) {     callbackHolder[0] = result. }
false;public;1;4;;@Override public void onFailure(Throwable ex) {     fail("Expected onSuccess() to be called"). }
false;public;0;21;;@Test public void setValueTriggersCallback() {     String string = "hello".     final String[] callbackHolder = new String[1].     settableListenableFuture.addCallback(new ListenableFutureCallback<String>() {          @Override         public void onSuccess(String result) {             callbackHolder[0] = result.         }          @Override         public void onFailure(Throwable ex) {             fail("Expected onSuccess() to be called").         }     }).     settableListenableFuture.set(string).     assertThat(callbackHolder[0], equalTo(string)).     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;1;4;;@Override public void onSuccess(String result) {     callbackHolder[0] = result. }
false;public;1;4;;@Override public void onFailure(Throwable ex) {     fail("Expected onSuccess() to be called"). }
false;public;0;22;;@Test public void setValueTriggersCallbackOnlyOnce() {     String string = "hello".     final String[] callbackHolder = new String[1].     settableListenableFuture.addCallback(new ListenableFutureCallback<String>() {          @Override         public void onSuccess(String result) {             callbackHolder[0] = result.         }          @Override         public void onFailure(Throwable ex) {             fail("Expected onSuccess() to be called").         }     }).     settableListenableFuture.set(string).     assertFalse(settableListenableFuture.set("good bye")).     assertThat(callbackHolder[0], equalTo(string)).     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;1;4;;@Override public void onSuccess(String result) {     fail("Expected onFailure() to be called"). }
false;public;1;4;;@Override public void onFailure(Throwable ex) {     callbackHolder[0] = ex. }
false;public;0;21;;@Test public void setExceptionTriggersCallback() {     Throwable exception = new RuntimeException().     final Throwable[] callbackHolder = new Throwable[1].     settableListenableFuture.addCallback(new ListenableFutureCallback<String>() {          @Override         public void onSuccess(String result) {             fail("Expected onFailure() to be called").         }          @Override         public void onFailure(Throwable ex) {             callbackHolder[0] = ex.         }     }).     settableListenableFuture.setException(exception).     assertThat(callbackHolder[0], equalTo(exception)).     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;1;4;;@Override public void onSuccess(String result) {     fail("Expected onFailure() to be called"). }
false;public;1;4;;@Override public void onFailure(Throwable ex) {     callbackHolder[0] = ex. }
false;public;0;22;;@Test public void setExceptionTriggersCallbackOnlyOnce() {     Throwable exception = new RuntimeException().     final Throwable[] callbackHolder = new Throwable[1].     settableListenableFuture.addCallback(new ListenableFutureCallback<String>() {          @Override         public void onSuccess(String result) {             fail("Expected onFailure() to be called").         }          @Override         public void onFailure(Throwable ex) {             callbackHolder[0] = ex.         }     }).     settableListenableFuture.setException(exception).     assertFalse(settableListenableFuture.setException(new IllegalArgumentException())).     assertThat(callbackHolder[0], equalTo(exception)).     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;7;;@Test public void nullIsAcceptedAsValueToSet() throws ExecutionException, InterruptedException {     settableListenableFuture.set(null).     assertNull(settableListenableFuture.get()).     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;10;;@Override public void run() {     try {         Thread.sleep(20L).         settableListenableFuture.set(string).     } catch (InterruptedException ex) {         throw new RuntimeException(ex).     } }
false;public;0;22;;@Test public void getWaitsForCompletion() throws ExecutionException, InterruptedException {     final String string = "hello".     new Thread(new Runnable() {          @Override         public void run() {             try {                 Thread.sleep(20L).                 settableListenableFuture.set(string).             } catch (InterruptedException ex) {                 throw new RuntimeException(ex).             }         }     }).start().     String value = settableListenableFuture.get().     assertThat(value, equalTo(string)).     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;10;;@Test public void getWithTimeoutThrowsTimeoutException() throws ExecutionException, InterruptedException {     try {         settableListenableFuture.get(1L, TimeUnit.MILLISECONDS).         fail("Expected TimeoutException").     } catch (TimeoutException ex) {     // expected     } }
false;public;0;10;;@Override public void run() {     try {         Thread.sleep(20L).         settableListenableFuture.set(string).     } catch (InterruptedException ex) {         throw new RuntimeException(ex).     } }
false;public;0;22;;@Test public void getWithTimeoutWaitsForCompletion() throws ExecutionException, InterruptedException, TimeoutException {     final String string = "hello".     new Thread(new Runnable() {          @Override         public void run() {             try {                 Thread.sleep(20L).                 settableListenableFuture.set(string).             } catch (InterruptedException ex) {                 throw new RuntimeException(ex).             }         }     }).start().     String value = settableListenableFuture.get(500L, TimeUnit.MILLISECONDS).     assertThat(value, equalTo(string)).     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;7;;@Test public void cancelPreventsValueFromBeingSet() {     assertTrue(settableListenableFuture.cancel(true)).     assertFalse(settableListenableFuture.set("hello")).     assertTrue(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;6;;@Test public void cancelSetsFutureToDone() {     settableListenableFuture.cancel(true).     assertTrue(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;8;;@Test public void cancelWithMayInterruptIfRunningTrueCallsOverriddenMethod() {     InterruptibleSettableListenableFuture interruptibleFuture = new InterruptibleSettableListenableFuture().     assertTrue(interruptibleFuture.cancel(true)).     assertTrue(interruptibleFuture.calledInterruptTask()).     assertTrue(interruptibleFuture.isCancelled()).     assertTrue(interruptibleFuture.isDone()). }
false;public;0;8;;@Test public void cancelWithMayInterruptIfRunningFalseDoesNotCallOverriddenMethod() {     InterruptibleSettableListenableFuture interruptibleFuture = new InterruptibleSettableListenableFuture().     assertTrue(interruptibleFuture.cancel(false)).     assertFalse(interruptibleFuture.calledInterruptTask()).     assertTrue(interruptibleFuture.isCancelled()).     assertTrue(interruptibleFuture.isDone()). }
false;public;0;7;;@Test public void setPreventsCancel() {     assertTrue(settableListenableFuture.set("hello")).     assertFalse(settableListenableFuture.cancel(true)).     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;7;;@Test public void cancelPreventsExceptionFromBeingSet() {     assertTrue(settableListenableFuture.cancel(true)).     assertFalse(settableListenableFuture.setException(new RuntimeException())).     assertTrue(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;7;;@Test public void setExceptionPreventsCancel() {     assertTrue(settableListenableFuture.setException(new RuntimeException())).     assertFalse(settableListenableFuture.cancel(true)).     assertFalse(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;15;;@Test public void cancelStateThrowsExceptionWhenCallingGet() throws ExecutionException, InterruptedException {     settableListenableFuture.cancel(true).     try {         settableListenableFuture.get().         fail("Expected CancellationException").     } catch (CancellationException ex) {     // expected     }     assertTrue(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;10;;@Override public void run() {     try {         Thread.sleep(20L).         settableListenableFuture.cancel(true).     } catch (InterruptedException ex) {         throw new RuntimeException(ex).     } }
false;public;0;26;;@Test public void cancelStateThrowsExceptionWhenCallingGetWithTimeout() throws ExecutionException, TimeoutException, InterruptedException {     new Thread(new Runnable() {          @Override         public void run() {             try {                 Thread.sleep(20L).                 settableListenableFuture.cancel(true).             } catch (InterruptedException ex) {                 throw new RuntimeException(ex).             }         }     }).start().     try {         settableListenableFuture.get(500L, TimeUnit.MILLISECONDS).         fail("Expected CancellationException").     } catch (CancellationException ex) {     // expected     }     assertTrue(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;16;;@Test @SuppressWarnings({ "rawtypes", "unchecked" }) public void cancelDoesNotNotifyCallbacksOnSet() {     ListenableFutureCallback callback = mock(ListenableFutureCallback.class).     settableListenableFuture.addCallback(callback).     settableListenableFuture.cancel(true).     verify(callback).onFailure(any(CancellationException.class)).     verifyNoMoreInteractions(callback).     settableListenableFuture.set("hello").     verifyNoMoreInteractions(callback).     assertTrue(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;public;0;16;;@Test @SuppressWarnings({ "rawtypes", "unchecked" }) public void cancelDoesNotNotifyCallbacksOnSetException() {     ListenableFutureCallback callback = mock(ListenableFutureCallback.class).     settableListenableFuture.addCallback(callback).     settableListenableFuture.cancel(true).     verify(callback).onFailure(any(CancellationException.class)).     verifyNoMoreInteractions(callback).     settableListenableFuture.setException(new RuntimeException()).     verifyNoMoreInteractions(callback).     assertTrue(settableListenableFuture.isCancelled()).     assertTrue(settableListenableFuture.isDone()). }
false;protected;0;4;;@Override protected void interruptTask() {     interrupted = true. }
false;;0;3;;boolean calledInterruptTask() {     return interrupted. }
