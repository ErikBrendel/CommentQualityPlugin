commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = FileNotFoundException.class) public void invalidPrefixWithPatternElementInIt() throws IOException {     resolver.getResources("xx**:**/*.xy"). }
false;public;0;7;;@Test public void singleResourceOnFileSystem() throws IOException {     Resource[] resources = resolver.getResources("org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.class").     assertEquals(1, resources.length).     assertProtocolAndFilenames(resources, "file", "PathMatchingResourcePatternResolverTests.class"). }
false;public;0;6;;@Test public void singleResourceInJar() throws IOException {     Resource[] resources = resolver.getResources("org/reactivestreams/Publisher.class").     assertEquals(1, resources.length).     assertProtocolAndFilenames(resources, "jar", "Publisher.class"). }
false;public;0;16;;// passes under Eclipse, fails under Ant @Ignore @Test public void classpathStarWithPatternOnFileSystem() throws IOException {     Resource[] resources = resolver.getResources("classpath*:org/springframework/core/io/sup*/*.class").     // Have to exclude Clover-generated class files here,     // as we might be running as part of a Clover test run.     List<Resource> noCloverResources = new ArrayList<>().     for (Resource resource : resources) {         if (!resource.getFilename().contains("$__CLOVER_")) {             noCloverResources.add(resource).         }     }     resources = noCloverResources.toArray(new Resource[noCloverResources.size()]).     assertProtocolAndFilenames(resources, "file", StringUtils.concatenateStringArrays(CLASSES_IN_CORE_IO_SUPPORT, TEST_CLASSES_IN_CORE_IO_SUPPORT)). }
false;public;0;5;;@Test public void classpathWithPatternInJar() throws IOException {     Resource[] resources = resolver.getResources("classpath:org/reactivestreams/*.class").     assertProtocolAndFilenames(resources, "jar", CLASSES_IN_REACTIVESTREAMS). }
false;public;0;5;;@Test public void classpathStarWithPatternInJar() throws IOException {     Resource[] resources = resolver.getResources("classpath*:org/reactivestreams/*.class").     assertProtocolAndFilenames(resources, "jar", CLASSES_IN_REACTIVESTREAMS). }
false;public;0;11;;@Test public void rootPatternRetrievalInJarFiles() throws IOException {     Resource[] resources = resolver.getResources("classpath*:*.dtd").     boolean found = false.     for (Resource resource : resources) {         if (resource.getFilename().equals("aspectj_1_5_0.dtd")) {             found = true.         }     }     assertTrue("Could not find aspectj_1_5_0.dtd in the root of the aspectjweaver jar", found). }
false;private;3;28;;private void assertProtocolAndFilenames(Resource[] resources, String protocol, String... filenames) throws IOException {     // Uncomment the following if you encounter problems with matching against the file system     // It shows file locations.     // String[] actualNames = new String[resources.length].     // for (int i = 0. i < resources.length. i++) {     // actualNames[i] = resources[i].getFilename().     // }     // List sortedActualNames = new LinkedList(Arrays.asList(actualNames)).     // List expectedNames = new LinkedList(Arrays.asList(fileNames)).     // Collections.sort(sortedActualNames).     // Collections.sort(expectedNames).     //      // System.out.println("-----------").     // System.out.println("Expected: " + StringUtils.collectionToCommaDelimitedString(expectedNames)).     // System.out.println("Actual: " + StringUtils.collectionToCommaDelimitedString(sortedActualNames)).     // for (int i = 0. i < resources.length. i++) {     // System.out.println(resources[i]).     // }     assertEquals("Correct number of files found", filenames.length, resources.length).     for (Resource resource : resources) {         String actualProtocol = resource.getURL().getProtocol().         assertEquals(protocol, actualProtocol).         assertFilenameIn(resource, filenames).     } }
false;private;2;5;;private void assertFilenameIn(Resource resource, String... filenames) {     String filename = resource.getFilename().     assertTrue(resource + " does not have a filename that matches any of the specified names", Arrays.stream(filenames).anyMatch(filename::endsWith)). }
