commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void success() {     String expected = "one".     AtomicReference<Object> actual = new AtomicReference<>().     ListenableFuture<String> future = new MonoToListenableFutureAdapter<>(Mono.just(expected)).     future.addCallback(actual::set, actual::set).     assertEquals(expected, actual.get()). }
false;public;0;9;;@Test public void failure() {     Throwable expected = new IllegalStateException("oops").     AtomicReference<Object> actual = new AtomicReference<>().     ListenableFuture<String> future = new MonoToListenableFutureAdapter<>(Mono.error(expected)).     future.addCallback(actual::set, actual::set).     assertEquals(expected, actual.get()). }
false;public;0;8;;@Test public void cancellation() {     Mono<Long> mono = Mono.delay(Duration.ofSeconds(60)).     Future<Long> future = new MonoToListenableFutureAdapter<>(mono).     assertTrue(future.cancel(true)).     assertTrue(future.isCancelled()). }
false;public;0;7;;@Test public void cancellationAfterTerminated() {     Future<Void> future = new MonoToListenableFutureAdapter<>(Mono.empty()).     assertFalse("Should return false if task already completed", future.cancel(true)).     assertFalse(future.isCancelled()). }
