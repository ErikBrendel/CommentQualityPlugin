# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1398891096;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,composed,annotation,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1401466476;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,composed,annotation,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1417014881;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,composed,annotation,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1430864232;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,composed,annotation,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1446737720;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,composed,annotation,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1467730834;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,composed,annotation,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1468583965;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,composed,annotation,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1472736647;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,composed,annotation,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1518279448;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,composed,annotation,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1518615840;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,composed,annotation,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1539119653;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,composed,annotation,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1398891096;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,composed,annotation,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1401466476;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,composed,annotation,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1417014881;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,composed,annotation,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1430864232;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,composed,annotation,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1446737720;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,composed,annotation,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1467730834;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,composed,annotation,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1468583965;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,composed,annotation,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1472736647;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,composed,annotation,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1518279448;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,composed,annotation,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1518615840;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,composed,annotation,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1539119653;https://jira.spring.io/browse/SPR-11649;@Test_	public void composedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,composed,annotation,with,meta,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,composed,annotation,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1398891096;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedAnnotationsClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,annotations,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1401466476;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedAnnotationsClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,annotations,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1417014881;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedAnnotationsClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,annotations,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1430864232;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedAnnotationsClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,annotations,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1446737720;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedAnnotationsClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,annotations,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1467730834;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedAnnotationsClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,annotations,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1468583965;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedAnnotationsClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,annotations,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1472736647;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedAnnotationsClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,annotations,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1518279448;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedAnnotationsClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,annotations,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1518615840;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedAnnotationsClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,annotations,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception;1539119653;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {_		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory()__		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedAnnotationsClass.class.getName())__		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata()__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,annotation,metadata,reading,visitor,throws,exception,metadata,reader,factory,metadata,reader,factory,new,simple,metadata,reader,factory,metadata,reader,metadata,reader,metadata,reader,factory,get,metadata,reader,named,annotations,class,class,get,name,annotation,metadata,metadata,metadata,reader,get,annotation,metadata,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1398891096;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedAnnotationsClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,annotations,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1401466476;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedAnnotationsClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,annotations,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1417014881;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedAnnotationsClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,annotations,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1430864232;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedAnnotationsClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,annotations,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1446737720;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedAnnotationsClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,annotations,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1467730834;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedAnnotationsClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,annotations,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1468583965;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedAnnotationsClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,annotations,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1472736647;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedAnnotationsClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,annotations,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1518279448;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedAnnotationsClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,annotations,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1518615840;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedAnnotationsClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,annotations,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata();1539119653;https://jira.spring.io/browse/SPR-11649;@Test_	public void multipleAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedAnnotationsClass.class)__		assertMultipleAnnotationsWithIdenticalAttributeNames(metadata)__	};https,jira,spring,io,browse,spr,11649;test,public,void,multiple,annotations,with,identical,attribute,names,using,standard,annotation,metadata,annotation,metadata,metadata,new,standard,annotation,metadata,named,annotations,class,class,assert,multiple,annotations,with,identical,attribute,names,metadata
AnnotationMetadataTests -> @Test 	public void testStandardAnnotationMetadata_nestedAnnotationsAsMap_false() throws IOException;1329142650;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void testStandardAnnotationMetadata_nestedAnnotationsAsMap_false() throws IOException {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)___		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[])specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,ioexception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void testStandardAnnotationMetadata_nestedAnnotationsAsMap_false() throws IOException;1338206687;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void testStandardAnnotationMetadata_nestedAnnotationsAsMap_false() throws IOException {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)___		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[])specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,ioexception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void testStandardAnnotationMetadata_nestedAnnotationsAsMap_false() throws IOException;1356735495;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void testStandardAnnotationMetadata_nestedAnnotationsAsMap_false() throws IOException {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)___		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[])specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,ioexception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void testStandardAnnotationMetadata_nestedAnnotationsAsMap_false() throws IOException;1362408075;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void testStandardAnnotationMetadata_nestedAnnotationsAsMap_false() throws IOException {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)___		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[])specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,ioexception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void testStandardAnnotationMetadata_nestedAnnotationsAsMap_false() throws IOException;1368068203;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void testStandardAnnotationMetadata_nestedAnnotationsAsMap_false() throws IOException {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)___		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[])specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,ioexception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void testStandardAnnotationMetadata_nestedAnnotationsAsMap_false() throws IOException;1380306357;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void testStandardAnnotationMetadata_nestedAnnotationsAsMap_false() throws IOException {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)___		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[])specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,ioexception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1395269053;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)___		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1395766086;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)___		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1396794328;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)___		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1398098798;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)___		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1398891096;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)___		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1401466476;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)__		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1417014881;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)__		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1430864232;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)__		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1446737720;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)__		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1467730834;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)__		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1468583965;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)__		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1472736647;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)__		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1518279448;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)__		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1518615840;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)__		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
AnnotationMetadataTests -> @Test 	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception;1539119653;In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}_defaults to return nested annotations and annotation arrays as actual_Annotation instances. It is recommended for compatibility with ASM-based_AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to_'true' as is done in the main test above.;@Test_	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {_		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class)__		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName())__		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get("nestedAnnoArray")__		assertThat(nestedAnnoArray[0], instanceOf(NestedAnno.class))__	};in,order,to,preserve,backward,compatibility,link,standard,annotation,metadata,defaults,to,return,nested,annotations,and,annotation,arrays,as,actual,annotation,instances,it,is,recommended,for,compatibility,with,asm,based,annotation,metadata,implementations,to,set,the,nested,annotations,as,map,flag,to,true,as,is,done,in,the,main,test,above;test,public,void,throws,exception,annotation,metadata,metadata,new,standard,annotation,metadata,annotated,component,class,annotation,attributes,special,attrs,annotation,attributes,metadata,get,annotation,attributes,special,attr,class,get,name,annotation,nested,anno,array,annotation,special,attrs,get,nested,anno,array,assert,that,nested,anno,array,0,instance,of,nested,anno,class
