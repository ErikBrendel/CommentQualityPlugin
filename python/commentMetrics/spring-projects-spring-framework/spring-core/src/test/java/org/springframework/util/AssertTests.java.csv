commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void stateWithMessage() {     Assert.state(true, "enigma"). }
false;public;0;6;;@Test public void stateWithFalseExpressionAndMessage() {     thrown.expect(IllegalStateException.class).     thrown.expectMessage("enigma").     Assert.state(false, "enigma"). }
false;public;0;4;;@Test public void stateWithMessageSupplier() {     Assert.state(true, () -> "enigma"). }
false;public;0;6;;@Test public void stateWithFalseExpressionAndMessageSupplier() {     thrown.expect(IllegalStateException.class).     thrown.expectMessage("enigma").     Assert.state(false, () -> "enigma"). }
false;public;0;6;;@Test public void stateWithFalseExpressionAndNullMessageSupplier() {     thrown.expect(IllegalStateException.class).     thrown.expectMessage(equalTo(null)).     Assert.state(false, (Supplier<String>) null). }
false;public;0;4;;@Test public void isTrueWithMessage() {     Assert.isTrue(true, "enigma"). }
false;public;0;6;;@Test public void isTrueWithFalse() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.isTrue(false, "enigma"). }
false;public;0;4;;@Test public void isTrueWithMessageSupplier() {     Assert.isTrue(true, () -> "enigma"). }
false;public;0;6;;@Test public void isTrueWithFalseAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.isTrue(false, () -> "enigma"). }
false;public;0;6;;@Test public void isTrueWithFalseAndNullMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage(equalTo(null)).     Assert.isTrue(false, (Supplier<String>) null). }
false;public;0;4;;@Test public void isNullWithMessage() {     Assert.isNull(null, "Bla"). }
false;public;0;4;;@Test public void isNullWithMessageSupplier() {     Assert.isNull(null, () -> "enigma"). }
false;public;0;6;;@Test public void isNullWithNonNullObjectAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.isNull("foo", () -> "enigma"). }
false;public;0;6;;@Test public void isNullWithNonNullObjectAndNullMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage(equalTo(null)).     Assert.isNull("foo", (Supplier<String>) null). }
false;public;0;4;;@Test public void notNullWithMessage() {     Assert.notNull("foo", "enigma"). }
false;public;0;4;;@Test public void notNullWithMessageSupplier() {     Assert.notNull("foo", () -> "enigma"). }
false;public;0;6;;@Test public void notNullWithNullAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notNull(null, () -> "enigma"). }
false;public;0;6;;@Test public void notNullWithNullAndNullMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage(equalTo(null)).     Assert.notNull(null, (Supplier<String>) null). }
false;public;0;4;;@Test public void hasLength() {     Assert.hasLength("I Heart ...", "enigma"). }
false;public;0;4;;@Test public void hasLengthWithWhitespaceOnly() {     Assert.hasLength("\t  ", "enigma"). }
false;public;0;6;;@Test public void hasLengthWithEmptyString() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.hasLength("", "enigma"). }
false;public;0;6;;@Test public void hasLengthWithNull() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.hasLength(null, "enigma"). }
false;public;0;4;;@Test public void hasLengthWithMessageSupplier() {     Assert.hasLength("foo", () -> "enigma"). }
false;public;0;4;;@Test public void hasLengthWithWhitespaceOnlyAndMessageSupplier() {     Assert.hasLength("\t", () -> "enigma"). }
false;public;0;6;;@Test public void hasLengthWithEmptyStringAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.hasLength("", () -> "enigma"). }
false;public;0;6;;@Test public void hasLengthWithNullAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.hasLength(null, () -> "enigma"). }
false;public;0;6;;@Test public void hasLengthWithNullAndNullMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage(equalTo(null)).     Assert.hasLength(null, (Supplier<String>) null). }
false;public;0;4;;@Test public void hasText() {     Assert.hasText("foo", "enigma"). }
false;public;0;6;;@Test public void hasTextWithWhitespaceOnly() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.hasText("\t ", "enigma"). }
false;public;0;6;;@Test public void hasTextWithEmptyString() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.hasText("", "enigma"). }
false;public;0;6;;@Test public void hasTextWithNull() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.hasText(null, "enigma"). }
false;public;0;4;;@Test public void hasTextWithMessageSupplier() {     Assert.hasText("foo", () -> "enigma"). }
false;public;0;6;;@Test public void hasTextWithWhitespaceOnlyAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.hasText("\t ", () -> "enigma"). }
false;public;0;6;;@Test public void hasTextWithEmptyStringAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.hasText("", () -> "enigma"). }
false;public;0;6;;@Test public void hasTextWithNullAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.hasText(null, () -> "enigma"). }
false;public;0;6;;@Test public void hasTextWithNullAndNullMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage(equalTo(null)).     Assert.hasText(null, (Supplier<String>) null). }
false;public;0;4;;@Test public void doesNotContainWithNullSearchString() {     Assert.doesNotContain(null, "rod", "enigma"). }
false;public;0;4;;@Test public void doesNotContainWithNullSubstring() {     Assert.doesNotContain("A cool chick's name is Brod.", null, "enigma"). }
false;public;0;4;;@Test public void doesNotContainWithEmptySubstring() {     Assert.doesNotContain("A cool chick's name is Brod.", "", "enigma"). }
false;public;0;4;;@Test public void doesNotContainWithNullSearchStringAndNullSubstring() {     Assert.doesNotContain(null, null, "enigma"). }
false;public;0;4;;@Test public void doesNotContainWithMessageSupplier() {     Assert.doesNotContain("foo", "bar", () -> "enigma"). }
false;public;0;4;;@Test public void doesNotContainWithNullSearchStringAndMessageSupplier() {     Assert.doesNotContain(null, "bar", () -> "enigma"). }
false;public;0;4;;@Test public void doesNotContainWithNullSubstringAndMessageSupplier() {     Assert.doesNotContain("foo", null, () -> "enigma"). }
false;public;0;4;;@Test public void doesNotContainWithNullSearchStringAndNullSubstringAndMessageSupplier() {     Assert.doesNotContain(null, null, () -> "enigma"). }
false;public;0;6;;@Test public void doesNotContainWithSubstringPresentInSearchStringAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.doesNotContain("1234", "23", () -> "enigma"). }
false;public;0;6;;@Test public void doesNotContainWithNullMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage(equalTo(null)).     Assert.doesNotContain("1234", "23", (Supplier<String>) null). }
false;public;0;4;;@Test public void notEmptyArray() {     Assert.notEmpty(new String[] { "1234" }, "enigma"). }
false;public;0;6;;@Test public void notEmptyArrayWithEmptyArray() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notEmpty(new String[] {}, "enigma"). }
false;public;0;6;;@Test public void notEmptyArrayWithNullArray() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notEmpty((Object[]) null, "enigma"). }
false;public;0;4;;@Test public void notEmptyArrayWithMessageSupplier() {     Assert.notEmpty(new String[] { "1234" }, () -> "enigma"). }
false;public;0;6;;@Test public void notEmptyArrayWithEmptyArrayAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notEmpty(new String[] {}, () -> "enigma"). }
false;public;0;6;;@Test public void notEmptyArrayWithNullArrayAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notEmpty((Object[]) null, () -> "enigma"). }
false;public;0;6;;@Test public void notEmptyArrayWithEmptyArrayAndNullMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage(equalTo(null)).     Assert.notEmpty(new String[] {}, (Supplier<String>) null). }
false;public;0;4;;@Test public void noNullElements() {     Assert.noNullElements(new String[] { "1234" }, "enigma"). }
false;public;0;4;;@Test public void noNullElementsWithEmptyArray() {     Assert.noNullElements(new String[] {}, "enigma"). }
false;public;0;4;;@Test public void noNullElementsWithMessageSupplier() {     Assert.noNullElements(new String[] { "1234" }, () -> "enigma"). }
false;public;0;4;;@Test public void noNullElementsWithEmptyArrayAndMessageSupplier() {     Assert.noNullElements(new String[] {}, () -> "enigma"). }
false;public;0;4;;@Test public void noNullElementsWithNullArrayAndMessageSupplier() {     Assert.noNullElements((Object[]) null, () -> "enigma"). }
false;public;0;6;;@Test public void noNullElementsWithNullElementsAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.noNullElements(new String[] { "foo", null, "bar" }, () -> "enigma"). }
false;public;0;6;;@Test public void noNullElementsWithNullElementsAndNullMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage(equalTo(null)).     Assert.noNullElements(new String[] { "foo", null, "bar" }, (Supplier<String>) null). }
false;public;0;4;;@Test public void notEmptyCollection() {     Assert.notEmpty(singletonList("foo"), "enigma"). }
false;public;0;6;;@Test public void notEmptyCollectionWithEmptyCollection() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notEmpty(emptyList(), "enigma"). }
false;public;0;6;;@Test public void notEmptyCollectionWithNullCollection() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notEmpty((Collection<?>) null, "enigma"). }
false;public;0;4;;@Test public void notEmptyCollectionWithMessageSupplier() {     Assert.notEmpty(singletonList("foo"), () -> "enigma"). }
false;public;0;6;;@Test public void notEmptyCollectionWithEmptyCollectionAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notEmpty(emptyList(), () -> "enigma"). }
false;public;0;6;;@Test public void notEmptyCollectionWithNullCollectionAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notEmpty((Collection<?>) null, () -> "enigma"). }
false;public;0;6;;@Test public void notEmptyCollectionWithEmptyCollectionAndNullMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage(equalTo(null)).     Assert.notEmpty(emptyList(), (Supplier<String>) null). }
false;public;0;4;;@Test public void notEmptyMap() {     Assert.notEmpty(singletonMap("foo", "bar"), "enigma"). }
false;public;0;6;;@Test public void notEmptyMapWithNullMap() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notEmpty((Map<?, ?>) null, "enigma"). }
false;public;0;6;;@Test public void notEmptyMapWithEmptyMap() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notEmpty(emptyMap(), "enigma"). }
false;public;0;4;;@Test public void notEmptyMapWithMessageSupplier() {     Assert.notEmpty(singletonMap("foo", "bar"), () -> "enigma"). }
false;public;0;6;;@Test public void notEmptyMapWithEmptyMapAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notEmpty(emptyMap(), () -> "enigma"). }
false;public;0;6;;@Test public void notEmptyMapWithNullMapAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma").     Assert.notEmpty((Map<?, ?>) null, () -> "enigma"). }
false;public;0;6;;@Test public void notEmptyMapWithEmptyMapAndNullMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage(equalTo(null)).     Assert.notEmpty(emptyMap(), (Supplier<String>) null). }
false;public;0;4;;@Test public void isInstanceOf() {     Assert.isInstanceOf(String.class, "foo", "enigma"). }
false;public;0;6;;@Test public void isInstanceOfWithNullType() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Type to check against must not be null").     Assert.isInstanceOf(null, "foo", "enigma"). }
false;public;0;6;;@Test public void isInstanceOfWithNullInstance() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma: null").     Assert.isInstanceOf(String.class, null, "enigma"). }
false;public;0;6;;@Test public void isInstanceOfWithTypeMismatchAndNullMessage() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Object of class [java.lang.Long] must be an instance of class java.lang.String").     Assert.isInstanceOf(String.class, 42L, (String) null). }
false;public;0;6;;@Test public void isInstanceOfWithTypeMismatchAndCustomMessage() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Custom message: java.lang.Long").     Assert.isInstanceOf(String.class, 42L, "Custom message"). }
false;public;0;7;;@Test public void isInstanceOfWithTypeMismatchAndCustomMessageWithSeparator() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Custom message: Object of class [java.lang.Long] must be an instance of class java.lang.String").     Assert.isInstanceOf(String.class, 42L, "Custom message:"). }
false;public;0;6;;@Test public void isInstanceOfWithTypeMismatchAndCustomMessageWithSpace() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Custom message for java.lang.Long").     Assert.isInstanceOf(String.class, 42L, "Custom message for "). }
false;public;0;4;;@Test public void isInstanceOfWithMessageSupplier() {     Assert.isInstanceOf(String.class, "foo", () -> "enigma"). }
false;public;0;6;;@Test public void isInstanceOfWithNullTypeAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Type to check against must not be null").     Assert.isInstanceOf(null, "foo", () -> "enigma"). }
false;public;0;6;;@Test public void isInstanceOfWithNullInstanceAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma: null").     Assert.isInstanceOf(String.class, null, () -> "enigma"). }
false;public;0;6;;@Test public void isInstanceOfWithTypeMismatchAndNullMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Object of class [java.lang.Long] must be an instance of class java.lang.String").     Assert.isInstanceOf(String.class, 42L, (Supplier<String>) null). }
false;public;0;6;;@Test public void isInstanceOfWithTypeMismatchAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma: java.lang.Long").     Assert.isInstanceOf(String.class, 42L, () -> "enigma"). }
false;public;0;4;;@Test public void isAssignable() {     Assert.isAssignable(Number.class, Integer.class, "enigma"). }
false;public;0;6;;@Test public void isAssignableWithNullSupertype() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Super type to check against must not be null").     Assert.isAssignable(null, Integer.class, "enigma"). }
false;public;0;6;;@Test public void isAssignableWithNullSubtype() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma: null").     Assert.isAssignable(Integer.class, null, "enigma"). }
false;public;0;6;;@Test public void isAssignableWithTypeMismatchAndNullMessage() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("class java.lang.Integer is not assignable to class java.lang.String").     Assert.isAssignable(String.class, Integer.class, (String) null). }
false;public;0;6;;@Test public void isAssignableWithTypeMismatchAndCustomMessage() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Custom message: class java.lang.Integer").     Assert.isAssignable(String.class, Integer.class, "Custom message"). }
false;public;0;6;;@Test public void isAssignableWithTypeMismatchAndCustomMessageWithSeparator() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Custom message: class java.lang.Integer is not assignable to class java.lang.String").     Assert.isAssignable(String.class, Integer.class, "Custom message:"). }
false;public;0;6;;@Test public void isAssignableWithTypeMismatchAndCustomMessageWithSpace() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Custom message for class java.lang.Integer").     Assert.isAssignable(String.class, Integer.class, "Custom message for "). }
false;public;0;4;;@Test public void isAssignableWithMessageSupplier() {     Assert.isAssignable(Number.class, Integer.class, () -> "enigma"). }
false;public;0;6;;@Test public void isAssignableWithNullSupertypeAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Super type to check against must not be null").     Assert.isAssignable(null, Integer.class, () -> "enigma"). }
false;public;0;6;;@Test public void isAssignableWithNullSubtypeAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma: null").     Assert.isAssignable(Integer.class, null, () -> "enigma"). }
false;public;0;6;;@Test public void isAssignableWithTypeMismatchAndNullMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("class java.lang.Integer is not assignable to class java.lang.String").     Assert.isAssignable(String.class, Integer.class, (Supplier<String>) null). }
false;public;0;6;;@Test public void isAssignableWithTypeMismatchAndMessageSupplier() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("enigma: class java.lang.Integer").     Assert.isAssignable(String.class, Integer.class, () -> "enigma"). }
false;public;0;4;;@Test public void state() {     Assert.state(true, "enigma"). }
false;public;0;6;;@Test public void stateWithFalseExpression() {     thrown.expect(IllegalStateException.class).     thrown.expectMessage("enigma").     Assert.state(false, "enigma"). }
