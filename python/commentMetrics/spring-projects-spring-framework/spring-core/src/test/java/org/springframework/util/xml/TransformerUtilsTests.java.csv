commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void enableIndentingSunnyDay() throws Exception {     Transformer transformer = new StubTransformer().     TransformerUtils.enableIndenting(transformer).     String indent = transformer.getOutputProperty(OutputKeys.INDENT).     assertNotNull(indent).     assertEquals("yes", indent).     String indentAmount = transformer.getOutputProperty("{http://xml.apache.org/xslt}indent-amount").     assertNotNull(indentAmount).     assertEquals(String.valueOf(TransformerUtils.DEFAULT_INDENT_AMOUNT), indentAmount). }
false;public;0;12;;@Test public void enableIndentingSunnyDayWithCustomKosherIndentAmount() throws Exception {     final String indentAmountProperty = "10".     Transformer transformer = new StubTransformer().     TransformerUtils.enableIndenting(transformer, Integer.valueOf(indentAmountProperty)).     String indent = transformer.getOutputProperty(OutputKeys.INDENT).     assertNotNull(indent).     assertEquals("yes", indent).     String indentAmount = transformer.getOutputProperty("{http://xml.apache.org/xslt}indent-amount").     assertNotNull(indentAmount).     assertEquals(indentAmountProperty, indentAmount). }
false;public;0;8;;@Test public void disableIndentingSunnyDay() throws Exception {     Transformer transformer = new StubTransformer().     TransformerUtils.disableIndenting(transformer).     String indent = transformer.getOutputProperty(OutputKeys.INDENT).     assertNotNull(indent).     assertEquals("no", indent). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void enableIndentingWithNullTransformer() throws Exception {     TransformerUtils.enableIndenting(null). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void disableIndentingWithNullTransformer() throws Exception {     TransformerUtils.disableIndenting(null). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void enableIndentingWithNegativeIndentAmount() throws Exception {     TransformerUtils.enableIndenting(new StubTransformer(), -21938). }
false;public;0;4;;@Test public void enableIndentingWithZeroIndentAmount() throws Exception {     TransformerUtils.enableIndenting(new StubTransformer(), 0). }
false;public;2;4;;@Override public void transform(Source xmlSource, Result outputTarget) throws TransformerException {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public void setParameter(String name, Object value) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public Object getParameter(String name) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public void clearParameters() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void setURIResolver(URIResolver resolver) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public URIResolver getURIResolver() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void setOutputProperties(Properties oformat) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Properties getOutputProperties() {     return this.outputProperties. }
false;public;2;4;;@Override public void setOutputProperty(String name, String value) throws IllegalArgumentException {     this.outputProperties.setProperty(name, value). }
false;public;1;4;;@Override public String getOutputProperty(String name) throws IllegalArgumentException {     return this.outputProperties.getProperty(name). }
false;public;1;4;;@Override public void setErrorListener(ErrorListener listener) throws IllegalArgumentException {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public ErrorListener getErrorListener() {     throw new UnsupportedOperationException(). }
