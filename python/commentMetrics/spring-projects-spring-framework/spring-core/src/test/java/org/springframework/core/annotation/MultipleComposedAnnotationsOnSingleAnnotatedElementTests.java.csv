commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void getMultipleComposedAnnotationsOnClass() {     assertGetAllMergedAnnotationsBehavior(MultipleComposedCachesClass.class). }
false;public;0;4;;@Test public void getMultipleInheritedComposedAnnotationsOnSuperclass() {     assertGetAllMergedAnnotationsBehavior(SubMultipleComposedCachesClass.class). }
false;public;0;13;;@Test public void getMultipleNoninheritedComposedAnnotationsOnClass() {     Class<?> element = MultipleNoninheritedComposedCachesClass.class.     Set<Cacheable> cacheables = getAllMergedAnnotations(element, Cacheable.class).     assertNotNull(cacheables).     assertEquals(2, cacheables.size()).     Iterator<Cacheable> iterator = cacheables.iterator().     Cacheable cacheable1 = iterator.next().     Cacheable cacheable2 = iterator.next().     assertEquals("noninheritedCache1", cacheable1.value()).     assertEquals("noninheritedCache2", cacheable2.value()). }
false;public;0;7;;@Test public void getMultipleNoninheritedComposedAnnotationsOnSuperclass() {     Class<?> element = SubMultipleNoninheritedComposedCachesClass.class.     Set<Cacheable> cacheables = getAllMergedAnnotations(element, Cacheable.class).     assertNotNull(cacheables).     assertEquals(0, cacheables.size()). }
false;public;0;4;;@Test public void getComposedPlusLocalAnnotationsOnClass() {     assertGetAllMergedAnnotationsBehavior(ComposedPlusLocalCachesClass.class). }
false;public;0;7;;@Test public void getMultipleComposedAnnotationsOnInterface() {     Class<MultipleComposedCachesOnInterfaceClass> element = MultipleComposedCachesOnInterfaceClass.class.     Set<Cacheable> cacheables = getAllMergedAnnotations(element, Cacheable.class).     assertNotNull(cacheables).     assertEquals(0, cacheables.size()). }
false;public;0;5;;@Test public void getMultipleComposedAnnotationsOnMethod() throws Exception {     AnnotatedElement element = getClass().getDeclaredMethod("multipleComposedCachesMethod").     assertGetAllMergedAnnotationsBehavior(element). }
false;public;0;5;;@Test public void getComposedPlusLocalAnnotationsOnMethod() throws Exception {     AnnotatedElement element = getClass().getDeclaredMethod("composedPlusLocalCachesMethod").     assertGetAllMergedAnnotationsBehavior(element). }
false;public;0;7;;@Test @Ignore("Disabled since some Java 8 updates handle the bridge method differently") public void getMultipleComposedAnnotationsOnBridgeMethod() throws Exception {     Set<Cacheable> cacheables = getAllMergedAnnotations(getBridgeMethod(), Cacheable.class).     assertNotNull(cacheables).     assertEquals(0, cacheables.size()). }
false;public;0;4;;@Test public void findMultipleComposedAnnotationsOnClass() {     assertFindAllMergedAnnotationsBehavior(MultipleComposedCachesClass.class). }
false;public;0;4;;@Test public void findMultipleInheritedComposedAnnotationsOnSuperclass() {     assertFindAllMergedAnnotationsBehavior(SubMultipleComposedCachesClass.class). }
false;public;0;13;;@Test public void findMultipleNoninheritedComposedAnnotationsOnClass() {     Class<?> element = MultipleNoninheritedComposedCachesClass.class.     Set<Cacheable> cacheables = findAllMergedAnnotations(element, Cacheable.class).     assertNotNull(cacheables).     assertEquals(2, cacheables.size()).     Iterator<Cacheable> iterator = cacheables.iterator().     Cacheable cacheable1 = iterator.next().     Cacheable cacheable2 = iterator.next().     assertEquals("noninheritedCache1", cacheable1.value()).     assertEquals("noninheritedCache2", cacheable2.value()). }
false;public;0;13;;@Test public void findMultipleNoninheritedComposedAnnotationsOnSuperclass() {     Class<?> element = SubMultipleNoninheritedComposedCachesClass.class.     Set<Cacheable> cacheables = findAllMergedAnnotations(element, Cacheable.class).     assertNotNull(cacheables).     assertEquals(2, cacheables.size()).     Iterator<Cacheable> iterator = cacheables.iterator().     Cacheable cacheable1 = iterator.next().     Cacheable cacheable2 = iterator.next().     assertEquals("noninheritedCache1", cacheable1.value()).     assertEquals("noninheritedCache2", cacheable2.value()). }
false;public;0;4;;@Test public void findComposedPlusLocalAnnotationsOnClass() {     assertFindAllMergedAnnotationsBehavior(ComposedPlusLocalCachesClass.class). }
false;public;0;4;;@Test public void findMultipleComposedAnnotationsOnInterface() {     assertFindAllMergedAnnotationsBehavior(MultipleComposedCachesOnInterfaceClass.class). }
false;public;0;4;;@Test public void findComposedCacheOnInterfaceAndLocalCacheOnClass() {     assertFindAllMergedAnnotationsBehavior(ComposedCacheOnInterfaceAndLocalCacheClass.class). }
false;public;0;5;;@Test public void findMultipleComposedAnnotationsOnMethod() throws Exception {     AnnotatedElement element = getClass().getDeclaredMethod("multipleComposedCachesMethod").     assertFindAllMergedAnnotationsBehavior(element). }
false;public;0;5;;@Test public void findComposedPlusLocalAnnotationsOnMethod() throws Exception {     AnnotatedElement element = getClass().getDeclaredMethod("composedPlusLocalCachesMethod").     assertFindAllMergedAnnotationsBehavior(element). }
false;public;0;4;;@Test public void findMultipleComposedAnnotationsOnBridgeMethod() throws Exception {     assertFindAllMergedAnnotationsBehavior(getBridgeMethod()). }
true;public;0;20;/**  * Bridge/bridged method setup code copied from  * {@link org.springframework.core.BridgeMethodResolverTests#testWithGenericParameter()}.  */ ;/**  * Bridge/bridged method setup code copied from  * {@link org.springframework.core.BridgeMethodResolverTests#testWithGenericParameter()}.  */ public Method getBridgeMethod() throws NoSuchMethodException {     Method[] methods = StringGenericParameter.class.getMethods().     Method bridgeMethod = null.     Method bridgedMethod = null.     for (Method method : methods) {         if ("getFor".equals(method.getName()) && !method.getParameterTypes()[0].equals(Integer.class)) {             if (method.getReturnType().equals(Object.class)) {                 bridgeMethod = method.             } else {                 bridgedMethod = method.             }         }     }     assertTrue(bridgeMethod != null && bridgeMethod.isBridge()).     assertTrue(bridgedMethod != null && !bridgedMethod.isBridge()).     return bridgeMethod. }
false;private;1;15;;private void assertGetAllMergedAnnotationsBehavior(AnnotatedElement element) {     assertNotNull(element).     Set<Cacheable> cacheables = getAllMergedAnnotations(element, Cacheable.class).     assertNotNull(cacheables).     assertEquals(2, cacheables.size()).     Iterator<Cacheable> iterator = cacheables.iterator().     Cacheable fooCacheable = iterator.next().     Cacheable barCacheable = iterator.next().     assertEquals("fooKey", fooCacheable.key()).     assertEquals("fooCache", fooCacheable.value()).     assertEquals("barKey", barCacheable.key()).     assertEquals("barCache", barCacheable.value()). }
false;private;1;15;;private void assertFindAllMergedAnnotationsBehavior(AnnotatedElement element) {     assertNotNull(element).     Set<Cacheable> cacheables = findAllMergedAnnotations(element, Cacheable.class).     assertNotNull(cacheables).     assertEquals(2, cacheables.size()).     Iterator<Cacheable> iterator = cacheables.iterator().     Cacheable fooCacheable = iterator.next().     Cacheable barCacheable = iterator.next().     assertEquals("fooKey", fooCacheable.key()).     assertEquals("fooCache", fooCacheable.value()).     assertEquals("barKey", barCacheable.key()).     assertEquals("barCache", barCacheable.value()). }
false;private;0;4;;@FooCache(key = "fooKey") @BarCache(key = "barKey") private void multipleComposedCachesMethod() { }
false;private;0;4;;@Cacheable(cacheName = "fooCache", key = "fooKey") @BarCache(key = "barKey") private void composedPlusLocalCachesMethod() { }
false;;1;1;;T getFor(Class<T> cls).
false;public;1;6;;@FooCache(key = "fooKey") @BarCache(key = "barKey") @Override public String getFor(Class<String> cls) {     return "foo". }
false;public;1;3;;public String getFor(Integer integer) {     return "foo". }
