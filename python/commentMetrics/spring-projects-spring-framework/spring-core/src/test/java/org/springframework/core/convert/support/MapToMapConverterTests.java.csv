commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     conversionService.addConverter(new MapToMapConverter(conversionService)). }
false;public;0;24;;@Test public void scalarMap() throws Exception {     Map<String, String> map = new HashMap<>().     map.put("1", "9").     map.put("2", "37").     TypeDescriptor sourceType = TypeDescriptor.forObject(map).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarMapTarget")).     assertTrue(conversionService.canConvert(sourceType, targetType)).     try {         conversionService.convert(map, sourceType, targetType).     } catch (ConversionFailedException ex) {         assertTrue(ex.getCause() instanceof ConverterNotFoundException).     }     conversionService.addConverterFactory(new StringToNumberConverterFactory()).     assertTrue(conversionService.canConvert(sourceType, targetType)).     @SuppressWarnings("unchecked")     Map<Integer, Integer> result = (Map<Integer, Integer>) conversionService.convert(map, sourceType, targetType).     assertFalse(map.equals(result)).     assertEquals((Integer) 9, result.get(1)).     assertEquals((Integer) 37, result.get(2)). }
false;public;0;9;;@Test public void scalarMapNotGenericTarget() throws Exception {     Map<String, String> map = new HashMap<>().     map.put("1", "9").     map.put("2", "37").     assertTrue(conversionService.canConvert(Map.class, Map.class)).     assertSame(map, conversionService.convert(map, Map.class)). }
false;public;0;24;;@Test public void scalarMapNotGenericSourceField() throws Exception {     Map<String, String> map = new HashMap<>().     map.put("1", "9").     map.put("2", "37").     TypeDescriptor sourceType = new TypeDescriptor(getClass().getField("notGenericMapSource")).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarMapTarget")).     assertTrue(conversionService.canConvert(sourceType, targetType)).     try {         conversionService.convert(map, sourceType, targetType).     } catch (ConversionFailedException ex) {         assertTrue(ex.getCause() instanceof ConverterNotFoundException).     }     conversionService.addConverterFactory(new StringToNumberConverterFactory()).     assertTrue(conversionService.canConvert(sourceType, targetType)).     @SuppressWarnings("unchecked")     Map<Integer, Integer> result = (Map<Integer, Integer>) conversionService.convert(map, sourceType, targetType).     assertFalse(map.equals(result)).     assertEquals((Integer) 9, result.get(1)).     assertEquals((Integer) 37, result.get(2)). }
false;public;0;25;;@Test public void collectionMap() throws Exception {     Map<String, List<String>> map = new HashMap<>().     map.put("1", Arrays.asList("9", "12")).     map.put("2", Arrays.asList("37", "23")).     TypeDescriptor sourceType = TypeDescriptor.forObject(map).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("collectionMapTarget")).     assertTrue(conversionService.canConvert(sourceType, targetType)).     try {         conversionService.convert(map, sourceType, targetType).     } catch (ConversionFailedException ex) {         assertTrue(ex.getCause() instanceof ConverterNotFoundException).     }     conversionService.addConverter(new CollectionToCollectionConverter(conversionService)).     conversionService.addConverterFactory(new StringToNumberConverterFactory()).     assertTrue(conversionService.canConvert(sourceType, targetType)).     @SuppressWarnings("unchecked")     Map<Integer, List<Integer>> result = (Map<Integer, List<Integer>>) conversionService.convert(map, sourceType, targetType).     assertFalse(map.equals(result)).     assertEquals(Arrays.asList(9, 12), result.get(1)).     assertEquals(Arrays.asList(37, 23), result.get(2)). }
false;public;0;26;;@Test public void collectionMapSourceTarget() throws Exception {     Map<String, List<String>> map = new HashMap<>().     map.put("1", Arrays.asList("9", "12")).     map.put("2", Arrays.asList("37", "23")).     TypeDescriptor sourceType = new TypeDescriptor(getClass().getField("sourceCollectionMapTarget")).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("collectionMapTarget")).     assertFalse(conversionService.canConvert(sourceType, targetType)).     try {         conversionService.convert(map, sourceType, targetType).         fail("Should have failed").     } catch (ConverterNotFoundException ex) {     // expected     }     conversionService.addConverter(new CollectionToCollectionConverter(conversionService)).     conversionService.addConverterFactory(new StringToNumberConverterFactory()).     assertTrue(conversionService.canConvert(sourceType, targetType)).     @SuppressWarnings("unchecked")     Map<Integer, List<Integer>> result = (Map<Integer, List<Integer>>) conversionService.convert(map, sourceType, targetType).     assertFalse(map.equals(result)).     assertEquals(Arrays.asList(9, 12), result.get(1)).     assertEquals(Arrays.asList(37, 23), result.get(2)). }
false;public;0;9;;@Test public void collectionMapNotGenericTarget() throws Exception {     Map<String, List<String>> map = new HashMap<>().     map.put("1", Arrays.asList("9", "12")).     map.put("2", Arrays.asList("37", "23")).     assertTrue(conversionService.canConvert(Map.class, Map.class)).     assertSame(map, conversionService.convert(map, Map.class)). }
false;public;0;11;;@Test public void collectionMapNotGenericTargetCollectionToObjectInteraction() throws Exception {     Map<String, List<String>> map = new HashMap<>().     map.put("1", Arrays.asList("9", "12")).     map.put("2", Arrays.asList("37", "23")).     conversionService.addConverter(new CollectionToCollectionConverter(conversionService)).     conversionService.addConverter(new CollectionToObjectConverter(conversionService)).     assertTrue(conversionService.canConvert(Map.class, Map.class)).     assertSame(map, conversionService.convert(map, Map.class)). }
false;public;0;9;;@Test public void emptyMap() throws Exception {     Map<String, String> map = new HashMap<>().     TypeDescriptor sourceType = TypeDescriptor.forObject(map).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyMapTarget")).     assertTrue(conversionService.canConvert(sourceType, targetType)).     assertSame(map, conversionService.convert(map, sourceType, targetType)). }
false;public;0;7;;@Test public void emptyMapNoTargetGenericInfo() throws Exception {     Map<String, String> map = new HashMap<>().     assertTrue(conversionService.canConvert(Map.class, Map.class)).     assertSame(map, conversionService.convert(map, Map.class)). }
false;public;0;12;;@Test public void emptyMapDifferentTargetImplType() throws Exception {     Map<String, String> map = new HashMap<>().     TypeDescriptor sourceType = TypeDescriptor.forObject(map).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyMapDifferentTarget")).     assertTrue(conversionService.canConvert(sourceType, targetType)).     @SuppressWarnings("unchecked")     LinkedHashMap<String, String> result = (LinkedHashMap<String, String>) conversionService.convert(map, sourceType, targetType).     assertEquals(map, result).     assertEquals(LinkedHashMap.class, result.getClass()). }
false;public;0;16;;@Test public void noDefaultConstructorCopyNotRequired() throws Exception {     // SPR-9284     NoDefaultConstructorMap<String, Integer> map = new NoDefaultConstructorMap<>(Collections.<String, Integer>singletonMap("1", 1)).     TypeDescriptor sourceType = TypeDescriptor.map(NoDefaultConstructorMap.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)).     TypeDescriptor targetType = TypeDescriptor.map(NoDefaultConstructorMap.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)).     assertTrue(conversionService.canConvert(sourceType, targetType)).     @SuppressWarnings("unchecked")     Map<String, Integer> result = (Map<String, Integer>) conversionService.convert(map, sourceType, targetType).     assertEquals(map, result).     assertEquals(NoDefaultConstructorMap.class, result.getClass()). }
false;public;0;14;;@Test @SuppressWarnings("unchecked") public void multiValueMapToMultiValueMap() throws Exception {     DefaultConversionService.addDefaultConverters(conversionService).     MultiValueMap<String, Integer> source = new LinkedMultiValueMap<>().     source.put("a", Arrays.asList(1, 2, 3)).     source.put("b", Arrays.asList(4, 5, 6)).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("multiValueMapTarget")).     MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType).     assertThat(converted.size(), equalTo(2)).     assertThat(converted.get("a"), equalTo(Arrays.asList("1", "2", "3"))).     assertThat(converted.get("b"), equalTo(Arrays.asList("4", "5", "6"))). }
false;public;0;14;;@Test @SuppressWarnings("unchecked") public void mapToMultiValueMap() throws Exception {     DefaultConversionService.addDefaultConverters(conversionService).     Map<String, Integer> source = new HashMap<>().     source.put("a", 1).     source.put("b", 2).     TypeDescriptor targetType = new TypeDescriptor(getClass().getField("multiValueMapTarget")).     MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType).     assertThat(converted.size(), equalTo(2)).     assertThat(converted.get("a"), equalTo(Arrays.asList("1"))).     assertThat(converted.get("b"), equalTo(Arrays.asList("2"))). }
false;public;0;13;;@Test public void testStringToEnumMap() throws Exception {     conversionService.addConverterFactory(new StringToEnumConverterFactory()).     Map<String, Integer> source = new HashMap<>().     source.put("A", 1).     source.put("C", 2).     EnumMap<MyEnum, Integer> result = new EnumMap<>(MyEnum.class).     result.put(MyEnum.A, 1).     result.put(MyEnum.C, 2).     assertEquals(result, conversionService.convert(source, TypeDescriptor.forObject(source), new TypeDescriptor(getClass().getField("enumMap")))). }
