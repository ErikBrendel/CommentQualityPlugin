commented;modifiers;parameterAmount;loc;comment;code
false;private,static;3;9;;private static Method findMethodWithReturnType(String name, Class<?> returnType, Class<SettingsDaoImpl> targetType) {     Method[] methods = targetType.getMethods().     for (Method m : methods) {         if (m.getName().equals(name) && m.getReturnType().equals(returnType)) {             return m.         }     }     return null. }
false;public;0;10;;@Test public void testFindBridgedMethod() throws Exception {     Method unbridged = MyFoo.class.getDeclaredMethod("someMethod", String.class, Object.class).     Method bridged = MyFoo.class.getDeclaredMethod("someMethod", Serializable.class, Object.class).     assertFalse(unbridged.isBridge()).     assertTrue(bridged.isBridge()).     assertEquals("Unbridged method not returned directly", unbridged, BridgeMethodResolver.findBridgedMethod(unbridged)).     assertEquals("Incorrect bridged method returned", unbridged, BridgeMethodResolver.findBridgedMethod(bridged)). }
false;public;0;10;;@Test public void testFindBridgedVarargMethod() throws Exception {     Method unbridged = MyFoo.class.getDeclaredMethod("someVarargMethod", String.class, Object[].class).     Method bridged = MyFoo.class.getDeclaredMethod("someVarargMethod", Serializable.class, Object[].class).     assertFalse(unbridged.isBridge()).     assertTrue(bridged.isBridge()).     assertEquals("Unbridged method not returned directly", unbridged, BridgeMethodResolver.findBridgedMethod(unbridged)).     assertEquals("Incorrect bridged method returned", unbridged, BridgeMethodResolver.findBridgedMethod(bridged)). }
false;public;0;10;;@Test public void testFindBridgedMethodInHierarchy() throws Exception {     Method bridgeMethod = DateAdder.class.getMethod("add", Object.class).     assertTrue(bridgeMethod.isBridge()).     Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(bridgeMethod).     assertFalse(bridgedMethod.isBridge()).     assertEquals("add", bridgedMethod.getName()).     assertEquals(1, bridgedMethod.getParameterCount()).     assertEquals(Date.class, bridgedMethod.getParameterTypes()[0]). }
false;public;0;9;;@Test public void testIsBridgeMethodFor() throws Exception {     Method bridged = MyBar.class.getDeclaredMethod("someMethod", String.class, Object.class).     Method other = MyBar.class.getDeclaredMethod("someMethod", Integer.class, Object.class).     Method bridge = MyBar.class.getDeclaredMethod("someMethod", Object.class, Object.class).     assertTrue("Should be bridge method", BridgeMethodResolver.isBridgeMethodFor(bridge, bridged, MyBar.class)).     assertFalse("Should not be bridge method", BridgeMethodResolver.isBridgeMethodFor(bridge, other, MyBar.class)). }
false;public;0;11;;@Test public void testDoubleParameterization() throws Exception {     Method objectBridge = MyBoo.class.getDeclaredMethod("foo", Object.class).     Method serializableBridge = MyBoo.class.getDeclaredMethod("foo", Serializable.class).     Method stringFoo = MyBoo.class.getDeclaredMethod("foo", String.class).     Method integerFoo = MyBoo.class.getDeclaredMethod("foo", Integer.class).     assertEquals("foo(String) not resolved.", stringFoo, BridgeMethodResolver.findBridgedMethod(objectBridge)).     assertEquals("foo(Integer) not resolved.", integerFoo, BridgeMethodResolver.findBridgedMethod(serializableBridge)). }
false;public;0;13;;@Test public void testFindBridgedMethodFromMultipleBridges() throws Exception {     Method loadWithObjectReturn = findMethodWithReturnType("load", Object.class, SettingsDaoImpl.class).     assertNotNull(loadWithObjectReturn).     Method loadWithSettingsReturn = findMethodWithReturnType("load", Settings.class, SettingsDaoImpl.class).     assertNotNull(loadWithSettingsReturn).     assertNotSame(loadWithObjectReturn, loadWithSettingsReturn).     Method method = SettingsDaoImpl.class.getMethod("load").     assertEquals(method, BridgeMethodResolver.findBridgedMethod(loadWithObjectReturn)).     assertEquals(method, BridgeMethodResolver.findBridgedMethod(loadWithSettingsReturn)). }
false;public;0;10;;@Test public void testFindBridgedMethodFromParent() throws Exception {     Method loadFromParentBridge = SettingsDaoImpl.class.getMethod("loadFromParent").     assertTrue(loadFromParentBridge.isBridge()).     Method loadFromParent = AbstractDaoImpl.class.getMethod("loadFromParent").     assertFalse(loadFromParent.isBridge()).     assertEquals(loadFromParent, BridgeMethodResolver.findBridgedMethod(loadFromParentBridge)). }
false;public;0;8;;@Test public void testWithSingleBoundParameterizedOnInstantiate() throws Exception {     Method bridgeMethod = DelayQueue.class.getMethod("add", Object.class).     assertTrue(bridgeMethod.isBridge()).     Method actualMethod = DelayQueue.class.getMethod("add", Delayed.class).     assertFalse(actualMethod.isBridge()).     assertEquals(actualMethod, BridgeMethodResolver.findBridgedMethod(bridgeMethod)). }
false;public;0;8;;@Test public void testWithDoubleBoundParameterizedOnInstantiate() throws Exception {     Method bridgeMethod = SerializableBounded.class.getMethod("boundedOperation", Object.class).     assertTrue(bridgeMethod.isBridge()).     Method actualMethod = SerializableBounded.class.getMethod("boundedOperation", HashMap.class).     assertFalse(actualMethod.isBridge()).     assertEquals(actualMethod, BridgeMethodResolver.findBridgedMethod(bridgeMethod)). }
false;public;0;19;;@Test public void testWithGenericParameter() throws Exception {     Method[] methods = StringGenericParameter.class.getMethods().     Method bridgeMethod = null.     Method bridgedMethod = null.     for (Method method : methods) {         if ("getFor".equals(method.getName()) && !method.getParameterTypes()[0].equals(Integer.class)) {             if (method.getReturnType().equals(Object.class)) {                 bridgeMethod = method.             } else {                 bridgedMethod = method.             }         }     }     assertTrue(bridgeMethod != null && bridgeMethod.isBridge()).     assertTrue(bridgedMethod != null && !bridgedMethod.isBridge()).     assertEquals(bridgedMethod, BridgeMethodResolver.findBridgedMethod(bridgeMethod)). }
false;public;0;7;;@Test public void testOnAllMethods() throws Exception {     Method[] methods = StringList.class.getMethods().     for (Method method : methods) {         assertNotNull(BridgeMethodResolver.findBridgedMethod(method)).     } }
false;public;0;15;;@Test public void testSPR2583() throws Exception {     Method bridgedMethod = MessageBroadcasterImpl.class.getMethod("receive", MessageEvent.class).     assertFalse(bridgedMethod.isBridge()).     Method bridgeMethod = MessageBroadcasterImpl.class.getMethod("receive", Event.class).     assertTrue(bridgeMethod.isBridge()).     Method otherMethod = MessageBroadcasterImpl.class.getMethod("receive", NewMessageEvent.class).     assertFalse(otherMethod.isBridge()).     assertFalse("Match identified incorrectly", BridgeMethodResolver.isBridgeMethodFor(bridgeMethod, otherMethod, MessageBroadcasterImpl.class)).     assertTrue("Match not found correctly", BridgeMethodResolver.isBridgeMethodFor(bridgeMethod, bridgedMethod, MessageBroadcasterImpl.class)).     assertEquals(bridgedMethod, BridgeMethodResolver.findBridgedMethod(bridgeMethod)). }
false;public;0;8;;@Test public void testSPR2603() throws Exception {     Method objectBridge = YourHomer.class.getDeclaredMethod("foo", Bounded.class).     Method abstractBoundedFoo = YourHomer.class.getDeclaredMethod("foo", AbstractBounded.class).     Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(objectBridge).     assertEquals("foo(AbstractBounded) not resolved.", abstractBoundedFoo, bridgedMethod). }
false;public;0;8;;@Test public void testSPR2648() throws Exception {     Method bridgeMethod = ReflectionUtils.findMethod(GenericSqlMapIntegerDao.class, "saveOrUpdate", Object.class).     assertTrue(bridgeMethod != null && bridgeMethod.isBridge()).     Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(bridgeMethod).     assertFalse(bridgedMethod.isBridge()).     assertEquals("saveOrUpdate", bridgedMethod.getName()). }
false;public;0;10;;@Test public void testSPR2763() throws Exception {     Method bridgedMethod = AbstractDao.class.getDeclaredMethod("save", Object.class).     assertFalse(bridgedMethod.isBridge()).     Method bridgeMethod = UserDaoImpl.class.getDeclaredMethod("save", User.class).     assertTrue(bridgeMethod.isBridge()).     assertEquals(bridgedMethod, BridgeMethodResolver.findBridgedMethod(bridgeMethod)). }
false;public;0;10;;@Test public void testSPR3041() throws Exception {     Method bridgedMethod = BusinessDao.class.getDeclaredMethod("save", Business.class).     assertFalse(bridgedMethod.isBridge()).     Method bridgeMethod = BusinessDao.class.getDeclaredMethod("save", Object.class).     assertTrue(bridgeMethod.isBridge()).     assertEquals(bridgedMethod, BridgeMethodResolver.findBridgedMethod(bridgeMethod)). }
false;public;0;10;;@Test public void testSPR3173() throws Exception {     Method bridgedMethod = UserDaoImpl.class.getDeclaredMethod("saveVararg", User.class, Object[].class).     assertFalse(bridgedMethod.isBridge()).     Method bridgeMethod = UserDaoImpl.class.getDeclaredMethod("saveVararg", Object.class, Object[].class).     assertTrue(bridgeMethod.isBridge()).     assertEquals(bridgedMethod, BridgeMethodResolver.findBridgedMethod(bridgeMethod)). }
false;public;0;10;;@Test public void testSPR3304() throws Exception {     Method bridgedMethod = MegaMessageProducerImpl.class.getDeclaredMethod("receive", MegaMessageEvent.class).     assertFalse(bridgedMethod.isBridge()).     Method bridgeMethod = MegaMessageProducerImpl.class.getDeclaredMethod("receive", MegaEvent.class).     assertTrue(bridgeMethod.isBridge()).     assertEquals(bridgedMethod, BridgeMethodResolver.findBridgedMethod(bridgeMethod)). }
false;public;0;10;;@Test public void testSPR3324() throws Exception {     Method bridgedMethod = BusinessDao.class.getDeclaredMethod("get", Long.class).     assertFalse(bridgedMethod.isBridge()).     Method bridgeMethod = BusinessDao.class.getDeclaredMethod("get", Object.class).     assertTrue(bridgeMethod.isBridge()).     assertEquals(bridgedMethod, BridgeMethodResolver.findBridgedMethod(bridgeMethod)). }
false;public;0;12;;@Test public void testSPR3357() throws Exception {     Method bridgedMethod = ExtendsAbstractImplementsInterface.class.getDeclaredMethod("doSomething", DomainObjectExtendsSuper.class, Object.class).     assertFalse(bridgedMethod.isBridge()).     Method bridgeMethod = ExtendsAbstractImplementsInterface.class.getDeclaredMethod("doSomething", DomainObjectSuper.class, Object.class).     assertTrue(bridgeMethod.isBridge()).     assertEquals(bridgedMethod, BridgeMethodResolver.findBridgedMethod(bridgeMethod)). }
false;public;0;12;;@Test public void testSPR3485() throws Exception {     Method bridgedMethod = DomainObject.class.getDeclaredMethod("method2", ParameterType.class, byte[].class).     assertFalse(bridgedMethod.isBridge()).     Method bridgeMethod = DomainObject.class.getDeclaredMethod("method2", Serializable.class, Object.class).     assertTrue(bridgeMethod.isBridge()).     assertEquals(bridgedMethod, BridgeMethodResolver.findBridgedMethod(bridgeMethod)). }
false;public;0;8;;@Test public void testSPR3534() throws Exception {     Method bridgeMethod = ReflectionUtils.findMethod(TestEmailProvider.class, "findBy", Object.class).     assertTrue(bridgeMethod != null && bridgeMethod.isBridge()).     Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(bridgeMethod).     assertFalse(bridgedMethod.isBridge()).     assertEquals("findBy", bridgedMethod.getName()). }
false;public;0;4;;// SPR-16103 @Test public void testClassHierarchy() throws Exception {     doTestHierarchyResolution(FooClass.class). }
false;public;0;4;;// SPR-16103 @Test public void testInterfaceHierarchy() throws Exception {     doTestHierarchyResolution(FooInterface.class). }
false;private;1;7;;private void doTestHierarchyResolution(Class<?> clazz) throws Exception {     for (Method method : clazz.getDeclaredMethods()) {         Method bridged = BridgeMethodResolver.findBridgedMethod(method).         Method expected = clazz.getMethod("test", FooEntity.class).         assertEquals(expected, bridged).     } }
false;;2;1;;void someMethod(T theArg, Object otherArg).
false;;2;1;;void someVarargMethod(T theArg, Object... otherArg).
false;public;2;2;;public void someMethod(Integer theArg, Object otherArg) { }
false;public;2;3;;@Override public void someMethod(String theArg, Object otherArg) { }
false;public;2;3;;@Override public void someVarargMethod(String theArg, Object... otherArgs) { }
false;;2;2;;void someMethod(Map<?, ?> m, Object otherArg) { }
false;;2;2;;void someMethod(T theArg, Map<?, ?> m) { }
false;abstract;2;1;;abstract void someMethod(T theArg, Object otherArg).
false;public;2;3;;@Override public void someMethod(String theArg, Object otherArg) { }
false;public;2;2;;public void someMethod(Integer theArg, Object otherArg) { }
false;;1;1;;void add(T item).
false;public,abstract;1;2;;@Override public abstract void add(Date date).
false;public;1;3;;@Override public void add(Date date) { }
false;;3;2;;void someMethod(S s, T t, R r) { }
false;;3;4;;@Override void someMethod(Integer s, String t, Long r) {     throw new UnsupportedOperationException(). }
false;;1;1;;void foo(E e).
false;;1;1;;void foo(T t).
false;public;1;4;;@Override public void foo(String e) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void foo(Integer t) {     throw new UnsupportedOperationException(). }
false;;0;1;;T load().
false;;0;1;;S loadFromParent().
false;;0;2;;@Override T load().
false;;0;2;;@Override String loadFromParent().
true;public;0;4;// @Transactional(readOnly = true) ;// @Transactional(readOnly = true) @Override public S loadFromParent() {     return otherObject. }
true;public;0;4;// @Transactional(readOnly = true) ;// @Transactional(readOnly = true) @Override public ConcreteSettings load() {     return super.object. }
false;;1;1;;boolean boundedOperation(E e).
false;public;1;4;;@Override public boolean boundedOperation(E myE) {     return true. }
false;public;1;4;;@Override public boolean boundedOperation(E myE) {     return false. }
false;;1;1;;T getFor(Class<T> cls).
false;public;1;4;;@Override public String getFor(Class<String> cls) {     return "foo". }
false;public;1;3;;public String getFor(Integer integer) {     return "foo". }
false;public;0;4;;@Override public int size() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public boolean isEmpty() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public boolean contains(Object o) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Iterator<String> iterator() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Object[] toArray() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public <T> T[] toArray(T[] a) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public boolean add(String o) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public boolean remove(Object o) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public boolean containsAll(Collection<?> c) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public boolean addAll(Collection<? extends String> c) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public boolean addAll(int index, Collection<? extends String> c) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public boolean removeAll(Collection<?> c) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public boolean retainAll(Collection<?> c) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public void clear() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public String get(int index) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public String set(int index, String element) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public void add(int index, String element) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public String remove(int index) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public int indexOf(Object o) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public int lastIndexOf(Object o) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public ListIterator<String> listIterator() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public ListIterator<String> listIterator(int index) {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public List<String> subList(int fromIndex, int toIndex) {     throw new UnsupportedOperationException(). }
false;;0;1;;int getPriority().
false;public;0;4;;@Override public int getPriority() {     return priority. }
false;;1;1;;void send(E event).
false;;2;1;;void subscribe(final Receiver<E> receiver, Class<E> event).
false;;2;1;;void unsubscribe(final Receiver<E> receiver, Class<E> event).
false;;0;1;;void subscribe().
false;;0;1;;void unsubscribe().
false;;1;1;;void setChannel(Channel<?> channel).
true;public,abstract;0;1;/**  * Abstract method to retrieve instance of subclass  *  * @return receiver instance  */ ;/**  * Abstract method to retrieve instance of subclass  *  * @return receiver instance  */ public abstract Receiver<T> getInstance().
false;public;1;4;;@Override public void setChannel(Channel channel) {     this.channel = channel. }
false;public;1;3;;public void setBeanName(String name) {     this.beanName = name. }
false;public;0;3;;@Override public void subscribe() { }
false;public;0;3;;@Override public void unsubscribe() { }
false;;1;1;;void receive(E event).
false;public;1;4;;@Override public void receive(MessageEvent event) {     throw new UnsupportedOperationException("should not be called, use subclassed events"). }
false;public;1;2;;public void receive(NewMessageEvent event) { }
false;public;0;4;;@Override public Receiver<MessageEvent> getInstance() {     return null. }
false;public;1;2;;public void receive(RemovedMessageEvent event) { }
false;public;1;2;;public void receive(ModifiedMessageEvent event) { }
false;public;0;1;;public Class<T> getPersistentClass().
false;;0;1;;List<T> findByQuery().
false;;0;1;;List<T> findAll().
false;;1;1;;T refresh(T entity).
false;;1;1;;T saveOrUpdate(T entity).
false;;1;1;;void delete(Collection<T> entities).
false;;1;1;;<T> SimpleGenericRepository<T> getFor(Class<T> entityType).
false;protected;1;2;;protected void injectInto(R rep) { }
false;public;1;2;;public void register(R rep) { }
false;public;1;2;;public void register(R... reps) { }
false;public;1;2;;public void setRepos(R... reps) { }
false;public;1;4;;@Override public <T> SimpleGenericRepository<T> getFor(Class<T> entityType) {     return null. }
false;public;0;2;;public void afterPropertiesSet() throws Exception { }
false;;2;1;;T findById(ID id, boolean lock).
false;;1;1;;List<T> findByExample(T exampleInstance).
false;;1;1;;void delete(ID id).
false;;1;1;;void delete(T entity).
true;public;1;2;// constructor arguments to Spring AOP proxies is quite cumbersome). ;/**  * @param c Mandatory. The domain class this repository is responsible for.  */ // Since it is impossible to determine the actual type of a type // parameter (!), we resort to requiring the caller to provide the // actual type as parameter, too. // Not set in a constructor to enable easy CGLIB-proxying (passing // constructor arguments to Spring AOP proxies is quite cumbersome). public void setPersistentClass(Class<T> c) { }
false;public;0;4;;@Override public Class<T> getPersistentClass() {     return null. }
false;public;2;4;;@Override public T findById(ID id, boolean lock) {     return null. }
false;public;0;4;;@Override public List<T> findAll() {     return null. }
false;public;1;4;;@Override public List<T> findByExample(T exampleInstance) {     return null. }
false;public;0;4;;@Override public List<T> findByQuery() {     return null. }
false;public;1;4;;@Override public T saveOrUpdate(T entity) {     return null. }
false;public;1;3;;@Override public void delete(T entity) { }
false;public;1;4;;@Override public T refresh(T entity) {     return null. }
false;public;1;3;;@Override public void delete(ID id) { }
false;public;1;3;;@Override public void delete(Collection<T> entities) { }
false;public;1;3;;@Override public void injectInto(GenericHibernateRepository<?, ?> rep) { }
false;public;1;4;;@Override public <T> GenericHibernateRepository<T, ?> getFor(Class<T> entityType) {     return null. }
false;;1;1;;void foo(E e).
false;public;1;4;;@Override public void foo(L t) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void foo(L t) {     throw new UnsupportedOperationException(). }
false;;1;1;;void saveOrUpdate(T t).
false;public;1;4;;@Override public void saveOrUpdate(T t) {     throw new UnsupportedOperationException(). }
false;public;1;3;;@Override public void saveOrUpdate(T t) { }
true;;1;1;// @Transactional ;// @Transactional void save(User user).
true;;1;1;// @Transactional ;// @Transactional void save(Permission perm).
false;public;1;2;;public void save(T t) { }
false;public;2;2;;public void saveVararg(T t, Object... args) { }
false;public;1;3;;@Override public void save(Permission perm) { }
false;public;2;3;;@Override public void saveVararg(User user, Object... args) { }
false;;1;1;;T get(P id).
false;public;1;2;;public void save(T object) { }
false;public;1;3;;@Override public void save(Business<?> business) { }
false;public;1;4;;@Override public Business<?> get(Long id) {     return null. }
false;public;1;3;;public Business<?> get(String code) {     return null. }
false;;1;1;;void receive(E event).
false;public;1;3;;public void receive(NewMegaMessageEvent event) {     throw new UnsupportedOperationException(). }
false;public;1;3;;public void receive(ModifiedMegaMessageEvent event) {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void receive(MegaMessageEvent event) {     throw new UnsupportedOperationException(). }
false;;2;1;;<T> void doSomething(final D domainObject, final T value).
false;public;2;3;;@Override public <T> void doSomething(D domainObject, T value) { }
false;public;0;2;;public void anotherBaseMethod() { }
false;public;2;4;;@Override public <T> void doSomething(DomainObjectExtendsSuper domainObject, T value) {     super.doSomething(domainObject, value). }
false;public;1;3;;public R method1(P p) {     return null. }
false;public;2;2;;public void method2(P p, R r) { }
false;public;1;4;;@Override public byte[] method1(ParameterType p) {     return super.method1(p). }
false;public;2;4;;@Override public void method2(ParameterType p, byte[] r) {     super.method2(p, r). }
false;;1;1;;Collection<RETURN_TYPE> findBy(CONDITIONS_TYPE conditions).
false;public;1;4;;@Override public Collection<S> findBy(T conditions) {     return null. }
false;public;1;4;;@Override public Collection<EmailMessage> findBy(EmailSearchConditions conditions) {     return null. }
false;public;1;3;;public <S extends T> S test(S T) {     return null. }
false;public;1;4;;@Override public <S extends T> S test(S T) {     return null. }
false;public;1;4;;@Override public <S extends FooEntity> S test(S T) {     return null. }
false;;1;1;;<S extends T> S test(S T).
false;;1;2;;@Override <S extends T> S test(S T).
false;;1;2;;@Override <S extends FooEntity> S test(S T).
