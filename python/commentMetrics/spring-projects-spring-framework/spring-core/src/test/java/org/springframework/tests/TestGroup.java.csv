# id;timestamp;commentText;codeText;commentWords;codeWords
TestGroup -> public static Set<TestGroup> parse(String value);1357119417;Parse the specified comma separates string of groups._@param value the comma separated string of groups_@return a set of groups;public static Set<TestGroup> parse(String value) {_		if (value == null || "".equals(value)) {_			return Collections.emptySet()__		}_		if("ALL".equalsIgnoreCase(value)) {_			return EnumSet.allOf(TestGroup.class)__		}_		Set<TestGroup> groups = new HashSet<TestGroup>()__		for (String group : value.split(",")) {_			try {_				groups.add(valueOf(group.trim().toUpperCase()))__			} catch (IllegalArgumentException e) {_				throw new IllegalArgumentException("Unable to find test group '" + group.trim()_						+ "' when parsing '" + value + "'")__			}_		}_		return groups__	};parse,the,specified,comma,separates,string,of,groups,param,value,the,comma,separated,string,of,groups,return,a,set,of,groups;public,static,set,test,group,parse,string,value,if,value,null,equals,value,return,collections,empty,set,if,all,equals,ignore,case,value,return,enum,set,all,of,test,group,class,set,test,group,groups,new,hash,set,test,group,for,string,group,value,split,try,groups,add,value,of,group,trim,to,upper,case,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,unable,to,find,test,group,group,trim,when,parsing,value,return,groups
TestGroup -> public static Set<TestGroup> parse(String value);1357248712;Parse the specified comma separates string of groups._@param value the comma separated string of groups_@return a set of groups;public static Set<TestGroup> parse(String value) {_		if (value == null || "".equals(value)) {_			return Collections.emptySet()__		}_		if("ALL".equalsIgnoreCase(value)) {_			return EnumSet.allOf(TestGroup.class)__		}_		Set<TestGroup> groups = new HashSet<TestGroup>()__		for (String group : value.split(",")) {_			try {_				groups.add(valueOf(group.trim().toUpperCase()))__			} catch (IllegalArgumentException e) {_				throw new IllegalArgumentException("Unable to find test group '" + group.trim()_						+ "' when parsing '" + value + "'")__			}_		}_		return groups__	};parse,the,specified,comma,separates,string,of,groups,param,value,the,comma,separated,string,of,groups,return,a,set,of,groups;public,static,set,test,group,parse,string,value,if,value,null,equals,value,return,collections,empty,set,if,all,equals,ignore,case,value,return,enum,set,all,of,test,group,class,set,test,group,groups,new,hash,set,test,group,for,string,group,value,split,try,groups,add,value,of,group,trim,to,upper,case,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,unable,to,find,test,group,group,trim,when,parsing,value,return,groups
TestGroup -> public static Set<TestGroup> parse(String value);1362408075;Parse the specified comma separates string of groups._@param value the comma separated string of groups_@return a set of groups;public static Set<TestGroup> parse(String value) {_		if (value == null || "".equals(value)) {_			return Collections.emptySet()__		}_		if("ALL".equalsIgnoreCase(value)) {_			return EnumSet.allOf(TestGroup.class)__		}_		Set<TestGroup> groups = new HashSet<TestGroup>()__		for (String group : value.split(",")) {_			try {_				groups.add(valueOf(group.trim().toUpperCase()))__			} catch (IllegalArgumentException e) {_				throw new IllegalArgumentException(format(_						"Unable to find test group '%s' when parsing testGroups value: '%s'. " +_						"Available groups include: [%s]", group.trim(), value,_						StringUtils.arrayToCommaDelimitedString(TestGroup.values())))__			}_		}_		return groups__	};parse,the,specified,comma,separates,string,of,groups,param,value,the,comma,separated,string,of,groups,return,a,set,of,groups;public,static,set,test,group,parse,string,value,if,value,null,equals,value,return,collections,empty,set,if,all,equals,ignore,case,value,return,enum,set,all,of,test,group,class,set,test,group,groups,new,hash,set,test,group,for,string,group,value,split,try,groups,add,value,of,group,trim,to,upper,case,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,format,unable,to,find,test,group,s,when,parsing,test,groups,value,s,available,groups,include,s,group,trim,value,string,utils,array,to,comma,delimited,string,test,group,values,return,groups
TestGroup -> public static Set<TestGroup> parse(String value);1368749190;Parse the specified comma separates string of groups._@param value the comma separated string of groups_@return a set of groups;public static Set<TestGroup> parse(String value) {_		if (value == null || "".equals(value)) {_			return Collections.emptySet()__		}_		if("ALL".equalsIgnoreCase(value)) {_			return EnumSet.allOf(TestGroup.class)__		}_		Set<TestGroup> groups = new HashSet<TestGroup>()__		for (String group : value.split(",")) {_			try {_				groups.add(valueOf(group.trim().toUpperCase()))__			} catch (IllegalArgumentException e) {_				throw new IllegalArgumentException(format(_						"Unable to find test group '%s' when parsing testGroups value: '%s'. " +_						"Available groups include: [%s]", group.trim(), value,_						StringUtils.arrayToCommaDelimitedString(TestGroup.values())))__			}_		}_		return groups__	};parse,the,specified,comma,separates,string,of,groups,param,value,the,comma,separated,string,of,groups,return,a,set,of,groups;public,static,set,test,group,parse,string,value,if,value,null,equals,value,return,collections,empty,set,if,all,equals,ignore,case,value,return,enum,set,all,of,test,group,class,set,test,group,groups,new,hash,set,test,group,for,string,group,value,split,try,groups,add,value,of,group,trim,to,upper,case,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,format,unable,to,find,test,group,s,when,parsing,test,groups,value,s,available,groups,include,s,group,trim,value,string,utils,array,to,comma,delimited,string,test,group,values,return,groups
TestGroup -> public static Set<TestGroup> parse(String value);1374676157;Parse the specified comma separates string of groups._@param value the comma separated string of groups_@return a set of groups;public static Set<TestGroup> parse(String value) {_		if (value == null || "".equals(value)) {_			return Collections.emptySet()__		}_		if("ALL".equalsIgnoreCase(value)) {_			return EnumSet.allOf(TestGroup.class)__		}_		Set<TestGroup> groups = new HashSet<TestGroup>()__		for (String group : value.split(",")) {_			try {_				groups.add(valueOf(group.trim().toUpperCase()))__			} catch (IllegalArgumentException e) {_				throw new IllegalArgumentException(format(_						"Unable to find test group '%s' when parsing testGroups value: '%s'. " +_						"Available groups include: [%s]", group.trim(), value,_						StringUtils.arrayToCommaDelimitedString(TestGroup.values())))__			}_		}_		return groups__	};parse,the,specified,comma,separates,string,of,groups,param,value,the,comma,separated,string,of,groups,return,a,set,of,groups;public,static,set,test,group,parse,string,value,if,value,null,equals,value,return,collections,empty,set,if,all,equals,ignore,case,value,return,enum,set,all,of,test,group,class,set,test,group,groups,new,hash,set,test,group,for,string,group,value,split,try,groups,add,value,of,group,trim,to,upper,case,catch,illegal,argument,exception,e,throw,new,illegal,argument,exception,format,unable,to,find,test,group,s,when,parsing,test,groups,value,s,available,groups,include,s,group,trim,value,string,utils,array,to,comma,delimited,string,test,group,values,return,groups
TestGroup -> public static Set<TestGroup> parse(String value);1385011577;Parse the specified comma separates string of groups._@param value the comma separated string of groups_@return a set of groups;public static Set<TestGroup> parse(String value) {_		if (value == null || "".equals(value)) {_			return Collections.emptySet()__		}_		if ("ALL".equalsIgnoreCase(value)) {_			return EnumSet.allOf(TestGroup.class)__		}_		if (value.toUpperCase().startsWith("ALL-")) {_			Set<TestGroup> groups = new HashSet<TestGroup>(EnumSet.allOf(TestGroup.class))__			groups.removeAll(parseGroups(value.substring(4)))__			return groups__		}_		return parseGroups(value)__	};parse,the,specified,comma,separates,string,of,groups,param,value,the,comma,separated,string,of,groups,return,a,set,of,groups;public,static,set,test,group,parse,string,value,if,value,null,equals,value,return,collections,empty,set,if,all,equals,ignore,case,value,return,enum,set,all,of,test,group,class,if,value,to,upper,case,starts,with,all,set,test,group,groups,new,hash,set,test,group,enum,set,all,of,test,group,class,groups,remove,all,parse,groups,value,substring,4,return,groups,return,parse,groups,value
TestGroup -> public static Set<TestGroup> parse(String value);1385027637;Parse the specified comma separated string of groups._@param value the comma separated string of groups_@return a set of groups;public static Set<TestGroup> parse(String value) {_		if (value == null || "".equals(value)) {_			return Collections.emptySet()__		}_		if ("ALL".equalsIgnoreCase(value)) {_			return EnumSet.allOf(TestGroup.class)__		}_		if (value.toUpperCase().startsWith("ALL-")) {_			Set<TestGroup> groups = new HashSet<TestGroup>(EnumSet.allOf(TestGroup.class))__			groups.removeAll(parseGroups(value.substring(4)))__			return groups__		}_		return parseGroups(value)__	};parse,the,specified,comma,separated,string,of,groups,param,value,the,comma,separated,string,of,groups,return,a,set,of,groups;public,static,set,test,group,parse,string,value,if,value,null,equals,value,return,collections,empty,set,if,all,equals,ignore,case,value,return,enum,set,all,of,test,group,class,if,value,to,upper,case,starts,with,all,set,test,group,groups,new,hash,set,test,group,enum,set,all,of,test,group,class,groups,remove,all,parse,groups,value,substring,4,return,groups,return,parse,groups,value
TestGroup -> public static Set<TestGroup> parse(String value);1394450789;Parse the specified comma separated string of groups._@param value the comma separated string of groups_@return a set of groups;public static Set<TestGroup> parse(String value) {_		if (value == null || "".equals(value)) {_			return Collections.emptySet()__		}_		if ("ALL".equalsIgnoreCase(value)) {_			return EnumSet.allOf(TestGroup.class)__		}_		if (value.toUpperCase().startsWith("ALL-")) {_			Set<TestGroup> groups = new HashSet<TestGroup>(EnumSet.allOf(TestGroup.class))__			groups.removeAll(parseGroups(value.substring(4)))__			return groups__		}_		return parseGroups(value)__	};parse,the,specified,comma,separated,string,of,groups,param,value,the,comma,separated,string,of,groups,return,a,set,of,groups;public,static,set,test,group,parse,string,value,if,value,null,equals,value,return,collections,empty,set,if,all,equals,ignore,case,value,return,enum,set,all,of,test,group,class,if,value,to,upper,case,starts,with,all,set,test,group,groups,new,hash,set,test,group,enum,set,all,of,test,group,class,groups,remove,all,parse,groups,value,substring,4,return,groups,return,parse,groups,value
TestGroup -> public static Set<TestGroup> parse(String value);1425578217;Parse the specified comma separated string of groups._@param value the comma separated string of groups_@return a set of groups;public static Set<TestGroup> parse(String value) {_		if (value == null || "".equals(value)) {_			return Collections.emptySet()__		}_		if ("ALL".equalsIgnoreCase(value)) {_			return EnumSet.allOf(TestGroup.class)__		}_		if (value.toUpperCase().startsWith("ALL-")) {_			Set<TestGroup> groups = new HashSet<TestGroup>(EnumSet.allOf(TestGroup.class))__			groups.removeAll(parseGroups(value.substring(4)))__			return groups__		}_		return parseGroups(value)__	};parse,the,specified,comma,separated,string,of,groups,param,value,the,comma,separated,string,of,groups,return,a,set,of,groups;public,static,set,test,group,parse,string,value,if,value,null,equals,value,return,collections,empty,set,if,all,equals,ignore,case,value,return,enum,set,all,of,test,group,class,if,value,to,upper,case,starts,with,all,set,test,group,groups,new,hash,set,test,group,enum,set,all,of,test,group,class,groups,remove,all,parse,groups,value,substring,4,return,groups,return,parse,groups,value
TestGroup -> public static Set<TestGroup> parse(String value);1458843770;Parse the specified comma separated string of groups._@param value the comma separated string of groups_@return a set of groups;public static Set<TestGroup> parse(String value) {_		if (value == null || "".equals(value)) {_			return Collections.emptySet()__		}_		if ("ALL".equalsIgnoreCase(value)) {_			return EnumSet.allOf(TestGroup.class)__		}_		if (value.toUpperCase().startsWith("ALL-")) {_			Set<TestGroup> groups = new HashSet<TestGroup>(EnumSet.allOf(TestGroup.class))__			groups.removeAll(parseGroups(value.substring(4)))__			return groups__		}_		return parseGroups(value)__	};parse,the,specified,comma,separated,string,of,groups,param,value,the,comma,separated,string,of,groups,return,a,set,of,groups;public,static,set,test,group,parse,string,value,if,value,null,equals,value,return,collections,empty,set,if,all,equals,ignore,case,value,return,enum,set,all,of,test,group,class,if,value,to,upper,case,starts,with,all,set,test,group,groups,new,hash,set,test,group,enum,set,all,of,test,group,class,groups,remove,all,parse,groups,value,substring,4,return,groups,return,parse,groups,value
TestGroup -> public static Set<TestGroup> parse(String value);1467730834;Parse the specified comma separated string of groups._@param value the comma separated string of groups_@return a set of groups;public static Set<TestGroup> parse(String value) {_		if (value == null || "".equals(value)) {_			return Collections.emptySet()__		}_		if ("ALL".equalsIgnoreCase(value)) {_			return EnumSet.allOf(TestGroup.class)__		}_		if (value.toUpperCase().startsWith("ALL-")) {_			Set<TestGroup> groups = new HashSet<>(EnumSet.allOf(TestGroup.class))__			groups.removeAll(parseGroups(value.substring(4)))__			return groups__		}_		return parseGroups(value)__	};parse,the,specified,comma,separated,string,of,groups,param,value,the,comma,separated,string,of,groups,return,a,set,of,groups;public,static,set,test,group,parse,string,value,if,value,null,equals,value,return,collections,empty,set,if,all,equals,ignore,case,value,return,enum,set,all,of,test,group,class,if,value,to,upper,case,starts,with,all,set,test,group,groups,new,hash,set,enum,set,all,of,test,group,class,groups,remove,all,parse,groups,value,substring,4,return,groups,return,parse,groups,value
TestGroup -> public static Set<TestGroup> parse(String value);1469448646;Parse the specified comma separated string of groups._@param value the comma separated string of groups_@return a set of groups;public static Set<TestGroup> parse(String value) {_		if (value == null || "".equals(value)) {_			return Collections.emptySet()__		}_		if ("ALL".equalsIgnoreCase(value)) {_			return EnumSet.allOf(TestGroup.class)__		}_		if (value.toUpperCase().startsWith("ALL-")) {_			Set<TestGroup> groups = new HashSet<>(EnumSet.allOf(TestGroup.class))__			groups.removeAll(parseGroups(value.substring(4)))__			return groups__		}_		return parseGroups(value)__	};parse,the,specified,comma,separated,string,of,groups,param,value,the,comma,separated,string,of,groups,return,a,set,of,groups;public,static,set,test,group,parse,string,value,if,value,null,equals,value,return,collections,empty,set,if,all,equals,ignore,case,value,return,enum,set,all,of,test,group,class,if,value,to,upper,case,starts,with,all,set,test,group,groups,new,hash,set,enum,set,all,of,test,group,class,groups,remove,all,parse,groups,value,substring,4,return,groups,return,parse,groups,value
