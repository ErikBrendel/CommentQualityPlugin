commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void isJarURL() throws Exception {     assertTrue(ResourceUtils.isJarURL(new URL("jar:file:myjar.jar!/mypath"))).     assertTrue(ResourceUtils.isJarURL(new URL(null, "zip:file:myjar.jar!/mypath", new DummyURLStreamHandler()))).     assertTrue(ResourceUtils.isJarURL(new URL(null, "wsjar:file:myjar.jar!/mypath", new DummyURLStreamHandler()))).     assertTrue(ResourceUtils.isJarURL(new URL(null, "jar:war:file:mywar.war*/myjar.jar!/mypath", new DummyURLStreamHandler()))).     assertFalse(ResourceUtils.isJarURL(new URL("file:myjar.jar"))).     assertFalse(ResourceUtils.isJarURL(new URL("http:myserver/myjar.jar"))). }
false;public;0;20;;@Test public void extractJarFileURL() throws Exception {     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractJarFileURL(new URL("jar:file:myjar.jar!/mypath"))).     assertEquals(new URL("file:/myjar.jar"), ResourceUtils.extractJarFileURL(new URL(null, "jar:myjar.jar!/mypath", new DummyURLStreamHandler()))).     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractJarFileURL(new URL(null, "zip:file:myjar.jar!/mypath", new DummyURLStreamHandler()))).     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractJarFileURL(new URL(null, "wsjar:file:myjar.jar!/mypath", new DummyURLStreamHandler()))).     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractJarFileURL(new URL("file:myjar.jar"))).     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractJarFileURL(new URL("jar:file:myjar.jar!/"))).     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractJarFileURL(new URL(null, "zip:file:myjar.jar!/", new DummyURLStreamHandler()))).     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractJarFileURL(new URL(null, "wsjar:file:myjar.jar!/", new DummyURLStreamHandler()))). }
false;public;0;24;;@Test public void extractArchiveURL() throws Exception {     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractArchiveURL(new URL("jar:file:myjar.jar!/mypath"))).     assertEquals(new URL("file:/myjar.jar"), ResourceUtils.extractArchiveURL(new URL(null, "jar:myjar.jar!/mypath", new DummyURLStreamHandler()))).     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractArchiveURL(new URL(null, "zip:file:myjar.jar!/mypath", new DummyURLStreamHandler()))).     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractArchiveURL(new URL(null, "wsjar:file:myjar.jar!/mypath", new DummyURLStreamHandler()))).     assertEquals(new URL("file:mywar.war"), ResourceUtils.extractArchiveURL(new URL(null, "jar:war:file:mywar.war*/myjar.jar!/mypath", new DummyURLStreamHandler()))).     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractArchiveURL(new URL("file:myjar.jar"))).     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractArchiveURL(new URL("jar:file:myjar.jar!/"))).     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractArchiveURL(new URL(null, "zip:file:myjar.jar!/", new DummyURLStreamHandler()))).     assertEquals(new URL("file:myjar.jar"), ResourceUtils.extractArchiveURL(new URL(null, "wsjar:file:myjar.jar!/", new DummyURLStreamHandler()))).     assertEquals(new URL("file:mywar.war"), ResourceUtils.extractArchiveURL(new URL(null, "jar:war:file:mywar.war*/myjar.jar!/", new DummyURLStreamHandler()))). }
false;protected;1;4;;@Override protected URLConnection openConnection(URL url) throws IOException {     throw new UnsupportedOperationException(). }
