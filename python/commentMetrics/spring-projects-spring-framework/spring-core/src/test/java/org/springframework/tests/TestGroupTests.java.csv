commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void parseNull() {     assertThat(TestGroup.parse(null), equalTo(Collections.emptySet())). }
false;public;0;4;;@Test public void parseEmptyString() {     assertThat(TestGroup.parse(""), equalTo(Collections.emptySet())). }
false;public;0;4;;@Test public void parseBlankString() {     assertThat(TestGroup.parse("     "), equalTo(Collections.emptySet())). }
false;public;0;5;;@Test public void parseWithSpaces() {     assertThat(TestGroup.parse(" PERFORMANCE,  PERFORMANCE "), equalTo(EnumSet.of(TestGroup.PERFORMANCE))). }
false;public;0;5;;@Test public void parseInMixedCase() {     assertThat(TestGroup.parse("performance,  PERFormaNCE"), equalTo(EnumSet.of(TestGroup.PERFORMANCE))). }
false;public;0;8;;@Test public void parseMissing() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Unable to find test group 'missing' when parsing " + "testGroups value: 'performance, missing'. Available groups include: " + "[LONG_RUNNING,PERFORMANCE,JMXMP,CI]").     TestGroup.parse("performance, missing"). }
false;public;0;4;;@Test public void parseAll() {     assertThat(TestGroup.parse("all"), equalTo(EnumSet.allOf(TestGroup.class))). }
false;public;0;6;;@Test public void parseAllExceptPerformance() {     Set<TestGroup> expected = EnumSet.allOf(TestGroup.class).     expected.remove(TestGroup.PERFORMANCE).     assertThat(TestGroup.parse("all-performance"), equalTo(expected)). }
false;public;0;8;;@Test public void parseAllExceptMissing() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Unable to find test group 'missing' when parsing " + "testGroups value: 'all-missing'. Available groups include: " + "[LONG_RUNNING,PERFORMANCE,JMXMP,CI]").     TestGroup.parse("all-missing"). }
