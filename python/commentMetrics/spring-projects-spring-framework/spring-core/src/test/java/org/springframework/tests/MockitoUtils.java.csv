# id;timestamp;commentText;codeText;commentWords;codeWords
MockitoUtils -> InvocationArgumentsAdapter -> Object[] adaptArguments(Object[] arguments)_;1357119417;Change the arguments if required_@param arguments the source arguments_@return updated or original arguments (never {@code null});Object[] adaptArguments(Object[] arguments)_;change,the,arguments,if,required,param,arguments,the,source,arguments,return,updated,or,original,arguments,never,code,null;object,adapt,arguments,object,arguments
MockitoUtils -> InvocationArgumentsAdapter -> Object[] adaptArguments(Object[] arguments)_;1413848647;Change the arguments if required_@param arguments the source arguments_@return updated or original arguments (never {@code null});Object[] adaptArguments(Object[] arguments)_;change,the,arguments,if,required,param,arguments,the,source,arguments,return,updated,or,original,arguments,never,code,null;object,adapt,arguments,object,arguments
MockitoUtils -> InvocationArgumentsAdapter -> Object[] adaptArguments(Object[] arguments)_;1478210015;Change the arguments if required._@param arguments the source arguments_@return updated or original arguments (never {@code null});Object[] adaptArguments(Object[] arguments)_;change,the,arguments,if,required,param,arguments,the,source,arguments,return,updated,or,original,arguments,never,code,null;object,adapt,arguments,object,arguments
MockitoUtils -> InvocationArgumentsAdapter -> Object[] adaptArguments(Object[] arguments)_;1509754019;Change the arguments if required._@param arguments the source arguments_@return updated or original arguments (never {@code null});Object[] adaptArguments(Object[] arguments)_;change,the,arguments,if,required,param,arguments,the,source,arguments,return,updated,or,original,arguments,never,code,null;object,adapt,arguments,object,arguments
MockitoUtils -> public static <T> void verifySameInvocations(T expected, T actual, InvocationArgumentsAdapter... argumentAdapters);1357119417;Verify the same invocations have been applied to two mocks. This is generally not_the preferred way test with mockito and should be avoided if possible._@param expected the mock containing expected invocations_@param actual the mock containing actual invocations_@param argumentAdapters adapters that can be used to change argument values before_they are compared;public static <T> void verifySameInvocations(T expected, T actual, InvocationArgumentsAdapter... argumentAdapters) {_		List<Invocation> expectedInvocations = mockUtil.getMockHandler(expected).getInvocationContainer().getInvocations()__		List<Invocation> actualInvocations = mockUtil.getMockHandler(actual).getInvocationContainer().getInvocations()__		verifySameInvocations(expectedInvocations, actualInvocations, argumentAdapters)__	};verify,the,same,invocations,have,been,applied,to,two,mocks,this,is,generally,not,the,preferred,way,test,with,mockito,and,should,be,avoided,if,possible,param,expected,the,mock,containing,expected,invocations,param,actual,the,mock,containing,actual,invocations,param,argument,adapters,adapters,that,can,be,used,to,change,argument,values,before,they,are,compared;public,static,t,void,verify,same,invocations,t,expected,t,actual,invocation,arguments,adapter,argument,adapters,list,invocation,expected,invocations,mock,util,get,mock,handler,expected,get,invocation,container,get,invocations,list,invocation,actual,invocations,mock,util,get,mock,handler,actual,get,invocation,container,get,invocations,verify,same,invocations,expected,invocations,actual,invocations,argument,adapters
MockitoUtils -> public static <T> void verifySameInvocations(T expected, T actual, InvocationArgumentsAdapter... argumentAdapters);1413848647;Verify the same invocations have been applied to two mocks. This is generally not_the preferred way test with mockito and should be avoided if possible._@param expected the mock containing expected invocations_@param actual the mock containing actual invocations_@param argumentAdapters adapters that can be used to change argument values before_they are compared;public static <T> void verifySameInvocations(T expected, T actual, InvocationArgumentsAdapter... argumentAdapters) {_		List<Invocation> expectedInvocations = mockUtil.getMockHandler(expected).getInvocationContainer().getInvocations()__		List<Invocation> actualInvocations = mockUtil.getMockHandler(actual).getInvocationContainer().getInvocations()__		verifySameInvocations(expectedInvocations, actualInvocations, argumentAdapters)__	};verify,the,same,invocations,have,been,applied,to,two,mocks,this,is,generally,not,the,preferred,way,test,with,mockito,and,should,be,avoided,if,possible,param,expected,the,mock,containing,expected,invocations,param,actual,the,mock,containing,actual,invocations,param,argument,adapters,adapters,that,can,be,used,to,change,argument,values,before,they,are,compared;public,static,t,void,verify,same,invocations,t,expected,t,actual,invocation,arguments,adapter,argument,adapters,list,invocation,expected,invocations,mock,util,get,mock,handler,expected,get,invocation,container,get,invocations,list,invocation,actual,invocations,mock,util,get,mock,handler,actual,get,invocation,container,get,invocations,verify,same,invocations,expected,invocations,actual,invocations,argument,adapters
MockitoUtils -> public static <T> void verifySameInvocations(T expected, T actual, InvocationArgumentsAdapter... argumentAdapters);1478210015;Verify the same invocations have been applied to two mocks. This is generally not_the preferred way test with mockito and should be avoided if possible._@param expected the mock containing expected invocations_@param actual the mock containing actual invocations_@param argumentAdapters adapters that can be used to change argument values before they are compared;public static <T> void verifySameInvocations(T expected, T actual, InvocationArgumentsAdapter... argumentAdapters) {_		List<Invocation> expectedInvocations = MockUtil.getMockHandler(expected).getInvocationContainer().getInvocations()__		List<Invocation> actualInvocations = MockUtil.getMockHandler(actual).getInvocationContainer().getInvocations()__		verifySameInvocations(expectedInvocations, actualInvocations, argumentAdapters)__	};verify,the,same,invocations,have,been,applied,to,two,mocks,this,is,generally,not,the,preferred,way,test,with,mockito,and,should,be,avoided,if,possible,param,expected,the,mock,containing,expected,invocations,param,actual,the,mock,containing,actual,invocations,param,argument,adapters,adapters,that,can,be,used,to,change,argument,values,before,they,are,compared;public,static,t,void,verify,same,invocations,t,expected,t,actual,invocation,arguments,adapter,argument,adapters,list,invocation,expected,invocations,mock,util,get,mock,handler,expected,get,invocation,container,get,invocations,list,invocation,actual,invocations,mock,util,get,mock,handler,actual,get,invocation,container,get,invocations,verify,same,invocations,expected,invocations,actual,invocations,argument,adapters
MockitoUtils -> public static <T> void verifySameInvocations(T expected, T actual, InvocationArgumentsAdapter... argumentAdapters);1509754019;Verify the same invocations have been applied to two mocks. This is generally not_the preferred way test with mockito and should be avoided if possible._@param expected the mock containing expected invocations_@param actual the mock containing actual invocations_@param argumentAdapters adapters that can be used to change argument values before they are compared;public static <T> void verifySameInvocations(T expected, T actual, InvocationArgumentsAdapter... argumentAdapters) {_		List<Invocation> expectedInvocations =_				((InvocationContainerImpl) MockUtil.getMockHandler(expected).getInvocationContainer()).getInvocations()__		List<Invocation> actualInvocations =_				((InvocationContainerImpl) MockUtil.getMockHandler(actual).getInvocationContainer()).getInvocations()__		verifySameInvocations(expectedInvocations, actualInvocations, argumentAdapters)__	};verify,the,same,invocations,have,been,applied,to,two,mocks,this,is,generally,not,the,preferred,way,test,with,mockito,and,should,be,avoided,if,possible,param,expected,the,mock,containing,expected,invocations,param,actual,the,mock,containing,actual,invocations,param,argument,adapters,adapters,that,can,be,used,to,change,argument,values,before,they,are,compared;public,static,t,void,verify,same,invocations,t,expected,t,actual,invocation,arguments,adapter,argument,adapters,list,invocation,expected,invocations,invocation,container,impl,mock,util,get,mock,handler,expected,get,invocation,container,get,invocations,list,invocation,actual,invocations,invocation,container,impl,mock,util,get,mock,handler,actual,get,invocation,container,get,invocations,verify,same,invocations,expected,invocations,actual,invocations,argument,adapters
