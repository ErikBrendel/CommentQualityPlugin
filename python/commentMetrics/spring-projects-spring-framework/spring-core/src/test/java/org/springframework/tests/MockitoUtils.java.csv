commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;7;/**  * Verify the same invocations have been applied to two mocks. This is generally not  * the preferred way test with mockito and should be avoided if possible.  * @param expected the mock containing expected invocations  * @param actual the mock containing actual invocations  * @param argumentAdapters adapters that can be used to change argument values before they are compared  */ ;/**  * Verify the same invocations have been applied to two mocks. This is generally not  * the preferred way test with mockito and should be avoided if possible.  * @param expected the mock containing expected invocations  * @param actual the mock containing actual invocations  * @param argumentAdapters adapters that can be used to change argument values before they are compared  */ public static <T> void verifySameInvocations(T expected, T actual, InvocationArgumentsAdapter... argumentAdapters) {     List<Invocation> expectedInvocations = ((InvocationContainerImpl) MockUtil.getMockHandler(expected).getInvocationContainer()).getInvocations().     List<Invocation> actualInvocations = ((InvocationContainerImpl) MockUtil.getMockHandler(actual).getInvocationContainer()).getInvocations().     verifySameInvocations(expectedInvocations, actualInvocations, argumentAdapters). }
false;private,static;3;8;;private static void verifySameInvocations(List<Invocation> expectedInvocations, List<Invocation> actualInvocations, InvocationArgumentsAdapter... argumentAdapters) {     assertThat(expectedInvocations.size(), is(equalTo(actualInvocations.size()))).     for (int i = 0. i < expectedInvocations.size(). i++) {         verifySameInvocation(expectedInvocations.get(i), actualInvocations.get(i), argumentAdapters).     } }
false;private,static;3;8;;private static void verifySameInvocation(Invocation expectedInvocation, Invocation actualInvocation, InvocationArgumentsAdapter... argumentAdapters) {     assertThat(expectedInvocation.getMethod(), is(equalTo(actualInvocation.getMethod()))).     Object[] expectedArguments = getInvocationArguments(expectedInvocation, argumentAdapters).     Object[] actualArguments = getInvocationArguments(actualInvocation, argumentAdapters).     assertThat(expectedArguments, is(equalTo(actualArguments))). }
false;private,static;2;7;;private static Object[] getInvocationArguments(Invocation invocation, InvocationArgumentsAdapter... argumentAdapters) {     Object[] arguments = invocation.getArguments().     for (InvocationArgumentsAdapter adapter : argumentAdapters) {         arguments = adapter.adaptArguments(arguments).     }     return arguments. }
true;;1;1;/**  * Change the arguments if required.  * @param arguments the source arguments  * @return updated or original arguments (never {@code null})  */ ;/**  * Change the arguments if required.  * @param arguments the source arguments  * @return updated or original arguments (never {@code null})  */ Object[] adaptArguments(Object[] arguments).
