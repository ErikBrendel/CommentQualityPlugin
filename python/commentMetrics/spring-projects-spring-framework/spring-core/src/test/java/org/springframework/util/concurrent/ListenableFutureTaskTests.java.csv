commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onSuccess(String result) {     assertEquals(s, result). }
false;public;1;4;;@Override public void onFailure(Throwable ex) {     fail(ex.getMessage()). }
false;public;0;22;;@Test public void success() throws Exception {     final String s = "Hello World".     Callable<String> callable = () -> s.     ListenableFutureTask<String> task = new ListenableFutureTask<>(callable).     task.addCallback(new ListenableFutureCallback<String>() {          @Override         public void onSuccess(String result) {             assertEquals(s, result).         }          @Override         public void onFailure(Throwable ex) {             fail(ex.getMessage()).         }     }).     task.run().     assertSame(s, task.get()).     assertSame(s, task.completable().get()).     task.completable().thenAccept(v -> assertSame(s, v)). }
false;public;1;4;;@Override public void onSuccess(String result) {     fail("onSuccess not expected"). }
false;public;1;4;;@Override public void onFailure(Throwable ex) {     assertEquals(s, ex.getMessage()). }
false;public;0;35;;@Test public void failure() throws Exception {     final String s = "Hello World".     Callable<String> callable = () -> {         throw new IOException(s).     }.     ListenableFutureTask<String> task = new ListenableFutureTask<>(callable).     task.addCallback(new ListenableFutureCallback<String>() {          @Override         public void onSuccess(String result) {             fail("onSuccess not expected").         }          @Override         public void onFailure(Throwable ex) {             assertEquals(s, ex.getMessage()).         }     }).     task.run().     try {         task.get().         fail("Should have thrown ExecutionException").     } catch (ExecutionException ex) {         assertSame(s, ex.getCause().getMessage()).     }     try {         task.completable().get().         fail("Should have thrown ExecutionException").     } catch (ExecutionException ex) {         assertSame(s, ex.getCause().getMessage()).     } }
false;public;0;17;;@Test public void successWithLambdas() throws Exception {     final String s = "Hello World".     Callable<String> callable = () -> s.     SuccessCallback<String> successCallback = mock(SuccessCallback.class).     FailureCallback failureCallback = mock(FailureCallback.class).     ListenableFutureTask<String> task = new ListenableFutureTask<>(callable).     task.addCallback(successCallback, failureCallback).     task.run().     verify(successCallback).onSuccess(s).     verifyZeroInteractions(failureCallback).     assertSame(s, task.get()).     assertSame(s, task.completable().get()).     task.completable().thenAccept(v -> assertSame(s, v)). }
false;public;0;31;;@Test public void failureWithLambdas() throws Exception {     final String s = "Hello World".     IOException ex = new IOException(s).     Callable<String> callable = () -> {         throw ex.     }.     SuccessCallback<String> successCallback = mock(SuccessCallback.class).     FailureCallback failureCallback = mock(FailureCallback.class).     ListenableFutureTask<String> task = new ListenableFutureTask<>(callable).     task.addCallback(successCallback, failureCallback).     task.run().     verify(failureCallback).onFailure(ex).     verifyZeroInteractions(successCallback).     try {         task.get().         fail("Should have thrown ExecutionException").     } catch (ExecutionException ex2) {         assertSame(s, ex2.getCause().getMessage()).     }     try {         task.completable().get().         fail("Should have thrown ExecutionException").     } catch (ExecutionException ex2) {         assertSame(s, ex2.getCause().getMessage()).     } }
