commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override @Nullable public Object invoke(MethodInvocation invocation) throws Throwable {     // Work out the target class: may be {@code null}.     // The TransactionAttributeSource should be passed the target class     // as well as the method, which may be from an interface.     Class<?> targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null).     // Adapt to TransactionAspectSupport's invokeWithinTransaction...     return invokeWithinTransaction(invocation.getMethod(), targetClass, invocation::proceed). }
false;private;1;10;;// --------------------------------------------------------------------- // Serialization support // --------------------------------------------------------------------- private void writeObject(ObjectOutputStream oos) throws IOException {     // Rely on default serialization, although this class itself doesn't carry state anyway...     oos.defaultWriteObject().     // Deserialize superclass fields.     oos.writeObject(getTransactionManagerBeanName()).     oos.writeObject(getTransactionManager()).     oos.writeObject(getTransactionAttributeSource()).     oos.writeObject(getBeanFactory()). }
false;private;1;12;;private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {     // Rely on default serialization, although this class itself doesn't carry state anyway...     ois.defaultReadObject().     // Serialize all relevant superclass fields.     // Superclass can't implement Serializable because it also serves as base class     // for AspectJ aspects (which are not allowed to implement Serializable)!     setTransactionManagerBeanName((String) ois.readObject()).     setTransactionManager((PlatformTransactionManager) ois.readObject()).     setTransactionAttributeSource((TransactionAttributeSource) ois.readObject()).     setBeanFactory((BeanFactory) ois.readObject()). }
