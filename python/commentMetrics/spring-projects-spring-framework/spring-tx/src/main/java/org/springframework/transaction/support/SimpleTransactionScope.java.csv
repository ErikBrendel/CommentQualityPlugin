commented;modifiers;parameterAmount;loc;comment;code
false;public;2;15;;@Override public Object get(String name, ObjectFactory<?> objectFactory) {     ScopedObjectsHolder scopedObjects = (ScopedObjectsHolder) TransactionSynchronizationManager.getResource(this).     if (scopedObjects == null) {         scopedObjects = new ScopedObjectsHolder().         TransactionSynchronizationManager.registerSynchronization(new CleanupSynchronization(scopedObjects)).         TransactionSynchronizationManager.bindResource(this, scopedObjects).     }     Object scopedObject = scopedObjects.scopedInstances.get(name).     if (scopedObject == null) {         scopedObject = objectFactory.getObject().         scopedObjects.scopedInstances.put(name, scopedObject).     }     return scopedObject. }
false;public;1;12;;@Override @Nullable public Object remove(String name) {     ScopedObjectsHolder scopedObjects = (ScopedObjectsHolder) TransactionSynchronizationManager.getResource(this).     if (scopedObjects != null) {         scopedObjects.destructionCallbacks.remove(name).         return scopedObjects.scopedInstances.remove(name).     } else {         return null.     } }
false;public;2;7;;@Override public void registerDestructionCallback(String name, Runnable callback) {     ScopedObjectsHolder scopedObjects = (ScopedObjectsHolder) TransactionSynchronizationManager.getResource(this).     if (scopedObjects != null) {         scopedObjects.destructionCallbacks.put(name, callback).     } }
false;public;1;5;;@Override @Nullable public Object resolveContextualObject(String key) {     return null. }
false;public;0;5;;@Override @Nullable public String getConversationId() {     return TransactionSynchronizationManager.getCurrentTransactionName(). }
false;public;0;4;;@Override public void suspend() {     TransactionSynchronizationManager.unbindResource(SimpleTransactionScope.this). }
false;public;0;4;;@Override public void resume() {     TransactionSynchronizationManager.bindResource(SimpleTransactionScope.this, this.scopedObjects). }
false;public;1;9;;@Override public void afterCompletion(int status) {     TransactionSynchronizationManager.unbindResourceIfPossible(SimpleTransactionScope.this).     for (Runnable callback : this.scopedObjects.destructionCallbacks.values()) {         callback.run().     }     this.scopedObjects.destructionCallbacks.clear().     this.scopedObjects.scopedInstances.clear(). }
