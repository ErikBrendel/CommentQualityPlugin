commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the JCA ManagerConnectionFactory that should be used to create  * the desired connection factory.  * <p>The ManagerConnectionFactory will usually be set up as separate bean  * (potentially as inner bean), populated with JavaBean properties:  * a ManagerConnectionFactory is encouraged to follow the JavaBean pattern  * by the JCA specification, analogous to a JDBC DataSource and a JPA  * EntityManagerFactory.  * <p>Note that the ManagerConnectionFactory implementation might expect  * a reference to its JCA 1.7 ResourceAdapter, expressed through the  * {@link javax.resource.spi.ResourceAdapterAssociation} interface.  * Simply inject the corresponding ResourceAdapter instance into its  * "resourceAdapter" bean property in this case, before passing the  * ManagerConnectionFactory into this LocalConnectionFactoryBean.  * @see javax.resource.spi.ManagedConnectionFactory#createConnectionFactory()  */ ;/**  * Set the JCA ManagerConnectionFactory that should be used to create  * the desired connection factory.  * <p>The ManagerConnectionFactory will usually be set up as separate bean  * (potentially as inner bean), populated with JavaBean properties:  * a ManagerConnectionFactory is encouraged to follow the JavaBean pattern  * by the JCA specification, analogous to a JDBC DataSource and a JPA  * EntityManagerFactory.  * <p>Note that the ManagerConnectionFactory implementation might expect  * a reference to its JCA 1.7 ResourceAdapter, expressed through the  * {@link javax.resource.spi.ResourceAdapterAssociation} interface.  * Simply inject the corresponding ResourceAdapter instance into its  * "resourceAdapter" bean property in this case, before passing the  * ManagerConnectionFactory into this LocalConnectionFactoryBean.  * @see javax.resource.spi.ManagedConnectionFactory#createConnectionFactory()  */ public void setManagedConnectionFactory(ManagedConnectionFactory managedConnectionFactory) {     this.managedConnectionFactory = managedConnectionFactory. }
true;public;1;3;/**  * Set the JCA ConnectionManager that should be used to create the  * desired connection factory.  * <p>A ConnectionManager implementation for local usage is often  * included with a JCA connector. Such an included ConnectionManager  * might be set as default, with no need to explicitly specify one.  * @see javax.resource.spi.ManagedConnectionFactory#createConnectionFactory(javax.resource.spi.ConnectionManager)  */ ;/**  * Set the JCA ConnectionManager that should be used to create the  * desired connection factory.  * <p>A ConnectionManager implementation for local usage is often  * included with a JCA connector. Such an included ConnectionManager  * might be set as default, with no need to explicitly specify one.  * @see javax.resource.spi.ManagedConnectionFactory#createConnectionFactory(javax.resource.spi.ConnectionManager)  */ public void setConnectionManager(ConnectionManager connectionManager) {     this.connectionManager = connectionManager. }
false;public;0;12;;@Override public void afterPropertiesSet() throws ResourceException {     if (this.managedConnectionFactory == null) {         throw new IllegalArgumentException("Property 'managedConnectionFactory' is required").     }     if (this.connectionManager != null) {         this.connectionFactory = this.managedConnectionFactory.createConnectionFactory(this.connectionManager).     } else {         this.connectionFactory = this.managedConnectionFactory.createConnectionFactory().     } }
false;public;0;5;;@Override @Nullable public Object getObject() {     return this.connectionFactory. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return (this.connectionFactory != null ? this.connectionFactory.getClass() : null). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
