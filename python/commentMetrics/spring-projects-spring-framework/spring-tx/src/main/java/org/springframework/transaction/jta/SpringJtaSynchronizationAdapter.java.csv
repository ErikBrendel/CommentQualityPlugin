# id;timestamp;commentText;codeText;commentWords;codeWords
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization, 			@Nullable UserTransaction jtaUserTransaction);1496837955;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a {@code beforeCompletion} exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaUserTransaction the JTA UserTransaction to use for rollback-only_setting in case of an exception thrown in {@code beforeCompletion}_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1).;public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization,_			@Nullable UserTransaction jtaUserTransaction) {__		this(springSynchronization)__		if (jtaUserTransaction != null && !jtaUserTransaction.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = jtaUserTransaction__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,user,transaction,the,jta,user,transaction,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,nullable,user,transaction,jta,user,transaction,this,spring,synchronization,if,jta,user,transaction,null,jta,user,transaction,get,class,get,name,starts,with,weblogic,this,jta,transaction,jta,user,transaction
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization, 			@Nullable UserTransaction jtaUserTransaction);1498780456;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a {@code beforeCompletion} exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaUserTransaction the JTA UserTransaction to use for rollback-only_setting in case of an exception thrown in {@code beforeCompletion}_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1).;public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization,_			@Nullable UserTransaction jtaUserTransaction) {__		this(springSynchronization)__		if (jtaUserTransaction != null && !jtaUserTransaction.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = jtaUserTransaction__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,user,transaction,the,jta,user,transaction,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,nullable,user,transaction,jta,user,transaction,this,spring,synchronization,if,jta,user,transaction,null,jta,user,transaction,get,class,get,name,starts,with,weblogic,this,jta,transaction,jta,user,transaction
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization, 			@Nullable UserTransaction jtaUserTransaction);1545727613;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a {@code beforeCompletion} exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaUserTransaction the JTA UserTransaction to use for rollback-only_setting in case of an exception thrown in {@code beforeCompletion}_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1).;public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization,_			@Nullable UserTransaction jtaUserTransaction) {__		this(springSynchronization)__		if (jtaUserTransaction != null && !jtaUserTransaction.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = jtaUserTransaction__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,user,transaction,the,jta,user,transaction,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,nullable,user,transaction,jta,user,transaction,this,spring,synchronization,if,jta,user,transaction,null,jta,user,transaction,get,class,get,name,starts,with,weblogic,this,jta,transaction,jta,user,transaction
SpringJtaSynchronizationAdapter -> public void beforeCompletion();1328020251;JTA <code>beforeCompletion</code> callback: just invoked before commit._<p>In case of an exception, the JTA transaction will be marked as rollback-only._@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit;public void beforeCompletion() {_		try {_			boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__			this.springSynchronization.beforeCommit(readOnly)__		}_		catch (RuntimeException ex) {_			setRollbackOnlyIfPossible()__			throw ex__		}_		catch (Error err) {_			setRollbackOnlyIfPossible()__			throw err__		}_		finally {_			_			_			_			this.beforeCompletionCalled = true__			this.springSynchronization.beforeCompletion()__		}_	};jta,code,before,completion,code,callback,just,invoked,before,commit,p,in,case,of,an,exception,the,jta,transaction,will,be,marked,as,rollback,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit;public,void,before,completion,try,boolean,read,only,transaction,synchronization,manager,is,current,transaction,read,only,this,spring,synchronization,before,commit,read,only,catch,runtime,exception,ex,set,rollback,only,if,possible,throw,ex,catch,error,err,set,rollback,only,if,possible,throw,err,finally,this,before,completion,called,true,this,spring,synchronization,before,completion
SpringJtaSynchronizationAdapter -> public void beforeCompletion();1357119239;JTA {@code beforeCompletion} callback: just invoked before commit._<p>In case of an exception, the JTA transaction will be marked as rollback-only._@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit;public void beforeCompletion() {_		try {_			boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__			this.springSynchronization.beforeCommit(readOnly)__		}_		catch (RuntimeException ex) {_			setRollbackOnlyIfPossible()__			throw ex__		}_		catch (Error err) {_			setRollbackOnlyIfPossible()__			throw err__		}_		finally {_			_			_			_			this.beforeCompletionCalled = true__			this.springSynchronization.beforeCompletion()__		}_	};jta,code,before,completion,callback,just,invoked,before,commit,p,in,case,of,an,exception,the,jta,transaction,will,be,marked,as,rollback,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit;public,void,before,completion,try,boolean,read,only,transaction,synchronization,manager,is,current,transaction,read,only,this,spring,synchronization,before,commit,read,only,catch,runtime,exception,ex,set,rollback,only,if,possible,throw,ex,catch,error,err,set,rollback,only,if,possible,throw,err,finally,this,before,completion,called,true,this,spring,synchronization,before,completion
SpringJtaSynchronizationAdapter -> private void setRollbackOnlyIfPossible();1328020251;Set the underlying JTA transaction to rollback-only.;private void setRollbackOnlyIfPossible() {_		if (this.jtaTransaction != null) {_			try {_				this.jtaTransaction.setRollbackOnly()__			}_			catch (UnsupportedOperationException ex) {_				_				logger.debug("JTA transaction handle does not support setRollbackOnly method - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion", ex)__			}_			catch (Throwable ex) {_				logger.error("Could not set JTA transaction rollback-only", ex)__			}_		}_		else {_			logger.debug("No JTA transaction handle available and/or running on WebLogic - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion")__			}_	};set,the,underlying,jta,transaction,to,rollback,only;private,void,set,rollback,only,if,possible,if,this,jta,transaction,null,try,this,jta,transaction,set,rollback,only,catch,unsupported,operation,exception,ex,logger,debug,jta,transaction,handle,does,not,support,set,rollback,only,method,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion,ex,catch,throwable,ex,logger,error,could,not,set,jta,transaction,rollback,only,ex,else,logger,debug,no,jta,transaction,handle,available,and,or,running,on,web,logic,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion
SpringJtaSynchronizationAdapter -> private void setRollbackOnlyIfPossible();1356735495;Set the underlying JTA transaction to rollback-only.;private void setRollbackOnlyIfPossible() {_		if (this.jtaTransaction != null) {_			try {_				this.jtaTransaction.setRollbackOnly()__			}_			catch (UnsupportedOperationException ex) {_				_				logger.debug("JTA transaction handle does not support setRollbackOnly method - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion", ex)__			}_			catch (Throwable ex) {_				logger.error("Could not set JTA transaction rollback-only", ex)__			}_		}_		else {_			logger.debug("No JTA transaction handle available and/or running on WebLogic - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion")__			}_	};set,the,underlying,jta,transaction,to,rollback,only;private,void,set,rollback,only,if,possible,if,this,jta,transaction,null,try,this,jta,transaction,set,rollback,only,catch,unsupported,operation,exception,ex,logger,debug,jta,transaction,handle,does,not,support,set,rollback,only,method,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion,ex,catch,throwable,ex,logger,error,could,not,set,jta,transaction,rollback,only,ex,else,logger,debug,no,jta,transaction,handle,available,and,or,running,on,web,logic,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion
SpringJtaSynchronizationAdapter -> private void setRollbackOnlyIfPossible();1357119239;Set the underlying JTA transaction to rollback-only.;private void setRollbackOnlyIfPossible() {_		if (this.jtaTransaction != null) {_			try {_				this.jtaTransaction.setRollbackOnly()__			}_			catch (UnsupportedOperationException ex) {_				_				logger.debug("JTA transaction handle does not support setRollbackOnly method - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion", ex)__			}_			catch (Throwable ex) {_				logger.error("Could not set JTA transaction rollback-only", ex)__			}_		}_		else {_			logger.debug("No JTA transaction handle available and/or running on WebLogic - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion")__			}_	};set,the,underlying,jta,transaction,to,rollback,only;private,void,set,rollback,only,if,possible,if,this,jta,transaction,null,try,this,jta,transaction,set,rollback,only,catch,unsupported,operation,exception,ex,logger,debug,jta,transaction,handle,does,not,support,set,rollback,only,method,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion,ex,catch,throwable,ex,logger,error,could,not,set,jta,transaction,rollback,only,ex,else,logger,debug,no,jta,transaction,handle,available,and,or,running,on,web,logic,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion
SpringJtaSynchronizationAdapter -> private void setRollbackOnlyIfPossible();1368482696;Set the underlying JTA transaction to rollback-only.;private void setRollbackOnlyIfPossible() {_		if (this.jtaTransaction != null) {_			try {_				this.jtaTransaction.setRollbackOnly()__			}_			catch (UnsupportedOperationException ex) {_				_				logger.debug("JTA transaction handle does not support setRollbackOnly method - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion", ex)__			}_			catch (Throwable ex) {_				logger.error("Could not set JTA transaction rollback-only", ex)__			}_		}_		else {_			logger.debug("No JTA transaction handle available and/or running on WebLogic - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion")__			}_	};set,the,underlying,jta,transaction,to,rollback,only;private,void,set,rollback,only,if,possible,if,this,jta,transaction,null,try,this,jta,transaction,set,rollback,only,catch,unsupported,operation,exception,ex,logger,debug,jta,transaction,handle,does,not,support,set,rollback,only,method,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion,ex,catch,throwable,ex,logger,error,could,not,set,jta,transaction,rollback,only,ex,else,logger,debug,no,jta,transaction,handle,available,and,or,running,on,web,logic,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion
SpringJtaSynchronizationAdapter -> private void setRollbackOnlyIfPossible();1496837955;Set the underlying JTA transaction to rollback-only.;private void setRollbackOnlyIfPossible() {_		if (this.jtaTransaction != null) {_			try {_				this.jtaTransaction.setRollbackOnly()__			}_			catch (UnsupportedOperationException ex) {_				_				logger.debug("JTA transaction handle does not support setRollbackOnly method - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion", ex)__			}_			catch (Throwable ex) {_				logger.error("Could not set JTA transaction rollback-only", ex)__			}_		}_		else {_			logger.debug("No JTA transaction handle available and/or running on WebLogic - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion")__			}_	};set,the,underlying,jta,transaction,to,rollback,only;private,void,set,rollback,only,if,possible,if,this,jta,transaction,null,try,this,jta,transaction,set,rollback,only,catch,unsupported,operation,exception,ex,logger,debug,jta,transaction,handle,does,not,support,set,rollback,only,method,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion,ex,catch,throwable,ex,logger,error,could,not,set,jta,transaction,rollback,only,ex,else,logger,debug,no,jta,transaction,handle,available,and,or,running,on,web,logic,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion
SpringJtaSynchronizationAdapter -> private void setRollbackOnlyIfPossible();1498780456;Set the underlying JTA transaction to rollback-only.;private void setRollbackOnlyIfPossible() {_		if (this.jtaTransaction != null) {_			try {_				this.jtaTransaction.setRollbackOnly()__			}_			catch (UnsupportedOperationException ex) {_				_				logger.debug("JTA transaction handle does not support setRollbackOnly method - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion", ex)__			}_			catch (Throwable ex) {_				logger.error("Could not set JTA transaction rollback-only", ex)__			}_		}_		else {_			logger.debug("No JTA transaction handle available and/or running on WebLogic - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion")__			}_	};set,the,underlying,jta,transaction,to,rollback,only;private,void,set,rollback,only,if,possible,if,this,jta,transaction,null,try,this,jta,transaction,set,rollback,only,catch,unsupported,operation,exception,ex,logger,debug,jta,transaction,handle,does,not,support,set,rollback,only,method,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion,ex,catch,throwable,ex,logger,error,could,not,set,jta,transaction,rollback,only,ex,else,logger,debug,no,jta,transaction,handle,available,and,or,running,on,web,logic,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion
SpringJtaSynchronizationAdapter -> private void setRollbackOnlyIfPossible();1545727613;Set the underlying JTA transaction to rollback-only.;private void setRollbackOnlyIfPossible() {_		if (this.jtaTransaction != null) {_			try {_				this.jtaTransaction.setRollbackOnly()__			}_			catch (UnsupportedOperationException ex) {_				_				logger.debug("JTA transaction handle does not support setRollbackOnly method - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion", ex)__			}_			catch (Throwable ex) {_				logger.error("Could not set JTA transaction rollback-only", ex)__			}_		}_		else {_			logger.debug("No JTA transaction handle available and/or running on WebLogic - " +_						"relying on JTA provider to mark the transaction as rollback-only based on " +_						"the exception thrown from beforeCompletion")__			}_	};set,the,underlying,jta,transaction,to,rollback,only;private,void,set,rollback,only,if,possible,if,this,jta,transaction,null,try,this,jta,transaction,set,rollback,only,catch,unsupported,operation,exception,ex,logger,debug,jta,transaction,handle,does,not,support,set,rollback,only,method,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion,ex,catch,throwable,ex,logger,error,could,not,set,jta,transaction,rollback,only,ex,else,logger,debug,no,jta,transaction,handle,available,and,or,running,on,web,logic,relying,on,jta,provider,to,mark,the,transaction,as,rollback,only,based,on,the,exception,thrown,from,before,completion
SpringJtaSynchronizationAdapter -> public void afterCompletion(int status);1328020251;JTA <code>afterCompletion</code> callback: invoked after commit/rollback._<p>Needs to invoke the Spring synchronization's <code>beforeCompletion</code>_at this late stage in case of a rollback, since there is no corresponding_callback with JTA._@see org.springframework.transaction.support.TransactionSynchronization#beforeCompletion_@see org.springframework.transaction.support.TransactionSynchronization#afterCompletion;public void afterCompletion(int status) {_		if (!this.beforeCompletionCalled) {_			_			_			this.springSynchronization.beforeCompletion()__		}_		_		switch (status) {_			case Status.STATUS_COMMITTED:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_COMMITTED)__				break__			case Status.STATUS_ROLLEDBACK:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_ROLLED_BACK)__				break__			default:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_UNKNOWN)__		}_	};jta,code,after,completion,code,callback,invoked,after,commit,rollback,p,needs,to,invoke,the,spring,synchronization,s,code,before,completion,code,at,this,late,stage,in,case,of,a,rollback,since,there,is,no,corresponding,callback,with,jta,see,org,springframework,transaction,support,transaction,synchronization,before,completion,see,org,springframework,transaction,support,transaction,synchronization,after,completion;public,void,after,completion,int,status,if,this,before,completion,called,this,spring,synchronization,before,completion,switch,status,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,default,this,spring,synchronization,after,completion,transaction,synchronization
SpringJtaSynchronizationAdapter -> public void afterCompletion(int status);1357119239;JTA {@code afterCompletion} callback: invoked after commit/rollback._<p>Needs to invoke the Spring synchronization's {@code beforeCompletion}_at this late stage in case of a rollback, since there is no corresponding_callback with JTA._@see org.springframework.transaction.support.TransactionSynchronization#beforeCompletion_@see org.springframework.transaction.support.TransactionSynchronization#afterCompletion;public void afterCompletion(int status) {_		if (!this.beforeCompletionCalled) {_			_			_			this.springSynchronization.beforeCompletion()__		}_		_		switch (status) {_			case Status.STATUS_COMMITTED:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_COMMITTED)__				break__			case Status.STATUS_ROLLEDBACK:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_ROLLED_BACK)__				break__			default:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_UNKNOWN)__		}_	};jta,code,after,completion,callback,invoked,after,commit,rollback,p,needs,to,invoke,the,spring,synchronization,s,code,before,completion,at,this,late,stage,in,case,of,a,rollback,since,there,is,no,corresponding,callback,with,jta,see,org,springframework,transaction,support,transaction,synchronization,before,completion,see,org,springframework,transaction,support,transaction,synchronization,after,completion;public,void,after,completion,int,status,if,this,before,completion,called,this,spring,synchronization,before,completion,switch,status,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,default,this,spring,synchronization,after,completion,transaction,synchronization
SpringJtaSynchronizationAdapter -> @Override 	public void afterCompletion(int status);1356735495;JTA {@code afterCompletion} callback: invoked after commit/rollback._<p>Needs to invoke the Spring synchronization's {@code beforeCompletion}_at this late stage in case of a rollback, since there is no corresponding_callback with JTA._@see org.springframework.transaction.support.TransactionSynchronization#beforeCompletion_@see org.springframework.transaction.support.TransactionSynchronization#afterCompletion;@Override_	public void afterCompletion(int status) {_		if (!this.beforeCompletionCalled) {_			_			_			this.springSynchronization.beforeCompletion()__		}_		_		switch (status) {_			case Status.STATUS_COMMITTED:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_COMMITTED)__				break__			case Status.STATUS_ROLLEDBACK:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_ROLLED_BACK)__				break__			default:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_UNKNOWN)__		}_	};jta,code,after,completion,callback,invoked,after,commit,rollback,p,needs,to,invoke,the,spring,synchronization,s,code,before,completion,at,this,late,stage,in,case,of,a,rollback,since,there,is,no,corresponding,callback,with,jta,see,org,springframework,transaction,support,transaction,synchronization,before,completion,see,org,springframework,transaction,support,transaction,synchronization,after,completion;override,public,void,after,completion,int,status,if,this,before,completion,called,this,spring,synchronization,before,completion,switch,status,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,default,this,spring,synchronization,after,completion,transaction,synchronization
SpringJtaSynchronizationAdapter -> @Override 	public void afterCompletion(int status);1368482696;JTA {@code afterCompletion} callback: invoked after commit/rollback._<p>Needs to invoke the Spring synchronization's {@code beforeCompletion}_at this late stage in case of a rollback, since there is no corresponding_callback with JTA._@see org.springframework.transaction.support.TransactionSynchronization#beforeCompletion_@see org.springframework.transaction.support.TransactionSynchronization#afterCompletion;@Override_	public void afterCompletion(int status) {_		if (!this.beforeCompletionCalled) {_			_			_			this.springSynchronization.beforeCompletion()__		}_		_		switch (status) {_			case Status.STATUS_COMMITTED:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_COMMITTED)__				break__			case Status.STATUS_ROLLEDBACK:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_ROLLED_BACK)__				break__			default:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_UNKNOWN)__		}_	};jta,code,after,completion,callback,invoked,after,commit,rollback,p,needs,to,invoke,the,spring,synchronization,s,code,before,completion,at,this,late,stage,in,case,of,a,rollback,since,there,is,no,corresponding,callback,with,jta,see,org,springframework,transaction,support,transaction,synchronization,before,completion,see,org,springframework,transaction,support,transaction,synchronization,after,completion;override,public,void,after,completion,int,status,if,this,before,completion,called,this,spring,synchronization,before,completion,switch,status,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,default,this,spring,synchronization,after,completion,transaction,synchronization
SpringJtaSynchronizationAdapter -> @Override 	public void afterCompletion(int status);1496837955;JTA {@code afterCompletion} callback: invoked after commit/rollback._<p>Needs to invoke the Spring synchronization's {@code beforeCompletion}_at this late stage in case of a rollback, since there is no corresponding_callback with JTA._@see org.springframework.transaction.support.TransactionSynchronization#beforeCompletion_@see org.springframework.transaction.support.TransactionSynchronization#afterCompletion;@Override_	public void afterCompletion(int status) {_		if (!this.beforeCompletionCalled) {_			_			_			this.springSynchronization.beforeCompletion()__		}_		_		switch (status) {_			case Status.STATUS_COMMITTED:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_COMMITTED)__				break__			case Status.STATUS_ROLLEDBACK:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_ROLLED_BACK)__				break__			default:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_UNKNOWN)__		}_	};jta,code,after,completion,callback,invoked,after,commit,rollback,p,needs,to,invoke,the,spring,synchronization,s,code,before,completion,at,this,late,stage,in,case,of,a,rollback,since,there,is,no,corresponding,callback,with,jta,see,org,springframework,transaction,support,transaction,synchronization,before,completion,see,org,springframework,transaction,support,transaction,synchronization,after,completion;override,public,void,after,completion,int,status,if,this,before,completion,called,this,spring,synchronization,before,completion,switch,status,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,default,this,spring,synchronization,after,completion,transaction,synchronization
SpringJtaSynchronizationAdapter -> @Override 	public void afterCompletion(int status);1498780456;JTA {@code afterCompletion} callback: invoked after commit/rollback._<p>Needs to invoke the Spring synchronization's {@code beforeCompletion}_at this late stage in case of a rollback, since there is no corresponding_callback with JTA._@see org.springframework.transaction.support.TransactionSynchronization#beforeCompletion_@see org.springframework.transaction.support.TransactionSynchronization#afterCompletion;@Override_	public void afterCompletion(int status) {_		if (!this.beforeCompletionCalled) {_			_			_			this.springSynchronization.beforeCompletion()__		}_		_		switch (status) {_			case Status.STATUS_COMMITTED:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_COMMITTED)__				break__			case Status.STATUS_ROLLEDBACK:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_ROLLED_BACK)__				break__			default:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_UNKNOWN)__		}_	};jta,code,after,completion,callback,invoked,after,commit,rollback,p,needs,to,invoke,the,spring,synchronization,s,code,before,completion,at,this,late,stage,in,case,of,a,rollback,since,there,is,no,corresponding,callback,with,jta,see,org,springframework,transaction,support,transaction,synchronization,before,completion,see,org,springframework,transaction,support,transaction,synchronization,after,completion;override,public,void,after,completion,int,status,if,this,before,completion,called,this,spring,synchronization,before,completion,switch,status,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,default,this,spring,synchronization,after,completion,transaction,synchronization
SpringJtaSynchronizationAdapter -> @Override 	public void afterCompletion(int status);1545727613;JTA {@code afterCompletion} callback: invoked after commit/rollback._<p>Needs to invoke the Spring synchronization's {@code beforeCompletion}_at this late stage in case of a rollback, since there is no corresponding_callback with JTA._@see org.springframework.transaction.support.TransactionSynchronization#beforeCompletion_@see org.springframework.transaction.support.TransactionSynchronization#afterCompletion;@Override_	public void afterCompletion(int status) {_		if (!this.beforeCompletionCalled) {_			_			_			this.springSynchronization.beforeCompletion()__		}_		_		switch (status) {_			case Status.STATUS_COMMITTED:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_COMMITTED)__				break__			case Status.STATUS_ROLLEDBACK:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_ROLLED_BACK)__				break__			default:_				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_UNKNOWN)__		}_	};jta,code,after,completion,callback,invoked,after,commit,rollback,p,needs,to,invoke,the,spring,synchronization,s,code,before,completion,at,this,late,stage,in,case,of,a,rollback,since,there,is,no,corresponding,callback,with,jta,see,org,springframework,transaction,support,transaction,synchronization,before,completion,see,org,springframework,transaction,support,transaction,synchronization,after,completion;override,public,void,after,completion,int,status,if,this,before,completion,called,this,spring,synchronization,before,completion,switch,status,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,case,status,this,spring,synchronization,after,completion,transaction,synchronization,break,default,this,spring,synchronization,after,completion,transaction,synchronization
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter( 			TransactionSynchronization springSynchronization, UserTransaction jtaUserTransaction);1328020251;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a <code>beforeCompletion</code> exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaUserTransaction the JTA UserTransaction to use for rollback-only_setting in case of an exception thrown in <code>beforeCompletion</code>_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1).;public SpringJtaSynchronizationAdapter(_			TransactionSynchronization springSynchronization, UserTransaction jtaUserTransaction) {__		this(springSynchronization)__		if (jtaUserTransaction != null && !jtaUserTransaction.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = jtaUserTransaction__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,code,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,user,transaction,the,jta,user,transaction,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,code,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,user,transaction,jta,user,transaction,this,spring,synchronization,if,jta,user,transaction,null,jta,user,transaction,get,class,get,name,starts,with,weblogic,this,jta,transaction,jta,user,transaction
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter( 			TransactionSynchronization springSynchronization, UserTransaction jtaUserTransaction);1356735495;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a {@code beforeCompletion} exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaUserTransaction the JTA UserTransaction to use for rollback-only_setting in case of an exception thrown in {@code beforeCompletion}_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1).;public SpringJtaSynchronizationAdapter(_			TransactionSynchronization springSynchronization, UserTransaction jtaUserTransaction) {__		this(springSynchronization)__		if (jtaUserTransaction != null && !jtaUserTransaction.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = jtaUserTransaction__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,user,transaction,the,jta,user,transaction,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,user,transaction,jta,user,transaction,this,spring,synchronization,if,jta,user,transaction,null,jta,user,transaction,get,class,get,name,starts,with,weblogic,this,jta,transaction,jta,user,transaction
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter( 			TransactionSynchronization springSynchronization, UserTransaction jtaUserTransaction);1357119239;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a {@code beforeCompletion} exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaUserTransaction the JTA UserTransaction to use for rollback-only_setting in case of an exception thrown in {@code beforeCompletion}_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1).;public SpringJtaSynchronizationAdapter(_			TransactionSynchronization springSynchronization, UserTransaction jtaUserTransaction) {__		this(springSynchronization)__		if (jtaUserTransaction != null && !jtaUserTransaction.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = jtaUserTransaction__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,user,transaction,the,jta,user,transaction,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,user,transaction,jta,user,transaction,this,spring,synchronization,if,jta,user,transaction,null,jta,user,transaction,get,class,get,name,starts,with,weblogic,this,jta,transaction,jta,user,transaction
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter( 			TransactionSynchronization springSynchronization, UserTransaction jtaUserTransaction);1368482696;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a {@code beforeCompletion} exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaUserTransaction the JTA UserTransaction to use for rollback-only_setting in case of an exception thrown in {@code beforeCompletion}_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1).;public SpringJtaSynchronizationAdapter(_			TransactionSynchronization springSynchronization, UserTransaction jtaUserTransaction) {__		this(springSynchronization)__		if (jtaUserTransaction != null && !jtaUserTransaction.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = jtaUserTransaction__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,user,transaction,the,jta,user,transaction,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,user,transaction,jta,user,transaction,this,spring,synchronization,if,jta,user,transaction,null,jta,user,transaction,get,class,get,name,starts,with,weblogic,this,jta,transaction,jta,user,transaction
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization);1328020251;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._@param springSynchronization the Spring TransactionSynchronization to delegate to;public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization) {_		Assert.notNull(springSynchronization, "TransactionSynchronization must not be null")__		this.springSynchronization = springSynchronization__	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,assert,not,null,spring,synchronization,transaction,synchronization,must,not,be,null,this,spring,synchronization,spring,synchronization
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization);1356735495;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._@param springSynchronization the Spring TransactionSynchronization to delegate to;public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization) {_		Assert.notNull(springSynchronization, "TransactionSynchronization must not be null")__		this.springSynchronization = springSynchronization__	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,assert,not,null,spring,synchronization,transaction,synchronization,must,not,be,null,this,spring,synchronization,spring,synchronization
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization);1357119239;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._@param springSynchronization the Spring TransactionSynchronization to delegate to;public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization) {_		Assert.notNull(springSynchronization, "TransactionSynchronization must not be null")__		this.springSynchronization = springSynchronization__	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,assert,not,null,spring,synchronization,transaction,synchronization,must,not,be,null,this,spring,synchronization,spring,synchronization
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization);1368482696;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._@param springSynchronization the Spring TransactionSynchronization to delegate to;public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization) {_		Assert.notNull(springSynchronization, "TransactionSynchronization must not be null")__		this.springSynchronization = springSynchronization__	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,assert,not,null,spring,synchronization,transaction,synchronization,must,not,be,null,this,spring,synchronization,spring,synchronization
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization);1496837955;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._@param springSynchronization the Spring TransactionSynchronization to delegate to;public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization) {_		Assert.notNull(springSynchronization, "TransactionSynchronization must not be null")__		this.springSynchronization = springSynchronization__	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,assert,not,null,spring,synchronization,transaction,synchronization,must,not,be,null,this,spring,synchronization,spring,synchronization
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization);1498780456;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._@param springSynchronization the Spring TransactionSynchronization to delegate to;public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization) {_		Assert.notNull(springSynchronization, "TransactionSynchronization must not be null")__		this.springSynchronization = springSynchronization__	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,assert,not,null,spring,synchronization,transaction,synchronization,must,not,be,null,this,spring,synchronization,spring,synchronization
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization);1545727613;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._@param springSynchronization the Spring TransactionSynchronization to delegate to;public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization) {_		Assert.notNull(springSynchronization, "TransactionSynchronization must not be null")__		this.springSynchronization = springSynchronization__	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,assert,not,null,spring,synchronization,transaction,synchronization,must,not,be,null,this,spring,synchronization,spring,synchronization
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter( 			TransactionSynchronization springSynchronization, @Nullable TransactionManager jtaTransactionManager);1496837955;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a {@code beforeCompletion} exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaTransactionManager the JTA TransactionManager to use for rollback-only_setting in case of an exception thrown in {@code beforeCompletion}_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1);public SpringJtaSynchronizationAdapter(_			TransactionSynchronization springSynchronization, @Nullable TransactionManager jtaTransactionManager) {__		this(springSynchronization)__		if (jtaTransactionManager != null && !jtaTransactionManager.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = new UserTransactionAdapter(jtaTransactionManager)__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,transaction,manager,the,jta,transaction,manager,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,nullable,transaction,manager,jta,transaction,manager,this,spring,synchronization,if,jta,transaction,manager,null,jta,transaction,manager,get,class,get,name,starts,with,weblogic,this,jta,transaction,new,user,transaction,adapter,jta,transaction,manager
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter( 			TransactionSynchronization springSynchronization, @Nullable TransactionManager jtaTransactionManager);1498780456;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a {@code beforeCompletion} exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaTransactionManager the JTA TransactionManager to use for rollback-only_setting in case of an exception thrown in {@code beforeCompletion}_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1);public SpringJtaSynchronizationAdapter(_			TransactionSynchronization springSynchronization, @Nullable TransactionManager jtaTransactionManager) {__		this(springSynchronization)__		if (jtaTransactionManager != null && !jtaTransactionManager.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = new UserTransactionAdapter(jtaTransactionManager)__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,transaction,manager,the,jta,transaction,manager,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,nullable,transaction,manager,jta,transaction,manager,this,spring,synchronization,if,jta,transaction,manager,null,jta,transaction,manager,get,class,get,name,starts,with,weblogic,this,jta,transaction,new,user,transaction,adapter,jta,transaction,manager
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter( 			TransactionSynchronization springSynchronization, @Nullable TransactionManager jtaTransactionManager);1545727613;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a {@code beforeCompletion} exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaTransactionManager the JTA TransactionManager to use for rollback-only_setting in case of an exception thrown in {@code beforeCompletion}_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1);public SpringJtaSynchronizationAdapter(_			TransactionSynchronization springSynchronization, @Nullable TransactionManager jtaTransactionManager) {__		this(springSynchronization)__		if (jtaTransactionManager != null && !jtaTransactionManager.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = new UserTransactionAdapter(jtaTransactionManager)__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,transaction,manager,the,jta,transaction,manager,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,nullable,transaction,manager,jta,transaction,manager,this,spring,synchronization,if,jta,transaction,manager,null,jta,transaction,manager,get,class,get,name,starts,with,weblogic,this,jta,transaction,new,user,transaction,adapter,jta,transaction,manager
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter( 			TransactionSynchronization springSynchronization, TransactionManager jtaTransactionManager);1328020251;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a <code>beforeCompletion</code> exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaTransactionManager the JTA TransactionManager to use for rollback-only_setting in case of an exception thrown in <code>beforeCompletion</code>_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1);public SpringJtaSynchronizationAdapter(_			TransactionSynchronization springSynchronization, TransactionManager jtaTransactionManager) {__		this(springSynchronization)__		if (jtaTransactionManager != null && !jtaTransactionManager.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = new UserTransactionAdapter(jtaTransactionManager)__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,code,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,transaction,manager,the,jta,transaction,manager,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,code,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,transaction,manager,jta,transaction,manager,this,spring,synchronization,if,jta,transaction,manager,null,jta,transaction,manager,get,class,get,name,starts,with,weblogic,this,jta,transaction,new,user,transaction,adapter,jta,transaction,manager
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter( 			TransactionSynchronization springSynchronization, TransactionManager jtaTransactionManager);1356735495;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a {@code beforeCompletion} exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaTransactionManager the JTA TransactionManager to use for rollback-only_setting in case of an exception thrown in {@code beforeCompletion}_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1);public SpringJtaSynchronizationAdapter(_			TransactionSynchronization springSynchronization, TransactionManager jtaTransactionManager) {__		this(springSynchronization)__		if (jtaTransactionManager != null && !jtaTransactionManager.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = new UserTransactionAdapter(jtaTransactionManager)__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,transaction,manager,the,jta,transaction,manager,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,transaction,manager,jta,transaction,manager,this,spring,synchronization,if,jta,transaction,manager,null,jta,transaction,manager,get,class,get,name,starts,with,weblogic,this,jta,transaction,new,user,transaction,adapter,jta,transaction,manager
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter( 			TransactionSynchronization springSynchronization, TransactionManager jtaTransactionManager);1357119239;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a {@code beforeCompletion} exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaTransactionManager the JTA TransactionManager to use for rollback-only_setting in case of an exception thrown in {@code beforeCompletion}_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1);public SpringJtaSynchronizationAdapter(_			TransactionSynchronization springSynchronization, TransactionManager jtaTransactionManager) {__		this(springSynchronization)__		if (jtaTransactionManager != null && !jtaTransactionManager.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = new UserTransactionAdapter(jtaTransactionManager)__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,transaction,manager,the,jta,transaction,manager,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,transaction,manager,jta,transaction,manager,this,spring,synchronization,if,jta,transaction,manager,null,jta,transaction,manager,get,class,get,name,starts,with,weblogic,this,jta,transaction,new,user,transaction,adapter,jta,transaction,manager
SpringJtaSynchronizationAdapter -> public SpringJtaSynchronizationAdapter( 			TransactionSynchronization springSynchronization, TransactionManager jtaTransactionManager);1368482696;Create a new SpringJtaSynchronizationAdapter for the given Spring_TransactionSynchronization and JTA TransactionManager._<p>Note that this adapter will never perform a rollback-only call on WebLogic,_since WebLogic Server is known to automatically mark the transaction as_rollback-only in case of a {@code beforeCompletion} exception. Hence,_on WLS, this constructor is equivalent to the single-arg constructor._@param springSynchronization the Spring TransactionSynchronization to delegate to_@param jtaTransactionManager the JTA TransactionManager to use for rollback-only_setting in case of an exception thrown in {@code beforeCompletion}_(can be omitted if the JTA provider itself marks the transaction rollback-only_in such a scenario, which is required by the JTA specification as of JTA 1.1);public SpringJtaSynchronizationAdapter(_			TransactionSynchronization springSynchronization, TransactionManager jtaTransactionManager) {__		this(springSynchronization)__		if (jtaTransactionManager != null && !jtaTransactionManager.getClass().getName().startsWith("weblogic.")) {_			this.jtaTransaction = new UserTransactionAdapter(jtaTransactionManager)__		}_	};create,a,new,spring,jta,synchronization,adapter,for,the,given,spring,transaction,synchronization,and,jta,transaction,manager,p,note,that,this,adapter,will,never,perform,a,rollback,only,call,on,web,logic,since,web,logic,server,is,known,to,automatically,mark,the,transaction,as,rollback,only,in,case,of,a,code,before,completion,exception,hence,on,wls,this,constructor,is,equivalent,to,the,single,arg,constructor,param,spring,synchronization,the,spring,transaction,synchronization,to,delegate,to,param,jta,transaction,manager,the,jta,transaction,manager,to,use,for,rollback,only,setting,in,case,of,an,exception,thrown,in,code,before,completion,can,be,omitted,if,the,jta,provider,itself,marks,the,transaction,rollback,only,in,such,a,scenario,which,is,required,by,the,jta,specification,as,of,jta,1,1;public,spring,jta,synchronization,adapter,transaction,synchronization,spring,synchronization,transaction,manager,jta,transaction,manager,this,spring,synchronization,if,jta,transaction,manager,null,jta,transaction,manager,get,class,get,name,starts,with,weblogic,this,jta,transaction,new,user,transaction,adapter,jta,transaction,manager
SpringJtaSynchronizationAdapter -> @Override 	public void beforeCompletion();1356735495;JTA {@code beforeCompletion} callback: just invoked before commit._<p>In case of an exception, the JTA transaction will be marked as rollback-only._@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit;@Override_	public void beforeCompletion() {_		try {_			boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__			this.springSynchronization.beforeCommit(readOnly)__		}_		catch (RuntimeException ex) {_			setRollbackOnlyIfPossible()__			throw ex__		}_		catch (Error err) {_			setRollbackOnlyIfPossible()__			throw err__		}_		finally {_			_			_			_			this.beforeCompletionCalled = true__			this.springSynchronization.beforeCompletion()__		}_	};jta,code,before,completion,callback,just,invoked,before,commit,p,in,case,of,an,exception,the,jta,transaction,will,be,marked,as,rollback,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit;override,public,void,before,completion,try,boolean,read,only,transaction,synchronization,manager,is,current,transaction,read,only,this,spring,synchronization,before,commit,read,only,catch,runtime,exception,ex,set,rollback,only,if,possible,throw,ex,catch,error,err,set,rollback,only,if,possible,throw,err,finally,this,before,completion,called,true,this,spring,synchronization,before,completion
SpringJtaSynchronizationAdapter -> @Override 	public void beforeCompletion();1368482696;JTA {@code beforeCompletion} callback: just invoked before commit._<p>In case of an exception, the JTA transaction will be marked as rollback-only._@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit;@Override_	public void beforeCompletion() {_		try {_			boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__			this.springSynchronization.beforeCommit(readOnly)__		}_		catch (RuntimeException ex) {_			setRollbackOnlyIfPossible()__			throw ex__		}_		catch (Error err) {_			setRollbackOnlyIfPossible()__			throw err__		}_		finally {_			_			_			_			this.beforeCompletionCalled = true__			this.springSynchronization.beforeCompletion()__		}_	};jta,code,before,completion,callback,just,invoked,before,commit,p,in,case,of,an,exception,the,jta,transaction,will,be,marked,as,rollback,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit;override,public,void,before,completion,try,boolean,read,only,transaction,synchronization,manager,is,current,transaction,read,only,this,spring,synchronization,before,commit,read,only,catch,runtime,exception,ex,set,rollback,only,if,possible,throw,ex,catch,error,err,set,rollback,only,if,possible,throw,err,finally,this,before,completion,called,true,this,spring,synchronization,before,completion
SpringJtaSynchronizationAdapter -> @Override 	public void beforeCompletion();1496837955;JTA {@code beforeCompletion} callback: just invoked before commit._<p>In case of an exception, the JTA transaction will be marked as rollback-only._@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit;@Override_	public void beforeCompletion() {_		try {_			boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__			this.springSynchronization.beforeCommit(readOnly)__		}_		catch (RuntimeException ex) {_			setRollbackOnlyIfPossible()__			throw ex__		}_		catch (Error err) {_			setRollbackOnlyIfPossible()__			throw err__		}_		finally {_			_			_			_			this.beforeCompletionCalled = true__			this.springSynchronization.beforeCompletion()__		}_	};jta,code,before,completion,callback,just,invoked,before,commit,p,in,case,of,an,exception,the,jta,transaction,will,be,marked,as,rollback,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit;override,public,void,before,completion,try,boolean,read,only,transaction,synchronization,manager,is,current,transaction,read,only,this,spring,synchronization,before,commit,read,only,catch,runtime,exception,ex,set,rollback,only,if,possible,throw,ex,catch,error,err,set,rollback,only,if,possible,throw,err,finally,this,before,completion,called,true,this,spring,synchronization,before,completion
SpringJtaSynchronizationAdapter -> @Override 	public void beforeCompletion();1498780456;JTA {@code beforeCompletion} callback: just invoked before commit._<p>In case of an exception, the JTA transaction will be marked as rollback-only._@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit;@Override_	public void beforeCompletion() {_		try {_			boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__			this.springSynchronization.beforeCommit(readOnly)__		}_		catch (RuntimeException ex) {_			setRollbackOnlyIfPossible()__			throw ex__		}_		catch (Error err) {_			setRollbackOnlyIfPossible()__			throw err__		}_		finally {_			_			_			_			this.beforeCompletionCalled = true__			this.springSynchronization.beforeCompletion()__		}_	};jta,code,before,completion,callback,just,invoked,before,commit,p,in,case,of,an,exception,the,jta,transaction,will,be,marked,as,rollback,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit;override,public,void,before,completion,try,boolean,read,only,transaction,synchronization,manager,is,current,transaction,read,only,this,spring,synchronization,before,commit,read,only,catch,runtime,exception,ex,set,rollback,only,if,possible,throw,ex,catch,error,err,set,rollback,only,if,possible,throw,err,finally,this,before,completion,called,true,this,spring,synchronization,before,completion
SpringJtaSynchronizationAdapter -> @Override 	public void beforeCompletion();1545727613;JTA {@code beforeCompletion} callback: just invoked before commit._<p>In case of an exception, the JTA transaction will be marked as rollback-only._@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit;@Override_	public void beforeCompletion() {_		try {_			boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__			this.springSynchronization.beforeCommit(readOnly)__		}_		catch (RuntimeException | Error ex) {_			setRollbackOnlyIfPossible()__			throw ex__		}_		finally {_			_			_			_			this.beforeCompletionCalled = true__			this.springSynchronization.beforeCompletion()__		}_	};jta,code,before,completion,callback,just,invoked,before,commit,p,in,case,of,an,exception,the,jta,transaction,will,be,marked,as,rollback,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit;override,public,void,before,completion,try,boolean,read,only,transaction,synchronization,manager,is,current,transaction,read,only,this,spring,synchronization,before,commit,read,only,catch,runtime,exception,error,ex,set,rollback,only,if,possible,throw,ex,finally,this,before,completion,called,true,this,spring,synchronization,before,completion
