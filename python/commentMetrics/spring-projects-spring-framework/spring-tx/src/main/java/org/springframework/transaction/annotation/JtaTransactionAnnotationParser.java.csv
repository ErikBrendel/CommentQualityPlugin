commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override @Nullable public TransactionAttribute parseTransactionAnnotation(AnnotatedElement element) {     AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(element, javax.transaction.Transactional.class).     if (attributes != null) {         return parseTransactionAnnotation(attributes).     } else {         return null.     } }
false;public;1;3;;public TransactionAttribute parseTransactionAnnotation(javax.transaction.Transactional ann) {     return parseTransactionAnnotation(AnnotationUtils.getAnnotationAttributes(ann, false, false)). }
false;protected;1;17;;protected TransactionAttribute parseTransactionAnnotation(AnnotationAttributes attributes) {     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     rbta.setPropagationBehaviorName(RuleBasedTransactionAttribute.PREFIX_PROPAGATION + attributes.getEnum("value").toString()).     List<RollbackRuleAttribute> rollbackRules = new ArrayList<>().     for (Class<?> rbRule : attributes.getClassArray("rollbackOn")) {         rollbackRules.add(new RollbackRuleAttribute(rbRule)).     }     for (Class<?> rbRule : attributes.getClassArray("dontRollbackOn")) {         rollbackRules.add(new NoRollbackRuleAttribute(rbRule)).     }     rbta.setRollbackRules(rollbackRules).     return rbta. }
false;public;1;4;;@Override public boolean equals(Object other) {     return (this == other || other instanceof JtaTransactionAnnotationParser). }
false;public;0;4;;@Override public int hashCode() {     return JtaTransactionAnnotationParser.class.hashCode(). }
