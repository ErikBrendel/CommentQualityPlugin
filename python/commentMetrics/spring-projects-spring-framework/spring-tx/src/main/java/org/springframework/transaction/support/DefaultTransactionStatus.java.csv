# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultTransactionStatus -> public boolean isTransactionSavepointManager();1328020251;Return whether the underlying transaction implements the_SavepointManager interface._@see #getTransaction_@see org.springframework.transaction.SavepointManager;public boolean isTransactionSavepointManager() {_		return (getTransaction() instanceof SavepointManager)__	};return,whether,the,underlying,transaction,implements,the,savepoint,manager,interface,see,get,transaction,see,org,springframework,transaction,savepoint,manager;public,boolean,is,transaction,savepoint,manager,return,get,transaction,instanceof,savepoint,manager
DefaultTransactionStatus -> public boolean isTransactionSavepointManager();1356735495;Return whether the underlying transaction implements the_SavepointManager interface._@see #getTransaction_@see org.springframework.transaction.SavepointManager;public boolean isTransactionSavepointManager() {_		return (getTransaction() instanceof SavepointManager)__	};return,whether,the,underlying,transaction,implements,the,savepoint,manager,interface,see,get,transaction,see,org,springframework,transaction,savepoint,manager;public,boolean,is,transaction,savepoint,manager,return,get,transaction,instanceof,savepoint,manager
DefaultTransactionStatus -> public boolean isTransactionSavepointManager();1357119239;Return whether the underlying transaction implements the_SavepointManager interface._@see #getTransaction_@see org.springframework.transaction.SavepointManager;public boolean isTransactionSavepointManager() {_		return (getTransaction() instanceof SavepointManager)__	};return,whether,the,underlying,transaction,implements,the,savepoint,manager,interface,see,get,transaction,see,org,springframework,transaction,savepoint,manager;public,boolean,is,transaction,savepoint,manager,return,get,transaction,instanceof,savepoint,manager
DefaultTransactionStatus -> public boolean isTransactionSavepointManager();1368482696;Return whether the underlying transaction implements the_SavepointManager interface._@see #getTransaction_@see org.springframework.transaction.SavepointManager;public boolean isTransactionSavepointManager() {_		return (getTransaction() instanceof SavepointManager)__	};return,whether,the,underlying,transaction,implements,the,savepoint,manager,interface,see,get,transaction,see,org,springframework,transaction,savepoint,manager;public,boolean,is,transaction,savepoint,manager,return,get,transaction,instanceof,savepoint,manager
DefaultTransactionStatus -> public boolean isTransactionSavepointManager();1495868221;Return whether the underlying transaction implements the_SavepointManager interface._@see #getTransaction_@see org.springframework.transaction.SavepointManager;public boolean isTransactionSavepointManager() {_		return (getTransaction() instanceof SavepointManager)__	};return,whether,the,underlying,transaction,implements,the,savepoint,manager,interface,see,get,transaction,see,org,springframework,transaction,savepoint,manager;public,boolean,is,transaction,savepoint,manager,return,get,transaction,instanceof,savepoint,manager
DefaultTransactionStatus -> public boolean isTransactionSavepointManager();1496837955;Return whether the underlying transaction implements the_SavepointManager interface._@see #getTransaction_@see org.springframework.transaction.SavepointManager;public boolean isTransactionSavepointManager() {_		return (this.transaction instanceof SavepointManager)__	};return,whether,the,underlying,transaction,implements,the,savepoint,manager,interface,see,get,transaction,see,org,springframework,transaction,savepoint,manager;public,boolean,is,transaction,savepoint,manager,return,this,transaction,instanceof,savepoint,manager
DefaultTransactionStatus -> public boolean isTransactionSavepointManager();1498780456;Return whether the underlying transaction implements the_SavepointManager interface._@see #getTransaction_@see org.springframework.transaction.SavepointManager;public boolean isTransactionSavepointManager() {_		return (this.transaction instanceof SavepointManager)__	};return,whether,the,underlying,transaction,implements,the,savepoint,manager,interface,see,get,transaction,see,org,springframework,transaction,savepoint,manager;public,boolean,is,transaction,savepoint,manager,return,this,transaction,instanceof,savepoint,manager
DefaultTransactionStatus -> public boolean isTransactionSavepointManager();1533908746;Return whether the underlying transaction implements the_SavepointManager interface._@see #getTransaction_@see org.springframework.transaction.SavepointManager;public boolean isTransactionSavepointManager() {_		return (this.transaction instanceof SavepointManager)__	};return,whether,the,underlying,transaction,implements,the,savepoint,manager,interface,see,get,transaction,see,org,springframework,transaction,savepoint,manager;public,boolean,is,transaction,savepoint,manager,return,this,transaction,instanceof,savepoint,manager
DefaultTransactionStatus -> public boolean isTransactionSavepointManager();1533921824;Return whether the underlying transaction implements the {@link SavepointManager}_interface and therefore supports savepoints._@see #getTransaction()_@see #getSavepointManager();public boolean isTransactionSavepointManager() {_		return (this.transaction instanceof SavepointManager)__	};return,whether,the,underlying,transaction,implements,the,link,savepoint,manager,interface,and,therefore,supports,savepoints,see,get,transaction,see,get,savepoint,manager;public,boolean,is,transaction,savepoint,manager,return,this,transaction,instanceof,savepoint,manager
DefaultTransactionStatus -> @Override 	public boolean isGlobalRollbackOnly();1328020251;Determine the rollback-only flag via checking both the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface._<p>Will return "true" if the transaction itself has been marked rollback-only_by the transaction coordinator, for example in case of a timeout._@see SmartTransactionObject#isRollbackOnly;@Override_	public boolean isGlobalRollbackOnly() {_		return ((this.transaction instanceof SmartTransactionObject) &&_				((SmartTransactionObject) this.transaction).isRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface,p,will,return,true,if,the,transaction,itself,has,been,marked,rollback,only,by,the,transaction,coordinator,for,example,in,case,of,a,timeout,see,smart,transaction,object,is,rollback,only;override,public,boolean,is,global,rollback,only,return,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,is,rollback,only
DefaultTransactionStatus -> @Override 	public boolean isGlobalRollbackOnly();1356735495;Determine the rollback-only flag via checking both the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface._<p>Will return "true" if the transaction itself has been marked rollback-only_by the transaction coordinator, for example in case of a timeout._@see SmartTransactionObject#isRollbackOnly;@Override_	public boolean isGlobalRollbackOnly() {_		return ((this.transaction instanceof SmartTransactionObject) &&_				((SmartTransactionObject) this.transaction).isRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface,p,will,return,true,if,the,transaction,itself,has,been,marked,rollback,only,by,the,transaction,coordinator,for,example,in,case,of,a,timeout,see,smart,transaction,object,is,rollback,only;override,public,boolean,is,global,rollback,only,return,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,is,rollback,only
DefaultTransactionStatus -> @Override 	public boolean isGlobalRollbackOnly();1357119239;Determine the rollback-only flag via checking both the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface._<p>Will return "true" if the transaction itself has been marked rollback-only_by the transaction coordinator, for example in case of a timeout._@see SmartTransactionObject#isRollbackOnly;@Override_	public boolean isGlobalRollbackOnly() {_		return ((this.transaction instanceof SmartTransactionObject) &&_				((SmartTransactionObject) this.transaction).isRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface,p,will,return,true,if,the,transaction,itself,has,been,marked,rollback,only,by,the,transaction,coordinator,for,example,in,case,of,a,timeout,see,smart,transaction,object,is,rollback,only;override,public,boolean,is,global,rollback,only,return,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,is,rollback,only
DefaultTransactionStatus -> @Override 	public boolean isGlobalRollbackOnly();1368482696;Determine the rollback-only flag via checking both the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface._<p>Will return "true" if the transaction itself has been marked rollback-only_by the transaction coordinator, for example in case of a timeout._@see SmartTransactionObject#isRollbackOnly;@Override_	public boolean isGlobalRollbackOnly() {_		return ((this.transaction instanceof SmartTransactionObject) &&_				((SmartTransactionObject) this.transaction).isRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface,p,will,return,true,if,the,transaction,itself,has,been,marked,rollback,only,by,the,transaction,coordinator,for,example,in,case,of,a,timeout,see,smart,transaction,object,is,rollback,only;override,public,boolean,is,global,rollback,only,return,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,is,rollback,only
DefaultTransactionStatus -> @Override 	public boolean isGlobalRollbackOnly();1495868221;Determine the rollback-only flag via checking both the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface._<p>Will return "true" if the transaction itself has been marked rollback-only_by the transaction coordinator, for example in case of a timeout._@see SmartTransactionObject#isRollbackOnly;@Override_	public boolean isGlobalRollbackOnly() {_		return ((this.transaction instanceof SmartTransactionObject) &&_				((SmartTransactionObject) this.transaction).isRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface,p,will,return,true,if,the,transaction,itself,has,been,marked,rollback,only,by,the,transaction,coordinator,for,example,in,case,of,a,timeout,see,smart,transaction,object,is,rollback,only;override,public,boolean,is,global,rollback,only,return,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,is,rollback,only
DefaultTransactionStatus -> @Override 	public boolean isGlobalRollbackOnly();1496837955;Determine the rollback-only flag via checking both the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface._<p>Will return "true" if the transaction itself has been marked rollback-only_by the transaction coordinator, for example in case of a timeout._@see SmartTransactionObject#isRollbackOnly;@Override_	public boolean isGlobalRollbackOnly() {_		return ((this.transaction instanceof SmartTransactionObject) &&_				((SmartTransactionObject) this.transaction).isRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface,p,will,return,true,if,the,transaction,itself,has,been,marked,rollback,only,by,the,transaction,coordinator,for,example,in,case,of,a,timeout,see,smart,transaction,object,is,rollback,only;override,public,boolean,is,global,rollback,only,return,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,is,rollback,only
DefaultTransactionStatus -> @Override 	public boolean isGlobalRollbackOnly();1498780456;Determine the rollback-only flag via checking both the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface._<p>Will return "true" if the transaction itself has been marked rollback-only_by the transaction coordinator, for example in case of a timeout._@see SmartTransactionObject#isRollbackOnly;@Override_	public boolean isGlobalRollbackOnly() {_		return ((this.transaction instanceof SmartTransactionObject) &&_				((SmartTransactionObject) this.transaction).isRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface,p,will,return,true,if,the,transaction,itself,has,been,marked,rollback,only,by,the,transaction,coordinator,for,example,in,case,of,a,timeout,see,smart,transaction,object,is,rollback,only;override,public,boolean,is,global,rollback,only,return,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,is,rollback,only
DefaultTransactionStatus -> @Override 	public boolean isGlobalRollbackOnly();1533908746;Determine the rollback-only flag via checking both the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface._<p>Will return "true" if the transaction itself has been marked rollback-only_by the transaction coordinator, for example in case of a timeout._@see SmartTransactionObject#isRollbackOnly;@Override_	public boolean isGlobalRollbackOnly() {_		return ((this.transaction instanceof SmartTransactionObject) &&_				((SmartTransactionObject) this.transaction).isRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface,p,will,return,true,if,the,transaction,itself,has,been,marked,rollback,only,by,the,transaction,coordinator,for,example,in,case,of,a,timeout,see,smart,transaction,object,is,rollback,only;override,public,boolean,is,global,rollback,only,return,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,is,rollback,only
DefaultTransactionStatus -> @Override 	public boolean isGlobalRollbackOnly();1533921824;Determine the rollback-only flag via checking the transaction object, provided_that the latter implements the {@link SmartTransactionObject} interface._<p>Will return {@code true} if the global transaction itself has been marked_rollback-only by the transaction coordinator, for example in case of a timeout._@see SmartTransactionObject#isRollbackOnly();@Override_	public boolean isGlobalRollbackOnly() {_		return ((this.transaction instanceof SmartTransactionObject) &&_				((SmartTransactionObject) this.transaction).isRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface,p,will,return,code,true,if,the,global,transaction,itself,has,been,marked,rollback,only,by,the,transaction,coordinator,for,example,in,case,of,a,timeout,see,smart,transaction,object,is,rollback,only;override,public,boolean,is,global,rollback,only,return,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,is,rollback,only
DefaultTransactionStatus -> public Object getTransaction();1328020251;Return the underlying transaction object.;public Object getTransaction() {_		return this.transaction__	};return,the,underlying,transaction,object;public,object,get,transaction,return,this,transaction
DefaultTransactionStatus -> public Object getTransaction();1356735495;Return the underlying transaction object.;public Object getTransaction() {_		return this.transaction__	};return,the,underlying,transaction,object;public,object,get,transaction,return,this,transaction
DefaultTransactionStatus -> public Object getTransaction();1357119239;Return the underlying transaction object.;public Object getTransaction() {_		return this.transaction__	};return,the,underlying,transaction,object;public,object,get,transaction,return,this,transaction
DefaultTransactionStatus -> public Object getTransaction();1368482696;Return the underlying transaction object.;public Object getTransaction() {_		return this.transaction__	};return,the,underlying,transaction,object;public,object,get,transaction,return,this,transaction
DefaultTransactionStatus -> public Object getTransaction();1495868221;Return the underlying transaction object.;public Object getTransaction() {_		return this.transaction__	};return,the,underlying,transaction,object;public,object,get,transaction,return,this,transaction
DefaultTransactionStatus -> public Object getTransaction();1496837955;Return the underlying transaction object._@throws IllegalStateException if no transaction is active;public Object getTransaction() {_		Assert.state(this.transaction != null, "No transaction active")__		return this.transaction__	};return,the,underlying,transaction,object,throws,illegal,state,exception,if,no,transaction,is,active;public,object,get,transaction,assert,state,this,transaction,null,no,transaction,active,return,this,transaction
DefaultTransactionStatus -> public Object getTransaction();1498780456;Return the underlying transaction object._@throws IllegalStateException if no transaction is active;public Object getTransaction() {_		Assert.state(this.transaction != null, "No transaction active")__		return this.transaction__	};return,the,underlying,transaction,object,throws,illegal,state,exception,if,no,transaction,is,active;public,object,get,transaction,assert,state,this,transaction,null,no,transaction,active,return,this,transaction
DefaultTransactionStatus -> public Object getTransaction();1533908746;Return the underlying transaction object._@throws IllegalStateException if no transaction is active;public Object getTransaction() {_		Assert.state(this.transaction != null, "No transaction active")__		return this.transaction__	};return,the,underlying,transaction,object,throws,illegal,state,exception,if,no,transaction,is,active;public,object,get,transaction,assert,state,this,transaction,null,no,transaction,active,return,this,transaction
DefaultTransactionStatus -> public Object getTransaction();1533921824;Return the underlying transaction object._@throws IllegalStateException if no transaction is active;public Object getTransaction() {_		Assert.state(this.transaction != null, "No transaction active")__		return this.transaction__	};return,the,underlying,transaction,object,throws,illegal,state,exception,if,no,transaction,is,active;public,object,get,transaction,assert,state,this,transaction,null,no,transaction,active,return,this,transaction
DefaultTransactionStatus -> public boolean isNewSynchronization();1328020251;Return if a new transaction synchronization has been opened_for this transaction.;public boolean isNewSynchronization() {_		return this.newSynchronization__	};return,if,a,new,transaction,synchronization,has,been,opened,for,this,transaction;public,boolean,is,new,synchronization,return,this,new,synchronization
DefaultTransactionStatus -> public boolean isNewSynchronization();1356735495;Return if a new transaction synchronization has been opened_for this transaction.;public boolean isNewSynchronization() {_		return this.newSynchronization__	};return,if,a,new,transaction,synchronization,has,been,opened,for,this,transaction;public,boolean,is,new,synchronization,return,this,new,synchronization
DefaultTransactionStatus -> public boolean isNewSynchronization();1357119239;Return if a new transaction synchronization has been opened_for this transaction.;public boolean isNewSynchronization() {_		return this.newSynchronization__	};return,if,a,new,transaction,synchronization,has,been,opened,for,this,transaction;public,boolean,is,new,synchronization,return,this,new,synchronization
DefaultTransactionStatus -> public boolean isNewSynchronization();1368482696;Return if a new transaction synchronization has been opened_for this transaction.;public boolean isNewSynchronization() {_		return this.newSynchronization__	};return,if,a,new,transaction,synchronization,has,been,opened,for,this,transaction;public,boolean,is,new,synchronization,return,this,new,synchronization
DefaultTransactionStatus -> public boolean isNewSynchronization();1495868221;Return if a new transaction synchronization has been opened_for this transaction.;public boolean isNewSynchronization() {_		return this.newSynchronization__	};return,if,a,new,transaction,synchronization,has,been,opened,for,this,transaction;public,boolean,is,new,synchronization,return,this,new,synchronization
DefaultTransactionStatus -> public boolean isNewSynchronization();1496837955;Return if a new transaction synchronization has been opened_for this transaction.;public boolean isNewSynchronization() {_		return this.newSynchronization__	};return,if,a,new,transaction,synchronization,has,been,opened,for,this,transaction;public,boolean,is,new,synchronization,return,this,new,synchronization
DefaultTransactionStatus -> public boolean isNewSynchronization();1498780456;Return if a new transaction synchronization has been opened_for this transaction.;public boolean isNewSynchronization() {_		return this.newSynchronization__	};return,if,a,new,transaction,synchronization,has,been,opened,for,this,transaction;public,boolean,is,new,synchronization,return,this,new,synchronization
DefaultTransactionStatus -> public boolean isNewSynchronization();1533908746;Return if a new transaction synchronization has been opened_for this transaction.;public boolean isNewSynchronization() {_		return this.newSynchronization__	};return,if,a,new,transaction,synchronization,has,been,opened,for,this,transaction;public,boolean,is,new,synchronization,return,this,new,synchronization
DefaultTransactionStatus -> public boolean isNewSynchronization();1533921824;Return if a new transaction synchronization has been opened_for this transaction.;public boolean isNewSynchronization() {_		return this.newSynchronization__	};return,if,a,new,transaction,synchronization,has,been,opened,for,this,transaction;public,boolean,is,new,synchronization,return,this,new,synchronization
DefaultTransactionStatus -> @Nullable 	public Object getSuspendedResources();1495868221;Return the holder for resources that have been suspended for this transaction,_if any.;@Nullable_	public Object getSuspendedResources() {_		return this.suspendedResources__	};return,the,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;nullable,public,object,get,suspended,resources,return,this,suspended,resources
DefaultTransactionStatus -> @Nullable 	public Object getSuspendedResources();1496837955;Return the holder for resources that have been suspended for this transaction,_if any.;@Nullable_	public Object getSuspendedResources() {_		return this.suspendedResources__	};return,the,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;nullable,public,object,get,suspended,resources,return,this,suspended,resources
DefaultTransactionStatus -> @Nullable 	public Object getSuspendedResources();1498780456;Return the holder for resources that have been suspended for this transaction,_if any.;@Nullable_	public Object getSuspendedResources() {_		return this.suspendedResources__	};return,the,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;nullable,public,object,get,suspended,resources,return,this,suspended,resources
DefaultTransactionStatus -> @Nullable 	public Object getSuspendedResources();1533908746;Return the holder for resources that have been suspended for this transaction,_if any.;@Nullable_	public Object getSuspendedResources() {_		return this.suspendedResources__	};return,the,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;nullable,public,object,get,suspended,resources,return,this,suspended,resources
DefaultTransactionStatus -> @Nullable 	public Object getSuspendedResources();1533921824;Return the holder for resources that have been suspended for this transaction,_if any.;@Nullable_	public Object getSuspendedResources() {_		return this.suspendedResources__	};return,the,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;nullable,public,object,get,suspended,resources,return,this,suspended,resources
DefaultTransactionStatus -> public DefaultTransactionStatus( 			Object transaction, boolean newTransaction, boolean newSynchronization, 			boolean readOnly, boolean debug, Object suspendedResources);1328020251;Create a new DefaultTransactionStatus instance._@param transaction underlying transaction object that can hold_state for the internal transaction implementation_@param newTransaction if the transaction is new,_else participating in an existing transaction_@param newSynchronization if a new transaction synchronization_has been opened for the given transaction_@param readOnly whether the transaction is read-only_@param debug should debug logging be enabled for the handling of this transaction?_Caching it in here can prevent repeated calls to ask the logging system whether_debug logging should be enabled._@param suspendedResources a holder for resources that have been suspended_for this transaction, if any;public DefaultTransactionStatus(_			Object transaction, boolean newTransaction, boolean newSynchronization,_			boolean readOnly, boolean debug, Object suspendedResources) {__		this.transaction = transaction__		this.newTransaction = newTransaction__		this.newSynchronization = newSynchronization__		this.readOnly = readOnly__		this.debug = debug__		this.suspendedResources = suspendedResources__	};create,a,new,default,transaction,status,instance,param,transaction,underlying,transaction,object,that,can,hold,state,for,the,internal,transaction,implementation,param,new,transaction,if,the,transaction,is,new,else,participating,in,an,existing,transaction,param,new,synchronization,if,a,new,transaction,synchronization,has,been,opened,for,the,given,transaction,param,read,only,whether,the,transaction,is,read,only,param,debug,should,debug,logging,be,enabled,for,the,handling,of,this,transaction,caching,it,in,here,can,prevent,repeated,calls,to,ask,the,logging,system,whether,debug,logging,should,be,enabled,param,suspended,resources,a,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;public,default,transaction,status,object,transaction,boolean,new,transaction,boolean,new,synchronization,boolean,read,only,boolean,debug,object,suspended,resources,this,transaction,transaction,this,new,transaction,new,transaction,this,new,synchronization,new,synchronization,this,read,only,read,only,this,debug,debug,this,suspended,resources,suspended,resources
DefaultTransactionStatus -> public DefaultTransactionStatus( 			Object transaction, boolean newTransaction, boolean newSynchronization, 			boolean readOnly, boolean debug, Object suspendedResources);1356735495;Create a new DefaultTransactionStatus instance._@param transaction underlying transaction object that can hold_state for the internal transaction implementation_@param newTransaction if the transaction is new,_else participating in an existing transaction_@param newSynchronization if a new transaction synchronization_has been opened for the given transaction_@param readOnly whether the transaction is read-only_@param debug should debug logging be enabled for the handling of this transaction?_Caching it in here can prevent repeated calls to ask the logging system whether_debug logging should be enabled._@param suspendedResources a holder for resources that have been suspended_for this transaction, if any;public DefaultTransactionStatus(_			Object transaction, boolean newTransaction, boolean newSynchronization,_			boolean readOnly, boolean debug, Object suspendedResources) {__		this.transaction = transaction__		this.newTransaction = newTransaction__		this.newSynchronization = newSynchronization__		this.readOnly = readOnly__		this.debug = debug__		this.suspendedResources = suspendedResources__	};create,a,new,default,transaction,status,instance,param,transaction,underlying,transaction,object,that,can,hold,state,for,the,internal,transaction,implementation,param,new,transaction,if,the,transaction,is,new,else,participating,in,an,existing,transaction,param,new,synchronization,if,a,new,transaction,synchronization,has,been,opened,for,the,given,transaction,param,read,only,whether,the,transaction,is,read,only,param,debug,should,debug,logging,be,enabled,for,the,handling,of,this,transaction,caching,it,in,here,can,prevent,repeated,calls,to,ask,the,logging,system,whether,debug,logging,should,be,enabled,param,suspended,resources,a,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;public,default,transaction,status,object,transaction,boolean,new,transaction,boolean,new,synchronization,boolean,read,only,boolean,debug,object,suspended,resources,this,transaction,transaction,this,new,transaction,new,transaction,this,new,synchronization,new,synchronization,this,read,only,read,only,this,debug,debug,this,suspended,resources,suspended,resources
DefaultTransactionStatus -> public DefaultTransactionStatus( 			Object transaction, boolean newTransaction, boolean newSynchronization, 			boolean readOnly, boolean debug, Object suspendedResources);1357119239;Create a new DefaultTransactionStatus instance._@param transaction underlying transaction object that can hold_state for the internal transaction implementation_@param newTransaction if the transaction is new,_else participating in an existing transaction_@param newSynchronization if a new transaction synchronization_has been opened for the given transaction_@param readOnly whether the transaction is read-only_@param debug should debug logging be enabled for the handling of this transaction?_Caching it in here can prevent repeated calls to ask the logging system whether_debug logging should be enabled._@param suspendedResources a holder for resources that have been suspended_for this transaction, if any;public DefaultTransactionStatus(_			Object transaction, boolean newTransaction, boolean newSynchronization,_			boolean readOnly, boolean debug, Object suspendedResources) {__		this.transaction = transaction__		this.newTransaction = newTransaction__		this.newSynchronization = newSynchronization__		this.readOnly = readOnly__		this.debug = debug__		this.suspendedResources = suspendedResources__	};create,a,new,default,transaction,status,instance,param,transaction,underlying,transaction,object,that,can,hold,state,for,the,internal,transaction,implementation,param,new,transaction,if,the,transaction,is,new,else,participating,in,an,existing,transaction,param,new,synchronization,if,a,new,transaction,synchronization,has,been,opened,for,the,given,transaction,param,read,only,whether,the,transaction,is,read,only,param,debug,should,debug,logging,be,enabled,for,the,handling,of,this,transaction,caching,it,in,here,can,prevent,repeated,calls,to,ask,the,logging,system,whether,debug,logging,should,be,enabled,param,suspended,resources,a,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;public,default,transaction,status,object,transaction,boolean,new,transaction,boolean,new,synchronization,boolean,read,only,boolean,debug,object,suspended,resources,this,transaction,transaction,this,new,transaction,new,transaction,this,new,synchronization,new,synchronization,this,read,only,read,only,this,debug,debug,this,suspended,resources,suspended,resources
DefaultTransactionStatus -> public DefaultTransactionStatus( 			Object transaction, boolean newTransaction, boolean newSynchronization, 			boolean readOnly, boolean debug, Object suspendedResources);1368482696;Create a new DefaultTransactionStatus instance._@param transaction underlying transaction object that can hold_state for the internal transaction implementation_@param newTransaction if the transaction is new,_else participating in an existing transaction_@param newSynchronization if a new transaction synchronization_has been opened for the given transaction_@param readOnly whether the transaction is read-only_@param debug should debug logging be enabled for the handling of this transaction?_Caching it in here can prevent repeated calls to ask the logging system whether_debug logging should be enabled._@param suspendedResources a holder for resources that have been suspended_for this transaction, if any;public DefaultTransactionStatus(_			Object transaction, boolean newTransaction, boolean newSynchronization,_			boolean readOnly, boolean debug, Object suspendedResources) {__		this.transaction = transaction__		this.newTransaction = newTransaction__		this.newSynchronization = newSynchronization__		this.readOnly = readOnly__		this.debug = debug__		this.suspendedResources = suspendedResources__	};create,a,new,default,transaction,status,instance,param,transaction,underlying,transaction,object,that,can,hold,state,for,the,internal,transaction,implementation,param,new,transaction,if,the,transaction,is,new,else,participating,in,an,existing,transaction,param,new,synchronization,if,a,new,transaction,synchronization,has,been,opened,for,the,given,transaction,param,read,only,whether,the,transaction,is,read,only,param,debug,should,debug,logging,be,enabled,for,the,handling,of,this,transaction,caching,it,in,here,can,prevent,repeated,calls,to,ask,the,logging,system,whether,debug,logging,should,be,enabled,param,suspended,resources,a,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;public,default,transaction,status,object,transaction,boolean,new,transaction,boolean,new,synchronization,boolean,read,only,boolean,debug,object,suspended,resources,this,transaction,transaction,this,new,transaction,new,transaction,this,new,synchronization,new,synchronization,this,read,only,read,only,this,debug,debug,this,suspended,resources,suspended,resources
DefaultTransactionStatus -> @Override 	protected SavepointManager getSavepointManager();1328020251;This implementation exposes the SavepointManager interface_of the underlying transaction object, if any.;@Override_	protected SavepointManager getSavepointManager() {_		if (!isTransactionSavepointManager()) {_			throw new NestedTransactionNotSupportedException(_			    "Transaction object [" + getTransaction() + "] does not support savepoints")__		}_		return (SavepointManager) getTransaction()__	};this,implementation,exposes,the,savepoint,manager,interface,of,the,underlying,transaction,object,if,any;override,protected,savepoint,manager,get,savepoint,manager,if,is,transaction,savepoint,manager,throw,new,nested,transaction,not,supported,exception,transaction,object,get,transaction,does,not,support,savepoints,return,savepoint,manager,get,transaction
DefaultTransactionStatus -> @Override 	protected SavepointManager getSavepointManager();1356735495;This implementation exposes the SavepointManager interface_of the underlying transaction object, if any.;@Override_	protected SavepointManager getSavepointManager() {_		if (!isTransactionSavepointManager()) {_			throw new NestedTransactionNotSupportedException(_				"Transaction object [" + getTransaction() + "] does not support savepoints")__		}_		return (SavepointManager) getTransaction()__	};this,implementation,exposes,the,savepoint,manager,interface,of,the,underlying,transaction,object,if,any;override,protected,savepoint,manager,get,savepoint,manager,if,is,transaction,savepoint,manager,throw,new,nested,transaction,not,supported,exception,transaction,object,get,transaction,does,not,support,savepoints,return,savepoint,manager,get,transaction
DefaultTransactionStatus -> @Override 	protected SavepointManager getSavepointManager();1357119239;This implementation exposes the SavepointManager interface_of the underlying transaction object, if any.;@Override_	protected SavepointManager getSavepointManager() {_		if (!isTransactionSavepointManager()) {_			throw new NestedTransactionNotSupportedException(_				"Transaction object [" + getTransaction() + "] does not support savepoints")__		}_		return (SavepointManager) getTransaction()__	};this,implementation,exposes,the,savepoint,manager,interface,of,the,underlying,transaction,object,if,any;override,protected,savepoint,manager,get,savepoint,manager,if,is,transaction,savepoint,manager,throw,new,nested,transaction,not,supported,exception,transaction,object,get,transaction,does,not,support,savepoints,return,savepoint,manager,get,transaction
DefaultTransactionStatus -> @Override 	protected SavepointManager getSavepointManager();1368482696;This implementation exposes the SavepointManager interface_of the underlying transaction object, if any.;@Override_	protected SavepointManager getSavepointManager() {_		if (!isTransactionSavepointManager()) {_			throw new NestedTransactionNotSupportedException(_				"Transaction object [" + getTransaction() + "] does not support savepoints")__		}_		return (SavepointManager) getTransaction()__	};this,implementation,exposes,the,savepoint,manager,interface,of,the,underlying,transaction,object,if,any;override,protected,savepoint,manager,get,savepoint,manager,if,is,transaction,savepoint,manager,throw,new,nested,transaction,not,supported,exception,transaction,object,get,transaction,does,not,support,savepoints,return,savepoint,manager,get,transaction
DefaultTransactionStatus -> @Override 	protected SavepointManager getSavepointManager();1495868221;This implementation exposes the SavepointManager interface_of the underlying transaction object, if any.;@Override_	protected SavepointManager getSavepointManager() {_		if (!isTransactionSavepointManager()) {_			throw new NestedTransactionNotSupportedException(_				"Transaction object [" + getTransaction() + "] does not support savepoints")__		}_		return (SavepointManager) getTransaction()__	};this,implementation,exposes,the,savepoint,manager,interface,of,the,underlying,transaction,object,if,any;override,protected,savepoint,manager,get,savepoint,manager,if,is,transaction,savepoint,manager,throw,new,nested,transaction,not,supported,exception,transaction,object,get,transaction,does,not,support,savepoints,return,savepoint,manager,get,transaction
DefaultTransactionStatus -> @Override 	protected SavepointManager getSavepointManager();1496837955;This implementation exposes the SavepointManager interface_of the underlying transaction object, if any.;@Override_	protected SavepointManager getSavepointManager() {_		Object transaction = this.transaction__		if (!(transaction instanceof SavepointManager)) {_			throw new NestedTransactionNotSupportedException(_				"Transaction object [" + this.transaction + "] does not support savepoints")__		}_		return (SavepointManager) transaction__	};this,implementation,exposes,the,savepoint,manager,interface,of,the,underlying,transaction,object,if,any;override,protected,savepoint,manager,get,savepoint,manager,object,transaction,this,transaction,if,transaction,instanceof,savepoint,manager,throw,new,nested,transaction,not,supported,exception,transaction,object,this,transaction,does,not,support,savepoints,return,savepoint,manager,transaction
DefaultTransactionStatus -> @Override 	protected SavepointManager getSavepointManager();1498780456;This implementation exposes the SavepointManager interface_of the underlying transaction object, if any.;@Override_	protected SavepointManager getSavepointManager() {_		Object transaction = this.transaction__		if (!(transaction instanceof SavepointManager)) {_			throw new NestedTransactionNotSupportedException(_				"Transaction object [" + this.transaction + "] does not support savepoints")__		}_		return (SavepointManager) transaction__	};this,implementation,exposes,the,savepoint,manager,interface,of,the,underlying,transaction,object,if,any;override,protected,savepoint,manager,get,savepoint,manager,object,transaction,this,transaction,if,transaction,instanceof,savepoint,manager,throw,new,nested,transaction,not,supported,exception,transaction,object,this,transaction,does,not,support,savepoints,return,savepoint,manager,transaction
DefaultTransactionStatus -> @Override 	protected SavepointManager getSavepointManager();1533908746;This implementation exposes the SavepointManager interface_of the underlying transaction object, if any.;@Override_	protected SavepointManager getSavepointManager() {_		Object transaction = this.transaction__		if (!(transaction instanceof SavepointManager)) {_			throw new NestedTransactionNotSupportedException(_				"Transaction object [" + this.transaction + "] does not support savepoints")__		}_		return (SavepointManager) transaction__	};this,implementation,exposes,the,savepoint,manager,interface,of,the,underlying,transaction,object,if,any;override,protected,savepoint,manager,get,savepoint,manager,object,transaction,this,transaction,if,transaction,instanceof,savepoint,manager,throw,new,nested,transaction,not,supported,exception,transaction,object,this,transaction,does,not,support,savepoints,return,savepoint,manager,transaction
DefaultTransactionStatus -> @Override 	protected SavepointManager getSavepointManager();1533921824;This implementation exposes the {@link SavepointManager} interface_of the underlying transaction object, if any._@throws NestedTransactionNotSupportedException if savepoints are not supported_@see #isTransactionSavepointManager();@Override_	protected SavepointManager getSavepointManager() {_		Object transaction = this.transaction__		if (!(transaction instanceof SavepointManager)) {_			throw new NestedTransactionNotSupportedException(_					"Transaction object [" + this.transaction + "] does not support savepoints")__		}_		return (SavepointManager) transaction__	};this,implementation,exposes,the,link,savepoint,manager,interface,of,the,underlying,transaction,object,if,any,throws,nested,transaction,not,supported,exception,if,savepoints,are,not,supported,see,is,transaction,savepoint,manager;override,protected,savepoint,manager,get,savepoint,manager,object,transaction,this,transaction,if,transaction,instanceof,savepoint,manager,throw,new,nested,transaction,not,supported,exception,transaction,object,this,transaction,does,not,support,savepoints,return,savepoint,manager,transaction
DefaultTransactionStatus -> public Object getSuspendedResources();1328020251;Return the holder for resources that have been suspended for this transaction,_if any.;public Object getSuspendedResources() {_		return this.suspendedResources__	};return,the,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;public,object,get,suspended,resources,return,this,suspended,resources
DefaultTransactionStatus -> public Object getSuspendedResources();1356735495;Return the holder for resources that have been suspended for this transaction,_if any.;public Object getSuspendedResources() {_		return this.suspendedResources__	};return,the,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;public,object,get,suspended,resources,return,this,suspended,resources
DefaultTransactionStatus -> public Object getSuspendedResources();1357119239;Return the holder for resources that have been suspended for this transaction,_if any.;public Object getSuspendedResources() {_		return this.suspendedResources__	};return,the,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;public,object,get,suspended,resources,return,this,suspended,resources
DefaultTransactionStatus -> public Object getSuspendedResources();1368482696;Return the holder for resources that have been suspended for this transaction,_if any.;public Object getSuspendedResources() {_		return this.suspendedResources__	};return,the,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;public,object,get,suspended,resources,return,this,suspended,resources
DefaultTransactionStatus -> @Override 	public void flush();1328020251;Delegate the flushing to the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface.;@Override_	public void flush() {_		if (this.transaction instanceof SmartTransactionObject) {_			((SmartTransactionObject) this.transaction).flush()__		}_	};delegate,the,flushing,to,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface;override,public,void,flush,if,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,flush
DefaultTransactionStatus -> @Override 	public void flush();1356735495;Delegate the flushing to the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface.;@Override_	public void flush() {_		if (this.transaction instanceof SmartTransactionObject) {_			((SmartTransactionObject) this.transaction).flush()__		}_	};delegate,the,flushing,to,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface;override,public,void,flush,if,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,flush
DefaultTransactionStatus -> @Override 	public void flush();1357119239;Delegate the flushing to the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface.;@Override_	public void flush() {_		if (this.transaction instanceof SmartTransactionObject) {_			((SmartTransactionObject) this.transaction).flush()__		}_	};delegate,the,flushing,to,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface;override,public,void,flush,if,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,flush
DefaultTransactionStatus -> @Override 	public void flush();1368482696;Delegate the flushing to the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface.;@Override_	public void flush() {_		if (this.transaction instanceof SmartTransactionObject) {_			((SmartTransactionObject) this.transaction).flush()__		}_	};delegate,the,flushing,to,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface;override,public,void,flush,if,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,flush
DefaultTransactionStatus -> @Override 	public void flush();1495868221;Delegate the flushing to the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface.;@Override_	public void flush() {_		if (this.transaction instanceof SmartTransactionObject) {_			((SmartTransactionObject) this.transaction).flush()__		}_	};delegate,the,flushing,to,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface;override,public,void,flush,if,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,flush
DefaultTransactionStatus -> @Override 	public void flush();1496837955;Delegate the flushing to the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface.;@Override_	public void flush() {_		if (this.transaction instanceof SmartTransactionObject) {_			((SmartTransactionObject) this.transaction).flush()__		}_	};delegate,the,flushing,to,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface;override,public,void,flush,if,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,flush
DefaultTransactionStatus -> @Override 	public void flush();1498780456;Delegate the flushing to the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface.;@Override_	public void flush() {_		if (this.transaction instanceof SmartTransactionObject) {_			((SmartTransactionObject) this.transaction).flush()__		}_	};delegate,the,flushing,to,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface;override,public,void,flush,if,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,flush
DefaultTransactionStatus -> @Override 	public void flush();1533908746;Delegate the flushing to the transaction object,_provided that the latter implements the {@link SmartTransactionObject} interface.;@Override_	public void flush() {_		if (this.transaction instanceof SmartTransactionObject) {_			((SmartTransactionObject) this.transaction).flush()__		}_	};delegate,the,flushing,to,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface;override,public,void,flush,if,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,flush
DefaultTransactionStatus -> @Override 	public void flush();1533921824;Delegate the flushing to the transaction object, provided that the latter_implements the {@link SmartTransactionObject} interface._@see SmartTransactionObject#flush();@Override_	public void flush() {_		if (this.transaction instanceof SmartTransactionObject) {_			((SmartTransactionObject) this.transaction).flush()__		}_	};delegate,the,flushing,to,the,transaction,object,provided,that,the,latter,implements,the,link,smart,transaction,object,interface,see,smart,transaction,object,flush;override,public,void,flush,if,this,transaction,instanceof,smart,transaction,object,smart,transaction,object,this,transaction,flush
DefaultTransactionStatus -> public boolean isReadOnly();1328020251;Return if this transaction is defined as read-only transaction.;public boolean isReadOnly() {_		return this.readOnly__	};return,if,this,transaction,is,defined,as,read,only,transaction;public,boolean,is,read,only,return,this,read,only
DefaultTransactionStatus -> public boolean isReadOnly();1356735495;Return if this transaction is defined as read-only transaction.;public boolean isReadOnly() {_		return this.readOnly__	};return,if,this,transaction,is,defined,as,read,only,transaction;public,boolean,is,read,only,return,this,read,only
DefaultTransactionStatus -> public boolean isReadOnly();1357119239;Return if this transaction is defined as read-only transaction.;public boolean isReadOnly() {_		return this.readOnly__	};return,if,this,transaction,is,defined,as,read,only,transaction;public,boolean,is,read,only,return,this,read,only
DefaultTransactionStatus -> public boolean isReadOnly();1368482696;Return if this transaction is defined as read-only transaction.;public boolean isReadOnly() {_		return this.readOnly__	};return,if,this,transaction,is,defined,as,read,only,transaction;public,boolean,is,read,only,return,this,read,only
DefaultTransactionStatus -> public boolean isReadOnly();1495868221;Return if this transaction is defined as read-only transaction.;public boolean isReadOnly() {_		return this.readOnly__	};return,if,this,transaction,is,defined,as,read,only,transaction;public,boolean,is,read,only,return,this,read,only
DefaultTransactionStatus -> public boolean isReadOnly();1496837955;Return if this transaction is defined as read-only transaction.;public boolean isReadOnly() {_		return this.readOnly__	};return,if,this,transaction,is,defined,as,read,only,transaction;public,boolean,is,read,only,return,this,read,only
DefaultTransactionStatus -> public boolean isReadOnly();1498780456;Return if this transaction is defined as read-only transaction.;public boolean isReadOnly() {_		return this.readOnly__	};return,if,this,transaction,is,defined,as,read,only,transaction;public,boolean,is,read,only,return,this,read,only
DefaultTransactionStatus -> public boolean isReadOnly();1533908746;Return if this transaction is defined as read-only transaction.;public boolean isReadOnly() {_		return this.readOnly__	};return,if,this,transaction,is,defined,as,read,only,transaction;public,boolean,is,read,only,return,this,read,only
DefaultTransactionStatus -> public boolean isReadOnly();1533921824;Return if this transaction is defined as read-only transaction.;public boolean isReadOnly() {_		return this.readOnly__	};return,if,this,transaction,is,defined,as,read,only,transaction;public,boolean,is,read,only,return,this,read,only
DefaultTransactionStatus -> public DefaultTransactionStatus( 			@Nullable Object transaction, boolean newTransaction, boolean newSynchronization, 			boolean readOnly, boolean debug, @Nullable Object suspendedResources);1496837955;Create a new DefaultTransactionStatus instance._@param transaction underlying transaction object that can hold_state for the internal transaction implementation_@param newTransaction if the transaction is new,_else participating in an existing transaction_@param newSynchronization if a new transaction synchronization_has been opened for the given transaction_@param readOnly whether the transaction is read-only_@param debug should debug logging be enabled for the handling of this transaction?_Caching it in here can prevent repeated calls to ask the logging system whether_debug logging should be enabled._@param suspendedResources a holder for resources that have been suspended_for this transaction, if any;public DefaultTransactionStatus(_			@Nullable Object transaction, boolean newTransaction, boolean newSynchronization,_			boolean readOnly, boolean debug, @Nullable Object suspendedResources) {__		this.transaction = transaction__		this.newTransaction = newTransaction__		this.newSynchronization = newSynchronization__		this.readOnly = readOnly__		this.debug = debug__		this.suspendedResources = suspendedResources__	};create,a,new,default,transaction,status,instance,param,transaction,underlying,transaction,object,that,can,hold,state,for,the,internal,transaction,implementation,param,new,transaction,if,the,transaction,is,new,else,participating,in,an,existing,transaction,param,new,synchronization,if,a,new,transaction,synchronization,has,been,opened,for,the,given,transaction,param,read,only,whether,the,transaction,is,read,only,param,debug,should,debug,logging,be,enabled,for,the,handling,of,this,transaction,caching,it,in,here,can,prevent,repeated,calls,to,ask,the,logging,system,whether,debug,logging,should,be,enabled,param,suspended,resources,a,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;public,default,transaction,status,nullable,object,transaction,boolean,new,transaction,boolean,new,synchronization,boolean,read,only,boolean,debug,nullable,object,suspended,resources,this,transaction,transaction,this,new,transaction,new,transaction,this,new,synchronization,new,synchronization,this,read,only,read,only,this,debug,debug,this,suspended,resources,suspended,resources
DefaultTransactionStatus -> public DefaultTransactionStatus( 			@Nullable Object transaction, boolean newTransaction, boolean newSynchronization, 			boolean readOnly, boolean debug, @Nullable Object suspendedResources);1498780456;Create a new DefaultTransactionStatus instance._@param transaction underlying transaction object that can hold_state for the internal transaction implementation_@param newTransaction if the transaction is new,_else participating in an existing transaction_@param newSynchronization if a new transaction synchronization_has been opened for the given transaction_@param readOnly whether the transaction is read-only_@param debug should debug logging be enabled for the handling of this transaction?_Caching it in here can prevent repeated calls to ask the logging system whether_debug logging should be enabled._@param suspendedResources a holder for resources that have been suspended_for this transaction, if any;public DefaultTransactionStatus(_			@Nullable Object transaction, boolean newTransaction, boolean newSynchronization,_			boolean readOnly, boolean debug, @Nullable Object suspendedResources) {__		this.transaction = transaction__		this.newTransaction = newTransaction__		this.newSynchronization = newSynchronization__		this.readOnly = readOnly__		this.debug = debug__		this.suspendedResources = suspendedResources__	};create,a,new,default,transaction,status,instance,param,transaction,underlying,transaction,object,that,can,hold,state,for,the,internal,transaction,implementation,param,new,transaction,if,the,transaction,is,new,else,participating,in,an,existing,transaction,param,new,synchronization,if,a,new,transaction,synchronization,has,been,opened,for,the,given,transaction,param,read,only,whether,the,transaction,is,read,only,param,debug,should,debug,logging,be,enabled,for,the,handling,of,this,transaction,caching,it,in,here,can,prevent,repeated,calls,to,ask,the,logging,system,whether,debug,logging,should,be,enabled,param,suspended,resources,a,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;public,default,transaction,status,nullable,object,transaction,boolean,new,transaction,boolean,new,synchronization,boolean,read,only,boolean,debug,nullable,object,suspended,resources,this,transaction,transaction,this,new,transaction,new,transaction,this,new,synchronization,new,synchronization,this,read,only,read,only,this,debug,debug,this,suspended,resources,suspended,resources
DefaultTransactionStatus -> public DefaultTransactionStatus( 			@Nullable Object transaction, boolean newTransaction, boolean newSynchronization, 			boolean readOnly, boolean debug, @Nullable Object suspendedResources);1533908746;Create a new DefaultTransactionStatus instance._@param transaction underlying transaction object that can hold_state for the internal transaction implementation_@param newTransaction if the transaction is new,_else participating in an existing transaction_@param newSynchronization if a new transaction synchronization_has been opened for the given transaction_@param readOnly whether the transaction is read-only_@param debug should debug logging be enabled for the handling of this transaction?_Caching it in here can prevent repeated calls to ask the logging system whether_debug logging should be enabled._@param suspendedResources a holder for resources that have been suspended_for this transaction, if any;public DefaultTransactionStatus(_			@Nullable Object transaction, boolean newTransaction, boolean newSynchronization,_			boolean readOnly, boolean debug, @Nullable Object suspendedResources) {__		this.transaction = transaction__		this.newTransaction = newTransaction__		this.newSynchronization = newSynchronization__		this.readOnly = readOnly__		this.debug = debug__		this.suspendedResources = suspendedResources__	};create,a,new,default,transaction,status,instance,param,transaction,underlying,transaction,object,that,can,hold,state,for,the,internal,transaction,implementation,param,new,transaction,if,the,transaction,is,new,else,participating,in,an,existing,transaction,param,new,synchronization,if,a,new,transaction,synchronization,has,been,opened,for,the,given,transaction,param,read,only,whether,the,transaction,is,read,only,param,debug,should,debug,logging,be,enabled,for,the,handling,of,this,transaction,caching,it,in,here,can,prevent,repeated,calls,to,ask,the,logging,system,whether,debug,logging,should,be,enabled,param,suspended,resources,a,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;public,default,transaction,status,nullable,object,transaction,boolean,new,transaction,boolean,new,synchronization,boolean,read,only,boolean,debug,nullable,object,suspended,resources,this,transaction,transaction,this,new,transaction,new,transaction,this,new,synchronization,new,synchronization,this,read,only,read,only,this,debug,debug,this,suspended,resources,suspended,resources
DefaultTransactionStatus -> public DefaultTransactionStatus( 			@Nullable Object transaction, boolean newTransaction, boolean newSynchronization, 			boolean readOnly, boolean debug, @Nullable Object suspendedResources);1533921824;Create a new {@code DefaultTransactionStatus} instance._@param transaction underlying transaction object that can hold state_for the internal transaction implementation_@param newTransaction if the transaction is new, otherwise participating_in an existing transaction_@param newSynchronization if a new transaction synchronization has been_opened for the given transaction_@param readOnly whether the transaction is marked as read-only_@param debug should debug logging be enabled for the handling of this transaction?_Caching it in here can prevent repeated calls to ask the logging system whether_debug logging should be enabled._@param suspendedResources a holder for resources that have been suspended_for this transaction, if any;public DefaultTransactionStatus(_			@Nullable Object transaction, boolean newTransaction, boolean newSynchronization,_			boolean readOnly, boolean debug, @Nullable Object suspendedResources) {__		this.transaction = transaction__		this.newTransaction = newTransaction__		this.newSynchronization = newSynchronization__		this.readOnly = readOnly__		this.debug = debug__		this.suspendedResources = suspendedResources__	};create,a,new,code,default,transaction,status,instance,param,transaction,underlying,transaction,object,that,can,hold,state,for,the,internal,transaction,implementation,param,new,transaction,if,the,transaction,is,new,otherwise,participating,in,an,existing,transaction,param,new,synchronization,if,a,new,transaction,synchronization,has,been,opened,for,the,given,transaction,param,read,only,whether,the,transaction,is,marked,as,read,only,param,debug,should,debug,logging,be,enabled,for,the,handling,of,this,transaction,caching,it,in,here,can,prevent,repeated,calls,to,ask,the,logging,system,whether,debug,logging,should,be,enabled,param,suspended,resources,a,holder,for,resources,that,have,been,suspended,for,this,transaction,if,any;public,default,transaction,status,nullable,object,transaction,boolean,new,transaction,boolean,new,synchronization,boolean,read,only,boolean,debug,nullable,object,suspended,resources,this,transaction,transaction,this,new,transaction,new,transaction,this,new,synchronization,new,synchronization,this,read,only,read,only,this,debug,debug,this,suspended,resources,suspended,resources
DefaultTransactionStatus -> public boolean hasTransaction();1328020251;Return whether there is an actual transaction active.;public boolean hasTransaction() {_		return (this.transaction != null)__	};return,whether,there,is,an,actual,transaction,active;public,boolean,has,transaction,return,this,transaction,null
DefaultTransactionStatus -> public boolean hasTransaction();1356735495;Return whether there is an actual transaction active.;public boolean hasTransaction() {_		return (this.transaction != null)__	};return,whether,there,is,an,actual,transaction,active;public,boolean,has,transaction,return,this,transaction,null
DefaultTransactionStatus -> public boolean hasTransaction();1357119239;Return whether there is an actual transaction active.;public boolean hasTransaction() {_		return (this.transaction != null)__	};return,whether,there,is,an,actual,transaction,active;public,boolean,has,transaction,return,this,transaction,null
DefaultTransactionStatus -> public boolean hasTransaction();1368482696;Return whether there is an actual transaction active.;public boolean hasTransaction() {_		return (this.transaction != null)__	};return,whether,there,is,an,actual,transaction,active;public,boolean,has,transaction,return,this,transaction,null
DefaultTransactionStatus -> public boolean hasTransaction();1495868221;Return whether there is an actual transaction active.;public boolean hasTransaction() {_		return (this.transaction != null)__	};return,whether,there,is,an,actual,transaction,active;public,boolean,has,transaction,return,this,transaction,null
DefaultTransactionStatus -> public boolean hasTransaction();1496837955;Return whether there is an actual transaction active.;public boolean hasTransaction() {_		return (this.transaction != null)__	};return,whether,there,is,an,actual,transaction,active;public,boolean,has,transaction,return,this,transaction,null
DefaultTransactionStatus -> public boolean hasTransaction();1498780456;Return whether there is an actual transaction active.;public boolean hasTransaction() {_		return (this.transaction != null)__	};return,whether,there,is,an,actual,transaction,active;public,boolean,has,transaction,return,this,transaction,null
DefaultTransactionStatus -> public boolean hasTransaction();1533908746;Return whether there is an actual transaction active.;public boolean hasTransaction() {_		return (this.transaction != null)__	};return,whether,there,is,an,actual,transaction,active;public,boolean,has,transaction,return,this,transaction,null
DefaultTransactionStatus -> public boolean hasTransaction();1533921824;Return whether there is an actual transaction active.;public boolean hasTransaction() {_		return (this.transaction != null)__	};return,whether,there,is,an,actual,transaction,active;public,boolean,has,transaction,return,this,transaction,null
DefaultTransactionStatus -> public boolean isDebug();1328020251;Return whether the progress of this transaction is debugged. This is used_by AbstractPlatformTransactionManager as an optimization, to prevent repeated_calls to logger.isDebug(). Not really intended for client code.;public boolean isDebug() {_		return this.debug__	};return,whether,the,progress,of,this,transaction,is,debugged,this,is,used,by,abstract,platform,transaction,manager,as,an,optimization,to,prevent,repeated,calls,to,logger,is,debug,not,really,intended,for,client,code;public,boolean,is,debug,return,this,debug
DefaultTransactionStatus -> public boolean isDebug();1356735495;Return whether the progress of this transaction is debugged. This is used_by AbstractPlatformTransactionManager as an optimization, to prevent repeated_calls to logger.isDebug(). Not really intended for client code.;public boolean isDebug() {_		return this.debug__	};return,whether,the,progress,of,this,transaction,is,debugged,this,is,used,by,abstract,platform,transaction,manager,as,an,optimization,to,prevent,repeated,calls,to,logger,is,debug,not,really,intended,for,client,code;public,boolean,is,debug,return,this,debug
DefaultTransactionStatus -> public boolean isDebug();1357119239;Return whether the progress of this transaction is debugged. This is used_by AbstractPlatformTransactionManager as an optimization, to prevent repeated_calls to logger.isDebug(). Not really intended for client code.;public boolean isDebug() {_		return this.debug__	};return,whether,the,progress,of,this,transaction,is,debugged,this,is,used,by,abstract,platform,transaction,manager,as,an,optimization,to,prevent,repeated,calls,to,logger,is,debug,not,really,intended,for,client,code;public,boolean,is,debug,return,this,debug
DefaultTransactionStatus -> public boolean isDebug();1368482696;Return whether the progress of this transaction is debugged. This is used_by AbstractPlatformTransactionManager as an optimization, to prevent repeated_calls to logger.isDebug(). Not really intended for client code.;public boolean isDebug() {_		return this.debug__	};return,whether,the,progress,of,this,transaction,is,debugged,this,is,used,by,abstract,platform,transaction,manager,as,an,optimization,to,prevent,repeated,calls,to,logger,is,debug,not,really,intended,for,client,code;public,boolean,is,debug,return,this,debug
DefaultTransactionStatus -> public boolean isDebug();1495868221;Return whether the progress of this transaction is debugged. This is used_by AbstractPlatformTransactionManager as an optimization, to prevent repeated_calls to logger.isDebug(). Not really intended for client code.;public boolean isDebug() {_		return this.debug__	};return,whether,the,progress,of,this,transaction,is,debugged,this,is,used,by,abstract,platform,transaction,manager,as,an,optimization,to,prevent,repeated,calls,to,logger,is,debug,not,really,intended,for,client,code;public,boolean,is,debug,return,this,debug
DefaultTransactionStatus -> public boolean isDebug();1496837955;Return whether the progress of this transaction is debugged. This is used_by AbstractPlatformTransactionManager as an optimization, to prevent repeated_calls to logger.isDebug(). Not really intended for client code.;public boolean isDebug() {_		return this.debug__	};return,whether,the,progress,of,this,transaction,is,debugged,this,is,used,by,abstract,platform,transaction,manager,as,an,optimization,to,prevent,repeated,calls,to,logger,is,debug,not,really,intended,for,client,code;public,boolean,is,debug,return,this,debug
DefaultTransactionStatus -> public boolean isDebug();1498780456;Return whether the progress of this transaction is debugged. This is used_by AbstractPlatformTransactionManager as an optimization, to prevent repeated_calls to logger.isDebug(). Not really intended for client code.;public boolean isDebug() {_		return this.debug__	};return,whether,the,progress,of,this,transaction,is,debugged,this,is,used,by,abstract,platform,transaction,manager,as,an,optimization,to,prevent,repeated,calls,to,logger,is,debug,not,really,intended,for,client,code;public,boolean,is,debug,return,this,debug
DefaultTransactionStatus -> public boolean isDebug();1533908746;Return whether the progress of this transaction is debugged. This is used_by AbstractPlatformTransactionManager as an optimization, to prevent repeated_calls to {@code logger.isDebug()}. Not really intended for client code.;public boolean isDebug() {_		return this.debug__	};return,whether,the,progress,of,this,transaction,is,debugged,this,is,used,by,abstract,platform,transaction,manager,as,an,optimization,to,prevent,repeated,calls,to,code,logger,is,debug,not,really,intended,for,client,code;public,boolean,is,debug,return,this,debug
DefaultTransactionStatus -> public boolean isDebug();1533921824;Return whether the progress of this transaction is debugged. This is used by_{@link AbstractPlatformTransactionManager} as an optimization, to prevent repeated_calls to {@code logger.isDebugEnabled()}. Not really intended for client code.;public boolean isDebug() {_		return this.debug__	};return,whether,the,progress,of,this,transaction,is,debugged,this,is,used,by,link,abstract,platform,transaction,manager,as,an,optimization,to,prevent,repeated,calls,to,code,logger,is,debug,enabled,not,really,intended,for,client,code;public,boolean,is,debug,return,this,debug
