# id;timestamp;commentText;codeText;commentWords;codeWords
DataAccessUtils -> public static long longResult(Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1385412762;Return a unique long result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertable to a long._@param results the result Collection (can be {@code null})_@return the unique long result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertable to a long;public static long longResult(Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).longValue()__	};return,a,unique,long,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertable,to,a,long,param,results,the,result,collection,can,be,code,null,return,the,unique,long,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertable,to,a,long;public,static,long,long,result,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,long,value
DataAccessUtils -> public static long longResult(Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1432125256;Return a unique long result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertable to a long._@param results the result Collection (can be {@code null})_@return the unique long result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertable to a long;public static long longResult(Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).longValue()__	};return,a,unique,long,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertable,to,a,long,param,results,the,result,collection,can,be,code,null,return,the,unique,long,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertable,to,a,long;public,static,long,long,result,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,long,value
DataAccessUtils -> public static long longResult(Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1473796721;Return a unique long result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to a long._@param results the result Collection (can be {@code null})_@return the unique long result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to a long;public static long longResult(Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).longValue()__	};return,a,unique,long,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,a,long,param,results,the,result,collection,can,be,code,null,return,the,unique,long,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,a,long;public,static,long,long,result,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,long,value
DataAccessUtils -> public static <T> T singleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1328020251;Return a single result object from the given Collection._<p>Returns <code>null</code> if 0 result objects found__throws an exception if more than 1 element found._@param results the result Collection (can be <code>null</code>)_@return the single result object, or <code>null</code> if none_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection;public static <T> T singleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,returns,code,null,code,if,0,result,objects,found,throws,an,exception,if,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,code,return,the,single,result,object,or,code,null,code,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection;public,static,t,t,single,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T singleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1356735495;Return a single result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection;public static <T> T singleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection;public,static,t,t,single,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T singleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1385412762;Return a single result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection;public static <T> T singleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection;public,static,t,t,single,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T singleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1432125256;Return a single result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection;public static <T> T singleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection;public,static,t,t,single,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T singleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1473796721;Return a single result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection;public static <T> T singleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection;public,static,t,t,single,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T singleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1496837955;Return a single result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection;@Nullable_	public static <T> T singleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection;nullable,public,static,t,t,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T singleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1502974979;Return a single result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection;@Nullable_	public static <T> T singleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection;nullable,public,static,t,t,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T singleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1511712999;Return a single result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection;@Nullable_	public static <T> T singleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		if (CollectionUtils.isEmpty(results)) {_			return null__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection;nullable,public,static,t,t,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,return,null,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T singleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1530174524;Return a single result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection;@Nullable_	public static <T> T singleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		if (CollectionUtils.isEmpty(results)) {_			return null__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection;nullable,public,static,t,t,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,return,null,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T singleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1531144424;Return a single result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection;@Nullable_	public static <T> T singleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		if (CollectionUtils.isEmpty(results)) {_			return null__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection;nullable,public,static,t,t,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,return,null,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> public static <T> T uniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1328020251;Return a unique result object from the given Collection._<p>Returns <code>null</code> if 0 result objects found__throws an exception if more than 1 instance found._@param results the result Collection (can be <code>null</code>)_@return the unique result object, or <code>null</code> if none_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T uniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,returns,code,null,code,if,0,result,objects,found,throws,an,exception,if,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,code,return,the,unique,result,object,or,code,null,code,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,unique,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T uniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1356735495;Return a unique result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T uniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,unique,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T uniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1385412762;Return a unique result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T uniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,unique,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T uniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1432125256;Return a unique result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T uniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,unique,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T uniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1473796721;Return a unique result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T uniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,unique,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> @SuppressWarnings("unchecked") 	public static <T> T objectResult(Collection<?> results, Class<T> requiredType) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1328020251;Return a unique result object from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertable to the_specified required type._@param results the result Collection (can be <code>null</code>)_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object does_not match the specified required type;@SuppressWarnings("unchecked")_	public static <T> T objectResult(Collection<?> results, Class<T> requiredType)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		Object result = requiredUniqueResult(results)__		if (requiredType != null && !requiredType.isInstance(result)) {_			if (String.class.equals(requiredType)) {_				result = result.toString()__			}_			else if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) {_				try {_					result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)__				}_				catch (IllegalArgumentException ex) {_					throw new TypeMismatchDataAccessException(ex.getMessage())__				}_			}_			else {_				throw new TypeMismatchDataAccessException(_						"Result object is of type [" + result.getClass().getName() +_						"] and could not be converted to required type [" + requiredType.getName() + "]")__			}_		}_		return (T) result__	};return,a,unique,result,object,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertable,to,the,specified,required,type,param,results,the,result,collection,can,be,code,null,code,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,does,not,match,the,specified,required,type;suppress,warnings,unchecked,public,static,t,t,object,result,collection,results,class,t,required,type,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,object,result,required,unique,result,results,if,required,type,null,required,type,is,instance,result,if,string,class,equals,required,type,result,result,to,string,else,if,number,class,is,assignable,from,required,type,number,class,is,instance,result,try,result,number,utils,convert,number,to,target,class,number,result,class,extends,number,required,type,catch,illegal,argument,exception,ex,throw,new,type,mismatch,data,access,exception,ex,get,message,else,throw,new,type,mismatch,data,access,exception,result,object,is,of,type,result,get,class,get,name,and,could,not,be,converted,to,required,type,required,type,get,name,return,t,result
DataAccessUtils -> @SuppressWarnings("unchecked") 	public static <T> T objectResult(Collection<?> results, Class<T> requiredType) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1356735495;Return a unique result object from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertable to the_specified required type._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object does_not match the specified required type;@SuppressWarnings("unchecked")_	public static <T> T objectResult(Collection<?> results, Class<T> requiredType)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		Object result = requiredUniqueResult(results)__		if (requiredType != null && !requiredType.isInstance(result)) {_			if (String.class.equals(requiredType)) {_				result = result.toString()__			}_			else if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) {_				try {_					result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)__				}_				catch (IllegalArgumentException ex) {_					throw new TypeMismatchDataAccessException(ex.getMessage())__				}_			}_			else {_				throw new TypeMismatchDataAccessException(_						"Result object is of type [" + result.getClass().getName() +_						"] and could not be converted to required type [" + requiredType.getName() + "]")__			}_		}_		return (T) result__	};return,a,unique,result,object,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertable,to,the,specified,required,type,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,does,not,match,the,specified,required,type;suppress,warnings,unchecked,public,static,t,t,object,result,collection,results,class,t,required,type,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,object,result,required,unique,result,results,if,required,type,null,required,type,is,instance,result,if,string,class,equals,required,type,result,result,to,string,else,if,number,class,is,assignable,from,required,type,number,class,is,instance,result,try,result,number,utils,convert,number,to,target,class,number,result,class,extends,number,required,type,catch,illegal,argument,exception,ex,throw,new,type,mismatch,data,access,exception,ex,get,message,else,throw,new,type,mismatch,data,access,exception,result,object,is,of,type,result,get,class,get,name,and,could,not,be,converted,to,required,type,required,type,get,name,return,t,result
DataAccessUtils -> @SuppressWarnings("unchecked") 	public static <T> T objectResult(Collection<?> results, Class<T> requiredType) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1385412762;Return a unique result object from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertable to the_specified required type._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object does_not match the specified required type;@SuppressWarnings("unchecked")_	public static <T> T objectResult(Collection<?> results, Class<T> requiredType)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		Object result = requiredUniqueResult(results)__		if (requiredType != null && !requiredType.isInstance(result)) {_			if (String.class.equals(requiredType)) {_				result = result.toString()__			}_			else if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) {_				try {_					result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)__				}_				catch (IllegalArgumentException ex) {_					throw new TypeMismatchDataAccessException(ex.getMessage())__				}_			}_			else {_				throw new TypeMismatchDataAccessException(_						"Result object is of type [" + result.getClass().getName() +_						"] and could not be converted to required type [" + requiredType.getName() + "]")__			}_		}_		return (T) result__	};return,a,unique,result,object,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertable,to,the,specified,required,type,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,does,not,match,the,specified,required,type;suppress,warnings,unchecked,public,static,t,t,object,result,collection,results,class,t,required,type,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,object,result,required,unique,result,results,if,required,type,null,required,type,is,instance,result,if,string,class,equals,required,type,result,result,to,string,else,if,number,class,is,assignable,from,required,type,number,class,is,instance,result,try,result,number,utils,convert,number,to,target,class,number,result,class,extends,number,required,type,catch,illegal,argument,exception,ex,throw,new,type,mismatch,data,access,exception,ex,get,message,else,throw,new,type,mismatch,data,access,exception,result,object,is,of,type,result,get,class,get,name,and,could,not,be,converted,to,required,type,required,type,get,name,return,t,result
DataAccessUtils -> @SuppressWarnings("unchecked") 	public static <T> T objectResult(Collection<?> results, Class<T> requiredType) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1432125256;Return a unique result object from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertable to the_specified required type._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object does_not match the specified required type;@SuppressWarnings("unchecked")_	public static <T> T objectResult(Collection<?> results, Class<T> requiredType)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		Object result = requiredUniqueResult(results)__		if (requiredType != null && !requiredType.isInstance(result)) {_			if (String.class == requiredType) {_				result = result.toString()__			}_			else if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) {_				try {_					result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)__				}_				catch (IllegalArgumentException ex) {_					throw new TypeMismatchDataAccessException(ex.getMessage())__				}_			}_			else {_				throw new TypeMismatchDataAccessException(_						"Result object is of type [" + result.getClass().getName() +_						"] and could not be converted to required type [" + requiredType.getName() + "]")__			}_		}_		return (T) result__	};return,a,unique,result,object,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertable,to,the,specified,required,type,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,does,not,match,the,specified,required,type;suppress,warnings,unchecked,public,static,t,t,object,result,collection,results,class,t,required,type,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,object,result,required,unique,result,results,if,required,type,null,required,type,is,instance,result,if,string,class,required,type,result,result,to,string,else,if,number,class,is,assignable,from,required,type,number,class,is,instance,result,try,result,number,utils,convert,number,to,target,class,number,result,class,extends,number,required,type,catch,illegal,argument,exception,ex,throw,new,type,mismatch,data,access,exception,ex,get,message,else,throw,new,type,mismatch,data,access,exception,result,object,is,of,type,result,get,class,get,name,and,could,not,be,converted,to,required,type,required,type,get,name,return,t,result
DataAccessUtils -> @SuppressWarnings("unchecked") 	public static <T> T objectResult(Collection<?> results, Class<T> requiredType) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1473796721;Return a unique result object from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to the_specified required type._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object does_not match the specified required type;@SuppressWarnings("unchecked")_	public static <T> T objectResult(Collection<?> results, Class<T> requiredType)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		Object result = requiredUniqueResult(results)__		if (requiredType != null && !requiredType.isInstance(result)) {_			if (String.class == requiredType) {_				result = result.toString()__			}_			else if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) {_				try {_					result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)__				}_				catch (IllegalArgumentException ex) {_					throw new TypeMismatchDataAccessException(ex.getMessage())__				}_			}_			else {_				throw new TypeMismatchDataAccessException(_						"Result object is of type [" + result.getClass().getName() +_						"] and could not be converted to required type [" + requiredType.getName() + "]")__			}_		}_		return (T) result__	};return,a,unique,result,object,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,the,specified,required,type,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,does,not,match,the,specified,required,type;suppress,warnings,unchecked,public,static,t,t,object,result,collection,results,class,t,required,type,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,object,result,required,unique,result,results,if,required,type,null,required,type,is,instance,result,if,string,class,required,type,result,result,to,string,else,if,number,class,is,assignable,from,required,type,number,class,is,instance,result,try,result,number,utils,convert,number,to,target,class,number,result,class,extends,number,required,type,catch,illegal,argument,exception,ex,throw,new,type,mismatch,data,access,exception,ex,get,message,else,throw,new,type,mismatch,data,access,exception,result,object,is,of,type,result,get,class,get,name,and,could,not,be,converted,to,required,type,required,type,get,name,return,t,result
DataAccessUtils -> public static int intResult(Collection results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1328020251;Return a unique int result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertable to an int._@param results the result Collection (can be <code>null</code>)_@return the unique int result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertable to an int;public static int intResult(Collection results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).intValue()__	};return,a,unique,int,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertable,to,an,int,param,results,the,result,collection,can,be,code,null,code,return,the,unique,int,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertable,to,an,int;public,static,int,int,result,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,int,value
DataAccessUtils -> public static int intResult(Collection results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1356735495;Return a unique int result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertable to an int._@param results the result Collection (can be {@code null})_@return the unique int result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertable to an int;public static int intResult(Collection results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).intValue()__	};return,a,unique,int,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertable,to,an,int,param,results,the,result,collection,can,be,code,null,return,the,unique,int,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertable,to,an,int;public,static,int,int,result,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,int,value
DataAccessUtils -> public static long longResult(@Nullable Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1495868221;Return a unique long result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to a long._@param results the result Collection (can be {@code null})_@return the unique long result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to a long;public static long longResult(@Nullable Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).longValue()__	};return,a,unique,long,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,a,long,param,results,the,result,collection,can,be,code,null,return,the,unique,long,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,a,long;public,static,long,long,result,nullable,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,long,value
DataAccessUtils -> public static long longResult(@Nullable Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1496837955;Return a unique long result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to a long._@param results the result Collection (can be {@code null})_@return the unique long result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to a long;public static long longResult(@Nullable Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).longValue()__	};return,a,unique,long,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,a,long,param,results,the,result,collection,can,be,code,null,return,the,unique,long,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,a,long;public,static,long,long,result,nullable,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,long,value
DataAccessUtils -> public static long longResult(@Nullable Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1502974979;Return a unique long result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to a long._@param results the result Collection (can be {@code null})_@return the unique long result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to a long;public static long longResult(@Nullable Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).longValue()__	};return,a,unique,long,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,a,long,param,results,the,result,collection,can,be,code,null,return,the,unique,long,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,a,long;public,static,long,long,result,nullable,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,long,value
DataAccessUtils -> public static long longResult(@Nullable Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1511712999;Return a unique long result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to a long._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the unique long result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to a long;public static long longResult(@Nullable Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).longValue()__	};return,a,unique,long,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,a,long,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,unique,long,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,a,long;public,static,long,long,result,nullable,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,long,value
DataAccessUtils -> public static long longResult(@Nullable Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1530174524;Return a unique long result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to a long._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the unique long result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to a long;public static long longResult(@Nullable Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).longValue()__	};return,a,unique,long,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,a,long,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,unique,long,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,a,long;public,static,long,long,result,nullable,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,long,value
DataAccessUtils -> public static long longResult(@Nullable Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1531144424;Return a unique long result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to a long._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the unique long result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to a long;public static long longResult(@Nullable Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).longValue()__	};return,a,unique,long,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,a,long,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,unique,long,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,a,long;public,static,long,long,result,nullable,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,long,value
DataAccessUtils -> @Nullable 	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1495868221;Return a unique result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;@Nullable_	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;nullable,public,static,t,t,unique,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1496837955;Return a unique result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;@Nullable_	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;nullable,public,static,t,t,unique,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1502974979;Return a unique result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;@Nullable_	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			return null__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;nullable,public,static,t,t,unique,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,return,null,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1511712999;Return a unique result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;@Nullable_	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		if (CollectionUtils.isEmpty(results)) {_			return null__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;nullable,public,static,t,t,unique,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,return,null,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1530174524;Return a unique result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;@Nullable_	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		if (CollectionUtils.isEmpty(results)) {_			return null__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;nullable,public,static,t,t,unique,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,return,null,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1531144424;Return a unique result object from the given Collection._<p>Returns {@code null} if 0 result objects found__throws an exception if more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object, or {@code null} if none_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;@Nullable_	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		if (CollectionUtils.isEmpty(results)) {_			return null__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,returns,code,null,if,0,result,objects,found,throws,an,exception,if,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,or,code,null,if,none,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;nullable,public,static,t,t,unique,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,return,null,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> @SuppressWarnings("unchecked") 	public static <T> T objectResult(@Nullable Collection<?> results, @Nullable Class<T> requiredType) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1496837955;Return a unique result object from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to the_specified required type._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object does_not match the specified required type;@SuppressWarnings("unchecked")_	public static <T> T objectResult(@Nullable Collection<?> results, @Nullable Class<T> requiredType)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		Object result = requiredUniqueResult(results)__		if (requiredType != null && !requiredType.isInstance(result)) {_			if (String.class == requiredType) {_				result = result.toString()__			}_			else if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) {_				try {_					result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)__				}_				catch (IllegalArgumentException ex) {_					throw new TypeMismatchDataAccessException(ex.getMessage())__				}_			}_			else {_				throw new TypeMismatchDataAccessException(_						"Result object is of type [" + result.getClass().getName() +_						"] and could not be converted to required type [" + requiredType.getName() + "]")__			}_		}_		return (T) result__	};return,a,unique,result,object,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,the,specified,required,type,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,does,not,match,the,specified,required,type;suppress,warnings,unchecked,public,static,t,t,object,result,nullable,collection,results,nullable,class,t,required,type,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,object,result,required,unique,result,results,if,required,type,null,required,type,is,instance,result,if,string,class,required,type,result,result,to,string,else,if,number,class,is,assignable,from,required,type,number,class,is,instance,result,try,result,number,utils,convert,number,to,target,class,number,result,class,extends,number,required,type,catch,illegal,argument,exception,ex,throw,new,type,mismatch,data,access,exception,ex,get,message,else,throw,new,type,mismatch,data,access,exception,result,object,is,of,type,result,get,class,get,name,and,could,not,be,converted,to,required,type,required,type,get,name,return,t,result
DataAccessUtils -> @SuppressWarnings("unchecked") 	public static <T> T objectResult(@Nullable Collection<?> results, @Nullable Class<T> requiredType) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1502974979;Return a unique result object from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to the_specified required type._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object does_not match the specified required type;@SuppressWarnings("unchecked")_	public static <T> T objectResult(@Nullable Collection<?> results, @Nullable Class<T> requiredType)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		Object result = requiredUniqueResult(results)__		if (requiredType != null && !requiredType.isInstance(result)) {_			if (String.class == requiredType) {_				result = result.toString()__			}_			else if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) {_				try {_					result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)__				}_				catch (IllegalArgumentException ex) {_					throw new TypeMismatchDataAccessException(ex.getMessage())__				}_			}_			else {_				throw new TypeMismatchDataAccessException(_						"Result object is of type [" + result.getClass().getName() +_						"] and could not be converted to required type [" + requiredType.getName() + "]")__			}_		}_		return (T) result__	};return,a,unique,result,object,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,the,specified,required,type,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,does,not,match,the,specified,required,type;suppress,warnings,unchecked,public,static,t,t,object,result,nullable,collection,results,nullable,class,t,required,type,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,object,result,required,unique,result,results,if,required,type,null,required,type,is,instance,result,if,string,class,required,type,result,result,to,string,else,if,number,class,is,assignable,from,required,type,number,class,is,instance,result,try,result,number,utils,convert,number,to,target,class,number,result,class,extends,number,required,type,catch,illegal,argument,exception,ex,throw,new,type,mismatch,data,access,exception,ex,get,message,else,throw,new,type,mismatch,data,access,exception,result,object,is,of,type,result,get,class,get,name,and,could,not,be,converted,to,required,type,required,type,get,name,return,t,result
DataAccessUtils -> @SuppressWarnings("unchecked") 	public static <T> T objectResult(@Nullable Collection<?> results, @Nullable Class<T> requiredType) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1511712999;Return a unique result object from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to the_specified required type._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object does_not match the specified required type;@SuppressWarnings("unchecked")_	public static <T> T objectResult(@Nullable Collection<?> results, @Nullable Class<T> requiredType)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		Object result = requiredUniqueResult(results)__		if (requiredType != null && !requiredType.isInstance(result)) {_			if (String.class == requiredType) {_				result = result.toString()__			}_			else if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) {_				try {_					result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)__				}_				catch (IllegalArgumentException ex) {_					throw new TypeMismatchDataAccessException(ex.getMessage())__				}_			}_			else {_				throw new TypeMismatchDataAccessException(_						"Result object is of type [" + result.getClass().getName() +_						"] and could not be converted to required type [" + requiredType.getName() + "]")__			}_		}_		return (T) result__	};return,a,unique,result,object,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,the,specified,required,type,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,does,not,match,the,specified,required,type;suppress,warnings,unchecked,public,static,t,t,object,result,nullable,collection,results,nullable,class,t,required,type,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,object,result,required,unique,result,results,if,required,type,null,required,type,is,instance,result,if,string,class,required,type,result,result,to,string,else,if,number,class,is,assignable,from,required,type,number,class,is,instance,result,try,result,number,utils,convert,number,to,target,class,number,result,class,extends,number,required,type,catch,illegal,argument,exception,ex,throw,new,type,mismatch,data,access,exception,ex,get,message,else,throw,new,type,mismatch,data,access,exception,result,object,is,of,type,result,get,class,get,name,and,could,not,be,converted,to,required,type,required,type,get,name,return,t,result
DataAccessUtils -> @SuppressWarnings("unchecked") 	public static <T> T objectResult(@Nullable Collection<?> results, @Nullable Class<T> requiredType) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1530174524;Return a unique result object from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to the_specified required type._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object does_not match the specified required type;@SuppressWarnings("unchecked")_	public static <T> T objectResult(@Nullable Collection<?> results, @Nullable Class<T> requiredType)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		Object result = requiredUniqueResult(results)__		if (requiredType != null && !requiredType.isInstance(result)) {_			if (String.class == requiredType) {_				result = result.toString()__			}_			else if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) {_				try {_					result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)__				}_				catch (IllegalArgumentException ex) {_					throw new TypeMismatchDataAccessException(ex.getMessage())__				}_			}_			else {_				throw new TypeMismatchDataAccessException(_						"Result object is of type [" + result.getClass().getName() +_						"] and could not be converted to required type [" + requiredType.getName() + "]")__			}_		}_		return (T) result__	};return,a,unique,result,object,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,the,specified,required,type,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,does,not,match,the,specified,required,type;suppress,warnings,unchecked,public,static,t,t,object,result,nullable,collection,results,nullable,class,t,required,type,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,object,result,required,unique,result,results,if,required,type,null,required,type,is,instance,result,if,string,class,required,type,result,result,to,string,else,if,number,class,is,assignable,from,required,type,number,class,is,instance,result,try,result,number,utils,convert,number,to,target,class,number,result,class,extends,number,required,type,catch,illegal,argument,exception,ex,throw,new,type,mismatch,data,access,exception,ex,get,message,else,throw,new,type,mismatch,data,access,exception,result,object,is,of,type,result,get,class,get,name,and,could,not,be,converted,to,required,type,required,type,get,name,return,t,result
DataAccessUtils -> @SuppressWarnings("unchecked") 	public static <T> T objectResult(@Nullable Collection<?> results, @Nullable Class<T> requiredType) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1531144424;Return a unique result object from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to the_specified required type._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object does_not match the specified required type;@SuppressWarnings("unchecked")_	public static <T> T objectResult(@Nullable Collection<?> results, @Nullable Class<T> requiredType)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		Object result = requiredUniqueResult(results)__		if (requiredType != null && !requiredType.isInstance(result)) {_			if (String.class == requiredType) {_				result = result.toString()__			}_			else if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) {_				try {_					result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)__				}_				catch (IllegalArgumentException ex) {_					throw new TypeMismatchDataAccessException(ex.getMessage())__				}_			}_			else {_				throw new TypeMismatchDataAccessException(_						"Result object is of type [" + result.getClass().getName() +_						"] and could not be converted to required type [" + requiredType.getName() + "]")__			}_		}_		return (T) result__	};return,a,unique,result,object,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,the,specified,required,type,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,does,not,match,the,specified,required,type;suppress,warnings,unchecked,public,static,t,t,object,result,nullable,collection,results,nullable,class,t,required,type,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,object,result,required,unique,result,results,if,required,type,null,required,type,is,instance,result,if,string,class,required,type,result,result,to,string,else,if,number,class,is,assignable,from,required,type,number,class,is,instance,result,try,result,number,utils,convert,number,to,target,class,number,result,class,extends,number,required,type,catch,illegal,argument,exception,ex,throw,new,type,mismatch,data,access,exception,ex,get,message,else,throw,new,type,mismatch,data,access,exception,result,object,is,of,type,result,get,class,get,name,and,could,not,be,converted,to,required,type,required,type,get,name,return,t,result
DataAccessUtils -> public static <T> T requiredUniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1328020251;Return a unique result object from the given Collection._<p>Throws an exception if 0 or more than 1 instance found._@param results the result Collection (can be <code>null</code>)_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object at all_has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T requiredUniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,code,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,required,unique,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredUniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1356735495;Return a unique result object from the given Collection._<p>Throws an exception if 0 or more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object at all_has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T requiredUniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,required,unique,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredUniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1385412762;Return a unique result object from the given Collection._<p>Throws an exception if 0 or more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object at all_has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T requiredUniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,required,unique,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredUniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1432125256;Return a unique result object from the given Collection._<p>Throws an exception if 0 or more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object at all_has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T requiredUniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,required,unique,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredUniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1473796721;Return a unique result object from the given Collection._<p>Throws an exception if 0 or more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object at all_has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T requiredUniqueResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,required,unique,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static long longResult(Collection results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1328020251;Return a unique long result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertable to a long._@param results the result Collection (can be <code>null</code>)_@return the unique long result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertable to a long;public static long longResult(Collection results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).longValue()__	};return,a,unique,long,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertable,to,a,long,param,results,the,result,collection,can,be,code,null,code,return,the,unique,long,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertable,to,a,long;public,static,long,long,result,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,long,value
DataAccessUtils -> public static long longResult(Collection results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1356735495;Return a unique long result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertable to a long._@param results the result Collection (can be {@code null})_@return the unique long result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertable to a long;public static long longResult(Collection results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).longValue()__	};return,a,unique,long,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertable,to,a,long,param,results,the,result,collection,can,be,code,null,return,the,unique,long,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertable,to,a,long;public,static,long,long,result,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,long,value
DataAccessUtils -> public static <T> T requiredSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1495868221;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection;public static <T> T requiredSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection;public,static,t,t,required,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1496837955;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection;public static <T> T requiredSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection;public,static,t,t,required,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1511712999;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection;public static <T> T requiredSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		if (CollectionUtils.isEmpty(results)) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection;public,static,t,t,required,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1530174524;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection;public static <T> T requiredSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		if (CollectionUtils.isEmpty(results)) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection;public,static,t,t,required,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1531144424;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection;public static <T> T requiredSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		if (CollectionUtils.isEmpty(results)) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection;public,static,t,t,required,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> public static RuntimeException translateIfNecessary( 			RuntimeException rawException, PersistenceExceptionTranslator pet);1328020251;Return a translated exception if this is appropriate,_otherwise return the input exception._@param rawException exception we may wish to translate_@param pet PersistenceExceptionTranslator to use to perform the translation_@return a translated exception if translation is possible, or_the raw exception if it is not;public static RuntimeException translateIfNecessary(_			RuntimeException rawException, PersistenceExceptionTranslator pet) {__		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		DataAccessException dex = pet.translateExceptionIfPossible(rawException)__		return (dex != null ? dex : rawException)__	};return,a,translated,exception,if,this,is,appropriate,otherwise,return,the,input,exception,param,raw,exception,exception,we,may,wish,to,translate,param,pet,persistence,exception,translator,to,use,to,perform,the,translation,return,a,translated,exception,if,translation,is,possible,or,the,raw,exception,if,it,is,not;public,static,runtime,exception,translate,if,necessary,runtime,exception,raw,exception,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,data,access,exception,dex,pet,translate,exception,if,possible,raw,exception,return,dex,null,dex,raw,exception
DataAccessUtils -> public static RuntimeException translateIfNecessary( 			RuntimeException rawException, PersistenceExceptionTranslator pet);1356735495;Return a translated exception if this is appropriate,_otherwise return the input exception._@param rawException exception we may wish to translate_@param pet PersistenceExceptionTranslator to use to perform the translation_@return a translated exception if translation is possible, or_the raw exception if it is not;public static RuntimeException translateIfNecessary(_			RuntimeException rawException, PersistenceExceptionTranslator pet) {__		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		DataAccessException dex = pet.translateExceptionIfPossible(rawException)__		return (dex != null ? dex : rawException)__	};return,a,translated,exception,if,this,is,appropriate,otherwise,return,the,input,exception,param,raw,exception,exception,we,may,wish,to,translate,param,pet,persistence,exception,translator,to,use,to,perform,the,translation,return,a,translated,exception,if,translation,is,possible,or,the,raw,exception,if,it,is,not;public,static,runtime,exception,translate,if,necessary,runtime,exception,raw,exception,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,data,access,exception,dex,pet,translate,exception,if,possible,raw,exception,return,dex,null,dex,raw,exception
DataAccessUtils -> public static RuntimeException translateIfNecessary( 			RuntimeException rawException, PersistenceExceptionTranslator pet);1385412762;Return a translated exception if this is appropriate,_otherwise return the input exception._@param rawException exception we may wish to translate_@param pet PersistenceExceptionTranslator to use to perform the translation_@return a translated exception if translation is possible, or_the raw exception if it is not;public static RuntimeException translateIfNecessary(_			RuntimeException rawException, PersistenceExceptionTranslator pet) {__		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		DataAccessException dex = pet.translateExceptionIfPossible(rawException)__		return (dex != null ? dex : rawException)__	};return,a,translated,exception,if,this,is,appropriate,otherwise,return,the,input,exception,param,raw,exception,exception,we,may,wish,to,translate,param,pet,persistence,exception,translator,to,use,to,perform,the,translation,return,a,translated,exception,if,translation,is,possible,or,the,raw,exception,if,it,is,not;public,static,runtime,exception,translate,if,necessary,runtime,exception,raw,exception,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,data,access,exception,dex,pet,translate,exception,if,possible,raw,exception,return,dex,null,dex,raw,exception
DataAccessUtils -> public static RuntimeException translateIfNecessary( 			RuntimeException rawException, PersistenceExceptionTranslator pet);1432125256;Return a translated exception if this is appropriate,_otherwise return the input exception._@param rawException exception we may wish to translate_@param pet PersistenceExceptionTranslator to use to perform the translation_@return a translated exception if translation is possible, or_the raw exception if it is not;public static RuntimeException translateIfNecessary(_			RuntimeException rawException, PersistenceExceptionTranslator pet) {__		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		DataAccessException dex = pet.translateExceptionIfPossible(rawException)__		return (dex != null ? dex : rawException)__	};return,a,translated,exception,if,this,is,appropriate,otherwise,return,the,input,exception,param,raw,exception,exception,we,may,wish,to,translate,param,pet,persistence,exception,translator,to,use,to,perform,the,translation,return,a,translated,exception,if,translation,is,possible,or,the,raw,exception,if,it,is,not;public,static,runtime,exception,translate,if,necessary,runtime,exception,raw,exception,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,data,access,exception,dex,pet,translate,exception,if,possible,raw,exception,return,dex,null,dex,raw,exception
DataAccessUtils -> public static RuntimeException translateIfNecessary( 			RuntimeException rawException, PersistenceExceptionTranslator pet);1473796721;Return a translated exception if this is appropriate,_otherwise return the input exception._@param rawException exception we may wish to translate_@param pet PersistenceExceptionTranslator to use to perform the translation_@return a translated exception if translation is possible, or_the raw exception if it is not;public static RuntimeException translateIfNecessary(_			RuntimeException rawException, PersistenceExceptionTranslator pet) {__		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		DataAccessException dex = pet.translateExceptionIfPossible(rawException)__		return (dex != null ? dex : rawException)__	};return,a,translated,exception,if,this,is,appropriate,otherwise,return,the,input,exception,param,raw,exception,exception,we,may,wish,to,translate,param,pet,persistence,exception,translator,to,use,to,perform,the,translation,return,a,translated,exception,if,translation,is,possible,or,the,raw,exception,if,it,is,not;public,static,runtime,exception,translate,if,necessary,runtime,exception,raw,exception,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,data,access,exception,dex,pet,translate,exception,if,possible,raw,exception,return,dex,null,dex,raw,exception
DataAccessUtils -> public static RuntimeException translateIfNecessary( 			RuntimeException rawException, PersistenceExceptionTranslator pet);1495868221;Return a translated exception if this is appropriate,_otherwise return the input exception._@param rawException exception we may wish to translate_@param pet PersistenceExceptionTranslator to use to perform the translation_@return a translated exception if translation is possible, or_the raw exception if it is not;public static RuntimeException translateIfNecessary(_			RuntimeException rawException, PersistenceExceptionTranslator pet) {__		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		DataAccessException dex = pet.translateExceptionIfPossible(rawException)__		return (dex != null ? dex : rawException)__	};return,a,translated,exception,if,this,is,appropriate,otherwise,return,the,input,exception,param,raw,exception,exception,we,may,wish,to,translate,param,pet,persistence,exception,translator,to,use,to,perform,the,translation,return,a,translated,exception,if,translation,is,possible,or,the,raw,exception,if,it,is,not;public,static,runtime,exception,translate,if,necessary,runtime,exception,raw,exception,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,data,access,exception,dex,pet,translate,exception,if,possible,raw,exception,return,dex,null,dex,raw,exception
DataAccessUtils -> public static RuntimeException translateIfNecessary( 			RuntimeException rawException, PersistenceExceptionTranslator pet);1496837955;Return a translated exception if this is appropriate,_otherwise return the input exception._@param rawException exception we may wish to translate_@param pet PersistenceExceptionTranslator to use to perform the translation_@return a translated exception if translation is possible, or_the raw exception if it is not;public static RuntimeException translateIfNecessary(_			RuntimeException rawException, PersistenceExceptionTranslator pet) {__		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		DataAccessException dex = pet.translateExceptionIfPossible(rawException)__		return (dex != null ? dex : rawException)__	};return,a,translated,exception,if,this,is,appropriate,otherwise,return,the,input,exception,param,raw,exception,exception,we,may,wish,to,translate,param,pet,persistence,exception,translator,to,use,to,perform,the,translation,return,a,translated,exception,if,translation,is,possible,or,the,raw,exception,if,it,is,not;public,static,runtime,exception,translate,if,necessary,runtime,exception,raw,exception,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,data,access,exception,dex,pet,translate,exception,if,possible,raw,exception,return,dex,null,dex,raw,exception
DataAccessUtils -> public static RuntimeException translateIfNecessary( 			RuntimeException rawException, PersistenceExceptionTranslator pet);1502974979;Return a translated exception if this is appropriate,_otherwise return the input exception._@param rawException exception we may wish to translate_@param pet PersistenceExceptionTranslator to use to perform the translation_@return a translated exception if translation is possible, or_the raw exception if it is not;public static RuntimeException translateIfNecessary(_			RuntimeException rawException, PersistenceExceptionTranslator pet) {__		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		DataAccessException dex = pet.translateExceptionIfPossible(rawException)__		return (dex != null ? dex : rawException)__	};return,a,translated,exception,if,this,is,appropriate,otherwise,return,the,input,exception,param,raw,exception,exception,we,may,wish,to,translate,param,pet,persistence,exception,translator,to,use,to,perform,the,translation,return,a,translated,exception,if,translation,is,possible,or,the,raw,exception,if,it,is,not;public,static,runtime,exception,translate,if,necessary,runtime,exception,raw,exception,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,data,access,exception,dex,pet,translate,exception,if,possible,raw,exception,return,dex,null,dex,raw,exception
DataAccessUtils -> public static RuntimeException translateIfNecessary( 			RuntimeException rawException, PersistenceExceptionTranslator pet);1511712999;Return a translated exception if this is appropriate,_otherwise return the given exception as-is._@param rawException an exception that we may wish to translate_@param pet PersistenceExceptionTranslator to use to perform the translation_@return a translated persistence exception if translation is possible,_or the raw exception if it is not;public static RuntimeException translateIfNecessary(_			RuntimeException rawException, PersistenceExceptionTranslator pet) {__		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		DataAccessException dex = pet.translateExceptionIfPossible(rawException)__		return (dex != null ? dex : rawException)__	};return,a,translated,exception,if,this,is,appropriate,otherwise,return,the,given,exception,as,is,param,raw,exception,an,exception,that,we,may,wish,to,translate,param,pet,persistence,exception,translator,to,use,to,perform,the,translation,return,a,translated,persistence,exception,if,translation,is,possible,or,the,raw,exception,if,it,is,not;public,static,runtime,exception,translate,if,necessary,runtime,exception,raw,exception,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,data,access,exception,dex,pet,translate,exception,if,possible,raw,exception,return,dex,null,dex,raw,exception
DataAccessUtils -> public static RuntimeException translateIfNecessary( 			RuntimeException rawException, PersistenceExceptionTranslator pet);1530174524;Return a translated exception if this is appropriate,_otherwise return the given exception as-is._@param rawException an exception that we may wish to translate_@param pet the PersistenceExceptionTranslator to use to perform the translation_@return a translated persistence exception if translation is possible,_or the raw exception if it is not;public static RuntimeException translateIfNecessary(_			RuntimeException rawException, PersistenceExceptionTranslator pet) {__		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		DataAccessException dex = pet.translateExceptionIfPossible(rawException)__		return (dex != null ? dex : rawException)__	};return,a,translated,exception,if,this,is,appropriate,otherwise,return,the,given,exception,as,is,param,raw,exception,an,exception,that,we,may,wish,to,translate,param,pet,the,persistence,exception,translator,to,use,to,perform,the,translation,return,a,translated,persistence,exception,if,translation,is,possible,or,the,raw,exception,if,it,is,not;public,static,runtime,exception,translate,if,necessary,runtime,exception,raw,exception,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,data,access,exception,dex,pet,translate,exception,if,possible,raw,exception,return,dex,null,dex,raw,exception
DataAccessUtils -> public static RuntimeException translateIfNecessary( 			RuntimeException rawException, PersistenceExceptionTranslator pet);1531144424;Return a translated exception if this is appropriate,_otherwise return the given exception as-is._@param rawException an exception that we may wish to translate_@param pet the PersistenceExceptionTranslator to use to perform the translation_@return a translated persistence exception if translation is possible,_or the raw exception if it is not;public static RuntimeException translateIfNecessary(_			RuntimeException rawException, PersistenceExceptionTranslator pet) {__		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		DataAccessException dae = pet.translateExceptionIfPossible(rawException)__		return (dae != null ? dae : rawException)__	};return,a,translated,exception,if,this,is,appropriate,otherwise,return,the,given,exception,as,is,param,raw,exception,an,exception,that,we,may,wish,to,translate,param,pet,the,persistence,exception,translator,to,use,to,perform,the,translation,return,a,translated,persistence,exception,if,translation,is,possible,or,the,raw,exception,if,it,is,not;public,static,runtime,exception,translate,if,necessary,runtime,exception,raw,exception,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,data,access,exception,dae,pet,translate,exception,if,possible,raw,exception,return,dae,null,dae,raw,exception
DataAccessUtils -> public static <T> T requiredSingleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1328020251;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be <code>null</code>)_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection;public static <T> T requiredSingleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,code,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection;public,static,t,t,required,single,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredSingleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1356735495;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection;public static <T> T requiredSingleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection;public,static,t,t,required,single,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredSingleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1385412762;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection;public static <T> T requiredSingleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection;public,static,t,t,required,single,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredSingleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1432125256;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection;public static <T> T requiredSingleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection;public,static,t,t,required,single,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredSingleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException;1473796721;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be {@code null})_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection;public static <T> T requiredSingleResult(Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection;public,static,t,t,required,single,result,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T nullableSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1511712999;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be {@code null}_and is also expected to contain {@code null} elements)_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection_@since 5.0.2;@Nullable_	public static <T> T nullableSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		_		_		if (CollectionUtils.isEmpty(results)) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,and,is,also,expected,to,contain,code,null,elements,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection,since,5,0,2;nullable,public,static,t,t,nullable,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T nullableSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1530174524;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be {@code null}_and is also expected to contain {@code null} elements)_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection_@since 5.0.2;@Nullable_	public static <T> T nullableSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		_		_		if (CollectionUtils.isEmpty(results)) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,and,is,also,expected,to,contain,code,null,elements,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection,since,5,0,2;nullable,public,static,t,t,nullable,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> @Nullable 	public static <T> T nullableSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1531144424;Return a single result object from the given Collection._<p>Throws an exception if 0 or more than 1 element found._@param results the result Collection (can be {@code null}_and is also expected to contain {@code null} elements)_@return the single result object_@throws IncorrectResultSizeDataAccessException if more than one_element has been found in the given Collection_@throws EmptyResultDataAccessException if no element at all_has been found in the given Collection_@since 5.0.2;@Nullable_	public static <T> T nullableSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		_		_		if (CollectionUtils.isEmpty(results)) {_			throw new EmptyResultDataAccessException(1)__		}_		if (results.size() > 1) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,single,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,element,found,param,results,the,result,collection,can,be,code,null,and,is,also,expected,to,contain,code,null,elements,return,the,single,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,element,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,element,at,all,has,been,found,in,the,given,collection,since,5,0,2;nullable,public,static,t,t,nullable,single,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,throw,new,empty,result,data,access,exception,1,if,results,size,1,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1495868221;Return a unique result object from the given Collection._<p>Throws an exception if 0 or more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object at all_has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,required,unique,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1496837955;Return a unique result object from the given Collection._<p>Throws an exception if 0 or more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object at all_has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,required,unique,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1502974979;Return a unique result object from the given Collection._<p>Throws an exception if 0 or more than 1 instance found._@param results the result Collection (can be {@code null})_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object at all_has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		int size = (results != null ? results.size() : 0)__		if (size == 0) {_			throw new EmptyResultDataAccessException(1)__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, size)__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,required,unique,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,int,size,results,null,results,size,0,if,size,0,throw,new,empty,result,data,access,exception,1,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1511712999;Return a unique result object from the given Collection._<p>Throws an exception if 0 or more than 1 instance found._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object at all_has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		if (CollectionUtils.isEmpty(results)) {_			throw new EmptyResultDataAccessException(1)__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,required,unique,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,throw,new,empty,result,data,access,exception,1,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1530174524;Return a unique result object from the given Collection._<p>Throws an exception if 0 or more than 1 instance found._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object at all_has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		if (CollectionUtils.isEmpty(results)) {_			throw new EmptyResultDataAccessException(1)__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,required,unique,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,throw,new,empty,result,data,access,exception,1,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException;1531144424;Return a unique result object from the given Collection._<p>Throws an exception if 0 or more than 1 instance found._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the unique result object_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object at all_has been found in the given Collection_@see org.springframework.util.CollectionUtils#hasUniqueObject;public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {_		if (CollectionUtils.isEmpty(results)) {_			throw new EmptyResultDataAccessException(1)__		}_		if (!CollectionUtils.hasUniqueObject(results)) {_			throw new IncorrectResultSizeDataAccessException(1, results.size())__		}_		return results.iterator().next()__	};return,a,unique,result,object,from,the,given,collection,p,throws,an,exception,if,0,or,more,than,1,instance,found,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,unique,result,object,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,see,org,springframework,util,collection,utils,has,unique,object;public,static,t,t,required,unique,result,nullable,collection,t,results,throws,incorrect,result,size,data,access,exception,if,collection,utils,is,empty,results,throw,new,empty,result,data,access,exception,1,if,collection,utils,has,unique,object,results,throw,new,incorrect,result,size,data,access,exception,1,results,size,return,results,iterator,next
DataAccessUtils -> public static int intResult(@Nullable Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1495868221;Return a unique int result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to an int._@param results the result Collection (can be {@code null})_@return the unique int result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to an int;public static int intResult(@Nullable Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).intValue()__	};return,a,unique,int,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,an,int,param,results,the,result,collection,can,be,code,null,return,the,unique,int,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,an,int;public,static,int,int,result,nullable,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,int,value
DataAccessUtils -> public static int intResult(@Nullable Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1496837955;Return a unique int result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to an int._@param results the result Collection (can be {@code null})_@return the unique int result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to an int;public static int intResult(@Nullable Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).intValue()__	};return,a,unique,int,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,an,int,param,results,the,result,collection,can,be,code,null,return,the,unique,int,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,an,int;public,static,int,int,result,nullable,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,int,value
DataAccessUtils -> public static int intResult(@Nullable Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1502974979;Return a unique int result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to an int._@param results the result Collection (can be {@code null})_@return the unique int result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to an int;public static int intResult(@Nullable Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).intValue()__	};return,a,unique,int,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,an,int,param,results,the,result,collection,can,be,code,null,return,the,unique,int,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,an,int;public,static,int,int,result,nullable,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,int,value
DataAccessUtils -> public static int intResult(@Nullable Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1511712999;Return a unique int result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to an int._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the unique int result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to an int;public static int intResult(@Nullable Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).intValue()__	};return,a,unique,int,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,an,int,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,unique,int,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,an,int;public,static,int,int,result,nullable,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,int,value
DataAccessUtils -> public static int intResult(@Nullable Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1530174524;Return a unique int result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to an int._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the unique int result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to an int;public static int intResult(@Nullable Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).intValue()__	};return,a,unique,int,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,an,int,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,unique,int,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,an,int;public,static,int,int,result,nullable,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,int,value
DataAccessUtils -> public static int intResult(@Nullable Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1531144424;Return a unique int result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to an int._@param results the result Collection (can be {@code null}_but is not expected to contain {@code null} elements)_@return the unique int result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to an int;public static int intResult(@Nullable Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).intValue()__	};return,a,unique,int,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,an,int,param,results,the,result,collection,can,be,code,null,but,is,not,expected,to,contain,code,null,elements,return,the,unique,int,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,an,int;public,static,int,int,result,nullable,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,int,value
DataAccessUtils -> public static int intResult(Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1385412762;Return a unique int result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertable to an int._@param results the result Collection (can be {@code null})_@return the unique int result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertable to an int;public static int intResult(Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).intValue()__	};return,a,unique,int,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertable,to,an,int,param,results,the,result,collection,can,be,code,null,return,the,unique,int,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertable,to,an,int;public,static,int,int,result,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,int,value
DataAccessUtils -> public static int intResult(Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1432125256;Return a unique int result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertable to an int._@param results the result Collection (can be {@code null})_@return the unique int result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertable to an int;public static int intResult(Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).intValue()__	};return,a,unique,int,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertable,to,an,int,param,results,the,result,collection,can,be,code,null,return,the,unique,int,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertable,to,an,int;public,static,int,int,result,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,int,value
DataAccessUtils -> public static int intResult(Collection<?> results) 			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException;1473796721;Return a unique int result from the given Collection._Throws an exception if 0 or more than 1 result objects found,_of if the unique result object is not convertible to an int._@param results the result Collection (can be {@code null})_@return the unique int result_@throws IncorrectResultSizeDataAccessException if more than one_result object has been found in the given Collection_@throws EmptyResultDataAccessException if no result object_at all has been found in the given Collection_@throws TypeMismatchDataAccessException if the unique object_in the collection is not convertible to an int;public static int intResult(Collection<?> results)_			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {__		return objectResult(results, Number.class).intValue()__	};return,a,unique,int,result,from,the,given,collection,throws,an,exception,if,0,or,more,than,1,result,objects,found,of,if,the,unique,result,object,is,not,convertible,to,an,int,param,results,the,result,collection,can,be,code,null,return,the,unique,int,result,throws,incorrect,result,size,data,access,exception,if,more,than,one,result,object,has,been,found,in,the,given,collection,throws,empty,result,data,access,exception,if,no,result,object,at,all,has,been,found,in,the,given,collection,throws,type,mismatch,data,access,exception,if,the,unique,object,in,the,collection,is,not,convertible,to,an,int;public,static,int,int,result,collection,results,throws,incorrect,result,size,data,access,exception,type,mismatch,data,access,exception,return,object,result,results,number,class,int,value
