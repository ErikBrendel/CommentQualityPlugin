commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the list of {@code RollbackRuleAttribute} objects  * (and/or {@code NoRollbackRuleAttribute} objects) to apply.  * @see RollbackRuleAttribute  * @see NoRollbackRuleAttribute  */ ;/**  * Set the list of {@code RollbackRuleAttribute} objects  * (and/or {@code NoRollbackRuleAttribute} objects) to apply.  * @see RollbackRuleAttribute  * @see NoRollbackRuleAttribute  */ public void setRollbackRules(List<RollbackRuleAttribute> rollbackRules) {     this.rollbackRules = rollbackRules. }
true;public;0;6;/**  * Return the list of {@code RollbackRuleAttribute} objects  * (never {@code null}).  */ ;/**  * Return the list of {@code RollbackRuleAttribute} objects  * (never {@code null}).  */ public List<RollbackRuleAttribute> getRollbackRules() {     if (this.rollbackRules == null) {         this.rollbackRules = new LinkedList<>().     }     return this.rollbackRules. }
true;public;1;31;/**  * Winning rule is the shallowest rule (that is, the closest in the  * inheritance hierarchy to the exception). If no rule applies (-1),  * return false.  * @see TransactionAttribute#rollbackOn(java.lang.Throwable)  */ ;/**  * Winning rule is the shallowest rule (that is, the closest in the  * inheritance hierarchy to the exception). If no rule applies (-1),  * return false.  * @see TransactionAttribute#rollbackOn(java.lang.Throwable)  */ @Override public boolean rollbackOn(Throwable ex) {     if (logger.isTraceEnabled()) {         logger.trace("Applying rules to determine whether transaction should rollback on " + ex).     }     RollbackRuleAttribute winner = null.     int deepest = Integer.MAX_VALUE.     if (this.rollbackRules != null) {         for (RollbackRuleAttribute rule : this.rollbackRules) {             int depth = rule.getDepth(ex).             if (depth >= 0 && depth < deepest) {                 deepest = depth.                 winner = rule.             }         }     }     if (logger.isTraceEnabled()) {         logger.trace("Winning rollback rule is: " + winner).     }     // User superclass behavior (rollback on unchecked) if no rule matches.     if (winner == null) {         logger.trace("No relevant rollback rule found: applying default rules").         return super.rollbackOn(ex).     }     return !(winner instanceof NoRollbackRuleAttribute). }
false;public;0;11;;@Override public String toString() {     StringBuilder result = getAttributeDescription().     if (this.rollbackRules != null) {         for (RollbackRuleAttribute rule : this.rollbackRules) {             String sign = (rule instanceof NoRollbackRuleAttribute ? PREFIX_COMMIT_RULE : PREFIX_ROLLBACK_RULE).             result.append(',').append(sign).append(rule.getExceptionName()).         }     }     return result.toString(). }
