commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Set an application exception that was thrown before this transaction exception,  * preserving the original exception despite the overriding TransactionSystemException.  * @param ex the application exception  * @throws IllegalStateException if this TransactionSystemException already holds an  * application exception  */ ;/**  * Set an application exception that was thrown before this transaction exception,  * preserving the original exception despite the overriding TransactionSystemException.  * @param ex the application exception  * @throws IllegalStateException if this TransactionSystemException already holds an  * application exception  */ public void initApplicationException(Throwable ex) {     Assert.notNull(ex, "Application exception must not be null").     if (this.applicationException != null) {         throw new IllegalStateException("Already holding an application exception: " + this.applicationException).     }     this.applicationException = ex. }
true;public,final;0;4;/**  * Return the application exception that was thrown before this transaction exception,  * if any.  * @return the application exception, or {@code null} if none set  */ ;/**  * Return the application exception that was thrown before this transaction exception,  * if any.  * @return the application exception, or {@code null} if none set  */ @Nullable public final Throwable getApplicationException() {     return this.applicationException. }
true;public;0;4;/**  * Return the exception that was the first to be thrown within the failed transaction:  * i.e. the application exception, if any, or the TransactionSystemException's own cause.  * @return the original exception, or {@code null} if there was none  */ ;/**  * Return the exception that was the first to be thrown within the failed transaction:  * i.e. the application exception, if any, or the TransactionSystemException's own cause.  * @return the original exception, or {@code null} if there was none  */ @Nullable public Throwable getOriginalException() {     return (this.applicationException != null ? this.applicationException : getCause()). }
false;public;1;4;;@Override public boolean contains(@Nullable Class<?> exType) {     return super.contains(exType) || (exType != null && exType.isInstance(this.applicationException)). }
