# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleTaskWorkManager -> public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor);1328020251;Specify the TaskExecutor to use for <i>asynchronous</i> work execution_(i.e. {@link #startWork} and {@link #scheduleWork} calls)._<p>This will typically (but not necessarily) be an_{@link org.springframework.core.task.AsyncTaskExecutor} implementation._Default is a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}.;public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor) {_		this.asyncTaskExecutor = asyncTaskExecutor__	};specify,the,task,executor,to,use,for,i,asynchronous,i,work,execution,i,e,link,start,work,and,link,schedule,work,calls,p,this,will,typically,but,not,necessarily,be,an,link,org,springframework,core,task,async,task,executor,implementation,default,is,a,link,org,springframework,core,task,simple,async,task,executor;public,void,set,async,task,executor,async,task,executor,async,task,executor,this,async,task,executor,async,task,executor
SimpleTaskWorkManager -> public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor);1356735495;Specify the TaskExecutor to use for <i>asynchronous</i> work execution_(i.e. {@link #startWork} and {@link #scheduleWork} calls)._<p>This will typically (but not necessarily) be an_{@link org.springframework.core.task.AsyncTaskExecutor} implementation._Default is a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}.;public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor) {_		this.asyncTaskExecutor = asyncTaskExecutor__	};specify,the,task,executor,to,use,for,i,asynchronous,i,work,execution,i,e,link,start,work,and,link,schedule,work,calls,p,this,will,typically,but,not,necessarily,be,an,link,org,springframework,core,task,async,task,executor,implementation,default,is,a,link,org,springframework,core,task,simple,async,task,executor;public,void,set,async,task,executor,async,task,executor,async,task,executor,this,async,task,executor,async,task,executor
SimpleTaskWorkManager -> public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor);1357119239;Specify the TaskExecutor to use for <i>asynchronous</i> work execution_(i.e. {@link #startWork} and {@link #scheduleWork} calls)._<p>This will typically (but not necessarily) be an_{@link org.springframework.core.task.AsyncTaskExecutor} implementation._Default is a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}.;public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor) {_		this.asyncTaskExecutor = asyncTaskExecutor__	};specify,the,task,executor,to,use,for,i,asynchronous,i,work,execution,i,e,link,start,work,and,link,schedule,work,calls,p,this,will,typically,but,not,necessarily,be,an,link,org,springframework,core,task,async,task,executor,implementation,default,is,a,link,org,springframework,core,task,simple,async,task,executor;public,void,set,async,task,executor,async,task,executor,async,task,executor,this,async,task,executor,async,task,executor
SimpleTaskWorkManager -> public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor);1368482696;Specify the TaskExecutor to use for <i>asynchronous</i> work execution_(i.e. {@link #startWork} and {@link #scheduleWork} calls)._<p>This will typically (but not necessarily) be an_{@link org.springframework.core.task.AsyncTaskExecutor} implementation._Default is a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}.;public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor) {_		this.asyncTaskExecutor = asyncTaskExecutor__	};specify,the,task,executor,to,use,for,i,asynchronous,i,work,execution,i,e,link,start,work,and,link,schedule,work,calls,p,this,will,typically,but,not,necessarily,be,an,link,org,springframework,core,task,async,task,executor,implementation,default,is,a,link,org,springframework,core,task,simple,async,task,executor;public,void,set,async,task,executor,async,task,executor,async,task,executor,this,async,task,executor,async,task,executor
SimpleTaskWorkManager -> public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor);1467749899;Specify the TaskExecutor to use for <i>asynchronous</i> work execution_(i.e. {@link #startWork} and {@link #scheduleWork} calls)._<p>This will typically (but not necessarily) be an_{@link org.springframework.core.task.AsyncTaskExecutor} implementation._Default is a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}.;public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor) {_		this.asyncTaskExecutor = asyncTaskExecutor__	};specify,the,task,executor,to,use,for,i,asynchronous,i,work,execution,i,e,link,start,work,and,link,schedule,work,calls,p,this,will,typically,but,not,necessarily,be,an,link,org,springframework,core,task,async,task,executor,implementation,default,is,a,link,org,springframework,core,task,simple,async,task,executor;public,void,set,async,task,executor,async,task,executor,async,task,executor,this,async,task,executor,async,task,executor
SimpleTaskWorkManager -> public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor);1496259743;Specify the TaskExecutor to use for <i>asynchronous</i> work execution_(i.e. {@link #startWork} and {@link #scheduleWork} calls)._<p>This will typically (but not necessarily) be an_{@link org.springframework.core.task.AsyncTaskExecutor} implementation._Default is a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}.;public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor) {_		this.asyncTaskExecutor = asyncTaskExecutor__	};specify,the,task,executor,to,use,for,i,asynchronous,i,work,execution,i,e,link,start,work,and,link,schedule,work,calls,p,this,will,typically,but,not,necessarily,be,an,link,org,springframework,core,task,async,task,executor,implementation,default,is,a,link,org,springframework,core,task,simple,async,task,executor;public,void,set,async,task,executor,async,task,executor,async,task,executor,this,async,task,executor,async,task,executor
SimpleTaskWorkManager -> public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor);1496837955;Specify the TaskExecutor to use for <i>asynchronous</i> work execution_(i.e. {@link #startWork} and {@link #scheduleWork} calls)._<p>This will typically (but not necessarily) be an_{@link org.springframework.core.task.AsyncTaskExecutor} implementation._Default is a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}.;public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor) {_		this.asyncTaskExecutor = asyncTaskExecutor__	};specify,the,task,executor,to,use,for,i,asynchronous,i,work,execution,i,e,link,start,work,and,link,schedule,work,calls,p,this,will,typically,but,not,necessarily,be,an,link,org,springframework,core,task,async,task,executor,implementation,default,is,a,link,org,springframework,core,task,simple,async,task,executor;public,void,set,async,task,executor,async,task,executor,async,task,executor,this,async,task,executor,async,task,executor
SimpleTaskWorkManager -> public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor);1498780456;Specify the TaskExecutor to use for <i>asynchronous</i> work execution_(i.e. {@link #startWork} and {@link #scheduleWork} calls)._<p>This will typically (but not necessarily) be an_{@link org.springframework.core.task.AsyncTaskExecutor} implementation._Default is a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}.;public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor) {_		this.asyncTaskExecutor = asyncTaskExecutor__	};specify,the,task,executor,to,use,for,i,asynchronous,i,work,execution,i,e,link,start,work,and,link,schedule,work,calls,p,this,will,typically,but,not,necessarily,be,an,link,org,springframework,core,task,async,task,executor,implementation,default,is,a,link,org,springframework,core,task,simple,async,task,executor;public,void,set,async,task,executor,async,task,executor,async,task,executor,this,async,task,executor,async,task,executor
SimpleTaskWorkManager -> public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor);1530174524;Specify the TaskExecutor to use for <i>asynchronous</i> work execution_(i.e. {@link #startWork} and {@link #scheduleWork} calls)._<p>This will typically (but not necessarily) be an_{@link org.springframework.core.task.AsyncTaskExecutor} implementation._Default is a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}.;public void setAsyncTaskExecutor(AsyncTaskExecutor asyncTaskExecutor) {_		this.asyncTaskExecutor = asyncTaskExecutor__	};specify,the,task,executor,to,use,for,i,asynchronous,i,work,execution,i,e,link,start,work,and,link,schedule,work,calls,p,this,will,typically,but,not,necessarily,be,an,link,org,springframework,core,task,async,task,executor,implementation,default,is,a,link,org,springframework,core,task,simple,async,task,executor;public,void,set,async,task,executor,async,task,executor,async,task,executor,this,async,task,executor,async,task,executor
SimpleTaskWorkManager -> protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, 			@Nullable ExecutionContext executionContext, @Nullable WorkListener workListener) throws WorkException;1496837955;Execute the given Work on the specified TaskExecutor._@param taskExecutor the TaskExecutor to use_@param work the Work to execute_@param startTimeout the time duration within which the Work is supposed to start_@param blockUntilStarted whether to block until the Work has started_@param executionContext the JCA ExecutionContext for the given Work_@param workListener the WorkListener to clal for the given Work_@return the time elapsed from Work acceptance until start of execution_(or -1 if not applicable or not known)_@throws WorkException if the TaskExecutor did not accept the Work;protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted,_			@Nullable ExecutionContext executionContext, @Nullable WorkListener workListener) throws WorkException {__		if (executionContext != null && executionContext.getXid() != null) {_			throw new WorkException("SimpleTaskWorkManager does not supported imported XIDs: " + executionContext.getXid())__		}_		WorkListener workListenerToUse = workListener__		if (workListenerToUse == null) {_			workListenerToUse = new WorkAdapter()__		}__		boolean isAsync = (taskExecutor instanceof AsyncTaskExecutor)__		DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)__		try {_			if (isAsync) {_				((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)__			}_			else {_				taskExecutor.execute(workHandle)__			}_		}_		catch (TaskTimeoutException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)__			wex.setErrorCode(WorkException.START_TIMED_OUT)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (TaskRejectedException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (Throwable ex) {_			WorkException wex = new WorkException("TaskExecutor failed to execute Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			throw wex__		}_		if (isAsync) {_			workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))__		}__		if (blockUntilStarted) {_			long acceptanceTime = System.currentTimeMillis()__			synchronized (workHandle.monitor) {_				try {_					while (!workHandle.started) {_						workHandle.monitor.wait()__					}_				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__				}_			}_			return (System.currentTimeMillis() - acceptanceTime)__		}_		else {_			return WorkManager.UNKNOWN__		}_	};execute,the,given,work,on,the,specified,task,executor,param,task,executor,the,task,executor,to,use,param,work,the,work,to,execute,param,start,timeout,the,time,duration,within,which,the,work,is,supposed,to,start,param,block,until,started,whether,to,block,until,the,work,has,started,param,execution,context,the,jca,execution,context,for,the,given,work,param,work,listener,the,work,listener,to,clal,for,the,given,work,return,the,time,elapsed,from,work,acceptance,until,start,of,execution,or,1,if,not,applicable,or,not,known,throws,work,exception,if,the,task,executor,did,not,accept,the,work;protected,long,execute,work,task,executor,task,executor,work,work,long,start,timeout,boolean,block,until,started,nullable,execution,context,execution,context,nullable,work,listener,work,listener,throws,work,exception,if,execution,context,null,execution,context,get,xid,null,throw,new,work,exception,simple,task,work,manager,does,not,supported,imported,xids,execution,context,get,xid,work,listener,work,listener,to,use,work,listener,if,work,listener,to,use,null,work,listener,to,use,new,work,adapter,boolean,is,async,task,executor,instanceof,async,task,executor,delegating,work,adapter,work,handle,new,delegating,work,adapter,work,work,listener,to,use,is,async,try,if,is,async,async,task,executor,task,executor,execute,work,handle,start,timeout,else,task,executor,execute,work,handle,catch,task,timeout,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,because,of,timeout,work,ex,wex,set,error,code,work,exception,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,task,rejected,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,work,ex,wex,set,error,code,work,exception,internal,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,throwable,ex,work,exception,wex,new,work,exception,task,executor,failed,to,execute,work,work,ex,wex,set,error,code,work,exception,internal,throw,wex,if,is,async,work,listener,to,use,work,accepted,new,work,event,this,work,event,work,null,if,block,until,started,long,acceptance,time,system,current,time,millis,synchronized,work,handle,monitor,try,while,work,handle,started,work,handle,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,return,system,current,time,millis,acceptance,time,else,return,work,manager,unknown
SimpleTaskWorkManager -> protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, 			@Nullable ExecutionContext executionContext, @Nullable WorkListener workListener) throws WorkException;1498780456;Execute the given Work on the specified TaskExecutor._@param taskExecutor the TaskExecutor to use_@param work the Work to execute_@param startTimeout the time duration within which the Work is supposed to start_@param blockUntilStarted whether to block until the Work has started_@param executionContext the JCA ExecutionContext for the given Work_@param workListener the WorkListener to clal for the given Work_@return the time elapsed from Work acceptance until start of execution_(or -1 if not applicable or not known)_@throws WorkException if the TaskExecutor did not accept the Work;protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted,_			@Nullable ExecutionContext executionContext, @Nullable WorkListener workListener) throws WorkException {__		if (executionContext != null && executionContext.getXid() != null) {_			throw new WorkException("SimpleTaskWorkManager does not supported imported XIDs: " + executionContext.getXid())__		}_		WorkListener workListenerToUse = workListener__		if (workListenerToUse == null) {_			workListenerToUse = new WorkAdapter()__		}__		boolean isAsync = (taskExecutor instanceof AsyncTaskExecutor)__		DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)__		try {_			if (isAsync) {_				((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)__			}_			else {_				taskExecutor.execute(workHandle)__			}_		}_		catch (TaskTimeoutException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)__			wex.setErrorCode(WorkException.START_TIMED_OUT)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (TaskRejectedException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (Throwable ex) {_			WorkException wex = new WorkException("TaskExecutor failed to execute Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			throw wex__		}_		if (isAsync) {_			workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))__		}__		if (blockUntilStarted) {_			long acceptanceTime = System.currentTimeMillis()__			synchronized (workHandle.monitor) {_				try {_					while (!workHandle.started) {_						workHandle.monitor.wait()__					}_				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__				}_			}_			return (System.currentTimeMillis() - acceptanceTime)__		}_		else {_			return WorkManager.UNKNOWN__		}_	};execute,the,given,work,on,the,specified,task,executor,param,task,executor,the,task,executor,to,use,param,work,the,work,to,execute,param,start,timeout,the,time,duration,within,which,the,work,is,supposed,to,start,param,block,until,started,whether,to,block,until,the,work,has,started,param,execution,context,the,jca,execution,context,for,the,given,work,param,work,listener,the,work,listener,to,clal,for,the,given,work,return,the,time,elapsed,from,work,acceptance,until,start,of,execution,or,1,if,not,applicable,or,not,known,throws,work,exception,if,the,task,executor,did,not,accept,the,work;protected,long,execute,work,task,executor,task,executor,work,work,long,start,timeout,boolean,block,until,started,nullable,execution,context,execution,context,nullable,work,listener,work,listener,throws,work,exception,if,execution,context,null,execution,context,get,xid,null,throw,new,work,exception,simple,task,work,manager,does,not,supported,imported,xids,execution,context,get,xid,work,listener,work,listener,to,use,work,listener,if,work,listener,to,use,null,work,listener,to,use,new,work,adapter,boolean,is,async,task,executor,instanceof,async,task,executor,delegating,work,adapter,work,handle,new,delegating,work,adapter,work,work,listener,to,use,is,async,try,if,is,async,async,task,executor,task,executor,execute,work,handle,start,timeout,else,task,executor,execute,work,handle,catch,task,timeout,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,because,of,timeout,work,ex,wex,set,error,code,work,exception,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,task,rejected,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,work,ex,wex,set,error,code,work,exception,internal,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,throwable,ex,work,exception,wex,new,work,exception,task,executor,failed,to,execute,work,work,ex,wex,set,error,code,work,exception,internal,throw,wex,if,is,async,work,listener,to,use,work,accepted,new,work,event,this,work,event,work,null,if,block,until,started,long,acceptance,time,system,current,time,millis,synchronized,work,handle,monitor,try,while,work,handle,started,work,handle,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,return,system,current,time,millis,acceptance,time,else,return,work,manager,unknown
SimpleTaskWorkManager -> protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, 			@Nullable ExecutionContext executionContext, @Nullable WorkListener workListener) throws WorkException;1530174524;Execute the given Work on the specified TaskExecutor._@param taskExecutor the TaskExecutor to use_@param work the Work to execute_@param startTimeout the time duration within which the Work is supposed to start_@param blockUntilStarted whether to block until the Work has started_@param executionContext the JCA ExecutionContext for the given Work_@param workListener the WorkListener to clal for the given Work_@return the time elapsed from Work acceptance until start of execution_(or -1 if not applicable or not known)_@throws WorkException if the TaskExecutor did not accept the Work;protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted,_			@Nullable ExecutionContext executionContext, @Nullable WorkListener workListener) throws WorkException {__		if (executionContext != null && executionContext.getXid() != null) {_			throw new WorkException("SimpleTaskWorkManager does not supported imported XIDs: " + executionContext.getXid())__		}_		WorkListener workListenerToUse = workListener__		if (workListenerToUse == null) {_			workListenerToUse = new WorkAdapter()__		}__		boolean isAsync = (taskExecutor instanceof AsyncTaskExecutor)__		DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)__		try {_			if (isAsync) {_				((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)__			}_			else {_				taskExecutor.execute(workHandle)__			}_		}_		catch (TaskTimeoutException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)__			wex.setErrorCode(WorkException.START_TIMED_OUT)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (TaskRejectedException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (Throwable ex) {_			WorkException wex = new WorkException("TaskExecutor failed to execute Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			throw wex__		}_		if (isAsync) {_			workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))__		}__		if (blockUntilStarted) {_			long acceptanceTime = System.currentTimeMillis()__			synchronized (workHandle.monitor) {_				try {_					while (!workHandle.started) {_						workHandle.monitor.wait()__					}_				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__				}_			}_			return (System.currentTimeMillis() - acceptanceTime)__		}_		else {_			return WorkManager.UNKNOWN__		}_	};execute,the,given,work,on,the,specified,task,executor,param,task,executor,the,task,executor,to,use,param,work,the,work,to,execute,param,start,timeout,the,time,duration,within,which,the,work,is,supposed,to,start,param,block,until,started,whether,to,block,until,the,work,has,started,param,execution,context,the,jca,execution,context,for,the,given,work,param,work,listener,the,work,listener,to,clal,for,the,given,work,return,the,time,elapsed,from,work,acceptance,until,start,of,execution,or,1,if,not,applicable,or,not,known,throws,work,exception,if,the,task,executor,did,not,accept,the,work;protected,long,execute,work,task,executor,task,executor,work,work,long,start,timeout,boolean,block,until,started,nullable,execution,context,execution,context,nullable,work,listener,work,listener,throws,work,exception,if,execution,context,null,execution,context,get,xid,null,throw,new,work,exception,simple,task,work,manager,does,not,supported,imported,xids,execution,context,get,xid,work,listener,work,listener,to,use,work,listener,if,work,listener,to,use,null,work,listener,to,use,new,work,adapter,boolean,is,async,task,executor,instanceof,async,task,executor,delegating,work,adapter,work,handle,new,delegating,work,adapter,work,work,listener,to,use,is,async,try,if,is,async,async,task,executor,task,executor,execute,work,handle,start,timeout,else,task,executor,execute,work,handle,catch,task,timeout,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,because,of,timeout,work,ex,wex,set,error,code,work,exception,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,task,rejected,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,work,ex,wex,set,error,code,work,exception,internal,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,throwable,ex,work,exception,wex,new,work,exception,task,executor,failed,to,execute,work,work,ex,wex,set,error,code,work,exception,internal,throw,wex,if,is,async,work,listener,to,use,work,accepted,new,work,event,this,work,event,work,null,if,block,until,started,long,acceptance,time,system,current,time,millis,synchronized,work,handle,monitor,try,while,work,handle,started,work,handle,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,return,system,current,time,millis,acceptance,time,else,return,work,manager,unknown
SimpleTaskWorkManager -> protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, 			boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) 			throws WorkException;1328020251;Execute the given Work on the specified TaskExecutor._@param taskExecutor the TaskExecutor to use_@param work the Work to execute_@param startTimeout the time duration within which the Work is supposed to start_@param blockUntilStarted whether to block until the Work has started_@param executionContext the JCA ExecutionContext for the given Work_@param workListener the WorkListener to clal for the given Work_@return the time elapsed from Work acceptance until start of execution_(or -1 if not applicable or not known)_@throws WorkException if the TaskExecutor did not accept the Work;protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout,_			boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener)_			throws WorkException {__		if (executionContext != null && executionContext.getXid() != null) {_			throw new WorkException("SimpleTaskWorkManager does not supported imported XIDs: " + executionContext.getXid())__		}_		WorkListener workListenerToUse = workListener__		if (workListenerToUse == null) {_			workListenerToUse = new WorkAdapter()__		}__		boolean isAsync = (taskExecutor instanceof AsyncTaskExecutor)__		DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)__		try {_			if (isAsync) {_				((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)__			}_			else {_				taskExecutor.execute(workHandle)__			}_		}_		catch (TaskTimeoutException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)__			wex.setErrorCode(WorkException.START_TIMED_OUT)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (TaskRejectedException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (Throwable ex) {_			WorkException wex = new WorkException("TaskExecutor failed to execute Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			throw wex__		}_		if (isAsync) {_			workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))__		}__		if (blockUntilStarted) {_			long acceptanceTime = System.currentTimeMillis()__			synchronized (workHandle.monitor) {_				try {_					while (!workHandle.started) {_						workHandle.monitor.wait()__					}_				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__				}_			}_			return (System.currentTimeMillis() - acceptanceTime)__		}_		else {_			return WorkManager.UNKNOWN__		}_	};execute,the,given,work,on,the,specified,task,executor,param,task,executor,the,task,executor,to,use,param,work,the,work,to,execute,param,start,timeout,the,time,duration,within,which,the,work,is,supposed,to,start,param,block,until,started,whether,to,block,until,the,work,has,started,param,execution,context,the,jca,execution,context,for,the,given,work,param,work,listener,the,work,listener,to,clal,for,the,given,work,return,the,time,elapsed,from,work,acceptance,until,start,of,execution,or,1,if,not,applicable,or,not,known,throws,work,exception,if,the,task,executor,did,not,accept,the,work;protected,long,execute,work,task,executor,task,executor,work,work,long,start,timeout,boolean,block,until,started,execution,context,execution,context,work,listener,work,listener,throws,work,exception,if,execution,context,null,execution,context,get,xid,null,throw,new,work,exception,simple,task,work,manager,does,not,supported,imported,xids,execution,context,get,xid,work,listener,work,listener,to,use,work,listener,if,work,listener,to,use,null,work,listener,to,use,new,work,adapter,boolean,is,async,task,executor,instanceof,async,task,executor,delegating,work,adapter,work,handle,new,delegating,work,adapter,work,work,listener,to,use,is,async,try,if,is,async,async,task,executor,task,executor,execute,work,handle,start,timeout,else,task,executor,execute,work,handle,catch,task,timeout,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,because,of,timeout,work,ex,wex,set,error,code,work,exception,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,task,rejected,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,work,ex,wex,set,error,code,work,exception,internal,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,throwable,ex,work,exception,wex,new,work,exception,task,executor,failed,to,execute,work,work,ex,wex,set,error,code,work,exception,internal,throw,wex,if,is,async,work,listener,to,use,work,accepted,new,work,event,this,work,event,work,null,if,block,until,started,long,acceptance,time,system,current,time,millis,synchronized,work,handle,monitor,try,while,work,handle,started,work,handle,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,return,system,current,time,millis,acceptance,time,else,return,work,manager,unknown
SimpleTaskWorkManager -> protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, 			boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) 			throws WorkException;1356735495;Execute the given Work on the specified TaskExecutor._@param taskExecutor the TaskExecutor to use_@param work the Work to execute_@param startTimeout the time duration within which the Work is supposed to start_@param blockUntilStarted whether to block until the Work has started_@param executionContext the JCA ExecutionContext for the given Work_@param workListener the WorkListener to clal for the given Work_@return the time elapsed from Work acceptance until start of execution_(or -1 if not applicable or not known)_@throws WorkException if the TaskExecutor did not accept the Work;protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout,_			boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener)_			throws WorkException {__		if (executionContext != null && executionContext.getXid() != null) {_			throw new WorkException("SimpleTaskWorkManager does not supported imported XIDs: " + executionContext.getXid())__		}_		WorkListener workListenerToUse = workListener__		if (workListenerToUse == null) {_			workListenerToUse = new WorkAdapter()__		}__		boolean isAsync = (taskExecutor instanceof AsyncTaskExecutor)__		DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)__		try {_			if (isAsync) {_				((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)__			}_			else {_				taskExecutor.execute(workHandle)__			}_		}_		catch (TaskTimeoutException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)__			wex.setErrorCode(WorkException.START_TIMED_OUT)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (TaskRejectedException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (Throwable ex) {_			WorkException wex = new WorkException("TaskExecutor failed to execute Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			throw wex__		}_		if (isAsync) {_			workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))__		}__		if (blockUntilStarted) {_			long acceptanceTime = System.currentTimeMillis()__			synchronized (workHandle.monitor) {_				try {_					while (!workHandle.started) {_						workHandle.monitor.wait()__					}_				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__				}_			}_			return (System.currentTimeMillis() - acceptanceTime)__		}_		else {_			return WorkManager.UNKNOWN__		}_	};execute,the,given,work,on,the,specified,task,executor,param,task,executor,the,task,executor,to,use,param,work,the,work,to,execute,param,start,timeout,the,time,duration,within,which,the,work,is,supposed,to,start,param,block,until,started,whether,to,block,until,the,work,has,started,param,execution,context,the,jca,execution,context,for,the,given,work,param,work,listener,the,work,listener,to,clal,for,the,given,work,return,the,time,elapsed,from,work,acceptance,until,start,of,execution,or,1,if,not,applicable,or,not,known,throws,work,exception,if,the,task,executor,did,not,accept,the,work;protected,long,execute,work,task,executor,task,executor,work,work,long,start,timeout,boolean,block,until,started,execution,context,execution,context,work,listener,work,listener,throws,work,exception,if,execution,context,null,execution,context,get,xid,null,throw,new,work,exception,simple,task,work,manager,does,not,supported,imported,xids,execution,context,get,xid,work,listener,work,listener,to,use,work,listener,if,work,listener,to,use,null,work,listener,to,use,new,work,adapter,boolean,is,async,task,executor,instanceof,async,task,executor,delegating,work,adapter,work,handle,new,delegating,work,adapter,work,work,listener,to,use,is,async,try,if,is,async,async,task,executor,task,executor,execute,work,handle,start,timeout,else,task,executor,execute,work,handle,catch,task,timeout,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,because,of,timeout,work,ex,wex,set,error,code,work,exception,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,task,rejected,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,work,ex,wex,set,error,code,work,exception,internal,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,throwable,ex,work,exception,wex,new,work,exception,task,executor,failed,to,execute,work,work,ex,wex,set,error,code,work,exception,internal,throw,wex,if,is,async,work,listener,to,use,work,accepted,new,work,event,this,work,event,work,null,if,block,until,started,long,acceptance,time,system,current,time,millis,synchronized,work,handle,monitor,try,while,work,handle,started,work,handle,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,return,system,current,time,millis,acceptance,time,else,return,work,manager,unknown
SimpleTaskWorkManager -> protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, 			boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) 			throws WorkException;1357119239;Execute the given Work on the specified TaskExecutor._@param taskExecutor the TaskExecutor to use_@param work the Work to execute_@param startTimeout the time duration within which the Work is supposed to start_@param blockUntilStarted whether to block until the Work has started_@param executionContext the JCA ExecutionContext for the given Work_@param workListener the WorkListener to clal for the given Work_@return the time elapsed from Work acceptance until start of execution_(or -1 if not applicable or not known)_@throws WorkException if the TaskExecutor did not accept the Work;protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout,_			boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener)_			throws WorkException {__		if (executionContext != null && executionContext.getXid() != null) {_			throw new WorkException("SimpleTaskWorkManager does not supported imported XIDs: " + executionContext.getXid())__		}_		WorkListener workListenerToUse = workListener__		if (workListenerToUse == null) {_			workListenerToUse = new WorkAdapter()__		}__		boolean isAsync = (taskExecutor instanceof AsyncTaskExecutor)__		DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)__		try {_			if (isAsync) {_				((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)__			}_			else {_				taskExecutor.execute(workHandle)__			}_		}_		catch (TaskTimeoutException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)__			wex.setErrorCode(WorkException.START_TIMED_OUT)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (TaskRejectedException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (Throwable ex) {_			WorkException wex = new WorkException("TaskExecutor failed to execute Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			throw wex__		}_		if (isAsync) {_			workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))__		}__		if (blockUntilStarted) {_			long acceptanceTime = System.currentTimeMillis()__			synchronized (workHandle.monitor) {_				try {_					while (!workHandle.started) {_						workHandle.monitor.wait()__					}_				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__				}_			}_			return (System.currentTimeMillis() - acceptanceTime)__		}_		else {_			return WorkManager.UNKNOWN__		}_	};execute,the,given,work,on,the,specified,task,executor,param,task,executor,the,task,executor,to,use,param,work,the,work,to,execute,param,start,timeout,the,time,duration,within,which,the,work,is,supposed,to,start,param,block,until,started,whether,to,block,until,the,work,has,started,param,execution,context,the,jca,execution,context,for,the,given,work,param,work,listener,the,work,listener,to,clal,for,the,given,work,return,the,time,elapsed,from,work,acceptance,until,start,of,execution,or,1,if,not,applicable,or,not,known,throws,work,exception,if,the,task,executor,did,not,accept,the,work;protected,long,execute,work,task,executor,task,executor,work,work,long,start,timeout,boolean,block,until,started,execution,context,execution,context,work,listener,work,listener,throws,work,exception,if,execution,context,null,execution,context,get,xid,null,throw,new,work,exception,simple,task,work,manager,does,not,supported,imported,xids,execution,context,get,xid,work,listener,work,listener,to,use,work,listener,if,work,listener,to,use,null,work,listener,to,use,new,work,adapter,boolean,is,async,task,executor,instanceof,async,task,executor,delegating,work,adapter,work,handle,new,delegating,work,adapter,work,work,listener,to,use,is,async,try,if,is,async,async,task,executor,task,executor,execute,work,handle,start,timeout,else,task,executor,execute,work,handle,catch,task,timeout,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,because,of,timeout,work,ex,wex,set,error,code,work,exception,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,task,rejected,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,work,ex,wex,set,error,code,work,exception,internal,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,throwable,ex,work,exception,wex,new,work,exception,task,executor,failed,to,execute,work,work,ex,wex,set,error,code,work,exception,internal,throw,wex,if,is,async,work,listener,to,use,work,accepted,new,work,event,this,work,event,work,null,if,block,until,started,long,acceptance,time,system,current,time,millis,synchronized,work,handle,monitor,try,while,work,handle,started,work,handle,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,return,system,current,time,millis,acceptance,time,else,return,work,manager,unknown
SimpleTaskWorkManager -> protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, 			boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) 			throws WorkException;1368482696;Execute the given Work on the specified TaskExecutor._@param taskExecutor the TaskExecutor to use_@param work the Work to execute_@param startTimeout the time duration within which the Work is supposed to start_@param blockUntilStarted whether to block until the Work has started_@param executionContext the JCA ExecutionContext for the given Work_@param workListener the WorkListener to clal for the given Work_@return the time elapsed from Work acceptance until start of execution_(or -1 if not applicable or not known)_@throws WorkException if the TaskExecutor did not accept the Work;protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout,_			boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener)_			throws WorkException {__		if (executionContext != null && executionContext.getXid() != null) {_			throw new WorkException("SimpleTaskWorkManager does not supported imported XIDs: " + executionContext.getXid())__		}_		WorkListener workListenerToUse = workListener__		if (workListenerToUse == null) {_			workListenerToUse = new WorkAdapter()__		}__		boolean isAsync = (taskExecutor instanceof AsyncTaskExecutor)__		DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)__		try {_			if (isAsync) {_				((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)__			}_			else {_				taskExecutor.execute(workHandle)__			}_		}_		catch (TaskTimeoutException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)__			wex.setErrorCode(WorkException.START_TIMED_OUT)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (TaskRejectedException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (Throwable ex) {_			WorkException wex = new WorkException("TaskExecutor failed to execute Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			throw wex__		}_		if (isAsync) {_			workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))__		}__		if (blockUntilStarted) {_			long acceptanceTime = System.currentTimeMillis()__			synchronized (workHandle.monitor) {_				try {_					while (!workHandle.started) {_						workHandle.monitor.wait()__					}_				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__				}_			}_			return (System.currentTimeMillis() - acceptanceTime)__		}_		else {_			return WorkManager.UNKNOWN__		}_	};execute,the,given,work,on,the,specified,task,executor,param,task,executor,the,task,executor,to,use,param,work,the,work,to,execute,param,start,timeout,the,time,duration,within,which,the,work,is,supposed,to,start,param,block,until,started,whether,to,block,until,the,work,has,started,param,execution,context,the,jca,execution,context,for,the,given,work,param,work,listener,the,work,listener,to,clal,for,the,given,work,return,the,time,elapsed,from,work,acceptance,until,start,of,execution,or,1,if,not,applicable,or,not,known,throws,work,exception,if,the,task,executor,did,not,accept,the,work;protected,long,execute,work,task,executor,task,executor,work,work,long,start,timeout,boolean,block,until,started,execution,context,execution,context,work,listener,work,listener,throws,work,exception,if,execution,context,null,execution,context,get,xid,null,throw,new,work,exception,simple,task,work,manager,does,not,supported,imported,xids,execution,context,get,xid,work,listener,work,listener,to,use,work,listener,if,work,listener,to,use,null,work,listener,to,use,new,work,adapter,boolean,is,async,task,executor,instanceof,async,task,executor,delegating,work,adapter,work,handle,new,delegating,work,adapter,work,work,listener,to,use,is,async,try,if,is,async,async,task,executor,task,executor,execute,work,handle,start,timeout,else,task,executor,execute,work,handle,catch,task,timeout,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,because,of,timeout,work,ex,wex,set,error,code,work,exception,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,task,rejected,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,work,ex,wex,set,error,code,work,exception,internal,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,throwable,ex,work,exception,wex,new,work,exception,task,executor,failed,to,execute,work,work,ex,wex,set,error,code,work,exception,internal,throw,wex,if,is,async,work,listener,to,use,work,accepted,new,work,event,this,work,event,work,null,if,block,until,started,long,acceptance,time,system,current,time,millis,synchronized,work,handle,monitor,try,while,work,handle,started,work,handle,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,return,system,current,time,millis,acceptance,time,else,return,work,manager,unknown
SimpleTaskWorkManager -> protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, 			boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) 			throws WorkException;1467749899;Execute the given Work on the specified TaskExecutor._@param taskExecutor the TaskExecutor to use_@param work the Work to execute_@param startTimeout the time duration within which the Work is supposed to start_@param blockUntilStarted whether to block until the Work has started_@param executionContext the JCA ExecutionContext for the given Work_@param workListener the WorkListener to clal for the given Work_@return the time elapsed from Work acceptance until start of execution_(or -1 if not applicable or not known)_@throws WorkException if the TaskExecutor did not accept the Work;protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout,_			boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener)_			throws WorkException {__		if (executionContext != null && executionContext.getXid() != null) {_			throw new WorkException("SimpleTaskWorkManager does not supported imported XIDs: " + executionContext.getXid())__		}_		WorkListener workListenerToUse = workListener__		if (workListenerToUse == null) {_			workListenerToUse = new WorkAdapter()__		}__		boolean isAsync = (taskExecutor instanceof AsyncTaskExecutor)__		DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)__		try {_			if (isAsync) {_				((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)__			}_			else {_				taskExecutor.execute(workHandle)__			}_		}_		catch (TaskTimeoutException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)__			wex.setErrorCode(WorkException.START_TIMED_OUT)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (TaskRejectedException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (Throwable ex) {_			WorkException wex = new WorkException("TaskExecutor failed to execute Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			throw wex__		}_		if (isAsync) {_			workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))__		}__		if (blockUntilStarted) {_			long acceptanceTime = System.currentTimeMillis()__			synchronized (workHandle.monitor) {_				try {_					while (!workHandle.started) {_						workHandle.monitor.wait()__					}_				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__				}_			}_			return (System.currentTimeMillis() - acceptanceTime)__		}_		else {_			return WorkManager.UNKNOWN__		}_	};execute,the,given,work,on,the,specified,task,executor,param,task,executor,the,task,executor,to,use,param,work,the,work,to,execute,param,start,timeout,the,time,duration,within,which,the,work,is,supposed,to,start,param,block,until,started,whether,to,block,until,the,work,has,started,param,execution,context,the,jca,execution,context,for,the,given,work,param,work,listener,the,work,listener,to,clal,for,the,given,work,return,the,time,elapsed,from,work,acceptance,until,start,of,execution,or,1,if,not,applicable,or,not,known,throws,work,exception,if,the,task,executor,did,not,accept,the,work;protected,long,execute,work,task,executor,task,executor,work,work,long,start,timeout,boolean,block,until,started,execution,context,execution,context,work,listener,work,listener,throws,work,exception,if,execution,context,null,execution,context,get,xid,null,throw,new,work,exception,simple,task,work,manager,does,not,supported,imported,xids,execution,context,get,xid,work,listener,work,listener,to,use,work,listener,if,work,listener,to,use,null,work,listener,to,use,new,work,adapter,boolean,is,async,task,executor,instanceof,async,task,executor,delegating,work,adapter,work,handle,new,delegating,work,adapter,work,work,listener,to,use,is,async,try,if,is,async,async,task,executor,task,executor,execute,work,handle,start,timeout,else,task,executor,execute,work,handle,catch,task,timeout,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,because,of,timeout,work,ex,wex,set,error,code,work,exception,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,task,rejected,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,work,ex,wex,set,error,code,work,exception,internal,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,throwable,ex,work,exception,wex,new,work,exception,task,executor,failed,to,execute,work,work,ex,wex,set,error,code,work,exception,internal,throw,wex,if,is,async,work,listener,to,use,work,accepted,new,work,event,this,work,event,work,null,if,block,until,started,long,acceptance,time,system,current,time,millis,synchronized,work,handle,monitor,try,while,work,handle,started,work,handle,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,return,system,current,time,millis,acceptance,time,else,return,work,manager,unknown
SimpleTaskWorkManager -> protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, 			boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) 			throws WorkException;1496259743;Execute the given Work on the specified TaskExecutor._@param taskExecutor the TaskExecutor to use_@param work the Work to execute_@param startTimeout the time duration within which the Work is supposed to start_@param blockUntilStarted whether to block until the Work has started_@param executionContext the JCA ExecutionContext for the given Work_@param workListener the WorkListener to clal for the given Work_@return the time elapsed from Work acceptance until start of execution_(or -1 if not applicable or not known)_@throws WorkException if the TaskExecutor did not accept the Work;protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout,_			boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener)_			throws WorkException {__		if (executionContext != null && executionContext.getXid() != null) {_			throw new WorkException("SimpleTaskWorkManager does not supported imported XIDs: " + executionContext.getXid())__		}_		WorkListener workListenerToUse = workListener__		if (workListenerToUse == null) {_			workListenerToUse = new WorkAdapter()__		}__		boolean isAsync = (taskExecutor instanceof AsyncTaskExecutor)__		DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)__		try {_			if (isAsync) {_				((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)__			}_			else {_				taskExecutor.execute(workHandle)__			}_		}_		catch (TaskTimeoutException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)__			wex.setErrorCode(WorkException.START_TIMED_OUT)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (TaskRejectedException ex) {_			WorkException wex = new WorkRejectedException("TaskExecutor rejected Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))__			throw wex__		}_		catch (Throwable ex) {_			WorkException wex = new WorkException("TaskExecutor failed to execute Work: " + work, ex)__			wex.setErrorCode(WorkException.INTERNAL)__			throw wex__		}_		if (isAsync) {_			workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))__		}__		if (blockUntilStarted) {_			long acceptanceTime = System.currentTimeMillis()__			synchronized (workHandle.monitor) {_				try {_					while (!workHandle.started) {_						workHandle.monitor.wait()__					}_				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__				}_			}_			return (System.currentTimeMillis() - acceptanceTime)__		}_		else {_			return WorkManager.UNKNOWN__		}_	};execute,the,given,work,on,the,specified,task,executor,param,task,executor,the,task,executor,to,use,param,work,the,work,to,execute,param,start,timeout,the,time,duration,within,which,the,work,is,supposed,to,start,param,block,until,started,whether,to,block,until,the,work,has,started,param,execution,context,the,jca,execution,context,for,the,given,work,param,work,listener,the,work,listener,to,clal,for,the,given,work,return,the,time,elapsed,from,work,acceptance,until,start,of,execution,or,1,if,not,applicable,or,not,known,throws,work,exception,if,the,task,executor,did,not,accept,the,work;protected,long,execute,work,task,executor,task,executor,work,work,long,start,timeout,boolean,block,until,started,execution,context,execution,context,work,listener,work,listener,throws,work,exception,if,execution,context,null,execution,context,get,xid,null,throw,new,work,exception,simple,task,work,manager,does,not,supported,imported,xids,execution,context,get,xid,work,listener,work,listener,to,use,work,listener,if,work,listener,to,use,null,work,listener,to,use,new,work,adapter,boolean,is,async,task,executor,instanceof,async,task,executor,delegating,work,adapter,work,handle,new,delegating,work,adapter,work,work,listener,to,use,is,async,try,if,is,async,async,task,executor,task,executor,execute,work,handle,start,timeout,else,task,executor,execute,work,handle,catch,task,timeout,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,because,of,timeout,work,ex,wex,set,error,code,work,exception,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,task,rejected,exception,ex,work,exception,wex,new,work,rejected,exception,task,executor,rejected,work,work,ex,wex,set,error,code,work,exception,internal,work,listener,to,use,work,rejected,new,work,event,this,work,event,work,wex,throw,wex,catch,throwable,ex,work,exception,wex,new,work,exception,task,executor,failed,to,execute,work,work,ex,wex,set,error,code,work,exception,internal,throw,wex,if,is,async,work,listener,to,use,work,accepted,new,work,event,this,work,event,work,null,if,block,until,started,long,acceptance,time,system,current,time,millis,synchronized,work,handle,monitor,try,while,work,handle,started,work,handle,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,return,system,current,time,millis,acceptance,time,else,return,work,manager,unknown
SimpleTaskWorkManager -> public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor);1328020251;Specify the TaskExecutor to use for <i>synchronous</i> work execution_(i.e. {@link #doWork} calls)._<p>Default is a {@link org.springframework.core.task.SyncTaskExecutor}.;public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor) {_		this.syncTaskExecutor = syncTaskExecutor__	};specify,the,task,executor,to,use,for,i,synchronous,i,work,execution,i,e,link,do,work,calls,p,default,is,a,link,org,springframework,core,task,sync,task,executor;public,void,set,sync,task,executor,task,executor,sync,task,executor,this,sync,task,executor,sync,task,executor
SimpleTaskWorkManager -> public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor);1356735495;Specify the TaskExecutor to use for <i>synchronous</i> work execution_(i.e. {@link #doWork} calls)._<p>Default is a {@link org.springframework.core.task.SyncTaskExecutor}.;public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor) {_		this.syncTaskExecutor = syncTaskExecutor__	};specify,the,task,executor,to,use,for,i,synchronous,i,work,execution,i,e,link,do,work,calls,p,default,is,a,link,org,springframework,core,task,sync,task,executor;public,void,set,sync,task,executor,task,executor,sync,task,executor,this,sync,task,executor,sync,task,executor
SimpleTaskWorkManager -> public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor);1357119239;Specify the TaskExecutor to use for <i>synchronous</i> work execution_(i.e. {@link #doWork} calls)._<p>Default is a {@link org.springframework.core.task.SyncTaskExecutor}.;public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor) {_		this.syncTaskExecutor = syncTaskExecutor__	};specify,the,task,executor,to,use,for,i,synchronous,i,work,execution,i,e,link,do,work,calls,p,default,is,a,link,org,springframework,core,task,sync,task,executor;public,void,set,sync,task,executor,task,executor,sync,task,executor,this,sync,task,executor,sync,task,executor
SimpleTaskWorkManager -> public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor);1368482696;Specify the TaskExecutor to use for <i>synchronous</i> work execution_(i.e. {@link #doWork} calls)._<p>Default is a {@link org.springframework.core.task.SyncTaskExecutor}.;public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor) {_		this.syncTaskExecutor = syncTaskExecutor__	};specify,the,task,executor,to,use,for,i,synchronous,i,work,execution,i,e,link,do,work,calls,p,default,is,a,link,org,springframework,core,task,sync,task,executor;public,void,set,sync,task,executor,task,executor,sync,task,executor,this,sync,task,executor,sync,task,executor
SimpleTaskWorkManager -> public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor);1467749899;Specify the TaskExecutor to use for <i>synchronous</i> work execution_(i.e. {@link #doWork} calls)._<p>Default is a {@link org.springframework.core.task.SyncTaskExecutor}.;public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor) {_		this.syncTaskExecutor = syncTaskExecutor__	};specify,the,task,executor,to,use,for,i,synchronous,i,work,execution,i,e,link,do,work,calls,p,default,is,a,link,org,springframework,core,task,sync,task,executor;public,void,set,sync,task,executor,task,executor,sync,task,executor,this,sync,task,executor,sync,task,executor
SimpleTaskWorkManager -> public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor);1496259743;Specify the TaskExecutor to use for <i>synchronous</i> work execution_(i.e. {@link #doWork} calls)._<p>Default is a {@link org.springframework.core.task.SyncTaskExecutor}.;public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor) {_		this.syncTaskExecutor = syncTaskExecutor__	};specify,the,task,executor,to,use,for,i,synchronous,i,work,execution,i,e,link,do,work,calls,p,default,is,a,link,org,springframework,core,task,sync,task,executor;public,void,set,sync,task,executor,task,executor,sync,task,executor,this,sync,task,executor,sync,task,executor
SimpleTaskWorkManager -> public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor);1496837955;Specify the TaskExecutor to use for <i>synchronous</i> work execution_(i.e. {@link #doWork} calls)._<p>Default is a {@link org.springframework.core.task.SyncTaskExecutor}.;public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor) {_		this.syncTaskExecutor = syncTaskExecutor__	};specify,the,task,executor,to,use,for,i,synchronous,i,work,execution,i,e,link,do,work,calls,p,default,is,a,link,org,springframework,core,task,sync,task,executor;public,void,set,sync,task,executor,task,executor,sync,task,executor,this,sync,task,executor,sync,task,executor
SimpleTaskWorkManager -> public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor);1498780456;Specify the TaskExecutor to use for <i>synchronous</i> work execution_(i.e. {@link #doWork} calls)._<p>Default is a {@link org.springframework.core.task.SyncTaskExecutor}.;public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor) {_		this.syncTaskExecutor = syncTaskExecutor__	};specify,the,task,executor,to,use,for,i,synchronous,i,work,execution,i,e,link,do,work,calls,p,default,is,a,link,org,springframework,core,task,sync,task,executor;public,void,set,sync,task,executor,task,executor,sync,task,executor,this,sync,task,executor,sync,task,executor
SimpleTaskWorkManager -> public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor);1530174524;Specify the TaskExecutor to use for <i>synchronous</i> work execution_(i.e. {@link #doWork} calls)._<p>Default is a {@link org.springframework.core.task.SyncTaskExecutor}.;public void setSyncTaskExecutor(TaskExecutor syncTaskExecutor) {_		this.syncTaskExecutor = syncTaskExecutor__	};specify,the,task,executor,to,use,for,i,synchronous,i,work,execution,i,e,link,do,work,calls,p,default,is,a,link,org,springframework,core,task,sync,task,executor;public,void,set,sync,task,executor,task,executor,sync,task,executor,this,sync,task,executor,sync,task,executor
