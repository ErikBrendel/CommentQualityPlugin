# id;timestamp;commentText;codeText;commentWords;codeWords
JtaTransactionManager -> protected Object retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1328020251;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns <code>null</code>._@return the JTA TransactionSynchronizationRegistry handle to use,_or <code>null</code> if none found_@throws TransactionSystemException in case of errors;protected Object retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,code,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,code,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,object,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected Object retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1356735495;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected Object retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,object,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected Object retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1357119239;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected Object retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,object,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> public void afterPropertiesSet() throws TransactionSystemException;1328020251;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> public void afterPropertiesSet() throws TransactionSystemException;1357119239;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> public void afterPropertiesSet() throws TransactionSystemException;1363696020;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> public void afterPropertiesSet() throws TransactionSystemException;1363701206;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1328020251;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1356735495;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1357119239;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1363696020;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1363701206;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1368482696;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1378223851;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1462275051;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1495868221;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1496242568;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1496837955;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1498780456;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1500448076;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1519732288;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1519772955;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1530174524;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1532091916;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> public void setTransactionManagerName(String transactionManagerName);1542899558;Set the JNDI name of the JTA TransactionManager._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManager_@see #setAutodetectTransactionManager;public void setTransactionManagerName(String transactionManagerName) {_		this.transactionManagerName = transactionManagerName__	};set,the,jndi,name,of,the,jta,transaction,manager,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,name,string,transaction,manager,name,this,transaction,manager,name,transaction,manager,name
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1328020251;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_			    "JtaTransactionManager does not support custom isolation levels by default - " +_				"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1356735495;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_				"JtaTransactionManager does not support custom isolation levels by default - " +_				"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1357119239;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_				"JtaTransactionManager does not support custom isolation levels by default - " +_				"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1363696020;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_				"JtaTransactionManager does not support custom isolation levels by default - " +_				"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1363701206;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_				"JtaTransactionManager does not support custom isolation levels by default - " +_				"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1368482696;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_				"JtaTransactionManager does not support custom isolation levels by default - " +_				"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1378223851;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_				"JtaTransactionManager does not support custom isolation levels by default - " +_				"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1462275051;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"JtaTransactionManager does not support custom isolation levels by default - " +_					"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1495868221;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"JtaTransactionManager does not support custom isolation levels by default - " +_					"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1496242568;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"JtaTransactionManager does not support custom isolation levels by default - " +_					"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1496837955;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"JtaTransactionManager does not support custom isolation levels by default - " +_					"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1498780456;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"JtaTransactionManager does not support custom isolation levels by default - " +_					"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1500448076;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"JtaTransactionManager does not support custom isolation levels by default - " +_					"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1519732288;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"JtaTransactionManager does not support custom isolation levels by default - " +_					"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1519772955;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"JtaTransactionManager does not support custom isolation levels by default - " +_					"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1530174524;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"JtaTransactionManager does not support custom isolation levels by default - " +_					"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1532091916;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"JtaTransactionManager does not support custom isolation levels by default - " +_					"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel) 			throws InvalidIsolationLevelException, SystemException;1542899558;Apply the given transaction isolation level. The default implementation_will throw an exception for any level other than ISOLATION_DEFAULT._<p>To be overridden in subclasses for specific JTA implementations,_as alternative to overriding the full {@link #doJtaBegin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param isolationLevel isolation level taken from transaction definition_@throws InvalidIsolationLevelException if the given isolation level_cannot be applied_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see #getTransactionManager();protected void applyIsolationLevel(JtaTransactionObject txObject, int isolationLevel)_			throws InvalidIsolationLevelException, SystemException {__		if (!this.allowCustomIsolationLevels && isolationLevel != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"JtaTransactionManager does not support custom isolation levels by default - " +_					"switch 'allowCustomIsolationLevels' to 'true'")__		}_	};apply,the,given,transaction,isolation,level,the,default,implementation,will,throw,an,exception,for,any,level,other,than,p,to,be,overridden,in,subclasses,for,specific,jta,implementations,as,alternative,to,overriding,the,full,link,do,jta,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,isolation,level,isolation,level,taken,from,transaction,definition,throws,invalid,isolation,level,exception,if,the,given,isolation,level,cannot,be,applied,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,get,transaction,manager;protected,void,apply,isolation,level,jta,transaction,object,tx,object,int,isolation,level,throws,invalid,isolation,level,exception,system,exception,if,this,allow,custom,isolation,levels,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,jta,transaction,manager,does,not,support,custom,isolation,levels,by,default,switch,allow,custom,isolation,levels,to,true
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1328020251;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1356735495;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1357119239;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1363696020;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1363701206;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1368482696;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1378223851;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1462275051;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1495868221;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1496242568;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1496837955;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1498780456;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1500448076;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1519732288;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1519772955;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1530174524;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1532091916;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> public void setAutodetectUserTransaction(boolean autodetectUserTransaction);1542899558;Set whether to autodetect the JTA UserTransaction at its default_JNDI location "java:comp/UserTransaction", as specified by Java EE._Will proceed without UserTransaction if none found._<p>Default is "true", autodetecting the UserTransaction unless_it has been specified explicitly. Turn this flag off to allow for_JtaTransactionManager operating against the TransactionManager only,_despite a default UserTransaction being available._@see #DEFAULT_USER_TRANSACTION_NAME;public void setAutodetectUserTransaction(boolean autodetectUserTransaction) {_		this.autodetectUserTransaction = autodetectUserTransaction__	};set,whether,to,autodetect,the,jta,user,transaction,at,its,default,jndi,location,java,comp,user,transaction,as,specified,by,java,ee,will,proceed,without,user,transaction,if,none,found,p,default,is,true,autodetecting,the,user,transaction,unless,it,has,been,specified,explicitly,turn,this,flag,off,to,allow,for,jta,transaction,manager,operating,against,the,transaction,manager,only,despite,a,default,user,transaction,being,available,see;public,void,set,autodetect,user,transaction,boolean,autodetect,user,transaction,this,autodetect,user,transaction,autodetect,user,transaction
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1328020251;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1356735495;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1357119239;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1363696020;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1363701206;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1368482696;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1378223851;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1462275051;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1495868221;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1496242568;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1496837955;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1498780456;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1500448076;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1519732288;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1519772955;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1530174524;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,info,enabled,logger,info,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1532091916;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,debug,enabled,logger,debug,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,debug,enabled,logger,debug,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> protected void checkUserTransactionAndTransactionManager() throws IllegalStateException;1542899558;Check the UserTransaction as well as the TransactionManager handle,_assuming standard JTA requirements._@throws IllegalStateException if no sufficient handles are available;protected void checkUserTransactionAndTransactionManager() throws IllegalStateException {_		_		if (this.userTransaction != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using JTA UserTransaction: " + this.userTransaction)__			}_		}_		else {_			throw new IllegalStateException("No JTA UserTransaction available - specify either " +_					"'userTransaction' or 'userTransactionName' or 'transactionManager' or 'transactionManagerName'")__		}__		_		if (this.transactionManager != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using JTA TransactionManager: " + this.transactionManager)__			}_		}_		else {_			logger.warn("No JTA TransactionManager found: transaction suspension not available")__		}_	};check,the,user,transaction,as,well,as,the,transaction,manager,handle,assuming,standard,jta,requirements,throws,illegal,state,exception,if,no,sufficient,handles,are,available;protected,void,check,user,transaction,and,transaction,manager,throws,illegal,state,exception,if,this,user,transaction,null,if,logger,is,debug,enabled,logger,debug,using,jta,user,transaction,this,user,transaction,else,throw,new,illegal,state,exception,no,jta,user,transaction,available,specify,either,user,transaction,or,user,transaction,name,or,transaction,manager,or,transaction,manager,name,if,this,transaction,manager,null,if,logger,is,debug,enabled,logger,debug,using,jta,transaction,manager,this,transaction,manager,else,logger,warn,no,jta,transaction,manager,found,transaction,suspension,not,available
JtaTransactionManager -> @Nullable 	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1495868221;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;@Nullable_	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;nullable,protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1496242568;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;@Nullable_	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;nullable,protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1496837955;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;@Nullable_	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;nullable,protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1498780456;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;@Nullable_	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;nullable,protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1500448076;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;@Nullable_	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;nullable,protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1519732288;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;@Nullable_	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;nullable,protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1519772955;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;@Nullable_	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;nullable,protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1530174524;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;@Nullable_	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;nullable,protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1532091916;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;@Nullable_	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;nullable,protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1542899558;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;@Nullable_	protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;nullable,protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1328020251;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1356735495;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1357119239;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1363696020;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1363701206;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1368482696;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1378223851;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1462275051;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1495868221;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1496242568;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1496837955;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1498780456;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1500448076;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1519732288;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1519772955;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1530174524;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1532091916;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels);1542899558;Set whether to allow custom isolation levels to be specified._<p>Default is "false", throwing an exception if a non-default isolation level_is specified for a transaction. Turn this flag on if affected resource adapters_check the thread-bound transaction context and apply the specified isolation_levels individually (e.g. through an IsolationLevelDataSourceAdapter)._@see org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter_@see org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter;public void setAllowCustomIsolationLevels(boolean allowCustomIsolationLevels) {_		this.allowCustomIsolationLevels = allowCustomIsolationLevels__	};set,whether,to,allow,custom,isolation,levels,to,be,specified,p,default,is,false,throwing,an,exception,if,a,non,default,isolation,level,is,specified,for,a,transaction,turn,this,flag,on,if,affected,resource,adapters,check,the,thread,bound,transaction,context,and,apply,the,specified,isolation,levels,individually,e,g,through,an,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,isolation,level,data,source,adapter,see,org,springframework,jdbc,datasource,lookup,isolation,level,data,source,router;public,void,set,allow,custom,isolation,levels,boolean,allow,custom,isolation,levels,this,allow,custom,isolation,levels,allow,custom,isolation,levels
JtaTransactionManager -> public TransactionManager getTransactionManager();1328020251;Return the JTA TransactionManager that this transaction manager uses.;public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses;public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> public TransactionManager getTransactionManager();1356735495;Return the JTA TransactionManager that this transaction manager uses.;public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses;public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> public TransactionManager getTransactionManager();1357119239;Return the JTA TransactionManager that this transaction manager uses.;public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses;public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> public TransactionManager getTransactionManager();1363696020;Return the JTA TransactionManager that this transaction manager uses.;public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses;public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> public TransactionManager getTransactionManager();1363701206;Return the JTA TransactionManager that this transaction manager uses.;public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses;public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> public TransactionManager getTransactionManager();1368482696;Return the JTA TransactionManager that this transaction manager uses.;public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses;public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> public TransactionManager getTransactionManager();1378223851;Return the JTA TransactionManager that this transaction manager uses, if any.;public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses,if,any;public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> public TransactionManager getTransactionManager();1462275051;Return the JTA TransactionManager that this transaction manager uses, if any.;public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses,if,any;public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> public void setJndiEnvironment(Properties jndiEnvironment);1328020251;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(Properties jndiEnvironment);1356735495;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(Properties jndiEnvironment);1357119239;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(Properties jndiEnvironment);1363696020;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(Properties jndiEnvironment);1363701206;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(Properties jndiEnvironment);1368482696;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(Properties jndiEnvironment);1378223851;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(Properties jndiEnvironment);1462275051;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(Properties jndiEnvironment);1495868221;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(Properties jndiEnvironment);1496242568;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(Properties jndiEnvironment);1496837955;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(Properties jndiEnvironment);1498780456;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> @Nullable 	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry();1495868221;Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.;@Nullable_	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {_		return this.transactionSynchronizationRegistry__	};return,the,jta,1,1,transaction,synchronization,registry,that,this,transaction,manager,uses,if,any;nullable,public,transaction,synchronization,registry,get,transaction,synchronization,registry,return,this,transaction,synchronization,registry
JtaTransactionManager -> @Nullable 	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry();1496242568;Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.;@Nullable_	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {_		return this.transactionSynchronizationRegistry__	};return,the,jta,1,1,transaction,synchronization,registry,that,this,transaction,manager,uses,if,any;nullable,public,transaction,synchronization,registry,get,transaction,synchronization,registry,return,this,transaction,synchronization,registry
JtaTransactionManager -> @Nullable 	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry();1496837955;Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.;@Nullable_	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {_		return this.transactionSynchronizationRegistry__	};return,the,jta,1,1,transaction,synchronization,registry,that,this,transaction,manager,uses,if,any;nullable,public,transaction,synchronization,registry,get,transaction,synchronization,registry,return,this,transaction,synchronization,registry
JtaTransactionManager -> @Nullable 	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry();1498780456;Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.;@Nullable_	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {_		return this.transactionSynchronizationRegistry__	};return,the,jta,1,1,transaction,synchronization,registry,that,this,transaction,manager,uses,if,any;nullable,public,transaction,synchronization,registry,get,transaction,synchronization,registry,return,this,transaction,synchronization,registry
JtaTransactionManager -> @Nullable 	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry();1500448076;Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.;@Nullable_	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {_		return this.transactionSynchronizationRegistry__	};return,the,jta,1,1,transaction,synchronization,registry,that,this,transaction,manager,uses,if,any;nullable,public,transaction,synchronization,registry,get,transaction,synchronization,registry,return,this,transaction,synchronization,registry
JtaTransactionManager -> @Nullable 	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry();1519732288;Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.;@Nullable_	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {_		return this.transactionSynchronizationRegistry__	};return,the,jta,1,1,transaction,synchronization,registry,that,this,transaction,manager,uses,if,any;nullable,public,transaction,synchronization,registry,get,transaction,synchronization,registry,return,this,transaction,synchronization,registry
JtaTransactionManager -> @Nullable 	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry();1519772955;Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.;@Nullable_	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {_		return this.transactionSynchronizationRegistry__	};return,the,jta,1,1,transaction,synchronization,registry,that,this,transaction,manager,uses,if,any;nullable,public,transaction,synchronization,registry,get,transaction,synchronization,registry,return,this,transaction,synchronization,registry
JtaTransactionManager -> @Nullable 	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry();1530174524;Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.;@Nullable_	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {_		return this.transactionSynchronizationRegistry__	};return,the,jta,1,1,transaction,synchronization,registry,that,this,transaction,manager,uses,if,any;nullable,public,transaction,synchronization,registry,get,transaction,synchronization,registry,return,this,transaction,synchronization,registry
JtaTransactionManager -> @Nullable 	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry();1532091916;Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.;@Nullable_	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {_		return this.transactionSynchronizationRegistry__	};return,the,jta,1,1,transaction,synchronization,registry,that,this,transaction,manager,uses,if,any;nullable,public,transaction,synchronization,registry,get,transaction,synchronization,registry,return,this,transaction,synchronization,registry
JtaTransactionManager -> @Nullable 	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry();1542899558;Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.;@Nullable_	public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {_		return this.transactionSynchronizationRegistry__	};return,the,jta,1,1,transaction,synchronization,registry,that,this,transaction,manager,uses,if,any;nullable,public,transaction,synchronization,registry,get,transaction,synchronization,registry,return,this,transaction,synchronization,registry
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1328020251;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1356735495;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1357119239;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1363696020;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1363701206;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1368482696;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1378223851;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1462275051;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1495868221;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1496242568;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1496837955;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1498780456;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1500448076;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1519732288;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1519772955;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1530174524;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1532091916;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setUserTransactionName(String userTransactionName);1542899558;Set the JNDI name of the JTA UserTransaction._<p>Note that the UserTransaction will be autodetected at the Java EE_default location "java:comp/UserTransaction" if not specified explicitly._@see #DEFAULT_USER_TRANSACTION_NAME_@see #setUserTransaction_@see #setAutodetectUserTransaction;public void setUserTransactionName(String userTransactionName) {_		this.userTransactionName = userTransactionName__	};set,the,jndi,name,of,the,jta,user,transaction,p,note,that,the,user,transaction,will,be,autodetected,at,the,java,ee,default,location,java,comp,user,transaction,if,not,specified,explicitly,see,see,set,user,transaction,see,set,autodetect,user,transaction;public,void,set,user,transaction,name,string,user,transaction,name,this,user,transaction,name,user,transaction,name
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1328020251;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1356735495;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1357119239;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1363696020;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1363701206;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1368482696;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1378223851;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1462275051;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1495868221;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1496242568;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1496837955;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1498780456;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1500448076;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1519732288;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1519772955;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1530174524;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1532091916;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> public void setAutodetectTransactionManager(boolean autodetectTransactionManager);1542899558;Set whether to autodetect a JTA UserTransaction object that implements_the JTA TransactionManager interface too (i.e. the JNDI location for the_TransactionManager is "java:comp/UserTransaction", same as for the UserTransaction)._Also checks the fallback JNDI locations "java:comp/TransactionManager" and_"java:/TransactionManager". Will proceed without TransactionManager if none found._<p>Default is "true", autodetecting the TransactionManager unless it has been_specified explicitly. Can be turned off to deliberately ignore an available_TransactionManager, for example when there are known issues with suspend/resume_and any attempt to use REQUIRES_NEW or NOT_SUPPORTED should fail fast._@see #FALLBACK_TRANSACTION_MANAGER_NAMES;public void setAutodetectTransactionManager(boolean autodetectTransactionManager) {_		this.autodetectTransactionManager = autodetectTransactionManager__	};set,whether,to,autodetect,a,jta,user,transaction,object,that,implements,the,jta,transaction,manager,interface,too,i,e,the,jndi,location,for,the,transaction,manager,is,java,comp,user,transaction,same,as,for,the,user,transaction,also,checks,the,fallback,jndi,locations,java,comp,transaction,manager,and,java,transaction,manager,will,proceed,without,transaction,manager,if,none,found,p,default,is,true,autodetecting,the,transaction,manager,unless,it,has,been,specified,explicitly,can,be,turned,off,to,deliberately,ignore,an,available,transaction,manager,for,example,when,there,are,known,issues,with,suspend,resume,and,any,attempt,to,use,or,should,fail,fast,see;public,void,set,autodetect,transaction,manager,boolean,autodetect,transaction,manager,this,autodetect,transaction,manager,autodetect,transaction,manager
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1328020251;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1356735495;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1357119239;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1363696020;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1363701206;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1368482696;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1378223851;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1462275051;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1495868221;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1496242568;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1496837955;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1498780456;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1500448076;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1519732288;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1519772955;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1530174524;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1532091916;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException;1542899558;Perform a JTA suspend on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@return the suspended JTA Transaction object_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#suspend();protected Object doJtaSuspend(JtaTransactionObject txObject) throws SystemException {_		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		return getTransactionManager().suspend()__	};perform,a,jta,suspend,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,return,the,suspended,jta,transaction,object,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,suspend;protected,object,do,jta,suspend,jta,transaction,object,tx,object,throws,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,return,get,transaction,manager,suspend
JtaTransactionManager -> protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm) 			throws TransactionSystemException;1363696020;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm)_			throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug(_							"No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,transaction,synchronization,registry,find,transaction,synchronization,registry,user,transaction,ut,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm) 			throws TransactionSystemException;1363701206;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm)_			throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug(_							"No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,transaction,synchronization,registry,find,transaction,synchronization,registry,user,transaction,ut,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm) 			throws TransactionSystemException;1368482696;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm)_			throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug(_							"No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,transaction,synchronization,registry,find,transaction,synchronization,registry,user,transaction,ut,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm) 			throws TransactionSystemException;1378223851;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm)_			throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug(_							"No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,transaction,synchronization,registry,find,transaction,synchronization,registry,user,transaction,ut,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm) 			throws TransactionSystemException;1462275051;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm)_			throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,transaction,synchronization,registry,find,transaction,synchronization,registry,user,transaction,ut,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1328020251;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1356735495;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1357119239;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1363696020;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1363701206;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1368482696;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1378223851;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1462275051;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1495868221;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1496242568;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1496837955;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1498780456;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1500448076;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1519732288;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1519772955;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1530174524;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1532091916;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(TransactionManager transactionManager);1542899558;Create a new JtaTransactionManager instance._@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(TransactionManager transactionManager) {_		this()__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.transactionManager = transactionManager__		this.userTransaction = buildUserTransaction(transactionManager)__	};create,a,new,jta,transaction,manager,instance,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,transaction,manager,transaction,manager,this,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,transaction,manager,transaction,manager,this,user,transaction,build,user,transaction,transaction,manager
JtaTransactionManager -> @Nullable 	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1495868221;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;@Nullable_	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;nullable,protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1496242568;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;@Nullable_	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;nullable,protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1496837955;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;@Nullable_	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;nullable,protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1498780456;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;@Nullable_	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;nullable,protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1500448076;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;@Nullable_	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;nullable,protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1519732288;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;@Nullable_	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;nullable,protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1519772955;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;@Nullable_	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;nullable,protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1530174524;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;@Nullable_	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;nullable,protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1532091916;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;@Nullable_	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;nullable,protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1542899558;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;@Nullable_	protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;nullable,protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> public JtaTransactionManager();1328020251;Create a new JtaTransactionManager instance, to be configured as bean._Invoke <code>afterPropertiesSet</code> to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,code,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1356735495;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1357119239;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1363696020;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1363701206;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1368482696;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1378223851;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1462275051;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1495868221;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1496242568;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1496837955;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1498780456;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1500448076;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1519732288;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1519772955;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1530174524;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1532091916;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> public JtaTransactionManager();1542899558;Create a new JtaTransactionManager instance, to be configured as bean._Invoke {@code afterPropertiesSet} to activate the configuration._@see #setUserTransactionName_@see #setUserTransaction_@see #setTransactionManagerName_@see #setTransactionManager_@see #afterPropertiesSet();public JtaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jta,transaction,manager,instance,to,be,configured,as,bean,invoke,code,after,properties,set,to,activate,the,configuration,see,set,user,transaction,name,see,set,user,transaction,see,set,transaction,manager,name,see,set,transaction,manager,see,after,properties,set;public,jta,transaction,manager,set,nested,transaction,allowed,true
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1328020251;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by <code>afterPropertiesSet</code> if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,code,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1356735495;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1357119239;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1363696020;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1363701206;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1368482696;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1378223851;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1462275051;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1495868221;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1496242568;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1496837955;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1498780456;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1500448076;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1519732288;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1519772955;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1530174524;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1532091916;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> protected UserTransaction lookupUserTransaction(String userTransactionName) 			throws TransactionSystemException;1542899558;Look up the JTA UserTransaction in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct UserTransaction reference was set._Can be overridden in subclasses to provide a different UserTransaction object._@param userTransactionName the JNDI name of the UserTransaction_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setUserTransactionName;protected UserTransaction lookupUserTransaction(String userTransactionName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]")__			}_			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA UserTransaction is not available at JNDI location [" + userTransactionName + "]", ex)__		}_	};look,up,the,jta,user,transaction,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,user,transaction,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,user,transaction,object,param,user,transaction,name,the,jndi,name,of,the,user,transaction,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,user,transaction,name;protected,user,transaction,lookup,user,transaction,string,user,transaction,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,user,transaction,from,jndi,location,user,transaction,name,return,get,jndi,template,lookup,user,transaction,name,user,transaction,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,user,transaction,is,not,available,at,jndi,location,user,transaction,name,ex
JtaTransactionManager -> public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry();1378223851;Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.;public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {_		return this.transactionSynchronizationRegistry__	};return,the,jta,1,1,transaction,synchronization,registry,that,this,transaction,manager,uses,if,any;public,transaction,synchronization,registry,get,transaction,synchronization,registry,return,this,transaction,synchronization,registry
JtaTransactionManager -> public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry();1462275051;Return the JTA 1.1 TransactionSynchronizationRegistry that this transaction manager uses, if any.;public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {_		return this.transactionSynchronizationRegistry__	};return,the,jta,1,1,transaction,synchronization,registry,that,this,transaction,manager,uses,if,any;public,transaction,synchronization,registry,get,transaction,synchronization,registry,return,this,transaction,synchronization,registry
JtaTransactionManager -> public void setUserTransaction(@Nullable UserTransaction userTransaction);1500448076;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(@Nullable UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,nullable,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(@Nullable UserTransaction userTransaction);1519732288;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(@Nullable UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,nullable,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(@Nullable UserTransaction userTransaction);1519772955;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(@Nullable UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,nullable,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(@Nullable UserTransaction userTransaction);1530174524;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(@Nullable UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,nullable,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(@Nullable UserTransaction userTransaction);1532091916;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(@Nullable UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,nullable,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(@Nullable UserTransaction userTransaction);1542899558;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(@Nullable UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,nullable,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm) 			throws TransactionSystemException;1495868221;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm)_			throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,find,transaction,synchronization,registry,user,transaction,ut,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm) 			throws TransactionSystemException;1496242568;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm)_			throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,find,transaction,synchronization,registry,user,transaction,ut,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm) 			throws TransactionSystemException;1496837955;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm)_			throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,find,transaction,synchronization,registry,user,transaction,ut,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry);1378223851;Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference._<p>A TransactionSynchronizationRegistry allows for interposed registration_of transaction synchronizations, as an alternative to the regular registration_methods on the JTA TransactionManager API. Also, it is an official part of the_Java EE 5 platform, in contrast to the JTA TransactionManager itself._<p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and_also from the UserTransaction/TransactionManager object if implemented there as well._@see #setTransactionSynchronizationRegistryName_@see #setAutodetectTransactionSynchronizationRegistry;public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry) {_		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry__	};set,the,jta,1,1,transaction,synchronization,registry,to,use,as,direct,reference,p,a,transaction,synchronization,registry,allows,for,interposed,registration,of,transaction,synchronizations,as,an,alternative,to,the,regular,registration,methods,on,the,jta,transaction,manager,api,also,it,is,an,official,part,of,the,java,ee,5,platform,in,contrast,to,the,jta,transaction,manager,itself,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,in,jndi,and,also,from,the,user,transaction,transaction,manager,object,if,implemented,there,as,well,see,set,transaction,synchronization,registry,name,see,set,autodetect,transaction,synchronization,registry;public,void,set,transaction,synchronization,registry,transaction,synchronization,registry,transaction,synchronization,registry,this,transaction,synchronization,registry,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry);1462275051;Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference._<p>A TransactionSynchronizationRegistry allows for interposed registration_of transaction synchronizations, as an alternative to the regular registration_methods on the JTA TransactionManager API. Also, it is an official part of the_Java EE 5 platform, in contrast to the JTA TransactionManager itself._<p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and_also from the UserTransaction/TransactionManager object if implemented there as well._@see #setTransactionSynchronizationRegistryName_@see #setAutodetectTransactionSynchronizationRegistry;public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry) {_		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry__	};set,the,jta,1,1,transaction,synchronization,registry,to,use,as,direct,reference,p,a,transaction,synchronization,registry,allows,for,interposed,registration,of,transaction,synchronizations,as,an,alternative,to,the,regular,registration,methods,on,the,jta,transaction,manager,api,also,it,is,an,official,part,of,the,java,ee,5,platform,in,contrast,to,the,jta,transaction,manager,itself,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,in,jndi,and,also,from,the,user,transaction,transaction,manager,object,if,implemented,there,as,well,see,set,transaction,synchronization,registry,name,see,set,autodetect,transaction,synchronization,registry;public,void,set,transaction,synchronization,registry,transaction,synchronization,registry,transaction,synchronization,registry,this,transaction,synchronization,registry,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry);1495868221;Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference._<p>A TransactionSynchronizationRegistry allows for interposed registration_of transaction synchronizations, as an alternative to the regular registration_methods on the JTA TransactionManager API. Also, it is an official part of the_Java EE 5 platform, in contrast to the JTA TransactionManager itself._<p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and_also from the UserTransaction/TransactionManager object if implemented there as well._@see #setTransactionSynchronizationRegistryName_@see #setAutodetectTransactionSynchronizationRegistry;public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry) {_		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry__	};set,the,jta,1,1,transaction,synchronization,registry,to,use,as,direct,reference,p,a,transaction,synchronization,registry,allows,for,interposed,registration,of,transaction,synchronizations,as,an,alternative,to,the,regular,registration,methods,on,the,jta,transaction,manager,api,also,it,is,an,official,part,of,the,java,ee,5,platform,in,contrast,to,the,jta,transaction,manager,itself,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,in,jndi,and,also,from,the,user,transaction,transaction,manager,object,if,implemented,there,as,well,see,set,transaction,synchronization,registry,name,see,set,autodetect,transaction,synchronization,registry;public,void,set,transaction,synchronization,registry,transaction,synchronization,registry,transaction,synchronization,registry,this,transaction,synchronization,registry,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry);1496242568;Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference._<p>A TransactionSynchronizationRegistry allows for interposed registration_of transaction synchronizations, as an alternative to the regular registration_methods on the JTA TransactionManager API. Also, it is an official part of the_Java EE 5 platform, in contrast to the JTA TransactionManager itself._<p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and_also from the UserTransaction/TransactionManager object if implemented there as well._@see #setTransactionSynchronizationRegistryName_@see #setAutodetectTransactionSynchronizationRegistry;public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry) {_		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry__	};set,the,jta,1,1,transaction,synchronization,registry,to,use,as,direct,reference,p,a,transaction,synchronization,registry,allows,for,interposed,registration,of,transaction,synchronizations,as,an,alternative,to,the,regular,registration,methods,on,the,jta,transaction,manager,api,also,it,is,an,official,part,of,the,java,ee,5,platform,in,contrast,to,the,jta,transaction,manager,itself,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,in,jndi,and,also,from,the,user,transaction,transaction,manager,object,if,implemented,there,as,well,see,set,transaction,synchronization,registry,name,see,set,autodetect,transaction,synchronization,registry;public,void,set,transaction,synchronization,registry,transaction,synchronization,registry,transaction,synchronization,registry,this,transaction,synchronization,registry,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry);1496837955;Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference._<p>A TransactionSynchronizationRegistry allows for interposed registration_of transaction synchronizations, as an alternative to the regular registration_methods on the JTA TransactionManager API. Also, it is an official part of the_Java EE 5 platform, in contrast to the JTA TransactionManager itself._<p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and_also from the UserTransaction/TransactionManager object if implemented there as well._@see #setTransactionSynchronizationRegistryName_@see #setAutodetectTransactionSynchronizationRegistry;public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry) {_		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry__	};set,the,jta,1,1,transaction,synchronization,registry,to,use,as,direct,reference,p,a,transaction,synchronization,registry,allows,for,interposed,registration,of,transaction,synchronizations,as,an,alternative,to,the,regular,registration,methods,on,the,jta,transaction,manager,api,also,it,is,an,official,part,of,the,java,ee,5,platform,in,contrast,to,the,jta,transaction,manager,itself,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,in,jndi,and,also,from,the,user,transaction,transaction,manager,object,if,implemented,there,as,well,see,set,transaction,synchronization,registry,name,see,set,autodetect,transaction,synchronization,registry;public,void,set,transaction,synchronization,registry,transaction,synchronization,registry,transaction,synchronization,registry,this,transaction,synchronization,registry,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry);1498780456;Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference._<p>A TransactionSynchronizationRegistry allows for interposed registration_of transaction synchronizations, as an alternative to the regular registration_methods on the JTA TransactionManager API. Also, it is an official part of the_Java EE 5 platform, in contrast to the JTA TransactionManager itself._<p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and_also from the UserTransaction/TransactionManager object if implemented there as well._@see #setTransactionSynchronizationRegistryName_@see #setAutodetectTransactionSynchronizationRegistry;public void setTransactionSynchronizationRegistry(TransactionSynchronizationRegistry transactionSynchronizationRegistry) {_		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry__	};set,the,jta,1,1,transaction,synchronization,registry,to,use,as,direct,reference,p,a,transaction,synchronization,registry,allows,for,interposed,registration,of,transaction,synchronizations,as,an,alternative,to,the,regular,registration,methods,on,the,jta,transaction,manager,api,also,it,is,an,official,part,of,the,java,ee,5,platform,in,contrast,to,the,jta,transaction,manager,itself,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,in,jndi,and,also,from,the,user,transaction,transaction,manager,object,if,implemented,there,as,well,see,set,transaction,synchronization,registry,name,see,set,autodetect,transaction,synchronization,registry;public,void,set,transaction,synchronization,registry,transaction,synchronization,registry,transaction,synchronization,registry,this,transaction,synchronization,registry,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionSynchronizationRegistry(@Nullable TransactionSynchronizationRegistry transactionSynchronizationRegistry);1500448076;Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference._<p>A TransactionSynchronizationRegistry allows for interposed registration_of transaction synchronizations, as an alternative to the regular registration_methods on the JTA TransactionManager API. Also, it is an official part of the_Java EE 5 platform, in contrast to the JTA TransactionManager itself._<p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and_also from the UserTransaction/TransactionManager object if implemented there as well._@see #setTransactionSynchronizationRegistryName_@see #setAutodetectTransactionSynchronizationRegistry;public void setTransactionSynchronizationRegistry(@Nullable TransactionSynchronizationRegistry transactionSynchronizationRegistry) {_		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry__	};set,the,jta,1,1,transaction,synchronization,registry,to,use,as,direct,reference,p,a,transaction,synchronization,registry,allows,for,interposed,registration,of,transaction,synchronizations,as,an,alternative,to,the,regular,registration,methods,on,the,jta,transaction,manager,api,also,it,is,an,official,part,of,the,java,ee,5,platform,in,contrast,to,the,jta,transaction,manager,itself,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,in,jndi,and,also,from,the,user,transaction,transaction,manager,object,if,implemented,there,as,well,see,set,transaction,synchronization,registry,name,see,set,autodetect,transaction,synchronization,registry;public,void,set,transaction,synchronization,registry,nullable,transaction,synchronization,registry,transaction,synchronization,registry,this,transaction,synchronization,registry,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionSynchronizationRegistry(@Nullable TransactionSynchronizationRegistry transactionSynchronizationRegistry);1519732288;Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference._<p>A TransactionSynchronizationRegistry allows for interposed registration_of transaction synchronizations, as an alternative to the regular registration_methods on the JTA TransactionManager API. Also, it is an official part of the_Java EE 5 platform, in contrast to the JTA TransactionManager itself._<p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and_also from the UserTransaction/TransactionManager object if implemented there as well._@see #setTransactionSynchronizationRegistryName_@see #setAutodetectTransactionSynchronizationRegistry;public void setTransactionSynchronizationRegistry(@Nullable TransactionSynchronizationRegistry transactionSynchronizationRegistry) {_		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry__	};set,the,jta,1,1,transaction,synchronization,registry,to,use,as,direct,reference,p,a,transaction,synchronization,registry,allows,for,interposed,registration,of,transaction,synchronizations,as,an,alternative,to,the,regular,registration,methods,on,the,jta,transaction,manager,api,also,it,is,an,official,part,of,the,java,ee,5,platform,in,contrast,to,the,jta,transaction,manager,itself,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,in,jndi,and,also,from,the,user,transaction,transaction,manager,object,if,implemented,there,as,well,see,set,transaction,synchronization,registry,name,see,set,autodetect,transaction,synchronization,registry;public,void,set,transaction,synchronization,registry,nullable,transaction,synchronization,registry,transaction,synchronization,registry,this,transaction,synchronization,registry,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionSynchronizationRegistry(@Nullable TransactionSynchronizationRegistry transactionSynchronizationRegistry);1519772955;Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference._<p>A TransactionSynchronizationRegistry allows for interposed registration_of transaction synchronizations, as an alternative to the regular registration_methods on the JTA TransactionManager API. Also, it is an official part of the_Java EE 5 platform, in contrast to the JTA TransactionManager itself._<p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and_also from the UserTransaction/TransactionManager object if implemented there as well._@see #setTransactionSynchronizationRegistryName_@see #setAutodetectTransactionSynchronizationRegistry;public void setTransactionSynchronizationRegistry(@Nullable TransactionSynchronizationRegistry transactionSynchronizationRegistry) {_		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry__	};set,the,jta,1,1,transaction,synchronization,registry,to,use,as,direct,reference,p,a,transaction,synchronization,registry,allows,for,interposed,registration,of,transaction,synchronizations,as,an,alternative,to,the,regular,registration,methods,on,the,jta,transaction,manager,api,also,it,is,an,official,part,of,the,java,ee,5,platform,in,contrast,to,the,jta,transaction,manager,itself,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,in,jndi,and,also,from,the,user,transaction,transaction,manager,object,if,implemented,there,as,well,see,set,transaction,synchronization,registry,name,see,set,autodetect,transaction,synchronization,registry;public,void,set,transaction,synchronization,registry,nullable,transaction,synchronization,registry,transaction,synchronization,registry,this,transaction,synchronization,registry,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionSynchronizationRegistry(@Nullable TransactionSynchronizationRegistry transactionSynchronizationRegistry);1530174524;Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference._<p>A TransactionSynchronizationRegistry allows for interposed registration_of transaction synchronizations, as an alternative to the regular registration_methods on the JTA TransactionManager API. Also, it is an official part of the_Java EE 5 platform, in contrast to the JTA TransactionManager itself._<p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and_also from the UserTransaction/TransactionManager object if implemented there as well._@see #setTransactionSynchronizationRegistryName_@see #setAutodetectTransactionSynchronizationRegistry;public void setTransactionSynchronizationRegistry(@Nullable TransactionSynchronizationRegistry transactionSynchronizationRegistry) {_		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry__	};set,the,jta,1,1,transaction,synchronization,registry,to,use,as,direct,reference,p,a,transaction,synchronization,registry,allows,for,interposed,registration,of,transaction,synchronizations,as,an,alternative,to,the,regular,registration,methods,on,the,jta,transaction,manager,api,also,it,is,an,official,part,of,the,java,ee,5,platform,in,contrast,to,the,jta,transaction,manager,itself,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,in,jndi,and,also,from,the,user,transaction,transaction,manager,object,if,implemented,there,as,well,see,set,transaction,synchronization,registry,name,see,set,autodetect,transaction,synchronization,registry;public,void,set,transaction,synchronization,registry,nullable,transaction,synchronization,registry,transaction,synchronization,registry,this,transaction,synchronization,registry,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionSynchronizationRegistry(@Nullable TransactionSynchronizationRegistry transactionSynchronizationRegistry);1532091916;Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference._<p>A TransactionSynchronizationRegistry allows for interposed registration_of transaction synchronizations, as an alternative to the regular registration_methods on the JTA TransactionManager API. Also, it is an official part of the_Java EE 5 platform, in contrast to the JTA TransactionManager itself._<p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and_also from the UserTransaction/TransactionManager object if implemented there as well._@see #setTransactionSynchronizationRegistryName_@see #setAutodetectTransactionSynchronizationRegistry;public void setTransactionSynchronizationRegistry(@Nullable TransactionSynchronizationRegistry transactionSynchronizationRegistry) {_		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry__	};set,the,jta,1,1,transaction,synchronization,registry,to,use,as,direct,reference,p,a,transaction,synchronization,registry,allows,for,interposed,registration,of,transaction,synchronizations,as,an,alternative,to,the,regular,registration,methods,on,the,jta,transaction,manager,api,also,it,is,an,official,part,of,the,java,ee,5,platform,in,contrast,to,the,jta,transaction,manager,itself,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,in,jndi,and,also,from,the,user,transaction,transaction,manager,object,if,implemented,there,as,well,see,set,transaction,synchronization,registry,name,see,set,autodetect,transaction,synchronization,registry;public,void,set,transaction,synchronization,registry,nullable,transaction,synchronization,registry,transaction,synchronization,registry,this,transaction,synchronization,registry,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionSynchronizationRegistry(@Nullable TransactionSynchronizationRegistry transactionSynchronizationRegistry);1542899558;Set the JTA 1.1 TransactionSynchronizationRegistry to use as direct reference._<p>A TransactionSynchronizationRegistry allows for interposed registration_of transaction synchronizations, as an alternative to the regular registration_methods on the JTA TransactionManager API. Also, it is an official part of the_Java EE 5 platform, in contrast to the JTA TransactionManager itself._<p>Note that the TransactionSynchronizationRegistry will be autodetected in JNDI and_also from the UserTransaction/TransactionManager object if implemented there as well._@see #setTransactionSynchronizationRegistryName_@see #setAutodetectTransactionSynchronizationRegistry;public void setTransactionSynchronizationRegistry(@Nullable TransactionSynchronizationRegistry transactionSynchronizationRegistry) {_		this.transactionSynchronizationRegistry = transactionSynchronizationRegistry__	};set,the,jta,1,1,transaction,synchronization,registry,to,use,as,direct,reference,p,a,transaction,synchronization,registry,allows,for,interposed,registration,of,transaction,synchronizations,as,an,alternative,to,the,regular,registration,methods,on,the,jta,transaction,manager,api,also,it,is,an,official,part,of,the,java,ee,5,platform,in,contrast,to,the,jta,transaction,manager,itself,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,in,jndi,and,also,from,the,user,transaction,transaction,manager,object,if,implemented,there,as,well,see,set,transaction,synchronization,registry,name,see,set,autodetect,transaction,synchronization,registry;public,void,set,transaction,synchronization,registry,nullable,transaction,synchronization,registry,transaction,synchronization,registry,this,transaction,synchronization,registry,transaction,synchronization,registry
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1328020251;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1356735495;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1357119239;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1363696020;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1363701206;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1368482696;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1378223851;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1462275051;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1495868221;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1496242568;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1496837955;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1498780456;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1500448076;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1519732288;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1519772955;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1530174524;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1532091916;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1542899558;This implementation returns "true": a JTA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jta,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1328020251;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls <code>applyIsolationLevel</code> and <code>applyTimeout</code>_before invoking the UserTransaction's <code>begin</code> method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,code,and,code,apply,timeout,code,before,invoking,the,user,transaction,s,code,begin,code,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1356735495;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1357119239;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1363696020;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1363701206;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1368482696;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1378223851;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1462275051;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1495868221;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1496242568;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1496837955;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1498780456;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1500448076;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1519732288;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1519772955;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1530174524;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition the TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,the,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1532091916;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition the TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,the,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) 			throws NotSupportedException, SystemException;1542899558;Perform a JTA begin on the JTA UserTransaction or TransactionManager._<p>This implementation only supports standard JTA functionality:_that is, no per-transaction isolation levels and no transaction names._Can be overridden in subclasses, for specific JTA implementations._<p>Calls {@code applyIsolationLevel} and {@code applyTimeout}_before invoking the UserTransaction's {@code begin} method._@param txObject the JtaTransactionObject containing the UserTransaction_@param definition the TransactionDefinition instance, describing propagation_behavior, isolation level, read-only flag, timeout, and transaction name_@throws NotSupportedException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getUserTransaction_@see #getTransactionManager_@see #applyIsolationLevel_@see #applyTimeout_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout_@see javax.transaction.UserTransaction#begin;protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition)_			throws NotSupportedException, SystemException {__		applyIsolationLevel(txObject, definition.getIsolationLevel())__		int timeout = determineTimeout(definition)__		applyTimeout(txObject, timeout)__		txObject.getUserTransaction().begin()__	};perform,a,jta,begin,on,the,jta,user,transaction,or,transaction,manager,p,this,implementation,only,supports,standard,jta,functionality,that,is,no,per,transaction,isolation,levels,and,no,transaction,names,can,be,overridden,in,subclasses,for,specific,jta,implementations,p,calls,code,apply,isolation,level,and,code,apply,timeout,before,invoking,the,user,transaction,s,code,begin,method,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,definition,the,transaction,definition,instance,describing,propagation,behavior,isolation,level,read,only,flag,timeout,and,transaction,name,throws,not,supported,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,user,transaction,see,get,transaction,manager,see,apply,isolation,level,see,apply,timeout,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,see,javax,transaction,user,transaction,begin;protected,void,do,jta,begin,jta,transaction,object,tx,object,transaction,definition,definition,throws,not,supported,exception,system,exception,apply,isolation,level,tx,object,definition,get,isolation,level,int,timeout,determine,timeout,definition,apply,timeout,tx,object,timeout,tx,object,get,user,transaction,begin
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1328020251;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1356735495;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1357119239;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1363696020;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1363701206;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1368482696;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1378223851;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1462275051;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1495868221;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1496242568;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1496837955;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1498780456;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1500448076;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1519732288;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1519772955;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1530174524;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1532091916;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction);1542899558;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,this,user,transaction,user,transaction
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1328020251;Apply the given transaction timeout. The default implementation will call_<code>UserTransaction.setTransactionTimeout</code> for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,code,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1356735495;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1357119239;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1363696020;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1363701206;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1368482696;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1378223851;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1462275051;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__			if (timeout > 0) {_				txObject.resetTransactionTimeout = true__			}_		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout,if,timeout,0,tx,object,reset,transaction,timeout,true
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1495868221;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__			if (timeout > 0) {_				txObject.resetTransactionTimeout = true__			}_		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout,if,timeout,0,tx,object,reset,transaction,timeout,true
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1496242568;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__			if (timeout > 0) {_				txObject.resetTransactionTimeout = true__			}_		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout,if,timeout,0,tx,object,reset,transaction,timeout,true
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1496837955;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__			if (timeout > 0) {_				txObject.resetTransactionTimeout = true__			}_		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout,if,timeout,0,tx,object,reset,transaction,timeout,true
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1498780456;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__			if (timeout > 0) {_				txObject.resetTransactionTimeout = true__			}_		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout,if,timeout,0,tx,object,reset,transaction,timeout,true
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1500448076;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__			if (timeout > 0) {_				txObject.resetTransactionTimeout = true__			}_		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout,if,timeout,0,tx,object,reset,transaction,timeout,true
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1519732288;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__			if (timeout > 0) {_				txObject.resetTransactionTimeout = true__			}_		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout,if,timeout,0,tx,object,reset,transaction,timeout,true
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1519772955;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__			if (timeout > 0) {_				txObject.resetTransactionTimeout = true__			}_		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout,if,timeout,0,tx,object,reset,transaction,timeout,true
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1530174524;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__			if (timeout > 0) {_				txObject.resetTransactionTimeout = true__			}_		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout,if,timeout,0,tx,object,reset,transaction,timeout,true
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1532091916;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__			if (timeout > 0) {_				txObject.resetTransactionTimeout = true__			}_		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout,if,timeout,0,tx,object,reset,transaction,timeout,true
JtaTransactionManager -> protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException;1542899558;Apply the given transaction timeout. The default implementation will call_{@code UserTransaction.setTransactionTimeout} for a non-default timeout value._@param txObject the JtaTransactionObject containing the UserTransaction_@param timeout timeout value taken from transaction definition_@throws SystemException if thrown by the JTA implementation_@see #doJtaBegin_@see JtaTransactionObject#getUserTransaction()_@see javax.transaction.UserTransaction#setTransactionTimeout(int);protected void applyTimeout(JtaTransactionObject txObject, int timeout) throws SystemException {_		if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {_			txObject.getUserTransaction().setTransactionTimeout(timeout)__			if (timeout > 0) {_				txObject.resetTransactionTimeout = true__			}_		}_	};apply,the,given,transaction,timeout,the,default,implementation,will,call,code,user,transaction,set,transaction,timeout,for,a,non,default,timeout,value,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,timeout,timeout,value,taken,from,transaction,definition,throws,system,exception,if,thrown,by,the,jta,implementation,see,do,jta,begin,see,jta,transaction,object,get,user,transaction,see,javax,transaction,user,transaction,set,transaction,timeout,int;protected,void,apply,timeout,jta,transaction,object,tx,object,int,timeout,throws,system,exception,if,timeout,transaction,definition,tx,object,get,user,transaction,set,transaction,timeout,timeout,if,timeout,0,tx,object,reset,transaction,timeout,true
JtaTransactionManager -> @Nullable 	public TransactionManager getTransactionManager();1495868221;Return the JTA TransactionManager that this transaction manager uses, if any.;@Nullable_	public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses,if,any;nullable,public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> @Nullable 	public TransactionManager getTransactionManager();1496242568;Return the JTA TransactionManager that this transaction manager uses, if any.;@Nullable_	public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses,if,any;nullable,public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> @Nullable 	public TransactionManager getTransactionManager();1496837955;Return the JTA TransactionManager that this transaction manager uses, if any.;@Nullable_	public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses,if,any;nullable,public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> @Nullable 	public TransactionManager getTransactionManager();1498780456;Return the JTA TransactionManager that this transaction manager uses, if any.;@Nullable_	public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses,if,any;nullable,public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> @Nullable 	public TransactionManager getTransactionManager();1500448076;Return the JTA TransactionManager that this transaction manager uses, if any.;@Nullable_	public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses,if,any;nullable,public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> @Nullable 	public TransactionManager getTransactionManager();1519732288;Return the JTA TransactionManager that this transaction manager uses, if any.;@Nullable_	public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses,if,any;nullable,public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> @Nullable 	public TransactionManager getTransactionManager();1519772955;Return the JTA TransactionManager that this transaction manager uses, if any.;@Nullable_	public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses,if,any;nullable,public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> @Nullable 	public TransactionManager getTransactionManager();1530174524;Return the JTA TransactionManager that this transaction manager uses, if any.;@Nullable_	public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses,if,any;nullable,public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> @Nullable 	public TransactionManager getTransactionManager();1532091916;Return the JTA TransactionManager that this transaction manager uses, if any.;@Nullable_	public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses,if,any;nullable,public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> @Nullable 	public TransactionManager getTransactionManager();1542899558;Return the JTA TransactionManager that this transaction manager uses, if any.;@Nullable_	public TransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,jta,transaction,manager,that,this,transaction,manager,uses,if,any;nullable,public,transaction,manager,get,transaction,manager,return,this,transaction,manager
JtaTransactionManager -> protected TransactionManager findTransactionManager(UserTransaction ut);1328020251;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or <code>null</code> if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,code,if,not,found,see;protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected TransactionManager findTransactionManager(UserTransaction ut);1356735495;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected TransactionManager findTransactionManager(UserTransaction ut);1357119239;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected TransactionManager findTransactionManager(UserTransaction ut);1363696020;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected TransactionManager findTransactionManager(UserTransaction ut);1363701206;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected TransactionManager findTransactionManager(UserTransaction ut);1368482696;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected TransactionManager findTransactionManager(UserTransaction ut);1378223851;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected TransactionManager findTransactionManager(UserTransaction ut);1462275051;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected Object lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1328020251;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected Object lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		if (transactionSynchronizationRegistryClass == null) {_			throw new TransactionSystemException(_					"JTA 1.1 [" + TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME + "] API not available")__		}_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, transactionSynchronizationRegistryClass)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,object,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,if,transaction,synchronization,registry,class,null,throw,new,transaction,system,exception,jta,1,1,api,not,available,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected Object lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1356735495;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected Object lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		if (transactionSynchronizationRegistryClass == null) {_			throw new TransactionSystemException(_					"JTA 1.1 [" + TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME + "] API not available")__		}_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, transactionSynchronizationRegistryClass)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,object,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,if,transaction,synchronization,registry,class,null,throw,new,transaction,system,exception,jta,1,1,api,not,available,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected Object lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1357119239;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected Object lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		if (transactionSynchronizationRegistryClass == null) {_			throw new TransactionSystemException(_					"JTA 1.1 [" + TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME + "] API not available")__		}_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, transactionSynchronizationRegistryClass)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,object,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,if,transaction,synchronization,registry,class,null,throw,new,transaction,system,exception,jta,1,1,api,not,available,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1328020251;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1356735495;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1357119239;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1363696020;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1363701206;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1368482696;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1378223851;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1462275051;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1495868221;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1496242568;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1496837955;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1498780456;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1500448076;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1519732288;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1519772955;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1530174524;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1532091916;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut);1542899558;Get a JTA transaction object for the given current UserTransaction._<p>Subclasses can override this to provide a JtaTransactionObject_subclass, for example holding some additional JTA handle needed._@param ut the UserTransaction handle to use for the current transaction_@return the JtaTransactionObject holding the UserTransaction;protected JtaTransactionObject doGetJtaTransaction(UserTransaction ut) {_		return new JtaTransactionObject(ut)__	};get,a,jta,transaction,object,for,the,given,current,user,transaction,p,subclasses,can,override,this,to,provide,a,jta,transaction,object,subclass,for,example,holding,some,additional,jta,handle,needed,param,ut,the,user,transaction,handle,to,use,for,the,current,transaction,return,the,jta,transaction,object,holding,the,user,transaction;protected,jta,transaction,object,do,get,jta,transaction,user,transaction,ut,return,new,jta,transaction,object,ut
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1328020251;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1356735495;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1357119239;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1363696020;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1363701206;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1368482696;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1378223851;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1462275051;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1495868221;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1496242568;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1496837955;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1498780456;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1500448076;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1519732288;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1519772955;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1530174524;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1532091916;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setJndiTemplate(JndiTemplate jndiTemplate);1542899558;Set the JndiTemplate to use for JNDI lookups._A default one is used if not set.;public void setJndiTemplate(JndiTemplate jndiTemplate) {_		Assert.notNull(jndiTemplate, "JndiTemplate must not be null")__		this.jndiTemplate = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,a,default,one,is,used,if,not,set;public,void,set,jndi,template,jndi,template,jndi,template,assert,not,null,jndi,template,jndi,template,must,not,be,null,this,jndi,template,jndi,template
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1328020251;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1356735495;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1357119239;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1363696020;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1363701206;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1368482696;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1378223851;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1462275051;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1495868221;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1496242568;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1496837955;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1498780456;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1500448076;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1519732288;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1519772955;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1530174524;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1532091916;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName);1542899558;Set the JNDI name of the JTA 1.1 TransactionSynchronizationRegistry._<p>Note that the TransactionSynchronizationRegistry will be autodetected_at the Java EE 5 default location "java:comp/TransactionSynchronizationRegistry"_if not specified explicitly._@see #DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME;public void setTransactionSynchronizationRegistryName(String transactionSynchronizationRegistryName) {_		this.transactionSynchronizationRegistryName = transactionSynchronizationRegistryName__	};set,the,jndi,name,of,the,jta,1,1,transaction,synchronization,registry,p,note,that,the,transaction,synchronization,registry,will,be,autodetected,at,the,java,ee,5,default,location,java,comp,transaction,synchronization,registry,if,not,specified,explicitly,see;public,void,set,transaction,synchronization,registry,name,string,transaction,synchronization,registry,name,this,transaction,synchronization,registry,name,transaction,synchronization,registry,name
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1356735495;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1368482696;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1378223851;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1462275051;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1495868221;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1496242568;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1496837955;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1498780456;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1500448076;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1519732288;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1519772955;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1530174524;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1532091916;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> @Override 	public void afterPropertiesSet() throws TransactionSystemException;1542899558;Initialize the UserTransaction as well as the TransactionManager handle._@see #initUserTransactionAndTransactionManager();@Override_	public void afterPropertiesSet() throws TransactionSystemException {_		initUserTransactionAndTransactionManager()__		checkUserTransactionAndTransactionManager()__		initTransactionSynchronizationRegistry()__	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,see,init,user,transaction,and,transaction,manager;override,public,void,after,properties,set,throws,transaction,system,exception,init,user,transaction,and,transaction,manager,check,user,transaction,and,transaction,manager,init,transaction,synchronization,registry
JtaTransactionManager -> public UserTransaction getUserTransaction();1328020251;Return the JTA UserTransaction that this transaction manager uses.;public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> public UserTransaction getUserTransaction();1356735495;Return the JTA UserTransaction that this transaction manager uses.;public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> public UserTransaction getUserTransaction();1357119239;Return the JTA UserTransaction that this transaction manager uses.;public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> public UserTransaction getUserTransaction();1363696020;Return the JTA UserTransaction that this transaction manager uses.;public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> public UserTransaction getUserTransaction();1363701206;Return the JTA UserTransaction that this transaction manager uses.;public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> public UserTransaction getUserTransaction();1368482696;Return the JTA UserTransaction that this transaction manager uses.;public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> public UserTransaction getUserTransaction();1378223851;Return the JTA UserTransaction that this transaction manager uses.;public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> public UserTransaction getUserTransaction();1462275051;Return the JTA UserTransaction that this transaction manager uses.;public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> public UserTransaction getUserTransaction();1495868221;Return the JTA UserTransaction that this transaction manager uses.;public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> public UserTransaction getUserTransaction();1496242568;Return the JTA UserTransaction that this transaction manager uses.;public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> public void setJndiEnvironment(@Nullable Properties jndiEnvironment);1500448076;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(@Nullable Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,nullable,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(@Nullable Properties jndiEnvironment);1519732288;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(@Nullable Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,nullable,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(@Nullable Properties jndiEnvironment);1519772955;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(@Nullable Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,nullable,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(@Nullable Properties jndiEnvironment);1530174524;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(@Nullable Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,nullable,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(@Nullable Properties jndiEnvironment);1532091916;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(@Nullable Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,nullable,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> public void setJndiEnvironment(@Nullable Properties jndiEnvironment);1542899558;Set the JNDI environment to use for JNDI lookups._Creates a JndiTemplate with the given environment settings._@see #setJndiTemplate;public void setJndiEnvironment(@Nullable Properties jndiEnvironment) {_		this.jndiTemplate = new JndiTemplate(jndiEnvironment)__	};set,the,jndi,environment,to,use,for,jndi,lookups,creates,a,jndi,template,with,the,given,environment,settings,see,set,jndi,template;public,void,set,jndi,environment,nullable,properties,jndi,environment,this,jndi,template,new,jndi,template,jndi,environment
JtaTransactionManager -> protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1328020251;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns <code>null</code>._@return the JTA UserTransaction handle to use, or <code>null</code> if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,code,return,the,jta,user,transaction,handle,to,use,or,code,null,code,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1356735495;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1357119239;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1363696020;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1363701206;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1368482696;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1378223851;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected UserTransaction retrieveUserTransaction() throws TransactionSystemException;1462275051;Allows subclasses to retrieve the JTA UserTransaction in a vendor-specific manner._Only called if no "userTransaction" or "userTransactionName" specified._<p>The default implementation simply returns {@code null}._@return the JTA UserTransaction handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setUserTransaction_@see #setUserTransactionName;protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,user,transaction,in,a,vendor,specific,manner,only,called,if,no,user,transaction,or,user,transaction,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,user,transaction,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,user,transaction,see,set,user,transaction,name;protected,user,transaction,retrieve,user,transaction,throws,transaction,system,exception,return,null
JtaTransactionManager -> public void setTransactionManager(TransactionManager transactionManager);1328020251;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(TransactionManager transactionManager);1356735495;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(TransactionManager transactionManager);1357119239;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(TransactionManager transactionManager);1363696020;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(TransactionManager transactionManager);1363701206;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(TransactionManager transactionManager);1368482696;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(TransactionManager transactionManager);1378223851;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(TransactionManager transactionManager);1462275051;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(TransactionManager transactionManager);1495868221;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(TransactionManager transactionManager);1496242568;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(TransactionManager transactionManager);1496837955;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(TransactionManager transactionManager);1498780456;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1328020251;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1356735495;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1357119239;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1363696020;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1363701206;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1368482696;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1378223851;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1462275051;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1495868221;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1496242568;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1496837955;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1498780456;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1500448076;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1519732288;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1519772955;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1530174524;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1532091916;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public void setCacheUserTransaction(boolean cacheUserTransaction);1542899558;Set whether to cache the JTA UserTransaction object fetched from JNDI._<p>Default is "true": UserTransaction lookup will only happen at startup,_reusing the same UserTransaction handle for all transactions of all threads._This is the most efficient choice for all application servers that provide_a shared UserTransaction object (the typical case)._<p>Turn this flag off to enforce a fresh lookup of the UserTransaction_for every transaction. This is only necessary for application servers_that return a new UserTransaction for every transaction, keeping state_tied to the UserTransaction object itself rather than the current thread._@see #setUserTransactionName;public void setCacheUserTransaction(boolean cacheUserTransaction) {_		this.cacheUserTransaction = cacheUserTransaction__	};set,whether,to,cache,the,jta,user,transaction,object,fetched,from,jndi,p,default,is,true,user,transaction,lookup,will,only,happen,at,startup,reusing,the,same,user,transaction,handle,for,all,transactions,of,all,threads,this,is,the,most,efficient,choice,for,all,application,servers,that,provide,a,shared,user,transaction,object,the,typical,case,p,turn,this,flag,off,to,enforce,a,fresh,lookup,of,the,user,transaction,for,every,transaction,this,is,only,necessary,for,application,servers,that,return,a,new,user,transaction,for,every,transaction,keeping,state,tied,to,the,user,transaction,object,itself,rather,than,the,current,thread,see,set,user,transaction,name;public,void,set,cache,user,transaction,boolean,cache,user,transaction,this,cache,user,transaction,cache,user,transaction
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1328020251;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1356735495;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1357119239;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1363696020;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1363701206;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1368482696;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1378223851;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1462275051;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1495868221;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1496242568;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1496837955;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1498780456;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1500448076;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1519732288;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1519772955;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1530174524;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1532091916;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> public JndiTemplate getJndiTemplate();1542899558;Return the JndiTemplate used for JNDI lookups.;public JndiTemplate getJndiTemplate() {_		return this.jndiTemplate__	};return,the,jndi,template,used,for,jndi,lookups;public,jndi,template,get,jndi,template,return,this,jndi,template
JtaTransactionManager -> @Nullable 	public UserTransaction getUserTransaction();1496837955;Return the JTA UserTransaction that this transaction manager uses.;@Nullable_	public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;nullable,public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> @Nullable 	public UserTransaction getUserTransaction();1498780456;Return the JTA UserTransaction that this transaction manager uses.;@Nullable_	public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;nullable,public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> @Nullable 	public UserTransaction getUserTransaction();1500448076;Return the JTA UserTransaction that this transaction manager uses.;@Nullable_	public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;nullable,public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> @Nullable 	public UserTransaction getUserTransaction();1519732288;Return the JTA UserTransaction that this transaction manager uses.;@Nullable_	public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;nullable,public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> @Nullable 	public UserTransaction getUserTransaction();1519772955;Return the JTA UserTransaction that this transaction manager uses.;@Nullable_	public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;nullable,public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> @Nullable 	public UserTransaction getUserTransaction();1530174524;Return the JTA UserTransaction that this transaction manager uses.;@Nullable_	public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;nullable,public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> @Nullable 	public UserTransaction getUserTransaction();1532091916;Return the JTA UserTransaction that this transaction manager uses.;@Nullable_	public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;nullable,public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> @Nullable 	public UserTransaction getUserTransaction();1542899558;Return the JTA UserTransaction that this transaction manager uses.;@Nullable_	public UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,that,this,transaction,manager,uses;nullable,public,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1328020251;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by <code>afterPropertiesSet</code> if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,code,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1356735495;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1357119239;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1363696020;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1363701206;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1368482696;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1378223851;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1462275051;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1495868221;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1496242568;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1496837955;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1498780456;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1500448076;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1519732288;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1519772955;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1530174524;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1532091916;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> protected TransactionManager lookupTransactionManager(String transactionManagerName) 			throws TransactionSystemException;1542899558;Look up the JTA TransactionManager in JNDI via the configured name._<p>Called by {@code afterPropertiesSet} if no direct TransactionManager reference was set._Can be overridden in subclasses to provide a different TransactionManager object._@param transactionManagerName the JNDI name of the TransactionManager_@return the UserTransaction object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionManagerName;protected TransactionManager lookupTransactionManager(String transactionManagerName)_			throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]")__			}_			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionManager is not available at JNDI location [" + transactionManagerName + "]", ex)__		}_	};look,up,the,jta,transaction,manager,in,jndi,via,the,configured,name,p,called,by,code,after,properties,set,if,no,direct,transaction,manager,reference,was,set,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,transaction,manager,name,the,jndi,name,of,the,transaction,manager,return,the,user,transaction,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,manager,name;protected,transaction,manager,lookup,transaction,manager,string,transaction,manager,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,manager,from,jndi,location,transaction,manager,name,return,get,jndi,template,lookup,transaction,manager,name,transaction,manager,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,manager,is,not,available,at,jndi,location,transaction,manager,name,ex
JtaTransactionManager -> @Nullable 	public Properties getJndiEnvironment();1496837955;Return the JNDI environment to use for JNDI lookups.;@Nullable_	public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;nullable,public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> @Nullable 	public Properties getJndiEnvironment();1498780456;Return the JNDI environment to use for JNDI lookups.;@Nullable_	public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;nullable,public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> @Nullable 	public Properties getJndiEnvironment();1500448076;Return the JNDI environment to use for JNDI lookups.;@Nullable_	public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;nullable,public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> @Nullable 	public Properties getJndiEnvironment();1519732288;Return the JNDI environment to use for JNDI lookups.;@Nullable_	public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;nullable,public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> @Nullable 	public Properties getJndiEnvironment();1519772955;Return the JNDI environment to use for JNDI lookups.;@Nullable_	public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;nullable,public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> @Nullable 	public Properties getJndiEnvironment();1530174524;Return the JNDI environment to use for JNDI lookups.;@Nullable_	public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;nullable,public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> @Nullable 	public Properties getJndiEnvironment();1532091916;Return the JNDI environment to use for JNDI lookups.;@Nullable_	public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;nullable,public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> @Nullable 	public Properties getJndiEnvironment();1542899558;Return the JNDI environment to use for JNDI lookups.;@Nullable_	public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;nullable,public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry( 			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException;1498780456;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(_			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,find,transaction,synchronization,registry,nullable,user,transaction,ut,nullable,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry( 			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException;1500448076;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(_			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,find,transaction,synchronization,registry,nullable,user,transaction,ut,nullable,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry( 			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException;1519732288;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(_			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,find,transaction,synchronization,registry,nullable,user,transaction,ut,nullable,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry( 			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException;1519772955;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(_			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,find,transaction,synchronization,registry,nullable,user,transaction,ut,nullable,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry( 			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException;1530174524;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(_			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,find,transaction,synchronization,registry,nullable,user,transaction,ut,nullable,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry( 			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException;1532091916;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(_			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,find,transaction,synchronization,registry,nullable,user,transaction,ut,nullable,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry( 			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException;1542899558;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry findTransactionSynchronizationRegistry(_			@Nullable UserTransaction ut, @Nullable TransactionManager tm) throws TransactionSystemException {__		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				TransactionSynchronizationRegistry tsr = getJndiTemplate().lookup(jndiName, TransactionSynchronizationRegistry.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (ut instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) ut__		}_		if (tm instanceof TransactionSynchronizationRegistry) {_			return (TransactionSynchronizationRegistry) tm__		}_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,find,transaction,synchronization,registry,nullable,user,transaction,ut,nullable,transaction,manager,tm,throws,transaction,system,exception,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,transaction,synchronization,registry,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,ut,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,ut,if,tm,instanceof,transaction,synchronization,registry,return,transaction,synchronization,registry,tm,return,null
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1328020251;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1356735495;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1357119239;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1363696020;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1363701206;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1368482696;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1378223851;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1462275051;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1495868221;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1496242568;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1496837955;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1498780456;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1500448076;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1519732288;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1519772955;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1530174524;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1532091916;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> @Override 	protected Object doGetTransaction();1542899558;This implementation returns a JtaTransactionObject instance for the_JTA UserTransaction._<p>The UserTransaction object will either be looked up freshly for the_current transaction, or the cached one looked up at startup will be used._The latter is the default: Most application servers use a shared singleton_UserTransaction that can be cached. Turn off the "cacheUserTransaction"_flag to enforce a fresh lookup for every transaction._@see #setCacheUserTransaction;@Override_	protected Object doGetTransaction() {_		UserTransaction ut = getUserTransaction()__		if (ut == null) {_			throw new CannotCreateTransactionException("No JTA UserTransaction available - " +_					"programmatic PlatformTransactionManager.getTransaction usage not supported")__		}_		if (!this.cacheUserTransaction) {_			ut = lookupUserTransaction(_					this.userTransactionName != null ? this.userTransactionName : DEFAULT_USER_TRANSACTION_NAME)__		}_		return doGetJtaTransaction(ut)__	};this,implementation,returns,a,jta,transaction,object,instance,for,the,jta,user,transaction,p,the,user,transaction,object,will,either,be,looked,up,freshly,for,the,current,transaction,or,the,cached,one,looked,up,at,startup,will,be,used,the,latter,is,the,default,most,application,servers,use,a,shared,singleton,user,transaction,that,can,be,cached,turn,off,the,cache,user,transaction,flag,to,enforce,a,fresh,lookup,for,every,transaction,see,set,cache,user,transaction;override,protected,object,do,get,transaction,user,transaction,ut,get,user,transaction,if,ut,null,throw,new,cannot,create,transaction,exception,no,jta,user,transaction,available,programmatic,platform,transaction,manager,get,transaction,usage,not,supported,if,this,cache,user,transaction,ut,lookup,user,transaction,this,user,transaction,name,null,this,user,transaction,name,return,do,get,jta,transaction,ut
JtaTransactionManager -> protected UserTransaction findUserTransaction();1328020251;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or <code>null</code> if not found_@see #DEFAULT_USER_TRANSACTION_NAME;protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,code,if,not,found,see;protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected UserTransaction findUserTransaction();1356735495;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected UserTransaction findUserTransaction();1357119239;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected UserTransaction findUserTransaction();1363696020;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected UserTransaction findUserTransaction();1363701206;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected UserTransaction findUserTransaction();1368482696;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected UserTransaction findUserTransaction();1378223851;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected UserTransaction findUserTransaction();1462275051;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1363696020;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1363701206;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1368482696;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1378223851;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1462275051;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1328020251;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		_		if (this.userTransaction == null) {_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__			}_		}__		_		if (this.transactionManager == null) {_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__			}_		}__		_		if (this.userTransaction == null && this.autodetectUserTransaction) {_			this.userTransaction = findUserTransaction()__		}__		_		_		if (this.transactionManager == null && this.autodetectTransactionManager) {_			this.transactionManager = findTransactionManager(this.userTransaction)__		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1356735495;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		_		if (this.userTransaction == null) {_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__			}_		}__		_		if (this.transactionManager == null) {_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__			}_		}__		_		if (this.userTransaction == null && this.autodetectUserTransaction) {_			this.userTransaction = findUserTransaction()__		}__		_		_		if (this.transactionManager == null && this.autodetectTransactionManager) {_			this.transactionManager = findTransactionManager(this.userTransaction)__		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1357119239;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		_		if (this.userTransaction == null) {_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__			}_		}__		_		if (this.transactionManager == null) {_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__			}_		}__		_		if (this.userTransaction == null && this.autodetectUserTransaction) {_			this.userTransaction = findUserTransaction()__		}__		_		_		if (this.transactionManager == null && this.autodetectTransactionManager) {_			this.transactionManager = findTransactionManager(this.userTransaction)__		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1363696020;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		_		if (this.userTransaction == null) {_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__			}_		}__		_		if (this.transactionManager == null) {_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__			}_		}__		_		if (this.userTransaction == null && this.autodetectUserTransaction) {_			this.userTransaction = findUserTransaction()__		}__		_		_		if (this.transactionManager == null && this.autodetectTransactionManager) {_			this.transactionManager = findTransactionManager(this.userTransaction)__		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1363701206;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		_		if (this.userTransaction == null) {_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__			}_		}__		_		if (this.transactionManager == null) {_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__			}_		}__		_		if (this.userTransaction == null && this.autodetectUserTransaction) {_			this.userTransaction = findUserTransaction()__		}__		_		_		if (this.transactionManager == null && this.autodetectTransactionManager) {_			this.transactionManager = findTransactionManager(this.userTransaction)__		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1368482696;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		_		if (this.userTransaction == null) {_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__			}_		}__		_		if (this.transactionManager == null) {_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__			}_		}__		_		if (this.userTransaction == null && this.autodetectUserTransaction) {_			this.userTransaction = findUserTransaction()__		}__		_		_		if (this.transactionManager == null && this.autodetectTransactionManager) {_			this.transactionManager = findTransactionManager(this.userTransaction)__		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1378223851;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		if (this.userTransaction == null) {_			_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__				if (this.userTransaction == null && this.autodetectUserTransaction) {_					_					this.userTransaction = findUserTransaction()__				}_			}_		}__		if (this.transactionManager == null) {_			_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__				if (this.transactionManager == null && this.autodetectTransactionManager) {_					_					_					this.transactionManager = findTransactionManager(this.userTransaction)__				}_			}_		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1462275051;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		if (this.userTransaction == null) {_			_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__				if (this.userTransaction == null && this.autodetectUserTransaction) {_					_					this.userTransaction = findUserTransaction()__				}_			}_		}__		if (this.transactionManager == null) {_			_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__				if (this.transactionManager == null && this.autodetectTransactionManager) {_					_					_					this.transactionManager = findTransactionManager(this.userTransaction)__				}_			}_		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1495868221;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		if (this.userTransaction == null) {_			_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__				if (this.userTransaction == null && this.autodetectUserTransaction) {_					_					this.userTransaction = findUserTransaction()__				}_			}_		}__		if (this.transactionManager == null) {_			_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__				if (this.transactionManager == null && this.autodetectTransactionManager) {_					_					_					this.transactionManager = findTransactionManager(this.userTransaction)__				}_			}_		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1496242568;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		if (this.userTransaction == null) {_			_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__				if (this.userTransaction == null && this.autodetectUserTransaction) {_					_					this.userTransaction = findUserTransaction()__				}_			}_		}__		if (this.transactionManager == null) {_			_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__				if (this.transactionManager == null && this.autodetectTransactionManager) {_					_					_					this.transactionManager = findTransactionManager(this.userTransaction)__				}_			}_		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1496837955;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		if (this.userTransaction == null) {_			_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__				if (this.userTransaction == null && this.autodetectUserTransaction) {_					_					this.userTransaction = findUserTransaction()__				}_			}_		}__		if (this.transactionManager == null) {_			_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__				if (this.transactionManager == null && this.autodetectTransactionManager) {_					_					_					this.transactionManager = findTransactionManager(this.userTransaction)__				}_			}_		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1498780456;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		if (this.userTransaction == null) {_			_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__				if (this.userTransaction == null && this.autodetectUserTransaction) {_					_					this.userTransaction = findUserTransaction()__				}_			}_		}__		if (this.transactionManager == null) {_			_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__				if (this.transactionManager == null && this.autodetectTransactionManager) {_					_					_					this.transactionManager = findTransactionManager(this.userTransaction)__				}_			}_		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1500448076;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		if (this.userTransaction == null) {_			_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__				if (this.userTransaction == null && this.autodetectUserTransaction) {_					_					this.userTransaction = findUserTransaction()__				}_			}_		}__		if (this.transactionManager == null) {_			_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__				if (this.transactionManager == null && this.autodetectTransactionManager) {_					_					_					this.transactionManager = findTransactionManager(this.userTransaction)__				}_			}_		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1519732288;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		if (this.userTransaction == null) {_			_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__				if (this.userTransaction == null && this.autodetectUserTransaction) {_					_					this.userTransaction = findUserTransaction()__				}_			}_		}__		if (this.transactionManager == null) {_			_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__				if (this.transactionManager == null && this.autodetectTransactionManager) {_					_					_					this.transactionManager = findTransactionManager(this.userTransaction)__				}_			}_		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1519772955;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		if (this.userTransaction == null) {_			_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__				if (this.userTransaction == null && this.autodetectUserTransaction) {_					_					this.userTransaction = findUserTransaction()__				}_			}_		}__		if (this.transactionManager == null) {_			_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__				if (this.transactionManager == null && this.autodetectTransactionManager) {_					_					_					this.transactionManager = findTransactionManager(this.userTransaction)__				}_			}_		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1530174524;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		if (this.userTransaction == null) {_			_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__				if (this.userTransaction == null && this.autodetectUserTransaction) {_					_					this.userTransaction = findUserTransaction()__				}_			}_		}__		if (this.transactionManager == null) {_			_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__				if (this.transactionManager == null && this.autodetectTransactionManager) {_					_					_					this.transactionManager = findTransactionManager(this.userTransaction)__				}_			}_		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1532091916;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		if (this.userTransaction == null) {_			_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__				if (this.userTransaction == null && this.autodetectUserTransaction) {_					_					this.userTransaction = findUserTransaction()__				}_			}_		}__		if (this.transactionManager == null) {_			_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__				if (this.transactionManager == null && this.autodetectTransactionManager) {_					_					_					this.transactionManager = findTransactionManager(this.userTransaction)__				}_			}_		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected void initUserTransactionAndTransactionManager() throws TransactionSystemException;1542899558;Initialize the UserTransaction as well as the TransactionManager handle._@throws TransactionSystemException if initialization failed;protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {_		if (this.userTransaction == null) {_			_			if (StringUtils.hasLength(this.userTransactionName)) {_				this.userTransaction = lookupUserTransaction(this.userTransactionName)__				this.userTransactionObtainedFromJndi = true__			}_			else {_				this.userTransaction = retrieveUserTransaction()__				if (this.userTransaction == null && this.autodetectUserTransaction) {_					_					this.userTransaction = findUserTransaction()__				}_			}_		}__		if (this.transactionManager == null) {_			_			if (StringUtils.hasLength(this.transactionManagerName)) {_				this.transactionManager = lookupTransactionManager(this.transactionManagerName)__			}_			else {_				this.transactionManager = retrieveTransactionManager()__				if (this.transactionManager == null && this.autodetectTransactionManager) {_					_					_					this.transactionManager = findTransactionManager(this.userTransaction)__				}_			}_		}__		_		if (this.userTransaction == null && this.transactionManager != null) {_			this.userTransaction = buildUserTransaction(this.transactionManager)__		}_	};initialize,the,user,transaction,as,well,as,the,transaction,manager,handle,throws,transaction,system,exception,if,initialization,failed;protected,void,init,user,transaction,and,transaction,manager,throws,transaction,system,exception,if,this,user,transaction,null,if,string,utils,has,length,this,user,transaction,name,this,user,transaction,lookup,user,transaction,this,user,transaction,name,this,user,transaction,obtained,from,jndi,true,else,this,user,transaction,retrieve,user,transaction,if,this,user,transaction,null,this,autodetect,user,transaction,this,user,transaction,find,user,transaction,if,this,transaction,manager,null,if,string,utils,has,length,this,transaction,manager,name,this,transaction,manager,lookup,transaction,manager,this,transaction,manager,name,else,this,transaction,manager,retrieve,transaction,manager,if,this,transaction,manager,null,this,autodetect,transaction,manager,this,transaction,manager,find,transaction,manager,this,user,transaction,if,this,user,transaction,null,this,transaction,manager,null,this,user,transaction,build,user,transaction,this,transaction,manager
JtaTransactionManager -> protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1328020251;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns <code>null</code>._@return the JTA TransactionManager handle to use, or <code>null</code> if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,code,return,the,jta,transaction,manager,handle,to,use,or,code,null,code,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1356735495;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1357119239;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1363696020;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1363701206;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1368482696;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1378223851;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected TransactionManager retrieveTransactionManager() throws TransactionSystemException;1462275051;Allows subclasses to retrieve the JTA TransactionManager in a vendor-specific manner._Only called if no "transactionManager" or "transactionManagerName" specified._<p>The default implementation simply returns {@code null}._@return the JTA TransactionManager handle to use, or {@code null} if none found_@throws TransactionSystemException in case of errors_@see #setTransactionManager_@see #setTransactionManagerName;protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,transaction,manager,in,a,vendor,specific,manner,only,called,if,no,transaction,manager,or,transaction,manager,name,specified,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,manager,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors,see,set,transaction,manager,see,set,transaction,manager,name;protected,transaction,manager,retrieve,transaction,manager,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1495868221;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1496242568;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1496837955;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1498780456;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1500448076;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1519732288;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1519772955;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1530174524;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1532091916;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> @Nullable 	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException;1542899558;Allows subclasses to retrieve the JTA 1.1 TransactionSynchronizationRegistry_in a vendor-specific manner._<p>The default implementation simply returns {@code null}._@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;@Nullable_	protected TransactionSynchronizationRegistry retrieveTransactionSynchronizationRegistry() throws TransactionSystemException {_		return null__	};allows,subclasses,to,retrieve,the,jta,1,1,transaction,synchronization,registry,in,a,vendor,specific,manner,p,the,default,implementation,simply,returns,code,null,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;nullable,protected,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,throws,transaction,system,exception,return,null
JtaTransactionManager -> protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1496837955;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,nullable,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1498780456;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,nullable,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1500448076;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,nullable,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1519732288;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,nullable,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1519772955;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,nullable,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1530174524;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,nullable,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1532091916;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,nullable,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1542899558;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,nullable,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected Object findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm) 			throws TransactionSystemException;1328020251;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns <code>null</code>._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or <code>null</code> if none found_@throws TransactionSystemException in case of errors;protected Object findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm)_			throws TransactionSystemException {__		if (transactionSynchronizationRegistryClass == null) {_			_			if (logger.isDebugEnabled()) {_			    logger.debug("JTA 1.1 [" + TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME + "] API not available")__			}_			return null__		}__		_		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				Object tsr = getJndiTemplate().lookup(jndiName, transactionSynchronizationRegistryClass)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug(_							"No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (transactionSynchronizationRegistryClass.isInstance(ut)) {_			return ut__		}_		if (transactionSynchronizationRegistryClass.isInstance(tm)) {_			return tm__		}_		_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,code,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,code,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,object,find,transaction,synchronization,registry,user,transaction,ut,transaction,manager,tm,throws,transaction,system,exception,if,transaction,synchronization,registry,class,null,if,logger,is,debug,enabled,logger,debug,jta,1,1,api,not,available,return,null,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,object,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,transaction,synchronization,registry,class,is,instance,ut,return,ut,if,transaction,synchronization,registry,class,is,instance,tm,return,tm,return,null
JtaTransactionManager -> protected Object findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm) 			throws TransactionSystemException;1356735495;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected Object findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm)_			throws TransactionSystemException {__		if (transactionSynchronizationRegistryClass == null) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("JTA 1.1 [" + TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME + "] API not available")__			}_			return null__		}__		_		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				Object tsr = getJndiTemplate().lookup(jndiName, transactionSynchronizationRegistryClass)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug(_							"No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (transactionSynchronizationRegistryClass.isInstance(ut)) {_			return ut__		}_		if (transactionSynchronizationRegistryClass.isInstance(tm)) {_			return tm__		}_		_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,object,find,transaction,synchronization,registry,user,transaction,ut,transaction,manager,tm,throws,transaction,system,exception,if,transaction,synchronization,registry,class,null,if,logger,is,debug,enabled,logger,debug,jta,1,1,api,not,available,return,null,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,object,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,transaction,synchronization,registry,class,is,instance,ut,return,ut,if,transaction,synchronization,registry,class,is,instance,tm,return,tm,return,null
JtaTransactionManager -> protected Object findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm) 			throws TransactionSystemException;1357119239;Find the JTA 1.1 TransactionSynchronizationRegistry through autodetection:_checking whether the UserTransaction object or TransactionManager object_implements it, and checking Java EE 5's standard JNDI location._<p>The default implementation simply returns {@code null}._@param ut the JTA UserTransaction object_@param tm the JTA TransactionManager object_@return the JTA TransactionSynchronizationRegistry handle to use,_or {@code null} if none found_@throws TransactionSystemException in case of errors;protected Object findTransactionSynchronizationRegistry(UserTransaction ut, TransactionManager tm)_			throws TransactionSystemException {__		if (transactionSynchronizationRegistryClass == null) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("JTA 1.1 [" + TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME + "] API not available")__			}_			return null__		}__		_		if (this.userTransactionObtainedFromJndi) {_			_			_			String jndiName = DEFAULT_TRANSACTION_SYNCHRONIZATION_REGISTRY_NAME__			try {_				Object tsr = getJndiTemplate().lookup(jndiName, transactionSynchronizationRegistryClass)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]")__				}_				return tsr__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug(_							"No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex)__				}_			}_		}_		_		if (transactionSynchronizationRegistryClass.isInstance(ut)) {_			return ut__		}_		if (transactionSynchronizationRegistryClass.isInstance(tm)) {_			return tm__		}_		_		_		return null__	};find,the,jta,1,1,transaction,synchronization,registry,through,autodetection,checking,whether,the,user,transaction,object,or,transaction,manager,object,implements,it,and,checking,java,ee,5,s,standard,jndi,location,p,the,default,implementation,simply,returns,code,null,param,ut,the,jta,user,transaction,object,param,tm,the,jta,transaction,manager,object,return,the,jta,transaction,synchronization,registry,handle,to,use,or,code,null,if,none,found,throws,transaction,system,exception,in,case,of,errors;protected,object,find,transaction,synchronization,registry,user,transaction,ut,transaction,manager,tm,throws,transaction,system,exception,if,transaction,synchronization,registry,class,null,if,logger,is,debug,enabled,logger,debug,jta,1,1,api,not,available,return,null,if,this,user,transaction,obtained,from,jndi,string,jndi,name,try,object,tsr,get,jndi,template,lookup,jndi,name,transaction,synchronization,registry,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,return,tsr,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,synchronization,registry,found,at,default,jndi,location,jndi,name,ex,if,transaction,synchronization,registry,class,is,instance,ut,return,ut,if,transaction,synchronization,registry,class,is,instance,tm,return,tm,return,null
JtaTransactionManager -> protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1356735495;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1357119239;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1363696020;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1363701206;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1368482696;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1378223851;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1462275051;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1495868221;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction) 		throws InvalidTransactionException, SystemException;1496242568;Perform a JTA resume on the JTA TransactionManager._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the JtaTransactionObject containing the UserTransaction_@param suspendedTransaction the suspended JTA Transaction object_@throws InvalidTransactionException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.TransactionManager#resume(javax.transaction.Transaction);protected void doJtaResume(JtaTransactionObject txObject, Object suspendedTransaction)_		throws InvalidTransactionException, SystemException {__		if (getTransactionManager() == null) {_			throw new TransactionSuspensionNotSupportedException(_					"JtaTransactionManager needs a JTA TransactionManager for suspending a transaction: " +_					"specify the 'transactionManager' or 'transactionManagerName' property")__		}_		getTransactionManager().resume((Transaction) suspendedTransaction)__	};perform,a,jta,resume,on,the,jta,transaction,manager,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,jta,transaction,object,containing,the,user,transaction,param,suspended,transaction,the,suspended,jta,transaction,object,throws,invalid,transaction,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,manager,resume,javax,transaction,transaction;protected,void,do,jta,resume,jta,transaction,object,tx,object,object,suspended,transaction,throws,invalid,transaction,exception,system,exception,if,get,transaction,manager,null,throw,new,transaction,suspension,not,supported,exception,jta,transaction,manager,needs,a,jta,transaction,manager,for,suspending,a,transaction,specify,the,transaction,manager,or,transaction,manager,name,property,get,transaction,manager,resume,transaction,suspended,transaction
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1363696020;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1363701206;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1368482696;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1378223851;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1462275051;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1495868221;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1496242568;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1496837955;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1498780456;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1500448076;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1519732288;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1519772955;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1530174524;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1532091916;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException;1542899558;Look up the JTA 1.1 TransactionSynchronizationRegistry in JNDI via the configured name._<p>Can be overridden in subclasses to provide a different TransactionManager object._@param registryName the JNDI name of the_TransactionSynchronizationRegistry_@return the TransactionSynchronizationRegistry object_@throws TransactionSystemException if the JNDI lookup failed_@see #setJndiTemplate_@see #setTransactionSynchronizationRegistryName;protected TransactionSynchronizationRegistry lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {_		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]")__			}_			return getJndiTemplate().lookup(registryName, TransactionSynchronizationRegistry.class)__		}_		catch (NamingException ex) {_			throw new TransactionSystemException(_					"JTA TransactionSynchronizationRegistry is not available at JNDI location [" + registryName + "]", ex)__		}_	};look,up,the,jta,1,1,transaction,synchronization,registry,in,jndi,via,the,configured,name,p,can,be,overridden,in,subclasses,to,provide,a,different,transaction,manager,object,param,registry,name,the,jndi,name,of,the,transaction,synchronization,registry,return,the,transaction,synchronization,registry,object,throws,transaction,system,exception,if,the,jndi,lookup,failed,see,set,jndi,template,see,set,transaction,synchronization,registry,name;protected,transaction,synchronization,registry,lookup,transaction,synchronization,registry,string,registry,name,throws,transaction,system,exception,try,if,logger,is,debug,enabled,logger,debug,retrieving,jta,transaction,synchronization,registry,from,jndi,location,registry,name,return,get,jndi,template,lookup,registry,name,transaction,synchronization,registry,class,catch,naming,exception,ex,throw,new,transaction,system,exception,jta,transaction,synchronization,registry,is,not,available,at,jndi,location,registry,name,ex
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1328020251;Register a JTA synchronization on the JTA TransactionManager, for calling_<code>afterCompletion</code> on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			new InterposedSynchronizationDelegate().registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,code,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,new,interposed,synchronization,delegate,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1356735495;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			new InterposedSynchronizationDelegate().registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,new,interposed,synchronization,delegate,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1357119239;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			new InterposedSynchronizationDelegate().registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,new,interposed,synchronization,delegate,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1363696020;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1363701206;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1368482696;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1378223851;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1462275051;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1495868221;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1496242568;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1496837955;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1498780456;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1500448076;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1519732288;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1519772955;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1530174524;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations a List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,a,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1532091916;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations a List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,a,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> protected void doRegisterAfterCompletionWithJtaTransaction( 			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) 			throws RollbackException, SystemException;1542899558;Register a JTA synchronization on the JTA TransactionManager, for calling_{@code afterCompletion} on the given Spring TransactionSynchronizations._<p>The default implementation registers the synchronizations on the_JTA 1.1 TransactionSynchronizationRegistry, if available, or on the_JTA TransactionManager's current Transaction - again, if available._If none of the two is available, a warning will be logged._<p>Can be overridden in subclasses, for specific JTA implementations._@param txObject the current transaction object_@param synchronizations a List of TransactionSynchronization objects_@throws RollbackException if thrown by JTA methods_@throws SystemException if thrown by JTA methods_@see #getTransactionManager()_@see javax.transaction.Transaction#registerSynchronization_@see javax.transaction.TransactionSynchronizationRegistry#registerInterposedSynchronization;protected void doRegisterAfterCompletionWithJtaTransaction(_			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations)_			throws RollbackException, SystemException {__		int jtaStatus = txObject.getUserTransaction().getStatus()__		if (jtaStatus == Status.STATUS_NO_TRANSACTION) {_			throw new RollbackException("JTA transaction already completed - probably rolled back")__		}_		if (jtaStatus == Status.STATUS_ROLLEDBACK) {_			throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)")__		}__		if (this.transactionSynchronizationRegistry != null) {_			_			this.transactionSynchronizationRegistry.registerInterposedSynchronization(_					new JtaAfterCompletionSynchronization(synchronizations))__		}__		else if (getTransactionManager() != null) {_			_			Transaction transaction = getTransactionManager().getTransaction()__			if (transaction == null) {_				throw new IllegalStateException("No JTA Transaction available")__			}_			transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations))__		}__		else {_			_			logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " +_					"cannot register Spring after-completion callbacks with outer JTA transaction - " +_					"processing Spring after-completion callbacks with outcome status 'unknown'")__			invokeAfterCompletion(synchronizations, TransactionSynchronization.STATUS_UNKNOWN)__		}_	};register,a,jta,synchronization,on,the,jta,transaction,manager,for,calling,code,after,completion,on,the,given,spring,transaction,synchronizations,p,the,default,implementation,registers,the,synchronizations,on,the,jta,1,1,transaction,synchronization,registry,if,available,or,on,the,jta,transaction,manager,s,current,transaction,again,if,available,if,none,of,the,two,is,available,a,warning,will,be,logged,p,can,be,overridden,in,subclasses,for,specific,jta,implementations,param,tx,object,the,current,transaction,object,param,synchronizations,a,list,of,transaction,synchronization,objects,throws,rollback,exception,if,thrown,by,jta,methods,throws,system,exception,if,thrown,by,jta,methods,see,get,transaction,manager,see,javax,transaction,transaction,register,synchronization,see,javax,transaction,transaction,synchronization,registry,register,interposed,synchronization;protected,void,do,register,after,completion,with,jta,transaction,jta,transaction,object,tx,object,list,transaction,synchronization,synchronizations,throws,rollback,exception,system,exception,int,jta,status,tx,object,get,user,transaction,get,status,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,completed,probably,rolled,back,if,jta,status,status,throw,new,rollback,exception,jta,transaction,already,rolled,back,probably,due,to,a,timeout,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,register,interposed,synchronization,new,jta,after,completion,synchronization,synchronizations,else,if,get,transaction,manager,null,transaction,transaction,get,transaction,manager,get,transaction,if,transaction,null,throw,new,illegal,state,exception,no,jta,transaction,available,transaction,register,synchronization,new,jta,after,completion,synchronization,synchronizations,else,logger,warn,participating,in,existing,jta,transaction,but,no,jta,transaction,manager,available,cannot,register,spring,after,completion,callbacks,with,outer,jta,transaction,processing,spring,after,completion,callbacks,with,outcome,status,unknown,invoke,after,completion,synchronizations,transaction,synchronization
JtaTransactionManager -> public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry);1378223851;Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object_at its default JDNI location ("java:comp/TransactionSynchronizationRegistry")_if the UserTransaction has also been obtained from JNDI, and also whether_to fall back to checking whether the JTA UserTransaction/TransactionManager_object implements the JTA TransactionSynchronizationRegistry interface too._<p>Default is "true", autodetecting the TransactionSynchronizationRegistry_unless it has been specified explicitly. Can be turned off to delegate_synchronization registration to the regular JTA TransactionManager API.;public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {_		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry__	};set,whether,to,autodetect,a,jta,1,1,transaction,synchronization,registry,object,at,its,default,jdni,location,java,comp,transaction,synchronization,registry,if,the,user,transaction,has,also,been,obtained,from,jndi,and,also,whether,to,fall,back,to,checking,whether,the,jta,user,transaction,transaction,manager,object,implements,the,jta,transaction,synchronization,registry,interface,too,p,default,is,true,autodetecting,the,transaction,synchronization,registry,unless,it,has,been,specified,explicitly,can,be,turned,off,to,delegate,synchronization,registration,to,the,regular,jta,transaction,manager,api;public,void,set,autodetect,transaction,synchronization,registry,boolean,autodetect,transaction,synchronization,registry,this,autodetect,transaction,synchronization,registry,autodetect,transaction,synchronization,registry
JtaTransactionManager -> public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry);1462275051;Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object_at its default JDNI location ("java:comp/TransactionSynchronizationRegistry")_if the UserTransaction has also been obtained from JNDI, and also whether_to fall back to checking whether the JTA UserTransaction/TransactionManager_object implements the JTA TransactionSynchronizationRegistry interface too._<p>Default is "true", autodetecting the TransactionSynchronizationRegistry_unless it has been specified explicitly. Can be turned off to delegate_synchronization registration to the regular JTA TransactionManager API.;public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {_		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry__	};set,whether,to,autodetect,a,jta,1,1,transaction,synchronization,registry,object,at,its,default,jdni,location,java,comp,transaction,synchronization,registry,if,the,user,transaction,has,also,been,obtained,from,jndi,and,also,whether,to,fall,back,to,checking,whether,the,jta,user,transaction,transaction,manager,object,implements,the,jta,transaction,synchronization,registry,interface,too,p,default,is,true,autodetecting,the,transaction,synchronization,registry,unless,it,has,been,specified,explicitly,can,be,turned,off,to,delegate,synchronization,registration,to,the,regular,jta,transaction,manager,api;public,void,set,autodetect,transaction,synchronization,registry,boolean,autodetect,transaction,synchronization,registry,this,autodetect,transaction,synchronization,registry,autodetect,transaction,synchronization,registry
JtaTransactionManager -> public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry);1495868221;Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object_at its default JDNI location ("java:comp/TransactionSynchronizationRegistry")_if the UserTransaction has also been obtained from JNDI, and also whether_to fall back to checking whether the JTA UserTransaction/TransactionManager_object implements the JTA TransactionSynchronizationRegistry interface too._<p>Default is "true", autodetecting the TransactionSynchronizationRegistry_unless it has been specified explicitly. Can be turned off to delegate_synchronization registration to the regular JTA TransactionManager API.;public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {_		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry__	};set,whether,to,autodetect,a,jta,1,1,transaction,synchronization,registry,object,at,its,default,jdni,location,java,comp,transaction,synchronization,registry,if,the,user,transaction,has,also,been,obtained,from,jndi,and,also,whether,to,fall,back,to,checking,whether,the,jta,user,transaction,transaction,manager,object,implements,the,jta,transaction,synchronization,registry,interface,too,p,default,is,true,autodetecting,the,transaction,synchronization,registry,unless,it,has,been,specified,explicitly,can,be,turned,off,to,delegate,synchronization,registration,to,the,regular,jta,transaction,manager,api;public,void,set,autodetect,transaction,synchronization,registry,boolean,autodetect,transaction,synchronization,registry,this,autodetect,transaction,synchronization,registry,autodetect,transaction,synchronization,registry
JtaTransactionManager -> public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry);1496242568;Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object_at its default JDNI location ("java:comp/TransactionSynchronizationRegistry")_if the UserTransaction has also been obtained from JNDI, and also whether_to fall back to checking whether the JTA UserTransaction/TransactionManager_object implements the JTA TransactionSynchronizationRegistry interface too._<p>Default is "true", autodetecting the TransactionSynchronizationRegistry_unless it has been specified explicitly. Can be turned off to delegate_synchronization registration to the regular JTA TransactionManager API.;public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {_		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry__	};set,whether,to,autodetect,a,jta,1,1,transaction,synchronization,registry,object,at,its,default,jdni,location,java,comp,transaction,synchronization,registry,if,the,user,transaction,has,also,been,obtained,from,jndi,and,also,whether,to,fall,back,to,checking,whether,the,jta,user,transaction,transaction,manager,object,implements,the,jta,transaction,synchronization,registry,interface,too,p,default,is,true,autodetecting,the,transaction,synchronization,registry,unless,it,has,been,specified,explicitly,can,be,turned,off,to,delegate,synchronization,registration,to,the,regular,jta,transaction,manager,api;public,void,set,autodetect,transaction,synchronization,registry,boolean,autodetect,transaction,synchronization,registry,this,autodetect,transaction,synchronization,registry,autodetect,transaction,synchronization,registry
JtaTransactionManager -> public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry);1496837955;Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object_at its default JDNI location ("java:comp/TransactionSynchronizationRegistry")_if the UserTransaction has also been obtained from JNDI, and also whether_to fall back to checking whether the JTA UserTransaction/TransactionManager_object implements the JTA TransactionSynchronizationRegistry interface too._<p>Default is "true", autodetecting the TransactionSynchronizationRegistry_unless it has been specified explicitly. Can be turned off to delegate_synchronization registration to the regular JTA TransactionManager API.;public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {_		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry__	};set,whether,to,autodetect,a,jta,1,1,transaction,synchronization,registry,object,at,its,default,jdni,location,java,comp,transaction,synchronization,registry,if,the,user,transaction,has,also,been,obtained,from,jndi,and,also,whether,to,fall,back,to,checking,whether,the,jta,user,transaction,transaction,manager,object,implements,the,jta,transaction,synchronization,registry,interface,too,p,default,is,true,autodetecting,the,transaction,synchronization,registry,unless,it,has,been,specified,explicitly,can,be,turned,off,to,delegate,synchronization,registration,to,the,regular,jta,transaction,manager,api;public,void,set,autodetect,transaction,synchronization,registry,boolean,autodetect,transaction,synchronization,registry,this,autodetect,transaction,synchronization,registry,autodetect,transaction,synchronization,registry
JtaTransactionManager -> public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry);1498780456;Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object_at its default JDNI location ("java:comp/TransactionSynchronizationRegistry")_if the UserTransaction has also been obtained from JNDI, and also whether_to fall back to checking whether the JTA UserTransaction/TransactionManager_object implements the JTA TransactionSynchronizationRegistry interface too._<p>Default is "true", autodetecting the TransactionSynchronizationRegistry_unless it has been specified explicitly. Can be turned off to delegate_synchronization registration to the regular JTA TransactionManager API.;public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {_		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry__	};set,whether,to,autodetect,a,jta,1,1,transaction,synchronization,registry,object,at,its,default,jdni,location,java,comp,transaction,synchronization,registry,if,the,user,transaction,has,also,been,obtained,from,jndi,and,also,whether,to,fall,back,to,checking,whether,the,jta,user,transaction,transaction,manager,object,implements,the,jta,transaction,synchronization,registry,interface,too,p,default,is,true,autodetecting,the,transaction,synchronization,registry,unless,it,has,been,specified,explicitly,can,be,turned,off,to,delegate,synchronization,registration,to,the,regular,jta,transaction,manager,api;public,void,set,autodetect,transaction,synchronization,registry,boolean,autodetect,transaction,synchronization,registry,this,autodetect,transaction,synchronization,registry,autodetect,transaction,synchronization,registry
JtaTransactionManager -> public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry);1500448076;Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object_at its default JDNI location ("java:comp/TransactionSynchronizationRegistry")_if the UserTransaction has also been obtained from JNDI, and also whether_to fall back to checking whether the JTA UserTransaction/TransactionManager_object implements the JTA TransactionSynchronizationRegistry interface too._<p>Default is "true", autodetecting the TransactionSynchronizationRegistry_unless it has been specified explicitly. Can be turned off to delegate_synchronization registration to the regular JTA TransactionManager API.;public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {_		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry__	};set,whether,to,autodetect,a,jta,1,1,transaction,synchronization,registry,object,at,its,default,jdni,location,java,comp,transaction,synchronization,registry,if,the,user,transaction,has,also,been,obtained,from,jndi,and,also,whether,to,fall,back,to,checking,whether,the,jta,user,transaction,transaction,manager,object,implements,the,jta,transaction,synchronization,registry,interface,too,p,default,is,true,autodetecting,the,transaction,synchronization,registry,unless,it,has,been,specified,explicitly,can,be,turned,off,to,delegate,synchronization,registration,to,the,regular,jta,transaction,manager,api;public,void,set,autodetect,transaction,synchronization,registry,boolean,autodetect,transaction,synchronization,registry,this,autodetect,transaction,synchronization,registry,autodetect,transaction,synchronization,registry
JtaTransactionManager -> public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry);1519732288;Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object_at its default JDNI location ("java:comp/TransactionSynchronizationRegistry")_if the UserTransaction has also been obtained from JNDI, and also whether_to fall back to checking whether the JTA UserTransaction/TransactionManager_object implements the JTA TransactionSynchronizationRegistry interface too._<p>Default is "true", autodetecting the TransactionSynchronizationRegistry_unless it has been specified explicitly. Can be turned off to delegate_synchronization registration to the regular JTA TransactionManager API.;public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {_		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry__	};set,whether,to,autodetect,a,jta,1,1,transaction,synchronization,registry,object,at,its,default,jdni,location,java,comp,transaction,synchronization,registry,if,the,user,transaction,has,also,been,obtained,from,jndi,and,also,whether,to,fall,back,to,checking,whether,the,jta,user,transaction,transaction,manager,object,implements,the,jta,transaction,synchronization,registry,interface,too,p,default,is,true,autodetecting,the,transaction,synchronization,registry,unless,it,has,been,specified,explicitly,can,be,turned,off,to,delegate,synchronization,registration,to,the,regular,jta,transaction,manager,api;public,void,set,autodetect,transaction,synchronization,registry,boolean,autodetect,transaction,synchronization,registry,this,autodetect,transaction,synchronization,registry,autodetect,transaction,synchronization,registry
JtaTransactionManager -> public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry);1519772955;Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object_at its default JDNI location ("java:comp/TransactionSynchronizationRegistry")_if the UserTransaction has also been obtained from JNDI, and also whether_to fall back to checking whether the JTA UserTransaction/TransactionManager_object implements the JTA TransactionSynchronizationRegistry interface too._<p>Default is "true", autodetecting the TransactionSynchronizationRegistry_unless it has been specified explicitly. Can be turned off to delegate_synchronization registration to the regular JTA TransactionManager API.;public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {_		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry__	};set,whether,to,autodetect,a,jta,1,1,transaction,synchronization,registry,object,at,its,default,jdni,location,java,comp,transaction,synchronization,registry,if,the,user,transaction,has,also,been,obtained,from,jndi,and,also,whether,to,fall,back,to,checking,whether,the,jta,user,transaction,transaction,manager,object,implements,the,jta,transaction,synchronization,registry,interface,too,p,default,is,true,autodetecting,the,transaction,synchronization,registry,unless,it,has,been,specified,explicitly,can,be,turned,off,to,delegate,synchronization,registration,to,the,regular,jta,transaction,manager,api;public,void,set,autodetect,transaction,synchronization,registry,boolean,autodetect,transaction,synchronization,registry,this,autodetect,transaction,synchronization,registry,autodetect,transaction,synchronization,registry
JtaTransactionManager -> public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry);1530174524;Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object_at its default JDNI location ("java:comp/TransactionSynchronizationRegistry")_if the UserTransaction has also been obtained from JNDI, and also whether_to fall back to checking whether the JTA UserTransaction/TransactionManager_object implements the JTA TransactionSynchronizationRegistry interface too._<p>Default is "true", autodetecting the TransactionSynchronizationRegistry_unless it has been specified explicitly. Can be turned off to delegate_synchronization registration to the regular JTA TransactionManager API.;public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {_		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry__	};set,whether,to,autodetect,a,jta,1,1,transaction,synchronization,registry,object,at,its,default,jdni,location,java,comp,transaction,synchronization,registry,if,the,user,transaction,has,also,been,obtained,from,jndi,and,also,whether,to,fall,back,to,checking,whether,the,jta,user,transaction,transaction,manager,object,implements,the,jta,transaction,synchronization,registry,interface,too,p,default,is,true,autodetecting,the,transaction,synchronization,registry,unless,it,has,been,specified,explicitly,can,be,turned,off,to,delegate,synchronization,registration,to,the,regular,jta,transaction,manager,api;public,void,set,autodetect,transaction,synchronization,registry,boolean,autodetect,transaction,synchronization,registry,this,autodetect,transaction,synchronization,registry,autodetect,transaction,synchronization,registry
JtaTransactionManager -> public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry);1532091916;Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object_at its default JDNI location ("java:comp/TransactionSynchronizationRegistry")_if the UserTransaction has also been obtained from JNDI, and also whether_to fall back to checking whether the JTA UserTransaction/TransactionManager_object implements the JTA TransactionSynchronizationRegistry interface too._<p>Default is "true", autodetecting the TransactionSynchronizationRegistry_unless it has been specified explicitly. Can be turned off to delegate_synchronization registration to the regular JTA TransactionManager API.;public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {_		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry__	};set,whether,to,autodetect,a,jta,1,1,transaction,synchronization,registry,object,at,its,default,jdni,location,java,comp,transaction,synchronization,registry,if,the,user,transaction,has,also,been,obtained,from,jndi,and,also,whether,to,fall,back,to,checking,whether,the,jta,user,transaction,transaction,manager,object,implements,the,jta,transaction,synchronization,registry,interface,too,p,default,is,true,autodetecting,the,transaction,synchronization,registry,unless,it,has,been,specified,explicitly,can,be,turned,off,to,delegate,synchronization,registration,to,the,regular,jta,transaction,manager,api;public,void,set,autodetect,transaction,synchronization,registry,boolean,autodetect,transaction,synchronization,registry,this,autodetect,transaction,synchronization,registry,autodetect,transaction,synchronization,registry
JtaTransactionManager -> public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry);1542899558;Set whether to autodetect a JTA 1.1 TransactionSynchronizationRegistry object_at its default JDNI location ("java:comp/TransactionSynchronizationRegistry")_if the UserTransaction has also been obtained from JNDI, and also whether_to fall back to checking whether the JTA UserTransaction/TransactionManager_object implements the JTA TransactionSynchronizationRegistry interface too._<p>Default is "true", autodetecting the TransactionSynchronizationRegistry_unless it has been specified explicitly. Can be turned off to delegate_synchronization registration to the regular JTA TransactionManager API.;public void setAutodetectTransactionSynchronizationRegistry(boolean autodetectTransactionSynchronizationRegistry) {_		this.autodetectTransactionSynchronizationRegistry = autodetectTransactionSynchronizationRegistry__	};set,whether,to,autodetect,a,jta,1,1,transaction,synchronization,registry,object,at,its,default,jdni,location,java,comp,transaction,synchronization,registry,if,the,user,transaction,has,also,been,obtained,from,jndi,and,also,whether,to,fall,back,to,checking,whether,the,jta,user,transaction,transaction,manager,object,implements,the,jta,transaction,synchronization,registry,interface,too,p,default,is,true,autodetecting,the,transaction,synchronization,registry,unless,it,has,been,specified,explicitly,can,be,turned,off,to,delegate,synchronization,registration,to,the,regular,jta,transaction,manager,api;public,void,set,autodetect,transaction,synchronization,registry,boolean,autodetect,transaction,synchronization,registry,this,autodetect,transaction,synchronization,registry,autodetect,transaction,synchronization,registry
JtaTransactionManager -> @Nullable 	protected UserTransaction findUserTransaction();1495868221;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;@Nullable_	protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;nullable,protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction findUserTransaction();1496242568;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;@Nullable_	protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;nullable,protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction findUserTransaction();1496837955;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;@Nullable_	protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;nullable,protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction findUserTransaction();1498780456;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;@Nullable_	protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;nullable,protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction findUserTransaction();1500448076;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;@Nullable_	protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;nullable,protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction findUserTransaction();1519732288;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;@Nullable_	protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;nullable,protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction findUserTransaction();1519772955;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;@Nullable_	protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;nullable,protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction findUserTransaction();1530174524;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;@Nullable_	protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;nullable,protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction findUserTransaction();1532091916;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;@Nullable_	protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;nullable,protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected UserTransaction findUserTransaction();1542899558;Find the JTA UserTransaction through a default JNDI lookup:_"java:comp/UserTransaction"._@return the JTA UserTransaction reference, or {@code null} if not found_@see #DEFAULT_USER_TRANSACTION_NAME;@Nullable_	protected UserTransaction findUserTransaction() {_		String jndiName = DEFAULT_USER_TRANSACTION_NAME__		try {_			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class)__			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]")__			}_			this.userTransactionObtainedFromJndi = true__			return ut__		}_		catch (NamingException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex)__			}_			return null__		}_	};find,the,jta,user,transaction,through,a,default,jndi,lookup,java,comp,user,transaction,return,the,jta,user,transaction,reference,or,code,null,if,not,found,see;nullable,protected,user,transaction,find,user,transaction,string,jndi,name,try,user,transaction,ut,get,jndi,template,lookup,jndi,name,user,transaction,class,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,found,at,default,jndi,location,jndi,name,this,user,transaction,obtained,from,jndi,true,return,ut,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,user,transaction,found,at,default,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1328020251;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1356735495;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1357119239;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1363696020;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1363701206;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1368482696;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1378223851;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1462275051;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1495868221;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1496242568;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1496837955;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1498780456;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1500448076;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1519732288;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1519772955;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1530174524;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1532091916;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager);1542899558;Create a new JtaTransactionManager instance._@param userTransaction the JTA UserTransaction to use as direct reference_@param transactionManager the JTA TransactionManager to use as direct reference;public JtaTransactionManager(UserTransaction userTransaction, TransactionManager transactionManager) {_		this()__		Assert.notNull(userTransaction, "UserTransaction must not be null")__		Assert.notNull(transactionManager, "TransactionManager must not be null")__		this.userTransaction = userTransaction__		this.transactionManager = transactionManager__	};create,a,new,jta,transaction,manager,instance,param,user,transaction,the,jta,user,transaction,to,use,as,direct,reference,param,transaction,manager,the,jta,transaction,manager,to,use,as,direct,reference;public,jta,transaction,manager,user,transaction,user,transaction,transaction,manager,transaction,manager,this,assert,not,null,user,transaction,user,transaction,must,not,be,null,assert,not,null,transaction,manager,transaction,manager,must,not,be,null,this,user,transaction,user,transaction,this,transaction,manager,transaction,manager
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1328020251;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_<code>UserTransaction.begin()</code> invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,code,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1356735495;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1357119239;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1363696020;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1363701206;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1368482696;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1378223851;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1462275051;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1495868221;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1496242568;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1496837955;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1498780456;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1500448076;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1519732288;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1519772955;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1530174524;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1532091916;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> @Override 	protected boolean useSavepointForNestedTransaction();1542899558;This implementation returns false to cause a further invocation_of doBegin despite an already existing transaction._<p>JTA implementations might support nested transactions via further_{@code UserTransaction.begin()} invocations, but never support savepoints._@see #doBegin_@see javax.transaction.UserTransaction#begin();@Override_	protected boolean useSavepointForNestedTransaction() {_		return false__	};this,implementation,returns,false,to,cause,a,further,invocation,of,do,begin,despite,an,already,existing,transaction,p,jta,implementations,might,support,nested,transactions,via,further,code,user,transaction,begin,invocations,but,never,support,savepoints,see,do,begin,see,javax,transaction,user,transaction,begin;override,protected,boolean,use,savepoint,for,nested,transaction,return,false
JtaTransactionManager -> public void setUserTransaction(UserTransaction userTransaction);1328020251;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(UserTransaction userTransaction);1356735495;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(UserTransaction userTransaction);1357119239;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(UserTransaction userTransaction);1363696020;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(UserTransaction userTransaction);1363701206;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(UserTransaction userTransaction);1368482696;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(UserTransaction userTransaction);1378223851;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(UserTransaction userTransaction);1462275051;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(UserTransaction userTransaction);1495868221;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(UserTransaction userTransaction);1496242568;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(UserTransaction userTransaction);1496837955;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> public void setUserTransaction(UserTransaction userTransaction);1498780456;Set the JTA UserTransaction to use as direct reference._<p>Typically just used for local JTA setups_ in a Java EE environment,_the UserTransaction will always be fetched from JNDI._@see #setUserTransactionName_@see #setAutodetectUserTransaction;public void setUserTransaction(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};set,the,jta,user,transaction,to,use,as,direct,reference,p,typically,just,used,for,local,jta,setups,in,a,java,ee,environment,the,user,transaction,will,always,be,fetched,from,jndi,see,set,user,transaction,name,see,set,autodetect,user,transaction;public,void,set,user,transaction,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1328020251;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1356735495;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1357119239;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1363696020;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1363701206;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1368482696;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1378223851;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1462275051;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1495868221;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1496242568;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1496837955;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1498780456;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1500448076;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1519732288;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1519772955;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1530174524;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1532091916;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> protected UserTransaction buildUserTransaction(TransactionManager transactionManager);1542899558;Build a UserTransaction handle based on the given TransactionManager._@param transactionManager the TransactionManager_@return a corresponding UserTransaction handle;protected UserTransaction buildUserTransaction(TransactionManager transactionManager) {_		if (transactionManager instanceof UserTransaction) {_			return (UserTransaction) transactionManager__		}_		else {_			return new UserTransactionAdapter(transactionManager)__		}_	};build,a,user,transaction,handle,based,on,the,given,transaction,manager,param,transaction,manager,the,transaction,manager,return,a,corresponding,user,transaction,handle;protected,user,transaction,build,user,transaction,transaction,manager,transaction,manager,if,transaction,manager,instanceof,user,transaction,return,user,transaction,transaction,manager,else,return,new,user,transaction,adapter,transaction,manager
JtaTransactionManager -> public Properties getJndiEnvironment();1328020251;Return the JNDI environment to use for JNDI lookups.;public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> public Properties getJndiEnvironment();1356735495;Return the JNDI environment to use for JNDI lookups.;public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> public Properties getJndiEnvironment();1357119239;Return the JNDI environment to use for JNDI lookups.;public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> public Properties getJndiEnvironment();1363696020;Return the JNDI environment to use for JNDI lookups.;public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> public Properties getJndiEnvironment();1363701206;Return the JNDI environment to use for JNDI lookups.;public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> public Properties getJndiEnvironment();1368482696;Return the JNDI environment to use for JNDI lookups.;public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> public Properties getJndiEnvironment();1378223851;Return the JNDI environment to use for JNDI lookups.;public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> public Properties getJndiEnvironment();1462275051;Return the JNDI environment to use for JNDI lookups.;public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> public Properties getJndiEnvironment();1495868221;Return the JNDI environment to use for JNDI lookups.;public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> public Properties getJndiEnvironment();1496242568;Return the JNDI environment to use for JNDI lookups.;public Properties getJndiEnvironment() {_		return this.jndiTemplate.getEnvironment()__	};return,the,jndi,environment,to,use,for,jndi,lookups;public,properties,get,jndi,environment,return,this,jndi,template,get,environment
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1328020251;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_			this.transactionSynchronizationRegistry =_					lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__		}_		else {_			this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__			if (this.transactionSynchronizationRegistry == null) {_				this.transactionSynchronizationRegistry =_						findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1356735495;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_			this.transactionSynchronizationRegistry =_					lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__		}_		else {_			this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__			if (this.transactionSynchronizationRegistry == null) {_				this.transactionSynchronizationRegistry =_						findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1357119239;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_			this.transactionSynchronizationRegistry =_					lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__		}_		else {_			this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__			if (this.transactionSynchronizationRegistry == null) {_				this.transactionSynchronizationRegistry =_						findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1363696020;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_			this.transactionSynchronizationRegistry =_					lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__		}_		else {_			this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__			if (this.transactionSynchronizationRegistry == null) {_				this.transactionSynchronizationRegistry =_						findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1363701206;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_			this.transactionSynchronizationRegistry =_					lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__		}_		else {_			this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__			if (this.transactionSynchronizationRegistry == null) {_				this.transactionSynchronizationRegistry =_						findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1368482696;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_			this.transactionSynchronizationRegistry =_					lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__		}_		else {_			this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__			if (this.transactionSynchronizationRegistry == null) {_				this.transactionSynchronizationRegistry =_						findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1378223851;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (this.transactionSynchronizationRegistry == null) {_			_			if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_				this.transactionSynchronizationRegistry =_						lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__			}_			else {_				this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {_					_					_					this.transactionSynchronizationRegistry =_							findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__				}_			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,autodetect,transaction,synchronization,registry,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1462275051;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (this.transactionSynchronizationRegistry == null) {_			_			if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_				this.transactionSynchronizationRegistry =_						lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__			}_			else {_				this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {_					_					_					this.transactionSynchronizationRegistry =_							findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__				}_			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,autodetect,transaction,synchronization,registry,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1495868221;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (this.transactionSynchronizationRegistry == null) {_			_			if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_				this.transactionSynchronizationRegistry =_						lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__			}_			else {_				this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {_					_					_					this.transactionSynchronizationRegistry =_							findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__				}_			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,autodetect,transaction,synchronization,registry,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1496242568;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (this.transactionSynchronizationRegistry == null) {_			_			if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_				this.transactionSynchronizationRegistry =_						lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__			}_			else {_				this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {_					_					_					this.transactionSynchronizationRegistry =_							findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__				}_			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,autodetect,transaction,synchronization,registry,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1496837955;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (this.transactionSynchronizationRegistry == null) {_			_			if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_				this.transactionSynchronizationRegistry =_						lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__			}_			else {_				this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {_					_					_					this.transactionSynchronizationRegistry =_							findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__				}_			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,autodetect,transaction,synchronization,registry,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1498780456;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (this.transactionSynchronizationRegistry == null) {_			_			if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_				this.transactionSynchronizationRegistry =_						lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__			}_			else {_				this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {_					_					_					this.transactionSynchronizationRegistry =_							findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__				}_			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,autodetect,transaction,synchronization,registry,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1500448076;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (this.transactionSynchronizationRegistry == null) {_			_			if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_				this.transactionSynchronizationRegistry =_						lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__			}_			else {_				this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {_					_					_					this.transactionSynchronizationRegistry =_							findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__				}_			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,autodetect,transaction,synchronization,registry,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1519732288;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (this.transactionSynchronizationRegistry == null) {_			_			if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_				this.transactionSynchronizationRegistry =_						lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__			}_			else {_				this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {_					_					_					this.transactionSynchronizationRegistry =_							findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__				}_			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,autodetect,transaction,synchronization,registry,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1519772955;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (this.transactionSynchronizationRegistry == null) {_			_			if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_				this.transactionSynchronizationRegistry =_						lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__			}_			else {_				this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {_					_					_					this.transactionSynchronizationRegistry =_							findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__				}_			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,autodetect,transaction,synchronization,registry,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1530174524;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (this.transactionSynchronizationRegistry == null) {_			_			if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_				this.transactionSynchronizationRegistry =_						lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__			}_			else {_				this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {_					_					_					this.transactionSynchronizationRegistry =_							findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__				}_			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,autodetect,transaction,synchronization,registry,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,info,enabled,logger,info,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1532091916;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (this.transactionSynchronizationRegistry == null) {_			_			if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_				this.transactionSynchronizationRegistry =_						lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__			}_			else {_				this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {_					_					_					this.transactionSynchronizationRegistry =_							findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__				}_			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,autodetect,transaction,synchronization,registry,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,debug,enabled,logger,debug,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> protected void initTransactionSynchronizationRegistry();1542899558;Initialize the JTA 1.1 TransactionSynchronizationRegistry, if available._<p>To be called after {@link #initUserTransactionAndTransactionManager()},_since it may check the UserTransaction and TransactionManager handles._@throws TransactionSystemException if initialization failed;protected void initTransactionSynchronizationRegistry() {_		if (this.transactionSynchronizationRegistry == null) {_			_			if (StringUtils.hasLength(this.transactionSynchronizationRegistryName)) {_				this.transactionSynchronizationRegistry =_						lookupTransactionSynchronizationRegistry(this.transactionSynchronizationRegistryName)__			}_			else {_				this.transactionSynchronizationRegistry = retrieveTransactionSynchronizationRegistry()__				if (this.transactionSynchronizationRegistry == null && this.autodetectTransactionSynchronizationRegistry) {_					_					_					this.transactionSynchronizationRegistry =_							findTransactionSynchronizationRegistry(this.userTransaction, this.transactionManager)__				}_			}_		}__		if (this.transactionSynchronizationRegistry != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry)__			}_		}_	};initialize,the,jta,1,1,transaction,synchronization,registry,if,available,p,to,be,called,after,link,init,user,transaction,and,transaction,manager,since,it,may,check,the,user,transaction,and,transaction,manager,handles,throws,transaction,system,exception,if,initialization,failed;protected,void,init,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,if,string,utils,has,length,this,transaction,synchronization,registry,name,this,transaction,synchronization,registry,lookup,transaction,synchronization,registry,this,transaction,synchronization,registry,name,else,this,transaction,synchronization,registry,retrieve,transaction,synchronization,registry,if,this,transaction,synchronization,registry,null,this,autodetect,transaction,synchronization,registry,this,transaction,synchronization,registry,find,transaction,synchronization,registry,this,user,transaction,this,transaction,manager,if,this,transaction,synchronization,registry,null,if,logger,is,debug,enabled,logger,debug,using,jta,transaction,synchronization,registry,this,transaction,synchronization,registry
JtaTransactionManager -> public void setTransactionManager(@Nullable TransactionManager transactionManager);1500448076;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(@Nullable TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,nullable,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(@Nullable TransactionManager transactionManager);1519732288;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(@Nullable TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,nullable,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(@Nullable TransactionManager transactionManager);1519772955;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(@Nullable TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,nullable,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(@Nullable TransactionManager transactionManager);1530174524;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(@Nullable TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,nullable,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(@Nullable TransactionManager transactionManager);1532091916;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(@Nullable TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,nullable,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> public void setTransactionManager(@Nullable TransactionManager transactionManager);1542899558;Set the JTA TransactionManager to use as direct reference._<p>A TransactionManager is necessary for suspending and resuming transactions,_as this not supported by the UserTransaction interface._<p>Note that the TransactionManager will be autodetected if the JTA_UserTransaction object implements the JTA TransactionManager interface too,_as well as autodetected at various well-known fallback JNDI locations._@see #setTransactionManagerName_@see #setAutodetectTransactionManager;public void setTransactionManager(@Nullable TransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,jta,transaction,manager,to,use,as,direct,reference,p,a,transaction,manager,is,necessary,for,suspending,and,resuming,transactions,as,this,not,supported,by,the,user,transaction,interface,p,note,that,the,transaction,manager,will,be,autodetected,if,the,jta,user,transaction,object,implements,the,jta,transaction,manager,interface,too,as,well,as,autodetected,at,various,well,known,fallback,jndi,locations,see,set,transaction,manager,name,see,set,autodetect,transaction,manager;public,void,set,transaction,manager,nullable,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
JtaTransactionManager -> @Nullable 	protected TransactionManager findTransactionManager(UserTransaction ut);1495868221;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;@Nullable_	protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;nullable,protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager findTransactionManager(UserTransaction ut);1496242568;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;@Nullable_	protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;nullable,protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager findTransactionManager(UserTransaction ut);1496837955;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;@Nullable_	protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;nullable,protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager findTransactionManager(UserTransaction ut);1498780456;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;@Nullable_	protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;nullable,protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager findTransactionManager(UserTransaction ut);1500448076;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;@Nullable_	protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;nullable,protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager findTransactionManager(UserTransaction ut);1519732288;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;@Nullable_	protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;nullable,protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager findTransactionManager(UserTransaction ut);1519772955;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;@Nullable_	protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;nullable,protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager findTransactionManager(UserTransaction ut);1530174524;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;@Nullable_	protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;nullable,protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
JtaTransactionManager -> @Nullable 	protected TransactionManager findTransactionManager(UserTransaction ut);1532091916;Find the JTA TransactionManager through autodetection: checking whether the_UserTransaction object implements the TransactionManager, and checking the_fallback JNDI locations._@param ut the JTA UserTransaction object_@return the JTA TransactionManager reference, or {@code null} if not found_@see #FALLBACK_TRANSACTION_MANAGER_NAMES;@Nullable_	protected TransactionManager findTransactionManager(UserTransaction ut) {_		if (ut instanceof TransactionManager) {_			if (logger.isDebugEnabled()) {_				logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager")__			}_			return (TransactionManager) ut__		}__		_		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {_			try {_				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class)__				if (logger.isDebugEnabled()) {_					logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]")__				}_				return tm__			}_			catch (NamingException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex)__				}_			}_		}__		_		return null__	};find,the,jta,transaction,manager,through,autodetection,checking,whether,the,user,transaction,object,implements,the,transaction,manager,and,checking,the,fallback,jndi,locations,param,ut,the,jta,user,transaction,object,return,the,jta,transaction,manager,reference,or,code,null,if,not,found,see;nullable,protected,transaction,manager,find,transaction,manager,user,transaction,ut,if,ut,instanceof,transaction,manager,if,logger,is,debug,enabled,logger,debug,jta,user,transaction,object,ut,implements,transaction,manager,return,transaction,manager,ut,for,string,jndi,name,try,transaction,manager,tm,get,jndi,template,lookup,jndi,name,transaction,manager,class,if,logger,is,debug,enabled,logger,debug,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,return,tm,catch,naming,exception,ex,if,logger,is,debug,enabled,logger,debug,no,jta,transaction,manager,found,at,fallback,jndi,location,jndi,name,ex,return,null
