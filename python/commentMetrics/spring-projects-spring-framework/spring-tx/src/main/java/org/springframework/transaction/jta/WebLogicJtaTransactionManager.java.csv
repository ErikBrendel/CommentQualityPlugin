commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void afterPropertiesSet() throws TransactionSystemException {     super.afterPropertiesSet().     loadWebLogicTransactionClasses(). }
false;protected;0;18;;@Override @Nullable protected UserTransaction retrieveUserTransaction() throws TransactionSystemException {     Object helper = loadWebLogicTransactionHelper().     try {         logger.trace("Retrieving JTA UserTransaction from WebLogic TransactionHelper").         Method getUserTransactionMethod = helper.getClass().getMethod("getUserTransaction").         return (UserTransaction) getUserTransactionMethod.invoke(this.transactionHelper).     } catch (InvocationTargetException ex) {         throw new TransactionSystemException("WebLogic's TransactionHelper.getUserTransaction() method failed", ex.getTargetException()).     } catch (Exception ex) {         throw new TransactionSystemException("Could not invoke WebLogic's TransactionHelper.getUserTransaction() method", ex).     } }
false;protected;0;18;;@Override @Nullable protected TransactionManager retrieveTransactionManager() throws TransactionSystemException {     Object helper = loadWebLogicTransactionHelper().     try {         logger.trace("Retrieving JTA TransactionManager from WebLogic TransactionHelper").         Method getTransactionManagerMethod = helper.getClass().getMethod("getTransactionManager").         return (TransactionManager) getTransactionManagerMethod.invoke(this.transactionHelper).     } catch (InvocationTargetException ex) {         throw new TransactionSystemException("WebLogic's TransactionHelper.getTransactionManager() method failed", ex.getTargetException()).     } catch (Exception ex) {         throw new TransactionSystemException("Could not invoke WebLogic's TransactionHelper.getTransactionManager() method", ex).     } }
false;private;0;22;;private Object loadWebLogicTransactionHelper() throws TransactionSystemException {     Object helper = this.transactionHelper.     if (helper == null) {         try {             Class<?> transactionHelperClass = getClass().getClassLoader().loadClass(TRANSACTION_HELPER_CLASS_NAME).             Method getTransactionHelperMethod = transactionHelperClass.getMethod("getTransactionHelper").             helper = getTransactionHelperMethod.invoke(null).             this.transactionHelper = helper.             logger.trace("WebLogic TransactionHelper found").         } catch (InvocationTargetException ex) {             throw new TransactionSystemException("WebLogic's TransactionHelper.getTransactionHelper() method failed", ex.getTargetException()).         } catch (Exception ex) {             throw new TransactionSystemException("Could not initialize WebLogicJtaTransactionManager because WebLogic API classes are not available", ex).         }     }     return helper. }
false;private;0;35;;private void loadWebLogicTransactionClasses() throws TransactionSystemException {     try {         Class<?> userTransactionClass = getClass().getClassLoader().loadClass(USER_TRANSACTION_CLASS_NAME).         this.weblogicUserTransactionAvailable = userTransactionClass.isInstance(getUserTransaction()).         if (this.weblogicUserTransactionAvailable) {             this.beginWithNameMethod = userTransactionClass.getMethod("begin", String.class).             this.beginWithNameAndTimeoutMethod = userTransactionClass.getMethod("begin", String.class, int.class).             logger.debug("Support for WebLogic transaction names available").         } else {             logger.debug("Support for WebLogic transaction names not available").         }         // Obtain WebLogic ClientTransactionManager interface.         Class<?> transactionManagerClass = getClass().getClassLoader().loadClass(CLIENT_TRANSACTION_MANAGER_CLASS_NAME).         logger.trace("WebLogic ClientTransactionManager found").         this.weblogicTransactionManagerAvailable = transactionManagerClass.isInstance(getTransactionManager()).         if (this.weblogicTransactionManagerAvailable) {             Class<?> transactionClass = getClass().getClassLoader().loadClass(TRANSACTION_CLASS_NAME).             this.forceResumeMethod = transactionManagerClass.getMethod("forceResume", Transaction.class).             this.setPropertyMethod = transactionClass.getMethod("setProperty", String.class, Serializable.class).             logger.debug("Support for WebLogic forceResume available").         } else {             logger.debug("Support for WebLogic forceResume not available").         }     } catch (Exception ex) {         throw new TransactionSystemException("Could not initialize WebLogicJtaTransactionManager because WebLogic API classes are not available", ex).     } }
false;private;0;5;;private TransactionManager obtainTransactionManager() {     TransactionManager tm = getTransactionManager().     Assert.state(tm != null, "No TransactionManager set").     return tm. }
false;protected;2;69;;@Override protected void doJtaBegin(JtaTransactionObject txObject, TransactionDefinition definition) throws NotSupportedException, SystemException {     int timeout = determineTimeout(definition).     // Apply transaction name (if any) to WebLogic transaction.     if (this.weblogicUserTransactionAvailable && definition.getName() != null) {         try {             if (timeout > TransactionDefinition.TIMEOUT_DEFAULT) {                 /* 					weblogic.transaction.UserTransaction wut = (weblogic.transaction.UserTransaction) ut. 					wut.begin(definition.getName(), timeout). 					*/                 Assert.state(this.beginWithNameAndTimeoutMethod != null, "WebLogic JTA API not initialized").                 this.beginWithNameAndTimeoutMethod.invoke(txObject.getUserTransaction(), definition.getName(), timeout).             } else {                 /* 					weblogic.transaction.UserTransaction wut = (weblogic.transaction.UserTransaction) ut. 					wut.begin(definition.getName()). 					*/                 Assert.state(this.beginWithNameMethod != null, "WebLogic JTA API not initialized").                 this.beginWithNameMethod.invoke(txObject.getUserTransaction(), definition.getName()).             }         } catch (InvocationTargetException ex) {             throw new TransactionSystemException("WebLogic's UserTransaction.begin() method failed", ex.getTargetException()).         } catch (Exception ex) {             throw new TransactionSystemException("Could not invoke WebLogic's UserTransaction.begin() method", ex).         }     } else {         // No WebLogic UserTransaction available or no transaction name specified         // -> standard JTA begin call.         applyTimeout(txObject, timeout).         txObject.getUserTransaction().begin().     }     // Specify isolation level, if any, through corresponding WebLogic transaction property.     if (this.weblogicTransactionManagerAvailable) {         if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {             try {                 Transaction tx = obtainTransactionManager().getTransaction().                 Integer isolationLevel = definition.getIsolationLevel().                 /* 					weblogic.transaction.Transaction wtx = (weblogic.transaction.Transaction) tx. 					wtx.setProperty(ISOLATION_LEVEL_KEY, isolationLevel). 					*/                 Assert.state(this.setPropertyMethod != null, "WebLogic JTA API not initialized").                 this.setPropertyMethod.invoke(tx, ISOLATION_LEVEL_KEY, isolationLevel).             } catch (InvocationTargetException ex) {                 throw new TransactionSystemException("WebLogic's Transaction.setProperty(String, Serializable) method failed", ex.getTargetException()).             } catch (Exception ex) {                 throw new TransactionSystemException("Could not invoke WebLogic's Transaction.setProperty(String, Serializable) method", ex).             }         }     } else {         applyIsolationLevel(txObject, definition.getIsolationLevel()).     } }
false;protected;2;35;;@Override protected void doJtaResume(@Nullable JtaTransactionObject txObject, Object suspendedTransaction) throws InvalidTransactionException, SystemException {     try {         obtainTransactionManager().resume((Transaction) suspendedTransaction).     } catch (InvalidTransactionException ex) {         if (!this.weblogicTransactionManagerAvailable) {             throw ex.         }         if (logger.isDebugEnabled()) {             logger.debug("Standard JTA resume threw InvalidTransactionException: " + ex.getMessage() + " - trying WebLogic JTA forceResume").         }         /* 			weblogic.transaction.TransactionManager wtm = 					(weblogic.transaction.TransactionManager) getTransactionManager(). 			wtm.forceResume(suspendedTransaction). 			*/         try {             Assert.state(this.forceResumeMethod != null, "WebLogic JTA API not initialized").             this.forceResumeMethod.invoke(getTransactionManager(), suspendedTransaction).         } catch (InvocationTargetException ex2) {             throw new TransactionSystemException("WebLogic's TransactionManager.forceResume(Transaction) method failed", ex2.getTargetException()).         } catch (Exception ex2) {             throw new TransactionSystemException("Could not access WebLogic's TransactionManager.forceResume(Transaction) method", ex2).         }     } }
false;public;2;39;;@Override public Transaction createTransaction(@Nullable String name, int timeout) throws NotSupportedException, SystemException {     if (this.weblogicUserTransactionAvailable && name != null) {         try {             if (timeout >= 0) {                 Assert.state(this.beginWithNameAndTimeoutMethod != null, "WebLogic JTA API not initialized").                 this.beginWithNameAndTimeoutMethod.invoke(getUserTransaction(), name, timeout).             } else {                 Assert.state(this.beginWithNameMethod != null, "WebLogic JTA API not initialized").                 this.beginWithNameMethod.invoke(getUserTransaction(), name).             }         } catch (InvocationTargetException ex) {             if (ex.getTargetException() instanceof NotSupportedException) {                 throw (NotSupportedException) ex.getTargetException().             } else if (ex.getTargetException() instanceof SystemException) {                 throw (SystemException) ex.getTargetException().             } else if (ex.getTargetException() instanceof RuntimeException) {                 throw (RuntimeException) ex.getTargetException().             } else {                 throw new SystemException("WebLogic's begin() method failed with an unexpected error: " + ex.getTargetException()).             }         } catch (Exception ex) {             throw new SystemException("Could not invoke WebLogic's UserTransaction.begin() method: " + ex).         }         return new ManagedTransactionAdapter(obtainTransactionManager()).     } else {         // No name specified - standard JTA is sufficient.         return super.createTransaction(name, timeout).     } }
