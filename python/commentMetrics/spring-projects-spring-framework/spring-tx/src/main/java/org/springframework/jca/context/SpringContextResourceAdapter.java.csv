commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the location of the context configuration files, within the  * resource adapter's deployment unit. This can be a delimited  * String that consists of multiple resource location, separated  * by commas, semicolons, whitespace, or line breaks.  * <p>This can be specified as "ContextConfigLocation" config  * property in the {@code ra.xml} deployment descriptor.  * <p>The default is "classpath:META-INF/applicationContext.xml".  */ ;/**  * Set the location of the context configuration files, within the  * resource adapter's deployment unit. This can be a delimited  * String that consists of multiple resource location, separated  * by commas, semicolons, whitespace, or line breaks.  * <p>This can be specified as "ContextConfigLocation" config  * property in the {@code ra.xml} deployment descriptor.  * <p>The default is "classpath:META-INF/applicationContext.xml".  */ public void setContextConfigLocation(String contextConfigLocation) {     this.contextConfigLocation = contextConfigLocation. }
true;protected;0;3;/**  * Return the specified context configuration files.  */ ;/**  * Return the specified context configuration files.  */ protected String getContextConfigLocation() {     return this.contextConfigLocation. }
true;protected;0;3;/**  * Return a new {@link StandardEnvironment}.  * <p>Subclasses may override this method in order to supply  * a custom {@link ConfigurableEnvironment} implementation.  */ ;/**  * Return a new {@link StandardEnvironment}.  * <p>Subclasses may override this method in order to supply  * a custom {@link ConfigurableEnvironment} implementation.  */ protected ConfigurableEnvironment createEnvironment() {     return new StandardEnvironment(). }
true;public;1;7;/**  * This implementation loads a Spring ApplicationContext through the  * {@link #createApplicationContext} template method.  */ ;/**  * This implementation loads a Spring ApplicationContext through the  * {@link #createApplicationContext} template method.  */ @Override public void start(BootstrapContext bootstrapContext) throws ResourceAdapterInternalException {     if (logger.isDebugEnabled()) {         logger.debug("Starting SpringContextResourceAdapter with BootstrapContext: " + bootstrapContext).     }     this.applicationContext = createApplicationContext(bootstrapContext). }
true;protected;1;16;/**  * Build a Spring ApplicationContext for the given JCA BootstrapContext.  * <p>The default implementation builds a {@link ResourceAdapterApplicationContext}  * and delegates to {@link #loadBeanDefinitions} for actually parsing the  * specified configuration files.  * @param bootstrapContext this ResourceAdapter's BootstrapContext  * @return the Spring ApplicationContext instance  */ ;/**  * Build a Spring ApplicationContext for the given JCA BootstrapContext.  * <p>The default implementation builds a {@link ResourceAdapterApplicationContext}  * and delegates to {@link #loadBeanDefinitions} for actually parsing the  * specified configuration files.  * @param bootstrapContext this ResourceAdapter's BootstrapContext  * @return the Spring ApplicationContext instance  */ protected ConfigurableApplicationContext createApplicationContext(BootstrapContext bootstrapContext) {     ResourceAdapterApplicationContext applicationContext = new ResourceAdapterApplicationContext(bootstrapContext).     // Set ResourceAdapter's ClassLoader as bean class loader.     applicationContext.setClassLoader(getClass().getClassLoader()).     // Extract individual config locations.     String[] configLocations = StringUtils.tokenizeToStringArray(getContextConfigLocation(), CONFIG_LOCATION_DELIMITERS).     loadBeanDefinitions(applicationContext, configLocations).     applicationContext.refresh().     return applicationContext. }
true;protected;2;3;/**  * Load the bean definitions into the given registry,  * based on the specified configuration files.  * @param registry the registry to load into  * @param configLocations the parsed config locations  * @see #setContextConfigLocation  */ ;/**  * Load the bean definitions into the given registry,  * based on the specified configuration files.  * @param registry the registry to load into  * @param configLocations the parsed config locations  * @see #setContextConfigLocation  */ protected void loadBeanDefinitions(BeanDefinitionRegistry registry, String[] configLocations) {     new XmlBeanDefinitionReader(registry).loadBeanDefinitions(configLocations). }
true;public;0;7;/**  * This implementation closes the Spring ApplicationContext.  */ ;/**  * This implementation closes the Spring ApplicationContext.  */ @Override public void stop() {     logger.debug("Stopping SpringContextResourceAdapter").     if (this.applicationContext != null) {         this.applicationContext.close().     } }
true;public;2;6;/**  * This implementation always throws a NotSupportedException.  */ ;/**  * This implementation always throws a NotSupportedException.  */ @Override public void endpointActivation(MessageEndpointFactory messageEndpointFactory, ActivationSpec activationSpec) throws ResourceException {     throw new NotSupportedException("SpringContextResourceAdapter does not support message endpoints"). }
true;public;2;3;/**  * This implementation does nothing.  */ ;/**  * This implementation does nothing.  */ @Override public void endpointDeactivation(MessageEndpointFactory messageEndpointFactory, ActivationSpec activationSpec) { }
true;public;1;5;/**  * This implementation always returns {@code null}.  */ ;/**  * This implementation always returns {@code null}.  */ @Override @Nullable public XAResource[] getXAResources(ActivationSpec[] activationSpecs) throws ResourceException {     return null. }
false;public;1;6;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof SpringContextResourceAdapter && ObjectUtils.nullSafeEquals(getContextConfigLocation(), ((SpringContextResourceAdapter) other).getContextConfigLocation()))). }
false;public;0;4;;@Override public int hashCode() {     return ObjectUtils.nullSafeHashCode(getContextConfigLocation()). }
