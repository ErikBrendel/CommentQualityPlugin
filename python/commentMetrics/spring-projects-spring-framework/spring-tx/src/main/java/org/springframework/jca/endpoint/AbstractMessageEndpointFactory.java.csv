# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected void onEndpointException(Throwable ex);1523537186;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected void onEndpointException(Throwable ex) {_			Assert.state(this.transactionDelegate != null, "Not initialized")__			this.transactionDelegate.setRollbackOnly()__			logger.debug("Transaction marked as rollback-only after endpoint exception", ex)__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,void,on,endpoint,exception,throwable,ex,assert,state,this,transaction,delegate,null,not,initialized,this,transaction,delegate,set,rollback,only,logger,debug,transaction,marked,as,rollback,only,after,endpoint,exception,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected void onEndpointException(Throwable ex);1530174524;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected void onEndpointException(Throwable ex) {_			Assert.state(this.transactionDelegate != null, "Not initialized")__			this.transactionDelegate.setRollbackOnly()__			logger.debug("Transaction marked as rollback-only after endpoint exception", ex)__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,void,on,endpoint,exception,throwable,ex,assert,state,this,transaction,delegate,null,not,initialized,this,transaction,delegate,set,rollback,only,logger,debug,transaction,marked,as,rollback,only,after,endpoint,exception,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1328020251;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1356735495;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1357119239;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1368482696;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1383603297;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1461047077;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1467749899;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1495868221;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1496259743;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1496837955;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1498780456;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1520529117;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1523537186;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> void initXAResource(XAResource xaResource);1530174524;Initialize this endpoint's TransactionDelegate._@param xaResource the XAResource for this endpoint;void initXAResource(XAResource xaResource) {_			this.transactionDelegate = new TransactionDelegate(xaResource)__		};initialize,this,endpoint,s,transaction,delegate,param,xa,resource,the,xaresource,for,this,endpoint;void,init,xaresource,xaresource,xa,resource,this,transaction,delegate,new,transaction,delegate,xa,resource
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1328020251;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1356735495;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1357119239;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1368482696;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1383603297;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1461047077;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1467749899;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1495868221;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1496259743;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1496837955;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1498780456;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1520529117;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1523537186;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> public void setTransactionTimeout(int transactionTimeout);1530174524;Specify the transaction timeout, if any._<p>Default is -1: rely on the transaction manager's default timeout._Specify a concrete timeout to restrict the maximum duration of each_endpoint invocation.;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionTimeout = transactionTimeout__	};specify,the,transaction,timeout,if,any,p,default,is,1,rely,on,the,transaction,manager,s,default,timeout,specify,a,concrete,timeout,to,restrict,the,maximum,duration,of,each,endpoint,invocation;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,timeout,transaction,timeout
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void beforeDelivery(Method method) throws ResourceException;1356735495;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.5 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;@Override_		public void beforeDelivery(Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,5,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;override,public,void,before,delivery,method,method,throws,resource,exception,this,before,delivery,called,true,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void beforeDelivery(Method method) throws ResourceException;1368482696;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.5 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;@Override_		public void beforeDelivery(Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,5,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;override,public,void,before,delivery,method,method,throws,resource,exception,this,before,delivery,called,true,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void beforeDelivery(Method method) throws ResourceException;1383603297;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.5 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;@Override_		public void beforeDelivery(Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,5,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;override,public,void,before,delivery,method,method,throws,resource,exception,this,before,delivery,called,true,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void beforeDelivery(Method method) throws ResourceException;1461047077;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.5 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;@Override_		public void beforeDelivery(Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,5,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;override,public,void,before,delivery,method,method,throws,resource,exception,this,before,delivery,called,true,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void beforeDelivery(Method method) throws ResourceException;1467749899;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;@Override_		public void beforeDelivery(Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;override,public,void,before,delivery,method,method,throws,resource,exception,this,before,delivery,called,true,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void beforeDelivery(Method method) throws ResourceException;1495868221;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;@Override_		public void beforeDelivery(Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;override,public,void,before,delivery,method,method,throws,resource,exception,this,before,delivery,called,true,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final void onEndpointException(Throwable ex);1328020251;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected final void onEndpointException(Throwable ex) {_			this.transactionDelegate.setRollbackOnly()__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,final,void,on,endpoint,exception,throwable,ex,this,transaction,delegate,set,rollback,only
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final void onEndpointException(Throwable ex);1356735495;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected final void onEndpointException(Throwable ex) {_			this.transactionDelegate.setRollbackOnly()__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,final,void,on,endpoint,exception,throwable,ex,this,transaction,delegate,set,rollback,only
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final void onEndpointException(Throwable ex);1357119239;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected final void onEndpointException(Throwable ex) {_			this.transactionDelegate.setRollbackOnly()__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,final,void,on,endpoint,exception,throwable,ex,this,transaction,delegate,set,rollback,only
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final void onEndpointException(Throwable ex);1368482696;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected final void onEndpointException(Throwable ex) {_			this.transactionDelegate.setRollbackOnly()__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,final,void,on,endpoint,exception,throwable,ex,this,transaction,delegate,set,rollback,only
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final void onEndpointException(Throwable ex);1383603297;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected final void onEndpointException(Throwable ex) {_			this.transactionDelegate.setRollbackOnly()__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,final,void,on,endpoint,exception,throwable,ex,this,transaction,delegate,set,rollback,only
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final void onEndpointException(Throwable ex);1461047077;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected final void onEndpointException(Throwable ex) {_			this.transactionDelegate.setRollbackOnly()__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,final,void,on,endpoint,exception,throwable,ex,this,transaction,delegate,set,rollback,only
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final void onEndpointException(Throwable ex);1467749899;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected final void onEndpointException(Throwable ex) {_			this.transactionDelegate.setRollbackOnly()__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,final,void,on,endpoint,exception,throwable,ex,this,transaction,delegate,set,rollback,only
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final void onEndpointException(Throwable ex);1495868221;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected final void onEndpointException(Throwable ex) {_			this.transactionDelegate.setRollbackOnly()__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,final,void,on,endpoint,exception,throwable,ex,this,transaction,delegate,set,rollback,only
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final void onEndpointException(Throwable ex);1496259743;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected final void onEndpointException(Throwable ex) {_			this.transactionDelegate.setRollbackOnly()__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,final,void,on,endpoint,exception,throwable,ex,this,transaction,delegate,set,rollback,only
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final void onEndpointException(Throwable ex);1496837955;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected final void onEndpointException(Throwable ex) {_			this.transactionDelegate.setRollbackOnly()__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,final,void,on,endpoint,exception,throwable,ex,this,transaction,delegate,set,rollback,only
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final void onEndpointException(Throwable ex);1498780456;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected final void onEndpointException(Throwable ex) {_			Assert.state(this.transactionDelegate != null, "Not initialized")__			this.transactionDelegate.setRollbackOnly()__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,final,void,on,endpoint,exception,throwable,ex,assert,state,this,transaction,delegate,null,not,initialized,this,transaction,delegate,set,rollback,only
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final void onEndpointException(Throwable ex);1520529117;Callback method for notifying the endpoint base class_that the concrete endpoint invocation led to an exception._<p>To be invoked by subclasses in case of the concrete_endpoint throwing an exception._@param ex the exception thrown from the concrete endpoint;protected final void onEndpointException(Throwable ex) {_			Assert.state(this.transactionDelegate != null, "Not initialized")__			this.transactionDelegate.setRollbackOnly()__		};callback,method,for,notifying,the,endpoint,base,class,that,the,concrete,endpoint,invocation,led,to,an,exception,p,to,be,invoked,by,subclasses,in,case,of,the,concrete,endpoint,throwing,an,exception,param,ex,the,exception,thrown,from,the,concrete,endpoint;protected,final,void,on,endpoint,exception,throwable,ex,assert,state,this,transaction,delegate,null,not,initialized,this,transaction,delegate,set,rollback,only
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() 			throws UnavailableException_;1328020251;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never <code>null</code>)_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal()_			throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,code,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() 			throws UnavailableException_;1356735495;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal()_			throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() 			throws UnavailableException_;1357119239;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal()_			throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() 			throws UnavailableException_;1368482696;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal()_			throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1328020251;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1356735495;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1357119239;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1368482696;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1383603297;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1461047077;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1467749899;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1495868221;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1496259743;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1496837955;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1498780456;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1520529117;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1523537186;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionFactory(TransactionFactory transactionFactory);1530174524;Set the Spring TransactionFactory to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>Alternatively, specify an appropriate transaction manager through_the {@link #setTransactionManager "transactionManager"} property._<p>If no transaction factory is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionFactory(TransactionFactory transactionFactory) {_		this.transactionFactory = transactionFactory__	};set,the,spring,transaction,factory,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,alternatively,specify,an,appropriate,transaction,manager,through,the,link,set,transaction,manager,transaction,manager,property,p,if,no,transaction,factory,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,factory,transaction,factory,transaction,factory,this,transaction,factory,transaction,factory
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1328020251;Set the the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1356735495;Set the the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1357119239;Set the the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1368482696;Set the the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1383603297;Set the the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1461047077;Set the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1467749899;Set the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1495868221;Set the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1496259743;Set the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1496837955;Set the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1498780456;Set the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1520529117;Set the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1523537186;Set the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> public void setTransactionManager(Object transactionManager);1530174524;Set the XA transaction manager to use for wrapping endpoint_invocations, enlisting the endpoint resource in each such transaction._<p>The passed-in object may be a transaction manager which implements_Spring's {@link org.springframework.transaction.jta.TransactionFactory}_interface, or a plain {@link javax.transaction.TransactionManager}._<p>If no transaction manager is specified, the endpoint invocation_will simply not be wrapped in an XA transaction. Check out your_resource provider's ActivationSpec documentation for local_transaction options of your particular provider._@see #setTransactionName_@see #setTransactionTimeout;public void setTransactionManager(Object transactionManager) {_		if (transactionManager instanceof TransactionFactory) {_			this.transactionFactory = (TransactionFactory) transactionManager__		}_		else if (transactionManager instanceof TransactionManager) {_			this.transactionFactory = new SimpleTransactionFactory((TransactionManager) transactionManager)__		}_		else {_			throw new IllegalArgumentException("Transaction manager [" + transactionManager +_					"] is neither a [org.springframework.transaction.jta.TransactionFactory} nor a " +_					"[javax.transaction.TransactionManager]")__		}_	};set,the,xa,transaction,manager,to,use,for,wrapping,endpoint,invocations,enlisting,the,endpoint,resource,in,each,such,transaction,p,the,passed,in,object,may,be,a,transaction,manager,which,implements,spring,s,link,org,springframework,transaction,jta,transaction,factory,interface,or,a,plain,link,javax,transaction,transaction,manager,p,if,no,transaction,manager,is,specified,the,endpoint,invocation,will,simply,not,be,wrapped,in,an,xa,transaction,check,out,your,resource,provider,s,activation,spec,documentation,for,local,transaction,options,of,your,particular,provider,see,set,transaction,name,see,set,transaction,timeout;public,void,set,transaction,manager,object,transaction,manager,if,transaction,manager,instanceof,transaction,factory,this,transaction,factory,transaction,factory,transaction,manager,else,if,transaction,manager,instanceof,transaction,manager,this,transaction,factory,new,simple,transaction,factory,transaction,manager,transaction,manager,else,throw,new,illegal,argument,exception,transaction,manager,transaction,manager,is,neither,a,org,springframework,transaction,jta,transaction,factory,nor,a,javax,transaction,transaction,manager
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1356735495;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1368482696;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1383603297;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1461047077;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1467749899;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1495868221;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1496259743;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1496837955;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1498780456;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1520529117;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1523537186;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1530174524;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1356735495;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;@Override_	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;override,public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> @Override 	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1368482696;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;@Override_	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;override,public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> @Override 	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1383603297;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;@Override_	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;override,public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> @Override 	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1461047077;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;@Override_	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;override,public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> @Override 	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1467749899;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;@Override_	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;override,public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> @Override 	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1495868221;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;@Override_	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;override,public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> @Override 	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1496259743;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;@Override_	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;override,public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> @Override 	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1496837955;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;@Override_	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;override,public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> @Override 	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1498780456;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;@Override_	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;override,public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> @Override 	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1520529117;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;@Override_	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;override,public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> @Override 	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1523537186;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;@Override_	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;override,public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> @Override 	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1530174524;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;@Override_	public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;override,public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public Class<?> getEndpointClass();1495868221;Implementation of the JCA 1.7 {@code #getEndpointClass()} method,_returning {@code} null in order to indicate a synthetic endpoint type.;@Override_	@Nullable_	public Class<?> getEndpointClass() {_		return null__	};implementation,of,the,jca,1,7,code,get,endpoint,class,method,returning,code,null,in,order,to,indicate,a,synthetic,endpoint,type;override,nullable,public,class,get,endpoint,class,return,null
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public Class<?> getEndpointClass();1496259743;Implementation of the JCA 1.7 {@code #getEndpointClass()} method,_returning {@code} null in order to indicate a synthetic endpoint type.;@Override_	@Nullable_	public Class<?> getEndpointClass() {_		return null__	};implementation,of,the,jca,1,7,code,get,endpoint,class,method,returning,code,null,in,order,to,indicate,a,synthetic,endpoint,type;override,nullable,public,class,get,endpoint,class,return,null
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public Class<?> getEndpointClass();1496837955;Implementation of the JCA 1.7 {@code #getEndpointClass()} method,_returning {@code} null in order to indicate a synthetic endpoint type.;@Override_	@Nullable_	public Class<?> getEndpointClass() {_		return null__	};implementation,of,the,jca,1,7,code,get,endpoint,class,method,returning,code,null,in,order,to,indicate,a,synthetic,endpoint,type;override,nullable,public,class,get,endpoint,class,return,null
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public Class<?> getEndpointClass();1498780456;Implementation of the JCA 1.7 {@code #getEndpointClass()} method,_returning {@code} null in order to indicate a synthetic endpoint type.;@Override_	@Nullable_	public Class<?> getEndpointClass() {_		return null__	};implementation,of,the,jca,1,7,code,get,endpoint,class,method,returning,code,null,in,order,to,indicate,a,synthetic,endpoint,type;override,nullable,public,class,get,endpoint,class,return,null
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public Class<?> getEndpointClass();1520529117;Implementation of the JCA 1.7 {@code #getEndpointClass()} method,_returning {@code} null in order to indicate a synthetic endpoint type.;@Override_	@Nullable_	public Class<?> getEndpointClass() {_		return null__	};implementation,of,the,jca,1,7,code,get,endpoint,class,method,returning,code,null,in,order,to,indicate,a,synthetic,endpoint,type;override,nullable,public,class,get,endpoint,class,return,null
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public Class<?> getEndpointClass();1523537186;Implementation of the JCA 1.7 {@code #getEndpointClass()} method,_returning {@code} null in order to indicate a synthetic endpoint type.;@Override_	@Nullable_	public Class<?> getEndpointClass() {_		return null__	};implementation,of,the,jca,1,7,code,get,endpoint,class,method,returning,code,null,in,order,to,indicate,a,synthetic,endpoint,type;override,nullable,public,class,get,endpoint,class,return,null
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public Class<?> getEndpointClass();1530174524;Implementation of the JCA 1.7 {@code #getEndpointClass()} method,_returning {@code} null in order to indicate a synthetic endpoint type.;@Override_	@Nullable_	public Class<?> getEndpointClass() {_		return null__	};implementation,of,the,jca,1,7,code,get,endpoint,class,method,returning,code,null,in,order,to,indicate,a,synthetic,endpoint,type;override,nullable,public,class,get,endpoint,class,return,null
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1328020251;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1356735495;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1357119239;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1368482696;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1383603297;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1461047077;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1467749899;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1495868221;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1496259743;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1496837955;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1498780456;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1520529117;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1523537186;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected final boolean hasBeforeDeliveryBeenCalled();1530174524;Return whether the {@link #beforeDelivery} method of this endpoint_has already been called.;protected final boolean hasBeforeDeliveryBeenCalled() {_			return this.beforeDeliveryCalled__		};return,whether,the,link,before,delivery,method,of,this,endpoint,has,already,been,called;protected,final,boolean,has,before,delivery,been,called,return,this,before,delivery,called
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void afterDelivery() throws ResourceException;1356735495;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.5 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;@Override_		public void afterDelivery() throws ResourceException {_			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,5,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;override,public,void,after,delivery,throws,resource,exception,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void afterDelivery() throws ResourceException;1368482696;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.5 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;@Override_		public void afterDelivery() throws ResourceException {_			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,5,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;override,public,void,after,delivery,throws,resource,exception,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void afterDelivery() throws ResourceException;1383603297;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.5 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;@Override_		public void afterDelivery() throws ResourceException {_			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,5,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;override,public,void,after,delivery,throws,resource,exception,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void afterDelivery() throws ResourceException;1461047077;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.5 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;@Override_		public void afterDelivery() throws ResourceException {_			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,5,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;override,public,void,after,delivery,throws,resource,exception,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void afterDelivery() throws ResourceException;1467749899;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;@Override_		public void afterDelivery() throws ResourceException {_			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;override,public,void,after,delivery,throws,resource,exception,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void afterDelivery() throws ResourceException;1495868221;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;@Override_		public void afterDelivery() throws ResourceException {_			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;override,public,void,after,delivery,throws,resource,exception,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void afterDelivery() throws ResourceException;1496259743;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;@Override_		public void afterDelivery() throws ResourceException {_			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;override,public,void,after,delivery,throws,resource,exception,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void afterDelivery() throws ResourceException;1496837955;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;@Override_		public void afterDelivery() throws ResourceException {_			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;override,public,void,after,delivery,throws,resource,exception,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void afterDelivery() throws ResourceException;1498780456;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;@Override_		public void afterDelivery() throws ResourceException {_			Assert.state(this.transactionDelegate != null, "Not initialized")__			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;override,public,void,after,delivery,throws,resource,exception,assert,state,this,transaction,delegate,null,not,initialized,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void afterDelivery() throws ResourceException;1520529117;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;@Override_		public void afterDelivery() throws ResourceException {_			Assert.state(this.transactionDelegate != null, "Not initialized")__			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;override,public,void,after,delivery,throws,resource,exception,assert,state,this,transaction,delegate,null,not,initialized,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void afterDelivery() throws ResourceException;1523537186;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;@Override_		public void afterDelivery() throws ResourceException {_			Assert.state(this.transactionDelegate != null, "Not initialized")__			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				logger.warn("Failed to complete transaction after endpoint delivery", ex)__				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;override,public,void,after,delivery,throws,resource,exception,assert,state,this,transaction,delegate,null,not,initialized,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,logger,warn,failed,to,complete,transaction,after,endpoint,delivery,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void afterDelivery() throws ResourceException;1530174524;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;@Override_		public void afterDelivery() throws ResourceException {_			Assert.state(this.transactionDelegate != null, "Not initialized")__			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				logger.warn("Failed to complete transaction after endpoint delivery", ex)__				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;override,public,void,after,delivery,throws,resource,exception,assert,state,this,transaction,delegate,null,not,initialized,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,logger,warn,failed,to,complete,transaction,after,endpoint,delivery,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> public String getActivationName();1383603297;Implementation of the JCA 1.7 {@code #getActivationName()} method,_returning the bean name as set on this MessageEndpointFactory._@see #setBeanName;public String getActivationName() {_		return this.beanName__	};implementation,of,the,jca,1,7,code,get,activation,name,method,returning,the,bean,name,as,set,on,this,message,endpoint,factory,see,set,bean,name;public,string,get,activation,name,return,this,bean,name
AbstractMessageEndpointFactory -> public String getActivationName();1461047077;Implementation of the JCA 1.7 {@code #getActivationName()} method,_returning the bean name as set on this MessageEndpointFactory._@see #setBeanName;public String getActivationName() {_		return this.beanName__	};implementation,of,the,jca,1,7,code,get,activation,name,method,returning,the,bean,name,as,set,on,this,message,endpoint,factory,see,set,bean,name;public,string,get,activation,name,return,this,bean,name
AbstractMessageEndpointFactory -> public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1328020251;The standard JCA 1.5 version of <code>createEndpoint</code>._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,code,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException;1357119239;The standard JCA 1.5 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_initializing the endpoint's XAResource before the endpoint gets invoked.;public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,standard,jca,1,5,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,initializing,the,endpoint,s,xaresource,before,the,endpoint,gets,invoked;public,message,endpoint,create,endpoint,xaresource,xa,resource,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1328020251;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1356735495;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1357119239;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1368482696;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1383603297;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1461047077;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1467749899;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1495868221;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1496259743;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1496837955;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1498780456;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1520529117;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1523537186;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> public void setTransactionName(String transactionName);1530174524;Specify the name of the transaction, if any._<p>Default is none. A specified name will be passed on to the transaction_manager, allowing to identify the transaction in a transaction monitor.;public void setTransactionName(String transactionName) {_		this.transactionName = transactionName__	};specify,the,name,of,the,transaction,if,any,p,default,is,none,a,specified,name,will,be,passed,on,to,the,transaction,manager,allowing,to,identify,the,transaction,in,a,transaction,monitor;public,void,set,transaction,name,string,transaction,name,this,transaction,name,transaction,name
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public String getActivationName();1495868221;Implementation of the JCA 1.7 {@code #getActivationName()} method,_returning the bean name as set on this MessageEndpointFactory._@see #setBeanName;@Override_	@Nullable_	public String getActivationName() {_		return this.beanName__	};implementation,of,the,jca,1,7,code,get,activation,name,method,returning,the,bean,name,as,set,on,this,message,endpoint,factory,see,set,bean,name;override,nullable,public,string,get,activation,name,return,this,bean,name
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public String getActivationName();1496259743;Implementation of the JCA 1.7 {@code #getActivationName()} method,_returning the bean name as set on this MessageEndpointFactory._@see #setBeanName;@Override_	@Nullable_	public String getActivationName() {_		return this.beanName__	};implementation,of,the,jca,1,7,code,get,activation,name,method,returning,the,bean,name,as,set,on,this,message,endpoint,factory,see,set,bean,name;override,nullable,public,string,get,activation,name,return,this,bean,name
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public String getActivationName();1496837955;Implementation of the JCA 1.7 {@code #getActivationName()} method,_returning the bean name as set on this MessageEndpointFactory._@see #setBeanName;@Override_	@Nullable_	public String getActivationName() {_		return this.beanName__	};implementation,of,the,jca,1,7,code,get,activation,name,method,returning,the,bean,name,as,set,on,this,message,endpoint,factory,see,set,bean,name;override,nullable,public,string,get,activation,name,return,this,bean,name
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public String getActivationName();1498780456;Implementation of the JCA 1.7 {@code #getActivationName()} method,_returning the bean name as set on this MessageEndpointFactory._@see #setBeanName;@Override_	@Nullable_	public String getActivationName() {_		return this.beanName__	};implementation,of,the,jca,1,7,code,get,activation,name,method,returning,the,bean,name,as,set,on,this,message,endpoint,factory,see,set,bean,name;override,nullable,public,string,get,activation,name,return,this,bean,name
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public String getActivationName();1520529117;Implementation of the JCA 1.7 {@code #getActivationName()} method,_returning the bean name as set on this MessageEndpointFactory._@see #setBeanName;@Override_	@Nullable_	public String getActivationName() {_		return this.beanName__	};implementation,of,the,jca,1,7,code,get,activation,name,method,returning,the,bean,name,as,set,on,this,message,endpoint,factory,see,set,bean,name;override,nullable,public,string,get,activation,name,return,this,bean,name
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public String getActivationName();1523537186;Implementation of the JCA 1.7 {@code #getActivationName()} method,_returning the bean name as set on this MessageEndpointFactory._@see #setBeanName;@Override_	@Nullable_	public String getActivationName() {_		return this.beanName__	};implementation,of,the,jca,1,7,code,get,activation,name,method,returning,the,bean,name,as,set,on,this,message,endpoint,factory,see,set,bean,name;override,nullable,public,string,get,activation,name,return,this,bean,name
AbstractMessageEndpointFactory -> @Override 	@Nullable 	public String getActivationName();1530174524;Implementation of the JCA 1.7 {@code #getActivationName()} method,_returning the bean name as set on this MessageEndpointFactory._@see #setBeanName;@Override_	@Nullable_	public String getActivationName() {_		return this.beanName__	};implementation,of,the,jca,1,7,code,get,activation,name,method,returning,the,bean,name,as,set,on,this,message,endpoint,factory,see,set,bean,name;override,nullable,public,string,get,activation,name,return,this,bean,name
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> public void beforeDelivery(Method method) throws ResourceException;1328020251;This <code>beforeDelivery</code> implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.5 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call <code>beforeDelivery</code> and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;public void beforeDelivery(Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,code,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,5,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,code,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;public,void,before,delivery,method,method,throws,resource,exception,this,before,delivery,called,true,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> public void beforeDelivery(Method method) throws ResourceException;1357119239;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.5 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;public void beforeDelivery(Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,5,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;public,void,before,delivery,method,method,throws,resource,exception,this,before,delivery,called,true,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1328020251;This implementation returns <code>true</code> if a transaction manager_has been specified_ <code>false</code> otherwise._@see #setTransactionManager_@see #setTransactionFactory;public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,code,if,a,transaction,manager,has,been,specified,code,false,code,otherwise,see,set,transaction,manager,see,set,transaction,factory;public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException;1357119239;This implementation returns {@code true} if a transaction manager_has been specified_ {@code false} otherwise._@see #setTransactionManager_@see #setTransactionFactory;public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException {_		return (this.transactionFactory != null)__	};this,implementation,returns,code,true,if,a,transaction,manager,has,been,specified,code,false,otherwise,see,set,transaction,manager,see,set,transaction,factory;public,boolean,is,delivery,transacted,method,method,throws,no,such,method,exception,return,this,transaction,factory,null
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;1383603297;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;1461047077;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;1467749899;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;1495868221;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;1496259743;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;1496837955;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;1498780456;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;1520529117;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;1523537186;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;1530174524;Create the actual endpoint instance, as a subclass of the_{@link AbstractMessageEndpoint} inner class of this factory._@return the actual endpoint instance (never {@code null})_@throws UnavailableException if no endpoint is available at present;protected abstract AbstractMessageEndpoint createEndpointInternal() throws UnavailableException_;create,the,actual,endpoint,instance,as,a,subclass,of,the,link,abstract,message,endpoint,inner,class,of,this,factory,return,the,actual,endpoint,instance,never,code,null,throws,unavailable,exception,if,no,endpoint,is,available,at,present;protected,abstract,abstract,message,endpoint,create,endpoint,internal,throws,unavailable,exception
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> public void afterDelivery() throws ResourceException;1328020251;This <code>afterDelivery</code> implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.5 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;public void afterDelivery() throws ResourceException {_			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,code,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,5,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;public,void,after,delivery,throws,resource,exception,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> public void afterDelivery() throws ResourceException;1357119239;This {@code afterDelivery} implementation resets the thread context_ClassLoader and completes the transaction, if any._<p>Note that the JCA 1.5 specification does not require a ResourceAdapter_to call this method after invoking the concrete endpoint. See the_explanation in {@link #beforeDelivery}'s javadoc.;public void afterDelivery() throws ResourceException {_			this.beforeDeliveryCalled = false__			Thread.currentThread().setContextClassLoader(this.previousContextClassLoader)__			this.previousContextClassLoader = null__			try {_				this.transactionDelegate.endTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to complete transaction", ex)__			}_		};this,code,after,delivery,implementation,resets,the,thread,context,class,loader,and,completes,the,transaction,if,any,p,note,that,the,jca,1,5,specification,does,not,require,a,resource,adapter,to,call,this,method,after,invoking,the,concrete,endpoint,see,the,explanation,in,link,before,delivery,s,javadoc;public,void,after,delivery,throws,resource,exception,this,before,delivery,called,false,thread,current,thread,set,context,class,loader,this,previous,context,class,loader,this,previous,context,class,loader,null,try,this,transaction,delegate,end,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,complete,transaction,ex
AbstractMessageEndpointFactory -> @Override 	public void setBeanName(String beanName);1383603297;Set the name of this message endpoint. Populated with the bean name_automatically when defined within Spring's bean factory.;@Override_	public void setBeanName(String beanName) {_		this.beanName = beanName__	};set,the,name,of,this,message,endpoint,populated,with,the,bean,name,automatically,when,defined,within,spring,s,bean,factory;override,public,void,set,bean,name,string,bean,name,this,bean,name,bean,name
AbstractMessageEndpointFactory -> @Override 	public void setBeanName(String beanName);1461047077;Set the name of this message endpoint. Populated with the bean name_automatically when defined within Spring's bean factory.;@Override_	public void setBeanName(String beanName) {_		this.beanName = beanName__	};set,the,name,of,this,message,endpoint,populated,with,the,bean,name,automatically,when,defined,within,spring,s,bean,factory;override,public,void,set,bean,name,string,bean,name,this,bean,name,bean,name
AbstractMessageEndpointFactory -> @Override 	public void setBeanName(String beanName);1467749899;Set the name of this message endpoint. Populated with the bean name_automatically when defined within Spring's bean factory.;@Override_	public void setBeanName(String beanName) {_		this.beanName = beanName__	};set,the,name,of,this,message,endpoint,populated,with,the,bean,name,automatically,when,defined,within,spring,s,bean,factory;override,public,void,set,bean,name,string,bean,name,this,bean,name,bean,name
AbstractMessageEndpointFactory -> @Override 	public void setBeanName(String beanName);1495868221;Set the name of this message endpoint. Populated with the bean name_automatically when defined within Spring's bean factory.;@Override_	public void setBeanName(String beanName) {_		this.beanName = beanName__	};set,the,name,of,this,message,endpoint,populated,with,the,bean,name,automatically,when,defined,within,spring,s,bean,factory;override,public,void,set,bean,name,string,bean,name,this,bean,name,bean,name
AbstractMessageEndpointFactory -> @Override 	public void setBeanName(String beanName);1496259743;Set the name of this message endpoint. Populated with the bean name_automatically when defined within Spring's bean factory.;@Override_	public void setBeanName(String beanName) {_		this.beanName = beanName__	};set,the,name,of,this,message,endpoint,populated,with,the,bean,name,automatically,when,defined,within,spring,s,bean,factory;override,public,void,set,bean,name,string,bean,name,this,bean,name,bean,name
AbstractMessageEndpointFactory -> @Override 	public void setBeanName(String beanName);1496837955;Set the name of this message endpoint. Populated with the bean name_automatically when defined within Spring's bean factory.;@Override_	public void setBeanName(String beanName) {_		this.beanName = beanName__	};set,the,name,of,this,message,endpoint,populated,with,the,bean,name,automatically,when,defined,within,spring,s,bean,factory;override,public,void,set,bean,name,string,bean,name,this,bean,name,bean,name
AbstractMessageEndpointFactory -> @Override 	public void setBeanName(String beanName);1498780456;Set the name of this message endpoint. Populated with the bean name_automatically when defined within Spring's bean factory.;@Override_	public void setBeanName(String beanName) {_		this.beanName = beanName__	};set,the,name,of,this,message,endpoint,populated,with,the,bean,name,automatically,when,defined,within,spring,s,bean,factory;override,public,void,set,bean,name,string,bean,name,this,bean,name,bean,name
AbstractMessageEndpointFactory -> @Override 	public void setBeanName(String beanName);1520529117;Set the name of this message endpoint. Populated with the bean name_automatically when defined within Spring's bean factory.;@Override_	public void setBeanName(String beanName) {_		this.beanName = beanName__	};set,the,name,of,this,message,endpoint,populated,with,the,bean,name,automatically,when,defined,within,spring,s,bean,factory;override,public,void,set,bean,name,string,bean,name,this,bean,name,bean,name
AbstractMessageEndpointFactory -> @Override 	public void setBeanName(String beanName);1523537186;Set the name of this message endpoint. Populated with the bean name_automatically when defined within Spring's bean factory.;@Override_	public void setBeanName(String beanName) {_		this.beanName = beanName__	};set,the,name,of,this,message,endpoint,populated,with,the,bean,name,automatically,when,defined,within,spring,s,bean,factory;override,public,void,set,bean,name,string,bean,name,this,bean,name,bean,name
AbstractMessageEndpointFactory -> @Override 	public void setBeanName(String beanName);1530174524;Set the name of this message endpoint. Populated with the bean name_automatically when defined within Spring's bean factory.;@Override_	public void setBeanName(String beanName) {_		this.beanName = beanName__	};set,the,name,of,this,message,endpoint,populated,with,the,bean,name,automatically,when,defined,within,spring,s,bean,factory;override,public,void,set,bean,name,string,bean,name,this,bean,name,bean,name
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1467749899;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1495868221;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1496259743;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1496837955;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1498780456;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1520529117;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1523537186;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> @Override 	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1530174524;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;@Override_	public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;override,public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1328020251;The alternative JCA 1.6 version of <code>createEndpoint</code>._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,code,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1356735495;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1357119239;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1368482696;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1383603297;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException;1461047077;The alternative JCA 1.6 version of {@code createEndpoint}._<p>This implementation delegates to {@link #createEndpointInternal()},_ignoring the specified timeout. It is only here for JCA 1.6 compliance.;public MessageEndpoint createEndpoint(XAResource xaResource, long timeout) throws UnavailableException {_		AbstractMessageEndpoint endpoint = createEndpointInternal()__		endpoint.initXAResource(xaResource)__		return endpoint__	};the,alternative,jca,1,6,version,of,code,create,endpoint,p,this,implementation,delegates,to,link,create,endpoint,internal,ignoring,the,specified,timeout,it,is,only,here,for,jca,1,6,compliance;public,message,endpoint,create,endpoint,xaresource,xa,resource,long,timeout,throws,unavailable,exception,abstract,message,endpoint,endpoint,create,endpoint,internal,endpoint,init,xaresource,xa,resource,return,endpoint
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1328020251;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never <code>null</code>);protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null,code;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1356735495;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1357119239;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1368482696;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1383603297;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1461047077;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1467749899;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1495868221;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1496259743;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1496837955;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1498780456;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1520529117;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1523537186;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> protected abstract ClassLoader getEndpointClassLoader()_;1530174524;Template method for exposing the endpoint's ClassLoader_(typically the ClassLoader that the message listener class_has been loaded with)._@return the endpoint ClassLoader (never {@code null});protected abstract ClassLoader getEndpointClassLoader()_;template,method,for,exposing,the,endpoint,s,class,loader,typically,the,class,loader,that,the,message,listener,class,has,been,loaded,with,return,the,endpoint,class,loader,never,code,null;protected,abstract,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void beforeDelivery(@Nullable Method method) throws ResourceException;1496259743;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;@Override_		public void beforeDelivery(@Nullable Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;override,public,void,before,delivery,nullable,method,method,throws,resource,exception,this,before,delivery,called,true,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void beforeDelivery(@Nullable Method method) throws ResourceException;1496837955;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;@Override_		public void beforeDelivery(@Nullable Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;override,public,void,before,delivery,nullable,method,method,throws,resource,exception,this,before,delivery,called,true,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void beforeDelivery(@Nullable Method method) throws ResourceException;1498780456;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;@Override_		public void beforeDelivery(@Nullable Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			Assert.state(this.transactionDelegate != null, "Not initialized")__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;override,public,void,before,delivery,nullable,method,method,throws,resource,exception,this,before,delivery,called,true,assert,state,this,transaction,delegate,null,not,initialized,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void beforeDelivery(@Nullable Method method) throws ResourceException;1520529117;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;@Override_		public void beforeDelivery(@Nullable Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			Assert.state(this.transactionDelegate != null, "Not initialized")__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;override,public,void,before,delivery,nullable,method,method,throws,resource,exception,this,before,delivery,called,true,assert,state,this,transaction,delegate,null,not,initialized,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void beforeDelivery(@Nullable Method method) throws ResourceException;1523537186;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;@Override_		public void beforeDelivery(@Nullable Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			Assert.state(this.transactionDelegate != null, "Not initialized")__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;override,public,void,before,delivery,nullable,method,method,throws,resource,exception,this,before,delivery,called,true,assert,state,this,transaction,delegate,null,not,initialized,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
AbstractMessageEndpointFactory -> AbstractMessageEndpoint -> @Override 		public void beforeDelivery(@Nullable Method method) throws ResourceException;1530174524;This {@code beforeDelivery} implementation starts a transaction,_if necessary, and exposes the endpoint ClassLoader as current_thread context ClassLoader._<p>Note that the JCA 1.7 specification does not require a ResourceAdapter_to call this method before invoking the concrete endpoint. If this method_has not been called (check {@link #hasBeforeDeliveryBeenCalled()}), the_concrete endpoint method should call {@code beforeDelivery} and its_sibling {@link #afterDelivery()} explicitly, as part of its own processing.;@Override_		public void beforeDelivery(@Nullable Method method) throws ResourceException {_			this.beforeDeliveryCalled = true__			Assert.state(this.transactionDelegate != null, "Not initialized")__			try {_				this.transactionDelegate.beginTransaction()__			}_			catch (Throwable ex) {_				throw new ApplicationServerInternalException("Failed to begin transaction", ex)__			}_			Thread currentThread = Thread.currentThread()__			this.previousContextClassLoader = currentThread.getContextClassLoader()__			currentThread.setContextClassLoader(getEndpointClassLoader())__		};this,code,before,delivery,implementation,starts,a,transaction,if,necessary,and,exposes,the,endpoint,class,loader,as,current,thread,context,class,loader,p,note,that,the,jca,1,7,specification,does,not,require,a,resource,adapter,to,call,this,method,before,invoking,the,concrete,endpoint,if,this,method,has,not,been,called,check,link,has,before,delivery,been,called,the,concrete,endpoint,method,should,call,code,before,delivery,and,its,sibling,link,after,delivery,explicitly,as,part,of,its,own,processing;override,public,void,before,delivery,nullable,method,method,throws,resource,exception,this,before,delivery,called,true,assert,state,this,transaction,delegate,null,not,initialized,try,this,transaction,delegate,begin,transaction,catch,throwable,ex,throw,new,application,server,internal,exception,failed,to,begin,transaction,ex,thread,current,thread,thread,current,thread,this,previous,context,class,loader,current,thread,get,context,class,loader,current,thread,set,context,class,loader,get,endpoint,class,loader
