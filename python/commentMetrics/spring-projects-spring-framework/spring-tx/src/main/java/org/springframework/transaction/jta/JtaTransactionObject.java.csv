# id;timestamp;commentText;codeText;commentWords;codeWords
JtaTransactionObject -> @Override 	public boolean isRollbackOnly();1356735495;This implementation checks the UserTransaction's rollback-only flag.;@Override_	public boolean isRollbackOnly() {_		if (this.userTransaction == null) {_			return false__		}_		try {_			int jtaStatus = this.userTransaction.getStatus()__			return (jtaStatus == Status.STATUS_MARKED_ROLLBACK || jtaStatus == Status.STATUS_ROLLEDBACK)__		}_		catch (SystemException ex) {_			throw new TransactionSystemException("JTA failure on getStatus", ex)__		}_	};this,implementation,checks,the,user,transaction,s,rollback,only,flag;override,public,boolean,is,rollback,only,if,this,user,transaction,null,return,false,try,int,jta,status,this,user,transaction,get,status,return,jta,status,status,jta,status,status,catch,system,exception,ex,throw,new,transaction,system,exception,jta,failure,on,get,status,ex
JtaTransactionObject -> @Override 	public boolean isRollbackOnly();1368482696;This implementation checks the UserTransaction's rollback-only flag.;@Override_	public boolean isRollbackOnly() {_		if (this.userTransaction == null) {_			return false__		}_		try {_			int jtaStatus = this.userTransaction.getStatus()__			return (jtaStatus == Status.STATUS_MARKED_ROLLBACK || jtaStatus == Status.STATUS_ROLLEDBACK)__		}_		catch (SystemException ex) {_			throw new TransactionSystemException("JTA failure on getStatus", ex)__		}_	};this,implementation,checks,the,user,transaction,s,rollback,only,flag;override,public,boolean,is,rollback,only,if,this,user,transaction,null,return,false,try,int,jta,status,this,user,transaction,get,status,return,jta,status,status,jta,status,status,catch,system,exception,ex,throw,new,transaction,system,exception,jta,failure,on,get,status,ex
JtaTransactionObject -> @Override 	public boolean isRollbackOnly();1462275051;This implementation checks the UserTransaction's rollback-only flag.;@Override_	public boolean isRollbackOnly() {_		if (this.userTransaction == null) {_			return false__		}_		try {_			int jtaStatus = this.userTransaction.getStatus()__			return (jtaStatus == Status.STATUS_MARKED_ROLLBACK || jtaStatus == Status.STATUS_ROLLEDBACK)__		}_		catch (SystemException ex) {_			throw new TransactionSystemException("JTA failure on getStatus", ex)__		}_	};this,implementation,checks,the,user,transaction,s,rollback,only,flag;override,public,boolean,is,rollback,only,if,this,user,transaction,null,return,false,try,int,jta,status,this,user,transaction,get,status,return,jta,status,status,jta,status,status,catch,system,exception,ex,throw,new,transaction,system,exception,jta,failure,on,get,status,ex
JtaTransactionObject -> @Override 	public boolean isRollbackOnly();1496837955;This implementation checks the UserTransaction's rollback-only flag.;@Override_	public boolean isRollbackOnly() {_		try {_			int jtaStatus = this.userTransaction.getStatus()__			return (jtaStatus == Status.STATUS_MARKED_ROLLBACK || jtaStatus == Status.STATUS_ROLLEDBACK)__		}_		catch (SystemException ex) {_			throw new TransactionSystemException("JTA failure on getStatus", ex)__		}_	};this,implementation,checks,the,user,transaction,s,rollback,only,flag;override,public,boolean,is,rollback,only,try,int,jta,status,this,user,transaction,get,status,return,jta,status,status,jta,status,status,catch,system,exception,ex,throw,new,transaction,system,exception,jta,failure,on,get,status,ex
JtaTransactionObject -> @Override 	public boolean isRollbackOnly();1542613849;This implementation checks the UserTransaction's rollback-only flag.;@Override_	public boolean isRollbackOnly() {_		try {_			int jtaStatus = this.userTransaction.getStatus()__			return (jtaStatus == Status.STATUS_MARKED_ROLLBACK || jtaStatus == Status.STATUS_ROLLEDBACK)__		}_		catch (SystemException ex) {_			throw new TransactionSystemException("JTA failure on getStatus", ex)__		}_	};this,implementation,checks,the,user,transaction,s,rollback,only,flag;override,public,boolean,is,rollback,only,try,int,jta,status,this,user,transaction,get,status,return,jta,status,status,jta,status,status,catch,system,exception,ex,throw,new,transaction,system,exception,jta,failure,on,get,status,ex
JtaTransactionObject -> public JtaTransactionObject(UserTransaction userTransaction);1328020251;Create a new JtaTransactionObject for the given JTA UserTransaction._@param userTransaction the JTA UserTransaction for the current transaction_(either a shared object or retrieved through a fresh per-transaction lookuip);public JtaTransactionObject(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,object,for,the,given,jta,user,transaction,param,user,transaction,the,jta,user,transaction,for,the,current,transaction,either,a,shared,object,or,retrieved,through,a,fresh,per,transaction,lookuip;public,jta,transaction,object,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionObject -> public JtaTransactionObject(UserTransaction userTransaction);1356735495;Create a new JtaTransactionObject for the given JTA UserTransaction._@param userTransaction the JTA UserTransaction for the current transaction_(either a shared object or retrieved through a fresh per-transaction lookuip);public JtaTransactionObject(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,object,for,the,given,jta,user,transaction,param,user,transaction,the,jta,user,transaction,for,the,current,transaction,either,a,shared,object,or,retrieved,through,a,fresh,per,transaction,lookuip;public,jta,transaction,object,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionObject -> public JtaTransactionObject(UserTransaction userTransaction);1357119239;Create a new JtaTransactionObject for the given JTA UserTransaction._@param userTransaction the JTA UserTransaction for the current transaction_(either a shared object or retrieved through a fresh per-transaction lookuip);public JtaTransactionObject(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,object,for,the,given,jta,user,transaction,param,user,transaction,the,jta,user,transaction,for,the,current,transaction,either,a,shared,object,or,retrieved,through,a,fresh,per,transaction,lookuip;public,jta,transaction,object,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionObject -> public JtaTransactionObject(UserTransaction userTransaction);1368482696;Create a new JtaTransactionObject for the given JTA UserTransaction._@param userTransaction the JTA UserTransaction for the current transaction_(either a shared object or retrieved through a fresh per-transaction lookuip);public JtaTransactionObject(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,object,for,the,given,jta,user,transaction,param,user,transaction,the,jta,user,transaction,for,the,current,transaction,either,a,shared,object,or,retrieved,through,a,fresh,per,transaction,lookuip;public,jta,transaction,object,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionObject -> public JtaTransactionObject(UserTransaction userTransaction);1462275051;Create a new JtaTransactionObject for the given JTA UserTransaction._@param userTransaction the JTA UserTransaction for the current transaction_(either a shared object or retrieved through a fresh per-transaction lookuip);public JtaTransactionObject(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,object,for,the,given,jta,user,transaction,param,user,transaction,the,jta,user,transaction,for,the,current,transaction,either,a,shared,object,or,retrieved,through,a,fresh,per,transaction,lookuip;public,jta,transaction,object,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionObject -> public JtaTransactionObject(UserTransaction userTransaction);1496837955;Create a new JtaTransactionObject for the given JTA UserTransaction._@param userTransaction the JTA UserTransaction for the current transaction_(either a shared object or retrieved through a fresh per-transaction lookuip);public JtaTransactionObject(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,object,for,the,given,jta,user,transaction,param,user,transaction,the,jta,user,transaction,for,the,current,transaction,either,a,shared,object,or,retrieved,through,a,fresh,per,transaction,lookuip;public,jta,transaction,object,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionObject -> public JtaTransactionObject(UserTransaction userTransaction);1542613849;Create a new JtaTransactionObject for the given JTA UserTransaction._@param userTransaction the JTA UserTransaction for the current transaction_(either a shared object or retrieved through a fresh per-transaction lookup);public JtaTransactionObject(UserTransaction userTransaction) {_		this.userTransaction = userTransaction__	};create,a,new,jta,transaction,object,for,the,given,jta,user,transaction,param,user,transaction,the,jta,user,transaction,for,the,current,transaction,either,a,shared,object,or,retrieved,through,a,fresh,per,transaction,lookup;public,jta,transaction,object,user,transaction,user,transaction,this,user,transaction,user,transaction
JtaTransactionObject -> public void flush();1328020251;This implementation triggers flush callbacks,_assuming that they will flush all affected ORM sessions._@see org.springframework.transaction.support.TransactionSynchronization#flush();public void flush() {_		TransactionSynchronizationUtils.triggerFlush()__	};this,implementation,triggers,flush,callbacks,assuming,that,they,will,flush,all,affected,orm,sessions,see,org,springframework,transaction,support,transaction,synchronization,flush;public,void,flush,transaction,synchronization,utils,trigger,flush
JtaTransactionObject -> public void flush();1357119239;This implementation triggers flush callbacks,_assuming that they will flush all affected ORM sessions._@see org.springframework.transaction.support.TransactionSynchronization#flush();public void flush() {_		TransactionSynchronizationUtils.triggerFlush()__	};this,implementation,triggers,flush,callbacks,assuming,that,they,will,flush,all,affected,orm,sessions,see,org,springframework,transaction,support,transaction,synchronization,flush;public,void,flush,transaction,synchronization,utils,trigger,flush
JtaTransactionObject -> public boolean isRollbackOnly();1328020251;This implementation checks the UserTransaction's rollback-only flag.;public boolean isRollbackOnly() {_		if (this.userTransaction == null) {_			return false__		}_		try {_			int jtaStatus = this.userTransaction.getStatus()__			return (jtaStatus == Status.STATUS_MARKED_ROLLBACK || jtaStatus == Status.STATUS_ROLLEDBACK)__		}_		catch (SystemException ex) {_			throw new TransactionSystemException("JTA failure on getStatus", ex)__		}_	};this,implementation,checks,the,user,transaction,s,rollback,only,flag;public,boolean,is,rollback,only,if,this,user,transaction,null,return,false,try,int,jta,status,this,user,transaction,get,status,return,jta,status,status,jta,status,status,catch,system,exception,ex,throw,new,transaction,system,exception,jta,failure,on,get,status,ex
JtaTransactionObject -> public boolean isRollbackOnly();1357119239;This implementation checks the UserTransaction's rollback-only flag.;public boolean isRollbackOnly() {_		if (this.userTransaction == null) {_			return false__		}_		try {_			int jtaStatus = this.userTransaction.getStatus()__			return (jtaStatus == Status.STATUS_MARKED_ROLLBACK || jtaStatus == Status.STATUS_ROLLEDBACK)__		}_		catch (SystemException ex) {_			throw new TransactionSystemException("JTA failure on getStatus", ex)__		}_	};this,implementation,checks,the,user,transaction,s,rollback,only,flag;public,boolean,is,rollback,only,if,this,user,transaction,null,return,false,try,int,jta,status,this,user,transaction,get,status,return,jta,status,status,jta,status,status,catch,system,exception,ex,throw,new,transaction,system,exception,jta,failure,on,get,status,ex
JtaTransactionObject -> public final UserTransaction getUserTransaction();1328020251;Return the JTA UserTransaction object for the current transaction.;public final UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,object,for,the,current,transaction;public,final,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionObject -> public final UserTransaction getUserTransaction();1356735495;Return the JTA UserTransaction object for the current transaction.;public final UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,object,for,the,current,transaction;public,final,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionObject -> public final UserTransaction getUserTransaction();1357119239;Return the JTA UserTransaction object for the current transaction.;public final UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,object,for,the,current,transaction;public,final,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionObject -> public final UserTransaction getUserTransaction();1368482696;Return the JTA UserTransaction object for the current transaction.;public final UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,object,for,the,current,transaction;public,final,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionObject -> public final UserTransaction getUserTransaction();1462275051;Return the JTA UserTransaction object for the current transaction.;public final UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,object,for,the,current,transaction;public,final,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionObject -> public final UserTransaction getUserTransaction();1496837955;Return the JTA UserTransaction object for the current transaction.;public final UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,object,for,the,current,transaction;public,final,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionObject -> public final UserTransaction getUserTransaction();1542613849;Return the JTA UserTransaction object for the current transaction.;public final UserTransaction getUserTransaction() {_		return this.userTransaction__	};return,the,jta,user,transaction,object,for,the,current,transaction;public,final,user,transaction,get,user,transaction,return,this,user,transaction
JtaTransactionObject -> @Override 	public void flush();1356735495;This implementation triggers flush callbacks,_assuming that they will flush all affected ORM sessions._@see org.springframework.transaction.support.TransactionSynchronization#flush();@Override_	public void flush() {_		TransactionSynchronizationUtils.triggerFlush()__	};this,implementation,triggers,flush,callbacks,assuming,that,they,will,flush,all,affected,orm,sessions,see,org,springframework,transaction,support,transaction,synchronization,flush;override,public,void,flush,transaction,synchronization,utils,trigger,flush
JtaTransactionObject -> @Override 	public void flush();1368482696;This implementation triggers flush callbacks,_assuming that they will flush all affected ORM sessions._@see org.springframework.transaction.support.TransactionSynchronization#flush();@Override_	public void flush() {_		TransactionSynchronizationUtils.triggerFlush()__	};this,implementation,triggers,flush,callbacks,assuming,that,they,will,flush,all,affected,orm,sessions,see,org,springframework,transaction,support,transaction,synchronization,flush;override,public,void,flush,transaction,synchronization,utils,trigger,flush
JtaTransactionObject -> @Override 	public void flush();1462275051;This implementation triggers flush callbacks,_assuming that they will flush all affected ORM sessions._@see org.springframework.transaction.support.TransactionSynchronization#flush();@Override_	public void flush() {_		TransactionSynchronizationUtils.triggerFlush()__	};this,implementation,triggers,flush,callbacks,assuming,that,they,will,flush,all,affected,orm,sessions,see,org,springframework,transaction,support,transaction,synchronization,flush;override,public,void,flush,transaction,synchronization,utils,trigger,flush
JtaTransactionObject -> @Override 	public void flush();1496837955;This implementation triggers flush callbacks,_assuming that they will flush all affected ORM sessions._@see org.springframework.transaction.support.TransactionSynchronization#flush();@Override_	public void flush() {_		TransactionSynchronizationUtils.triggerFlush()__	};this,implementation,triggers,flush,callbacks,assuming,that,they,will,flush,all,affected,orm,sessions,see,org,springframework,transaction,support,transaction,synchronization,flush;override,public,void,flush,transaction,synchronization,utils,trigger,flush
JtaTransactionObject -> @Override 	public void flush();1542613849;This implementation triggers flush callbacks,_assuming that they will flush all affected ORM sessions._@see org.springframework.transaction.support.TransactionSynchronization#flush();@Override_	public void flush() {_		TransactionSynchronizationUtils.triggerFlush()__	};this,implementation,triggers,flush,callbacks,assuming,that,they,will,flush,all,affected,orm,sessions,see,org,springframework,transaction,support,transaction,synchronization,flush;override,public,void,flush,transaction,synchronization,utils,trigger,flush
