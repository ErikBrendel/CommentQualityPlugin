commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the JTA UserTransaction object for the current transaction.  */ ;/**  * Return the JTA UserTransaction object for the current transaction.  */ public final UserTransaction getUserTransaction() {     return this.userTransaction. }
true;public;0;10;/**  * This implementation checks the UserTransaction's rollback-only flag.  */ ;/**  * This implementation checks the UserTransaction's rollback-only flag.  */ @Override public boolean isRollbackOnly() {     try {         int jtaStatus = this.userTransaction.getStatus().         return (jtaStatus == Status.STATUS_MARKED_ROLLBACK || jtaStatus == Status.STATUS_ROLLEDBACK).     } catch (SystemException ex) {         throw new TransactionSystemException("JTA failure on getStatus", ex).     } }
true;public;0;4;/**  * This implementation triggers flush callbacks,  * assuming that they will flush all affected ORM sessions.  * @see org.springframework.transaction.support.TransactionSynchronization#flush()  */ ;/**  * This implementation triggers flush callbacks,  * assuming that they will flush all affected ORM sessions.  * @see org.springframework.transaction.support.TransactionSynchronization#flush()  */ @Override public void flush() {     TransactionSynchronizationUtils.triggerFlush(). }
