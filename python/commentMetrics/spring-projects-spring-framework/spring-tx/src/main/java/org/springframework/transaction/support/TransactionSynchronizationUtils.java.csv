# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionSynchronizationUtils -> static Object unwrapResourceIfNecessary(Object resource);1328020251;Unwrap the given resource handle if necessary_ otherwise return_the given handle as-is._@see org.springframework.core.InfrastructureProxy#getWrappedObject();static Object unwrapResourceIfNecessary(Object resource) {_		Assert.notNull(resource, "Resource must not be null")__		Object resourceRef = resource__		_		if (resourceRef instanceof InfrastructureProxy) {_			resourceRef = ((InfrastructureProxy) resourceRef).getWrappedObject()__		}_		if (aopAvailable) {_			_			resourceRef = ScopedProxyUnwrapper.unwrapIfNecessary(resourceRef)__		}_		return resourceRef__	};unwrap,the,given,resource,handle,if,necessary,otherwise,return,the,given,handle,as,is,see,org,springframework,core,infrastructure,proxy,get,wrapped,object;static,object,unwrap,resource,if,necessary,object,resource,assert,not,null,resource,resource,must,not,be,null,object,resource,ref,resource,if,resource,ref,instanceof,infrastructure,proxy,resource,ref,infrastructure,proxy,resource,ref,get,wrapped,object,if,aop,available,resource,ref,scoped,proxy,unwrapper,unwrap,if,necessary,resource,ref,return,resource,ref
TransactionSynchronizationUtils -> static Object unwrapResourceIfNecessary(Object resource);1356735495;Unwrap the given resource handle if necessary_ otherwise return_the given handle as-is._@see org.springframework.core.InfrastructureProxy#getWrappedObject();static Object unwrapResourceIfNecessary(Object resource) {_		Assert.notNull(resource, "Resource must not be null")__		Object resourceRef = resource__		_		if (resourceRef instanceof InfrastructureProxy) {_			resourceRef = ((InfrastructureProxy) resourceRef).getWrappedObject()__		}_		if (aopAvailable) {_			_			resourceRef = ScopedProxyUnwrapper.unwrapIfNecessary(resourceRef)__		}_		return resourceRef__	};unwrap,the,given,resource,handle,if,necessary,otherwise,return,the,given,handle,as,is,see,org,springframework,core,infrastructure,proxy,get,wrapped,object;static,object,unwrap,resource,if,necessary,object,resource,assert,not,null,resource,resource,must,not,be,null,object,resource,ref,resource,if,resource,ref,instanceof,infrastructure,proxy,resource,ref,infrastructure,proxy,resource,ref,get,wrapped,object,if,aop,available,resource,ref,scoped,proxy,unwrapper,unwrap,if,necessary,resource,ref,return,resource,ref
TransactionSynchronizationUtils -> static Object unwrapResourceIfNecessary(Object resource);1496837955;Unwrap the given resource handle if necessary_ otherwise return_the given handle as-is._@see org.springframework.core.InfrastructureProxy#getWrappedObject();static Object unwrapResourceIfNecessary(Object resource) {_		Assert.notNull(resource, "Resource must not be null")__		Object resourceRef = resource__		_		if (resourceRef instanceof InfrastructureProxy) {_			resourceRef = ((InfrastructureProxy) resourceRef).getWrappedObject()__		}_		if (aopAvailable) {_			_			resourceRef = ScopedProxyUnwrapper.unwrapIfNecessary(resourceRef)__		}_		return resourceRef__	};unwrap,the,given,resource,handle,if,necessary,otherwise,return,the,given,handle,as,is,see,org,springframework,core,infrastructure,proxy,get,wrapped,object;static,object,unwrap,resource,if,necessary,object,resource,assert,not,null,resource,resource,must,not,be,null,object,resource,ref,resource,if,resource,ref,instanceof,infrastructure,proxy,resource,ref,infrastructure,proxy,resource,ref,get,wrapped,object,if,aop,available,resource,ref,scoped,proxy,unwrapper,unwrap,if,necessary,resource,ref,return,resource,ref
TransactionSynchronizationUtils -> static Object unwrapResourceIfNecessary(Object resource);1530174524;Unwrap the given resource handle if necessary_ otherwise return_the given handle as-is._@see org.springframework.core.InfrastructureProxy#getWrappedObject();static Object unwrapResourceIfNecessary(Object resource) {_		Assert.notNull(resource, "Resource must not be null")__		Object resourceRef = resource__		_		if (resourceRef instanceof InfrastructureProxy) {_			resourceRef = ((InfrastructureProxy) resourceRef).getWrappedObject()__		}_		if (aopAvailable) {_			_			resourceRef = ScopedProxyUnwrapper.unwrapIfNecessary(resourceRef)__		}_		return resourceRef__	};unwrap,the,given,resource,handle,if,necessary,otherwise,return,the,given,handle,as,is,see,org,springframework,core,infrastructure,proxy,get,wrapped,object;static,object,unwrap,resource,if,necessary,object,resource,assert,not,null,resource,resource,must,not,be,null,object,resource,ref,resource,if,resource,ref,instanceof,infrastructure,proxy,resource,ref,infrastructure,proxy,resource,ref,get,wrapped,object,if,aop,available,resource,ref,scoped,proxy,unwrapper,unwrap,if,necessary,resource,ref,return,resource,ref
TransactionSynchronizationUtils -> public static void triggerAfterCommit();1328020251;Trigger <code>afterCommit</code> callbacks on all currently registered synchronizations._@throws RuntimeException if thrown by a <code>afterCommit</code> callback_@see TransactionSynchronizationManager#getSynchronizations()_@see TransactionSynchronization#afterCommit();public static void triggerAfterCommit() {_		invokeAfterCommit(TransactionSynchronizationManager.getSynchronizations())__	};trigger,code,after,commit,code,callbacks,on,all,currently,registered,synchronizations,throws,runtime,exception,if,thrown,by,a,code,after,commit,code,callback,see,transaction,synchronization,manager,get,synchronizations,see,transaction,synchronization,after,commit;public,static,void,trigger,after,commit,invoke,after,commit,transaction,synchronization,manager,get,synchronizations
TransactionSynchronizationUtils -> public static void triggerAfterCommit();1356735495;Trigger {@code afterCommit} callbacks on all currently registered synchronizations._@throws RuntimeException if thrown by a {@code afterCommit} callback_@see TransactionSynchronizationManager#getSynchronizations()_@see TransactionSynchronization#afterCommit();public static void triggerAfterCommit() {_		invokeAfterCommit(TransactionSynchronizationManager.getSynchronizations())__	};trigger,code,after,commit,callbacks,on,all,currently,registered,synchronizations,throws,runtime,exception,if,thrown,by,a,code,after,commit,callback,see,transaction,synchronization,manager,get,synchronizations,see,transaction,synchronization,after,commit;public,static,void,trigger,after,commit,invoke,after,commit,transaction,synchronization,manager,get,synchronizations
TransactionSynchronizationUtils -> public static void triggerAfterCommit();1496837955;Trigger {@code afterCommit} callbacks on all currently registered synchronizations._@throws RuntimeException if thrown by a {@code afterCommit} callback_@see TransactionSynchronizationManager#getSynchronizations()_@see TransactionSynchronization#afterCommit();public static void triggerAfterCommit() {_		invokeAfterCommit(TransactionSynchronizationManager.getSynchronizations())__	};trigger,code,after,commit,callbacks,on,all,currently,registered,synchronizations,throws,runtime,exception,if,thrown,by,a,code,after,commit,callback,see,transaction,synchronization,manager,get,synchronizations,see,transaction,synchronization,after,commit;public,static,void,trigger,after,commit,invoke,after,commit,transaction,synchronization,manager,get,synchronizations
TransactionSynchronizationUtils -> public static void triggerAfterCommit();1530174524;Trigger {@code afterCommit} callbacks on all currently registered synchronizations._@throws RuntimeException if thrown by a {@code afterCommit} callback_@see TransactionSynchronizationManager#getSynchronizations()_@see TransactionSynchronization#afterCommit();public static void triggerAfterCommit() {_		invokeAfterCommit(TransactionSynchronizationManager.getSynchronizations())__	};trigger,code,after,commit,callbacks,on,all,currently,registered,synchronizations,throws,runtime,exception,if,thrown,by,a,code,after,commit,callback,see,transaction,synchronization,manager,get,synchronizations,see,transaction,synchronization,after,commit;public,static,void,trigger,after,commit,invoke,after,commit,transaction,synchronization,manager,get,synchronizations
TransactionSynchronizationUtils -> public static void triggerAfterCompletion(int completionStatus);1328020251;Trigger <code>afterCompletion</code> callbacks on all currently registered synchronizations._@see TransactionSynchronizationManager#getSynchronizations()_@param completionStatus the completion status according to the_constants in the TransactionSynchronization interface_@see TransactionSynchronization#afterCompletion(int)_@see TransactionSynchronization#STATUS_COMMITTED_@see TransactionSynchronization#STATUS_ROLLED_BACK_@see TransactionSynchronization#STATUS_UNKNOWN;public static void triggerAfterCompletion(int completionStatus) {_		List<TransactionSynchronization> synchronizations = TransactionSynchronizationManager.getSynchronizations()__		invokeAfterCompletion(synchronizations, completionStatus)__	};trigger,code,after,completion,code,callbacks,on,all,currently,registered,synchronizations,see,transaction,synchronization,manager,get,synchronizations,param,completion,status,the,completion,status,according,to,the,constants,in,the,transaction,synchronization,interface,see,transaction,synchronization,after,completion,int,see,transaction,synchronization,see,transaction,synchronization,see,transaction,synchronization;public,static,void,trigger,after,completion,int,completion,status,list,transaction,synchronization,synchronizations,transaction,synchronization,manager,get,synchronizations,invoke,after,completion,synchronizations,completion,status
TransactionSynchronizationUtils -> public static void triggerAfterCompletion(int completionStatus);1356735495;Trigger {@code afterCompletion} callbacks on all currently registered synchronizations._@see TransactionSynchronizationManager#getSynchronizations()_@param completionStatus the completion status according to the_constants in the TransactionSynchronization interface_@see TransactionSynchronization#afterCompletion(int)_@see TransactionSynchronization#STATUS_COMMITTED_@see TransactionSynchronization#STATUS_ROLLED_BACK_@see TransactionSynchronization#STATUS_UNKNOWN;public static void triggerAfterCompletion(int completionStatus) {_		List<TransactionSynchronization> synchronizations = TransactionSynchronizationManager.getSynchronizations()__		invokeAfterCompletion(synchronizations, completionStatus)__	};trigger,code,after,completion,callbacks,on,all,currently,registered,synchronizations,see,transaction,synchronization,manager,get,synchronizations,param,completion,status,the,completion,status,according,to,the,constants,in,the,transaction,synchronization,interface,see,transaction,synchronization,after,completion,int,see,transaction,synchronization,see,transaction,synchronization,see,transaction,synchronization;public,static,void,trigger,after,completion,int,completion,status,list,transaction,synchronization,synchronizations,transaction,synchronization,manager,get,synchronizations,invoke,after,completion,synchronizations,completion,status
TransactionSynchronizationUtils -> public static void triggerAfterCompletion(int completionStatus);1496837955;Trigger {@code afterCompletion} callbacks on all currently registered synchronizations._@see TransactionSynchronizationManager#getSynchronizations()_@param completionStatus the completion status according to the_constants in the TransactionSynchronization interface_@see TransactionSynchronization#afterCompletion(int)_@see TransactionSynchronization#STATUS_COMMITTED_@see TransactionSynchronization#STATUS_ROLLED_BACK_@see TransactionSynchronization#STATUS_UNKNOWN;public static void triggerAfterCompletion(int completionStatus) {_		List<TransactionSynchronization> synchronizations = TransactionSynchronizationManager.getSynchronizations()__		invokeAfterCompletion(synchronizations, completionStatus)__	};trigger,code,after,completion,callbacks,on,all,currently,registered,synchronizations,see,transaction,synchronization,manager,get,synchronizations,param,completion,status,the,completion,status,according,to,the,constants,in,the,transaction,synchronization,interface,see,transaction,synchronization,after,completion,int,see,transaction,synchronization,see,transaction,synchronization,see,transaction,synchronization;public,static,void,trigger,after,completion,int,completion,status,list,transaction,synchronization,synchronizations,transaction,synchronization,manager,get,synchronizations,invoke,after,completion,synchronizations,completion,status
TransactionSynchronizationUtils -> public static void triggerAfterCompletion(int completionStatus);1530174524;Trigger {@code afterCompletion} callbacks on all currently registered synchronizations._@param completionStatus the completion status according to the_constants in the TransactionSynchronization interface_@see TransactionSynchronizationManager#getSynchronizations()_@see TransactionSynchronization#afterCompletion(int)_@see TransactionSynchronization#STATUS_COMMITTED_@see TransactionSynchronization#STATUS_ROLLED_BACK_@see TransactionSynchronization#STATUS_UNKNOWN;public static void triggerAfterCompletion(int completionStatus) {_		List<TransactionSynchronization> synchronizations = TransactionSynchronizationManager.getSynchronizations()__		invokeAfterCompletion(synchronizations, completionStatus)__	};trigger,code,after,completion,callbacks,on,all,currently,registered,synchronizations,param,completion,status,the,completion,status,according,to,the,constants,in,the,transaction,synchronization,interface,see,transaction,synchronization,manager,get,synchronizations,see,transaction,synchronization,after,completion,int,see,transaction,synchronization,see,transaction,synchronization,see,transaction,synchronization;public,static,void,trigger,after,completion,int,completion,status,list,transaction,synchronization,synchronizations,transaction,synchronization,manager,get,synchronizations,invoke,after,completion,synchronizations,completion,status
TransactionSynchronizationUtils -> public static void invokeAfterCompletion(@Nullable List<TransactionSynchronization> synchronizations, 			int completionStatus);1496837955;Actually invoke the {@code afterCompletion} methods of the_given Spring TransactionSynchronization objects._@param synchronizations List of TransactionSynchronization objects_@param completionStatus the completion status according to the_constants in the TransactionSynchronization interface_@see TransactionSynchronization#afterCompletion(int)_@see TransactionSynchronization#STATUS_COMMITTED_@see TransactionSynchronization#STATUS_ROLLED_BACK_@see TransactionSynchronization#STATUS_UNKNOWN;public static void invokeAfterCompletion(@Nullable List<TransactionSynchronization> synchronizations,_			int completionStatus) {__		if (synchronizations != null) {_			for (TransactionSynchronization synchronization : synchronizations) {_				try {_					synchronization.afterCompletion(completionStatus)__				}_				catch (Throwable tsex) {_					logger.error("TransactionSynchronization.afterCompletion threw exception", tsex)__				}_			}_		}_	};actually,invoke,the,code,after,completion,methods,of,the,given,spring,transaction,synchronization,objects,param,synchronizations,list,of,transaction,synchronization,objects,param,completion,status,the,completion,status,according,to,the,constants,in,the,transaction,synchronization,interface,see,transaction,synchronization,after,completion,int,see,transaction,synchronization,see,transaction,synchronization,see,transaction,synchronization;public,static,void,invoke,after,completion,nullable,list,transaction,synchronization,synchronizations,int,completion,status,if,synchronizations,null,for,transaction,synchronization,synchronization,synchronizations,try,synchronization,after,completion,completion,status,catch,throwable,tsex,logger,error,transaction,synchronization,after,completion,threw,exception,tsex
TransactionSynchronizationUtils -> public static void invokeAfterCompletion(@Nullable List<TransactionSynchronization> synchronizations, 			int completionStatus);1530174524;Actually invoke the {@code afterCompletion} methods of the_given Spring TransactionSynchronization objects._@param synchronizations a List of TransactionSynchronization objects_@param completionStatus the completion status according to the_constants in the TransactionSynchronization interface_@see TransactionSynchronization#afterCompletion(int)_@see TransactionSynchronization#STATUS_COMMITTED_@see TransactionSynchronization#STATUS_ROLLED_BACK_@see TransactionSynchronization#STATUS_UNKNOWN;public static void invokeAfterCompletion(@Nullable List<TransactionSynchronization> synchronizations,_			int completionStatus) {__		if (synchronizations != null) {_			for (TransactionSynchronization synchronization : synchronizations) {_				try {_					synchronization.afterCompletion(completionStatus)__				}_				catch (Throwable tsex) {_					logger.error("TransactionSynchronization.afterCompletion threw exception", tsex)__				}_			}_		}_	};actually,invoke,the,code,after,completion,methods,of,the,given,spring,transaction,synchronization,objects,param,synchronizations,a,list,of,transaction,synchronization,objects,param,completion,status,the,completion,status,according,to,the,constants,in,the,transaction,synchronization,interface,see,transaction,synchronization,after,completion,int,see,transaction,synchronization,see,transaction,synchronization,see,transaction,synchronization;public,static,void,invoke,after,completion,nullable,list,transaction,synchronization,synchronizations,int,completion,status,if,synchronizations,null,for,transaction,synchronization,synchronization,synchronizations,try,synchronization,after,completion,completion,status,catch,throwable,tsex,logger,error,transaction,synchronization,after,completion,threw,exception,tsex
TransactionSynchronizationUtils -> public static void invokeAfterCommit(@Nullable List<TransactionSynchronization> synchronizations);1496837955;Actually invoke the {@code afterCommit} methods of the_given Spring TransactionSynchronization objects._@param synchronizations List of TransactionSynchronization objects_@see TransactionSynchronization#afterCommit();public static void invokeAfterCommit(@Nullable List<TransactionSynchronization> synchronizations) {_		if (synchronizations != null) {_			for (TransactionSynchronization synchronization : synchronizations) {_				synchronization.afterCommit()__			}_		}_	};actually,invoke,the,code,after,commit,methods,of,the,given,spring,transaction,synchronization,objects,param,synchronizations,list,of,transaction,synchronization,objects,see,transaction,synchronization,after,commit;public,static,void,invoke,after,commit,nullable,list,transaction,synchronization,synchronizations,if,synchronizations,null,for,transaction,synchronization,synchronization,synchronizations,synchronization,after,commit
TransactionSynchronizationUtils -> public static void invokeAfterCommit(@Nullable List<TransactionSynchronization> synchronizations);1530174524;Actually invoke the {@code afterCommit} methods of the_given Spring TransactionSynchronization objects._@param synchronizations a List of TransactionSynchronization objects_@see TransactionSynchronization#afterCommit();public static void invokeAfterCommit(@Nullable List<TransactionSynchronization> synchronizations) {_		if (synchronizations != null) {_			for (TransactionSynchronization synchronization : synchronizations) {_				synchronization.afterCommit()__			}_		}_	};actually,invoke,the,code,after,commit,methods,of,the,given,spring,transaction,synchronization,objects,param,synchronizations,a,list,of,transaction,synchronization,objects,see,transaction,synchronization,after,commit;public,static,void,invoke,after,commit,nullable,list,transaction,synchronization,synchronizations,if,synchronizations,null,for,transaction,synchronization,synchronization,synchronizations,synchronization,after,commit
TransactionSynchronizationUtils -> public static void triggerBeforeCommit(boolean readOnly);1328020251;Trigger <code>beforeCommit</code> callbacks on all currently registered synchronizations._@param readOnly whether the transaction is defined as read-only transaction_@throws RuntimeException if thrown by a <code>beforeCommit</code> callback_@see TransactionSynchronization#beforeCommit(boolean);public static void triggerBeforeCommit(boolean readOnly) {_		for (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {_			synchronization.beforeCommit(readOnly)__		}_	};trigger,code,before,commit,code,callbacks,on,all,currently,registered,synchronizations,param,read,only,whether,the,transaction,is,defined,as,read,only,transaction,throws,runtime,exception,if,thrown,by,a,code,before,commit,code,callback,see,transaction,synchronization,before,commit,boolean;public,static,void,trigger,before,commit,boolean,read,only,for,transaction,synchronization,synchronization,transaction,synchronization,manager,get,synchronizations,synchronization,before,commit,read,only
TransactionSynchronizationUtils -> public static void triggerBeforeCommit(boolean readOnly);1356735495;Trigger {@code beforeCommit} callbacks on all currently registered synchronizations._@param readOnly whether the transaction is defined as read-only transaction_@throws RuntimeException if thrown by a {@code beforeCommit} callback_@see TransactionSynchronization#beforeCommit(boolean);public static void triggerBeforeCommit(boolean readOnly) {_		for (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {_			synchronization.beforeCommit(readOnly)__		}_	};trigger,code,before,commit,callbacks,on,all,currently,registered,synchronizations,param,read,only,whether,the,transaction,is,defined,as,read,only,transaction,throws,runtime,exception,if,thrown,by,a,code,before,commit,callback,see,transaction,synchronization,before,commit,boolean;public,static,void,trigger,before,commit,boolean,read,only,for,transaction,synchronization,synchronization,transaction,synchronization,manager,get,synchronizations,synchronization,before,commit,read,only
TransactionSynchronizationUtils -> public static void triggerBeforeCommit(boolean readOnly);1496837955;Trigger {@code beforeCommit} callbacks on all currently registered synchronizations._@param readOnly whether the transaction is defined as read-only transaction_@throws RuntimeException if thrown by a {@code beforeCommit} callback_@see TransactionSynchronization#beforeCommit(boolean);public static void triggerBeforeCommit(boolean readOnly) {_		for (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {_			synchronization.beforeCommit(readOnly)__		}_	};trigger,code,before,commit,callbacks,on,all,currently,registered,synchronizations,param,read,only,whether,the,transaction,is,defined,as,read,only,transaction,throws,runtime,exception,if,thrown,by,a,code,before,commit,callback,see,transaction,synchronization,before,commit,boolean;public,static,void,trigger,before,commit,boolean,read,only,for,transaction,synchronization,synchronization,transaction,synchronization,manager,get,synchronizations,synchronization,before,commit,read,only
TransactionSynchronizationUtils -> public static void triggerBeforeCommit(boolean readOnly);1530174524;Trigger {@code beforeCommit} callbacks on all currently registered synchronizations._@param readOnly whether the transaction is defined as read-only transaction_@throws RuntimeException if thrown by a {@code beforeCommit} callback_@see TransactionSynchronization#beforeCommit(boolean);public static void triggerBeforeCommit(boolean readOnly) {_		for (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {_			synchronization.beforeCommit(readOnly)__		}_	};trigger,code,before,commit,callbacks,on,all,currently,registered,synchronizations,param,read,only,whether,the,transaction,is,defined,as,read,only,transaction,throws,runtime,exception,if,thrown,by,a,code,before,commit,callback,see,transaction,synchronization,before,commit,boolean;public,static,void,trigger,before,commit,boolean,read,only,for,transaction,synchronization,synchronization,transaction,synchronization,manager,get,synchronizations,synchronization,before,commit,read,only
TransactionSynchronizationUtils -> public static boolean sameResourceFactory(ResourceTransactionManager tm, Object resourceFactory);1328020251;Check whether the given resource transaction managers refers to the given_(underlying) resource factory._@see ResourceTransactionManager#getResourceFactory()_@see org.springframework.core.InfrastructureProxy#getWrappedObject();public static boolean sameResourceFactory(ResourceTransactionManager tm, Object resourceFactory) {_		return unwrapResourceIfNecessary(tm.getResourceFactory()).equals(unwrapResourceIfNecessary(resourceFactory))__	};check,whether,the,given,resource,transaction,managers,refers,to,the,given,underlying,resource,factory,see,resource,transaction,manager,get,resource,factory,see,org,springframework,core,infrastructure,proxy,get,wrapped,object;public,static,boolean,same,resource,factory,resource,transaction,manager,tm,object,resource,factory,return,unwrap,resource,if,necessary,tm,get,resource,factory,equals,unwrap,resource,if,necessary,resource,factory
TransactionSynchronizationUtils -> public static boolean sameResourceFactory(ResourceTransactionManager tm, Object resourceFactory);1356735495;Check whether the given resource transaction managers refers to the given_(underlying) resource factory._@see ResourceTransactionManager#getResourceFactory()_@see org.springframework.core.InfrastructureProxy#getWrappedObject();public static boolean sameResourceFactory(ResourceTransactionManager tm, Object resourceFactory) {_		return unwrapResourceIfNecessary(tm.getResourceFactory()).equals(unwrapResourceIfNecessary(resourceFactory))__	};check,whether,the,given,resource,transaction,managers,refers,to,the,given,underlying,resource,factory,see,resource,transaction,manager,get,resource,factory,see,org,springframework,core,infrastructure,proxy,get,wrapped,object;public,static,boolean,same,resource,factory,resource,transaction,manager,tm,object,resource,factory,return,unwrap,resource,if,necessary,tm,get,resource,factory,equals,unwrap,resource,if,necessary,resource,factory
TransactionSynchronizationUtils -> public static boolean sameResourceFactory(ResourceTransactionManager tm, Object resourceFactory);1496837955;Check whether the given resource transaction managers refers to the given_(underlying) resource factory._@see ResourceTransactionManager#getResourceFactory()_@see org.springframework.core.InfrastructureProxy#getWrappedObject();public static boolean sameResourceFactory(ResourceTransactionManager tm, Object resourceFactory) {_		return unwrapResourceIfNecessary(tm.getResourceFactory()).equals(unwrapResourceIfNecessary(resourceFactory))__	};check,whether,the,given,resource,transaction,managers,refers,to,the,given,underlying,resource,factory,see,resource,transaction,manager,get,resource,factory,see,org,springframework,core,infrastructure,proxy,get,wrapped,object;public,static,boolean,same,resource,factory,resource,transaction,manager,tm,object,resource,factory,return,unwrap,resource,if,necessary,tm,get,resource,factory,equals,unwrap,resource,if,necessary,resource,factory
TransactionSynchronizationUtils -> public static boolean sameResourceFactory(ResourceTransactionManager tm, Object resourceFactory);1530174524;Check whether the given resource transaction managers refers to the given_(underlying) resource factory._@see ResourceTransactionManager#getResourceFactory()_@see org.springframework.core.InfrastructureProxy#getWrappedObject();public static boolean sameResourceFactory(ResourceTransactionManager tm, Object resourceFactory) {_		return unwrapResourceIfNecessary(tm.getResourceFactory()).equals(unwrapResourceIfNecessary(resourceFactory))__	};check,whether,the,given,resource,transaction,managers,refers,to,the,given,underlying,resource,factory,see,resource,transaction,manager,get,resource,factory,see,org,springframework,core,infrastructure,proxy,get,wrapped,object;public,static,boolean,same,resource,factory,resource,transaction,manager,tm,object,resource,factory,return,unwrap,resource,if,necessary,tm,get,resource,factory,equals,unwrap,resource,if,necessary,resource,factory
TransactionSynchronizationUtils -> public static void triggerBeforeCompletion();1328020251;Trigger <code>beforeCompletion</code> callbacks on all currently registered synchronizations._@see TransactionSynchronization#beforeCompletion();public static void triggerBeforeCompletion() {_		for (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {_			try {_				synchronization.beforeCompletion()__			}_			catch (Throwable tsex) {_				logger.error("TransactionSynchronization.beforeCompletion threw exception", tsex)__			}_		}_	};trigger,code,before,completion,code,callbacks,on,all,currently,registered,synchronizations,see,transaction,synchronization,before,completion;public,static,void,trigger,before,completion,for,transaction,synchronization,synchronization,transaction,synchronization,manager,get,synchronizations,try,synchronization,before,completion,catch,throwable,tsex,logger,error,transaction,synchronization,before,completion,threw,exception,tsex
TransactionSynchronizationUtils -> public static void triggerBeforeCompletion();1356735495;Trigger {@code beforeCompletion} callbacks on all currently registered synchronizations._@see TransactionSynchronization#beforeCompletion();public static void triggerBeforeCompletion() {_		for (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {_			try {_				synchronization.beforeCompletion()__			}_			catch (Throwable tsex) {_				logger.error("TransactionSynchronization.beforeCompletion threw exception", tsex)__			}_		}_	};trigger,code,before,completion,callbacks,on,all,currently,registered,synchronizations,see,transaction,synchronization,before,completion;public,static,void,trigger,before,completion,for,transaction,synchronization,synchronization,transaction,synchronization,manager,get,synchronizations,try,synchronization,before,completion,catch,throwable,tsex,logger,error,transaction,synchronization,before,completion,threw,exception,tsex
TransactionSynchronizationUtils -> public static void triggerBeforeCompletion();1496837955;Trigger {@code beforeCompletion} callbacks on all currently registered synchronizations._@see TransactionSynchronization#beforeCompletion();public static void triggerBeforeCompletion() {_		for (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {_			try {_				synchronization.beforeCompletion()__			}_			catch (Throwable tsex) {_				logger.error("TransactionSynchronization.beforeCompletion threw exception", tsex)__			}_		}_	};trigger,code,before,completion,callbacks,on,all,currently,registered,synchronizations,see,transaction,synchronization,before,completion;public,static,void,trigger,before,completion,for,transaction,synchronization,synchronization,transaction,synchronization,manager,get,synchronizations,try,synchronization,before,completion,catch,throwable,tsex,logger,error,transaction,synchronization,before,completion,threw,exception,tsex
TransactionSynchronizationUtils -> public static void triggerBeforeCompletion();1530174524;Trigger {@code beforeCompletion} callbacks on all currently registered synchronizations._@see TransactionSynchronization#beforeCompletion();public static void triggerBeforeCompletion() {_		for (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {_			try {_				synchronization.beforeCompletion()__			}_			catch (Throwable tsex) {_				logger.error("TransactionSynchronization.beforeCompletion threw exception", tsex)__			}_		}_	};trigger,code,before,completion,callbacks,on,all,currently,registered,synchronizations,see,transaction,synchronization,before,completion;public,static,void,trigger,before,completion,for,transaction,synchronization,synchronization,transaction,synchronization,manager,get,synchronizations,try,synchronization,before,completion,catch,throwable,tsex,logger,error,transaction,synchronization,before,completion,threw,exception,tsex
TransactionSynchronizationUtils -> public static void invokeAfterCommit(List<TransactionSynchronization> synchronizations);1328020251;Actually invoke the <code>afterCommit</code> methods of the_given Spring TransactionSynchronization objects._@param synchronizations List of TransactionSynchronization objects_@see TransactionSynchronization#afterCommit();public static void invokeAfterCommit(List<TransactionSynchronization> synchronizations) {_		if (synchronizations != null) {_			for (TransactionSynchronization synchronization : synchronizations) {_				synchronization.afterCommit()__			}_		}_	};actually,invoke,the,code,after,commit,code,methods,of,the,given,spring,transaction,synchronization,objects,param,synchronizations,list,of,transaction,synchronization,objects,see,transaction,synchronization,after,commit;public,static,void,invoke,after,commit,list,transaction,synchronization,synchronizations,if,synchronizations,null,for,transaction,synchronization,synchronization,synchronizations,synchronization,after,commit
TransactionSynchronizationUtils -> public static void invokeAfterCommit(List<TransactionSynchronization> synchronizations);1356735495;Actually invoke the {@code afterCommit} methods of the_given Spring TransactionSynchronization objects._@param synchronizations List of TransactionSynchronization objects_@see TransactionSynchronization#afterCommit();public static void invokeAfterCommit(List<TransactionSynchronization> synchronizations) {_		if (synchronizations != null) {_			for (TransactionSynchronization synchronization : synchronizations) {_				synchronization.afterCommit()__			}_		}_	};actually,invoke,the,code,after,commit,methods,of,the,given,spring,transaction,synchronization,objects,param,synchronizations,list,of,transaction,synchronization,objects,see,transaction,synchronization,after,commit;public,static,void,invoke,after,commit,list,transaction,synchronization,synchronizations,if,synchronizations,null,for,transaction,synchronization,synchronization,synchronizations,synchronization,after,commit
TransactionSynchronizationUtils -> public static void invokeAfterCompletion(List<TransactionSynchronization> synchronizations, int completionStatus);1328020251;Actually invoke the <code>afterCompletion</code> methods of the_given Spring TransactionSynchronization objects._@param synchronizations List of TransactionSynchronization objects_@param completionStatus the completion status according to the_constants in the TransactionSynchronization interface_@see TransactionSynchronization#afterCompletion(int)_@see TransactionSynchronization#STATUS_COMMITTED_@see TransactionSynchronization#STATUS_ROLLED_BACK_@see TransactionSynchronization#STATUS_UNKNOWN;public static void invokeAfterCompletion(List<TransactionSynchronization> synchronizations, int completionStatus) {_		if (synchronizations != null) {_			for (TransactionSynchronization synchronization : synchronizations) {_				try {_					synchronization.afterCompletion(completionStatus)__				}_				catch (Throwable tsex) {_					logger.error("TransactionSynchronization.afterCompletion threw exception", tsex)__				}_			}_		}_	};actually,invoke,the,code,after,completion,code,methods,of,the,given,spring,transaction,synchronization,objects,param,synchronizations,list,of,transaction,synchronization,objects,param,completion,status,the,completion,status,according,to,the,constants,in,the,transaction,synchronization,interface,see,transaction,synchronization,after,completion,int,see,transaction,synchronization,see,transaction,synchronization,see,transaction,synchronization;public,static,void,invoke,after,completion,list,transaction,synchronization,synchronizations,int,completion,status,if,synchronizations,null,for,transaction,synchronization,synchronization,synchronizations,try,synchronization,after,completion,completion,status,catch,throwable,tsex,logger,error,transaction,synchronization,after,completion,threw,exception,tsex
TransactionSynchronizationUtils -> public static void invokeAfterCompletion(List<TransactionSynchronization> synchronizations, int completionStatus);1356735495;Actually invoke the {@code afterCompletion} methods of the_given Spring TransactionSynchronization objects._@param synchronizations List of TransactionSynchronization objects_@param completionStatus the completion status according to the_constants in the TransactionSynchronization interface_@see TransactionSynchronization#afterCompletion(int)_@see TransactionSynchronization#STATUS_COMMITTED_@see TransactionSynchronization#STATUS_ROLLED_BACK_@see TransactionSynchronization#STATUS_UNKNOWN;public static void invokeAfterCompletion(List<TransactionSynchronization> synchronizations, int completionStatus) {_		if (synchronizations != null) {_			for (TransactionSynchronization synchronization : synchronizations) {_				try {_					synchronization.afterCompletion(completionStatus)__				}_				catch (Throwable tsex) {_					logger.error("TransactionSynchronization.afterCompletion threw exception", tsex)__				}_			}_		}_	};actually,invoke,the,code,after,completion,methods,of,the,given,spring,transaction,synchronization,objects,param,synchronizations,list,of,transaction,synchronization,objects,param,completion,status,the,completion,status,according,to,the,constants,in,the,transaction,synchronization,interface,see,transaction,synchronization,after,completion,int,see,transaction,synchronization,see,transaction,synchronization,see,transaction,synchronization;public,static,void,invoke,after,completion,list,transaction,synchronization,synchronizations,int,completion,status,if,synchronizations,null,for,transaction,synchronization,synchronization,synchronizations,try,synchronization,after,completion,completion,status,catch,throwable,tsex,logger,error,transaction,synchronization,after,completion,threw,exception,tsex
TransactionSynchronizationUtils -> public static void triggerFlush();1328020251;Trigger <code>flush</code> callbacks on all currently registered synchronizations._@throws RuntimeException if thrown by a <code>flush</code> callback_@see TransactionSynchronization#flush();public static void triggerFlush() {_		for (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {_			synchronization.flush()__		}_	};trigger,code,flush,code,callbacks,on,all,currently,registered,synchronizations,throws,runtime,exception,if,thrown,by,a,code,flush,code,callback,see,transaction,synchronization,flush;public,static,void,trigger,flush,for,transaction,synchronization,synchronization,transaction,synchronization,manager,get,synchronizations,synchronization,flush
TransactionSynchronizationUtils -> public static void triggerFlush();1356735495;Trigger {@code flush} callbacks on all currently registered synchronizations._@throws RuntimeException if thrown by a {@code flush} callback_@see TransactionSynchronization#flush();public static void triggerFlush() {_		for (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {_			synchronization.flush()__		}_	};trigger,code,flush,callbacks,on,all,currently,registered,synchronizations,throws,runtime,exception,if,thrown,by,a,code,flush,callback,see,transaction,synchronization,flush;public,static,void,trigger,flush,for,transaction,synchronization,synchronization,transaction,synchronization,manager,get,synchronizations,synchronization,flush
TransactionSynchronizationUtils -> public static void triggerFlush();1496837955;Trigger {@code flush} callbacks on all currently registered synchronizations._@throws RuntimeException if thrown by a {@code flush} callback_@see TransactionSynchronization#flush();public static void triggerFlush() {_		for (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {_			synchronization.flush()__		}_	};trigger,code,flush,callbacks,on,all,currently,registered,synchronizations,throws,runtime,exception,if,thrown,by,a,code,flush,callback,see,transaction,synchronization,flush;public,static,void,trigger,flush,for,transaction,synchronization,synchronization,transaction,synchronization,manager,get,synchronizations,synchronization,flush
TransactionSynchronizationUtils -> public static void triggerFlush();1530174524;Trigger {@code flush} callbacks on all currently registered synchronizations._@throws RuntimeException if thrown by a {@code flush} callback_@see TransactionSynchronization#flush();public static void triggerFlush() {_		for (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {_			synchronization.flush()__		}_	};trigger,code,flush,callbacks,on,all,currently,registered,synchronizations,throws,runtime,exception,if,thrown,by,a,code,flush,callback,see,transaction,synchronization,flush;public,static,void,trigger,flush,for,transaction,synchronization,synchronization,transaction,synchronization,manager,get,synchronizations,synchronization,flush
