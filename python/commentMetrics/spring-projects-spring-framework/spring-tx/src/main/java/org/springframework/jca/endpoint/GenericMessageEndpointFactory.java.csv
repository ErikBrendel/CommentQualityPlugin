commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the message listener object that the endpoint should expose  * (e.g. a {@link javax.jms.MessageListener} objects or  * {@link javax.resource.cci.MessageListener} implementation).  */ ;/**  * Specify the message listener object that the endpoint should expose  * (e.g. a {@link javax.jms.MessageListener} objects or  * {@link javax.resource.cci.MessageListener} implementation).  */ public void setMessageListener(Object messageListener) {     this.messageListener = messageListener. }
true;protected;0;4;/**  * Return the message listener object for this endpoint.  * @since 5.0  */ ;/**  * Return the message listener object for this endpoint.  * @since 5.0  */ protected Object getMessageListener() {     Assert.state(this.messageListener != null, "No message listener set").     return this.messageListener. }
true;public;1;9;/**  * Wrap each concrete endpoint instance with an AOP proxy,  * exposing the message listener's interfaces as well as the  * endpoint SPI through an AOP introduction.  */ ;/**  * Wrap each concrete endpoint instance with an AOP proxy,  * exposing the message listener's interfaces as well as the  * endpoint SPI through an AOP introduction.  */ @Override public MessageEndpoint createEndpoint(XAResource xaResource) throws UnavailableException {     GenericMessageEndpoint endpoint = (GenericMessageEndpoint) super.createEndpoint(xaResource).     ProxyFactory proxyFactory = new ProxyFactory(getMessageListener()).     DelegatingIntroductionInterceptor introduction = new DelegatingIntroductionInterceptor(endpoint).     introduction.suppressInterface(MethodInterceptor.class).     proxyFactory.addAdvice(introduction).     return (MessageEndpoint) proxyFactory.getProxy(). }
true;protected;0;4;/**  * Creates a concrete generic message endpoint, internal to this factory.  */ ;/**  * Creates a concrete generic message endpoint, internal to this factory.  */ @Override protected AbstractMessageEndpoint createEndpointInternal() throws UnavailableException {     return new GenericMessageEndpoint(). }
false;public;1;33;;@Override public Object invoke(MethodInvocation methodInvocation) throws Throwable {     Throwable endpointEx = null.     boolean applyDeliveryCalls = !hasBeforeDeliveryBeenCalled().     if (applyDeliveryCalls) {         try {             beforeDelivery(null).         } catch (ResourceException ex) {             throw adaptExceptionIfNecessary(methodInvocation, ex).         }     }     try {         return methodInvocation.proceed().     } catch (Throwable ex) {         endpointEx = ex.         onEndpointException(ex).         throw ex.     } finally {         if (applyDeliveryCalls) {             try {                 afterDelivery().             } catch (ResourceException ex) {                 if (endpointEx == null) {                     throw adaptExceptionIfNecessary(methodInvocation, ex).                 }             }         }     } }
false;private;2;8;;private Exception adaptExceptionIfNecessary(MethodInvocation methodInvocation, ResourceException ex) {     if (ReflectionUtils.declaresException(methodInvocation.getMethod(), ex.getClass())) {         return ex.     } else {         return new InternalResourceException(ex).     } }
false;protected;0;4;;@Override protected ClassLoader getEndpointClassLoader() {     return getMessageListener().getClass().getClassLoader(). }
