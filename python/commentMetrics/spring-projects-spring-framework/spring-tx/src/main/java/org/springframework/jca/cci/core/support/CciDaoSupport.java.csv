commented;modifiers;parameterAmount;loc;comment;code
true;public,final;1;5;/**  * Set the ConnectionFactory to be used by this DAO.  */ ;/**  * Set the ConnectionFactory to be used by this DAO.  */ public final void setConnectionFactory(ConnectionFactory connectionFactory) {     if (this.cciTemplate == null || connectionFactory != this.cciTemplate.getConnectionFactory()) {         this.cciTemplate = createCciTemplate(connectionFactory).     } }
true;protected;1;3;/**  * Create a CciTemplate for the given ConnectionFactory.  * Only invoked if populating the DAO with a ConnectionFactory reference!  * <p>Can be overridden in subclasses to provide a CciTemplate instance  * with different configuration, or a custom CciTemplate subclass.  * @param connectionFactory the CCI ConnectionFactory to create a CciTemplate for  * @return the new CciTemplate instance  * @see #setConnectionFactory(javax.resource.cci.ConnectionFactory)  */ ;/**  * Create a CciTemplate for the given ConnectionFactory.  * Only invoked if populating the DAO with a ConnectionFactory reference!  * <p>Can be overridden in subclasses to provide a CciTemplate instance  * with different configuration, or a custom CciTemplate subclass.  * @param connectionFactory the CCI ConnectionFactory to create a CciTemplate for  * @return the new CciTemplate instance  * @see #setConnectionFactory(javax.resource.cci.ConnectionFactory)  */ protected CciTemplate createCciTemplate(ConnectionFactory connectionFactory) {     return new CciTemplate(connectionFactory). }
true;public,final;0;4;/**  * Return the ConnectionFactory used by this DAO.  */ ;/**  * Return the ConnectionFactory used by this DAO.  */ @Nullable public final ConnectionFactory getConnectionFactory() {     return (this.cciTemplate != null ? this.cciTemplate.getConnectionFactory() : null). }
true;public,final;1;3;/**  * Set the CciTemplate for this DAO explicitly,  * as an alternative to specifying a ConnectionFactory.  */ ;/**  * Set the CciTemplate for this DAO explicitly,  * as an alternative to specifying a ConnectionFactory.  */ public final void setCciTemplate(CciTemplate cciTemplate) {     this.cciTemplate = cciTemplate. }
true;public,final;0;4;/**  * Return the CciTemplate for this DAO,  * pre-initialized with the ConnectionFactory or set explicitly.  */ ;/**  * Return the CciTemplate for this DAO,  * pre-initialized with the ConnectionFactory or set explicitly.  */ @Nullable public final CciTemplate getCciTemplate() {     return this.cciTemplate. }
false;protected,final;0;6;;@Override protected final void checkDaoConfig() {     if (this.cciTemplate == null) {         throw new IllegalArgumentException("'connectionFactory' or 'cciTemplate' is required").     } }
true;protected,final;1;5;/**  * Obtain a CciTemplate derived from the main template instance,  * inheriting the ConnectionFactory and other settings but  * overriding the ConnectionSpec used for obtaining Connections.  * @param connectionSpec the CCI ConnectionSpec that the returned  * template instance is supposed to obtain Connections for  * @return the derived template instance  * @see org.springframework.jca.cci.core.CciTemplate#getDerivedTemplate(javax.resource.cci.ConnectionSpec)  */ ;/**  * Obtain a CciTemplate derived from the main template instance,  * inheriting the ConnectionFactory and other settings but  * overriding the ConnectionSpec used for obtaining Connections.  * @param connectionSpec the CCI ConnectionSpec that the returned  * template instance is supposed to obtain Connections for  * @return the derived template instance  * @see org.springframework.jca.cci.core.CciTemplate#getDerivedTemplate(javax.resource.cci.ConnectionSpec)  */ protected final CciTemplate getCciTemplate(ConnectionSpec connectionSpec) {     CciTemplate cciTemplate = getCciTemplate().     Assert.state(cciTemplate != null, "No CciTemplate set").     return cciTemplate.getDerivedTemplate(connectionSpec). }
true;protected,final;0;5;/**  * Get a CCI Connection, either from the current transaction or a new one.  * @return the CCI Connection  * @throws org.springframework.jca.cci.CannotGetCciConnectionException  * if the attempt to get a Connection failed  * @see org.springframework.jca.cci.connection.ConnectionFactoryUtils#getConnection(javax.resource.cci.ConnectionFactory)  */ ;/**  * Get a CCI Connection, either from the current transaction or a new one.  * @return the CCI Connection  * @throws org.springframework.jca.cci.CannotGetCciConnectionException  * if the attempt to get a Connection failed  * @see org.springframework.jca.cci.connection.ConnectionFactoryUtils#getConnection(javax.resource.cci.ConnectionFactory)  */ protected final Connection getConnection() throws CannotGetCciConnectionException {     ConnectionFactory connectionFactory = getConnectionFactory().     Assert.state(connectionFactory != null, "No ConnectionFactory set").     return ConnectionFactoryUtils.getConnection(connectionFactory). }
true;protected,final;1;3;/**  * Close the given CCI Connection, created via this bean's ConnectionFactory,  * if it isn't bound to the thread.  * @param con the Connection to close  * @see org.springframework.jca.cci.connection.ConnectionFactoryUtils#releaseConnection  */ ;/**  * Close the given CCI Connection, created via this bean's ConnectionFactory,  * if it isn't bound to the thread.  * @param con the Connection to close  * @see org.springframework.jca.cci.connection.ConnectionFactoryUtils#releaseConnection  */ protected final void releaseConnection(Connection con) {     ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory()). }
