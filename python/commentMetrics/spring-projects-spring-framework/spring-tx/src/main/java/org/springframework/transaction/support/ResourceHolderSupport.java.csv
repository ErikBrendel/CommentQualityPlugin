commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Mark the resource as synchronized with a transaction.  */ ;/**  * Mark the resource as synchronized with a transaction.  */ public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction) {     this.synchronizedWithTransaction = synchronizedWithTransaction. }
true;public;0;3;/**  * Return whether the resource is synchronized with a transaction.  */ ;/**  * Return whether the resource is synchronized with a transaction.  */ public boolean isSynchronizedWithTransaction() {     return this.synchronizedWithTransaction. }
true;public;0;3;/**  * Mark the resource transaction as rollback-only.  */ ;/**  * Mark the resource transaction as rollback-only.  */ public void setRollbackOnly() {     this.rollbackOnly = true. }
true;public;0;3;/**  * Reset the rollback-only status for this resource transaction.  * <p>Only really intended to be called after custom rollback steps which  * keep the original resource in action, e.g. in case of a savepoint.  * @since 5.0  * @see org.springframework.transaction.SavepointManager#rollbackToSavepoint  */ ;/**  * Reset the rollback-only status for this resource transaction.  * <p>Only really intended to be called after custom rollback steps which  * keep the original resource in action, e.g. in case of a savepoint.  * @since 5.0  * @see org.springframework.transaction.SavepointManager#rollbackToSavepoint  */ public void resetRollbackOnly() {     this.rollbackOnly = false. }
true;public;0;3;/**  * Return whether the resource transaction is marked as rollback-only.  */ ;/**  * Return whether the resource transaction is marked as rollback-only.  */ public boolean isRollbackOnly() {     return this.rollbackOnly. }
true;public;1;3;/**  * Set the timeout for this object in seconds.  * @param seconds number of seconds until expiration  */ ;/**  * Set the timeout for this object in seconds.  * @param seconds number of seconds until expiration  */ public void setTimeoutInSeconds(int seconds) {     setTimeoutInMillis(seconds * 1000L). }
true;public;1;3;/**  * Set the timeout for this object in milliseconds.  * @param millis number of milliseconds until expiration  */ ;/**  * Set the timeout for this object in milliseconds.  * @param millis number of milliseconds until expiration  */ public void setTimeoutInMillis(long millis) {     this.deadline = new Date(System.currentTimeMillis() + millis). }
true;public;0;3;/**  * Return whether this object has an associated timeout.  */ ;/**  * Return whether this object has an associated timeout.  */ public boolean hasTimeout() {     return (this.deadline != null). }
true;public;0;4;/**  * Return the expiration deadline of this object.  * @return the deadline as Date object  */ ;/**  * Return the expiration deadline of this object.  * @return the deadline as Date object  */ @Nullable public Date getDeadline() {     return this.deadline. }
true;public;0;6;/**  * Return the time to live for this object in seconds.  * Rounds up eagerly, e.g. 9.00001 still to 10.  * @return number of seconds until expiration  * @throws TransactionTimedOutException if the deadline has already been reached  */ ;/**  * Return the time to live for this object in seconds.  * Rounds up eagerly, e.g. 9.00001 still to 10.  * @return number of seconds until expiration  * @throws TransactionTimedOutException if the deadline has already been reached  */ public int getTimeToLiveInSeconds() {     double diff = ((double) getTimeToLiveInMillis()) / 1000.     int secs = (int) Math.ceil(diff).     checkTransactionTimeout(secs <= 0).     return secs. }
true;public;0;8;/**  * Return the time to live for this object in milliseconds.  * @return number of milliseconds until expiration  * @throws TransactionTimedOutException if the deadline has already been reached  */ ;/**  * Return the time to live for this object in milliseconds.  * @return number of milliseconds until expiration  * @throws TransactionTimedOutException if the deadline has already been reached  */ public long getTimeToLiveInMillis() throws TransactionTimedOutException {     if (this.deadline == null) {         throw new IllegalStateException("No timeout specified for this resource holder").     }     long timeToLive = this.deadline.getTime() - System.currentTimeMillis().     checkTransactionTimeout(timeToLive <= 0).     return timeToLive. }
true;private;1;6;/**  * Set the transaction rollback-only if the deadline has been reached,  * and throw a TransactionTimedOutException.  */ ;/**  * Set the transaction rollback-only if the deadline has been reached,  * and throw a TransactionTimedOutException.  */ private void checkTransactionTimeout(boolean deadlineReached) throws TransactionTimedOutException {     if (deadlineReached) {         setRollbackOnly().         throw new TransactionTimedOutException("Transaction timed out: deadline was " + this.deadline).     } }
true;public;0;3;/**  * Increase the reference count by one because the holder has been requested  * (i.e. someone requested the resource held by it).  */ ;/**  * Increase the reference count by one because the holder has been requested  * (i.e. someone requested the resource held by it).  */ public void requested() {     this.referenceCount++. }
true;public;0;3;/**  * Decrease the reference count by one because the holder has been released  * (i.e. someone released the resource held by it).  */ ;/**  * Decrease the reference count by one because the holder has been released  * (i.e. someone released the resource held by it).  */ public void released() {     this.referenceCount--. }
true;public;0;3;/**  * Return whether there are still open references to this holder.  */ ;/**  * Return whether there are still open references to this holder.  */ public boolean isOpen() {     return (this.referenceCount > 0). }
true;public;0;5;/**  * Clear the transactional state of this resource holder.  */ ;/**  * Clear the transactional state of this resource holder.  */ public void clear() {     this.synchronizedWithTransaction = false.     this.rollbackOnly = false.     this.deadline = null. }
true;public;0;5;/**  * Reset this resource holder - transactional state as well as reference count.  */ ;/**  * Reset this resource holder - transactional state as well as reference count.  */ @Override public void reset() {     clear().     this.referenceCount = 0. }
false;public;0;4;;@Override public void unbound() {     this.isVoid = true. }
false;public;0;4;;@Override public boolean isVoid() {     return this.isVoid. }
