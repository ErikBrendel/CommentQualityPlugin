commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override @Nullable public TransactionAttribute parseTransactionAnnotation(AnnotatedElement element) {     AnnotationAttributes attributes = AnnotatedElementUtils.findMergedAnnotationAttributes(element, Transactional.class, false, false).     if (attributes != null) {         return parseTransactionAnnotation(attributes).     } else {         return null.     } }
false;public;1;3;;public TransactionAttribute parseTransactionAnnotation(Transactional ann) {     return parseTransactionAnnotation(AnnotationUtils.getAnnotationAttributes(ann, false, false)). }
false;protected;1;28;;protected TransactionAttribute parseTransactionAnnotation(AnnotationAttributes attributes) {     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     Propagation propagation = attributes.getEnum("propagation").     rbta.setPropagationBehavior(propagation.value()).     Isolation isolation = attributes.getEnum("isolation").     rbta.setIsolationLevel(isolation.value()).     rbta.setTimeout(attributes.getNumber("timeout").intValue()).     rbta.setReadOnly(attributes.getBoolean("readOnly")).     rbta.setQualifier(attributes.getString("value")).     List<RollbackRuleAttribute> rollbackRules = new ArrayList<>().     for (Class<?> rbRule : attributes.getClassArray("rollbackFor")) {         rollbackRules.add(new RollbackRuleAttribute(rbRule)).     }     for (String rbRule : attributes.getStringArray("rollbackForClassName")) {         rollbackRules.add(new RollbackRuleAttribute(rbRule)).     }     for (Class<?> rbRule : attributes.getClassArray("noRollbackFor")) {         rollbackRules.add(new NoRollbackRuleAttribute(rbRule)).     }     for (String rbRule : attributes.getStringArray("noRollbackForClassName")) {         rollbackRules.add(new NoRollbackRuleAttribute(rbRule)).     }     rbta.setRollbackRules(rollbackRules).     return rbta. }
false;public;1;4;;@Override public boolean equals(Object other) {     return (this == other || other instanceof SpringTransactionAnnotationParser). }
false;public;0;4;;@Override public int hashCode() {     return SpringTransactionAnnotationParser.class.hashCode(). }
