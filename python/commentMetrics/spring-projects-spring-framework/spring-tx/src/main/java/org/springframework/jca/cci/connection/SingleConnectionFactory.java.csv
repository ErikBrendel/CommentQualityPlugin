# id;timestamp;commentText;codeText;commentWords;codeWords
SingleConnectionFactory -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1328020251;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_CCI ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				new Class[] {Connection.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,cci,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,new,class,connection,class,new,close,suppressing,invocation,handler,target
SingleConnectionFactory -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1356735495;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_CCI ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				new Class[] {Connection.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,cci,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,new,class,connection,class,new,close,suppressing,invocation,handler,target
SingleConnectionFactory -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1357119239;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_CCI ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				new Class[] {Connection.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,cci,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,new,class,connection,class,new,close,suppressing,invocation,handler,target
SingleConnectionFactory -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1368482696;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_CCI ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				new Class[] {Connection.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,cci,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,new,class,connection,class,new,close,suppressing,invocation,handler,target
SingleConnectionFactory -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1385412762;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_CCI ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				new Class<?>[] {Connection.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,cci,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,new,class,connection,class,new,close,suppressing,invocation,handler,target
SingleConnectionFactory -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1413848647;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_CCI ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				new Class<?>[] {Connection.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,cci,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,new,class,connection,class,new,close,suppressing,invocation,handler,target
SingleConnectionFactory -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1496837955;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_CCI ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				new Class<?>[] {Connection.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,cci,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,new,class,connection,class,new,close,suppressing,invocation,handler,target
SingleConnectionFactory -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1498780456;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_CCI ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				new Class<?>[] {Connection.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,cci,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,new,class,connection,class,new,close,suppressing,invocation,handler,target
SingleConnectionFactory -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1530174524;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_CCI ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				new Class<?>[] {Connection.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,cci,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,new,class,connection,class,new,close,suppressing,invocation,handler,target
SingleConnectionFactory -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1530174524;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_CCI ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				new Class<?>[] {Connection.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,cci,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,new,class,connection,class,new,close,suppressing,invocation,handler,target
SingleConnectionFactory -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1532091916;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_CCI ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				new Class<?>[] {Connection.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,cci,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,new,class,connection,class,new,close,suppressing,invocation,handler,target
SingleConnectionFactory -> protected Connection doCreateConnection() throws ResourceException;1328020251;Create a CCI Connection via this template's ConnectionFactory._@return the new CCI Connection_@throws javax.resource.ResourceException if thrown by CCI API methods;protected Connection doCreateConnection() throws ResourceException {_		return getTargetConnectionFactory().getConnection()__	};create,a,cci,connection,via,this,template,s,connection,factory,return,the,new,cci,connection,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;protected,connection,do,create,connection,throws,resource,exception,return,get,target,connection,factory,get,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws ResourceException;1356735495;Create a CCI Connection via this template's ConnectionFactory._@return the new CCI Connection_@throws javax.resource.ResourceException if thrown by CCI API methods;protected Connection doCreateConnection() throws ResourceException {_		return getTargetConnectionFactory().getConnection()__	};create,a,cci,connection,via,this,template,s,connection,factory,return,the,new,cci,connection,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;protected,connection,do,create,connection,throws,resource,exception,return,get,target,connection,factory,get,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws ResourceException;1357119239;Create a CCI Connection via this template's ConnectionFactory._@return the new CCI Connection_@throws javax.resource.ResourceException if thrown by CCI API methods;protected Connection doCreateConnection() throws ResourceException {_		return getTargetConnectionFactory().getConnection()__	};create,a,cci,connection,via,this,template,s,connection,factory,return,the,new,cci,connection,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;protected,connection,do,create,connection,throws,resource,exception,return,get,target,connection,factory,get,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws ResourceException;1368482696;Create a CCI Connection via this template's ConnectionFactory._@return the new CCI Connection_@throws javax.resource.ResourceException if thrown by CCI API methods;protected Connection doCreateConnection() throws ResourceException {_		return getTargetConnectionFactory().getConnection()__	};create,a,cci,connection,via,this,template,s,connection,factory,return,the,new,cci,connection,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;protected,connection,do,create,connection,throws,resource,exception,return,get,target,connection,factory,get,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws ResourceException;1385412762;Create a CCI Connection via this template's ConnectionFactory._@return the new CCI Connection_@throws javax.resource.ResourceException if thrown by CCI API methods;protected Connection doCreateConnection() throws ResourceException {_		return getTargetConnectionFactory().getConnection()__	};create,a,cci,connection,via,this,template,s,connection,factory,return,the,new,cci,connection,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;protected,connection,do,create,connection,throws,resource,exception,return,get,target,connection,factory,get,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws ResourceException;1413848647;Create a CCI Connection via this template's ConnectionFactory._@return the new CCI Connection_@throws javax.resource.ResourceException if thrown by CCI API methods;protected Connection doCreateConnection() throws ResourceException {_		return getTargetConnectionFactory().getConnection()__	};create,a,cci,connection,via,this,template,s,connection,factory,return,the,new,cci,connection,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;protected,connection,do,create,connection,throws,resource,exception,return,get,target,connection,factory,get,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws ResourceException;1496837955;Create a CCI Connection via this template's ConnectionFactory._@return the new CCI Connection_@throws javax.resource.ResourceException if thrown by CCI API methods;protected Connection doCreateConnection() throws ResourceException {_		ConnectionFactory connectionFactory = getTargetConnectionFactory()__		Assert.state(connectionFactory != null, "No 'targetConnectionFactory' set")__		return connectionFactory.getConnection()__	};create,a,cci,connection,via,this,template,s,connection,factory,return,the,new,cci,connection,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;protected,connection,do,create,connection,throws,resource,exception,connection,factory,connection,factory,get,target,connection,factory,assert,state,connection,factory,null,no,target,connection,factory,set,return,connection,factory,get,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws ResourceException;1498780456;Create a CCI Connection via this template's ConnectionFactory._@return the new CCI Connection_@throws javax.resource.ResourceException if thrown by CCI API methods;protected Connection doCreateConnection() throws ResourceException {_		ConnectionFactory connectionFactory = getTargetConnectionFactory()__		Assert.state(connectionFactory != null, "No 'targetConnectionFactory' set")__		return connectionFactory.getConnection()__	};create,a,cci,connection,via,this,template,s,connection,factory,return,the,new,cci,connection,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;protected,connection,do,create,connection,throws,resource,exception,connection,factory,connection,factory,get,target,connection,factory,assert,state,connection,factory,null,no,target,connection,factory,set,return,connection,factory,get,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws ResourceException;1530174524;Create a CCI Connection via this template's ConnectionFactory._@return the new CCI Connection_@throws javax.resource.ResourceException if thrown by CCI API methods;protected Connection doCreateConnection() throws ResourceException {_		ConnectionFactory connectionFactory = getTargetConnectionFactory()__		Assert.state(connectionFactory != null, "No 'targetConnectionFactory' set")__		return connectionFactory.getConnection()__	};create,a,cci,connection,via,this,template,s,connection,factory,return,the,new,cci,connection,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;protected,connection,do,create,connection,throws,resource,exception,connection,factory,connection,factory,get,target,connection,factory,assert,state,connection,factory,null,no,target,connection,factory,set,return,connection,factory,get,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws ResourceException;1530174524;Create a CCI Connection via this template's ConnectionFactory._@return the new CCI Connection_@throws javax.resource.ResourceException if thrown by CCI API methods;protected Connection doCreateConnection() throws ResourceException {_		ConnectionFactory connectionFactory = getTargetConnectionFactory()__		Assert.state(connectionFactory != null, "No 'targetConnectionFactory' set")__		return connectionFactory.getConnection()__	};create,a,cci,connection,via,this,template,s,connection,factory,return,the,new,cci,connection,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;protected,connection,do,create,connection,throws,resource,exception,connection,factory,connection,factory,get,target,connection,factory,assert,state,connection,factory,null,no,target,connection,factory,set,return,connection,factory,get,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws ResourceException;1532091916;Create a CCI Connection via this template's ConnectionFactory._@return the new CCI Connection_@throws javax.resource.ResourceException if thrown by CCI API methods;protected Connection doCreateConnection() throws ResourceException {_		ConnectionFactory connectionFactory = getTargetConnectionFactory()__		Assert.state(connectionFactory != null, "No 'targetConnectionFactory' set")__		return connectionFactory.getConnection()__	};create,a,cci,connection,via,this,template,s,connection,factory,return,the,new,cci,connection,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;protected,connection,do,create,connection,throws,resource,exception,connection,factory,connection,factory,get,target,connection,factory,assert,state,connection,factory,null,no,target,connection,factory,set,return,connection,factory,get,connection
SingleConnectionFactory -> @Override 	public void destroy();1356735495;Close the underlying Connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1368482696;Close the underlying Connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1385412762;Close the underlying Connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1413848647;Close the underlying Connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1496837955;Close the underlying Connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1498780456;Close the underlying Connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1530174524;Close the underlying Connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1530174524;Close the underlying Connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1532091916;Close the underlying Connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> public void initConnection() throws ResourceException;1328020251;Initialize the single underlying Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.resource.ResourceException if thrown by CCI API methods;public void initConnection() throws ResourceException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared CCI Connection: " + this.target)__			}_			this.connection = getCloseSuppressingConnectionProxy(this.target)__		}_	};initialize,the,single,underlying,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;public,void,init,connection,throws,resource,exception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,cci,connection,this,target,this,connection,get,close,suppressing,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws ResourceException;1356735495;Initialize the single underlying Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.resource.ResourceException if thrown by CCI API methods;public void initConnection() throws ResourceException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared CCI Connection: " + this.target)__			}_			this.connection = getCloseSuppressingConnectionProxy(this.target)__		}_	};initialize,the,single,underlying,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;public,void,init,connection,throws,resource,exception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,cci,connection,this,target,this,connection,get,close,suppressing,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws ResourceException;1357119239;Initialize the single underlying Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.resource.ResourceException if thrown by CCI API methods;public void initConnection() throws ResourceException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared CCI Connection: " + this.target)__			}_			this.connection = getCloseSuppressingConnectionProxy(this.target)__		}_	};initialize,the,single,underlying,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;public,void,init,connection,throws,resource,exception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,cci,connection,this,target,this,connection,get,close,suppressing,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws ResourceException;1368482696;Initialize the single underlying Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.resource.ResourceException if thrown by CCI API methods;public void initConnection() throws ResourceException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared CCI Connection: " + this.target)__			}_			this.connection = getCloseSuppressingConnectionProxy(this.target)__		}_	};initialize,the,single,underlying,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;public,void,init,connection,throws,resource,exception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,cci,connection,this,target,this,connection,get,close,suppressing,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws ResourceException;1385412762;Initialize the single underlying Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.resource.ResourceException if thrown by CCI API methods;public void initConnection() throws ResourceException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared CCI Connection: " + this.target)__			}_			this.connection = getCloseSuppressingConnectionProxy(this.target)__		}_	};initialize,the,single,underlying,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;public,void,init,connection,throws,resource,exception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,cci,connection,this,target,this,connection,get,close,suppressing,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws ResourceException;1413848647;Initialize the single underlying Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.resource.ResourceException if thrown by CCI API methods;public void initConnection() throws ResourceException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared CCI Connection: " + this.target)__			}_			this.connection = getCloseSuppressingConnectionProxy(this.target)__		}_	};initialize,the,single,underlying,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;public,void,init,connection,throws,resource,exception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,cci,connection,this,target,this,connection,get,close,suppressing,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws ResourceException;1496837955;Initialize the single underlying Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.resource.ResourceException if thrown by CCI API methods;public void initConnection() throws ResourceException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared CCI Connection: " + this.target)__			}_			this.connection = getCloseSuppressingConnectionProxy(this.target)__		}_	};initialize,the,single,underlying,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;public,void,init,connection,throws,resource,exception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,cci,connection,this,target,this,connection,get,close,suppressing,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws ResourceException;1498780456;Initialize the single underlying Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.resource.ResourceException if thrown by CCI API methods;public void initConnection() throws ResourceException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared CCI Connection: " + this.target)__			}_			this.connection = getCloseSuppressingConnectionProxy(this.target)__		}_	};initialize,the,single,underlying,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;public,void,init,connection,throws,resource,exception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,cci,connection,this,target,this,connection,get,close,suppressing,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws ResourceException;1530174524;Initialize the single underlying Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.resource.ResourceException if thrown by CCI API methods;public void initConnection() throws ResourceException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared CCI Connection: " + this.target)__			}_			this.connection = getCloseSuppressingConnectionProxy(this.target)__		}_	};initialize,the,single,underlying,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;public,void,init,connection,throws,resource,exception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,cci,connection,this,target,this,connection,get,close,suppressing,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws ResourceException;1530174524;Initialize the single underlying Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.resource.ResourceException if thrown by CCI API methods;public void initConnection() throws ResourceException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared CCI Connection: " + this.target)__			}_			this.connection = getCloseSuppressingConnectionProxy(this.target)__		}_	};initialize,the,single,underlying,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;public,void,init,connection,throws,resource,exception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,cci,connection,this,target,this,connection,get,close,suppressing,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws ResourceException;1532091916;Initialize the single underlying Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.resource.ResourceException if thrown by CCI API methods;public void initConnection() throws ResourceException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isDebugEnabled()) {_				logger.debug("Established shared CCI Connection: " + this.target)__			}_			this.connection = getCloseSuppressingConnectionProxy(this.target)__		}_	};initialize,the,single,underlying,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,resource,resource,exception,if,thrown,by,cci,api,methods;public,void,init,connection,throws,resource,exception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,debug,enabled,logger,debug,established,shared,cci,connection,this,target,this,connection,get,close,suppressing,connection,proxy,this,target
SingleConnectionFactory -> public SingleConnectionFactory();1328020251;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1356735495;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1357119239;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1368482696;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1385412762;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1413848647;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1496837955;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1498780456;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1530174524;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1530174524;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1532091916;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> protected void closeConnection(Connection con);1328020251;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		try {_			con.close()__		}_		catch (Throwable ex) {_			logger.warn("Could not close shared CCI Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,try,con,close,catch,throwable,ex,logger,warn,could,not,close,shared,cci,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1356735495;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		try {_			con.close()__		}_		catch (Throwable ex) {_			logger.warn("Could not close shared CCI Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,try,con,close,catch,throwable,ex,logger,warn,could,not,close,shared,cci,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1357119239;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		try {_			con.close()__		}_		catch (Throwable ex) {_			logger.warn("Could not close shared CCI Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,try,con,close,catch,throwable,ex,logger,warn,could,not,close,shared,cci,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1368482696;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		try {_			con.close()__		}_		catch (Throwable ex) {_			logger.warn("Could not close shared CCI Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,try,con,close,catch,throwable,ex,logger,warn,could,not,close,shared,cci,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1385412762;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		try {_			con.close()__		}_		catch (Throwable ex) {_			logger.warn("Could not close shared CCI Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,try,con,close,catch,throwable,ex,logger,warn,could,not,close,shared,cci,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1413848647;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		try {_			con.close()__		}_		catch (Throwable ex) {_			logger.warn("Could not close shared CCI Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,try,con,close,catch,throwable,ex,logger,warn,could,not,close,shared,cci,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1496837955;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		try {_			con.close()__		}_		catch (Throwable ex) {_			logger.warn("Could not close shared CCI Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,try,con,close,catch,throwable,ex,logger,warn,could,not,close,shared,cci,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1498780456;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		try {_			con.close()__		}_		catch (Throwable ex) {_			logger.warn("Could not close shared CCI Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,try,con,close,catch,throwable,ex,logger,warn,could,not,close,shared,cci,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1530174524;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		try {_			con.close()__		}_		catch (Throwable ex) {_			logger.warn("Could not close shared CCI Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,try,con,close,catch,throwable,ex,logger,warn,could,not,close,shared,cci,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1530174524;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		try {_			con.close()__		}_		catch (Throwable ex) {_			logger.warn("Could not close shared CCI Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,try,con,close,catch,throwable,ex,logger,warn,could,not,close,shared,cci,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1532091916;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		try {_			con.close()__		}_		catch (Throwable ex) {_			logger.warn("Could not close shared CCI Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,try,con,close,catch,throwable,ex,logger,warn,could,not,close,shared,cci,connection,ex
SingleConnectionFactory -> public void destroy();1328020251;Close the underlying Connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;public void destroy() {_		resetConnection()__	};close,the,underlying,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;public,void,destroy,reset,connection
SingleConnectionFactory -> public void destroy();1357119239;Close the underlying Connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;public void destroy() {_		resetConnection()__	};close,the,underlying,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1328020251;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1356735495;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1357119239;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1368482696;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1385412762;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1413848647;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1496837955;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1498780456;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1530174524;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1530174524;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1532091916;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> public void resetConnection();1328020251;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1356735495;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1357119239;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1368482696;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1385412762;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1413848647;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1496837955;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1498780456;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1530174524;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1530174524;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1532091916;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1328020251;Create a new SingleConnectionFactory that always returns a single_Connection which it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,which,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,set,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1356735495;Create a new SingleConnectionFactory that always returns a single_Connection which it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,which,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,set,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1357119239;Create a new SingleConnectionFactory that always returns a single_Connection which it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,which,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,set,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1368482696;Create a new SingleConnectionFactory that always returns a single_Connection which it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,which,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,set,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1385412762;Create a new SingleConnectionFactory that always returns a single_Connection which it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,which,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,set,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1413848647;Create a new SingleConnectionFactory that always returns a single_Connection which it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,which,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,set,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1496837955;Create a new SingleConnectionFactory that always returns a single_Connection which it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,which,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,set,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1498780456;Create a new SingleConnectionFactory that always returns a single_Connection which it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,which,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,set,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1530174524;Create a new SingleConnectionFactory that always returns a single_Connection which it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,which,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,set,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1530174524;Create a new SingleConnectionFactory that always returns a single_Connection which it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,which,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,set,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1532091916;Create a new SingleConnectionFactory that always returns a single_Connection which it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,which,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,set,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1328020251;Create a new SingleConnectionFactory that always returns the_given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getCloseSuppressingConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,close,suppressing,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1356735495;Create a new SingleConnectionFactory that always returns the_given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getCloseSuppressingConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,close,suppressing,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1357119239;Create a new SingleConnectionFactory that always returns the_given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getCloseSuppressingConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,close,suppressing,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1368482696;Create a new SingleConnectionFactory that always returns the_given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getCloseSuppressingConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,close,suppressing,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1385412762;Create a new SingleConnectionFactory that always returns the_given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getCloseSuppressingConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,close,suppressing,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1413848647;Create a new SingleConnectionFactory that always returns the_given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getCloseSuppressingConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,close,suppressing,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1496837955;Create a new SingleConnectionFactory that always returns the_given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getCloseSuppressingConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,close,suppressing,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1498780456;Create a new SingleConnectionFactory that always returns the_given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getCloseSuppressingConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,close,suppressing,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1530174524;Create a new SingleConnectionFactory that always returns the_given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getCloseSuppressingConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,close,suppressing,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1530174524;Create a new SingleConnectionFactory that always returns the_given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getCloseSuppressingConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,close,suppressing,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1532091916;Create a new SingleConnectionFactory that always returns the_given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getCloseSuppressingConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,close,suppressing,connection,proxy,target
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws ResourceException;1328020251;Prepare the given Connection before it is exposed._<p>The default implementation is empty. Can be overridden in subclasses._@param con the Connection to prepare;protected void prepareConnection(Connection con) throws ResourceException {_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare;protected,void,prepare,connection,connection,con,throws,resource,exception
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws ResourceException;1356735495;Prepare the given Connection before it is exposed._<p>The default implementation is empty. Can be overridden in subclasses._@param con the Connection to prepare;protected void prepareConnection(Connection con) throws ResourceException {_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare;protected,void,prepare,connection,connection,con,throws,resource,exception
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws ResourceException;1357119239;Prepare the given Connection before it is exposed._<p>The default implementation is empty. Can be overridden in subclasses._@param con the Connection to prepare;protected void prepareConnection(Connection con) throws ResourceException {_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare;protected,void,prepare,connection,connection,con,throws,resource,exception
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws ResourceException;1368482696;Prepare the given Connection before it is exposed._<p>The default implementation is empty. Can be overridden in subclasses._@param con the Connection to prepare;protected void prepareConnection(Connection con) throws ResourceException {_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare;protected,void,prepare,connection,connection,con,throws,resource,exception
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws ResourceException;1385412762;Prepare the given Connection before it is exposed._<p>The default implementation is empty. Can be overridden in subclasses._@param con the Connection to prepare;protected void prepareConnection(Connection con) throws ResourceException {_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare;protected,void,prepare,connection,connection,con,throws,resource,exception
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws ResourceException;1413848647;Prepare the given Connection before it is exposed._<p>The default implementation is empty. Can be overridden in subclasses._@param con the Connection to prepare;protected void prepareConnection(Connection con) throws ResourceException {_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare;protected,void,prepare,connection,connection,con,throws,resource,exception
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws ResourceException;1496837955;Prepare the given Connection before it is exposed._<p>The default implementation is empty. Can be overridden in subclasses._@param con the Connection to prepare;protected void prepareConnection(Connection con) throws ResourceException {_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare;protected,void,prepare,connection,connection,con,throws,resource,exception
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws ResourceException;1498780456;Prepare the given Connection before it is exposed._<p>The default implementation is empty. Can be overridden in subclasses._@param con the Connection to prepare;protected void prepareConnection(Connection con) throws ResourceException {_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare;protected,void,prepare,connection,connection,con,throws,resource,exception
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws ResourceException;1530174524;Prepare the given Connection before it is exposed._<p>The default implementation is empty. Can be overridden in subclasses._@param con the Connection to prepare;protected void prepareConnection(Connection con) throws ResourceException {_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare;protected,void,prepare,connection,connection,con,throws,resource,exception
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws ResourceException;1530174524;Prepare the given Connection before it is exposed._<p>The default implementation is empty. Can be overridden in subclasses._@param con the Connection to prepare;protected void prepareConnection(Connection con) throws ResourceException {_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare;protected,void,prepare,connection,connection,con,throws,resource,exception
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws ResourceException;1532091916;Prepare the given Connection before it is exposed._<p>The default implementation is empty. Can be overridden in subclasses._@param con the Connection to prepare;protected void prepareConnection(Connection con) throws ResourceException {_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare;protected,void,prepare,connection,connection,con,throws,resource,exception
