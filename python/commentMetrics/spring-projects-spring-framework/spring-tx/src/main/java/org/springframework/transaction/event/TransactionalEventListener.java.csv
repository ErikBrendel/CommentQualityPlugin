# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionalEventListener -> @AliasFor(attribute = "classes") 	Class<?>[] value() default {}_;1436359867;Alias for {@link #classes()}.;@AliasFor(attribute = "classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,attribute,classes,class,value,default
TransactionalEventListener -> @AliasFor(attribute = "classes") 	Class<?>[] value() default {}_;1436360909;Alias for {@link #classes}.;@AliasFor(attribute = "classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,attribute,classes,class,value,default
TransactionalEventListener -> @AliasFor(annotation = EventListener.class, attribute = "classes") 	Class<?>[] value() default {}_;1440785092;Alias for {@link #classes}.;@AliasFor(annotation = EventListener.class, attribute = "classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,annotation,event,listener,class,attribute,classes,class,value,default
TransactionalEventListener -> @AliasFor(annotation = EventListener.class, attribute = "classes") 	Class<?>[] value() default {}_;1488891001;Alias for {@link #classes}.;@AliasFor(annotation = EventListener.class, attribute = "classes")_	Class<?>[] value() default {}_;alias,for,link,classes;alias,for,annotation,event,listener,class,attribute,classes,class,value,default
TransactionalEventListener -> boolean fallbackExecution() default false_;1423556073;Specify if the event should be processed if no transaction is running.;boolean fallbackExecution() default false_;specify,if,the,event,should,be,processed,if,no,transaction,is,running;boolean,fallback,execution,default,false
TransactionalEventListener -> boolean fallbackExecution() default false_;1429832293;Specify if the event should be processed if no transaction is running.;boolean fallbackExecution() default false_;specify,if,the,event,should,be,processed,if,no,transaction,is,running;boolean,fallback,execution,default,false
TransactionalEventListener -> boolean fallbackExecution() default false_;1436359867;Specify if the event should be processed if no transaction is running.;boolean fallbackExecution() default false_;specify,if,the,event,should,be,processed,if,no,transaction,is,running;boolean,fallback,execution,default,false
TransactionalEventListener -> boolean fallbackExecution() default false_;1436360909;Whether the event should be processed if no transaction is running.;boolean fallbackExecution() default false_;whether,the,event,should,be,processed,if,no,transaction,is,running;boolean,fallback,execution,default,false
TransactionalEventListener -> boolean fallbackExecution() default false_;1438176426;Whether the event should be processed if no transaction is running.;boolean fallbackExecution() default false_;whether,the,event,should,be,processed,if,no,transaction,is,running;boolean,fallback,execution,default,false
TransactionalEventListener -> boolean fallbackExecution() default false_;1440785092;Whether the event should be processed if no transaction is running.;boolean fallbackExecution() default false_;whether,the,event,should,be,processed,if,no,transaction,is,running;boolean,fallback,execution,default,false
TransactionalEventListener -> boolean fallbackExecution() default false_;1488891001;Whether the event should be processed if no transaction is running.;boolean fallbackExecution() default false_;whether,the,event,should,be,processed,if,no,transaction,is,running;boolean,fallback,execution,default,false
TransactionalEventListener -> String condition() default ""_;1423556073;Spring Expression Language (SpEL) attribute used for conditioning the event handling._<p>Default is "", meaning the event is always handled._@see EventListener#condition();String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,event,handling,p,default,is,meaning,the,event,is,always,handled,see,event,listener,condition;string,condition,default
TransactionalEventListener -> String condition() default ""_;1429832293;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is "", meaning the event is always handled._@see EventListener#condition;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,meaning,the,event,is,always,handled,see,event,listener,condition;string,condition,default
TransactionalEventListener -> String condition() default ""_;1436359867;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is "", meaning the event is always handled._@see EventListener#condition;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,meaning,the,event,is,always,handled,see,event,listener,condition;string,condition,default
TransactionalEventListener -> String condition() default ""_;1436360909;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is {@code ""}, meaning the event is always handled._@see EventListener#condition;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,code,meaning,the,event,is,always,handled,see,event,listener,condition;string,condition,default
TransactionalEventListener -> String condition() default ""_;1438176426;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is {@code ""}, meaning the event is always handled._@see EventListener#condition;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,code,meaning,the,event,is,always,handled,see,event,listener,condition;string,condition,default
TransactionalEventListener -> String condition() default ""_;1440785092;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>Default is {@code ""}, meaning the event is always handled._@see EventListener#condition;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,default,is,code,meaning,the,event,is,always,handled,see,event,listener,condition;string,condition,default
TransactionalEventListener -> String condition() default ""_;1488891001;Spring Expression Language (SpEL) attribute used for making the event_handling conditional._<p>The default is {@code ""}, meaning the event is always handled._@see EventListener#condition;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,event,handling,conditional,p,the,default,is,code,meaning,the,event,is,always,handled,see,event,listener,condition;string,condition,default
TransactionalEventListener -> @AliasFor(attribute = "value") 	Class<?>[] classes() default {}_;1436359867;The event classes that this listener handles. When this attribute is specified_with one value, the method parameter may or may not be specified. When this_attribute is specified with more than one value, the method must not have a_parameter.;@AliasFor(attribute = "value")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,when,this,attribute,is,specified,with,one,value,the,method,parameter,may,or,may,not,be,specified,when,this,attribute,is,specified,with,more,than,one,value,the,method,must,not,have,a,parameter;alias,for,attribute,value,class,classes,default
TransactionalEventListener -> @AliasFor(attribute = "value") 	Class<?>[] classes() default {}_;1436360909;The event classes that this listener handles._<p>When this attribute is specified with one value, the method parameter_may or may not be specified. When this attribute is specified with more_than one value, the method must not have a parameter.;@AliasFor(attribute = "value")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,p,when,this,attribute,is,specified,with,one,value,the,method,parameter,may,or,may,not,be,specified,when,this,attribute,is,specified,with,more,than,one,value,the,method,must,not,have,a,parameter;alias,for,attribute,value,class,classes,default
TransactionalEventListener -> TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;1423556073;Phase to bind the handling of an event to. If no transaction is in progress, the_event is not processed at all unless {@link #fallbackExecution()} has been_enabled explicitly.;TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;phase,to,bind,the,handling,of,an,event,to,if,no,transaction,is,in,progress,the,event,is,not,processed,at,all,unless,link,fallback,execution,has,been,enabled,explicitly;transaction,phase,phase,default,transaction,phase
TransactionalEventListener -> TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;1429832293;Phase to bind the handling of an event to. If no transaction is in progress, the_event is not processed at all unless {@link #fallbackExecution} has been_enabled explicitly.;TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;phase,to,bind,the,handling,of,an,event,to,if,no,transaction,is,in,progress,the,event,is,not,processed,at,all,unless,link,fallback,execution,has,been,enabled,explicitly;transaction,phase,phase,default,transaction,phase
TransactionalEventListener -> TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;1436359867;Phase to bind the handling of an event to. If no transaction is in progress, the_event is not processed at all unless {@link #fallbackExecution} has been_enabled explicitly.;TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;phase,to,bind,the,handling,of,an,event,to,if,no,transaction,is,in,progress,the,event,is,not,processed,at,all,unless,link,fallback,execution,has,been,enabled,explicitly;transaction,phase,phase,default,transaction,phase
TransactionalEventListener -> TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;1436360909;Phase to bind the handling of an event to._<p>If no transaction is in progress, the event is not processed at_all unless {@link #fallbackExecution} has been enabled explicitly.;TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;phase,to,bind,the,handling,of,an,event,to,p,if,no,transaction,is,in,progress,the,event,is,not,processed,at,all,unless,link,fallback,execution,has,been,enabled,explicitly;transaction,phase,phase,default,transaction,phase
TransactionalEventListener -> TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;1438176426;Phase to bind the handling of an event to._<p>If no transaction is in progress, the event is not processed at_all unless {@link #fallbackExecution} has been enabled explicitly.;TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;phase,to,bind,the,handling,of,an,event,to,p,if,no,transaction,is,in,progress,the,event,is,not,processed,at,all,unless,link,fallback,execution,has,been,enabled,explicitly;transaction,phase,phase,default,transaction,phase
TransactionalEventListener -> TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;1440785092;Phase to bind the handling of an event to._<p>If no transaction is in progress, the event is not processed at_all unless {@link #fallbackExecution} has been enabled explicitly.;TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;phase,to,bind,the,handling,of,an,event,to,p,if,no,transaction,is,in,progress,the,event,is,not,processed,at,all,unless,link,fallback,execution,has,been,enabled,explicitly;transaction,phase,phase,default,transaction,phase
TransactionalEventListener -> TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;1488891001;Phase to bind the handling of an event to._<p>The default phase is {@link TransactionPhase#AFTER_COMMIT}._<p>If no transaction is in progress, the event is not processed at_all unless {@link #fallbackExecution} has been enabled explicitly.;TransactionPhase phase() default TransactionPhase.AFTER_COMMIT_;phase,to,bind,the,handling,of,an,event,to,p,the,default,phase,is,link,transaction,phase,p,if,no,transaction,is,in,progress,the,event,is,not,processed,at,all,unless,link,fallback,execution,has,been,enabled,explicitly;transaction,phase,phase,default,transaction,phase
TransactionalEventListener -> @AliasFor(annotation = EventListener.class, attribute = "classes") 	Class<?>[] classes() default {}_;1440785092;The event classes that this listener handles._<p>If this attribute is specified with a single value, the annotated_method may optionally accept a single parameter. However, if this_attribute is specified with multiple values, the annotated method_must <em>not</em> declare any parameters.;@AliasFor(annotation = EventListener.class, attribute = "classes")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,p,if,this,attribute,is,specified,with,a,single,value,the,annotated,method,may,optionally,accept,a,single,parameter,however,if,this,attribute,is,specified,with,multiple,values,the,annotated,method,must,em,not,em,declare,any,parameters;alias,for,annotation,event,listener,class,attribute,classes,class,classes,default
TransactionalEventListener -> @AliasFor(annotation = EventListener.class, attribute = "classes") 	Class<?>[] classes() default {}_;1488891001;The event classes that this listener handles._<p>If this attribute is specified with a single value, the annotated_method may optionally accept a single parameter. However, if this_attribute is specified with multiple values, the annotated method_must <em>not</em> declare any parameters.;@AliasFor(annotation = EventListener.class, attribute = "classes")_	Class<?>[] classes() default {}_;the,event,classes,that,this,listener,handles,p,if,this,attribute,is,specified,with,a,single,value,the,annotated,method,may,optionally,accept,a,single,parameter,however,if,this,attribute,is,specified,with,multiple,values,the,annotated,method,must,em,not,em,declare,any,parameters;alias,for,annotation,event,listener,class,attribute,classes,class,classes,default
