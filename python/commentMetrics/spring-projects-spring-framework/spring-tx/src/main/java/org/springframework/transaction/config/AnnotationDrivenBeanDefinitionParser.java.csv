commented;modifiers;parameterAmount;loc;comment;code
true;public;2;18;/**  * Parses the {@code <tx:annotation-driven/>} tag. Will  * {@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary register an AutoProxyCreator}  * with the container as necessary.  */ ;/**  * Parses the {@code <tx:annotation-driven/>} tag. Will  * {@link AopNamespaceUtils#registerAutoProxyCreatorIfNecessary register an AutoProxyCreator}  * with the container as necessary.  */ @Override @Nullable public BeanDefinition parse(Element element, ParserContext parserContext) {     registerTransactionalEventListenerFactory(parserContext).     String mode = element.getAttribute("mode").     if ("aspectj".equals(mode)) {         // mode="aspectj"         registerTransactionAspect(element, parserContext).         if (ClassUtils.isPresent("javax.transaction.Transactional", getClass().getClassLoader())) {             registerJtaTransactionAspect(element, parserContext).         }     } else {         // mode="proxy"         AopAutoProxyConfigurer.configureAutoProxyCreator(element, parserContext).     }     return null. }
false;private;2;11;;private void registerTransactionAspect(Element element, ParserContext parserContext) {     String txAspectBeanName = TransactionManagementConfigUtils.TRANSACTION_ASPECT_BEAN_NAME.     String txAspectClassName = TransactionManagementConfigUtils.TRANSACTION_ASPECT_CLASS_NAME.     if (!parserContext.getRegistry().containsBeanDefinition(txAspectBeanName)) {         RootBeanDefinition def = new RootBeanDefinition().         def.setBeanClassName(txAspectClassName).         def.setFactoryMethodName("aspectOf").         registerTransactionManager(element, def).         parserContext.registerBeanComponent(new BeanComponentDefinition(def, txAspectBeanName)).     } }
false;private;2;11;;private void registerJtaTransactionAspect(Element element, ParserContext parserContext) {     String txAspectBeanName = TransactionManagementConfigUtils.JTA_TRANSACTION_ASPECT_BEAN_NAME.     String txAspectClassName = TransactionManagementConfigUtils.JTA_TRANSACTION_ASPECT_CLASS_NAME.     if (!parserContext.getRegistry().containsBeanDefinition(txAspectBeanName)) {         RootBeanDefinition def = new RootBeanDefinition().         def.setBeanClassName(txAspectClassName).         def.setFactoryMethodName("aspectOf").         registerTransactionManager(element, def).         parserContext.registerBeanComponent(new BeanComponentDefinition(def, txAspectBeanName)).     } }
false;private,static;2;4;;private static void registerTransactionManager(Element element, BeanDefinition def) {     def.getPropertyValues().add("transactionManagerBeanName", TxNamespaceHandler.getTransactionManagerName(element)). }
false;private;1;6;;private void registerTransactionalEventListenerFactory(ParserContext parserContext) {     RootBeanDefinition def = new RootBeanDefinition().     def.setBeanClass(TransactionalEventListenerFactory.class).     parserContext.registerBeanComponent(new BeanComponentDefinition(def, TransactionManagementConfigUtils.TRANSACTIONAL_EVENT_LISTENER_FACTORY_BEAN_NAME)). }
false;public,static;2;40;;public static void configureAutoProxyCreator(Element element, ParserContext parserContext) {     AopNamespaceUtils.registerAutoProxyCreatorIfNecessary(parserContext, element).     String txAdvisorBeanName = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME.     if (!parserContext.getRegistry().containsBeanDefinition(txAdvisorBeanName)) {         Object eleSource = parserContext.extractSource(element).         // Create the TransactionAttributeSource definition.         RootBeanDefinition sourceDef = new RootBeanDefinition("org.springframework.transaction.annotation.AnnotationTransactionAttributeSource").         sourceDef.setSource(eleSource).         sourceDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).         String sourceName = parserContext.getReaderContext().registerWithGeneratedName(sourceDef).         // Create the TransactionInterceptor definition.         RootBeanDefinition interceptorDef = new RootBeanDefinition(TransactionInterceptor.class).         interceptorDef.setSource(eleSource).         interceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).         registerTransactionManager(element, interceptorDef).         interceptorDef.getPropertyValues().add("transactionAttributeSource", new RuntimeBeanReference(sourceName)).         String interceptorName = parserContext.getReaderContext().registerWithGeneratedName(interceptorDef).         // Create the TransactionAttributeSourceAdvisor definition.         RootBeanDefinition advisorDef = new RootBeanDefinition(BeanFactoryTransactionAttributeSourceAdvisor.class).         advisorDef.setSource(eleSource).         advisorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).         advisorDef.getPropertyValues().add("transactionAttributeSource", new RuntimeBeanReference(sourceName)).         advisorDef.getPropertyValues().add("adviceBeanName", interceptorName).         if (element.hasAttribute("order")) {             advisorDef.getPropertyValues().add("order", element.getAttribute("order")).         }         parserContext.getRegistry().registerBeanDefinition(txAdvisorBeanName, advisorDef).         CompositeComponentDefinition compositeDef = new CompositeComponentDefinition(element.getTagName(), eleSource).         compositeDef.addNestedComponent(new BeanComponentDefinition(sourceDef, sourceName)).         compositeDef.addNestedComponent(new BeanComponentDefinition(interceptorDef, interceptorName)).         compositeDef.addNestedComponent(new BeanComponentDefinition(advisorDef, txAdvisorBeanName)).         parserContext.registerComponent(compositeDef).     } }
