# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1328020251;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be <code>null</code>);protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null,code;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1337516454;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be <code>null</code>);protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null,code;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1338031377;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be <code>null</code>);protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null,code;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1348680642;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be <code>null</code>);protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null,code;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1356735495;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1357119239;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1362408075;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1368482696;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1385412762;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1404485123;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1413848647;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1414421272;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1418414219;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1418414460;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1418738700;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1418743562;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1419784686;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1419787021;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1419966315;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1420035703;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1429542359;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1467730834;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1467808333;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1469482026;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1469487293;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1469561374;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1472041862;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1472044092;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(TransactionInfo txInfo);1477045393;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources);1496837955;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources);1497341397;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources);1498780456;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources);1500448076;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources);1502974979;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources);1506097334;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources);1508843662;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources);1530174524;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources);1530174524;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources);1549881943;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource... transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> @Nullable 	public PlatformTransactionManager getTransactionManager();1495868221;Return the default transaction manager, or {@code null} if unknown.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> @Nullable 	public PlatformTransactionManager getTransactionManager();1496837955;Return the default transaction manager, or {@code null} if unknown.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> @Nullable 	public PlatformTransactionManager getTransactionManager();1497341397;Return the default transaction manager, or {@code null} if unknown.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> @Nullable 	public PlatformTransactionManager getTransactionManager();1498780456;Return the default transaction manager, or {@code null} if unknown.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> @Nullable 	public PlatformTransactionManager getTransactionManager();1500448076;Return the default transaction manager, or {@code null} if unknown.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> @Nullable 	public PlatformTransactionManager getTransactionManager();1502974979;Return the default transaction manager, or {@code null} if unknown.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> @Nullable 	public PlatformTransactionManager getTransactionManager();1506097334;Return the default transaction manager, or {@code null} if unknown.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> @Nullable 	public PlatformTransactionManager getTransactionManager();1508843662;Return the default transaction manager, or {@code null} if unknown.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> @Nullable 	public PlatformTransactionManager getTransactionManager();1530174524;Return the default transaction manager, or {@code null} if unknown.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> @Nullable 	public PlatformTransactionManager getTransactionManager();1530174524;Return the default transaction manager, or {@code null} if unknown.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> @Nullable 	public PlatformTransactionManager getTransactionManager();1549881943;Return the default transaction manager, or {@code null} if unknown.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1328020251;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1337516454;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1338031377;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1348680642;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1356735495;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1357119239;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1362408075;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1368482696;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1385412762;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1404485123;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1413848647;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1414421272;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1418414219;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1418414460;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1418738700;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1418743562;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1419784686;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1419787021;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1419966315;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1420035703;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1429542359;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1467730834;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1467808333;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1469482026;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1469487293;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1469561374;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1472041862;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1472044092;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1477045393;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1495868221;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1496837955;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1497341397;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1498780456;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1500448076;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1502974979;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1506097334;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1508843662;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1530174524;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1530174524;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> public void setTransactionAttributes(Properties transactionAttributes);1549881943;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		NameMatchTransactionAttributeSource tas = new NameMatchTransactionAttributeSource()__		tas.setProperties(transactionAttributes)__		this.transactionAttributeSource = tas__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,name,match,transaction,attribute,source,tas,new,name,match,transaction,attribute,source,tas,set,properties,transaction,attributes,this,transaction,attribute,source,tas
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1328020251;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return log message identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,log,message,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1337516454;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return log message identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,log,message,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1338031377;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return log message identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,log,message,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1348680642;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1356735495;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1357119239;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1362408075;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1368482696;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1385412762;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1404485123;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1413848647;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1414421272;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1418414219;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1418414460;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1418738700;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1418743562;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1419784686;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Deprecated 	protected String methodIdentification(Method method);1419787021;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@return a String representation identifying this method_@deprecated in favor of {@link #methodIdentification(Method, Class)};@Deprecated_	protected String methodIdentification(Method method) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,return,a,string,representation,identifying,this,method,deprecated,in,favor,of,link,method,identification,method,class;deprecated,protected,string,method,identification,method,method,return,null
TransactionAspectSupport -> @Nullable 	protected final BeanFactory getBeanFactory();1498780456;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Nullable_	protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;nullable,protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> @Nullable 	protected final BeanFactory getBeanFactory();1500448076;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Nullable_	protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;nullable,protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> @Nullable 	protected final BeanFactory getBeanFactory();1502974979;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Nullable_	protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;nullable,protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> @Nullable 	protected final BeanFactory getBeanFactory();1506097334;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Nullable_	protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;nullable,protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> @Nullable 	protected final BeanFactory getBeanFactory();1508843662;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Nullable_	protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;nullable,protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> @Nullable 	protected final BeanFactory getBeanFactory();1530174524;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Nullable_	protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;nullable,protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> @Nullable 	protected final BeanFactory getBeanFactory();1530174524;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Nullable_	protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;nullable,protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> @Nullable 	protected final BeanFactory getBeanFactory();1549881943;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Nullable_	protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;nullable,protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1328020251;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1337516454;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1338031377;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1348680642;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1356735495;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1357119239;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1362408075;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1368482696;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1385412762;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1404485123;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1413848647;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1414421272;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1418414219;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1418414460;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1418738700;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1418743562;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1419784686;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1419787021;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1419966315;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1420035703;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1429542359;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1467730834;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1467808333;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1469482026;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1469487293;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1469561374;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1472041862;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1472044092;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1477045393;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex);1495868221;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void clearTransactionManagerCache();1418743562;Clear the cached transaction managers.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__	};clear,the,cached,transaction,managers;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear
TransactionAspectSupport -> protected void clearTransactionManagerCache();1419784686;Clear the cached transaction managers.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__	};clear,the,cached,transaction,managers;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear
TransactionAspectSupport -> protected void clearTransactionManagerCache();1419787021;Clear the cached transaction managers.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__	};clear,the,cached,transaction,managers;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear
TransactionAspectSupport -> protected void clearTransactionManagerCache();1419966315;Clear the cached transaction managers.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__	};clear,the,cached,transaction,managers;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear
TransactionAspectSupport -> protected void clearTransactionManagerCache();1420035703;Clear the cached transaction managers.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__	};clear,the,cached,transaction,managers;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear
TransactionAspectSupport -> protected void clearTransactionManagerCache();1429542359;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1467730834;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1467808333;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1469482026;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1469487293;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1469561374;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1472041862;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1472044092;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1477045393;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1495868221;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1496837955;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1497341397;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1498780456;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1500448076;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1502974979;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1506097334;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1508843662;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1530174524;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1530174524;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected void clearTransactionManagerCache();1549881943;Clear the cache.;protected void clearTransactionManagerCache() {_		this.transactionManagerCache.clear()__		this.beanFactory = null__	};clear,the,cache;protected,void,clear,transaction,manager,cache,this,transaction,manager,cache,clear,this,bean,factory,null
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, String joinpointIdentification, 			@Nullable TransactionStatus status);1496837955;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, String joinpointIdentification,_			@Nullable TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,string,joinpoint,identification,nullable,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, String joinpointIdentification, 			@Nullable TransactionStatus status);1497341397;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, String joinpointIdentification,_			@Nullable TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,string,joinpoint,identification,nullable,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, String joinpointIdentification, 			@Nullable TransactionStatus status);1498780456;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, String joinpointIdentification,_			@Nullable TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,string,joinpoint,identification,nullable,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, String joinpointIdentification, 			@Nullable TransactionStatus status);1500448076;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, String joinpointIdentification,_			@Nullable TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,string,joinpoint,identification,nullable,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, String joinpointIdentification, 			@Nullable TransactionStatus status);1502974979;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, String joinpointIdentification,_			@Nullable TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,string,joinpoint,identification,nullable,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, String joinpointIdentification, 			@Nullable TransactionStatus status);1506097334;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, String joinpointIdentification,_			@Nullable TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,string,joinpoint,identification,nullable,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, String joinpointIdentification, 			@Nullable TransactionStatus status);1508843662;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, String joinpointIdentification,_			@Nullable TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,string,joinpoint,identification,nullable,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, String joinpointIdentification, 			@Nullable TransactionStatus status);1530174524;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, String joinpointIdentification,_			@Nullable TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,string,joinpoint,identification,nullable,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, String joinpointIdentification, 			@Nullable TransactionStatus status);1530174524;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, String joinpointIdentification,_			@Nullable TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled()) {_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__			}_		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,string,joinpoint,identification,nullable,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, String joinpointIdentification, 			@Nullable TransactionStatus status);1549881943;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, String joinpointIdentification,_			@Nullable TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled()) {_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__			}_		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,string,joinpoint,identification,nullable,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> public void afterPropertiesSet();1328020251;Check that required properties were set.;public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> public void afterPropertiesSet();1337516454;Check that required properties were set.;public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> public void afterPropertiesSet();1338031377;Check that required properties were set.;public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> public void afterPropertiesSet();1348680642;Check that required properties were set.;public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> public void afterPropertiesSet();1357119239;Check that required properties were set.;public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> public void afterPropertiesSet();1362408075;Check that required properties were set.;public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1328020251;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return currentTransactionInfo().transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,current,transaction,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1337516454;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return currentTransactionInfo().transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,current,transaction,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1338031377;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return currentTransactionInfo().transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,current,transaction,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1348680642;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return currentTransactionInfo().transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,current,transaction,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1356735495;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return currentTransactionInfo().transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,current,transaction,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1357119239;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return currentTransactionInfo().transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,current,transaction,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1362408075;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return currentTransactionInfo().transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,current,transaction,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1368482696;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return currentTransactionInfo().transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,current,transaction,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1385412762;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return currentTransactionInfo().transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,current,transaction,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1404485123;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return currentTransactionInfo().transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,current,transaction,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1413848647;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return currentTransactionInfo().transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,current,transaction,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1414421272;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1418414219;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1418414460;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1418738700;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1418743562;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1419784686;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1419787021;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1419966315;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1420035703;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1429542359;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1467730834;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1467808333;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1469482026;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1469487293;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1469561374;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1472041862;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1472044092;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1477045393;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1495868221;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1496837955;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1497341397;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1498780456;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1500448076;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1502974979;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1506097334;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1508843662;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1530174524;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1530174524;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> public static TransactionStatus currentTransactionStatus() throws NoTransactionException;1549881943;Return the transaction status of the current method invocation._Mainly intended for code that wants to set the current transaction_rollback-only but not throw an application exception._@throws NoTransactionException if the transaction info cannot be found,_because the method was invoked outside an AOP invocation context;public static TransactionStatus currentTransactionStatus() throws NoTransactionException {_		TransactionInfo info = currentTransactionInfo()__		if (info == null || info.transactionStatus == null) {_			throw new NoTransactionException("No transaction aspect-managed TransactionStatus in scope")__		}_		return info.transactionStatus__	};return,the,transaction,status,of,the,current,method,invocation,mainly,intended,for,code,that,wants,to,set,the,current,transaction,rollback,only,but,not,throw,an,application,exception,throws,no,transaction,exception,if,the,transaction,info,cannot,be,found,because,the,method,was,invoked,outside,an,aop,invocation,context;public,static,transaction,status,current,transaction,status,throws,no,transaction,exception,transaction,info,info,current,transaction,info,if,info,null,info,transaction,status,null,throw,new,no,transaction,exception,no,transaction,aspect,managed,transaction,status,in,scope,return,info,transaction,status
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1328020251;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1337516454;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1338031377;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1348680642;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1356735495;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1357119239;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1362408075;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1368482696;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1385412762;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1404485123;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1413848647;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1414421272;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1418414219;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1418414460;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1418738700;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1418743562;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1419784686;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1419787021;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1419966315;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1420035703;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1429542359;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1467730834;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1467808333;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1469482026;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1469487293;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1469561374;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1472041862;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1472044092;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1477045393;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1495868221;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1496837955;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1497341397;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1498780456;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1500448076;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1502974979;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1506097334;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1508843662;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1530174524;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1530174524;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> TransactionInfo -> public boolean hasTransaction();1549881943;Return whether a transaction was created by this aspect,_or whether we just have a placeholder to keep ThreadLocal stack integrity.;public boolean hasTransaction() {_			return (this.transactionStatus != null)__		};return,whether,a,transaction,was,created,by,this,aspect,or,whether,we,just,have,a,placeholder,to,keep,thread,local,stack,integrity;public,boolean,has,transaction,return,this,transaction,status,null
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1328020251;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1337516454;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1338031377;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1348680642;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1356735495;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1357119239;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1362408075;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1368482696;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1385412762;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1404485123;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1413848647;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1414421272;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1418414219;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1418414460;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1418738700;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1418743562;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1419784686;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1419787021;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1419966315;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1420035703;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1429542359;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1467730834;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1467808333;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1469482026;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1469487293;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1469561374;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1472041862;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1472044092;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1477045393;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources);1495868221;Set multiple transaction attribute sources which are used to find transaction_attributes. Will build a CompositeTransactionAttributeSource for the given sources._@see CompositeTransactionAttributeSource_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSources(TransactionAttributeSource[] transactionAttributeSources) {_		this.transactionAttributeSource = new CompositeTransactionAttributeSource(transactionAttributeSources)__	};set,multiple,transaction,attribute,sources,which,are,used,to,find,transaction,attributes,will,build,a,composite,transaction,attribute,source,for,the,given,sources,see,composite,transaction,attribute,source,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,sources,transaction,attribute,source,transaction,attribute,sources,this,transaction,attribute,source,new,composite,transaction,attribute,source,transaction,attribute,sources
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1356735495;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1357119239;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1362408075;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1368482696;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1385412762;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1404485123;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1413848647;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1414421272;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1418414219;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1418414460;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1418738700;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1418743562;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1419784686;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1419787021;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1419966315;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1420035703;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1429542359;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1467730834;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1467808333;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1469482026;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1469487293;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1469561374;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1472041862;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1472044092;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1477045393;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1328020251;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1337516454;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1338031377;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1348680642;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1356735495;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1357119239;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1362408075;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1368482696;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1385412762;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1404485123;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1413848647;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1414421272;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1418414219;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1418414460;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1418738700;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1418743562;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1419784686;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1419787021;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1419966315;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1420035703;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1429542359;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1467730834;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1467808333;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1469482026;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1469487293;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1469561374;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1472041862;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1472044092;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1477045393;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1495868221;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1496837955;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1497341397;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1498780456;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> protected String methodIdentification(Method method, Class targetClass);1328020251;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass class the method is on_@return log message identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)__		return ClassUtils.getQualifiedMethodName(specificMethod)__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,class,the,method,is,on,return,log,message,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,method,specific,method,class,utils,get,most,specific,method,method,target,class,return,class,utils,get,qualified,method,name,specific,method
TransactionAspectSupport -> protected String methodIdentification(Method method, Class targetClass);1337516454;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass class the method is on_@return log message identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)__		return ClassUtils.getQualifiedMethodName(specificMethod)__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,class,the,method,is,on,return,log,message,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,method,specific,method,class,utils,get,most,specific,method,method,target,class,return,class,utils,get,qualified,method,name,specific,method
TransactionAspectSupport -> protected String methodIdentification(Method method, Class targetClass);1338031377;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass class the method is on_@return log message identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)__		return ClassUtils.getQualifiedMethodName(specificMethod)__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,class,the,method,is,on,return,log,message,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,method,specific,method,class,utils,get,most,specific,method,method,target,class,return,class,utils,get,qualified,method,name,specific,method
TransactionAspectSupport -> protected String methodIdentification(Method method, Class targetClass);1348680642;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class targetClass);1356735495;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class targetClass);1357119239;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class targetClass);1362408075;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class targetClass);1368482696;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1356735495;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1368482696;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1385412762;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1404485123;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1413848647;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1414421272;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1418414219;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1418414460;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1418738700;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1418743562;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1419784686;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1419787021;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1419966315;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1420035703;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1429542359;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1467730834;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1467808333;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1469482026;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1469487293;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1469561374;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1472041862;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1472044092;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1477045393;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1495868221;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1496837955;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1497341397;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1498780456;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo);1496837955;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo);1497341397;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo);1498780456;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo);1500448076;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo);1502974979;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo);1506097334;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo);1508843662;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo);1530174524;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo);1530174524;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo);1549881943;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> @Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass);1385412762;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource()_@deprecated in favor of_{@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)};@Deprecated_	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source,deprecated,in,favor,of,link,create,transaction,if,necessary,platform,transaction,manager,transaction,attribute,string;deprecated,protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> @Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass);1404485123;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource()_@deprecated in favor of_{@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)};@Deprecated_	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source,deprecated,in,favor,of,link,create,transaction,if,necessary,platform,transaction,manager,transaction,attribute,string;deprecated,protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> @Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass);1413848647;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource()_@deprecated in favor of_{@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)};@Deprecated_	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source,deprecated,in,favor,of,link,create,transaction,if,necessary,platform,transaction,manager,transaction,attribute,string;deprecated,protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> @Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass);1414421272;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource()_@deprecated in favor of_{@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)};@Deprecated_	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source,deprecated,in,favor,of,link,create,transaction,if,necessary,platform,transaction,manager,transaction,attribute,string;deprecated,protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> @Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass);1418414219;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource()_@deprecated in favor of_{@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)};@Deprecated_	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source,deprecated,in,favor,of,link,create,transaction,if,necessary,platform,transaction,manager,transaction,attribute,string;deprecated,protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> @Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass);1418414460;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource()_@deprecated in favor of_{@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)};@Deprecated_	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source,deprecated,in,favor,of,link,create,transaction,if,necessary,platform,transaction,manager,transaction,attribute,string;deprecated,protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> @Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass);1418738700;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource()_@deprecated in favor of_{@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)};@Deprecated_	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source,deprecated,in,favor,of,link,create,transaction,if,necessary,platform,transaction,manager,transaction,attribute,string;deprecated,protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> @Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass);1418743562;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource()_@deprecated in favor of_{@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)};@Deprecated_	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source,deprecated,in,favor,of,link,create,transaction,if,necessary,platform,transaction,manager,transaction,attribute,string;deprecated,protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> @Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass);1419784686;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource()_@deprecated in favor of_{@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)};@Deprecated_	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source,deprecated,in,favor,of,link,create,transaction,if,necessary,platform,transaction,manager,transaction,attribute,string;deprecated,protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> @Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass);1419787021;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource()_@deprecated in favor of_{@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)};@Deprecated_	protected TransactionInfo createTransactionIfNecessary(Method method, Class<?> targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source,deprecated,in,favor,of,link,create,transaction,if,necessary,platform,transaction,manager,transaction,attribute,string;deprecated,protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> @Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass);1362408075;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource()_@deprecated in favor of_{@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)};@Deprecated_	protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source,deprecated,in,favor,of,link,create,transaction,if,necessary,platform,transaction,manager,transaction,attribute,string;deprecated,protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> @Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass);1368482696;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource()_@deprecated in favor of_{@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)};@Deprecated_	protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source,deprecated,in,favor,of,link,create,transaction,if,necessary,platform,transaction,manager,transaction,attribute,string;deprecated,protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1328020251;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			return TransactionAspectUtils.getTransactionManager(this.beanFactory, qualifier)__		}_		else if (this.transactionManagerBeanName != null) {_			return this.beanFactory.getBean(this.transactionManagerBeanName, PlatformTransactionManager.class)__		}_		else if (this.beanFactory instanceof ListableBeanFactory) {_			return BeanFactoryUtils.beanOfTypeIncludingAncestors(((ListableBeanFactory) this.beanFactory), PlatformTransactionManager.class)__		}_		else {_			throw new IllegalStateException(_					"Cannot retrieve PlatformTransactionManager beans from non-listable BeanFactory: " + this.beanFactory)__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,return,transaction,aspect,utils,get,transaction,manager,this,bean,factory,qualifier,else,if,this,transaction,manager,bean,name,null,return,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,else,if,this,bean,factory,instanceof,listable,bean,factory,return,bean,factory,utils,bean,of,type,including,ancestors,listable,bean,factory,this,bean,factory,platform,transaction,manager,class,else,throw,new,illegal,state,exception,cannot,retrieve,platform,transaction,manager,beans,from,non,listable,bean,factory,this,bean,factory
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1337516454;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			return BeanFactoryUtils.qualifiedBeanOfType(this.beanFactory, PlatformTransactionManager.class, qualifier)__		}_		else if (this.transactionManagerBeanName != null) {_			return this.beanFactory.getBean(this.transactionManagerBeanName, PlatformTransactionManager.class)__		}_		else if (this.beanFactory instanceof ListableBeanFactory) {_			return BeanFactoryUtils.beanOfTypeIncludingAncestors(((ListableBeanFactory) this.beanFactory), PlatformTransactionManager.class)__		}_		else {_			throw new IllegalStateException(_					"Cannot retrieve PlatformTransactionManager beans from non-listable BeanFactory: " + this.beanFactory)__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,return,bean,factory,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,else,if,this,transaction,manager,bean,name,null,return,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,else,if,this,bean,factory,instanceof,listable,bean,factory,return,bean,factory,utils,bean,of,type,including,ancestors,listable,bean,factory,this,bean,factory,platform,transaction,manager,class,else,throw,new,illegal,state,exception,cannot,retrieve,platform,transaction,manager,beans,from,non,listable,bean,factory,this,bean,factory
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1338031377;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			return BeanFactoryAnnotationUtils.qualifiedBeanOfType(this.beanFactory, PlatformTransactionManager.class, qualifier)__		}_		else if (this.transactionManagerBeanName != null) {_			return this.beanFactory.getBean(this.transactionManagerBeanName, PlatformTransactionManager.class)__		}_		else if (this.beanFactory instanceof ListableBeanFactory) {_			return BeanFactoryUtils.beanOfTypeIncludingAncestors(((ListableBeanFactory) this.beanFactory), PlatformTransactionManager.class)__		}_		else {_			throw new IllegalStateException(_					"Cannot retrieve PlatformTransactionManager beans from non-listable BeanFactory: " + this.beanFactory)__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,return,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,else,if,this,transaction,manager,bean,name,null,return,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,else,if,this,bean,factory,instanceof,listable,bean,factory,return,bean,factory,utils,bean,of,type,including,ancestors,listable,bean,factory,this,bean,factory,platform,transaction,manager,class,else,throw,new,illegal,state,exception,cannot,retrieve,platform,transaction,manager,beans,from,non,listable,bean,factory,this,bean,factory
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1348680642;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			return BeanFactoryAnnotationUtils.qualifiedBeanOfType(this.beanFactory, PlatformTransactionManager.class, qualifier)__		}_		else if (this.transactionManagerBeanName != null) {_			return this.beanFactory.getBean(this.transactionManagerBeanName, PlatformTransactionManager.class)__		}_		else if (this.beanFactory instanceof ListableBeanFactory) {_			return BeanFactoryUtils.beanOfTypeIncludingAncestors(((ListableBeanFactory) this.beanFactory), PlatformTransactionManager.class)__		}_		else {_			throw new IllegalStateException(_					"Cannot retrieve PlatformTransactionManager beans from non-listable BeanFactory: " + this.beanFactory)__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,return,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,else,if,this,transaction,manager,bean,name,null,return,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,else,if,this,bean,factory,instanceof,listable,bean,factory,return,bean,factory,utils,bean,of,type,including,ancestors,listable,bean,factory,this,bean,factory,platform,transaction,manager,class,else,throw,new,illegal,state,exception,cannot,retrieve,platform,transaction,manager,beans,from,non,listable,bean,factory,this,bean,factory
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1356735495;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			return BeanFactoryAnnotationUtils.qualifiedBeanOfType(this.beanFactory, PlatformTransactionManager.class, qualifier)__		}_		else if (this.transactionManagerBeanName != null) {_			return this.beanFactory.getBean(this.transactionManagerBeanName, PlatformTransactionManager.class)__		}_		else if (this.beanFactory instanceof ListableBeanFactory) {_			return BeanFactoryUtils.beanOfTypeIncludingAncestors(((ListableBeanFactory) this.beanFactory), PlatformTransactionManager.class)__		}_		else {_			throw new IllegalStateException(_					"Cannot retrieve PlatformTransactionManager beans from non-listable BeanFactory: " + this.beanFactory)__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,return,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,else,if,this,transaction,manager,bean,name,null,return,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,else,if,this,bean,factory,instanceof,listable,bean,factory,return,bean,factory,utils,bean,of,type,including,ancestors,listable,bean,factory,this,bean,factory,platform,transaction,manager,class,else,throw,new,illegal,state,exception,cannot,retrieve,platform,transaction,manager,beans,from,non,listable,bean,factory,this,bean,factory
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1357119239;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			return BeanFactoryAnnotationUtils.qualifiedBeanOfType(this.beanFactory, PlatformTransactionManager.class, qualifier)__		}_		else if (this.transactionManagerBeanName != null) {_			return this.beanFactory.getBean(this.transactionManagerBeanName, PlatformTransactionManager.class)__		}_		else if (this.beanFactory instanceof ListableBeanFactory) {_			return BeanFactoryUtils.beanOfTypeIncludingAncestors(((ListableBeanFactory) this.beanFactory), PlatformTransactionManager.class)__		}_		else {_			throw new IllegalStateException(_					"Cannot retrieve PlatformTransactionManager beans from non-listable BeanFactory: " + this.beanFactory)__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,return,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,else,if,this,transaction,manager,bean,name,null,return,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,else,if,this,bean,factory,instanceof,listable,bean,factory,return,bean,factory,utils,bean,of,type,including,ancestors,listable,bean,factory,this,bean,factory,platform,transaction,manager,class,else,throw,new,illegal,state,exception,cannot,retrieve,platform,transaction,manager,beans,from,non,listable,bean,factory,this,bean,factory
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1362408075;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			return BeanFactoryAnnotationUtils.qualifiedBeanOfType(this.beanFactory, PlatformTransactionManager.class, qualifier)__		}_		else if (this.transactionManagerBeanName != null) {_			return this.beanFactory.getBean(this.transactionManagerBeanName, PlatformTransactionManager.class)__		}_		else {_			return this.beanFactory.getBean(PlatformTransactionManager.class)__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,return,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,else,if,this,transaction,manager,bean,name,null,return,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,else,return,this,bean,factory,get,bean,platform,transaction,manager,class
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1368482696;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			return BeanFactoryAnnotationUtils.qualifiedBeanOfType(this.beanFactory, PlatformTransactionManager.class, qualifier)__		}_		else if (this.transactionManagerBeanName != null) {_			return this.beanFactory.getBean(this.transactionManagerBeanName, PlatformTransactionManager.class)__		}_		else {_			return this.beanFactory.getBean(PlatformTransactionManager.class)__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,return,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,else,if,this,transaction,manager,bean,name,null,return,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,else,return,this,bean,factory,get,bean,platform,transaction,manager,class
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1385412762;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			return BeanFactoryAnnotationUtils.qualifiedBeanOfType(this.beanFactory, PlatformTransactionManager.class, qualifier)__		}_		else if (this.transactionManagerBeanName != null) {_			return this.beanFactory.getBean(this.transactionManagerBeanName, PlatformTransactionManager.class)__		}_		else {_			return this.beanFactory.getBean(PlatformTransactionManager.class)__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,return,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,else,if,this,transaction,manager,bean,name,null,return,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,else,return,this,bean,factory,get,bean,platform,transaction,manager,class
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1404485123;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier)__			if (txManager == null) {_				txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(_						this.beanFactory, PlatformTransactionManager.class, qualifier)__				this.transactionManagerCache.putIfAbsent(qualifier, txManager)__			}_			return txManager__		}_		else if (this.transactionManagerBeanName != null) {_			PlatformTransactionManager txManager  = this.transactionManagerCache.get(this.transactionManagerBeanName)__			if (txManager == null) {_				txManager = this.beanFactory.getBean(_						this.transactionManagerBeanName, PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(this.transactionManagerBeanName, txManager)__			}_			return txManager__		}_		else {_			_			this.transactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__			return this.transactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,qualifier,if,tx,manager,null,tx,manager,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,this,transaction,manager,cache,put,if,absent,qualifier,tx,manager,return,tx,manager,else,if,this,transaction,manager,bean,name,null,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,this,transaction,manager,bean,name,if,tx,manager,null,tx,manager,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,this,transaction,manager,bean,name,tx,manager,return,tx,manager,else,this,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,return,this,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1413848647;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier)__			if (txManager == null) {_				txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(_						this.beanFactory, PlatformTransactionManager.class, qualifier)__				this.transactionManagerCache.putIfAbsent(qualifier, txManager)__			}_			return txManager__		}_		else if (this.transactionManagerBeanName != null) {_			PlatformTransactionManager txManager  = this.transactionManagerCache.get(this.transactionManagerBeanName)__			if (txManager == null) {_				txManager = this.beanFactory.getBean(_						this.transactionManagerBeanName, PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(this.transactionManagerBeanName, txManager)__			}_			return txManager__		}_		else {_			_			this.transactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__			return this.transactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,qualifier,if,tx,manager,null,tx,manager,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,this,transaction,manager,cache,put,if,absent,qualifier,tx,manager,return,tx,manager,else,if,this,transaction,manager,bean,name,null,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,this,transaction,manager,bean,name,if,tx,manager,null,tx,manager,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,this,transaction,manager,bean,name,tx,manager,return,tx,manager,else,this,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,return,this,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1414421272;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier)__			if (txManager == null) {_				txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(_						this.beanFactory, PlatformTransactionManager.class, qualifier)__				this.transactionManagerCache.putIfAbsent(qualifier, txManager)__			}_			return txManager__		}_		else if (this.transactionManagerBeanName != null) {_			PlatformTransactionManager txManager  = this.transactionManagerCache.get(this.transactionManagerBeanName)__			if (txManager == null) {_				txManager = this.beanFactory.getBean(_						this.transactionManagerBeanName, PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(this.transactionManagerBeanName, txManager)__			}_			return txManager__		}_		else {_			_			this.transactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__			return this.transactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,qualifier,if,tx,manager,null,tx,manager,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,this,transaction,manager,cache,put,if,absent,qualifier,tx,manager,return,tx,manager,else,if,this,transaction,manager,bean,name,null,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,this,transaction,manager,bean,name,if,tx,manager,null,tx,manager,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,this,transaction,manager,bean,name,tx,manager,return,tx,manager,else,this,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,return,this,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1418414219;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasLength(qualifier)) {_			PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier)__			if (txManager == null) {_				txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(_						this.beanFactory, PlatformTransactionManager.class, qualifier)__				this.transactionManagerCache.putIfAbsent(qualifier, txManager)__			}_			return txManager__		}_		else if (this.transactionManagerBeanName != null) {_			PlatformTransactionManager txManager  = this.transactionManagerCache.get(this.transactionManagerBeanName)__			if (txManager == null) {_				txManager = this.beanFactory.getBean(_						this.transactionManagerBeanName, PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(this.transactionManagerBeanName, txManager)__			}_			return txManager__		}_		else {_			_			this.transactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__			return this.transactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,length,qualifier,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,qualifier,if,tx,manager,null,tx,manager,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,this,transaction,manager,cache,put,if,absent,qualifier,tx,manager,return,tx,manager,else,if,this,transaction,manager,bean,name,null,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,this,transaction,manager,bean,name,if,tx,manager,null,tx,manager,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,this,transaction,manager,bean,name,tx,manager,return,tx,manager,else,this,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,return,this,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1418414460;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {_			return this.transactionManager__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier)__			if (txManager == null) {_				txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(_						this.beanFactory, PlatformTransactionManager.class, qualifier)__				this.transactionManagerCache.putIfAbsent(qualifier, txManager)__			}_			return txManager__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			PlatformTransactionManager txManager  = this.transactionManagerCache.get(this.transactionManagerBeanName)__			if (txManager == null) {_				txManager = this.beanFactory.getBean(_						this.transactionManagerBeanName, PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(this.transactionManagerBeanName, txManager)__			}_			return txManager__		}_		else {_			_			this.transactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__			return this.transactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,transaction,manager,null,this,bean,factory,null,tx,attr,null,return,this,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,qualifier,if,tx,manager,null,tx,manager,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,this,transaction,manager,cache,put,if,absent,qualifier,tx,manager,return,tx,manager,else,if,string,utils,has,text,this,transaction,manager,bean,name,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,this,transaction,manager,bean,name,if,tx,manager,null,tx,manager,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,this,transaction,manager,bean,name,tx,manager,return,tx,manager,else,this,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,return,this,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1418738700;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.beanFactory != null) {_			String qualifier = txAttr != null ? txAttr.getQualifier() : null__			if (StringUtils.hasText(qualifier)) {_				PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier)__				if (txManager == null) {_					txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(_							this.beanFactory, PlatformTransactionManager.class, qualifier)__					this.transactionManagerCache.putIfAbsent(qualifier, txManager)__				}_				return txManager__			}_			else if (StringUtils.hasText(this.transactionManagerBeanName)) {_				PlatformTransactionManager txManager = this.transactionManagerCache.get(this.transactionManagerBeanName)__				if (txManager == null) {_					txManager = this.beanFactory.getBean(_							this.transactionManagerBeanName, PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(this.transactionManagerBeanName, txManager)__				}_				return txManager__			} else {_				PlatformTransactionManager defaultTransactionManager = getTransactionManager()__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_				return defaultTransactionManager__			}_		}_		return getTransactionManager()__	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,bean,factory,null,string,qualifier,tx,attr,null,tx,attr,get,qualifier,null,if,string,utils,has,text,qualifier,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,qualifier,if,tx,manager,null,tx,manager,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,this,transaction,manager,cache,put,if,absent,qualifier,tx,manager,return,tx,manager,else,if,string,utils,has,text,this,transaction,manager,bean,name,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,this,transaction,manager,bean,name,if,tx,manager,null,tx,manager,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,this,transaction,manager,bean,name,tx,manager,return,tx,manager,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager,return,get,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1418743562;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.beanFactory != null) {_			String qualifier = txAttr != null ? txAttr.getQualifier() : null__			if (StringUtils.hasText(qualifier)) {_				PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier)__				if (txManager == null) {_					txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(_							this.beanFactory, PlatformTransactionManager.class, qualifier)__					this.transactionManagerCache.putIfAbsent(qualifier, txManager)__				}_				return txManager__			}_			else if (StringUtils.hasText(this.transactionManagerBeanName)) {_				PlatformTransactionManager txManager = this.transactionManagerCache.get(this.transactionManagerBeanName)__				if (txManager == null) {_					txManager = this.beanFactory.getBean(_							this.transactionManagerBeanName, PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(this.transactionManagerBeanName, txManager)__				}_				return txManager__			} else {_				PlatformTransactionManager defaultTransactionManager = getTransactionManager()__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_				return defaultTransactionManager__			}_		}_		return getTransactionManager()__	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,bean,factory,null,string,qualifier,tx,attr,null,tx,attr,get,qualifier,null,if,string,utils,has,text,qualifier,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,qualifier,if,tx,manager,null,tx,manager,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,this,transaction,manager,cache,put,if,absent,qualifier,tx,manager,return,tx,manager,else,if,string,utils,has,text,this,transaction,manager,bean,name,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,this,transaction,manager,bean,name,if,tx,manager,null,tx,manager,this,bean,factory,get,bean,this,transaction,manager,bean,name,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,this,transaction,manager,bean,name,tx,manager,return,tx,manager,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager,return,get,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1419784686;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		if (this.beanFactory != null) {_			String qualifier = txAttr != null ? txAttr.getQualifier() : null__			if (StringUtils.hasText(qualifier)) {_				return determineQualifiedTransactionManager(qualifier)__			}_			else if (StringUtils.hasText(this.transactionManagerBeanName)) {_				return determineQualifiedTransactionManager(this.transactionManagerBeanName)__			}_			else if (txAttr != null) { _				PlatformTransactionManager defaultTransactionManager = getTransactionManager()__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_				return defaultTransactionManager__			}_		}_		return getTransactionManager()__	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,this,bean,factory,null,string,qualifier,tx,attr,null,tx,attr,get,qualifier,null,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,if,tx,attr,null,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager,return,get,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1419787021;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = (txAttr.getQualifier() != null ?_				txAttr.getQualifier() : this.transactionManagerBeanName)__		if (StringUtils.hasText(qualifier)) {_			PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier)__			if (txManager == null) {_				txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(_						this.beanFactory, PlatformTransactionManager.class, qualifier)__				this.transactionManagerCache.putIfAbsent(qualifier, txManager)__			}_			return txManager__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(_						DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,null,tx,attr,get,qualifier,this,transaction,manager,bean,name,if,string,utils,has,text,qualifier,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,qualifier,if,tx,manager,null,tx,manager,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,this,transaction,manager,cache,put,if,absent,qualifier,tx,manager,return,tx,manager,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1419966315;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = (txAttr.getQualifier() != null ?_				txAttr.getQualifier() : this.transactionManagerBeanName)__		if (StringUtils.hasText(qualifier)) {_			PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier)__			if (txManager == null) {_				txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(_						this.beanFactory, PlatformTransactionManager.class, qualifier)__				this.transactionManagerCache.putIfAbsent(qualifier, txManager)__			}_			return txManager__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(_						DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,null,tx,attr,get,qualifier,this,transaction,manager,bean,name,if,string,utils,has,text,qualifier,platform,transaction,manager,tx,manager,this,transaction,manager,cache,get,qualifier,if,tx,manager,null,tx,manager,bean,factory,annotation,utils,qualified,bean,of,type,this,bean,factory,platform,transaction,manager,class,qualifier,this,transaction,manager,cache,put,if,absent,qualifier,tx,manager,return,tx,manager,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1420035703;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(_						DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1429542359;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(_						DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1467730834;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(_						DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1467808333;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(_						DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1469482026;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(_						DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1469487293;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(_						DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1469561374;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__				this.transactionManagerCache.putIfAbsent(_						DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1472041862;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1472044092;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1477045393;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr);1495868221;Determine the specific transaction manager to use for the given transaction.;protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}_		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;protected,platform,transaction,manager,determine,transaction,manager,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class targetClass, final InvocationCallback invocation) 			throws Throwable;1362408075;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class targetClass, final InvocationCallback invocation) 			throws Throwable;1368482696;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource);1500448076;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,nullable,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource);1502974979;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,nullable,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource);1506097334;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,nullable,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource);1508843662;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,nullable,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource);1530174524;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,nullable,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource);1530174524;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,nullable,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource);1549881943;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(@Nullable TransactionAttributeSource transactionAttributeSource) {_		this.transactionAttributeSource = transactionAttributeSource__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,nullable,transaction,attribute,source,transaction,attribute,source,this,transaction,attribute,source,transaction,attribute,source
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1328020251;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1337516454;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1338031377;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1348680642;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1356735495;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1357119239;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1362408075;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1368482696;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1385412762;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1404485123;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1413848647;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1414421272;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1418414219;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1418414460;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1418738700;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1418743562;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1419784686;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1419787021;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1419966315;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1420035703;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1429542359;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1467730834;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1467808333;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1469482026;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1469487293;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1469561374;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1472041862;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1472044092;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1477045393;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1495868221;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1496837955;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1497341397;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1498780456;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1500448076;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1502974979;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1506097334;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1508843662;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1530174524;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1530174524;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> TransactionInfo -> public String getJoinpointIdentification();1549881943;Return a String representation of this joinpoint (usually a Method call)_for use in logging.;public String getJoinpointIdentification() {_			return this.joinpointIdentification__		};return,a,string,representation,of,this,joinpoint,usually,a,method,call,for,use,in,logging;public,string,get,joinpoint,identification,return,this,joinpoint,identification
TransactionAspectSupport -> public void setBeanFactory(BeanFactory beanFactory);1328020251;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> public void setBeanFactory(BeanFactory beanFactory);1337516454;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> public void setBeanFactory(BeanFactory beanFactory);1338031377;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> public void setBeanFactory(BeanFactory beanFactory);1348680642;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> public void setBeanFactory(BeanFactory beanFactory);1357119239;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> public void setBeanFactory(BeanFactory beanFactory);1362408075;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1328020251;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1337516454;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1338031377;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1348680642;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1356735495;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1357119239;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1362408075;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1368482696;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1385412762;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1404485123;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1413848647;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1414421272;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1418414219;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1418414460;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1418738700;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1418743562;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1419784686;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1419787021;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1419966315;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1420035703;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1429542359;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1467730834;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1467808333;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1469482026;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1469487293;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1469561374;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1472041862;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1472044092;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1477045393;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void commitTransactionAfterReturning(TransactionInfo txInfo);1495868221;Execute after successful completion of call, but not after an exception was handled._Do nothing if we didn't create a transaction._@param txInfo information about the current transaction;protected void commitTransactionAfterReturning(TransactionInfo txInfo) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__		}_	};execute,after,successful,completion,of,call,but,not,after,an,exception,was,handled,do,nothing,if,we,didn,t,create,a,transaction,param,tx,info,information,about,the,current,transaction;protected,void,commit,transaction,after,returning,transaction,info,tx,info,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex);1496837955;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute != null && txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,nullable,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,null,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex);1497341397;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.hasTransaction()) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute != null && txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,nullable,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,has,transaction,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,null,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex);1498780456;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute != null && txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,nullable,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,null,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex);1500448076;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute != null && txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,nullable,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,null,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex);1502974979;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute != null && txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,nullable,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,null,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex);1506097334;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute != null && txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by rollback error", ex)__					throw err__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_				catch (Error err) {_					logger.error("Application exception overridden by commit error", ex)__					throw err__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,nullable,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,null,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,commit,error,ex,throw,err
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex);1508843662;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute != null && txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException | Error ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException | Error ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,nullable,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,null,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex);1530174524;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute != null && txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException | Error ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException | Error ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,nullable,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,null,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex);1530174524;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute != null && txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException | Error ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException | Error ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,nullable,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,null,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2
TransactionAspectSupport -> protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex);1549881943;Handle a throwable, completing the transaction._We may commit or roll back, depending on the configuration._@param txInfo information about the current transaction_@param ex throwable encountered;protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) {_		if (txInfo != null && txInfo.getTransactionStatus() != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() +_						"] after exception: " + ex)__			}_			if (txInfo.transactionAttribute != null && txInfo.transactionAttribute.rollbackOn(ex)) {_				try {_					txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException | Error ex2) {_					logger.error("Application exception overridden by rollback exception", ex)__					throw ex2__				}_			}_			else {_				_				_				try {_					txInfo.getTransactionManager().commit(txInfo.getTransactionStatus())__				}_				catch (TransactionSystemException ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					ex2.initApplicationException(ex)__					throw ex2__				}_				catch (RuntimeException | Error ex2) {_					logger.error("Application exception overridden by commit exception", ex)__					throw ex2__				}_			}_		}_	};handle,a,throwable,completing,the,transaction,we,may,commit,or,roll,back,depending,on,the,configuration,param,tx,info,information,about,the,current,transaction,param,ex,throwable,encountered;protected,void,complete,transaction,after,throwing,nullable,transaction,info,tx,info,throwable,ex,if,tx,info,null,tx,info,get,transaction,status,null,if,logger,is,trace,enabled,logger,trace,completing,transaction,for,tx,info,get,joinpoint,identification,after,exception,ex,if,tx,info,transaction,attribute,null,tx,info,transaction,attribute,rollback,on,ex,try,tx,info,get,transaction,manager,rollback,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,else,try,tx,info,get,transaction,manager,commit,tx,info,get,transaction,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,commit,exception,ex,throw,ex2
TransactionAspectSupport -> @Nullable 	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1495868221;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();@Nullable_	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;nullable,protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> @Nullable 	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1496837955;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();@Nullable_	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;nullable,protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> @Nullable 	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1497341397;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();@Nullable_	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;nullable,protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> @Nullable 	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1498780456;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();@Nullable_	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;nullable,protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> @Nullable 	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1500448076;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();@Nullable_	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;nullable,protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> @Nullable 	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1502974979;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();@Nullable_	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;nullable,protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> @Nullable 	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1506097334;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();@Nullable_	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;nullable,protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> @Nullable 	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1508843662;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();@Nullable_	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;nullable,protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> @Nullable 	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1530174524;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return the TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();@Nullable_	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,the,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;nullable,protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> @Nullable 	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1530174524;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return the TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();@Nullable_	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,the,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;nullable,protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> @Nullable 	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1549881943;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return the TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();@Nullable_	protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,the,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;nullable,protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1328020251;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1337516454;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1338031377;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1348680642;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1356735495;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1357119239;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1362408075;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1368482696;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1385412762;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1404485123;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1413848647;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1414421272;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1418414219;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1418414460;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1418738700;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1418743562;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1419784686;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1419787021;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1419966315;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1420035703;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1429542359;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1467730834;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1467808333;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1469482026;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1469487293;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1469561374;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1472041862;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1472044092;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1477045393;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1495868221;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1496837955;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected final String getTransactionManagerBeanName();1497341397;Return the name of the default transaction manager bean.;protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1385412762;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1404485123;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1413848647;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1414421272;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1418414219;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1418414460;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1418738700;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1418743562;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1419784686;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1419787021;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1419966315;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1420035703;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1429542359;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1467730834;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1467808333;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1469482026;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1469487293;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1469561374;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1472041862;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1472044092;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation) 			throws Throwable;1477045393;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;protected Object invokeWithinTransaction(Method method, Class<?> targetClass, final InvocationCallback invocation)_			throws Throwable {__		_		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass, txAttr)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;protected,object,invoke,within,transaction,method,method,class,target,class,final,invocation,callback,invocation,throws,throwable,final,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,tx,attr,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> @Override 	public void setBeanFactory(@Nullable BeanFactory beanFactory);1500448076;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(@Nullable BeanFactory beanFactory);1502974979;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(@Nullable BeanFactory beanFactory);1506097334;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(@Nullable BeanFactory beanFactory);1508843662;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(@Nullable BeanFactory beanFactory);1530174524;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(@Nullable BeanFactory beanFactory);1530174524;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> @Override 	public void setBeanFactory(@Nullable BeanFactory beanFactory);1549881943;Set the BeanFactory to use for retrieving PlatformTransactionManager beans.;@Override_	public void setBeanFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};set,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;override,public,void,set,bean,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1328020251;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The <code>TransactionInfo.hasTransaction()</code> method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's <code>isSynchronizationActive()</code>_and/or <code>isActualTransactionActive()</code> methods._@return TransactionInfo bound to this thread, or <code>null</code> if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,code,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,code,and,or,code,is,actual,transaction,active,code,methods,return,transaction,info,bound,to,this,thread,or,code,null,code,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1337516454;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The <code>TransactionInfo.hasTransaction()</code> method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's <code>isSynchronizationActive()</code>_and/or <code>isActualTransactionActive()</code> methods._@return TransactionInfo bound to this thread, or <code>null</code> if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,code,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,code,and,or,code,is,actual,transaction,active,code,methods,return,transaction,info,bound,to,this,thread,or,code,null,code,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1338031377;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The <code>TransactionInfo.hasTransaction()</code> method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's <code>isSynchronizationActive()</code>_and/or <code>isActualTransactionActive()</code> methods._@return TransactionInfo bound to this thread, or <code>null</code> if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,code,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,code,and,or,code,is,actual,transaction,active,code,methods,return,transaction,info,bound,to,this,thread,or,code,null,code,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1348680642;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The <code>TransactionInfo.hasTransaction()</code> method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's <code>isSynchronizationActive()</code>_and/or <code>isActualTransactionActive()</code> methods._@return TransactionInfo bound to this thread, or <code>null</code> if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,code,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,code,and,or,code,is,actual,transaction,active,code,methods,return,transaction,info,bound,to,this,thread,or,code,null,code,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1356735495;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1357119239;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1362408075;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1368482696;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1385412762;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1404485123;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1413848647;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1414421272;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1418414219;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1418414460;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1418738700;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1418743562;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1419784686;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1419787021;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1419966315;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1420035703;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1429542359;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1467730834;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1467808333;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1469482026;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1469487293;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1469561374;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1472041862;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1472044092;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> protected static TransactionInfo currentTransactionInfo() throws NoTransactionException;1477045393;Subclasses can use this to return the current TransactionInfo._Only subclasses that cannot handle all operations in one method,_such as an AspectJ aspect involving distinct before and after advice,_need to use this mechanism to get at the current TransactionInfo._An around advice such as an AOP Alliance MethodInterceptor can hold a_reference to the TransactionInfo throughout the aspect method._<p>A TransactionInfo will be returned even if no transaction was created._The {@code TransactionInfo.hasTransaction()} method can be used to query this._<p>To find out about specific transaction characteristics, consider using_TransactionSynchronizationManager's {@code isSynchronizationActive()}_and/or {@code isActualTransactionActive()} methods._@return TransactionInfo bound to this thread, or {@code null} if none_@see TransactionInfo#hasTransaction()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isSynchronizationActive()_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {_		return transactionInfoHolder.get()__	};subclasses,can,use,this,to,return,the,current,transaction,info,only,subclasses,that,cannot,handle,all,operations,in,one,method,such,as,an,aspect,j,aspect,involving,distinct,before,and,after,advice,need,to,use,this,mechanism,to,get,at,the,current,transaction,info,an,around,advice,such,as,an,aop,alliance,method,interceptor,can,hold,a,reference,to,the,transaction,info,throughout,the,aspect,method,p,a,transaction,info,will,be,returned,even,if,no,transaction,was,created,the,code,transaction,info,has,transaction,method,can,be,used,to,query,this,p,to,find,out,about,specific,transaction,characteristics,consider,using,transaction,synchronization,manager,s,code,is,synchronization,active,and,or,code,is,actual,transaction,active,methods,return,transaction,info,bound,to,this,thread,or,code,null,if,none,see,transaction,info,has,transaction,see,org,springframework,transaction,support,transaction,synchronization,manager,is,synchronization,active,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;protected,static,transaction,info,current,transaction,info,throws,no,transaction,exception,return,transaction,info,holder,get
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1328020251;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1337516454;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1338031377;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1348680642;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1356735495;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1357119239;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1362408075;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1368482696;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1385412762;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1404485123;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1413848647;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1414421272;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1418414219;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1418414460;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1418738700;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1418743562;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1419784686;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1419787021;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1419966315;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1420035703;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1429542359;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1467730834;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1467808333;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1469482026;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1469487293;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1469561374;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1472041862;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1472044092;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1477045393;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1495868221;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1496837955;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1497341397;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(String transactionManagerBeanName);1498780456;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1328020251;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1337516454;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1338031377;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1348680642;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1356735495;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1357119239;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1362408075;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1368482696;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1385412762;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1404485123;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1413848647;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1414421272;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1418414219;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1418414460;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1418738700;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1418743562;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1419784686;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1419787021;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1419966315;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1420035703;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1429542359;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1467730834;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1467808333;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1469482026;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1469487293;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1469561374;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1472041862;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1472044092;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1477045393;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1495868221;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1496837955;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> protected final BeanFactory getBeanFactory();1497341397;Return the BeanFactory to use for retrieving PlatformTransactionManager beans.;protected final BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,to,use,for,retrieving,platform,transaction,manager,beans;protected,final,bean,factory,get,bean,factory,return,this,bean,factory
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1328020251;Return the transaction manager, if specified.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,manager,if,specified;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1337516454;Return the transaction manager, if specified.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,manager,if,specified;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1338031377;Return the transaction manager, if specified.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,manager,if,specified;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1348680642;Return the transaction manager, if specified.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,manager,if,specified;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1356735495;Return the transaction manager, if specified.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,manager,if,specified;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1357119239;Return the transaction manager, if specified.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,manager,if,specified;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1362408075;Return the transaction manager, if specified.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,manager,if,specified;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1368482696;Return the transaction manager, if specified.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,manager,if,specified;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1385412762;Return the transaction manager, if specified.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,manager,if,specified;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1404485123;Return the transaction manager, if specified.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,manager,if,specified;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1413848647;Return the transaction manager, if specified.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,manager,if,specified;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1414421272;Return the transaction manager, if specified.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,manager,if,specified;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1418414219;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1418414460;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1418738700;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager,cache,get
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1418743562;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager,cache,get
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1419784686;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager,cache,get
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1419787021;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager,cache,get
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1419966315;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager,cache,get
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1420035703;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager,cache,get
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1429542359;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager,cache,get
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1467730834;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager,cache,get
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1467808333;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager,cache,get
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1469482026;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager,cache,get
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1469487293;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager,cache,get
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1469561374;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager,cache,get
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1472041862;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1472044092;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> public PlatformTransactionManager getTransactionManager();1477045393;Return the default transaction manager, or {@code null} if unknown.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,default,transaction,manager,or,code,null,if,unknown;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionAspectSupport -> @Nullable 	protected final String getTransactionManagerBeanName();1498780456;Return the name of the default transaction manager bean.;@Nullable_	protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;nullable,protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> @Nullable 	protected final String getTransactionManagerBeanName();1500448076;Return the name of the default transaction manager bean.;@Nullable_	protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;nullable,protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> @Nullable 	protected final String getTransactionManagerBeanName();1502974979;Return the name of the default transaction manager bean.;@Nullable_	protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;nullable,protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> @Nullable 	protected final String getTransactionManagerBeanName();1506097334;Return the name of the default transaction manager bean.;@Nullable_	protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;nullable,protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> @Nullable 	protected final String getTransactionManagerBeanName();1508843662;Return the name of the default transaction manager bean.;@Nullable_	protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;nullable,protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> @Nullable 	protected final String getTransactionManagerBeanName();1530174524;Return the name of the default transaction manager bean.;@Nullable_	protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;nullable,protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> @Nullable 	protected final String getTransactionManagerBeanName();1530174524;Return the name of the default transaction manager bean.;@Nullable_	protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;nullable,protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> @Nullable 	protected final String getTransactionManagerBeanName();1549881943;Return the name of the default transaction manager bean.;@Nullable_	protected final String getTransactionManagerBeanName() {_		return this.transactionManagerBeanName__	};return,the,name,of,the,default,transaction,manager,bean;nullable,protected,final,string,get,transaction,manager,bean,name,return,this,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1328020251;Specify the target transaction manager.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,target,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1337516454;Specify the target transaction manager.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,target,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1338031377;Specify the target transaction manager.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,target,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1348680642;Specify the target transaction manager.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,target,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1356735495;Specify the target transaction manager.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,target,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1357119239;Specify the target transaction manager.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,target,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1362408075;Specify the target transaction manager.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,target,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1368482696;Specify the target transaction manager.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,target,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1385412762;Specify the target transaction manager.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,target,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1404485123;Specify the target transaction manager.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,target,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1413848647;Specify the target transaction manager.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,target,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1414421272;Specify the target transaction manager.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,target,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1418414219;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1418414460;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1418738700;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		if (transactionManager != null) {_			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager)__		}_	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,if,transaction,manager,null,this,transaction,manager,cache,put,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1418743562;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		if (transactionManager != null) {_			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager)__		}_	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,if,transaction,manager,null,this,transaction,manager,cache,put,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1419784686;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		if (transactionManager != null) {_			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager)__		}_	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,if,transaction,manager,null,this,transaction,manager,cache,put,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1419787021;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		if (transactionManager != null) {_			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager)__		}_	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,if,transaction,manager,null,this,transaction,manager,cache,put,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1419966315;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		if (transactionManager != null) {_			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager)__		}_	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,if,transaction,manager,null,this,transaction,manager,cache,put,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1420035703;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		if (transactionManager != null) {_			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager)__		}_	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,if,transaction,manager,null,this,transaction,manager,cache,put,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1429542359;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		if (transactionManager != null) {_			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager)__		}_	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,if,transaction,manager,null,this,transaction,manager,cache,put,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1467730834;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		if (transactionManager != null) {_			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager)__		}_	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,if,transaction,manager,null,this,transaction,manager,cache,put,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1467808333;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		if (transactionManager != null) {_			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager)__		}_	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,if,transaction,manager,null,this,transaction,manager,cache,put,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1469482026;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		if (transactionManager != null) {_			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager)__		}_	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,if,transaction,manager,null,this,transaction,manager,cache,put,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1469487293;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		if (transactionManager != null) {_			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager)__		}_	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,if,transaction,manager,null,this,transaction,manager,cache,put,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1469561374;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		if (transactionManager != null) {_			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager)__		}_	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,if,transaction,manager,null,this,transaction,manager,cache,put,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1472041862;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1472044092;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1477045393;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1495868221;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1496837955;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1497341397;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(PlatformTransactionManager transactionManager);1498780456;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo);1495868221;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo);1496837955;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo);1497341397;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo);1498780456;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo);1500448076;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo);1502974979;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo);1506097334;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo);1508843662;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo);1530174524;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo);1530174524;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo);1549881943;Reset the TransactionInfo ThreadLocal._<p>Call this in all cases: exception or normal return!_@param txInfo information about the current transaction (may be {@code null});protected void cleanupTransactionInfo(@Nullable TransactionInfo txInfo) {_		if (txInfo != null) {_			txInfo.restoreThreadLocalStatus()__		}_	};reset,the,transaction,info,thread,local,p,call,this,in,all,cases,exception,or,normal,return,param,tx,info,information,about,the,current,transaction,may,be,code,null;protected,void,cleanup,transaction,info,nullable,transaction,info,tx,info,if,tx,info,null,tx,info,restore,thread,local,status
TransactionAspectSupport -> @Nullable 	protected String methodIdentification(Method method, @Nullable Class<?> targetClass);1496837955;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._<p>The default implementation returns {@code null}, indicating the_use of {@link DefaultTransactionAttribute#getDescriptor()} instead,_ending up as {@link ClassUtils#getQualifiedMethodName(Method, Class)}._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;@Nullable_	protected String methodIdentification(Method method, @Nullable Class<?> targetClass) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,p,the,default,implementation,returns,code,null,indicating,the,use,of,link,default,transaction,attribute,get,descriptor,instead,ending,up,as,link,class,utils,get,qualified,method,name,method,class,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;nullable,protected,string,method,identification,method,method,nullable,class,target,class,return,null
TransactionAspectSupport -> @Nullable 	protected String methodIdentification(Method method, @Nullable Class<?> targetClass);1497341397;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._<p>The default implementation returns {@code null}, indicating the_use of {@link DefaultTransactionAttribute#getDescriptor()} instead,_ending up as {@link ClassUtils#getQualifiedMethodName(Method, Class)}._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;@Nullable_	protected String methodIdentification(Method method, @Nullable Class<?> targetClass) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,p,the,default,implementation,returns,code,null,indicating,the,use,of,link,default,transaction,attribute,get,descriptor,instead,ending,up,as,link,class,utils,get,qualified,method,name,method,class,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;nullable,protected,string,method,identification,method,method,nullable,class,target,class,return,null
TransactionAspectSupport -> @Nullable 	protected String methodIdentification(Method method, @Nullable Class<?> targetClass);1498780456;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._<p>The default implementation returns {@code null}, indicating the_use of {@link DefaultTransactionAttribute#getDescriptor()} instead,_ending up as {@link ClassUtils#getQualifiedMethodName(Method, Class)}._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;@Nullable_	protected String methodIdentification(Method method, @Nullable Class<?> targetClass) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,p,the,default,implementation,returns,code,null,indicating,the,use,of,link,default,transaction,attribute,get,descriptor,instead,ending,up,as,link,class,utils,get,qualified,method,name,method,class,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;nullable,protected,string,method,identification,method,method,nullable,class,target,class,return,null
TransactionAspectSupport -> @Nullable 	protected String methodIdentification(Method method, @Nullable Class<?> targetClass);1500448076;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._<p>The default implementation returns {@code null}, indicating the_use of {@link DefaultTransactionAttribute#getDescriptor()} instead,_ending up as {@link ClassUtils#getQualifiedMethodName(Method, Class)}._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;@Nullable_	protected String methodIdentification(Method method, @Nullable Class<?> targetClass) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,p,the,default,implementation,returns,code,null,indicating,the,use,of,link,default,transaction,attribute,get,descriptor,instead,ending,up,as,link,class,utils,get,qualified,method,name,method,class,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;nullable,protected,string,method,identification,method,method,nullable,class,target,class,return,null
TransactionAspectSupport -> @Nullable 	protected String methodIdentification(Method method, @Nullable Class<?> targetClass);1502974979;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._<p>The default implementation returns {@code null}, indicating the_use of {@link DefaultTransactionAttribute#getDescriptor()} instead,_ending up as {@link ClassUtils#getQualifiedMethodName(Method, Class)}._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;@Nullable_	protected String methodIdentification(Method method, @Nullable Class<?> targetClass) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,p,the,default,implementation,returns,code,null,indicating,the,use,of,link,default,transaction,attribute,get,descriptor,instead,ending,up,as,link,class,utils,get,qualified,method,name,method,class,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;nullable,protected,string,method,identification,method,method,nullable,class,target,class,return,null
TransactionAspectSupport -> @Nullable 	protected String methodIdentification(Method method, @Nullable Class<?> targetClass);1506097334;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._<p>The default implementation returns {@code null}, indicating the_use of {@link DefaultTransactionAttribute#getDescriptor()} instead,_ending up as {@link ClassUtils#getQualifiedMethodName(Method, Class)}._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;@Nullable_	protected String methodIdentification(Method method, @Nullable Class<?> targetClass) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,p,the,default,implementation,returns,code,null,indicating,the,use,of,link,default,transaction,attribute,get,descriptor,instead,ending,up,as,link,class,utils,get,qualified,method,name,method,class,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;nullable,protected,string,method,identification,method,method,nullable,class,target,class,return,null
TransactionAspectSupport -> @Nullable 	protected String methodIdentification(Method method, @Nullable Class<?> targetClass);1508843662;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._<p>The default implementation returns {@code null}, indicating the_use of {@link DefaultTransactionAttribute#getDescriptor()} instead,_ending up as {@link ClassUtils#getQualifiedMethodName(Method, Class)}._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;@Nullable_	protected String methodIdentification(Method method, @Nullable Class<?> targetClass) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,p,the,default,implementation,returns,code,null,indicating,the,use,of,link,default,transaction,attribute,get,descriptor,instead,ending,up,as,link,class,utils,get,qualified,method,name,method,class,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;nullable,protected,string,method,identification,method,method,nullable,class,target,class,return,null
TransactionAspectSupport -> @Nullable 	protected String methodIdentification(Method method, @Nullable Class<?> targetClass);1530174524;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._<p>The default implementation returns {@code null}, indicating the_use of {@link DefaultTransactionAttribute#getDescriptor()} instead,_ending up as {@link ClassUtils#getQualifiedMethodName(Method, Class)}._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;@Nullable_	protected String methodIdentification(Method method, @Nullable Class<?> targetClass) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,p,the,default,implementation,returns,code,null,indicating,the,use,of,link,default,transaction,attribute,get,descriptor,instead,ending,up,as,link,class,utils,get,qualified,method,name,method,class,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;nullable,protected,string,method,identification,method,method,nullable,class,target,class,return,null
TransactionAspectSupport -> @Nullable 	protected String methodIdentification(Method method, @Nullable Class<?> targetClass);1530174524;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._<p>The default implementation returns {@code null}, indicating the_use of {@link DefaultTransactionAttribute#getDescriptor()} instead,_ending up as {@link ClassUtils#getQualifiedMethodName(Method, Class)}._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;@Nullable_	protected String methodIdentification(Method method, @Nullable Class<?> targetClass) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,p,the,default,implementation,returns,code,null,indicating,the,use,of,link,default,transaction,attribute,get,descriptor,instead,ending,up,as,link,class,utils,get,qualified,method,name,method,class,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;nullable,protected,string,method,identification,method,method,nullable,class,target,class,return,null
TransactionAspectSupport -> @Nullable 	protected String methodIdentification(Method method, @Nullable Class<?> targetClass);1549881943;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._<p>The default implementation returns {@code null}, indicating the_use of {@link DefaultTransactionAttribute#getDescriptor()} instead,_ending up as {@link ClassUtils#getQualifiedMethodName(Method, Class)}._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;@Nullable_	protected String methodIdentification(Method method, @Nullable Class<?> targetClass) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,p,the,default,implementation,returns,code,null,indicating,the,use,of,link,default,transaction,attribute,get,descriptor,instead,ending,up,as,link,class,utils,get,qualified,method,name,method,class,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;nullable,protected,string,method,identification,method,method,nullable,class,target,class,return,null
TransactionAspectSupport -> protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1328020251;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be <code>null</code>)_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The <code>hasTransaction()</code> method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,code,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,code,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1337516454;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be <code>null</code>)_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The <code>hasTransaction()</code> method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,code,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,code,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1338031377;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be <code>null</code>)_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The <code>hasTransaction()</code> method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,code,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,code,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification);1348680642;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be <code>null</code>)_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The <code>hasTransaction()</code> method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();protected TransactionInfo createTransactionIfNecessary(_			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,code,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,code,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;protected,transaction,info,create,transaction,if,necessary,platform,transaction,manager,tm,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1356735495;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1368482696;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1385412762;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1404485123;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1413848647;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1414421272;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1418414219;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1418414460;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (this.transactionManager == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,this,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1418738700;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1418743562;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1419784686;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1419787021;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1419966315;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1420035703;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1429542359;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1467730834;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1467808333;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a ListableBeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,listable,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1469482026;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a BeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1469487293;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a BeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1469561374;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a BeanFactory is required")__		}_		if (this.transactionAttributeSource == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,bean,factory,is,required,if,this,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1472041862;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && getBeanFactory() == null) {_			throw new IllegalStateException(_					"Setting the property 'transactionManager' or running in a BeanFactory is required")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,get,bean,factory,null,throw,new,illegal,state,exception,setting,the,property,transaction,manager,or,running,in,a,bean,factory,is,required,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1472044092;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1477045393;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1495868221;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1496837955;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1497341397;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1498780456;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1500448076;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1502974979;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1506097334;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1508843662;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1530174524;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1530174524;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> @Override 	public void afterPropertiesSet();1549881943;Check that required properties were set.;@Override_	public void afterPropertiesSet() {_		if (getTransactionManager() == null && this.beanFactory == null) {_			throw new IllegalStateException(_					"Set the 'transactionManager' property or make sure to run within a BeanFactory " +_					"containing a PlatformTransactionManager bean!")__		}_		if (getTransactionAttributeSource() == null) {_			throw new IllegalStateException(_					"Either 'transactionAttributeSource' or 'transactionAttributes' is required: " +_					"If there are no transactional methods, then don't use a transaction aspect.")__		}_	};check,that,required,properties,were,set;override,public,void,after,properties,set,if,get,transaction,manager,null,this,bean,factory,null,throw,new,illegal,state,exception,set,the,transaction,manager,property,or,make,sure,to,run,within,a,bean,factory,containing,a,platform,transaction,manager,bean,if,get,transaction,attribute,source,null,throw,new,illegal,state,exception,either,transaction,attribute,source,or,transaction,attributes,is,required,if,there,are,no,transactional,methods,then,don,t,use,a,transaction,aspect
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1328020251;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be <code>null</code>)_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,code,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1337516454;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be <code>null</code>)_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,code,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1338031377;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be <code>null</code>)_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,code,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1348680642;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be <code>null</code>)_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,code,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1356735495;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1357119239;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1362408075;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1368482696;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1385412762;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1404485123;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1413848647;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1414421272;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1418414219;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1418414460;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1418738700;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1418743562;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1419784686;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1419787021;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1419966315;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1420035703;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1429542359;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1467730834;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1467808333;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1469482026;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1469487293;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1469561374;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1472041862;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1472044092;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm, 			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status);1477045393;Prepare a TransactionInfo for the given attribute and status object._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@param status the TransactionStatus for the current transaction_@return the prepared TransactionInfo object;protected TransactionInfo prepareTransactionInfo(PlatformTransactionManager tm,_			TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) {__		TransactionInfo txInfo = new TransactionInfo(tm, txAttr, joinpointIdentification)__		if (txAttr != null) {_			_			if (logger.isTraceEnabled()) {_				logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]")__			}_			_			txInfo.newTransactionStatus(status)__		}_		else {_			_			_			if (logger.isTraceEnabled())_				logger.trace("Don't need to create transaction for [" + joinpointIdentification +_						"]: This method isn't transactional.")__		}__		_		_		_		txInfo.bindToThread()__		return txInfo__	};prepare,a,transaction,info,for,the,given,attribute,and,status,object,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,param,status,the,transaction,status,for,the,current,transaction,return,the,prepared,transaction,info,object;protected,transaction,info,prepare,transaction,info,platform,transaction,manager,tm,transaction,attribute,tx,attr,string,joinpoint,identification,transaction,status,status,transaction,info,tx,info,new,transaction,info,tm,tx,attr,joinpoint,identification,if,tx,attr,null,if,logger,is,trace,enabled,logger,trace,getting,transaction,for,tx,info,get,joinpoint,identification,tx,info,new,transaction,status,status,else,if,logger,is,trace,enabled,logger,trace,don,t,need,to,create,transaction,for,joinpoint,identification,this,method,isn,t,transactional,tx,info,bind,to,thread,return,tx,info
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1328020251;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1337516454;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1338031377;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1348680642;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1356735495;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1357119239;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1362408075;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1368482696;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1385412762;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1404485123;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1413848647;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1414421272;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1418414219;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1418414460;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1418738700;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1418743562;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1419784686;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1419787021;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1419966315;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1420035703;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1429542359;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1467730834;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1467808333;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1469482026;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1469487293;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1469561374;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1472041862;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1472044092;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1477045393;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> public TransactionAttributeSource getTransactionAttributeSource();1495868221;Return the transaction attribute source.;public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> @Nullable 	public TransactionAttributeSource getTransactionAttributeSource();1496837955;Return the transaction attribute source.;@Nullable_	public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;nullable,public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> @Nullable 	public TransactionAttributeSource getTransactionAttributeSource();1497341397;Return the transaction attribute source.;@Nullable_	public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;nullable,public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> @Nullable 	public TransactionAttributeSource getTransactionAttributeSource();1498780456;Return the transaction attribute source.;@Nullable_	public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;nullable,public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> @Nullable 	public TransactionAttributeSource getTransactionAttributeSource();1500448076;Return the transaction attribute source.;@Nullable_	public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;nullable,public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> @Nullable 	public TransactionAttributeSource getTransactionAttributeSource();1502974979;Return the transaction attribute source.;@Nullable_	public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;nullable,public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> @Nullable 	public TransactionAttributeSource getTransactionAttributeSource();1506097334;Return the transaction attribute source.;@Nullable_	public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;nullable,public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> @Nullable 	public TransactionAttributeSource getTransactionAttributeSource();1508843662;Return the transaction attribute source.;@Nullable_	public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;nullable,public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> @Nullable 	public TransactionAttributeSource getTransactionAttributeSource();1530174524;Return the transaction attribute source.;@Nullable_	public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;nullable,public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> @Nullable 	public TransactionAttributeSource getTransactionAttributeSource();1530174524;Return the transaction attribute source.;@Nullable_	public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;nullable,public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> @Nullable 	public TransactionAttributeSource getTransactionAttributeSource();1549881943;Return the transaction attribute source.;@Nullable_	public TransactionAttributeSource getTransactionAttributeSource() {_		return this.transactionAttributeSource__	};return,the,transaction,attribute,source;nullable,public,transaction,attribute,source,get,transaction,attribute,source,return,this,transaction,attribute,source
TransactionAspectSupport -> @Nullable 	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass, 			final InvocationCallback invocation) throws Throwable;1496837955;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;@Nullable_	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,_			final InvocationCallback invocation) throws Throwable {__		_		TransactionAttributeSource tas = getTransactionAttributeSource()__		final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass, txAttr)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,_						new TransactionCallback<Object>() {_							@Override_							public Object doInTransaction(TransactionStatus status) {_								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__								try {_									return invocation.proceedWithInvocation()__								}_								catch (Throwable ex) {_									if (txAttr.rollbackOn(ex)) {_										_										if (ex instanceof RuntimeException) {_											throw (RuntimeException) ex__										}_										else {_											throw new ThrowableHolderException(ex)__										}_									}_									else {_										_										return new ThrowableHolder(ex)__									}_								}_								finally {_									cleanupTransactionInfo(txInfo)__								}_							}_						})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;nullable,protected,object,invoke,within,transaction,method,method,nullable,class,target,class,final,invocation,callback,invocation,throws,throwable,transaction,attribute,source,tas,get,transaction,attribute,source,final,transaction,attribute,tx,attr,tas,null,tas,get,transaction,attribute,method,target,class,null,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,tx,attr,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,new,transaction,callback,object,override,public,object,do,in,transaction,transaction,status,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> @Nullable 	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass, 			final InvocationCallback invocation) throws Throwable;1497341397;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;@Nullable_	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,_			final InvocationCallback invocation) throws Throwable {__		_		TransactionAttributeSource tas = getTransactionAttributeSource()__		final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass, txAttr)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -> {_					TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__					try {_						return invocation.proceedWithInvocation()__					}_					catch (Throwable ex) {_						if (txAttr.rollbackOn(ex)) {_							_							if (ex instanceof RuntimeException) {_								throw (RuntimeException) ex__							}_							else {_								throw new ThrowableHolderException(ex)__							}_						}_						else {_							_							return new ThrowableHolder(ex)__						}_					}_					finally {_						cleanupTransactionInfo(txInfo)__					}_				})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;nullable,protected,object,invoke,within,transaction,method,method,nullable,class,target,class,final,invocation,callback,invocation,throws,throwable,transaction,attribute,source,tas,get,transaction,attribute,source,final,transaction,attribute,tx,attr,tas,null,tas,get,transaction,attribute,method,target,class,null,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,tx,attr,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> @Nullable 	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass, 			final InvocationCallback invocation) throws Throwable;1498780456;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;@Nullable_	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,_			final InvocationCallback invocation) throws Throwable {__		_		TransactionAttributeSource tas = getTransactionAttributeSource()__		final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass, txAttr)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -> {_					TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__					try {_						return invocation.proceedWithInvocation()__					}_					catch (Throwable ex) {_						if (txAttr.rollbackOn(ex)) {_							_							if (ex instanceof RuntimeException) {_								throw (RuntimeException) ex__							}_							else {_								throw new ThrowableHolderException(ex)__							}_						}_						else {_							_							return new ThrowableHolder(ex)__						}_					}_					finally {_						cleanupTransactionInfo(txInfo)__					}_				})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;nullable,protected,object,invoke,within,transaction,method,method,nullable,class,target,class,final,invocation,callback,invocation,throws,throwable,transaction,attribute,source,tas,get,transaction,attribute,source,final,transaction,attribute,tx,attr,tas,null,tas,get,transaction,attribute,method,target,class,null,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,tx,attr,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> @Nullable 	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass, 			final InvocationCallback invocation) throws Throwable;1500448076;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;@Nullable_	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,_			final InvocationCallback invocation) throws Throwable {__		_		TransactionAttributeSource tas = getTransactionAttributeSource()__		final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass, txAttr)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -> {_					TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__					try {_						return invocation.proceedWithInvocation()__					}_					catch (Throwable ex) {_						if (txAttr.rollbackOn(ex)) {_							_							if (ex instanceof RuntimeException) {_								throw (RuntimeException) ex__							}_							else {_								throw new ThrowableHolderException(ex)__							}_						}_						else {_							_							return new ThrowableHolder(ex)__						}_					}_					finally {_						cleanupTransactionInfo(txInfo)__					}_				})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;nullable,protected,object,invoke,within,transaction,method,method,nullable,class,target,class,final,invocation,callback,invocation,throws,throwable,transaction,attribute,source,tas,get,transaction,attribute,source,final,transaction,attribute,tx,attr,tas,null,tas,get,transaction,attribute,method,target,class,null,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,tx,attr,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> @Nullable 	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass, 			final InvocationCallback invocation) throws Throwable;1502974979;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;@Nullable_	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,_			final InvocationCallback invocation) throws Throwable {__		_		TransactionAttributeSource tas = getTransactionAttributeSource()__		final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass, txAttr)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -> {_					TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__					try {_						return invocation.proceedWithInvocation()__					}_					catch (Throwable ex) {_						if (txAttr.rollbackOn(ex)) {_							_							if (ex instanceof RuntimeException) {_								throw (RuntimeException) ex__							}_							else {_								throw new ThrowableHolderException(ex)__							}_						}_						else {_							_							return new ThrowableHolder(ex)__						}_					}_					finally {_						cleanupTransactionInfo(txInfo)__					}_				})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;nullable,protected,object,invoke,within,transaction,method,method,nullable,class,target,class,final,invocation,callback,invocation,throws,throwable,transaction,attribute,source,tas,get,transaction,attribute,source,final,transaction,attribute,tx,attr,tas,null,tas,get,transaction,attribute,method,target,class,null,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,tx,attr,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> @Nullable 	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass, 			final InvocationCallback invocation) throws Throwable;1506097334;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;@Nullable_	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,_			final InvocationCallback invocation) throws Throwable {__		_		TransactionAttributeSource tas = getTransactionAttributeSource()__		final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass, txAttr)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -> {_					TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__					try {_						return invocation.proceedWithInvocation()__					}_					catch (Throwable ex) {_						if (txAttr.rollbackOn(ex)) {_							_							if (ex instanceof RuntimeException) {_								throw (RuntimeException) ex__							}_							else {_								throw new ThrowableHolderException(ex)__							}_						}_						else {_							_							return new ThrowableHolder(ex)__						}_					}_					finally {_						cleanupTransactionInfo(txInfo)__					}_				})___				_				if (result instanceof ThrowableHolder) {_					throw ((ThrowableHolder) result).getThrowable()__				}_				else {_					return result__				}_			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;nullable,protected,object,invoke,within,transaction,method,method,nullable,class,target,class,final,invocation,callback,invocation,throws,throwable,transaction,attribute,source,tas,get,transaction,attribute,source,final,transaction,attribute,tx,attr,tas,null,tas,get,transaction,attribute,method,target,class,null,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,tx,attr,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,return,new,throwable,holder,ex,finally,cleanup,transaction,info,tx,info,if,result,instanceof,throwable,holder,throw,throwable,holder,result,get,throwable,else,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause
TransactionAspectSupport -> @Nullable 	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass, 			final InvocationCallback invocation) throws Throwable;1508843662;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;@Nullable_	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,_			final InvocationCallback invocation) throws Throwable {__		_		TransactionAttributeSource tas = getTransactionAttributeSource()__		final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass, txAttr)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			final ThrowableHolder throwableHolder = new ThrowableHolder()___			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -> {_					TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__					try {_						return invocation.proceedWithInvocation()__					}_					catch (Throwable ex) {_						if (txAttr.rollbackOn(ex)) {_							_							if (ex instanceof RuntimeException) {_								throw (RuntimeException) ex__							}_							else {_								throw new ThrowableHolderException(ex)__							}_						}_						else {_							_							throwableHolder.throwable = ex__							return null__						}_					}_					finally {_						cleanupTransactionInfo(txInfo)__					}_				})___				_				if (throwableHolder.throwable != null) {_					throw throwableHolder.throwable__				}_				return result__			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_			catch (TransactionSystemException ex2) {_				if (throwableHolder.throwable != null) {_					logger.error("Application exception overridden by commit exception", throwableHolder.throwable)__					ex2.initApplicationException(throwableHolder.throwable)__				}_				throw ex2__			}_			catch (Throwable ex2) {_				if (throwableHolder.throwable != null) {_					logger.error("Application exception overridden by commit exception", throwableHolder.throwable)__				}_				throw ex2__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;nullable,protected,object,invoke,within,transaction,method,method,nullable,class,target,class,final,invocation,callback,invocation,throws,throwable,transaction,attribute,source,tas,get,transaction,attribute,source,final,transaction,attribute,tx,attr,tas,null,tas,get,transaction,attribute,method,target,class,null,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,tx,attr,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,final,throwable,holder,throwable,holder,new,throwable,holder,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,throwable,holder,throwable,ex,return,null,finally,cleanup,transaction,info,tx,info,if,throwable,holder,throwable,null,throw,throwable,holder,throwable,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause,catch,transaction,system,exception,ex2,if,throwable,holder,throwable,null,logger,error,application,exception,overridden,by,commit,exception,throwable,holder,throwable,ex2,init,application,exception,throwable,holder,throwable,throw,ex2,catch,throwable,ex2,if,throwable,holder,throwable,null,logger,error,application,exception,overridden,by,commit,exception,throwable,holder,throwable,throw,ex2
TransactionAspectSupport -> @Nullable 	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass, 			final InvocationCallback invocation) throws Throwable;1530174524;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;@Nullable_	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,_			final InvocationCallback invocation) throws Throwable {__		_		TransactionAttributeSource tas = getTransactionAttributeSource()__		final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass, txAttr)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			final ThrowableHolder throwableHolder = new ThrowableHolder()___			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -> {_					TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__					try {_						return invocation.proceedWithInvocation()__					}_					catch (Throwable ex) {_						if (txAttr.rollbackOn(ex)) {_							_							if (ex instanceof RuntimeException) {_								throw (RuntimeException) ex__							}_							else {_								throw new ThrowableHolderException(ex)__							}_						}_						else {_							_							throwableHolder.throwable = ex__							return null__						}_					}_					finally {_						cleanupTransactionInfo(txInfo)__					}_				})___				_				if (throwableHolder.throwable != null) {_					throw throwableHolder.throwable__				}_				return result__			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_			catch (TransactionSystemException ex2) {_				if (throwableHolder.throwable != null) {_					logger.error("Application exception overridden by commit exception", throwableHolder.throwable)__					ex2.initApplicationException(throwableHolder.throwable)__				}_				throw ex2__			}_			catch (Throwable ex2) {_				if (throwableHolder.throwable != null) {_					logger.error("Application exception overridden by commit exception", throwableHolder.throwable)__				}_				throw ex2__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;nullable,protected,object,invoke,within,transaction,method,method,nullable,class,target,class,final,invocation,callback,invocation,throws,throwable,transaction,attribute,source,tas,get,transaction,attribute,source,final,transaction,attribute,tx,attr,tas,null,tas,get,transaction,attribute,method,target,class,null,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,tx,attr,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,final,throwable,holder,throwable,holder,new,throwable,holder,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,throwable,holder,throwable,ex,return,null,finally,cleanup,transaction,info,tx,info,if,throwable,holder,throwable,null,throw,throwable,holder,throwable,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause,catch,transaction,system,exception,ex2,if,throwable,holder,throwable,null,logger,error,application,exception,overridden,by,commit,exception,throwable,holder,throwable,ex2,init,application,exception,throwable,holder,throwable,throw,ex2,catch,throwable,ex2,if,throwable,holder,throwable,null,logger,error,application,exception,overridden,by,commit,exception,throwable,holder,throwable,throw,ex2
TransactionAspectSupport -> @Nullable 	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass, 			final InvocationCallback invocation) throws Throwable;1530174524;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;@Nullable_	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,_			final InvocationCallback invocation) throws Throwable {__		_		TransactionAttributeSource tas = getTransactionAttributeSource()__		final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass, txAttr)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)__			Object retVal = null__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}_			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			final ThrowableHolder throwableHolder = new ThrowableHolder()___			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -> {_					TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__					try {_						return invocation.proceedWithInvocation()__					}_					catch (Throwable ex) {_						if (txAttr.rollbackOn(ex)) {_							_							if (ex instanceof RuntimeException) {_								throw (RuntimeException) ex__							}_							else {_								throw new ThrowableHolderException(ex)__							}_						}_						else {_							_							throwableHolder.throwable = ex__							return null__						}_					}_					finally {_						cleanupTransactionInfo(txInfo)__					}_				})___				_				if (throwableHolder.throwable != null) {_					throw throwableHolder.throwable__				}_				return result__			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_			catch (TransactionSystemException ex2) {_				if (throwableHolder.throwable != null) {_					logger.error("Application exception overridden by commit exception", throwableHolder.throwable)__					ex2.initApplicationException(throwableHolder.throwable)__				}_				throw ex2__			}_			catch (Throwable ex2) {_				if (throwableHolder.throwable != null) {_					logger.error("Application exception overridden by commit exception", throwableHolder.throwable)__				}_				throw ex2__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;nullable,protected,object,invoke,within,transaction,method,method,nullable,class,target,class,final,invocation,callback,invocation,throws,throwable,transaction,attribute,source,tas,get,transaction,attribute,source,final,transaction,attribute,tx,attr,tas,null,tas,get,transaction,attribute,method,target,class,null,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,tx,attr,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,null,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,commit,transaction,after,returning,tx,info,return,ret,val,else,final,throwable,holder,throwable,holder,new,throwable,holder,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,return,invocation,proceed,with,invocation,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,throwable,holder,throwable,ex,return,null,finally,cleanup,transaction,info,tx,info,if,throwable,holder,throwable,null,throw,throwable,holder,throwable,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause,catch,transaction,system,exception,ex2,if,throwable,holder,throwable,null,logger,error,application,exception,overridden,by,commit,exception,throwable,holder,throwable,ex2,init,application,exception,throwable,holder,throwable,throw,ex2,catch,throwable,ex2,if,throwable,holder,throwable,null,logger,error,application,exception,overridden,by,commit,exception,throwable,holder,throwable,throw,ex2
TransactionAspectSupport -> @Nullable 	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass, 			final InvocationCallback invocation) throws Throwable;1549881943;General delegate for around-advice-based subclasses, delegating to several other template_methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager}_as well as regular {@link PlatformTransactionManager} implementations._@param method the Method being invoked_@param targetClass the target class that we're invoking the method on_@param invocation the callback to use for proceeding with the target invocation_@return the return value of the method, if any_@throws Throwable propagated from the target invocation;@Nullable_	protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,_			final InvocationCallback invocation) throws Throwable {__		_		TransactionAttributeSource tas = getTransactionAttributeSource()__		final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null)__		final PlatformTransactionManager tm = determineTransactionManager(txAttr)__		final String joinpointIdentification = methodIdentification(method, targetClass, txAttr)___		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {_			_			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification)___			Object retVal__			try {_				_				_				retVal = invocation.proceedWithInvocation()__			}_			catch (Throwable ex) {_				_				completeTransactionAfterThrowing(txInfo, ex)__				throw ex__			}_			finally {_				cleanupTransactionInfo(txInfo)__			}__			if (vavrPresent && VavrDelegate.isVavrTry(retVal)) {_				_				TransactionStatus status = txInfo.getTransactionStatus()__				if (status != null && txAttr != null) {_					retVal = VavrDelegate.evaluateTryFailure(retVal, txAttr, status)__				}_			}__			commitTransactionAfterReturning(txInfo)__			return retVal__		}__		else {_			final ThrowableHolder throwableHolder = new ThrowableHolder()___			_			try {_				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -> {_					TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__					try {_						Object retVal = invocation.proceedWithInvocation()__						if (vavrPresent && VavrDelegate.isVavrTry(retVal)) {_							_							retVal = VavrDelegate.evaluateTryFailure(retVal, txAttr, status)__						}_						return retVal__					}_					catch (Throwable ex) {_						if (txAttr.rollbackOn(ex)) {_							_							if (ex instanceof RuntimeException) {_								throw (RuntimeException) ex__							}_							else {_								throw new ThrowableHolderException(ex)__							}_						}_						else {_							_							throwableHolder.throwable = ex__							return null__						}_					}_					finally {_						cleanupTransactionInfo(txInfo)__					}_				})___				_				if (throwableHolder.throwable != null) {_					throw throwableHolder.throwable__				}_				return result__			}_			catch (ThrowableHolderException ex) {_				throw ex.getCause()__			}_			catch (TransactionSystemException ex2) {_				if (throwableHolder.throwable != null) {_					logger.error("Application exception overridden by commit exception", throwableHolder.throwable)__					ex2.initApplicationException(throwableHolder.throwable)__				}_				throw ex2__			}_			catch (Throwable ex2) {_				if (throwableHolder.throwable != null) {_					logger.error("Application exception overridden by commit exception", throwableHolder.throwable)__				}_				throw ex2__			}_		}_	};general,delegate,for,around,advice,based,subclasses,delegating,to,several,other,template,methods,on,this,class,able,to,handle,link,callback,preferring,platform,transaction,manager,as,well,as,regular,link,platform,transaction,manager,implementations,param,method,the,method,being,invoked,param,target,class,the,target,class,that,we,re,invoking,the,method,on,param,invocation,the,callback,to,use,for,proceeding,with,the,target,invocation,return,the,return,value,of,the,method,if,any,throws,throwable,propagated,from,the,target,invocation;nullable,protected,object,invoke,within,transaction,method,method,nullable,class,target,class,final,invocation,callback,invocation,throws,throwable,transaction,attribute,source,tas,get,transaction,attribute,source,final,transaction,attribute,tx,attr,tas,null,tas,get,transaction,attribute,method,target,class,null,final,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,final,string,joinpoint,identification,method,identification,method,target,class,tx,attr,if,tx,attr,null,tm,instanceof,callback,preferring,platform,transaction,manager,transaction,info,tx,info,create,transaction,if,necessary,tm,tx,attr,joinpoint,identification,object,ret,val,try,ret,val,invocation,proceed,with,invocation,catch,throwable,ex,complete,transaction,after,throwing,tx,info,ex,throw,ex,finally,cleanup,transaction,info,tx,info,if,vavr,present,vavr,delegate,is,vavr,try,ret,val,transaction,status,status,tx,info,get,transaction,status,if,status,null,tx,attr,null,ret,val,vavr,delegate,evaluate,try,failure,ret,val,tx,attr,status,commit,transaction,after,returning,tx,info,return,ret,val,else,final,throwable,holder,throwable,holder,new,throwable,holder,try,object,result,callback,preferring,platform,transaction,manager,tm,execute,tx,attr,status,transaction,info,tx,info,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status,try,object,ret,val,invocation,proceed,with,invocation,if,vavr,present,vavr,delegate,is,vavr,try,ret,val,ret,val,vavr,delegate,evaluate,try,failure,ret,val,tx,attr,status,return,ret,val,catch,throwable,ex,if,tx,attr,rollback,on,ex,if,ex,instanceof,runtime,exception,throw,runtime,exception,ex,else,throw,new,throwable,holder,exception,ex,else,throwable,holder,throwable,ex,return,null,finally,cleanup,transaction,info,tx,info,if,throwable,holder,throwable,null,throw,throwable,holder,throwable,return,result,catch,throwable,holder,exception,ex,throw,ex,get,cause,catch,transaction,system,exception,ex2,if,throwable,holder,throwable,null,logger,error,application,exception,overridden,by,commit,exception,throwable,holder,throwable,ex2,init,application,exception,throwable,holder,throwable,throw,ex2,catch,throwable,ex2,if,throwable,holder,throwable,null,logger,error,application,exception,overridden,by,commit,exception,throwable,holder,throwable,throw,ex2
TransactionAspectSupport -> @Nullable 	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr);1496837955;Determine the specific transaction manager to use for the given transaction.;@Nullable_	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}__		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;nullable,protected,platform,transaction,manager,determine,transaction,manager,nullable,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> @Nullable 	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr);1497341397;Determine the specific transaction manager to use for the given transaction.;@Nullable_	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}__		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;nullable,protected,platform,transaction,manager,determine,transaction,manager,nullable,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> @Nullable 	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr);1498780456;Determine the specific transaction manager to use for the given transaction.;@Nullable_	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}__		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(this.beanFactory, qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.beanFactory, this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;nullable,protected,platform,transaction,manager,determine,transaction,manager,nullable,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,this,bean,factory,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,bean,factory,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> @Nullable 	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr);1500448076;Determine the specific transaction manager to use for the given transaction.;@Nullable_	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}__		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(this.beanFactory, qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.beanFactory, this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;nullable,protected,platform,transaction,manager,determine,transaction,manager,nullable,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,this,bean,factory,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,bean,factory,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> @Nullable 	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr);1502974979;Determine the specific transaction manager to use for the given transaction.;@Nullable_	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}__		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(this.beanFactory, qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.beanFactory, this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;nullable,protected,platform,transaction,manager,determine,transaction,manager,nullable,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,this,bean,factory,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,bean,factory,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> @Nullable 	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr);1506097334;Determine the specific transaction manager to use for the given transaction.;@Nullable_	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}__		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(this.beanFactory, qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.beanFactory, this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;nullable,protected,platform,transaction,manager,determine,transaction,manager,nullable,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,this,bean,factory,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,bean,factory,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> @Nullable 	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr);1508843662;Determine the specific transaction manager to use for the given transaction.;@Nullable_	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}__		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(this.beanFactory, qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.beanFactory, this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;nullable,protected,platform,transaction,manager,determine,transaction,manager,nullable,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,this,bean,factory,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,bean,factory,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> @Nullable 	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr);1530174524;Determine the specific transaction manager to use for the given transaction.;@Nullable_	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}__		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(this.beanFactory, qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.beanFactory, this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;nullable,protected,platform,transaction,manager,determine,transaction,manager,nullable,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,this,bean,factory,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,bean,factory,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> @Nullable 	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr);1530174524;Determine the specific transaction manager to use for the given transaction.;@Nullable_	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}__		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(this.beanFactory, qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.beanFactory, this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;nullable,protected,platform,transaction,manager,determine,transaction,manager,nullable,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,this,bean,factory,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,bean,factory,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> @Nullable 	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr);1549881943;Determine the specific transaction manager to use for the given transaction.;@Nullable_	protected PlatformTransactionManager determineTransactionManager(@Nullable TransactionAttribute txAttr) {_		_		if (txAttr == null || this.beanFactory == null) {_			return getTransactionManager()__		}__		String qualifier = txAttr.getQualifier()__		if (StringUtils.hasText(qualifier)) {_			return determineQualifiedTransactionManager(this.beanFactory, qualifier)__		}_		else if (StringUtils.hasText(this.transactionManagerBeanName)) {_			return determineQualifiedTransactionManager(this.beanFactory, this.transactionManagerBeanName)__		}_		else {_			PlatformTransactionManager defaultTransactionManager = getTransactionManager()__			if (defaultTransactionManager == null) {_				defaultTransactionManager = this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY)__				if (defaultTransactionManager == null) {_					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class)__					this.transactionManagerCache.putIfAbsent(_							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager)__				}_			}_			return defaultTransactionManager__		}_	};determine,the,specific,transaction,manager,to,use,for,the,given,transaction;nullable,protected,platform,transaction,manager,determine,transaction,manager,nullable,transaction,attribute,tx,attr,if,tx,attr,null,this,bean,factory,null,return,get,transaction,manager,string,qualifier,tx,attr,get,qualifier,if,string,utils,has,text,qualifier,return,determine,qualified,transaction,manager,this,bean,factory,qualifier,else,if,string,utils,has,text,this,transaction,manager,bean,name,return,determine,qualified,transaction,manager,this,bean,factory,this,transaction,manager,bean,name,else,platform,transaction,manager,default,transaction,manager,get,transaction,manager,if,default,transaction,manager,null,default,transaction,manager,this,transaction,manager,cache,get,if,default,transaction,manager,null,default,transaction,manager,this,bean,factory,get,bean,platform,transaction,manager,class,this,transaction,manager,cache,put,if,absent,default,transaction,manager,return,default,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1500448076;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1502974979;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1506097334;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1508843662;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1530174524;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1530174524;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1549881943;Specify the <em>default</em> transaction manager to use to drive transactions._<p>The default transaction manager will be used if a <em>qualifier</em>_has not been declared for a given transaction or if an explicit name for the_default transaction manager bean has not been specified._@see #setTransactionManagerBeanName;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,em,default,em,transaction,manager,to,use,to,drive,transactions,p,the,default,transaction,manager,will,be,used,if,a,em,qualifier,em,has,not,been,declared,for,a,given,transaction,or,if,an,explicit,name,for,the,default,transaction,manager,bean,has,not,been,specified,see,set,transaction,manager,bean,name;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1385412762;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1404485123;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1413848647;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1414421272;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1418414219;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1418414460;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1418738700;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1418743562;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1419784686;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1419787021;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		String simpleMethodId = methodIdentification(method)__		if (simpleMethodId != null) {_			return simpleMethodId__		}_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,string,simple,method,id,method,identification,method,if,simple,method,id,null,return,simple,method,id,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1419966315;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1420035703;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1429542359;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1467730834;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1467808333;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1469482026;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1469487293;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1469561374;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1472041862;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1472044092;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName()__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,return,target,class,null,target,class,method,get,declaring,class,get,name,method,get,name
TransactionAspectSupport -> protected String methodIdentification(Method method, Class<?> targetClass);1477045393;Convenience method to return a String representation of this Method_for use in logging. Can be overridden in subclasses to provide a_different identifier for the given method._<p>The default implementation returns {@code null}, indicating the_use of {@link DefaultTransactionAttribute#getDescriptor()} instead,_ending up as {@link ClassUtils#getQualifiedMethodName(Method, Class)}._@param method the method we're interested in_@param targetClass the class that the method is being invoked on_@return a String representation identifying this method_@see org.springframework.util.ClassUtils#getQualifiedMethodName;protected String methodIdentification(Method method, Class<?> targetClass) {_		return null__	};convenience,method,to,return,a,string,representation,of,this,method,for,use,in,logging,can,be,overridden,in,subclasses,to,provide,a,different,identifier,for,the,given,method,p,the,default,implementation,returns,code,null,indicating,the,use,of,link,default,transaction,attribute,get,descriptor,instead,ending,up,as,link,class,utils,get,qualified,method,name,method,class,param,method,the,method,we,re,interested,in,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,string,representation,identifying,this,method,see,org,springframework,util,class,utils,get,qualified,method,name;protected,string,method,identification,method,method,class,target,class,return,null
TransactionAspectSupport -> public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName);1500448076;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,nullable,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName);1502974979;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,nullable,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName);1506097334;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,nullable,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName);1508843662;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,nullable,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName);1530174524;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,nullable,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName);1530174524;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,nullable,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName);1549881943;Specify the name of the default transaction manager bean.;public void setTransactionManagerBeanName(@Nullable String transactionManagerBeanName) {_		this.transactionManagerBeanName = transactionManagerBeanName__	};specify,the,name,of,the,default,transaction,manager,bean;public,void,set,transaction,manager,bean,name,nullable,string,transaction,manager,bean,name,this,transaction,manager,bean,name,transaction,manager,bean,name
TransactionAspectSupport -> protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass);1328020251;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method method about to execute_@param targetClass class the method is on_@return a TransactionInfo object, whether or not a transaction was created._The hasTransaction() method on TransactionInfo can be used to tell if there_was a transaction created._@see #getTransactionAttributeSource();protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,method,about,to,execute,param,target,class,class,the,method,is,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass);1337516454;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method method about to execute_@param targetClass class the method is on_@return a TransactionInfo object, whether or not a transaction was created._The hasTransaction() method on TransactionInfo can be used to tell if there_was a transaction created._@see #getTransactionAttributeSource();protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,method,about,to,execute,param,target,class,class,the,method,is,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass);1338031377;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method method about to execute_@param targetClass class the method is on_@return a TransactionInfo object, whether or not a transaction was created._The hasTransaction() method on TransactionInfo can be used to tell if there_was a transaction created._@see #getTransactionAttributeSource();protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,method,about,to,execute,param,target,class,class,the,method,is,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass);1348680642;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The <code>hasTransaction()</code> method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,code,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass);1356735495;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass);1357119239;Create a transaction if necessary, based on the given method and class._<p>Performs a default TransactionAttribute lookup for the given method._@param method the method about to execute_@param targetClass the class that the method is being invoked on_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass) {_		_		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass)__		PlatformTransactionManager tm = determineTransactionManager(txAttr)__		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass))__	};create,a,transaction,if,necessary,based,on,the,given,method,and,class,p,performs,a,default,transaction,attribute,lookup,for,the,given,method,param,method,the,method,about,to,execute,param,target,class,the,class,that,the,method,is,being,invoked,on,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;protected,transaction,info,create,transaction,if,necessary,method,method,class,target,class,transaction,attribute,tx,attr,get,transaction,attribute,source,get,transaction,attribute,method,target,class,platform,transaction,manager,tm,determine,transaction,manager,tx,attr,return,create,transaction,if,necessary,tm,tx,attr,method,identification,method,target,class
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, final String joinpointIdentification);1496837955;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, final String joinpointIdentification);1497341397;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, final String joinpointIdentification);1498780456;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, final String joinpointIdentification);1500448076;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, final String joinpointIdentification);1502974979;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				@Nullable_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,nullable,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, final String joinpointIdentification);1506097334;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, final String joinpointIdentification);1508843662;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, final String joinpointIdentification);1530174524;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, final String joinpointIdentification);1530174524;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
TransactionAspectSupport -> @SuppressWarnings("serial") 	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm, 			@Nullable TransactionAttribute txAttr, final String joinpointIdentification);1549881943;Create a transaction if necessary based on the given TransactionAttribute._<p>Allows callers to perform custom TransactionAttribute lookups through_the TransactionAttributeSource._@param txAttr the TransactionAttribute (may be {@code null})_@param joinpointIdentification the fully qualified method name_(used for monitoring and logging purposes)_@return a TransactionInfo object, whether or not a transaction was created._The {@code hasTransaction()} method on TransactionInfo can be used to_tell if there was a transaction created._@see #getTransactionAttributeSource();@SuppressWarnings("serial")_	protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,_			@Nullable TransactionAttribute txAttr, final String joinpointIdentification) {__		_		if (txAttr != null && txAttr.getName() == null) {_			txAttr = new DelegatingTransactionAttribute(txAttr) {_				@Override_				public String getName() {_					return joinpointIdentification__				}_			}__		}__		TransactionStatus status = null__		if (txAttr != null) {_			if (tm != null) {_				status = tm.getTransaction(txAttr)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +_							"] because no transaction manager has been configured")__				}_			}_		}_		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status)__	};create,a,transaction,if,necessary,based,on,the,given,transaction,attribute,p,allows,callers,to,perform,custom,transaction,attribute,lookups,through,the,transaction,attribute,source,param,tx,attr,the,transaction,attribute,may,be,code,null,param,joinpoint,identification,the,fully,qualified,method,name,used,for,monitoring,and,logging,purposes,return,a,transaction,info,object,whether,or,not,a,transaction,was,created,the,code,has,transaction,method,on,transaction,info,can,be,used,to,tell,if,there,was,a,transaction,created,see,get,transaction,attribute,source;suppress,warnings,serial,protected,transaction,info,create,transaction,if,necessary,nullable,platform,transaction,manager,tm,nullable,transaction,attribute,tx,attr,final,string,joinpoint,identification,if,tx,attr,null,tx,attr,get,name,null,tx,attr,new,delegating,transaction,attribute,tx,attr,override,public,string,get,name,return,joinpoint,identification,transaction,status,status,null,if,tx,attr,null,if,tm,null,status,tm,get,transaction,tx,attr,else,if,logger,is,debug,enabled,logger,debug,skipping,transactional,joinpoint,joinpoint,identification,because,no,transaction,manager,has,been,configured,return,prepare,transaction,info,tm,tx,attr,joinpoint,identification,status
