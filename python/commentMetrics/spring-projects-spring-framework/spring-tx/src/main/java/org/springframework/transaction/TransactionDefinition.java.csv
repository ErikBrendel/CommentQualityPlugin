# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionDefinition -> int getPropagationBehavior()_;1328020251;Return the propagation behavior._<p>Must return one of the <code>PROPAGATION_XXX</code> constants_defined on {@link TransactionDefinition this interface}._@return the propagation behavior_@see #PROPAGATION_REQUIRED_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();int getPropagationBehavior()_;return,the,propagation,behavior,p,must,return,one,of,the,code,code,constants,defined,on,link,transaction,definition,this,interface,return,the,propagation,behavior,see,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;int,get,propagation,behavior
TransactionDefinition -> int getPropagationBehavior()_;1356735495;Return the propagation behavior._<p>Must return one of the {@code PROPAGATION_XXX} constants_defined on {@link TransactionDefinition this interface}._@return the propagation behavior_@see #PROPAGATION_REQUIRED_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();int getPropagationBehavior()_;return,the,propagation,behavior,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,return,the,propagation,behavior,see,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;int,get,propagation,behavior
TransactionDefinition -> int getPropagationBehavior()_;1438003976;Return the propagation behavior._<p>Must return one of the {@code PROPAGATION_XXX} constants_defined on {@link TransactionDefinition this interface}._@return the propagation behavior_@see #PROPAGATION_REQUIRED_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();int getPropagationBehavior()_;return,the,propagation,behavior,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,return,the,propagation,behavior,see,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;int,get,propagation,behavior
TransactionDefinition -> int getPropagationBehavior()_;1488529786;Return the propagation behavior._<p>Must return one of the {@code PROPAGATION_XXX} constants_defined on {@link TransactionDefinition this interface}._@return the propagation behavior_@see #PROPAGATION_REQUIRED_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();int getPropagationBehavior()_;return,the,propagation,behavior,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,return,the,propagation,behavior,see,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;int,get,propagation,behavior
TransactionDefinition -> int getPropagationBehavior()_;1495868221;Return the propagation behavior._<p>Must return one of the {@code PROPAGATION_XXX} constants_defined on {@link TransactionDefinition this interface}._@return the propagation behavior_@see #PROPAGATION_REQUIRED_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();int getPropagationBehavior()_;return,the,propagation,behavior,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,return,the,propagation,behavior,see,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;int,get,propagation,behavior
TransactionDefinition -> int getPropagationBehavior()_;1517867503;Return the propagation behavior._<p>Must return one of the {@code PROPAGATION_XXX} constants_defined on {@link TransactionDefinition this interface}._@return the propagation behavior_@see #PROPAGATION_REQUIRED_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();int getPropagationBehavior()_;return,the,propagation,behavior,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,return,the,propagation,behavior,see,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;int,get,propagation,behavior
TransactionDefinition -> int getPropagationBehavior()_;1528737477;Return the propagation behavior._<p>Must return one of the {@code PROPAGATION_XXX} constants_defined on {@link TransactionDefinition this interface}._@return the propagation behavior_@see #PROPAGATION_REQUIRED_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();int getPropagationBehavior()_;return,the,propagation,behavior,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,return,the,propagation,behavior,see,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;int,get,propagation,behavior
TransactionDefinition -> int getPropagationBehavior()_;1548712211;Return the propagation behavior._<p>Must return one of the {@code PROPAGATION_XXX} constants_defined on {@link TransactionDefinition this interface}._@return the propagation behavior_@see #PROPAGATION_REQUIRED_@see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive();int getPropagationBehavior()_;return,the,propagation,behavior,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,return,the,propagation,behavior,see,see,org,springframework,transaction,support,transaction,synchronization,manager,is,actual,transaction,active;int,get,propagation,behavior
TransactionDefinition -> @Nullable 	String getName()_;1495868221;Return the name of this transaction. Can be {@code null}._<p>This will be used as the transaction name to be shown in a_transaction monitor, if applicable (for example, WebLogic's)._<p>In case of Spring's declarative transactions, the exposed name will be_the {@code fully-qualified class name + "." + method name} (by default)._@return the name of this transaction_@see org.springframework.transaction.interceptor.TransactionAspectSupport_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionName();@Nullable_	String getName()_;return,the,name,of,this,transaction,can,be,code,null,p,this,will,be,used,as,the,transaction,name,to,be,shown,in,a,transaction,monitor,if,applicable,for,example,web,logic,s,p,in,case,of,spring,s,declarative,transactions,the,exposed,name,will,be,the,code,fully,qualified,class,name,method,name,by,default,return,the,name,of,this,transaction,see,org,springframework,transaction,interceptor,transaction,aspect,support,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,name;nullable,string,get,name
TransactionDefinition -> @Nullable 	String getName()_;1517867503;Return the name of this transaction. Can be {@code null}._<p>This will be used as the transaction name to be shown in a_transaction monitor, if applicable (for example, WebLogic's)._<p>In case of Spring's declarative transactions, the exposed name will be_the {@code fully-qualified class name + "." + method name} (by default)._@return the name of this transaction_@see org.springframework.transaction.interceptor.TransactionAspectSupport_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionName();@Nullable_	String getName()_;return,the,name,of,this,transaction,can,be,code,null,p,this,will,be,used,as,the,transaction,name,to,be,shown,in,a,transaction,monitor,if,applicable,for,example,web,logic,s,p,in,case,of,spring,s,declarative,transactions,the,exposed,name,will,be,the,code,fully,qualified,class,name,method,name,by,default,return,the,name,of,this,transaction,see,org,springframework,transaction,interceptor,transaction,aspect,support,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,name;nullable,string,get,name
TransactionDefinition -> @Nullable 	String getName()_;1528737477;Return the name of this transaction. Can be {@code null}._<p>This will be used as the transaction name to be shown in a_transaction monitor, if applicable (for example, WebLogic's)._<p>In case of Spring's declarative transactions, the exposed name will be_the {@code fully-qualified class name + "." + method name} (by default)._@return the name of this transaction_@see org.springframework.transaction.interceptor.TransactionAspectSupport_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionName();@Nullable_	String getName()_;return,the,name,of,this,transaction,can,be,code,null,p,this,will,be,used,as,the,transaction,name,to,be,shown,in,a,transaction,monitor,if,applicable,for,example,web,logic,s,p,in,case,of,spring,s,declarative,transactions,the,exposed,name,will,be,the,code,fully,qualified,class,name,method,name,by,default,return,the,name,of,this,transaction,see,org,springframework,transaction,interceptor,transaction,aspect,support,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,name;nullable,string,get,name
TransactionDefinition -> @Nullable 	String getName()_;1548712211;Return the name of this transaction. Can be {@code null}._<p>This will be used as the transaction name to be shown in a_transaction monitor, if applicable (for example, WebLogic's)._<p>In case of Spring's declarative transactions, the exposed name will be_the {@code fully-qualified class name + "." + method name} (by default)._@return the name of this transaction_@see org.springframework.transaction.interceptor.TransactionAspectSupport_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionName();@Nullable_	String getName()_;return,the,name,of,this,transaction,can,be,code,null,p,this,will,be,used,as,the,transaction,name,to,be,shown,in,a,transaction,monitor,if,applicable,for,example,web,logic,s,p,in,case,of,spring,s,declarative,transactions,the,exposed,name,will,be,the,code,fully,qualified,class,name,method,name,by,default,return,the,name,of,this,transaction,see,org,springframework,transaction,interceptor,transaction,aspect,support,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,name;nullable,string,get,name
TransactionDefinition -> int getIsolationLevel()_;1328020251;Return the isolation level._<p>Must return one of the <code>ISOLATION_XXX</code> constants_defined on {@link TransactionDefinition this interface}._<p>Only makes sense in combination with {@link #PROPAGATION_REQUIRED}_or {@link #PROPAGATION_REQUIRES_NEW}._<p>Note that a transaction manager that does not support custom isolation levels_will throw an exception when given any other level than {@link #ISOLATION_DEFAULT}._@return the isolation level;int getIsolationLevel()_;return,the,isolation,level,p,must,return,one,of,the,code,code,constants,defined,on,link,transaction,definition,this,interface,p,only,makes,sense,in,combination,with,link,or,link,p,note,that,a,transaction,manager,that,does,not,support,custom,isolation,levels,will,throw,an,exception,when,given,any,other,level,than,link,return,the,isolation,level;int,get,isolation,level
TransactionDefinition -> int getIsolationLevel()_;1356735495;Return the isolation level._<p>Must return one of the {@code ISOLATION_XXX} constants_defined on {@link TransactionDefinition this interface}._<p>Only makes sense in combination with {@link #PROPAGATION_REQUIRED}_or {@link #PROPAGATION_REQUIRES_NEW}._<p>Note that a transaction manager that does not support custom isolation levels_will throw an exception when given any other level than {@link #ISOLATION_DEFAULT}._@return the isolation level;int getIsolationLevel()_;return,the,isolation,level,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,p,only,makes,sense,in,combination,with,link,or,link,p,note,that,a,transaction,manager,that,does,not,support,custom,isolation,levels,will,throw,an,exception,when,given,any,other,level,than,link,return,the,isolation,level;int,get,isolation,level
TransactionDefinition -> int getIsolationLevel()_;1438003976;Return the isolation level._<p>Must return one of the {@code ISOLATION_XXX} constants_defined on {@link TransactionDefinition this interface}._<p>Only makes sense in combination with {@link #PROPAGATION_REQUIRED}_or {@link #PROPAGATION_REQUIRES_NEW}._<p>Note that a transaction manager that does not support custom isolation levels_will throw an exception when given any other level than {@link #ISOLATION_DEFAULT}._@return the isolation level;int getIsolationLevel()_;return,the,isolation,level,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,p,only,makes,sense,in,combination,with,link,or,link,p,note,that,a,transaction,manager,that,does,not,support,custom,isolation,levels,will,throw,an,exception,when,given,any,other,level,than,link,return,the,isolation,level;int,get,isolation,level
TransactionDefinition -> int getIsolationLevel()_;1488529786;Return the isolation level._<p>Must return one of the {@code ISOLATION_XXX} constants_defined on {@link TransactionDefinition this interface}._<p>Only makes sense in combination with {@link #PROPAGATION_REQUIRED}_or {@link #PROPAGATION_REQUIRES_NEW}._<p>Note that a transaction manager that does not support custom isolation levels_will throw an exception when given any other level than {@link #ISOLATION_DEFAULT}._@return the isolation level;int getIsolationLevel()_;return,the,isolation,level,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,p,only,makes,sense,in,combination,with,link,or,link,p,note,that,a,transaction,manager,that,does,not,support,custom,isolation,levels,will,throw,an,exception,when,given,any,other,level,than,link,return,the,isolation,level;int,get,isolation,level
TransactionDefinition -> int getIsolationLevel()_;1495868221;Return the isolation level._<p>Must return one of the {@code ISOLATION_XXX} constants_defined on {@link TransactionDefinition this interface}._<p>Only makes sense in combination with {@link #PROPAGATION_REQUIRED}_or {@link #PROPAGATION_REQUIRES_NEW}._<p>Note that a transaction manager that does not support custom isolation levels_will throw an exception when given any other level than {@link #ISOLATION_DEFAULT}._@return the isolation level;int getIsolationLevel()_;return,the,isolation,level,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,p,only,makes,sense,in,combination,with,link,or,link,p,note,that,a,transaction,manager,that,does,not,support,custom,isolation,levels,will,throw,an,exception,when,given,any,other,level,than,link,return,the,isolation,level;int,get,isolation,level
TransactionDefinition -> int getIsolationLevel()_;1517867503;Return the isolation level._<p>Must return one of the {@code ISOLATION_XXX} constants defined on_{@link TransactionDefinition this interface}. Those constants are designed_to match the values of the same constants on {@link java.sql.Connection}._<p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or_{@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started_transactions. Consider switching the "validateExistingTransactions" flag to_"true" on your transaction manager if you'd like isolation level declarations_to get rejected when participating in an existing transaction with a different_isolation level._<p>Note that a transaction manager that does not support custom isolation levels_will throw an exception when given any other level than {@link #ISOLATION_DEFAULT}._@return the isolation level_@see #ISOLATION_DEFAULT_@see org.springframework.transaction.support.AbstractPlatformTransactionManager#setValidateExistingTransaction;int getIsolationLevel()_;return,the,isolation,level,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,those,constants,are,designed,to,match,the,values,of,the,same,constants,on,link,java,sql,connection,p,exclusively,designed,for,use,with,link,or,link,since,it,only,applies,to,newly,started,transactions,consider,switching,the,validate,existing,transactions,flag,to,true,on,your,transaction,manager,if,you,d,like,isolation,level,declarations,to,get,rejected,when,participating,in,an,existing,transaction,with,a,different,isolation,level,p,note,that,a,transaction,manager,that,does,not,support,custom,isolation,levels,will,throw,an,exception,when,given,any,other,level,than,link,return,the,isolation,level,see,see,org,springframework,transaction,support,abstract,platform,transaction,manager,set,validate,existing,transaction;int,get,isolation,level
TransactionDefinition -> int getIsolationLevel()_;1528737477;Return the isolation level._<p>Must return one of the {@code ISOLATION_XXX} constants defined on_{@link TransactionDefinition this interface}. Those constants are designed_to match the values of the same constants on {@link java.sql.Connection}._<p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or_{@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started_transactions. Consider switching the "validateExistingTransactions" flag to_"true" on your transaction manager if you'd like isolation level declarations_to get rejected when participating in an existing transaction with a different_isolation level._<p>Note that a transaction manager that does not support custom isolation levels_will throw an exception when given any other level than {@link #ISOLATION_DEFAULT}._@return the isolation level_@see #ISOLATION_DEFAULT_@see org.springframework.transaction.support.AbstractPlatformTransactionManager#setValidateExistingTransaction;int getIsolationLevel()_;return,the,isolation,level,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,those,constants,are,designed,to,match,the,values,of,the,same,constants,on,link,java,sql,connection,p,exclusively,designed,for,use,with,link,or,link,since,it,only,applies,to,newly,started,transactions,consider,switching,the,validate,existing,transactions,flag,to,true,on,your,transaction,manager,if,you,d,like,isolation,level,declarations,to,get,rejected,when,participating,in,an,existing,transaction,with,a,different,isolation,level,p,note,that,a,transaction,manager,that,does,not,support,custom,isolation,levels,will,throw,an,exception,when,given,any,other,level,than,link,return,the,isolation,level,see,see,org,springframework,transaction,support,abstract,platform,transaction,manager,set,validate,existing,transaction;int,get,isolation,level
TransactionDefinition -> int getIsolationLevel()_;1548712211;Return the isolation level._<p>Must return one of the {@code ISOLATION_XXX} constants defined on_{@link TransactionDefinition this interface}. Those constants are designed_to match the values of the same constants on {@link java.sql.Connection}._<p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or_{@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started_transactions. Consider switching the "validateExistingTransactions" flag to_"true" on your transaction manager if you'd like isolation level declarations_to get rejected when participating in an existing transaction with a different_isolation level._<p>Note that a transaction manager that does not support custom isolation levels_will throw an exception when given any other level than {@link #ISOLATION_DEFAULT}._@return the isolation level_@see #ISOLATION_DEFAULT_@see org.springframework.transaction.support.AbstractPlatformTransactionManager#setValidateExistingTransaction;int getIsolationLevel()_;return,the,isolation,level,p,must,return,one,of,the,code,constants,defined,on,link,transaction,definition,this,interface,those,constants,are,designed,to,match,the,values,of,the,same,constants,on,link,java,sql,connection,p,exclusively,designed,for,use,with,link,or,link,since,it,only,applies,to,newly,started,transactions,consider,switching,the,validate,existing,transactions,flag,to,true,on,your,transaction,manager,if,you,d,like,isolation,level,declarations,to,get,rejected,when,participating,in,an,existing,transaction,with,a,different,isolation,level,p,note,that,a,transaction,manager,that,does,not,support,custom,isolation,levels,will,throw,an,exception,when,given,any,other,level,than,link,return,the,isolation,level,see,see,org,springframework,transaction,support,abstract,platform,transaction,manager,set,validate,existing,transaction;int,get,isolation,level
TransactionDefinition -> boolean isReadOnly()_;1328020251;Return whether to optimize as a read-only transaction._<p>The read-only flag applies to any transaction context, whether_backed by an actual resource transaction_({@link #PROPAGATION_REQUIRED}/{@link #PROPAGATION_REQUIRES_NEW}) or_operating non-transactionally at the resource level_({@link #PROPAGATION_SUPPORTS}). In the latter case, the flag will_only apply to managed resources within the application, such as a_Hibernate <code>Session</code>._<<	 * <p>This just serves as a hint for the actual transaction subsystem__it will <i>not necessarily</i> cause failure of write access attempts._A transaction manager which cannot interpret the read-only hint will_<i>not</i> throw an exception when asked for a read-only transaction._@return <code>true</code> if the transaction is to be optimized as read-only_@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit(boolean)_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();boolean isReadOnly()_;return,whether,to,optimize,as,a,read,only,transaction,p,the,read,only,flag,applies,to,any,transaction,context,whether,backed,by,an,actual,resource,transaction,link,link,or,operating,non,transactionally,at,the,resource,level,link,in,the,latter,case,the,flag,will,only,apply,to,managed,resources,within,the,application,such,as,a,hibernate,code,session,code,p,this,just,serves,as,a,hint,for,the,actual,transaction,subsystem,it,will,i,not,necessarily,i,cause,failure,of,write,access,attempts,a,transaction,manager,which,cannot,interpret,the,read,only,hint,will,i,not,i,throw,an,exception,when,asked,for,a,read,only,transaction,return,code,true,code,if,the,transaction,is,to,be,optimized,as,read,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit,boolean,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;boolean,is,read,only
TransactionDefinition -> boolean isReadOnly()_;1356735495;Return whether to optimize as a read-only transaction._<p>The read-only flag applies to any transaction context, whether_backed by an actual resource transaction_({@link #PROPAGATION_REQUIRED}/{@link #PROPAGATION_REQUIRES_NEW}) or_operating non-transactionally at the resource level_({@link #PROPAGATION_SUPPORTS}). In the latter case, the flag will_only apply to managed resources within the application, such as a_Hibernate {@code Session}._<<	 * <p>This just serves as a hint for the actual transaction subsystem__it will <i>not necessarily</i> cause failure of write access attempts._A transaction manager which cannot interpret the read-only hint will_<i>not</i> throw an exception when asked for a read-only transaction._@return {@code true} if the transaction is to be optimized as read-only_@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit(boolean)_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();boolean isReadOnly()_;return,whether,to,optimize,as,a,read,only,transaction,p,the,read,only,flag,applies,to,any,transaction,context,whether,backed,by,an,actual,resource,transaction,link,link,or,operating,non,transactionally,at,the,resource,level,link,in,the,latter,case,the,flag,will,only,apply,to,managed,resources,within,the,application,such,as,a,hibernate,code,session,p,this,just,serves,as,a,hint,for,the,actual,transaction,subsystem,it,will,i,not,necessarily,i,cause,failure,of,write,access,attempts,a,transaction,manager,which,cannot,interpret,the,read,only,hint,will,i,not,i,throw,an,exception,when,asked,for,a,read,only,transaction,return,code,true,if,the,transaction,is,to,be,optimized,as,read,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit,boolean,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;boolean,is,read,only
TransactionDefinition -> boolean isReadOnly()_;1438003976;Return whether to optimize as a read-only transaction._<p>The read-only flag applies to any transaction context, whether_backed by an actual resource transaction_({@link #PROPAGATION_REQUIRED}/{@link #PROPAGATION_REQUIRES_NEW}) or_operating non-transactionally at the resource level_({@link #PROPAGATION_SUPPORTS}). In the latter case, the flag will_only apply to managed resources within the application, such as a_Hibernate {@code Session}._<<	 * <p>This just serves as a hint for the actual transaction subsystem__it will <i>not necessarily</i> cause failure of write access attempts._A transaction manager which cannot interpret the read-only hint will_<i>not</i> throw an exception when asked for a read-only transaction._@return {@code true} if the transaction is to be optimized as read-only_@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit(boolean)_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();boolean isReadOnly()_;return,whether,to,optimize,as,a,read,only,transaction,p,the,read,only,flag,applies,to,any,transaction,context,whether,backed,by,an,actual,resource,transaction,link,link,or,operating,non,transactionally,at,the,resource,level,link,in,the,latter,case,the,flag,will,only,apply,to,managed,resources,within,the,application,such,as,a,hibernate,code,session,p,this,just,serves,as,a,hint,for,the,actual,transaction,subsystem,it,will,i,not,necessarily,i,cause,failure,of,write,access,attempts,a,transaction,manager,which,cannot,interpret,the,read,only,hint,will,i,not,i,throw,an,exception,when,asked,for,a,read,only,transaction,return,code,true,if,the,transaction,is,to,be,optimized,as,read,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit,boolean,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;boolean,is,read,only
TransactionDefinition -> boolean isReadOnly()_;1488529786;Return whether to optimize as a read-only transaction._<p>The read-only flag applies to any transaction context, whether_backed by an actual resource transaction_({@link #PROPAGATION_REQUIRED}/{@link #PROPAGATION_REQUIRES_NEW}) or_operating non-transactionally at the resource level_({@link #PROPAGATION_SUPPORTS}). In the latter case, the flag will_only apply to managed resources within the application, such as a_Hibernate {@code Session}._<p>This just serves as a hint for the actual transaction subsystem__it will <i>not necessarily</i> cause failure of write access attempts._A transaction manager which cannot interpret the read-only hint will_<i>not</i> throw an exception when asked for a read-only transaction._@return {@code true} if the transaction is to be optimized as read-only_@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit(boolean)_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();boolean isReadOnly()_;return,whether,to,optimize,as,a,read,only,transaction,p,the,read,only,flag,applies,to,any,transaction,context,whether,backed,by,an,actual,resource,transaction,link,link,or,operating,non,transactionally,at,the,resource,level,link,in,the,latter,case,the,flag,will,only,apply,to,managed,resources,within,the,application,such,as,a,hibernate,code,session,p,this,just,serves,as,a,hint,for,the,actual,transaction,subsystem,it,will,i,not,necessarily,i,cause,failure,of,write,access,attempts,a,transaction,manager,which,cannot,interpret,the,read,only,hint,will,i,not,i,throw,an,exception,when,asked,for,a,read,only,transaction,return,code,true,if,the,transaction,is,to,be,optimized,as,read,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit,boolean,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;boolean,is,read,only
TransactionDefinition -> boolean isReadOnly()_;1495868221;Return whether to optimize as a read-only transaction._<p>The read-only flag applies to any transaction context, whether_backed by an actual resource transaction_({@link #PROPAGATION_REQUIRED}/{@link #PROPAGATION_REQUIRES_NEW}) or_operating non-transactionally at the resource level_({@link #PROPAGATION_SUPPORTS}). In the latter case, the flag will_only apply to managed resources within the application, such as a_Hibernate {@code Session}._<p>This just serves as a hint for the actual transaction subsystem__it will <i>not necessarily</i> cause failure of write access attempts._A transaction manager which cannot interpret the read-only hint will_<i>not</i> throw an exception when asked for a read-only transaction._@return {@code true} if the transaction is to be optimized as read-only_@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit(boolean)_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();boolean isReadOnly()_;return,whether,to,optimize,as,a,read,only,transaction,p,the,read,only,flag,applies,to,any,transaction,context,whether,backed,by,an,actual,resource,transaction,link,link,or,operating,non,transactionally,at,the,resource,level,link,in,the,latter,case,the,flag,will,only,apply,to,managed,resources,within,the,application,such,as,a,hibernate,code,session,p,this,just,serves,as,a,hint,for,the,actual,transaction,subsystem,it,will,i,not,necessarily,i,cause,failure,of,write,access,attempts,a,transaction,manager,which,cannot,interpret,the,read,only,hint,will,i,not,i,throw,an,exception,when,asked,for,a,read,only,transaction,return,code,true,if,the,transaction,is,to,be,optimized,as,read,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit,boolean,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;boolean,is,read,only
TransactionDefinition -> boolean isReadOnly()_;1517867503;Return whether to optimize as a read-only transaction._<p>The read-only flag applies to any transaction context, whether backed_by an actual resource transaction ({@link #PROPAGATION_REQUIRED}/_{@link #PROPAGATION_REQUIRES_NEW}) or operating non-transactionally at_the resource level ({@link #PROPAGATION_SUPPORTS}). In the latter case,_the flag will only apply to managed resources within the application,_such as a Hibernate {@code Session}._<p>This just serves as a hint for the actual transaction subsystem__it will <i>not necessarily</i> cause failure of write access attempts._A transaction manager which cannot interpret the read-only hint will_<i>not</i> throw an exception when asked for a read-only transaction._@return {@code true} if the transaction is to be optimized as read-only_@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit(boolean)_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();boolean isReadOnly()_;return,whether,to,optimize,as,a,read,only,transaction,p,the,read,only,flag,applies,to,any,transaction,context,whether,backed,by,an,actual,resource,transaction,link,link,or,operating,non,transactionally,at,the,resource,level,link,in,the,latter,case,the,flag,will,only,apply,to,managed,resources,within,the,application,such,as,a,hibernate,code,session,p,this,just,serves,as,a,hint,for,the,actual,transaction,subsystem,it,will,i,not,necessarily,i,cause,failure,of,write,access,attempts,a,transaction,manager,which,cannot,interpret,the,read,only,hint,will,i,not,i,throw,an,exception,when,asked,for,a,read,only,transaction,return,code,true,if,the,transaction,is,to,be,optimized,as,read,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit,boolean,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;boolean,is,read,only
TransactionDefinition -> boolean isReadOnly()_;1528737477;Return whether to optimize as a read-only transaction._<p>The read-only flag applies to any transaction context, whether backed_by an actual resource transaction ({@link #PROPAGATION_REQUIRED}/_{@link #PROPAGATION_REQUIRES_NEW}) or operating non-transactionally at_the resource level ({@link #PROPAGATION_SUPPORTS}). In the latter case,_the flag will only apply to managed resources within the application,_such as a Hibernate {@code Session}._<p>This just serves as a hint for the actual transaction subsystem__it will <i>not necessarily</i> cause failure of write access attempts._A transaction manager which cannot interpret the read-only hint will_<i>not</i> throw an exception when asked for a read-only transaction._@return {@code true} if the transaction is to be optimized as read-only_@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit(boolean)_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();boolean isReadOnly()_;return,whether,to,optimize,as,a,read,only,transaction,p,the,read,only,flag,applies,to,any,transaction,context,whether,backed,by,an,actual,resource,transaction,link,link,or,operating,non,transactionally,at,the,resource,level,link,in,the,latter,case,the,flag,will,only,apply,to,managed,resources,within,the,application,such,as,a,hibernate,code,session,p,this,just,serves,as,a,hint,for,the,actual,transaction,subsystem,it,will,i,not,necessarily,i,cause,failure,of,write,access,attempts,a,transaction,manager,which,cannot,interpret,the,read,only,hint,will,i,not,i,throw,an,exception,when,asked,for,a,read,only,transaction,return,code,true,if,the,transaction,is,to,be,optimized,as,read,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit,boolean,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;boolean,is,read,only
TransactionDefinition -> boolean isReadOnly()_;1548712211;Return whether to optimize as a read-only transaction._<p>The read-only flag applies to any transaction context, whether backed_by an actual resource transaction ({@link #PROPAGATION_REQUIRED}/_{@link #PROPAGATION_REQUIRES_NEW}) or operating non-transactionally at_the resource level ({@link #PROPAGATION_SUPPORTS}). In the latter case,_the flag will only apply to managed resources within the application,_such as a Hibernate {@code Session}._<p>This just serves as a hint for the actual transaction subsystem__it will <i>not necessarily</i> cause failure of write access attempts._A transaction manager which cannot interpret the read-only hint will_<i>not</i> throw an exception when asked for a read-only transaction._@return {@code true} if the transaction is to be optimized as read-only_@see org.springframework.transaction.support.TransactionSynchronization#beforeCommit(boolean)_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();boolean isReadOnly()_;return,whether,to,optimize,as,a,read,only,transaction,p,the,read,only,flag,applies,to,any,transaction,context,whether,backed,by,an,actual,resource,transaction,link,link,or,operating,non,transactionally,at,the,resource,level,link,in,the,latter,case,the,flag,will,only,apply,to,managed,resources,within,the,application,such,as,a,hibernate,code,session,p,this,just,serves,as,a,hint,for,the,actual,transaction,subsystem,it,will,i,not,necessarily,i,cause,failure,of,write,access,attempts,a,transaction,manager,which,cannot,interpret,the,read,only,hint,will,i,not,i,throw,an,exception,when,asked,for,a,read,only,transaction,return,code,true,if,the,transaction,is,to,be,optimized,as,read,only,see,org,springframework,transaction,support,transaction,synchronization,before,commit,boolean,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;boolean,is,read,only
TransactionDefinition -> int getTimeout()_;1328020251;Return the transaction timeout._<p>Must return a number of seconds, or {@link #TIMEOUT_DEFAULT}._<p>Only makes sense in combination with {@link #PROPAGATION_REQUIRED}_or {@link #PROPAGATION_REQUIRES_NEW}._<p>Note that a transaction manager that does not support timeouts will throw_an exception when given any other timeout than {@link #TIMEOUT_DEFAULT}._@return the transaction timeout;int getTimeout()_;return,the,transaction,timeout,p,must,return,a,number,of,seconds,or,link,p,only,makes,sense,in,combination,with,link,or,link,p,note,that,a,transaction,manager,that,does,not,support,timeouts,will,throw,an,exception,when,given,any,other,timeout,than,link,return,the,transaction,timeout;int,get,timeout
TransactionDefinition -> int getTimeout()_;1356735495;Return the transaction timeout._<p>Must return a number of seconds, or {@link #TIMEOUT_DEFAULT}._<p>Only makes sense in combination with {@link #PROPAGATION_REQUIRED}_or {@link #PROPAGATION_REQUIRES_NEW}._<p>Note that a transaction manager that does not support timeouts will throw_an exception when given any other timeout than {@link #TIMEOUT_DEFAULT}._@return the transaction timeout;int getTimeout()_;return,the,transaction,timeout,p,must,return,a,number,of,seconds,or,link,p,only,makes,sense,in,combination,with,link,or,link,p,note,that,a,transaction,manager,that,does,not,support,timeouts,will,throw,an,exception,when,given,any,other,timeout,than,link,return,the,transaction,timeout;int,get,timeout
TransactionDefinition -> int getTimeout()_;1438003976;Return the transaction timeout._<p>Must return a number of seconds, or {@link #TIMEOUT_DEFAULT}._<p>Only makes sense in combination with {@link #PROPAGATION_REQUIRED}_or {@link #PROPAGATION_REQUIRES_NEW}._<p>Note that a transaction manager that does not support timeouts will throw_an exception when given any other timeout than {@link #TIMEOUT_DEFAULT}._@return the transaction timeout;int getTimeout()_;return,the,transaction,timeout,p,must,return,a,number,of,seconds,or,link,p,only,makes,sense,in,combination,with,link,or,link,p,note,that,a,transaction,manager,that,does,not,support,timeouts,will,throw,an,exception,when,given,any,other,timeout,than,link,return,the,transaction,timeout;int,get,timeout
TransactionDefinition -> int getTimeout()_;1488529786;Return the transaction timeout._<p>Must return a number of seconds, or {@link #TIMEOUT_DEFAULT}._<p>Only makes sense in combination with {@link #PROPAGATION_REQUIRED}_or {@link #PROPAGATION_REQUIRES_NEW}._<p>Note that a transaction manager that does not support timeouts will throw_an exception when given any other timeout than {@link #TIMEOUT_DEFAULT}._@return the transaction timeout;int getTimeout()_;return,the,transaction,timeout,p,must,return,a,number,of,seconds,or,link,p,only,makes,sense,in,combination,with,link,or,link,p,note,that,a,transaction,manager,that,does,not,support,timeouts,will,throw,an,exception,when,given,any,other,timeout,than,link,return,the,transaction,timeout;int,get,timeout
TransactionDefinition -> int getTimeout()_;1495868221;Return the transaction timeout._<p>Must return a number of seconds, or {@link #TIMEOUT_DEFAULT}._<p>Only makes sense in combination with {@link #PROPAGATION_REQUIRED}_or {@link #PROPAGATION_REQUIRES_NEW}._<p>Note that a transaction manager that does not support timeouts will throw_an exception when given any other timeout than {@link #TIMEOUT_DEFAULT}._@return the transaction timeout;int getTimeout()_;return,the,transaction,timeout,p,must,return,a,number,of,seconds,or,link,p,only,makes,sense,in,combination,with,link,or,link,p,note,that,a,transaction,manager,that,does,not,support,timeouts,will,throw,an,exception,when,given,any,other,timeout,than,link,return,the,transaction,timeout;int,get,timeout
TransactionDefinition -> int getTimeout()_;1517867503;Return the transaction timeout._<p>Must return a number of seconds, or {@link #TIMEOUT_DEFAULT}._<p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or_{@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started_transactions._<p>Note that a transaction manager that does not support timeouts will throw_an exception when given any other timeout than {@link #TIMEOUT_DEFAULT}._@return the transaction timeout;int getTimeout()_;return,the,transaction,timeout,p,must,return,a,number,of,seconds,or,link,p,exclusively,designed,for,use,with,link,or,link,since,it,only,applies,to,newly,started,transactions,p,note,that,a,transaction,manager,that,does,not,support,timeouts,will,throw,an,exception,when,given,any,other,timeout,than,link,return,the,transaction,timeout;int,get,timeout
TransactionDefinition -> int getTimeout()_;1528737477;Return the transaction timeout._<p>Must return a number of seconds, or {@link #TIMEOUT_DEFAULT}._<p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or_{@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started_transactions._<p>Note that a transaction manager that does not support timeouts will throw_an exception when given any other timeout than {@link #TIMEOUT_DEFAULT}._@return the transaction timeout;int getTimeout()_;return,the,transaction,timeout,p,must,return,a,number,of,seconds,or,link,p,exclusively,designed,for,use,with,link,or,link,since,it,only,applies,to,newly,started,transactions,p,note,that,a,transaction,manager,that,does,not,support,timeouts,will,throw,an,exception,when,given,any,other,timeout,than,link,return,the,transaction,timeout;int,get,timeout
TransactionDefinition -> int getTimeout()_;1548712211;Return the transaction timeout._<p>Must return a number of seconds, or {@link #TIMEOUT_DEFAULT}._<p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or_{@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started_transactions._<p>Note that a transaction manager that does not support timeouts will throw_an exception when given any other timeout than {@link #TIMEOUT_DEFAULT}._@return the transaction timeout;int getTimeout()_;return,the,transaction,timeout,p,must,return,a,number,of,seconds,or,link,p,exclusively,designed,for,use,with,link,or,link,since,it,only,applies,to,newly,started,transactions,p,note,that,a,transaction,manager,that,does,not,support,timeouts,will,throw,an,exception,when,given,any,other,timeout,than,link,return,the,transaction,timeout;int,get,timeout
TransactionDefinition -> String getName()_;1328020251;Return the name of this transaction. Can be <code>null</code>._<p>This will be used as the transaction name to be shown in a_transaction monitor, if applicable (for example, WebLogic's)._<p>In case of Spring's declarative transactions, the exposed name will be_the <code>fully-qualified class name + "." + method name</code> (by default)._@return the name of this transaction_@see org.springframework.transaction.interceptor.TransactionAspectSupport_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionName();String getName()_;return,the,name,of,this,transaction,can,be,code,null,code,p,this,will,be,used,as,the,transaction,name,to,be,shown,in,a,transaction,monitor,if,applicable,for,example,web,logic,s,p,in,case,of,spring,s,declarative,transactions,the,exposed,name,will,be,the,code,fully,qualified,class,name,method,name,code,by,default,return,the,name,of,this,transaction,see,org,springframework,transaction,interceptor,transaction,aspect,support,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,name;string,get,name
TransactionDefinition -> String getName()_;1356735495;Return the name of this transaction. Can be {@code null}._<p>This will be used as the transaction name to be shown in a_transaction monitor, if applicable (for example, WebLogic's)._<p>In case of Spring's declarative transactions, the exposed name will be_the {@code fully-qualified class name + "." + method name} (by default)._@return the name of this transaction_@see org.springframework.transaction.interceptor.TransactionAspectSupport_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionName();String getName()_;return,the,name,of,this,transaction,can,be,code,null,p,this,will,be,used,as,the,transaction,name,to,be,shown,in,a,transaction,monitor,if,applicable,for,example,web,logic,s,p,in,case,of,spring,s,declarative,transactions,the,exposed,name,will,be,the,code,fully,qualified,class,name,method,name,by,default,return,the,name,of,this,transaction,see,org,springframework,transaction,interceptor,transaction,aspect,support,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,name;string,get,name
TransactionDefinition -> String getName()_;1438003976;Return the name of this transaction. Can be {@code null}._<p>This will be used as the transaction name to be shown in a_transaction monitor, if applicable (for example, WebLogic's)._<p>In case of Spring's declarative transactions, the exposed name will be_the {@code fully-qualified class name + "." + method name} (by default)._@return the name of this transaction_@see org.springframework.transaction.interceptor.TransactionAspectSupport_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionName();String getName()_;return,the,name,of,this,transaction,can,be,code,null,p,this,will,be,used,as,the,transaction,name,to,be,shown,in,a,transaction,monitor,if,applicable,for,example,web,logic,s,p,in,case,of,spring,s,declarative,transactions,the,exposed,name,will,be,the,code,fully,qualified,class,name,method,name,by,default,return,the,name,of,this,transaction,see,org,springframework,transaction,interceptor,transaction,aspect,support,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,name;string,get,name
TransactionDefinition -> String getName()_;1488529786;Return the name of this transaction. Can be {@code null}._<p>This will be used as the transaction name to be shown in a_transaction monitor, if applicable (for example, WebLogic's)._<p>In case of Spring's declarative transactions, the exposed name will be_the {@code fully-qualified class name + "." + method name} (by default)._@return the name of this transaction_@see org.springframework.transaction.interceptor.TransactionAspectSupport_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionName();String getName()_;return,the,name,of,this,transaction,can,be,code,null,p,this,will,be,used,as,the,transaction,name,to,be,shown,in,a,transaction,monitor,if,applicable,for,example,web,logic,s,p,in,case,of,spring,s,declarative,transactions,the,exposed,name,will,be,the,code,fully,qualified,class,name,method,name,by,default,return,the,name,of,this,transaction,see,org,springframework,transaction,interceptor,transaction,aspect,support,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,name;string,get,name
