# id;timestamp;commentText;codeText;commentWords;codeWords
RollbackRuleAttribute -> public int getDepth(Throwable ex);1328020251;Return the depth of the superclass matching._<p><code>0</code> means <code>ex</code> matches exactly. Returns_<code>-1</code> if there is no match. Otherwise, returns depth with the_lowest depth winning.;public int getDepth(Throwable ex) {_		return getDepth(ex.getClass(), 0)__	};return,the,depth,of,the,superclass,matching,p,code,0,code,means,code,ex,code,matches,exactly,returns,code,1,code,if,there,is,no,match,otherwise,returns,depth,with,the,lowest,depth,winning;public,int,get,depth,throwable,ex,return,get,depth,ex,get,class,0
RollbackRuleAttribute -> public int getDepth(Throwable ex);1356735495;Return the depth of the superclass matching._<p>{@code 0} means {@code ex} matches exactly. Returns_{@code -1} if there is no match. Otherwise, returns depth with the_lowest depth winning.;public int getDepth(Throwable ex) {_		return getDepth(ex.getClass(), 0)__	};return,the,depth,of,the,superclass,matching,p,code,0,means,code,ex,matches,exactly,returns,code,1,if,there,is,no,match,otherwise,returns,depth,with,the,lowest,depth,winning;public,int,get,depth,throwable,ex,return,get,depth,ex,get,class,0
RollbackRuleAttribute -> public int getDepth(Throwable ex);1385412762;Return the depth of the superclass matching._<p>{@code 0} means {@code ex} matches exactly. Returns_{@code -1} if there is no match. Otherwise, returns depth with the_lowest depth winning.;public int getDepth(Throwable ex) {_		return getDepth(ex.getClass(), 0)__	};return,the,depth,of,the,superclass,matching,p,code,0,means,code,ex,matches,exactly,returns,code,1,if,there,is,no,match,otherwise,returns,depth,with,the,lowest,depth,winning;public,int,get,depth,throwable,ex,return,get,depth,ex,get,class,0
RollbackRuleAttribute -> public int getDepth(Throwable ex);1392410380;Return the depth of the superclass matching._<p>{@code 0} means {@code ex} matches exactly. Returns_{@code -1} if there is no match. Otherwise, returns depth with the_lowest depth winning.;public int getDepth(Throwable ex) {_		return getDepth(ex.getClass(), 0)__	};return,the,depth,of,the,superclass,matching,p,code,0,means,code,ex,matches,exactly,returns,code,1,if,there,is,no,match,otherwise,returns,depth,with,the,lowest,depth,winning;public,int,get,depth,throwable,ex,return,get,depth,ex,get,class,0
RollbackRuleAttribute -> public int getDepth(Throwable ex);1432125256;Return the depth of the superclass matching._<p>{@code 0} means {@code ex} matches exactly. Returns_{@code -1} if there is no match. Otherwise, returns depth with the_lowest depth winning.;public int getDepth(Throwable ex) {_		return getDepth(ex.getClass(), 0)__	};return,the,depth,of,the,superclass,matching,p,code,0,means,code,ex,matches,exactly,returns,code,1,if,there,is,no,match,otherwise,returns,depth,with,the,lowest,depth,winning;public,int,get,depth,throwable,ex,return,get,depth,ex,get,class,0
RollbackRuleAttribute -> public int getDepth(Throwable ex);1530174524;Return the depth of the superclass matching._<p>{@code 0} means {@code ex} matches exactly. Returns_{@code -1} if there is no match. Otherwise, returns depth with the_lowest depth winning.;public int getDepth(Throwable ex) {_		return getDepth(ex.getClass(), 0)__	};return,the,depth,of,the,superclass,matching,p,code,0,means,code,ex,matches,exactly,returns,code,1,if,there,is,no,match,otherwise,returns,depth,with,the,lowest,depth,winning;public,int,get,depth,throwable,ex,return,get,depth,ex,get,class,0
RollbackRuleAttribute -> public RollbackRuleAttribute(Class clazz);1328020251;Create a new instance of the <code>RollbackRuleAttribute</code> class._<p>This is the preferred way to construct a rollback rule that matches_the supplied {@link Exception} class (and subclasses)._@param clazz throwable class_ must be {@link Throwable} or a subclass_of <code>Throwable</code>_@throws IllegalArgumentException if the supplied <code>clazz</code> is_not a <code>Throwable</code> type or is <code>null</code>;public RollbackRuleAttribute(Class clazz) {_		Assert.notNull(clazz, "'clazz' cannot be null.")__		if (!Throwable.class.isAssignableFrom(clazz)) {_			throw new IllegalArgumentException(_					"Cannot construct rollback rule from [" + clazz.getName() + "]: it's not a Throwable")__		}_		this.exceptionName = clazz.getName()__	};create,a,new,instance,of,the,code,rollback,rule,attribute,code,class,p,this,is,the,preferred,way,to,construct,a,rollback,rule,that,matches,the,supplied,link,exception,class,and,subclasses,param,clazz,throwable,class,must,be,link,throwable,or,a,subclass,of,code,throwable,code,throws,illegal,argument,exception,if,the,supplied,code,clazz,code,is,not,a,code,throwable,code,type,or,is,code,null,code;public,rollback,rule,attribute,class,clazz,assert,not,null,clazz,clazz,cannot,be,null,if,throwable,class,is,assignable,from,clazz,throw,new,illegal,argument,exception,cannot,construct,rollback,rule,from,clazz,get,name,it,s,not,a,throwable,this,exception,name,clazz,get,name
RollbackRuleAttribute -> public RollbackRuleAttribute(Class clazz);1356735495;Create a new instance of the {@code RollbackRuleAttribute} class._<p>This is the preferred way to construct a rollback rule that matches_the supplied {@link Exception} class (and subclasses)._@param clazz throwable class_ must be {@link Throwable} or a subclass_of {@code Throwable}_@throws IllegalArgumentException if the supplied {@code clazz} is_not a {@code Throwable} type or is {@code null};public RollbackRuleAttribute(Class clazz) {_		Assert.notNull(clazz, "'clazz' cannot be null.")__		if (!Throwable.class.isAssignableFrom(clazz)) {_			throw new IllegalArgumentException(_					"Cannot construct rollback rule from [" + clazz.getName() + "]: it's not a Throwable")__		}_		this.exceptionName = clazz.getName()__	};create,a,new,instance,of,the,code,rollback,rule,attribute,class,p,this,is,the,preferred,way,to,construct,a,rollback,rule,that,matches,the,supplied,link,exception,class,and,subclasses,param,clazz,throwable,class,must,be,link,throwable,or,a,subclass,of,code,throwable,throws,illegal,argument,exception,if,the,supplied,code,clazz,is,not,a,code,throwable,type,or,is,code,null;public,rollback,rule,attribute,class,clazz,assert,not,null,clazz,clazz,cannot,be,null,if,throwable,class,is,assignable,from,clazz,throw,new,illegal,argument,exception,cannot,construct,rollback,rule,from,clazz,get,name,it,s,not,a,throwable,this,exception,name,clazz,get,name
RollbackRuleAttribute -> public String getExceptionName();1328020251;Return the pattern for the exception name.;public String getExceptionName() {_		return exceptionName__	};return,the,pattern,for,the,exception,name;public,string,get,exception,name,return,exception,name
RollbackRuleAttribute -> public String getExceptionName();1356735495;Return the pattern for the exception name.;public String getExceptionName() {_		return exceptionName__	};return,the,pattern,for,the,exception,name;public,string,get,exception,name,return,exception,name
RollbackRuleAttribute -> public String getExceptionName();1385412762;Return the pattern for the exception name.;public String getExceptionName() {_		return exceptionName__	};return,the,pattern,for,the,exception,name;public,string,get,exception,name,return,exception,name
RollbackRuleAttribute -> public String getExceptionName();1392410380;Return the pattern for the exception name.;public String getExceptionName() {_		return exceptionName__	};return,the,pattern,for,the,exception,name;public,string,get,exception,name,return,exception,name
RollbackRuleAttribute -> public String getExceptionName();1432125256;Return the pattern for the exception name.;public String getExceptionName() {_		return exceptionName__	};return,the,pattern,for,the,exception,name;public,string,get,exception,name,return,exception,name
RollbackRuleAttribute -> public String getExceptionName();1530174524;Return the pattern for the exception name.;public String getExceptionName() {_		return this.exceptionName__	};return,the,pattern,for,the,exception,name;public,string,get,exception,name,return,this,exception,name
RollbackRuleAttribute -> public RollbackRuleAttribute(Class<?> clazz);1385412762;Create a new instance of the {@code RollbackRuleAttribute} class._<p>This is the preferred way to construct a rollback rule that matches_the supplied {@link Exception} class (and subclasses)._@param clazz throwable class_ must be {@link Throwable} or a subclass_of {@code Throwable}_@throws IllegalArgumentException if the supplied {@code clazz} is_not a {@code Throwable} type or is {@code null};public RollbackRuleAttribute(Class<?> clazz) {_		Assert.notNull(clazz, "'clazz' cannot be null.")__		if (!Throwable.class.isAssignableFrom(clazz)) {_			throw new IllegalArgumentException(_					"Cannot construct rollback rule from [" + clazz.getName() + "]: it's not a Throwable")__		}_		this.exceptionName = clazz.getName()__	};create,a,new,instance,of,the,code,rollback,rule,attribute,class,p,this,is,the,preferred,way,to,construct,a,rollback,rule,that,matches,the,supplied,link,exception,class,and,subclasses,param,clazz,throwable,class,must,be,link,throwable,or,a,subclass,of,code,throwable,throws,illegal,argument,exception,if,the,supplied,code,clazz,is,not,a,code,throwable,type,or,is,code,null;public,rollback,rule,attribute,class,clazz,assert,not,null,clazz,clazz,cannot,be,null,if,throwable,class,is,assignable,from,clazz,throw,new,illegal,argument,exception,cannot,construct,rollback,rule,from,clazz,get,name,it,s,not,a,throwable,this,exception,name,clazz,get,name
RollbackRuleAttribute -> public RollbackRuleAttribute(Class<?> clazz);1392410380;Create a new instance of the {@code RollbackRuleAttribute} class._<p>This is the preferred way to construct a rollback rule that matches_the supplied {@link Exception} class (and subclasses)._@param clazz throwable class_ must be {@link Throwable} or a subclass_of {@code Throwable}_@throws IllegalArgumentException if the supplied {@code clazz} is_not a {@code Throwable} type or is {@code null};public RollbackRuleAttribute(Class<?> clazz) {_		Assert.notNull(clazz, "'clazz' cannot be null")__		if (!Throwable.class.isAssignableFrom(clazz)) {_			throw new IllegalArgumentException(_					"Cannot construct rollback rule from [" + clazz.getName() + "]: it's not a Throwable")__		}_		this.exceptionName = clazz.getName()__	};create,a,new,instance,of,the,code,rollback,rule,attribute,class,p,this,is,the,preferred,way,to,construct,a,rollback,rule,that,matches,the,supplied,link,exception,class,and,subclasses,param,clazz,throwable,class,must,be,link,throwable,or,a,subclass,of,code,throwable,throws,illegal,argument,exception,if,the,supplied,code,clazz,is,not,a,code,throwable,type,or,is,code,null;public,rollback,rule,attribute,class,clazz,assert,not,null,clazz,clazz,cannot,be,null,if,throwable,class,is,assignable,from,clazz,throw,new,illegal,argument,exception,cannot,construct,rollback,rule,from,clazz,get,name,it,s,not,a,throwable,this,exception,name,clazz,get,name
RollbackRuleAttribute -> public RollbackRuleAttribute(Class<?> clazz);1432125256;Create a new instance of the {@code RollbackRuleAttribute} class._<p>This is the preferred way to construct a rollback rule that matches_the supplied {@link Exception} class (and subclasses)._@param clazz throwable class_ must be {@link Throwable} or a subclass_of {@code Throwable}_@throws IllegalArgumentException if the supplied {@code clazz} is_not a {@code Throwable} type or is {@code null};public RollbackRuleAttribute(Class<?> clazz) {_		Assert.notNull(clazz, "'clazz' cannot be null")__		if (!Throwable.class.isAssignableFrom(clazz)) {_			throw new IllegalArgumentException(_					"Cannot construct rollback rule from [" + clazz.getName() + "]: it's not a Throwable")__		}_		this.exceptionName = clazz.getName()__	};create,a,new,instance,of,the,code,rollback,rule,attribute,class,p,this,is,the,preferred,way,to,construct,a,rollback,rule,that,matches,the,supplied,link,exception,class,and,subclasses,param,clazz,throwable,class,must,be,link,throwable,or,a,subclass,of,code,throwable,throws,illegal,argument,exception,if,the,supplied,code,clazz,is,not,a,code,throwable,type,or,is,code,null;public,rollback,rule,attribute,class,clazz,assert,not,null,clazz,clazz,cannot,be,null,if,throwable,class,is,assignable,from,clazz,throw,new,illegal,argument,exception,cannot,construct,rollback,rule,from,clazz,get,name,it,s,not,a,throwable,this,exception,name,clazz,get,name
RollbackRuleAttribute -> public RollbackRuleAttribute(Class<?> clazz);1530174524;Create a new instance of the {@code RollbackRuleAttribute} class._<p>This is the preferred way to construct a rollback rule that matches_the supplied {@link Exception} class (and subclasses)._@param clazz throwable class_ must be {@link Throwable} or a subclass_of {@code Throwable}_@throws IllegalArgumentException if the supplied {@code clazz} is_not a {@code Throwable} type or is {@code null};public RollbackRuleAttribute(Class<?> clazz) {_		Assert.notNull(clazz, "'clazz' cannot be null")__		if (!Throwable.class.isAssignableFrom(clazz)) {_			throw new IllegalArgumentException(_					"Cannot construct rollback rule from [" + clazz.getName() + "]: it's not a Throwable")__		}_		this.exceptionName = clazz.getName()__	};create,a,new,instance,of,the,code,rollback,rule,attribute,class,p,this,is,the,preferred,way,to,construct,a,rollback,rule,that,matches,the,supplied,link,exception,class,and,subclasses,param,clazz,throwable,class,must,be,link,throwable,or,a,subclass,of,code,throwable,throws,illegal,argument,exception,if,the,supplied,code,clazz,is,not,a,code,throwable,type,or,is,code,null;public,rollback,rule,attribute,class,clazz,assert,not,null,clazz,clazz,cannot,be,null,if,throwable,class,is,assignable,from,clazz,throw,new,illegal,argument,exception,cannot,construct,rollback,rule,from,clazz,get,name,it,s,not,a,throwable,this,exception,name,clazz,get,name
RollbackRuleAttribute -> public RollbackRuleAttribute(String exceptionName);1328020251;Create a new instance of the <code>RollbackRuleAttribute</code> class_for the given <code>exceptionName</code>._<p>This can be a substring, with no wildcard support at present. A value_of "ServletException" would match_<code>javax.servlet.ServletException</code> and subclasses, for example._<p><b>NB:</b> Consider carefully how specific the pattern is, and_whether to include package information (which is not mandatory). For_example, "Exception" will match nearly anything, and will probably hide_other rules. "java.lang.Exception" would be correct if "Exception" was_meant to define a rule for all checked exceptions. With more unusual_exception names such as "BaseBusinessException" there's no need to use a_fully package-qualified name._@param exceptionName the exception name pattern_ can also be a fully_package-qualified class name_@throws IllegalArgumentException if the supplied_<code>exceptionName</code> is <code>null</code> or empty;public RollbackRuleAttribute(String exceptionName) {_		Assert.hasText(exceptionName, "'exceptionName' cannot be null or empty.")__		this.exceptionName = exceptionName__	};create,a,new,instance,of,the,code,rollback,rule,attribute,code,class,for,the,given,code,exception,name,code,p,this,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,code,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,is,not,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fully,package,qualified,name,param,exception,name,the,exception,name,pattern,can,also,be,a,fully,package,qualified,class,name,throws,illegal,argument,exception,if,the,supplied,code,exception,name,code,is,code,null,code,or,empty;public,rollback,rule,attribute,string,exception,name,assert,has,text,exception,name,exception,name,cannot,be,null,or,empty,this,exception,name,exception,name
RollbackRuleAttribute -> public RollbackRuleAttribute(String exceptionName);1356735495;Create a new instance of the {@code RollbackRuleAttribute} class_for the given {@code exceptionName}._<p>This can be a substring, with no wildcard support at present. A value_of "ServletException" would match_{@code javax.servlet.ServletException} and subclasses, for example._<p><b>NB:</b> Consider carefully how specific the pattern is, and_whether to include package information (which is not mandatory). For_example, "Exception" will match nearly anything, and will probably hide_other rules. "java.lang.Exception" would be correct if "Exception" was_meant to define a rule for all checked exceptions. With more unusual_exception names such as "BaseBusinessException" there's no need to use a_fully package-qualified name._@param exceptionName the exception name pattern_ can also be a fully_package-qualified class name_@throws IllegalArgumentException if the supplied_{@code exceptionName} is {@code null} or empty;public RollbackRuleAttribute(String exceptionName) {_		Assert.hasText(exceptionName, "'exceptionName' cannot be null or empty.")__		this.exceptionName = exceptionName__	};create,a,new,instance,of,the,code,rollback,rule,attribute,class,for,the,given,code,exception,name,p,this,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,is,not,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fully,package,qualified,name,param,exception,name,the,exception,name,pattern,can,also,be,a,fully,package,qualified,class,name,throws,illegal,argument,exception,if,the,supplied,code,exception,name,is,code,null,or,empty;public,rollback,rule,attribute,string,exception,name,assert,has,text,exception,name,exception,name,cannot,be,null,or,empty,this,exception,name,exception,name
RollbackRuleAttribute -> public RollbackRuleAttribute(String exceptionName);1385412762;Create a new instance of the {@code RollbackRuleAttribute} class_for the given {@code exceptionName}._<p>This can be a substring, with no wildcard support at present. A value_of "ServletException" would match_{@code javax.servlet.ServletException} and subclasses, for example._<p><b>NB:</b> Consider carefully how specific the pattern is, and_whether to include package information (which is not mandatory). For_example, "Exception" will match nearly anything, and will probably hide_other rules. "java.lang.Exception" would be correct if "Exception" was_meant to define a rule for all checked exceptions. With more unusual_exception names such as "BaseBusinessException" there's no need to use a_fully package-qualified name._@param exceptionName the exception name pattern_ can also be a fully_package-qualified class name_@throws IllegalArgumentException if the supplied_{@code exceptionName} is {@code null} or empty;public RollbackRuleAttribute(String exceptionName) {_		Assert.hasText(exceptionName, "'exceptionName' cannot be null or empty.")__		this.exceptionName = exceptionName__	};create,a,new,instance,of,the,code,rollback,rule,attribute,class,for,the,given,code,exception,name,p,this,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,is,not,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fully,package,qualified,name,param,exception,name,the,exception,name,pattern,can,also,be,a,fully,package,qualified,class,name,throws,illegal,argument,exception,if,the,supplied,code,exception,name,is,code,null,or,empty;public,rollback,rule,attribute,string,exception,name,assert,has,text,exception,name,exception,name,cannot,be,null,or,empty,this,exception,name,exception,name
RollbackRuleAttribute -> public RollbackRuleAttribute(String exceptionName);1392410380;Create a new instance of the {@code RollbackRuleAttribute} class_for the given {@code exceptionName}._<p>This can be a substring, with no wildcard support at present. A value_of "ServletException" would match_{@code javax.servlet.ServletException} and subclasses, for example._<p><b>NB:</b> Consider carefully how specific the pattern is, and_whether to include package information (which is not mandatory). For_example, "Exception" will match nearly anything, and will probably hide_other rules. "java.lang.Exception" would be correct if "Exception" was_meant to define a rule for all checked exceptions. With more unusual_exception names such as "BaseBusinessException" there's no need to use a_fully package-qualified name._@param exceptionName the exception name pattern_ can also be a fully_package-qualified class name_@throws IllegalArgumentException if the supplied_{@code exceptionName} is {@code null} or empty;public RollbackRuleAttribute(String exceptionName) {_		Assert.hasText(exceptionName, "'exceptionName' cannot be null or empty")__		this.exceptionName = exceptionName__	};create,a,new,instance,of,the,code,rollback,rule,attribute,class,for,the,given,code,exception,name,p,this,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,is,not,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fully,package,qualified,name,param,exception,name,the,exception,name,pattern,can,also,be,a,fully,package,qualified,class,name,throws,illegal,argument,exception,if,the,supplied,code,exception,name,is,code,null,or,empty;public,rollback,rule,attribute,string,exception,name,assert,has,text,exception,name,exception,name,cannot,be,null,or,empty,this,exception,name,exception,name
RollbackRuleAttribute -> public RollbackRuleAttribute(String exceptionName);1432125256;Create a new instance of the {@code RollbackRuleAttribute} class_for the given {@code exceptionName}._<p>This can be a substring, with no wildcard support at present. A value_of "ServletException" would match_{@code javax.servlet.ServletException} and subclasses, for example._<p><b>NB:</b> Consider carefully how specific the pattern is, and_whether to include package information (which is not mandatory). For_example, "Exception" will match nearly anything, and will probably hide_other rules. "java.lang.Exception" would be correct if "Exception" was_meant to define a rule for all checked exceptions. With more unusual_exception names such as "BaseBusinessException" there's no need to use a_fully package-qualified name._@param exceptionName the exception name pattern_ can also be a fully_package-qualified class name_@throws IllegalArgumentException if the supplied_{@code exceptionName} is {@code null} or empty;public RollbackRuleAttribute(String exceptionName) {_		Assert.hasText(exceptionName, "'exceptionName' cannot be null or empty")__		this.exceptionName = exceptionName__	};create,a,new,instance,of,the,code,rollback,rule,attribute,class,for,the,given,code,exception,name,p,this,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,is,not,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fully,package,qualified,name,param,exception,name,the,exception,name,pattern,can,also,be,a,fully,package,qualified,class,name,throws,illegal,argument,exception,if,the,supplied,code,exception,name,is,code,null,or,empty;public,rollback,rule,attribute,string,exception,name,assert,has,text,exception,name,exception,name,cannot,be,null,or,empty,this,exception,name,exception,name
RollbackRuleAttribute -> public RollbackRuleAttribute(String exceptionName);1530174524;Create a new instance of the {@code RollbackRuleAttribute} class_for the given {@code exceptionName}._<p>This can be a substring, with no wildcard support at present. A value_of "ServletException" would match_{@code javax.servlet.ServletException} and subclasses, for example._<p><b>NB:</b> Consider carefully how specific the pattern is, and_whether to include package information (which is not mandatory). For_example, "Exception" will match nearly anything, and will probably hide_other rules. "java.lang.Exception" would be correct if "Exception" was_meant to define a rule for all checked exceptions. With more unusual_exception names such as "BaseBusinessException" there's no need to use a_fully package-qualified name._@param exceptionName the exception name pattern_ can also be a fully_package-qualified class name_@throws IllegalArgumentException if the supplied_{@code exceptionName} is {@code null} or empty;public RollbackRuleAttribute(String exceptionName) {_		Assert.hasText(exceptionName, "'exceptionName' cannot be null or empty")__		this.exceptionName = exceptionName__	};create,a,new,instance,of,the,code,rollback,rule,attribute,class,for,the,given,code,exception,name,p,this,can,be,a,substring,with,no,wildcard,support,at,present,a,value,of,servlet,exception,would,match,code,javax,servlet,servlet,exception,and,subclasses,for,example,p,b,nb,b,consider,carefully,how,specific,the,pattern,is,and,whether,to,include,package,information,which,is,not,mandatory,for,example,exception,will,match,nearly,anything,and,will,probably,hide,other,rules,java,lang,exception,would,be,correct,if,exception,was,meant,to,define,a,rule,for,all,checked,exceptions,with,more,unusual,exception,names,such,as,base,business,exception,there,s,no,need,to,use,a,fully,package,qualified,name,param,exception,name,the,exception,name,pattern,can,also,be,a,fully,package,qualified,class,name,throws,illegal,argument,exception,if,the,supplied,code,exception,name,is,code,null,or,empty;public,rollback,rule,attribute,string,exception,name,assert,has,text,exception,name,exception,name,cannot,be,null,or,empty,this,exception,name,exception,name
