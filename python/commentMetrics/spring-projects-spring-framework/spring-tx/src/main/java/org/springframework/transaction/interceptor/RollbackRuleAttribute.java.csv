commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the pattern for the exception name.  */ ;/**  * Return the pattern for the exception name.  */ public String getExceptionName() {     return this.exceptionName. }
true;public;1;3;/**  * Return the depth of the superclass matching.  * <p>{@code 0} means {@code ex} matches exactly. Returns  * {@code -1} if there is no match. Otherwise, returns depth with the  * lowest depth winning.  */ ;/**  * Return the depth of the superclass matching.  * <p>{@code 0} means {@code ex} matches exactly. Returns  * {@code -1} if there is no match. Otherwise, returns depth with the  * lowest depth winning.  */ public int getDepth(Throwable ex) {     return getDepth(ex.getClass(), 0). }
false;private;2;11;;private int getDepth(Class<?> exceptionClass, int depth) {     if (exceptionClass.getName().contains(this.exceptionName)) {         // Found it!         return depth.     }     // If we've gone as far as we can go and haven't found it...     if (exceptionClass == Throwable.class) {         return -1.     }     return getDepth(exceptionClass.getSuperclass(), depth + 1). }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof RollbackRuleAttribute)) {         return false.     }     RollbackRuleAttribute rhs = (RollbackRuleAttribute) other.     return this.exceptionName.equals(rhs.exceptionName). }
false;public;0;4;;@Override public int hashCode() {     return this.exceptionName.hashCode(). }
false;public;0;4;;@Override public String toString() {     return "RollbackRuleAttribute with pattern [" + this.exceptionName + "]". }
